{"version":3,"file":"static\\development\\pages\\index.js","sources":["webpack:///./assets/img/asme.js","webpack:///./assets/img/chanakya.js","webpack:///./assets/img/corona.js","webpack:///./assets/img/ieee.js","webpack:///./assets/img/image 2.png","webpack:///./assets/img/josaa.js","webpack:///./assets/img/nitp.png","webpack:///./assets/img/nss.js","webpack:///./assets/img/teqip.js","webpack:///./assets/logo512.png","webpack:///./components/footer.js","webpack:///./components/home.js","webpack:///./components/home/importantlink.js","webpack:///./components/home/newscard.js","webpack:///./components/navbar.js","webpack:///./node_modules/ajv-keywords/index.js","webpack:///./node_modules/ajv-keywords/keywords/_formatLimit.js","webpack:///./node_modules/ajv-keywords/keywords/_util.js","webpack:///./node_modules/ajv-keywords/keywords/allRequired.js","webpack:///./node_modules/ajv-keywords/keywords/anyRequired.js","webpack:///./node_modules/ajv-keywords/keywords/deepProperties.js","webpack:///./node_modules/ajv-keywords/keywords/deepRequired.js","webpack:///./node_modules/ajv-keywords/keywords/dotjs/_formatLimit.js","webpack:///./node_modules/ajv-keywords/keywords/dotjs/patternRequired.js","webpack:///./node_modules/ajv-keywords/keywords/dotjs/switch.js","webpack:///./node_modules/ajv-keywords/keywords/dynamicDefaults.js","webpack:///./node_modules/ajv-keywords/keywords/formatMaximum.js","webpack:///./node_modules/ajv-keywords/keywords/formatMinimum.js","webpack:///./node_modules/ajv-keywords/keywords/index.js","webpack:///./node_modules/ajv-keywords/keywords/instanceof.js","webpack:///./node_modules/ajv-keywords/keywords/oneRequired.js","webpack:///./node_modules/ajv-keywords/keywords/patternRequired.js","webpack:///./node_modules/ajv-keywords/keywords/prohibited.js","webpack:///./node_modules/ajv-keywords/keywords/range.js","webpack:///./node_modules/ajv-keywords/keywords/regexp.js","webpack:///./node_modules/ajv-keywords/keywords/select.js","webpack:///./node_modules/ajv-keywords/keywords/switch.js","webpack:///./node_modules/ajv-keywords/keywords/transform.js","webpack:///./node_modules/ajv-keywords/keywords/typeof.js","webpack:///./node_modules/ajv-keywords/keywords/uniqueItemProperties.js","webpack:///./node_modules/ajv/lib/ajv.js","webpack:///./node_modules/ajv/lib/cache.js","webpack:///./node_modules/ajv/lib/compile/async.js","webpack:///./node_modules/ajv/lib/compile/error_classes.js","webpack:///./node_modules/ajv/lib/compile/formats.js","webpack:///./node_modules/ajv/lib/compile/index.js","webpack:///./node_modules/ajv/lib/compile/resolve.js","webpack:///./node_modules/ajv/lib/compile/rules.js","webpack:///./node_modules/ajv/lib/compile/schema_obj.js","webpack:///./node_modules/ajv/lib/compile/ucs2length.js","webpack:///./node_modules/ajv/lib/compile/util.js","webpack:///./node_modules/ajv/lib/data.js","webpack:///./node_modules/ajv/lib/definition_schema.js","webpack:///./node_modules/ajv/lib/dotjs/_limit.js","webpack:///./node_modules/ajv/lib/dotjs/_limitItems.js","webpack:///./node_modules/ajv/lib/dotjs/_limitLength.js","webpack:///./node_modules/ajv/lib/dotjs/_limitProperties.js","webpack:///./node_modules/ajv/lib/dotjs/allOf.js","webpack:///./node_modules/ajv/lib/dotjs/anyOf.js","webpack:///./node_modules/ajv/lib/dotjs/comment.js","webpack:///./node_modules/ajv/lib/dotjs/const.js","webpack:///./node_modules/ajv/lib/dotjs/contains.js","webpack:///./node_modules/ajv/lib/dotjs/custom.js","webpack:///./node_modules/ajv/lib/dotjs/dependencies.js","webpack:///./node_modules/ajv/lib/dotjs/enum.js","webpack:///./node_modules/ajv/lib/dotjs/format.js","webpack:///./node_modules/ajv/lib/dotjs/if.js","webpack:///./node_modules/ajv/lib/dotjs/index.js","webpack:///./node_modules/ajv/lib/dotjs/items.js","webpack:///./node_modules/ajv/lib/dotjs/multipleOf.js","webpack:///./node_modules/ajv/lib/dotjs/not.js","webpack:///./node_modules/ajv/lib/dotjs/oneOf.js","webpack:///./node_modules/ajv/lib/dotjs/pattern.js","webpack:///./node_modules/ajv/lib/dotjs/properties.js","webpack:///./node_modules/ajv/lib/dotjs/propertyNames.js","webpack:///./node_modules/ajv/lib/dotjs/ref.js","webpack:///./node_modules/ajv/lib/dotjs/required.js","webpack:///./node_modules/ajv/lib/dotjs/uniqueItems.js","webpack:///./node_modules/ajv/lib/dotjs/validate.js","webpack:///./node_modules/ajv/lib/keyword.js","webpack:///./node_modules/asn1.js/lib/asn1.js","webpack:///./node_modules/asn1.js/lib/asn1/api.js","webpack:///./node_modules/asn1.js/lib/asn1/base/buffer.js","webpack:///./node_modules/asn1.js/lib/asn1/base/index.js","webpack:///./node_modules/asn1.js/lib/asn1/base/node.js","webpack:///./node_modules/asn1.js/lib/asn1/base/reporter.js","webpack:///./node_modules/asn1.js/lib/asn1/constants/der.js","webpack:///./node_modules/asn1.js/lib/asn1/constants/index.js","webpack:///./node_modules/asn1.js/lib/asn1/decoders/der.js","webpack:///./node_modules/asn1.js/lib/asn1/decoders/index.js","webpack:///./node_modules/asn1.js/lib/asn1/decoders/pem.js","webpack:///./node_modules/asn1.js/lib/asn1/encoders/der.js","webpack:///./node_modules/asn1.js/lib/asn1/encoders/index.js","webpack:///./node_modules/asn1.js/lib/asn1/encoders/pem.js","webpack:///./node_modules/base64-js/index.js","webpack:///./node_modules/big.js/big.js","webpack:///./node_modules/bn.js/lib/bn.js","webpack:///./node_modules/brorand/index.js","webpack:///./node_modules/browserify-aes/aes.js","webpack:///./node_modules/browserify-aes/authCipher.js","webpack:///./node_modules/browserify-aes/browser.js","webpack:///./node_modules/browserify-aes/decrypter.js","webpack:///./node_modules/browserify-aes/encrypter.js","webpack:///./node_modules/browserify-aes/ghash.js","webpack:///./node_modules/browserify-aes/incr32.js","webpack:///./node_modules/browserify-aes/modes/cbc.js","webpack:///./node_modules/browserify-aes/modes/cfb.js","webpack:///./node_modules/browserify-aes/modes/cfb1.js","webpack:///./node_modules/browserify-aes/modes/cfb8.js","webpack:///./node_modules/browserify-aes/modes/ctr.js","webpack:///./node_modules/browserify-aes/modes/ecb.js","webpack:///./node_modules/browserify-aes/modes/index.js","webpack:///./node_modules/browserify-aes/modes/ofb.js","webpack:///./node_modules/browserify-aes/streamCipher.js","webpack:///./node_modules/browserify-cipher/browser.js","webpack:///./node_modules/browserify-des/index.js","webpack:///./node_modules/browserify-des/modes.js","webpack:///./node_modules/browserify-rsa/index.js","webpack:///./node_modules/browserify-sign/algos.js","webpack:///./node_modules/browserify-sign/browser/index.js","webpack:///./node_modules/browserify-sign/browser/sign.js","webpack:///./node_modules/browserify-sign/browser/verify.js","webpack:///./node_modules/browserify-sign/node_modules/bn.js/lib/bn.js","webpack:///./node_modules/browserify-sign/node_modules/readable-stream/errors-browser.js","webpack:///./node_modules/browserify-sign/node_modules/readable-stream/lib/_stream_duplex.js","webpack:///./node_modules/browserify-sign/node_modules/readable-stream/lib/_stream_passthrough.js","webpack:///./node_modules/browserify-sign/node_modules/readable-stream/lib/_stream_readable.js","webpack:///./node_modules/browserify-sign/node_modules/readable-stream/lib/_stream_transform.js","webpack:///./node_modules/browserify-sign/node_modules/readable-stream/lib/_stream_writable.js","webpack:///./node_modules/browserify-sign/node_modules/readable-stream/lib/internal/streams/async_iterator.js","webpack:///./node_modules/browserify-sign/node_modules/readable-stream/lib/internal/streams/buffer_list.js","webpack:///./node_modules/browserify-sign/node_modules/readable-stream/lib/internal/streams/destroy.js","webpack:///./node_modules/browserify-sign/node_modules/readable-stream/lib/internal/streams/end-of-stream.js","webpack:///./node_modules/browserify-sign/node_modules/readable-stream/lib/internal/streams/from-browser.js","webpack:///./node_modules/browserify-sign/node_modules/readable-stream/lib/internal/streams/pipeline.js","webpack:///./node_modules/browserify-sign/node_modules/readable-stream/lib/internal/streams/state.js","webpack:///./node_modules/browserify-sign/node_modules/readable-stream/lib/internal/streams/stream-browser.js","webpack:///./node_modules/browserify-sign/node_modules/readable-stream/readable-browser.js","webpack:///./node_modules/buffer-xor/index.js","webpack:///./node_modules/buffer/index.js","webpack:///./node_modules/cipher-base/index.js","webpack:///./node_modules/core-util-is/lib/util.js","webpack:///./node_modules/create-ecdh/browser.js","webpack:///./node_modules/create-hash/browser.js","webpack:///./node_modules/create-hash/md5.js","webpack:///./node_modules/create-hmac/browser.js","webpack:///./node_modules/create-hmac/legacy.js","webpack:///./node_modules/crypto-browserify/index.js","webpack:///./node_modules/des.js/lib/des.js","webpack:///./node_modules/des.js/lib/des/cbc.js","webpack:///./node_modules/des.js/lib/des/cipher.js","webpack:///./node_modules/des.js/lib/des/des.js","webpack:///./node_modules/des.js/lib/des/ede.js","webpack:///./node_modules/des.js/lib/des/utils.js","webpack:///./node_modules/diffie-hellman/browser.js","webpack:///./node_modules/diffie-hellman/lib/dh.js","webpack:///./node_modules/diffie-hellman/lib/generatePrime.js","webpack:///./node_modules/elliptic/lib/elliptic.js","webpack:///./node_modules/elliptic/lib/elliptic/curve/base.js","webpack:///./node_modules/elliptic/lib/elliptic/curve/edwards.js","webpack:///./node_modules/elliptic/lib/elliptic/curve/index.js","webpack:///./node_modules/elliptic/lib/elliptic/curve/mont.js","webpack:///./node_modules/elliptic/lib/elliptic/curve/short.js","webpack:///./node_modules/elliptic/lib/elliptic/curves.js","webpack:///./node_modules/elliptic/lib/elliptic/ec/index.js","webpack:///./node_modules/elliptic/lib/elliptic/ec/key.js","webpack:///./node_modules/elliptic/lib/elliptic/ec/signature.js","webpack:///./node_modules/elliptic/lib/elliptic/eddsa/index.js","webpack:///./node_modules/elliptic/lib/elliptic/eddsa/key.js","webpack:///./node_modules/elliptic/lib/elliptic/eddsa/signature.js","webpack:///./node_modules/elliptic/lib/elliptic/precomputed/secp256k1.js","webpack:///./node_modules/elliptic/lib/elliptic/utils.js","webpack:///./node_modules/emojis-list/index.js","webpack:///./node_modules/events/events.js","webpack:///./node_modules/evp_bytestokey/index.js","webpack:///./node_modules/fast-deep-equal/index.js","webpack:///./node_modules/fast-json-stable-stringify/index.js","webpack:///./node_modules/file-loader/dist/cjs.js","webpack:///./node_modules/file-loader/dist/index.js","webpack:///./node_modules/file-loader/node_modules/json5/dist/index.js","webpack:///./node_modules/file-loader/node_modules/loader-utils/lib/getCurrentRequest.js","webpack:///./node_modules/file-loader/node_modules/loader-utils/lib/getHashDigest.js","webpack:///./node_modules/file-loader/node_modules/loader-utils/lib/getOptions.js","webpack:///./node_modules/file-loader/node_modules/loader-utils/lib/getRemainingRequest.js","webpack:///./node_modules/file-loader/node_modules/loader-utils/lib/index.js","webpack:///./node_modules/file-loader/node_modules/loader-utils/lib/interpolateName.js","webpack:///./node_modules/file-loader/node_modules/loader-utils/lib/isUrlRequest.js","webpack:///./node_modules/file-loader/node_modules/loader-utils/lib/parseQuery.js","webpack:///./node_modules/file-loader/node_modules/loader-utils/lib/parseString.js","webpack:///./node_modules/file-loader/node_modules/loader-utils/lib/stringifyRequest.js","webpack:///./node_modules/file-loader/node_modules/loader-utils/lib/urlToRequest.js","webpack:///./node_modules/file-loader/node_modules/schema-utils/dist/ValidationError.js","webpack:///./node_modules/file-loader/node_modules/schema-utils/dist/index.js","webpack:///./node_modules/file-loader/node_modules/schema-utils/dist/keywords/absolutePath.js","webpack:///./node_modules/file-loader/node_modules/schema-utils/dist/util/Range.js","webpack:///./node_modules/file-loader/node_modules/schema-utils/dist/validate.js","webpack:///./node_modules/hash-base/index.js","webpack:///./node_modules/hash-base/node_modules/readable-stream/errors-browser.js","webpack:///./node_modules/hash-base/node_modules/readable-stream/lib/_stream_duplex.js","webpack:///./node_modules/hash-base/node_modules/readable-stream/lib/_stream_passthrough.js","webpack:///./node_modules/hash-base/node_modules/readable-stream/lib/_stream_readable.js","webpack:///./node_modules/hash-base/node_modules/readable-stream/lib/_stream_transform.js","webpack:///./node_modules/hash-base/node_modules/readable-stream/lib/_stream_writable.js","webpack:///./node_modules/hash-base/node_modules/readable-stream/lib/internal/streams/async_iterator.js","webpack:///./node_modules/hash-base/node_modules/readable-stream/lib/internal/streams/buffer_list.js","webpack:///./node_modules/hash-base/node_modules/readable-stream/lib/internal/streams/destroy.js","webpack:///./node_modules/hash-base/node_modules/readable-stream/lib/internal/streams/end-of-stream.js","webpack:///./node_modules/hash-base/node_modules/readable-stream/lib/internal/streams/from-browser.js","webpack:///./node_modules/hash-base/node_modules/readable-stream/lib/internal/streams/pipeline.js","webpack:///./node_modules/hash-base/node_modules/readable-stream/lib/internal/streams/state.js","webpack:///./node_modules/hash-base/node_modules/readable-stream/lib/internal/streams/stream-browser.js","webpack:///./node_modules/hash-base/node_modules/readable-stream/readable-browser.js","webpack:///./node_modules/hash.js/lib/hash.js","webpack:///./node_modules/hash.js/lib/hash/common.js","webpack:///./node_modules/hash.js/lib/hash/hmac.js","webpack:///./node_modules/hash.js/lib/hash/ripemd.js","webpack:///./node_modules/hash.js/lib/hash/sha.js","webpack:///./node_modules/hash.js/lib/hash/sha/1.js","webpack:///./node_modules/hash.js/lib/hash/sha/224.js","webpack:///./node_modules/hash.js/lib/hash/sha/256.js","webpack:///./node_modules/hash.js/lib/hash/sha/384.js","webpack:///./node_modules/hash.js/lib/hash/sha/512.js","webpack:///./node_modules/hash.js/lib/hash/sha/common.js","webpack:///./node_modules/hash.js/lib/hash/utils.js","webpack:///./node_modules/hmac-drbg/lib/hmac-drbg.js","webpack:///./node_modules/ieee754/index.js","webpack:///./node_modules/inherits/inherits_browser.js","webpack:///./node_modules/isarray/index.js","webpack:///./node_modules/json-schema-traverse/index.js","webpack:///./node_modules/md5.js/index.js","webpack:///./node_modules/miller-rabin/lib/mr.js","webpack:///./node_modules/mime-db/index.js","webpack:///./node_modules/mime-types/index.js","webpack:///./node_modules/minimalistic-assert/index.js","webpack:///./node_modules/minimalistic-crypto-utils/lib/utils.js","webpack:///./node_modules/next-images/index.js","webpack:///./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js","webpack:///./node_modules/parse-asn1/asn1.js","webpack:///./node_modules/parse-asn1/certificate.js","webpack:///./node_modules/parse-asn1/fixProc.js","webpack:///./node_modules/parse-asn1/index.js","webpack:///./node_modules/path-browserify/index.js","webpack:///./node_modules/pbkdf2/browser.js","webpack:///./node_modules/pbkdf2/lib/async.js","webpack:///./node_modules/pbkdf2/lib/default-encoding.js","webpack:///./node_modules/pbkdf2/lib/precondition.js","webpack:///./node_modules/pbkdf2/lib/sync-browser.js","webpack:///./node_modules/process-nextick-args/index.js","webpack:///./node_modules/process/browser.js","webpack:///./node_modules/public-encrypt/browser.js","webpack:///./node_modules/public-encrypt/mgf.js","webpack:///./node_modules/public-encrypt/privateDecrypt.js","webpack:///./node_modules/public-encrypt/publicEncrypt.js","webpack:///./node_modules/public-encrypt/withPublic.js","webpack:///./node_modules/public-encrypt/xor.js","webpack:///./node_modules/randombytes/browser.js","webpack:///./node_modules/randomfill/browser.js","webpack:///delegated ./node_modules/react/index.js from dll-reference dll_2adc2403d89adc16ead0","webpack:///./node_modules/readable-stream/duplex-browser.js","webpack:///./node_modules/readable-stream/lib/_stream_duplex.js","webpack:///./node_modules/readable-stream/lib/_stream_passthrough.js","webpack:///./node_modules/readable-stream/lib/_stream_readable.js","webpack:///./node_modules/readable-stream/lib/_stream_transform.js","webpack:///./node_modules/readable-stream/lib/_stream_writable.js","webpack:///./node_modules/readable-stream/lib/internal/streams/BufferList.js","webpack:///./node_modules/readable-stream/lib/internal/streams/destroy.js","webpack:///./node_modules/readable-stream/lib/internal/streams/stream-browser.js","webpack:///./node_modules/readable-stream/node_modules/safe-buffer/index.js","webpack:///./node_modules/readable-stream/passthrough.js","webpack:///./node_modules/readable-stream/readable-browser.js","webpack:///./node_modules/readable-stream/transform.js","webpack:///./node_modules/readable-stream/writable-browser.js","webpack:///./node_modules/ripemd160/index.js","webpack:///./node_modules/safe-buffer/index.js","webpack:///./node_modules/sha.js/hash.js","webpack:///./node_modules/sha.js/index.js","webpack:///./node_modules/sha.js/sha.js","webpack:///./node_modules/sha.js/sha1.js","webpack:///./node_modules/sha.js/sha224.js","webpack:///./node_modules/sha.js/sha256.js","webpack:///./node_modules/sha.js/sha384.js","webpack:///./node_modules/sha.js/sha512.js","webpack:///./node_modules/ssr-window/dist/ssr-window.esm.js","webpack:///./node_modules/stream-browserify/index.js","webpack:///./node_modules/string_decoder/lib/string_decoder.js","webpack:///./node_modules/uri-js/dist/es5/uri.all.js","webpack:///./node_modules/url-loader/dist sync","webpack:///./node_modules/url-loader/dist/cjs.js","webpack:///./node_modules/url-loader/dist/index.js","webpack:///./node_modules/url-loader/dist/utils/normalizeFallback.js","webpack:///./node_modules/url-loader/node_modules/json5/dist/index.js","webpack:///./node_modules/url-loader/node_modules/loader-utils/lib/getCurrentRequest.js","webpack:///./node_modules/url-loader/node_modules/loader-utils/lib/getHashDigest.js","webpack:///./node_modules/url-loader/node_modules/loader-utils/lib/getOptions.js","webpack:///./node_modules/url-loader/node_modules/loader-utils/lib/getRemainingRequest.js","webpack:///./node_modules/url-loader/node_modules/loader-utils/lib/index.js","webpack:///./node_modules/url-loader/node_modules/loader-utils/lib/interpolateName.js","webpack:///./node_modules/url-loader/node_modules/loader-utils/lib/isUrlRequest.js","webpack:///./node_modules/url-loader/node_modules/loader-utils/lib/parseQuery.js","webpack:///./node_modules/url-loader/node_modules/loader-utils/lib/parseString.js","webpack:///./node_modules/url-loader/node_modules/loader-utils/lib/stringifyRequest.js","webpack:///./node_modules/url-loader/node_modules/loader-utils/lib/urlToRequest.js","webpack:///./node_modules/url-loader/node_modules/schema-utils/dist/ValidationError.js","webpack:///./node_modules/url-loader/node_modules/schema-utils/dist/index.js","webpack:///./node_modules/url-loader/node_modules/schema-utils/dist/keywords/absolutePath.js","webpack:///./node_modules/url-loader/node_modules/schema-utils/dist/util/Range.js","webpack:///./node_modules/url-loader/node_modules/schema-utils/dist/validate.js","webpack:///./node_modules/util-deprecate/browser.js","webpack:///./node_modules/vm-browserify/index.js","webpack:///(webpack)/buildin/global.js","webpack:///(webpack)/buildin/module.js","webpack:///./pages/index.js","webpack:///buffer (ignored)?bfc7","webpack:///util (ignored)?8f78","webpack:///util (ignored)?799c","webpack:///util (ignored)","webpack:///util (ignored)?7e0e","webpack:///buffer (ignored)","webpack:///crypto (ignored)","webpack:///util (ignored)?f6e0","webpack:///util (ignored)?1324","webpack:///external \"dll_2adc2403d89adc16ead0\""],"sourcesContent":["import React from 'react';\r\nconst Asme=()=>{\r\n    return (<svg className=\"linkimg\" width=\"304\" height=\"184\" viewBox=\"0 0 304 184\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n        <mask id=\"mask0\" mask-type=\"alpha\" maskUnits=\"userSpaceOnUse\" x=\"0\" y=\"79\" width=\"144\" height=\"59\">\r\n            <path d=\"M0 79.4142H143.591V137.567H0V79.4142Z\" fill=\"white\" />\r\n        </mask>\r\n        <g mask=\"url(#mask0)\">\r\n            <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M53.0152 79.4142C33.2163 79.4142 14.9058 85.2949 0 89.1246C1.80818 90.3437 3.61635 87.9505 5.42453 89.1746C18.2048 86.2592 33.2951 84.5655 49.4604 84.5655C95.5677 84.5655 134.036 97.2612 134.036 114.179C134.036 123.005 122.762 131.971 106.488 137.567C128.981 131.701 143.591 122.258 143.591 111.596C143.591 93.8162 103.039 79.4142 53.0152 79.4142Z\" fill=\"url(#paint0_linear)\" />\r\n        </g>\r\n        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M21.5406 121.273H28.6012L55.6328 56.486L80.0788 121.234C87.4395 121.034 88.2488 124.908 91.6758 125.54L60.8949 45.5565H33.295V47.3103C38.8967 48.5444 50.2501 49.4762 50.2501 52.1567C50.2501 53.8005 49.357 55.869 48.5723 57.7226L21.5406 121.276V121.273Z\" fill=\"url(#paint1_linear)\" />\r\n        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M19.5998 156.323C19.8212 156.77 20.0426 157.437 20.0819 157.764L20.1213 158.029L19.8212 158.391C19.1791 159.191 17.9736 160.292 15.7472 160.377C14.9428 160.395 14.0621 160.252 13.3363 159.875L12.8984 159.625L13.6414 158.374L13.9391 158.551C14.5442 158.896 15.1445 159.106 16.0474 159.106C16.9527 159.106 17.8924 158.551 18.2172 158.199L18.4558 157.939L18.3968 157.679C18.3093 157.281 18.1599 156.899 17.954 156.548C17.7173 156.148 17.4482 155.77 17.1495 155.416L16.6501 154.804C16.2491 154.304 15.8481 153.765 15.6464 153.362C15.4641 153.018 15.3292 152.65 15.2454 152.268L15.1839 151.968L15.3856 151.746C16.1588 150.886 17.1517 150.26 18.2541 149.937C19.2629 149.64 20.3158 149.526 21.3637 149.603L21.8089 149.643L21.3661 150.929L20.7265 150.894C20.1897 150.859 19.6507 150.887 19.12 150.977C18.4003 151.099 17.723 151.405 17.152 151.866L16.8887 152.091L16.9527 152.318C17.0117 152.598 17.1913 153.015 17.4324 153.362C17.6735 153.712 17.9146 153.97 18.2541 154.407L18.7559 155.036C19.12 155.501 19.4399 155.956 19.5998 156.323Z\" fill=\"url(#paint2_linear)\" />\r\n        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M13.0926 159.575L13.405 159.75C14.0053 160.065 14.7827 160.237 15.6117 160.237L15.7446 160.235C17.3953 160.172 18.7311 159.52 19.7127 158.299L19.971 157.987L19.944 157.787C19.8484 157.301 19.6896 156.831 19.4716 156.388V156.38C19.3363 156.073 19.0657 155.663 18.6475 155.126L18.1456 154.497C18.0302 154.349 17.9121 154.203 17.7914 154.059C17.6192 153.85 17.4667 153.665 17.3166 153.445C17.084 153.113 16.9131 152.74 16.8123 152.346L16.7311 152.041L17.0583 151.756C17.5749 151.311 18.3375 150.967 19.0977 150.837C19.8628 150.714 20.3278 150.729 20.7312 150.749L21.2651 150.782L21.6144 149.77L21.3512 149.745C20.3207 149.672 19.2856 149.784 18.2933 150.075C17.0632 150.412 16.0398 151.209 15.4887 151.841L15.3362 152.013L15.3829 152.238C15.4395 152.538 15.5601 152.863 15.7716 153.298C15.934 153.625 16.2587 154.092 16.7557 154.716L17.2575 155.326C17.5921 155.738 17.8554 156.09 18.0743 156.475C18.2711 156.8 18.4359 157.222 18.5343 157.649L18.6106 157.984L18.3154 158.296C17.9538 158.696 16.9623 159.248 16.0496 159.248C15.2157 159.248 14.5859 159.083 13.8724 158.676L13.6879 158.569L13.0926 159.575ZM15.6142 160.52C14.7433 160.52 13.9167 160.34 13.2746 160.003L12.699 159.678L13.592 158.179L14.0102 158.429C14.4973 158.704 15.0828 158.963 16.0496 158.963C16.8689 158.963 17.7914 158.454 18.1137 158.101L18.3006 157.897L18.2588 157.712C18.175 157.328 18.0305 156.961 17.8308 156.625C17.5996 156.23 17.3354 155.857 17.0411 155.508L16.5417 154.896C16.0275 154.254 15.6929 153.777 15.5183 153.427C15.332 153.07 15.1939 152.688 15.1074 152.293L15.0312 151.926L15.2772 151.649C16.0717 150.771 17.0887 150.131 18.217 149.8C19.2453 149.5 20.3032 149.385 21.3733 149.46L21.9982 149.518L21.4619 151.079L20.7165 151.037C20.3105 151.022 19.88 151.002 19.142 151.119C18.4471 151.238 17.793 151.532 17.2403 151.976L17.046 152.141L17.0878 152.281C17.137 152.523 17.2994 152.92 17.5454 153.28C17.693 153.487 17.8381 153.667 18.0054 153.875C18.1161 154.004 18.2317 154.149 18.3646 154.319L18.8665 154.949C19.3068 155.508 19.5799 155.928 19.7275 156.263C19.9489 156.713 20.1777 157.395 20.222 157.749L20.2712 158.072L19.9268 158.484C18.8935 159.768 17.4888 160.455 15.7495 160.52H15.6142ZM29.7475 158.933H33.8263L33.4647 160.123H27.8975L30.8496 150.542V149.67H36.4734L36.1118 150.807H32.2347L31.1719 154.204H35.0662L34.7046 155.334H30.8496L29.7475 158.933Z\" fill=\"url(#paint3_linear)\" />\r\n        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M28.0893 159.98H33.3613L33.6369 159.078H29.5555L30.7462 155.191H34.6061L34.8768 154.347H30.9824L32.1362 150.664H36.0133L36.2839 149.81H30.9922L30.9873 150.584L28.0893 159.978V159.98ZM33.568 160.265H27.708L27.7646 160.078L30.7118 150.52V149.528H36.6702L36.22 150.947H32.3428L31.3686 154.059H35.263L34.8128 155.476H30.9553L29.9369 158.791H34.0157L33.568 160.265ZM45.3396 160.12H43.5437L46.4073 150.892H43.4281L43.8291 149.668H51.1848L50.7838 150.892H47.9005L45.342 159.251L45.3396 160.12Z\" fill=\"url(#paint4_linear)\" />\r\n        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M43.7407 159.978H45.202L45.2069 159.206L47.7949 150.749H50.6831L50.9906 149.813H43.9301L43.6226 150.749H46.5993L46.5403 150.937L43.7382 159.98L43.7407 159.978ZM45.48 160.265H43.3544L43.4135 160.078L46.2156 151.034H43.2314L43.7284 149.525H51.3818L50.8848 151.037H48.004L45.48 159.273V160.265ZM58.9786 160.12H57.1827L60.0463 150.892H57.0622L57.4681 149.668H64.8238L64.4203 150.892H61.5395L58.9786 159.251V160.12Z\" fill=\"url(#paint5_linear)\" />\r\n        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M57.3745 159.978H58.8382L58.8432 159.206L61.4361 150.749H64.3194L64.6293 149.813H57.5664L57.2539 150.749H60.238L57.372 159.978H57.3745ZM59.1162 160.265H56.9907L59.8543 151.037H56.8652L57.3671 149.525H65.018L64.5211 151.037H61.6428L59.1162 159.273V160.265ZM74.5042 149.67L71.4635 159.251V160.12H69.6332L72.6542 150.542V149.668L74.5042 149.67Z\" fill=\"url(#paint6_linear)\" />\r\n        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M69.8251 159.978H71.3208L71.3257 159.206L74.3123 149.813H72.792L72.787 150.585L69.8251 159.978ZM71.6013 160.265H69.4388L69.5003 160.078L72.514 150.517V149.525H74.701L71.6013 159.273V160.265ZM87.9979 160.12L87.7027 159.77C87.2426 159.231 86.6645 158.239 86.2094 157.072C85.6349 155.513 85.3311 153.865 85.3114 152.201V151.237L82.8759 159.251V160.12H81.1834L84.3938 149.67H86.6054V150.37C86.6054 151.849 86.6645 153.592 87.1049 155.244C87.464 156.635 88.0003 157.702 88.298 158.171L88.4579 158.414L90.8516 150.54V149.67H92.5835L89.3362 160.12H88.0003H87.9979Z\" fill=\"url(#paint7_linear)\" />\r\n        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M88.0644 159.978H89.2329L92.3917 149.813H90.9919L90.987 150.585L88.5072 158.746L88.1825 158.251C87.6393 157.325 87.2315 156.324 86.9721 155.279C86.5244 153.62 86.4653 151.866 86.4653 150.37V149.813H84.4972L81.3729 159.98H82.7358L82.7407 159.206L85.1762 151.194L85.4517 151.234V152.198C85.4517 153.735 85.8011 155.621 86.3398 157.02C86.7556 158.082 87.3165 159.098 87.8085 159.675L88.0644 159.978ZM89.4371 160.265H87.9364L87.597 159.865C87.0828 159.266 86.5022 158.216 86.0791 157.125C85.4992 155.548 85.1913 153.881 85.1688 152.198V152.183L83.0162 159.273V160.265H80.9916L81.0482 160.078L84.2906 149.525H86.7458V150.37C86.7458 151.846 86.8048 153.575 87.2427 155.206C87.5724 156.49 88.0791 157.557 88.4137 158.084L90.7115 150.517V149.525H92.7779L89.4371 160.265ZM107.457 149.585L108.722 149.67L108.259 150.979L107.123 150.894C103.962 150.662 102.203 152.023 101.563 154.374C101.061 156.2 101.861 157.859 102.522 158.694L102.803 159.041L103.061 158.991C103.701 158.866 104.463 158.536 105.261 158.034C106.181 157.442 106.582 156.71 106.719 156.29L106.862 155.908H104.358L104.719 154.809H108.658L108.36 155.856C108.001 157.162 107.361 158.119 106.36 158.813C105.061 159.743 103.359 160.242 102.66 160.362L102.121 160.467L101.725 160.033C100.365 158.554 99.5014 156.55 99.9221 154.464C100.604 151.154 103.76 149.343 107.46 149.585\" fill=\"url(#paint8_linear)\" />\r\n        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M106.805 149.708C103.332 149.708 100.66 151.576 100.06 154.494C99.6907 156.33 100.335 158.309 101.826 159.938L102.173 160.312L102.635 160.222C103.189 160.128 104.923 159.668 106.276 158.696C107.253 158.017 107.871 157.105 108.225 155.816L108.471 154.951H104.82L104.554 155.766H107.064L106.85 156.34C106.771 156.585 106.424 157.457 105.337 158.156C104.522 158.669 103.743 159.006 103.088 159.131L102.744 159.196L102.414 158.786C101.622 157.787 100.945 156.09 101.428 154.339C102.124 151.774 104.092 150.537 107.13 150.752L108.163 150.829L108.527 149.803L107.45 149.728C107.235 149.714 107.02 149.707 106.805 149.708ZM102.07 160.625L101.622 160.13C100.065 158.436 99.3955 156.363 99.7842 154.437C100.448 151.194 103.533 149.186 107.47 149.443L108.914 149.54L108.355 151.132L107.11 151.037C104.173 150.827 102.365 151.961 101.698 154.417C101.246 156.065 101.883 157.659 102.633 158.604L102.857 158.886L103.036 158.851C103.661 158.731 104.399 158.406 105.189 157.912C106.193 157.267 106.513 156.473 106.586 156.248L106.658 156.053H104.161L104.618 154.669H108.845L108.491 155.893C108.126 157.23 107.455 158.224 106.436 158.933C105.187 159.825 103.509 160.362 102.68 160.507L102.067 160.627L102.07 160.625ZM128.432 160.12H126.636L129.502 150.892H126.516L126.919 149.668H134.28L133.876 150.892H130.996L128.432 159.251V160.12Z\" fill=\"url(#paint9_linear)\" />\r\n        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M126.831 159.978H128.295L128.299 159.206L130.89 150.749H133.776L134.083 149.813H127.02L126.713 150.749H129.694L126.831 159.978ZM128.573 160.265H126.445L129.311 151.037H126.322L126.818 149.525H134.474L133.977 151.037H131.099L128.573 159.273V160.265ZM141.983 155.334L140.784 159.248V160.12H139.045L141.983 150.542V149.668H143.719L142.342 154.164H146.893L148.012 150.542V149.668H149.747L146.814 159.248V160.12H145.075L146.551 155.334H141.983Z\" fill=\"url(#paint10_linear)\" />\r\n        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M145.269 159.975H146.674L146.679 159.208L149.557 149.81H148.152L148.145 150.585L146.994 154.307H142.152L143.53 149.81H142.123L142.118 150.585L139.235 159.978H140.642L140.647 159.208L141.877 155.191H146.745L145.269 159.975ZM146.952 160.262H144.883L146.359 155.476H142.086L140.922 159.273V160.262H138.853L138.912 160.075L141.842 150.52V149.525H143.909L142.534 154.022H146.79L147.872 150.52V149.525H149.939L149.882 149.713L146.954 159.271V160.262H146.952ZM158.234 158.933H162.31L161.951 160.123H156.384L159.336 150.542V149.67H164.965L164.603 150.807H160.724L159.661 154.204H163.555L163.194 155.334H159.341L158.234 158.933Z\" fill=\"url(#paint11_linear)\" />\r\n        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M156.576 159.98H161.845L162.121 159.078H158.042L159.233 155.191H163.09L163.361 154.347H159.469L160.62 150.664H164.502L164.773 149.81H159.476L159.471 150.584L156.576 159.978V159.98ZM162.054 160.265H156.194L156.251 160.078L159.196 150.52V149.528H165.159L164.706 150.947H160.827L159.85 154.059H163.749L163.297 155.476H159.439L158.423 158.791H162.502L162.054 160.265ZM184.026 156.323C184.247 156.77 184.468 157.437 184.508 157.764L184.55 158.029L184.249 158.391C183.605 159.191 182.404 160.292 180.176 160.377C179.374 160.395 178.488 160.252 177.767 159.875L177.327 159.625L178.067 158.374L178.37 158.551C178.97 158.896 179.575 159.106 180.476 159.106C181.381 159.106 182.326 158.551 182.643 158.199L182.884 157.939L182.823 157.679C182.736 157.281 182.588 156.899 182.385 156.548C182.145 156.151 181.876 155.772 181.58 155.416L181.078 154.804C180.677 154.304 180.274 153.765 180.075 153.362C179.893 153.018 179.758 152.65 179.674 152.268L179.612 151.968L179.814 151.746C180.588 150.885 181.582 150.259 182.685 149.937C183.694 149.64 184.747 149.526 185.794 149.603L186.237 149.643L185.794 150.929L185.152 150.894C184.616 150.859 184.077 150.887 183.546 150.977C182.746 151.117 182.021 151.486 181.578 151.866L181.32 152.091L181.381 152.318C181.44 152.598 181.622 153.015 181.861 153.362C182.102 153.712 182.343 153.97 182.685 154.407L183.184 155.036C183.546 155.501 183.868 155.956 184.026 156.323Z\" fill=\"url(#paint12_linear)\" />\r\n        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M177.521 159.575L177.836 159.75C178.436 160.065 179.214 160.237 180.043 160.237L180.173 160.235C181.821 160.173 183.16 159.52 184.139 158.299L184.402 157.987L184.37 157.787C184.279 157.3 184.121 156.829 183.9 156.388L183.898 156.38C183.73 155.986 183.349 155.476 183.076 155.126L182.577 154.497C182.46 154.35 182.342 154.204 182.222 154.059C182.055 153.862 181.896 153.657 181.747 153.445C181.515 153.113 181.345 152.74 181.246 152.346L181.162 152.041L181.489 151.756C182.001 151.317 182.781 150.967 183.524 150.837C184.063 150.744 184.611 150.714 185.157 150.749L185.698 150.782L186.043 149.77L185.782 149.745C184.752 149.675 183.717 149.786 182.724 150.075C181.646 150.388 180.675 151 179.92 151.841L179.765 152.013L179.809 152.238C179.87 152.551 179.993 152.875 180.203 153.298C180.362 153.625 180.697 154.104 181.189 154.714L181.691 155.326C182.082 155.813 182.308 156.135 182.508 156.475C182.709 156.817 182.872 157.237 182.96 157.649L183.037 157.984L182.746 158.296C182.39 158.696 181.401 159.248 180.476 159.248C179.639 159.248 179.012 159.083 178.301 158.676L178.119 158.569L177.523 159.575H177.521ZM180.043 160.52C179.169 160.52 178.345 160.34 177.706 160.003L177.132 159.678L178.018 158.179L178.441 158.429C179.105 158.806 179.696 158.963 180.476 158.963C181.307 158.963 182.222 158.454 182.542 158.102L182.729 157.897L182.687 157.712C182.603 157.328 182.462 156.96 182.269 156.62C182.03 156.23 181.764 155.857 181.472 155.506L180.973 154.896C180.456 154.262 180.124 153.78 179.949 153.427C179.762 153.071 179.622 152.69 179.536 152.296L179.462 151.926L179.711 151.649C180.289 150.989 181.361 150.155 182.65 149.8C183.676 149.498 184.741 149.38 185.804 149.46L186.429 149.518L185.893 151.079L185.147 151.037C184.734 151.022 184.311 151.002 183.573 151.119C182.878 151.237 182.224 151.532 181.671 151.976L181.479 152.141L181.519 152.281C181.568 152.523 181.728 152.92 181.976 153.28C182.124 153.49 182.271 153.67 182.439 153.875C182.547 154.01 182.665 154.149 182.795 154.319L183.295 154.949C183.748 155.531 184.011 155.933 184.156 156.263C184.382 156.723 184.611 157.402 184.648 157.749L184.697 158.072L184.355 158.484C183.322 159.768 181.92 160.455 180.183 160.52H180.043ZM195.354 160.12H193.558L196.422 150.892H193.44L193.841 149.668H201.2L200.796 150.892H197.918L195.354 159.251V160.12Z\" fill=\"url(#paint13_linear)\" />\r\n        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M193.75 159.978H195.214L195.222 159.206L197.812 150.749H200.698L201.005 149.813H193.942L193.637 150.749H196.614L193.75 159.978ZM195.492 160.265H193.367L196.23 151.037H193.246L193.738 149.525H201.396L200.897 151.037H198.019L195.492 159.273V160.265ZM211.126 157.432H207.21L205.239 160.31L203.775 159.958L211.124 149.67H213.173L212.971 150.512C212.524 152.434 212.355 154.412 212.469 156.383C212.568 158.007 212.809 159.038 212.971 159.645L213.072 159.995L211.603 160.31L211.505 159.993C211.433 159.705 211.372 159.415 211.323 159.123C211.255 158.677 211.203 158.229 211.165 157.779L211.124 157.432H211.126ZM211.564 151.069L207.989 156.298H211.003V155.948C211.003 155.448 211.003 155.214 211.065 154.237C211.124 153.42 211.261 152.373 211.404 151.731L211.564 151.069Z\" fill=\"url(#paint14_linear)\" />\r\n        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M208.26 156.155H210.863V155.946C210.863 155.438 210.863 155.211 210.924 154.227C210.983 153.407 211.114 152.418 211.249 151.779L208.26 156.155ZM211.143 156.443H207.719L211.448 150.987L211.699 151.102L211.539 151.761C211.377 152.583 211.265 153.414 211.205 154.249C211.143 155.216 211.143 155.446 211.143 155.946V156.443ZM204.012 159.865L205.175 160.147L207.133 157.29H211.247L211.303 157.759C211.321 158.089 211.399 158.649 211.461 159.103C211.52 159.441 211.584 159.715 211.64 159.96L211.697 160.142L212.895 159.885L212.838 159.683C212.552 158.607 212.381 157.503 212.329 156.39C212.206 154.472 212.378 152.483 212.836 150.48L212.996 149.813H211.198L204.014 159.865H204.012ZM211.507 160.475L211.372 160.038C211.297 159.743 211.234 159.446 211.183 159.146C211.113 158.695 211.06 158.242 211.025 157.787L211.001 157.574H207.281L205.298 160.472L203.534 160.048L211.052 149.525H213.353L213.111 150.545C212.664 152.452 212.494 154.415 212.607 156.373C212.66 157.466 212.827 158.551 213.107 159.608L213.249 160.105L211.507 160.475ZM227.786 160.12L227.488 159.77C227.028 159.231 226.448 158.239 225.993 157.072C225.417 155.514 225.114 153.865 225.097 152.201V151.237L222.662 159.251V160.12H220.969L224.177 149.67H226.389V150.37C226.389 151.849 226.448 153.592 226.886 155.244C227.245 156.635 227.786 157.702 228.086 158.171L228.244 158.414L230.635 150.54V149.67H232.372L229.124 160.12H227.786Z\" fill=\"url(#paint15_linear)\" />\r\n        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M227.85 159.978H229.021L232.177 149.813H230.775L230.77 150.585L228.288 158.749L227.968 158.249C227.421 157.324 227.01 156.324 226.748 155.279C226.305 153.61 226.249 151.861 226.249 150.37V149.813H224.28L221.159 159.98H222.521L222.529 159.206L224.964 151.194L225.237 151.234V152.198C225.237 153.747 225.584 155.636 226.123 157.02C226.534 158.077 227.097 159.093 227.594 159.675L227.85 159.978ZM229.225 160.265H227.725L227.38 159.865C226.866 159.261 226.283 158.211 225.862 157.125C225.277 155.55 224.971 153.882 224.957 152.198V152.183L222.804 159.273V160.265H220.777L220.834 160.078L224.071 149.525H226.531V150.37C226.531 151.844 226.588 153.567 227.021 155.206C227.351 156.475 227.857 157.547 228.197 158.082L230.495 150.517V149.525H232.561L229.225 160.265ZM242.114 160.205L238.97 160.26L241.919 150.542V149.67H248.249L248.648 150.512C249.445 152.181 249.445 154.409 248.729 156.033C247.393 158.988 244.407 160.17 242.114 160.205ZM243.349 150.809L240.884 158.988H241.72C243.509 158.988 245.701 158.379 246.995 156.115C248.052 154.267 247.772 152.181 247.295 151.207L247.093 150.809H243.349Z\" fill=\"url(#paint16_linear)\" />\r\n        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M241.073 158.843H241.715C243.044 158.843 245.479 158.481 246.872 156.043C247.915 154.224 247.619 152.191 247.167 151.269L247.009 150.952H243.452L241.071 158.846L241.073 158.843ZM241.715 159.131H240.692L240.748 158.943L243.245 150.664H247.182L247.42 151.139C247.9 152.121 248.215 154.269 247.118 156.185C245.651 158.749 243.105 159.133 241.715 159.133V159.131ZM242.06 149.813L242.055 150.585L239.159 160.113L242.111 160.063C244.269 160.03 247.26 158.936 248.601 155.971C249.319 154.347 249.285 152.173 248.522 150.575L248.161 149.813H242.06ZM238.778 160.405L238.834 160.215L241.779 150.517V149.525H248.335L248.778 150.45C249.573 152.123 249.605 154.389 248.857 156.09C247.462 159.176 244.352 160.312 242.119 160.347L238.778 160.405ZM262.36 157.432H258.444L256.478 160.31L255.012 159.958L262.36 149.67H264.41L264.208 150.512C263.762 152.434 263.593 154.412 263.706 156.383C263.804 158.007 264.05 159.038 264.208 159.645L264.309 159.995L262.84 160.31L262.742 159.993C262.671 159.705 262.611 159.415 262.562 159.123C262.494 158.677 262.44 158.229 262.4 157.779L262.36 157.432ZM262.803 151.069L259.231 156.298H262.24V155.948C262.23 154.532 262.365 153.119 262.643 151.731L262.801 151.069H262.803Z\" fill=\"url(#paint17_linear)\" />\r\n        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M259.499 156.155H262.099V155.946C262.099 155.438 262.099 155.211 262.161 154.227C262.222 153.405 262.33 152.588 262.486 151.779L259.499 156.155ZM262.38 156.443H258.96L262.685 150.987L262.936 151.102L262.776 151.761C262.643 152.388 262.5 153.432 262.441 154.249C262.38 155.216 262.38 155.446 262.38 155.946V156.443ZM255.251 159.865L256.419 160.147L258.372 157.29H262.486L262.54 157.764C262.562 158.114 262.653 158.756 262.7 159.103C262.766 159.478 262.83 159.758 262.877 159.96L262.936 160.142L264.132 159.885L264.075 159.683C263.903 159.033 263.662 157.984 263.566 156.39C263.453 154.406 263.624 152.415 264.072 150.48L264.232 149.813H262.434L255.251 159.865ZM262.744 160.475L262.609 160.038C262.535 159.743 262.472 159.445 262.422 159.146C262.352 158.695 262.298 158.242 262.259 157.787L262.235 157.574H258.52L256.54 160.472L254.776 160.048L262.289 149.525H264.589L264.346 150.545C263.9 152.452 263.732 154.416 263.846 156.373C263.942 157.922 264.164 158.916 264.343 159.608L264.491 160.1L262.744 160.475ZM276.656 156.37L276.558 156.028H274.934L273.952 159.248V160.118H272.208L275.153 150.542V149.67H280.604L280.865 150.197C281.325 151.134 281.544 152.421 280.966 153.537C280.366 154.687 279.16 155.296 278.358 155.556L277.999 155.676L278.216 156.463C278.321 156.827 278.717 157.644 279.023 158.029C279.401 158.534 280.021 159.228 281.325 159.106L281.665 159.071L281.266 160.295L280.627 160.322C279.421 160.377 278.361 159.68 277.662 158.636C277.207 157.943 276.867 157.178 276.656 156.373V156.37ZM276.558 150.807L275.273 154.896H275.854C277.355 154.896 278.361 154.509 279.16 153.765C279.923 153.053 279.962 151.921 279.662 151.154L279.522 150.804H276.555L276.558 150.807Z\" fill=\"url(#paint18_linear)\" />\r\n        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M275.465 154.751H275.854C277.264 154.751 278.253 154.414 279.064 153.657C279.783 152.99 279.81 151.916 279.532 151.207L279.429 150.949H276.658L275.465 154.751ZM275.854 155.039H275.079L276.452 150.662H279.611L279.793 151.099C280.103 151.899 280.071 153.108 279.251 153.872C278.39 154.679 277.34 155.039 275.854 155.039ZM274.828 155.886H276.658L276.791 156.335C277.023 157.187 277.35 157.914 277.775 158.556C278.474 159.595 279.458 160.182 280.494 160.182L280.617 160.18L281.16 160.155L281.463 159.233L281.34 159.248C281.241 159.257 281.142 159.261 281.042 159.261C279.77 159.261 279.175 158.469 278.909 158.116C278.559 157.621 278.28 157.078 278.08 156.503L277.829 155.583L278.317 155.421C278.858 155.244 280.199 154.696 280.841 153.467C281.318 152.556 281.276 151.359 280.737 150.26L280.516 149.813H275.291L275.286 150.584L272.4 159.975H273.812L273.819 159.206L274.828 155.886ZM280.494 160.47C279.362 160.47 278.294 159.835 277.544 158.716C277.08 158.011 276.734 157.233 276.521 156.413L276.452 156.173H275.035L274.095 159.271V160.262H272.019L272.075 160.075L275.013 150.517V149.528H280.693L280.988 150.132C281.569 151.311 281.603 152.611 281.089 153.605C280.395 154.929 278.981 155.506 278.403 155.693L278.169 155.768L278.353 156.425C278.452 156.78 278.853 157.582 279.131 157.942C279.559 158.506 280.139 159.076 281.315 158.963L281.869 158.906L281.367 160.43L280.629 160.467H280.494V160.47ZM291.99 160.205L288.843 160.26L291.791 150.542V149.67H298.123L298.521 150.512C299.318 152.181 299.318 154.409 298.603 156.033C297.267 158.988 294.28 160.17 291.99 160.205ZM293.225 150.809L290.757 158.988H291.594C293.385 158.988 295.574 158.379 296.871 156.115C297.929 154.267 297.646 152.181 297.168 151.207L296.967 150.809H293.225Z\" fill=\"url(#paint19_linear)\" />\r\n        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M290.947 158.843H291.594C292.922 158.843 295.355 158.481 296.75 156.043C297.788 154.224 297.495 152.191 297.043 151.269L296.88 150.952H293.328L290.947 158.846V158.843ZM291.594 159.131H290.565L290.624 158.943L293.119 150.664H297.055L297.294 151.139C297.773 152.121 298.088 154.269 296.994 156.185C295.527 158.749 292.984 159.133 291.594 159.133V159.131ZM291.931 149.813L291.921 150.585L289.035 160.113L291.987 160.063C294.142 160.03 297.139 158.936 298.477 155.971C299.19 154.347 299.158 152.173 298.396 150.575L298.034 149.813H291.933H291.931ZM288.656 160.405L288.71 160.215L291.648 150.517V149.525H298.214L298.652 150.45C299.444 152.123 299.481 154.387 298.73 156.09C297.336 159.176 294.228 160.312 291.992 160.347L288.656 160.405Z\" fill=\"url(#paint20_linear)\" />\r\n        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M149.146 7.05481C142.511 10.6597 138.87 16.9001 140.932 20.8697C143.006 24.8418 150.777 25.1415 157.412 21.5392C164.045 17.9368 167.041 11.8013 164.972 7.83424C162.906 3.86215 155.791 3.45995 149.146 7.05481ZM156.952 21.4567C150.856 24.7593 143.126 24.2422 141.235 20.6124C139.34 16.975 143.36 10.8895 149.446 7.58942C155.543 4.28434 162.593 4.15943 164.793 8.36885C166.689 12.0012 163.039 18.1542 156.952 21.4592\" fill=\"url(#paint21_linear)\" />\r\n        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M156.327 8.16151C134.292 17.1274 122.722 41.0074 128.292 60.8753L128.841 60.3932C122.208 41.6494 136.024 17.1999 157.242 8.63866C181.027 -0.956802 201.623 10.9794 208.405 30.7349L208.346 30.685C202.393 9.42808 179.162 -1.13167 156.327 8.16151Z\" fill=\"url(#paint22_linear)\" />\r\n        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M174.717 29.3759C162.65 13.3627 148.194 5.16369 143.203 7.92417L142.125 8.53372C146.932 5.86818 162.898 15.0664 174.515 30.5526C188.291 48.9366 194.892 70.7056 192.907 77.6605L192.092 79.6016C192.324 79.2818 192.545 78.9171 192.715 78.4849C195.854 70.6981 188.705 47.9373 174.719 29.3759\" fill=\"url(#paint23_linear)\" />\r\n        <mask id=\"mask1\" mask-type=\"alpha\" maskUnits=\"userSpaceOnUse\" x=\"145\" y=\"0\" width=\"36\" height=\"87\">\r\n            <path d=\"M145.54 0H180.269V86.4091H145.54V0Z\" fill=\"white\" />\r\n        </mask>\r\n        <g mask=\"url(#mask1)\">\r\n            <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M180.269 86.0918C165.823 86.6914 150.573 69.3441 146.998 44.8621C144.548 23.1105 152.573 3.76973 165.606 1.00676C166.285 0.856871 166.959 0.774432 167.643 0.719472L167.801 0C167.112 0.059956 166.43 0.14989 165.754 0.292286C152.263 3.19016 143.087 22.0563 146.122 44.5148C149.345 68.2724 164.588 87.1835 179.89 86.0094C180.246 85.9844 179.964 86.3816 179.599 86.4091L180.269 86.0918Z\" fill=\"url(#paint24_linear)\" />\r\n        </g>\r\n        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M189.576 21.9839C172.121 6.03058 146.359 6.15299 131.616 20.0203L132.277 20.3026C146.526 6.98738 172.574 7.44704 189.31 22.8507C207.397 40.233 208.031 64.8524 192.926 79.1344L192.944 79.067C208.737 64.2354 207.66 38.5217 189.573 21.9814\" fill=\"url(#paint25_linear)\" />\r\n        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M207.185 27.3399C207.205 27.6322 207.227 27.9295 207.234 28.2268C207.259 28.9512 208.774 34.8344 207.564 39.6284C205.453 49.5736 198.277 58.7719 187.583 66.0815C173.186 75.9118 156.177 79.9813 143.567 74.95C139.249 73.7334 135.571 70.8155 132.932 67.7403C132.321 67.033 131.762 66.2815 131.259 65.4919C132.002 66.9284 132.89 68.4048 134.039 69.6689C144.644 81.3053 168.891 79.9713 188.119 66.831C204.649 55.5392 212.13 39.1213 207.185 27.3399ZM125.143 40.4503C125.197 40.5552 125.246 40.6577 125.305 40.7576C130.942 51.3248 149.378 51.9943 166.739 42.194C184.272 32.3038 193.111 16.1207 187.674 5.25862L186.668 5.13371C191.797 15.3512 183.42 31.9216 166.81 41.2872C150.212 50.6628 131.129 50.353 126.011 40.1305L125.143 40.4503Z\" fill=\"url(#paint26_linear)\" />\r\n        <mask id=\"mask2\" mask-type=\"alpha\" maskUnits=\"userSpaceOnUse\" x=\"5\" y=\"176\" width=\"299\" height=\"8\">\r\n            <path d=\"M5.41211 176.785H304V184H5.41211V176.785Z\" fill=\"white\" />\r\n        </mask>\r\n        <g mask=\"url(#mask2)\">\r\n            <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M5.41211 176.785H304L156.891 184L5.41211 176.785Z\" fill=\"url(#paint27_linear)\" />\r\n        </g>\r\n        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M163.499 59.6537C163.499 51.3723 155.014 51.06 145.117 49.1989V47.4352H176.884L199.704 80.5284H199.928L221.646 47.4352H235.243V121.476H225.464V52.9212H225.24L202.287 90.6685L197.849 96.4867L169.578 52.9187H169.349V121.473H163.501V59.6537H163.499ZM115.47 81.6101C110.053 77.5706 105.967 72.9315 105.967 65.457C105.967 56.8833 111.502 51.3948 119.645 51.3948C127.561 51.3948 134.799 55.192 138.305 57.1656V47.3153C135.023 46.4709 128.922 45.0694 121.571 45.0694C106.53 45.0694 96.9135 53.5057 96.9135 68.837C96.9135 72.1171 97.3981 74.9675 98.2222 77.5181C104.417 78.6473 110.203 80.0188 115.47 81.6101ZM287.458 116.852H275.588C267.568 116.852 266.584 116.852 266.584 110.506V87.5083H285.904V81.9174H266.582V58.9742C266.582 53.0661 267.015 51.752 273.291 51.752H284.809C293.936 51.752 293.825 55.1445 294.93 60.8329H298.337L297.783 47.4877H239.978V49.3438C249.536 50.6603 257.017 52.7413 257.017 58.9742V121.121H299.646L300.423 106.245C300.423 106.245 294.93 116.854 287.458 116.854\" fill=\"url(#paint28_linear)\" />\r\n        <defs>\r\n            <linearGradient id=\"paint0_linear\" x1=\"71.7957\" y1=\"79.4142\" x2=\"71.7957\" y2=\"137.567\" gradientUnits=\"userSpaceOnUse\">\r\n                <stop stop-color=\"#E47F40\" />\r\n                <stop offset=\"1\" stop-color=\"#CD5A2F\" />\r\n            </linearGradient>\r\n            <linearGradient id=\"paint1_linear\" x1=\"56.6082\" y1=\"45.5565\" x2=\"56.6082\" y2=\"125.54\" gradientUnits=\"userSpaceOnUse\">\r\n                <stop stop-color=\"#E47F40\" />\r\n                <stop offset=\"1\" stop-color=\"#CD5A2F\" />\r\n            </linearGradient>\r\n            <linearGradient id=\"paint2_linear\" x1=\"17.3537\" y1=\"149.58\" x2=\"17.3537\" y2=\"160.379\" gradientUnits=\"userSpaceOnUse\">\r\n                <stop stop-color=\"#E47F40\" />\r\n                <stop offset=\"1\" stop-color=\"#CD5A2F\" />\r\n            </linearGradient>\r\n            <linearGradient id=\"paint3_linear\" x1=\"24.5862\" y1=\"149.438\" x2=\"24.5862\" y2=\"160.52\" gradientUnits=\"userSpaceOnUse\">\r\n                <stop stop-color=\"#E47F40\" />\r\n                <stop offset=\"1\" stop-color=\"#CD5A2F\" />\r\n            </linearGradient>\r\n            <linearGradient id=\"paint4_linear\" x1=\"39.4464\" y1=\"149.528\" x2=\"39.4464\" y2=\"160.265\" gradientUnits=\"userSpaceOnUse\">\r\n                <stop stop-color=\"#E47F40\" />\r\n                <stop offset=\"1\" stop-color=\"#CD5A2F\" />\r\n            </linearGradient>\r\n            <linearGradient id=\"paint5_linear\" x1=\"54.0276\" y1=\"149.525\" x2=\"54.0276\" y2=\"160.265\" gradientUnits=\"userSpaceOnUse\">\r\n                <stop stop-color=\"#E47F40\" />\r\n                <stop offset=\"1\" stop-color=\"#CD5A2F\" />\r\n            </linearGradient>\r\n            <linearGradient id=\"paint6_linear\" x1=\"65.6847\" y1=\"149.525\" x2=\"65.6847\" y2=\"160.265\" gradientUnits=\"userSpaceOnUse\">\r\n                <stop stop-color=\"#E47F40\" />\r\n                <stop offset=\"1\" stop-color=\"#CD5A2F\" />\r\n            </linearGradient>\r\n            <linearGradient id=\"paint7_linear\" x1=\"81.0112\" y1=\"149.525\" x2=\"81.0112\" y2=\"160.265\" gradientUnits=\"userSpaceOnUse\">\r\n                <stop stop-color=\"#E47F40\" />\r\n                <stop offset=\"1\" stop-color=\"#CD5A2F\" />\r\n            </linearGradient>\r\n            <linearGradient id=\"paint8_linear\" x1=\"94.8567\" y1=\"149.525\" x2=\"94.8567\" y2=\"160.467\" gradientUnits=\"userSpaceOnUse\">\r\n                <stop stop-color=\"#E47F40\" />\r\n                <stop offset=\"1\" stop-color=\"#CD5A2F\" />\r\n            </linearGradient>\r\n            <linearGradient id=\"paint9_linear\" x1=\"116.978\" y1=\"149.421\" x2=\"116.978\" y2=\"160.627\" gradientUnits=\"userSpaceOnUse\">\r\n                <stop stop-color=\"#E47F40\" />\r\n                <stop offset=\"1\" stop-color=\"#CD5A2F\" />\r\n            </linearGradient>\r\n            <linearGradient id=\"paint10_linear\" x1=\"138.034\" y1=\"149.525\" x2=\"138.034\" y2=\"160.265\" gradientUnits=\"userSpaceOnUse\">\r\n                <stop stop-color=\"#E47F40\" />\r\n                <stop offset=\"1\" stop-color=\"#CD5A2F\" />\r\n            </linearGradient>\r\n            <linearGradient id=\"paint11_linear\" x1=\"151.909\" y1=\"149.525\" x2=\"151.909\" y2=\"160.262\" gradientUnits=\"userSpaceOnUse\">\r\n                <stop stop-color=\"#E47F40\" />\r\n                <stop offset=\"1\" stop-color=\"#CD5A2F\" />\r\n            </linearGradient>\r\n            <linearGradient id=\"paint12_linear\" x1=\"171.216\" y1=\"149.528\" x2=\"171.216\" y2=\"160.379\" gradientUnits=\"userSpaceOnUse\">\r\n                <stop stop-color=\"#E47F40\" />\r\n                <stop offset=\"1\" stop-color=\"#CD5A2F\" />\r\n            </linearGradient>\r\n            <linearGradient id=\"paint13_linear\" x1=\"189.166\" y1=\"149.436\" x2=\"189.166\" y2=\"160.52\" gradientUnits=\"userSpaceOnUse\">\r\n                <stop stop-color=\"#E47F40\" />\r\n                <stop offset=\"1\" stop-color=\"#CD5A2F\" />\r\n            </linearGradient>\r\n            <linearGradient id=\"paint14_linear\" x1=\"203.21\" y1=\"149.525\" x2=\"203.21\" y2=\"160.31\" gradientUnits=\"userSpaceOnUse\">\r\n                <stop stop-color=\"#E47F40\" />\r\n                <stop offset=\"1\" stop-color=\"#CD5A2F\" />\r\n            </linearGradient>\r\n            <linearGradient id=\"paint15_linear\" x1=\"217.953\" y1=\"149.525\" x2=\"217.953\" y2=\"160.475\" gradientUnits=\"userSpaceOnUse\">\r\n                <stop stop-color=\"#E47F40\" />\r\n                <stop offset=\"1\" stop-color=\"#CD5A2F\" />\r\n            </linearGradient>\r\n            <linearGradient id=\"paint16_linear\" x1=\"235.017\" y1=\"149.525\" x2=\"235.017\" y2=\"160.265\" gradientUnits=\"userSpaceOnUse\">\r\n                <stop stop-color=\"#E47F40\" />\r\n                <stop offset=\"1\" stop-color=\"#CD5A2F\" />\r\n            </linearGradient>\r\n            <linearGradient id=\"paint17_linear\" x1=\"251.594\" y1=\"149.525\" x2=\"251.594\" y2=\"160.405\" gradientUnits=\"userSpaceOnUse\">\r\n                <stop stop-color=\"#E47F40\" />\r\n                <stop offset=\"1\" stop-color=\"#CD5A2F\" />\r\n            </linearGradient>\r\n            <linearGradient id=\"paint18_linear\" x1=\"268.22\" y1=\"149.525\" x2=\"268.22\" y2=\"160.475\" gradientUnits=\"userSpaceOnUse\">\r\n                <stop stop-color=\"#E47F40\" />\r\n                <stop offset=\"1\" stop-color=\"#CD5A2F\" />\r\n            </linearGradient>\r\n            <linearGradient id=\"paint19_linear\" x1=\"285.574\" y1=\"149.528\" x2=\"285.574\" y2=\"160.47\" gradientUnits=\"userSpaceOnUse\">\r\n                <stop stop-color=\"#E47F40\" />\r\n                <stop offset=\"1\" stop-color=\"#CD5A2F\" />\r\n            </linearGradient>\r\n            <linearGradient id=\"paint20_linear\" x1=\"293.963\" y1=\"149.525\" x2=\"293.963\" y2=\"160.405\" gradientUnits=\"userSpaceOnUse\">\r\n                <stop stop-color=\"#E47F40\" />\r\n                <stop offset=\"1\" stop-color=\"#CD5A2F\" />\r\n            </linearGradient>\r\n            <linearGradient id=\"paint21_linear\" x1=\"152.987\" y1=\"4.58965\" x2=\"152.987\" y2=\"24.0565\" gradientUnits=\"userSpaceOnUse\">\r\n                <stop stop-color=\"#E47F40\" />\r\n                <stop offset=\"1\" stop-color=\"#CD5A2F\" />\r\n            </linearGradient>\r\n            <linearGradient id=\"paint22_linear\" x1=\"167.655\" y1=\"4.77083\" x2=\"167.655\" y2=\"60.8753\" gradientUnits=\"userSpaceOnUse\">\r\n                <stop stop-color=\"#E47F40\" />\r\n                <stop offset=\"1\" stop-color=\"#CD5A2F\" />\r\n            </linearGradient>\r\n            <linearGradient id=\"paint23_linear\" x1=\"167.785\" y1=\"7.39622\" x2=\"167.785\" y2=\"79.6016\" gradientUnits=\"userSpaceOnUse\">\r\n                <stop stop-color=\"#E47F40\" />\r\n                <stop offset=\"1\" stop-color=\"#CD5A2F\" />\r\n            </linearGradient>\r\n            <linearGradient id=\"paint24_linear\" x1=\"162.904\" y1=\"0\" x2=\"162.904\" y2=\"86.4091\" gradientUnits=\"userSpaceOnUse\">\r\n                <stop stop-color=\"#E47F40\" />\r\n                <stop offset=\"1\" stop-color=\"#CD5A2F\" />\r\n            </linearGradient>\r\n            <linearGradient id=\"paint25_linear\" x1=\"167.817\" y1=\"9.8087\" x2=\"167.817\" y2=\"79.1344\" gradientUnits=\"userSpaceOnUse\">\r\n                <stop stop-color=\"#E47F40\" />\r\n                <stop offset=\"1\" stop-color=\"#CD5A2F\" />\r\n            </linearGradient>\r\n            <linearGradient id=\"paint26_linear\" x1=\"166.916\" y1=\"5.13371\" x2=\"166.916\" y2=\"77.607\" gradientUnits=\"userSpaceOnUse\">\r\n                <stop stop-color=\"#E47F40\" />\r\n                <stop offset=\"1\" stop-color=\"#CD5A2F\" />\r\n            </linearGradient>\r\n            <linearGradient id=\"paint27_linear\" x1=\"154.706\" y1=\"176.785\" x2=\"154.706\" y2=\"184\" gradientUnits=\"userSpaceOnUse\">\r\n                <stop stop-color=\"#E47F40\" />\r\n                <stop offset=\"1\" stop-color=\"#CD5A2F\" />\r\n            </linearGradient>\r\n            <linearGradient id=\"paint28_linear\" x1=\"198.668\" y1=\"45.0694\" x2=\"198.668\" y2=\"121.476\" gradientUnits=\"userSpaceOnUse\">\r\n                <stop stop-color=\"#E47F40\" />\r\n                <stop offset=\"1\" stop-color=\"#CD5A2F\" />\r\n            </linearGradient>\r\n        </defs>\r\n    </svg>\r\n)\r\n}\r\nexport default Asme;\r\n<svg width=\"304\" height=\"184\" viewBox=\"0 0 304 184\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n<mask id=\"mask0\" mask-type=\"alpha\" maskUnits=\"userSpaceOnUse\" x=\"0\" y=\"79\" width=\"144\" height=\"59\">\r\n<path d=\"M0 79.4142H143.591V137.567H0V79.4142Z\" fill=\"white\"/>\r\n</mask>\r\n<g mask=\"url(#mask0)\">\r\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M53.0152 79.4142C33.2163 79.4142 14.9058 85.2949 0 89.1246C1.80818 90.3437 3.61635 87.9505 5.42453 89.1746C18.2048 86.2592 33.2951 84.5655 49.4604 84.5655C95.5677 84.5655 134.036 97.2612 134.036 114.179C134.036 123.005 122.762 131.971 106.488 137.567C128.981 131.701 143.591 122.258 143.591 111.596C143.591 93.8162 103.039 79.4142 53.0152 79.4142Z\" fill=\"url(#paint0_linear)\"/>\r\n</g>\r\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M21.5406 121.273H28.6012L55.6328 56.486L80.0788 121.234C87.4395 121.034 88.2488 124.908 91.6758 125.54L60.8949 45.5565H33.295V47.3103C38.8967 48.5444 50.2501 49.4762 50.2501 52.1567C50.2501 53.8005 49.357 55.869 48.5723 57.7226L21.5406 121.276V121.273Z\" fill=\"url(#paint1_linear)\"/>\r\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M19.5998 156.323C19.8212 156.77 20.0426 157.437 20.0819 157.764L20.1213 158.029L19.8212 158.391C19.1791 159.191 17.9736 160.292 15.7472 160.377C14.9428 160.395 14.0621 160.252 13.3363 159.875L12.8984 159.625L13.6414 158.374L13.9391 158.551C14.5442 158.896 15.1445 159.106 16.0474 159.106C16.9527 159.106 17.8924 158.551 18.2172 158.199L18.4558 157.939L18.3968 157.679C18.3093 157.281 18.1599 156.899 17.954 156.548C17.7173 156.148 17.4482 155.77 17.1495 155.416L16.6501 154.804C16.2491 154.304 15.8481 153.765 15.6464 153.362C15.4641 153.018 15.3292 152.65 15.2454 152.268L15.1839 151.968L15.3856 151.746C16.1588 150.886 17.1517 150.26 18.2541 149.937C19.2629 149.64 20.3158 149.526 21.3637 149.603L21.8089 149.643L21.3661 150.929L20.7265 150.894C20.1897 150.859 19.6507 150.887 19.12 150.977C18.4003 151.099 17.723 151.405 17.152 151.866L16.8887 152.091L16.9527 152.318C17.0117 152.598 17.1913 153.015 17.4324 153.362C17.6735 153.712 17.9146 153.97 18.2541 154.407L18.7559 155.036C19.12 155.501 19.4399 155.956 19.5998 156.323Z\" fill=\"url(#paint2_linear)\"/>\r\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M13.0926 159.575L13.405 159.75C14.0053 160.065 14.7827 160.237 15.6117 160.237L15.7446 160.235C17.3953 160.172 18.7311 159.52 19.7127 158.299L19.971 157.987L19.944 157.787C19.8484 157.301 19.6896 156.831 19.4716 156.388V156.38C19.3363 156.073 19.0657 155.663 18.6475 155.126L18.1456 154.497C18.0302 154.349 17.9121 154.203 17.7914 154.059C17.6192 153.85 17.4667 153.665 17.3166 153.445C17.084 153.113 16.9131 152.74 16.8123 152.346L16.7311 152.041L17.0583 151.756C17.5749 151.311 18.3375 150.967 19.0977 150.837C19.8628 150.714 20.3278 150.729 20.7312 150.749L21.2651 150.782L21.6144 149.77L21.3512 149.745C20.3207 149.672 19.2856 149.784 18.2933 150.075C17.0632 150.412 16.0398 151.209 15.4887 151.841L15.3362 152.013L15.3829 152.238C15.4395 152.538 15.5601 152.863 15.7716 153.298C15.934 153.625 16.2587 154.092 16.7557 154.716L17.2575 155.326C17.5921 155.738 17.8554 156.09 18.0743 156.475C18.2711 156.8 18.4359 157.222 18.5343 157.649L18.6106 157.984L18.3154 158.296C17.9538 158.696 16.9623 159.248 16.0496 159.248C15.2157 159.248 14.5859 159.083 13.8724 158.676L13.6879 158.569L13.0926 159.575ZM15.6142 160.52C14.7433 160.52 13.9167 160.34 13.2746 160.003L12.699 159.678L13.592 158.179L14.0102 158.429C14.4973 158.704 15.0828 158.963 16.0496 158.963C16.8689 158.963 17.7914 158.454 18.1137 158.101L18.3006 157.897L18.2588 157.712C18.175 157.328 18.0305 156.961 17.8308 156.625C17.5996 156.23 17.3354 155.857 17.0411 155.508L16.5417 154.896C16.0275 154.254 15.6929 153.777 15.5183 153.427C15.332 153.07 15.1939 152.688 15.1074 152.293L15.0312 151.926L15.2772 151.649C16.0717 150.771 17.0887 150.131 18.217 149.8C19.2453 149.5 20.3032 149.385 21.3733 149.46L21.9982 149.518L21.4619 151.079L20.7165 151.037C20.3105 151.022 19.88 151.002 19.142 151.119C18.4471 151.238 17.793 151.532 17.2403 151.976L17.046 152.141L17.0878 152.281C17.137 152.523 17.2994 152.92 17.5454 153.28C17.693 153.487 17.8381 153.667 18.0054 153.875C18.1161 154.004 18.2317 154.149 18.3646 154.319L18.8665 154.949C19.3068 155.508 19.5799 155.928 19.7275 156.263C19.9489 156.713 20.1777 157.395 20.222 157.749L20.2712 158.072L19.9268 158.484C18.8935 159.768 17.4888 160.455 15.7495 160.52H15.6142ZM29.7475 158.933H33.8263L33.4647 160.123H27.8975L30.8496 150.542V149.67H36.4734L36.1118 150.807H32.2347L31.1719 154.204H35.0662L34.7046 155.334H30.8496L29.7475 158.933Z\" fill=\"url(#paint3_linear)\"/>\r\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M28.0893 159.98H33.3613L33.6369 159.078H29.5555L30.7462 155.191H34.6061L34.8768 154.347H30.9824L32.1362 150.664H36.0133L36.2839 149.81H30.9922L30.9873 150.584L28.0893 159.978V159.98ZM33.568 160.265H27.708L27.7646 160.078L30.7118 150.52V149.528H36.6702L36.22 150.947H32.3428L31.3686 154.059H35.263L34.8128 155.476H30.9553L29.9369 158.791H34.0157L33.568 160.265ZM45.3396 160.12H43.5437L46.4073 150.892H43.4281L43.8291 149.668H51.1848L50.7838 150.892H47.9005L45.342 159.251L45.3396 160.12Z\" fill=\"url(#paint4_linear)\"/>\r\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M43.7407 159.978H45.202L45.2069 159.206L47.7949 150.749H50.6831L50.9906 149.813H43.9301L43.6226 150.749H46.5993L46.5403 150.937L43.7382 159.98L43.7407 159.978ZM45.48 160.265H43.3544L43.4135 160.078L46.2156 151.034H43.2314L43.7284 149.525H51.3818L50.8848 151.037H48.004L45.48 159.273V160.265ZM58.9786 160.12H57.1827L60.0463 150.892H57.0622L57.4681 149.668H64.8238L64.4203 150.892H61.5395L58.9786 159.251V160.12Z\" fill=\"url(#paint5_linear)\"/>\r\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M57.3745 159.978H58.8382L58.8432 159.206L61.4361 150.749H64.3194L64.6293 149.813H57.5664L57.2539 150.749H60.238L57.372 159.978H57.3745ZM59.1162 160.265H56.9907L59.8543 151.037H56.8652L57.3671 149.525H65.018L64.5211 151.037H61.6428L59.1162 159.273V160.265ZM74.5042 149.67L71.4635 159.251V160.12H69.6332L72.6542 150.542V149.668L74.5042 149.67Z\" fill=\"url(#paint6_linear)\"/>\r\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M69.8251 159.978H71.3208L71.3257 159.206L74.3123 149.813H72.792L72.787 150.585L69.8251 159.978ZM71.6013 160.265H69.4388L69.5003 160.078L72.514 150.517V149.525H74.701L71.6013 159.273V160.265ZM87.9979 160.12L87.7027 159.77C87.2426 159.231 86.6645 158.239 86.2094 157.072C85.6349 155.513 85.3311 153.865 85.3114 152.201V151.237L82.8759 159.251V160.12H81.1834L84.3938 149.67H86.6054V150.37C86.6054 151.849 86.6645 153.592 87.1049 155.244C87.464 156.635 88.0003 157.702 88.298 158.171L88.4579 158.414L90.8516 150.54V149.67H92.5835L89.3362 160.12H88.0003H87.9979Z\" fill=\"url(#paint7_linear)\"/>\r\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M88.0644 159.978H89.2329L92.3917 149.813H90.9919L90.987 150.585L88.5072 158.746L88.1825 158.251C87.6393 157.325 87.2315 156.324 86.9721 155.279C86.5244 153.62 86.4653 151.866 86.4653 150.37V149.813H84.4972L81.3729 159.98H82.7358L82.7407 159.206L85.1762 151.194L85.4517 151.234V152.198C85.4517 153.735 85.8011 155.621 86.3398 157.02C86.7556 158.082 87.3165 159.098 87.8085 159.675L88.0644 159.978ZM89.4371 160.265H87.9364L87.597 159.865C87.0828 159.266 86.5022 158.216 86.0791 157.125C85.4992 155.548 85.1913 153.881 85.1688 152.198V152.183L83.0162 159.273V160.265H80.9916L81.0482 160.078L84.2906 149.525H86.7458V150.37C86.7458 151.846 86.8048 153.575 87.2427 155.206C87.5724 156.49 88.0791 157.557 88.4137 158.084L90.7115 150.517V149.525H92.7779L89.4371 160.265ZM107.457 149.585L108.722 149.67L108.259 150.979L107.123 150.894C103.962 150.662 102.203 152.023 101.563 154.374C101.061 156.2 101.861 157.859 102.522 158.694L102.803 159.041L103.061 158.991C103.701 158.866 104.463 158.536 105.261 158.034C106.181 157.442 106.582 156.71 106.719 156.29L106.862 155.908H104.358L104.719 154.809H108.658L108.36 155.856C108.001 157.162 107.361 158.119 106.36 158.813C105.061 159.743 103.359 160.242 102.66 160.362L102.121 160.467L101.725 160.033C100.365 158.554 99.5014 156.55 99.9221 154.464C100.604 151.154 103.76 149.343 107.46 149.585\" fill=\"url(#paint8_linear)\"/>\r\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M106.805 149.708C103.332 149.708 100.66 151.576 100.06 154.494C99.6907 156.33 100.335 158.309 101.826 159.938L102.173 160.312L102.635 160.222C103.189 160.128 104.923 159.668 106.276 158.696C107.253 158.017 107.871 157.105 108.225 155.816L108.471 154.951H104.82L104.554 155.766H107.064L106.85 156.34C106.771 156.585 106.424 157.457 105.337 158.156C104.522 158.669 103.743 159.006 103.088 159.131L102.744 159.196L102.414 158.786C101.622 157.787 100.945 156.09 101.428 154.339C102.124 151.774 104.092 150.537 107.13 150.752L108.163 150.829L108.527 149.803L107.45 149.728C107.235 149.714 107.02 149.707 106.805 149.708ZM102.07 160.625L101.622 160.13C100.065 158.436 99.3955 156.363 99.7842 154.437C100.448 151.194 103.533 149.186 107.47 149.443L108.914 149.54L108.355 151.132L107.11 151.037C104.173 150.827 102.365 151.961 101.698 154.417C101.246 156.065 101.883 157.659 102.633 158.604L102.857 158.886L103.036 158.851C103.661 158.731 104.399 158.406 105.189 157.912C106.193 157.267 106.513 156.473 106.586 156.248L106.658 156.053H104.161L104.618 154.669H108.845L108.491 155.893C108.126 157.23 107.455 158.224 106.436 158.933C105.187 159.825 103.509 160.362 102.68 160.507L102.067 160.627L102.07 160.625ZM128.432 160.12H126.636L129.502 150.892H126.516L126.919 149.668H134.28L133.876 150.892H130.996L128.432 159.251V160.12Z\" fill=\"url(#paint9_linear)\"/>\r\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M126.831 159.978H128.295L128.299 159.206L130.89 150.749H133.776L134.083 149.813H127.02L126.713 150.749H129.694L126.831 159.978ZM128.573 160.265H126.445L129.311 151.037H126.322L126.818 149.525H134.474L133.977 151.037H131.099L128.573 159.273V160.265ZM141.983 155.334L140.784 159.248V160.12H139.045L141.983 150.542V149.668H143.719L142.342 154.164H146.893L148.012 150.542V149.668H149.747L146.814 159.248V160.12H145.075L146.551 155.334H141.983Z\" fill=\"url(#paint10_linear)\"/>\r\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M145.269 159.975H146.674L146.679 159.208L149.557 149.81H148.152L148.145 150.585L146.994 154.307H142.152L143.53 149.81H142.123L142.118 150.585L139.235 159.978H140.642L140.647 159.208L141.877 155.191H146.745L145.269 159.975ZM146.952 160.262H144.883L146.359 155.476H142.086L140.922 159.273V160.262H138.853L138.912 160.075L141.842 150.52V149.525H143.909L142.534 154.022H146.79L147.872 150.52V149.525H149.939L149.882 149.713L146.954 159.271V160.262H146.952ZM158.234 158.933H162.31L161.951 160.123H156.384L159.336 150.542V149.67H164.965L164.603 150.807H160.724L159.661 154.204H163.555L163.194 155.334H159.341L158.234 158.933Z\" fill=\"url(#paint11_linear)\"/>\r\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M156.576 159.98H161.845L162.121 159.078H158.042L159.233 155.191H163.09L163.361 154.347H159.469L160.62 150.664H164.502L164.773 149.81H159.476L159.471 150.584L156.576 159.978V159.98ZM162.054 160.265H156.194L156.251 160.078L159.196 150.52V149.528H165.159L164.706 150.947H160.827L159.85 154.059H163.749L163.297 155.476H159.439L158.423 158.791H162.502L162.054 160.265ZM184.026 156.323C184.247 156.77 184.468 157.437 184.508 157.764L184.55 158.029L184.249 158.391C183.605 159.191 182.404 160.292 180.176 160.377C179.374 160.395 178.488 160.252 177.767 159.875L177.327 159.625L178.067 158.374L178.37 158.551C178.97 158.896 179.575 159.106 180.476 159.106C181.381 159.106 182.326 158.551 182.643 158.199L182.884 157.939L182.823 157.679C182.736 157.281 182.588 156.899 182.385 156.548C182.145 156.151 181.876 155.772 181.58 155.416L181.078 154.804C180.677 154.304 180.274 153.765 180.075 153.362C179.893 153.018 179.758 152.65 179.674 152.268L179.612 151.968L179.814 151.746C180.588 150.885 181.582 150.259 182.685 149.937C183.694 149.64 184.747 149.526 185.794 149.603L186.237 149.643L185.794 150.929L185.152 150.894C184.616 150.859 184.077 150.887 183.546 150.977C182.746 151.117 182.021 151.486 181.578 151.866L181.32 152.091L181.381 152.318C181.44 152.598 181.622 153.015 181.861 153.362C182.102 153.712 182.343 153.97 182.685 154.407L183.184 155.036C183.546 155.501 183.868 155.956 184.026 156.323Z\" fill=\"url(#paint12_linear)\"/>\r\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M177.521 159.575L177.836 159.75C178.436 160.065 179.214 160.237 180.043 160.237L180.173 160.235C181.821 160.173 183.16 159.52 184.139 158.299L184.402 157.987L184.37 157.787C184.279 157.3 184.121 156.829 183.9 156.388L183.898 156.38C183.73 155.986 183.349 155.476 183.076 155.126L182.577 154.497C182.46 154.35 182.342 154.204 182.222 154.059C182.055 153.862 181.896 153.657 181.747 153.445C181.515 153.113 181.345 152.74 181.246 152.346L181.162 152.041L181.489 151.756C182.001 151.317 182.781 150.967 183.524 150.837C184.063 150.744 184.611 150.714 185.157 150.749L185.698 150.782L186.043 149.77L185.782 149.745C184.752 149.675 183.717 149.786 182.724 150.075C181.646 150.388 180.675 151 179.92 151.841L179.765 152.013L179.809 152.238C179.87 152.551 179.993 152.875 180.203 153.298C180.362 153.625 180.697 154.104 181.189 154.714L181.691 155.326C182.082 155.813 182.308 156.135 182.508 156.475C182.709 156.817 182.872 157.237 182.96 157.649L183.037 157.984L182.746 158.296C182.39 158.696 181.401 159.248 180.476 159.248C179.639 159.248 179.012 159.083 178.301 158.676L178.119 158.569L177.523 159.575H177.521ZM180.043 160.52C179.169 160.52 178.345 160.34 177.706 160.003L177.132 159.678L178.018 158.179L178.441 158.429C179.105 158.806 179.696 158.963 180.476 158.963C181.307 158.963 182.222 158.454 182.542 158.102L182.729 157.897L182.687 157.712C182.603 157.328 182.462 156.96 182.269 156.62C182.03 156.23 181.764 155.857 181.472 155.506L180.973 154.896C180.456 154.262 180.124 153.78 179.949 153.427C179.762 153.071 179.622 152.69 179.536 152.296L179.462 151.926L179.711 151.649C180.289 150.989 181.361 150.155 182.65 149.8C183.676 149.498 184.741 149.38 185.804 149.46L186.429 149.518L185.893 151.079L185.147 151.037C184.734 151.022 184.311 151.002 183.573 151.119C182.878 151.237 182.224 151.532 181.671 151.976L181.479 152.141L181.519 152.281C181.568 152.523 181.728 152.92 181.976 153.28C182.124 153.49 182.271 153.67 182.439 153.875C182.547 154.01 182.665 154.149 182.795 154.319L183.295 154.949C183.748 155.531 184.011 155.933 184.156 156.263C184.382 156.723 184.611 157.402 184.648 157.749L184.697 158.072L184.355 158.484C183.322 159.768 181.92 160.455 180.183 160.52H180.043ZM195.354 160.12H193.558L196.422 150.892H193.44L193.841 149.668H201.2L200.796 150.892H197.918L195.354 159.251V160.12Z\" fill=\"url(#paint13_linear)\"/>\r\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M193.75 159.978H195.214L195.222 159.206L197.812 150.749H200.698L201.005 149.813H193.942L193.637 150.749H196.614L193.75 159.978ZM195.492 160.265H193.367L196.23 151.037H193.246L193.738 149.525H201.396L200.897 151.037H198.019L195.492 159.273V160.265ZM211.126 157.432H207.21L205.239 160.31L203.775 159.958L211.124 149.67H213.173L212.971 150.512C212.524 152.434 212.355 154.412 212.469 156.383C212.568 158.007 212.809 159.038 212.971 159.645L213.072 159.995L211.603 160.31L211.505 159.993C211.433 159.705 211.372 159.415 211.323 159.123C211.255 158.677 211.203 158.229 211.165 157.779L211.124 157.432H211.126ZM211.564 151.069L207.989 156.298H211.003V155.948C211.003 155.448 211.003 155.214 211.065 154.237C211.124 153.42 211.261 152.373 211.404 151.731L211.564 151.069Z\" fill=\"url(#paint14_linear)\"/>\r\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M208.26 156.155H210.863V155.946C210.863 155.438 210.863 155.211 210.924 154.227C210.983 153.407 211.114 152.418 211.249 151.779L208.26 156.155ZM211.143 156.443H207.719L211.448 150.987L211.699 151.102L211.539 151.761C211.377 152.583 211.265 153.414 211.205 154.249C211.143 155.216 211.143 155.446 211.143 155.946V156.443ZM204.012 159.865L205.175 160.147L207.133 157.29H211.247L211.303 157.759C211.321 158.089 211.399 158.649 211.461 159.103C211.52 159.441 211.584 159.715 211.64 159.96L211.697 160.142L212.895 159.885L212.838 159.683C212.552 158.607 212.381 157.503 212.329 156.39C212.206 154.472 212.378 152.483 212.836 150.48L212.996 149.813H211.198L204.014 159.865H204.012ZM211.507 160.475L211.372 160.038C211.297 159.743 211.234 159.446 211.183 159.146C211.113 158.695 211.06 158.242 211.025 157.787L211.001 157.574H207.281L205.298 160.472L203.534 160.048L211.052 149.525H213.353L213.111 150.545C212.664 152.452 212.494 154.415 212.607 156.373C212.66 157.466 212.827 158.551 213.107 159.608L213.249 160.105L211.507 160.475ZM227.786 160.12L227.488 159.77C227.028 159.231 226.448 158.239 225.993 157.072C225.417 155.514 225.114 153.865 225.097 152.201V151.237L222.662 159.251V160.12H220.969L224.177 149.67H226.389V150.37C226.389 151.849 226.448 153.592 226.886 155.244C227.245 156.635 227.786 157.702 228.086 158.171L228.244 158.414L230.635 150.54V149.67H232.372L229.124 160.12H227.786Z\" fill=\"url(#paint15_linear)\"/>\r\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M227.85 159.978H229.021L232.177 149.813H230.775L230.77 150.585L228.288 158.749L227.968 158.249C227.421 157.324 227.01 156.324 226.748 155.279C226.305 153.61 226.249 151.861 226.249 150.37V149.813H224.28L221.159 159.98H222.521L222.529 159.206L224.964 151.194L225.237 151.234V152.198C225.237 153.747 225.584 155.636 226.123 157.02C226.534 158.077 227.097 159.093 227.594 159.675L227.85 159.978ZM229.225 160.265H227.725L227.38 159.865C226.866 159.261 226.283 158.211 225.862 157.125C225.277 155.55 224.971 153.882 224.957 152.198V152.183L222.804 159.273V160.265H220.777L220.834 160.078L224.071 149.525H226.531V150.37C226.531 151.844 226.588 153.567 227.021 155.206C227.351 156.475 227.857 157.547 228.197 158.082L230.495 150.517V149.525H232.561L229.225 160.265ZM242.114 160.205L238.97 160.26L241.919 150.542V149.67H248.249L248.648 150.512C249.445 152.181 249.445 154.409 248.729 156.033C247.393 158.988 244.407 160.17 242.114 160.205ZM243.349 150.809L240.884 158.988H241.72C243.509 158.988 245.701 158.379 246.995 156.115C248.052 154.267 247.772 152.181 247.295 151.207L247.093 150.809H243.349Z\" fill=\"url(#paint16_linear)\"/>\r\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M241.073 158.843H241.715C243.044 158.843 245.479 158.481 246.872 156.043C247.915 154.224 247.619 152.191 247.167 151.269L247.009 150.952H243.452L241.071 158.846L241.073 158.843ZM241.715 159.131H240.692L240.748 158.943L243.245 150.664H247.182L247.42 151.139C247.9 152.121 248.215 154.269 247.118 156.185C245.651 158.749 243.105 159.133 241.715 159.133V159.131ZM242.06 149.813L242.055 150.585L239.159 160.113L242.111 160.063C244.269 160.03 247.26 158.936 248.601 155.971C249.319 154.347 249.285 152.173 248.522 150.575L248.161 149.813H242.06ZM238.778 160.405L238.834 160.215L241.779 150.517V149.525H248.335L248.778 150.45C249.573 152.123 249.605 154.389 248.857 156.09C247.462 159.176 244.352 160.312 242.119 160.347L238.778 160.405ZM262.36 157.432H258.444L256.478 160.31L255.012 159.958L262.36 149.67H264.41L264.208 150.512C263.762 152.434 263.593 154.412 263.706 156.383C263.804 158.007 264.05 159.038 264.208 159.645L264.309 159.995L262.84 160.31L262.742 159.993C262.671 159.705 262.611 159.415 262.562 159.123C262.494 158.677 262.44 158.229 262.4 157.779L262.36 157.432ZM262.803 151.069L259.231 156.298H262.24V155.948C262.23 154.532 262.365 153.119 262.643 151.731L262.801 151.069H262.803Z\" fill=\"url(#paint17_linear)\"/>\r\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M259.499 156.155H262.099V155.946C262.099 155.438 262.099 155.211 262.161 154.227C262.222 153.405 262.33 152.588 262.486 151.779L259.499 156.155ZM262.38 156.443H258.96L262.685 150.987L262.936 151.102L262.776 151.761C262.643 152.388 262.5 153.432 262.441 154.249C262.38 155.216 262.38 155.446 262.38 155.946V156.443ZM255.251 159.865L256.419 160.147L258.372 157.29H262.486L262.54 157.764C262.562 158.114 262.653 158.756 262.7 159.103C262.766 159.478 262.83 159.758 262.877 159.96L262.936 160.142L264.132 159.885L264.075 159.683C263.903 159.033 263.662 157.984 263.566 156.39C263.453 154.406 263.624 152.415 264.072 150.48L264.232 149.813H262.434L255.251 159.865ZM262.744 160.475L262.609 160.038C262.535 159.743 262.472 159.445 262.422 159.146C262.352 158.695 262.298 158.242 262.259 157.787L262.235 157.574H258.52L256.54 160.472L254.776 160.048L262.289 149.525H264.589L264.346 150.545C263.9 152.452 263.732 154.416 263.846 156.373C263.942 157.922 264.164 158.916 264.343 159.608L264.491 160.1L262.744 160.475ZM276.656 156.37L276.558 156.028H274.934L273.952 159.248V160.118H272.208L275.153 150.542V149.67H280.604L280.865 150.197C281.325 151.134 281.544 152.421 280.966 153.537C280.366 154.687 279.16 155.296 278.358 155.556L277.999 155.676L278.216 156.463C278.321 156.827 278.717 157.644 279.023 158.029C279.401 158.534 280.021 159.228 281.325 159.106L281.665 159.071L281.266 160.295L280.627 160.322C279.421 160.377 278.361 159.68 277.662 158.636C277.207 157.943 276.867 157.178 276.656 156.373V156.37ZM276.558 150.807L275.273 154.896H275.854C277.355 154.896 278.361 154.509 279.16 153.765C279.923 153.053 279.962 151.921 279.662 151.154L279.522 150.804H276.555L276.558 150.807Z\" fill=\"url(#paint18_linear)\"/>\r\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M275.465 154.751H275.854C277.264 154.751 278.253 154.414 279.064 153.657C279.783 152.99 279.81 151.916 279.532 151.207L279.429 150.949H276.658L275.465 154.751ZM275.854 155.039H275.079L276.452 150.662H279.611L279.793 151.099C280.103 151.899 280.071 153.108 279.251 153.872C278.39 154.679 277.34 155.039 275.854 155.039ZM274.828 155.886H276.658L276.791 156.335C277.023 157.187 277.35 157.914 277.775 158.556C278.474 159.595 279.458 160.182 280.494 160.182L280.617 160.18L281.16 160.155L281.463 159.233L281.34 159.248C281.241 159.257 281.142 159.261 281.042 159.261C279.77 159.261 279.175 158.469 278.909 158.116C278.559 157.621 278.28 157.078 278.08 156.503L277.829 155.583L278.317 155.421C278.858 155.244 280.199 154.696 280.841 153.467C281.318 152.556 281.276 151.359 280.737 150.26L280.516 149.813H275.291L275.286 150.584L272.4 159.975H273.812L273.819 159.206L274.828 155.886ZM280.494 160.47C279.362 160.47 278.294 159.835 277.544 158.716C277.08 158.011 276.734 157.233 276.521 156.413L276.452 156.173H275.035L274.095 159.271V160.262H272.019L272.075 160.075L275.013 150.517V149.528H280.693L280.988 150.132C281.569 151.311 281.603 152.611 281.089 153.605C280.395 154.929 278.981 155.506 278.403 155.693L278.169 155.768L278.353 156.425C278.452 156.78 278.853 157.582 279.131 157.942C279.559 158.506 280.139 159.076 281.315 158.963L281.869 158.906L281.367 160.43L280.629 160.467H280.494V160.47ZM291.99 160.205L288.843 160.26L291.791 150.542V149.67H298.123L298.521 150.512C299.318 152.181 299.318 154.409 298.603 156.033C297.267 158.988 294.28 160.17 291.99 160.205ZM293.225 150.809L290.757 158.988H291.594C293.385 158.988 295.574 158.379 296.871 156.115C297.929 154.267 297.646 152.181 297.168 151.207L296.967 150.809H293.225Z\" fill=\"url(#paint19_linear)\"/>\r\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M290.947 158.843H291.594C292.922 158.843 295.355 158.481 296.75 156.043C297.788 154.224 297.495 152.191 297.043 151.269L296.88 150.952H293.328L290.947 158.846V158.843ZM291.594 159.131H290.565L290.624 158.943L293.119 150.664H297.055L297.294 151.139C297.773 152.121 298.088 154.269 296.994 156.185C295.527 158.749 292.984 159.133 291.594 159.133V159.131ZM291.931 149.813L291.921 150.585L289.035 160.113L291.987 160.063C294.142 160.03 297.139 158.936 298.477 155.971C299.19 154.347 299.158 152.173 298.396 150.575L298.034 149.813H291.933H291.931ZM288.656 160.405L288.71 160.215L291.648 150.517V149.525H298.214L298.652 150.45C299.444 152.123 299.481 154.387 298.73 156.09C297.336 159.176 294.228 160.312 291.992 160.347L288.656 160.405Z\" fill=\"url(#paint20_linear)\"/>\r\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M149.146 7.05481C142.511 10.6597 138.87 16.9001 140.932 20.8697C143.006 24.8418 150.777 25.1415 157.412 21.5392C164.045 17.9368 167.041 11.8013 164.972 7.83424C162.906 3.86215 155.791 3.45995 149.146 7.05481ZM156.952 21.4567C150.856 24.7593 143.126 24.2422 141.235 20.6124C139.34 16.975 143.36 10.8895 149.446 7.58942C155.543 4.28434 162.593 4.15943 164.793 8.36885C166.689 12.0012 163.039 18.1542 156.952 21.4592\" fill=\"url(#paint21_linear)\"/>\r\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M156.327 8.16151C134.292 17.1274 122.722 41.0074 128.292 60.8753L128.841 60.3932C122.208 41.6494 136.024 17.1999 157.242 8.63866C181.027 -0.956802 201.623 10.9794 208.405 30.7349L208.346 30.685C202.393 9.42808 179.162 -1.13167 156.327 8.16151Z\" fill=\"url(#paint22_linear)\"/>\r\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M174.717 29.3759C162.65 13.3627 148.194 5.16369 143.203 7.92417L142.125 8.53372C146.932 5.86818 162.898 15.0664 174.515 30.5526C188.291 48.9366 194.892 70.7056 192.907 77.6605L192.092 79.6016C192.324 79.2818 192.545 78.9171 192.715 78.4849C195.854 70.6981 188.705 47.9373 174.719 29.3759\" fill=\"url(#paint23_linear)\"/>\r\n<mask id=\"mask1\" mask-type=\"alpha\" maskUnits=\"userSpaceOnUse\" x=\"145\" y=\"0\" width=\"36\" height=\"87\">\r\n<path d=\"M145.54 0H180.269V86.4091H145.54V0Z\" fill=\"white\"/>\r\n</mask>\r\n<g mask=\"url(#mask1)\">\r\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M180.269 86.0918C165.823 86.6914 150.573 69.3441 146.998 44.8621C144.548 23.1105 152.573 3.76973 165.606 1.00676C166.285 0.856871 166.959 0.774432 167.643 0.719472L167.801 0C167.112 0.059956 166.43 0.14989 165.754 0.292286C152.263 3.19016 143.087 22.0563 146.122 44.5148C149.345 68.2724 164.588 87.1835 179.89 86.0094C180.246 85.9844 179.964 86.3816 179.599 86.4091L180.269 86.0918Z\" fill=\"url(#paint24_linear)\"/>\r\n</g>\r\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M189.576 21.9839C172.121 6.03058 146.359 6.15299 131.616 20.0203L132.277 20.3026C146.526 6.98738 172.574 7.44704 189.31 22.8507C207.397 40.233 208.031 64.8524 192.926 79.1344L192.944 79.067C208.737 64.2354 207.66 38.5217 189.573 21.9814\" fill=\"url(#paint25_linear)\"/>\r\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M207.185 27.3399C207.205 27.6322 207.227 27.9295 207.234 28.2268C207.259 28.9512 208.774 34.8344 207.564 39.6284C205.453 49.5736 198.277 58.7719 187.583 66.0815C173.186 75.9118 156.177 79.9813 143.567 74.95C139.249 73.7334 135.571 70.8155 132.932 67.7403C132.321 67.033 131.762 66.2815 131.259 65.4919C132.002 66.9284 132.89 68.4048 134.039 69.6689C144.644 81.3053 168.891 79.9713 188.119 66.831C204.649 55.5392 212.13 39.1213 207.185 27.3399ZM125.143 40.4503C125.197 40.5552 125.246 40.6577 125.305 40.7576C130.942 51.3248 149.378 51.9943 166.739 42.194C184.272 32.3038 193.111 16.1207 187.674 5.25862L186.668 5.13371C191.797 15.3512 183.42 31.9216 166.81 41.2872C150.212 50.6628 131.129 50.353 126.011 40.1305L125.143 40.4503Z\" fill=\"url(#paint26_linear)\"/>\r\n<mask id=\"mask2\" mask-type=\"alpha\" maskUnits=\"userSpaceOnUse\" x=\"5\" y=\"176\" width=\"299\" height=\"8\">\r\n<path d=\"M5.41211 176.785H304V184H5.41211V176.785Z\" fill=\"white\"/>\r\n</mask>\r\n<g mask=\"url(#mask2)\">\r\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M5.41211 176.785H304L156.891 184L5.41211 176.785Z\" fill=\"url(#paint27_linear)\"/>\r\n</g>\r\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M163.499 59.6537C163.499 51.3723 155.014 51.06 145.117 49.1989V47.4352H176.884L199.704 80.5284H199.928L221.646 47.4352H235.243V121.476H225.464V52.9212H225.24L202.287 90.6685L197.849 96.4867L169.578 52.9187H169.349V121.473H163.501V59.6537H163.499ZM115.47 81.6101C110.053 77.5706 105.967 72.9315 105.967 65.457C105.967 56.8833 111.502 51.3948 119.645 51.3948C127.561 51.3948 134.799 55.192 138.305 57.1656V47.3153C135.023 46.4709 128.922 45.0694 121.571 45.0694C106.53 45.0694 96.9135 53.5057 96.9135 68.837C96.9135 72.1171 97.3981 74.9675 98.2222 77.5181C104.417 78.6473 110.203 80.0188 115.47 81.6101ZM287.458 116.852H275.588C267.568 116.852 266.584 116.852 266.584 110.506V87.5083H285.904V81.9174H266.582V58.9742C266.582 53.0661 267.015 51.752 273.291 51.752H284.809C293.936 51.752 293.825 55.1445 294.93 60.8329H298.337L297.783 47.4877H239.978V49.3438C249.536 50.6603 257.017 52.7413 257.017 58.9742V121.121H299.646L300.423 106.245C300.423 106.245 294.93 116.854 287.458 116.854\" fill=\"url(#paint28_linear)\"/>\r\n<defs>\r\n<linearGradient id=\"paint0_linear\" x1=\"71.7957\" y1=\"79.4142\" x2=\"71.7957\" y2=\"137.567\" gradientUnits=\"userSpaceOnUse\">\r\n<stop stop-color=\"#E47F40\"/>\r\n<stop offset=\"1\" stop-color=\"#CD5A2F\"/>\r\n</linearGradient>\r\n<linearGradient id=\"paint1_linear\" x1=\"56.6082\" y1=\"45.5565\" x2=\"56.6082\" y2=\"125.54\" gradientUnits=\"userSpaceOnUse\">\r\n<stop stop-color=\"#E47F40\"/>\r\n<stop offset=\"1\" stop-color=\"#CD5A2F\"/>\r\n</linearGradient>\r\n<linearGradient id=\"paint2_linear\" x1=\"17.3537\" y1=\"149.58\" x2=\"17.3537\" y2=\"160.379\" gradientUnits=\"userSpaceOnUse\">\r\n<stop stop-color=\"#E47F40\"/>\r\n<stop offset=\"1\" stop-color=\"#CD5A2F\"/>\r\n</linearGradient>\r\n<linearGradient id=\"paint3_linear\" x1=\"24.5862\" y1=\"149.438\" x2=\"24.5862\" y2=\"160.52\" gradientUnits=\"userSpaceOnUse\">\r\n<stop stop-color=\"#E47F40\"/>\r\n<stop offset=\"1\" stop-color=\"#CD5A2F\"/>\r\n</linearGradient>\r\n<linearGradient id=\"paint4_linear\" x1=\"39.4464\" y1=\"149.528\" x2=\"39.4464\" y2=\"160.265\" gradientUnits=\"userSpaceOnUse\">\r\n<stop stop-color=\"#E47F40\"/>\r\n<stop offset=\"1\" stop-color=\"#CD5A2F\"/>\r\n</linearGradient>\r\n<linearGradient id=\"paint5_linear\" x1=\"54.0276\" y1=\"149.525\" x2=\"54.0276\" y2=\"160.265\" gradientUnits=\"userSpaceOnUse\">\r\n<stop stop-color=\"#E47F40\"/>\r\n<stop offset=\"1\" stop-color=\"#CD5A2F\"/>\r\n</linearGradient>\r\n<linearGradient id=\"paint6_linear\" x1=\"65.6847\" y1=\"149.525\" x2=\"65.6847\" y2=\"160.265\" gradientUnits=\"userSpaceOnUse\">\r\n<stop stop-color=\"#E47F40\"/>\r\n<stop offset=\"1\" stop-color=\"#CD5A2F\"/>\r\n</linearGradient>\r\n<linearGradient id=\"paint7_linear\" x1=\"81.0112\" y1=\"149.525\" x2=\"81.0112\" y2=\"160.265\" gradientUnits=\"userSpaceOnUse\">\r\n<stop stop-color=\"#E47F40\"/>\r\n<stop offset=\"1\" stop-color=\"#CD5A2F\"/>\r\n</linearGradient>\r\n<linearGradient id=\"paint8_linear\" x1=\"94.8567\" y1=\"149.525\" x2=\"94.8567\" y2=\"160.467\" gradientUnits=\"userSpaceOnUse\">\r\n<stop stop-color=\"#E47F40\"/>\r\n<stop offset=\"1\" stop-color=\"#CD5A2F\"/>\r\n</linearGradient>\r\n<linearGradient id=\"paint9_linear\" x1=\"116.978\" y1=\"149.421\" x2=\"116.978\" y2=\"160.627\" gradientUnits=\"userSpaceOnUse\">\r\n<stop stop-color=\"#E47F40\"/>\r\n<stop offset=\"1\" stop-color=\"#CD5A2F\"/>\r\n</linearGradient>\r\n<linearGradient id=\"paint10_linear\" x1=\"138.034\" y1=\"149.525\" x2=\"138.034\" y2=\"160.265\" gradientUnits=\"userSpaceOnUse\">\r\n<stop stop-color=\"#E47F40\"/>\r\n<stop offset=\"1\" stop-color=\"#CD5A2F\"/>\r\n</linearGradient>\r\n<linearGradient id=\"paint11_linear\" x1=\"151.909\" y1=\"149.525\" x2=\"151.909\" y2=\"160.262\" gradientUnits=\"userSpaceOnUse\">\r\n<stop stop-color=\"#E47F40\"/>\r\n<stop offset=\"1\" stop-color=\"#CD5A2F\"/>\r\n</linearGradient>\r\n<linearGradient id=\"paint12_linear\" x1=\"171.216\" y1=\"149.528\" x2=\"171.216\" y2=\"160.379\" gradientUnits=\"userSpaceOnUse\">\r\n<stop stop-color=\"#E47F40\"/>\r\n<stop offset=\"1\" stop-color=\"#CD5A2F\"/>\r\n</linearGradient>\r\n<linearGradient id=\"paint13_linear\" x1=\"189.166\" y1=\"149.436\" x2=\"189.166\" y2=\"160.52\" gradientUnits=\"userSpaceOnUse\">\r\n<stop stop-color=\"#E47F40\"/>\r\n<stop offset=\"1\" stop-color=\"#CD5A2F\"/>\r\n</linearGradient>\r\n<linearGradient id=\"paint14_linear\" x1=\"203.21\" y1=\"149.525\" x2=\"203.21\" y2=\"160.31\" gradientUnits=\"userSpaceOnUse\">\r\n<stop stop-color=\"#E47F40\"/>\r\n<stop offset=\"1\" stop-color=\"#CD5A2F\"/>\r\n</linearGradient>\r\n<linearGradient id=\"paint15_linear\" x1=\"217.953\" y1=\"149.525\" x2=\"217.953\" y2=\"160.475\" gradientUnits=\"userSpaceOnUse\">\r\n<stop stop-color=\"#E47F40\"/>\r\n<stop offset=\"1\" stop-color=\"#CD5A2F\"/>\r\n</linearGradient>\r\n<linearGradient id=\"paint16_linear\" x1=\"235.017\" y1=\"149.525\" x2=\"235.017\" y2=\"160.265\" gradientUnits=\"userSpaceOnUse\">\r\n<stop stop-color=\"#E47F40\"/>\r\n<stop offset=\"1\" stop-color=\"#CD5A2F\"/>\r\n</linearGradient>\r\n<linearGradient id=\"paint17_linear\" x1=\"251.594\" y1=\"149.525\" x2=\"251.594\" y2=\"160.405\" gradientUnits=\"userSpaceOnUse\">\r\n<stop stop-color=\"#E47F40\"/>\r\n<stop offset=\"1\" stop-color=\"#CD5A2F\"/>\r\n</linearGradient>\r\n<linearGradient id=\"paint18_linear\" x1=\"268.22\" y1=\"149.525\" x2=\"268.22\" y2=\"160.475\" gradientUnits=\"userSpaceOnUse\">\r\n<stop stop-color=\"#E47F40\"/>\r\n<stop offset=\"1\" stop-color=\"#CD5A2F\"/>\r\n</linearGradient>\r\n<linearGradient id=\"paint19_linear\" x1=\"285.574\" y1=\"149.528\" x2=\"285.574\" y2=\"160.47\" gradientUnits=\"userSpaceOnUse\">\r\n<stop stop-color=\"#E47F40\"/>\r\n<stop offset=\"1\" stop-color=\"#CD5A2F\"/>\r\n</linearGradient>\r\n<linearGradient id=\"paint20_linear\" x1=\"293.963\" y1=\"149.525\" x2=\"293.963\" y2=\"160.405\" gradientUnits=\"userSpaceOnUse\">\r\n<stop stop-color=\"#E47F40\"/>\r\n<stop offset=\"1\" stop-color=\"#CD5A2F\"/>\r\n</linearGradient>\r\n<linearGradient id=\"paint21_linear\" x1=\"152.987\" y1=\"4.58965\" x2=\"152.987\" y2=\"24.0565\" gradientUnits=\"userSpaceOnUse\">\r\n<stop stop-color=\"#E47F40\"/>\r\n<stop offset=\"1\" stop-color=\"#CD5A2F\"/>\r\n</linearGradient>\r\n<linearGradient id=\"paint22_linear\" x1=\"167.655\" y1=\"4.77083\" x2=\"167.655\" y2=\"60.8753\" gradientUnits=\"userSpaceOnUse\">\r\n<stop stop-color=\"#E47F40\"/>\r\n<stop offset=\"1\" stop-color=\"#CD5A2F\"/>\r\n</linearGradient>\r\n<linearGradient id=\"paint23_linear\" x1=\"167.785\" y1=\"7.39622\" x2=\"167.785\" y2=\"79.6016\" gradientUnits=\"userSpaceOnUse\">\r\n<stop stop-color=\"#E47F40\"/>\r\n<stop offset=\"1\" stop-color=\"#CD5A2F\"/>\r\n</linearGradient>\r\n<linearGradient id=\"paint24_linear\" x1=\"162.904\" y1=\"0\" x2=\"162.904\" y2=\"86.4091\" gradientUnits=\"userSpaceOnUse\">\r\n<stop stop-color=\"#E47F40\"/>\r\n<stop offset=\"1\" stop-color=\"#CD5A2F\"/>\r\n</linearGradient>\r\n<linearGradient id=\"paint25_linear\" x1=\"167.817\" y1=\"9.8087\" x2=\"167.817\" y2=\"79.1344\" gradientUnits=\"userSpaceOnUse\">\r\n<stop stop-color=\"#E47F40\"/>\r\n<stop offset=\"1\" stop-color=\"#CD5A2F\"/>\r\n</linearGradient>\r\n<linearGradient id=\"paint26_linear\" x1=\"166.916\" y1=\"5.13371\" x2=\"166.916\" y2=\"77.607\" gradientUnits=\"userSpaceOnUse\">\r\n<stop stop-color=\"#E47F40\"/>\r\n<stop offset=\"1\" stop-color=\"#CD5A2F\"/>\r\n</linearGradient>\r\n<linearGradient id=\"paint27_linear\" x1=\"154.706\" y1=\"176.785\" x2=\"154.706\" y2=\"184\" gradientUnits=\"userSpaceOnUse\">\r\n<stop stop-color=\"#E47F40\"/>\r\n<stop offset=\"1\" stop-color=\"#CD5A2F\"/>\r\n</linearGradient>\r\n<linearGradient id=\"paint28_linear\" x1=\"198.668\" y1=\"45.0694\" x2=\"198.668\" y2=\"121.476\" gradientUnits=\"userSpaceOnUse\">\r\n<stop stop-color=\"#E47F40\"/>\r\n<stop offset=\"1\" stop-color=\"#CD5A2F\"/>\r\n</linearGradient>\r\n</defs>\r\n</svg>\r\n","import React from 'react';\r\nconst Chanakya=()=>{\r\n    return (<svg className=\"linkimg\" width=\"160\" height=\"179\" viewBox=\"0 0 160 179\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M63.0212 15.0388C63.0108 15.1056 63.0108 15.2151 63.0212 15.282C63.0528 15.4871 62.7516 15.4165 62.6732 15.2009C62.6164 15.044 62.5504 15.0493 62.38 15.2248C62.2408 15.3679 62.2336 15.4088 62.36 15.3367C62.4928 15.2609 62.56 15.3383 62.56 15.5677C62.56 15.8778 62.5852 15.8875 62.8048 15.6654C63.1884 15.2763 63.6156 15.5142 63.256 15.9171C63.0152 16.1867 63.0124 16.2147 63.2364 16.1275C63.6552 15.965 63.6928 15.5933 63.3176 15.327C63.0712 15.1518 63.0404 15.0793 63.2124 15.0793C63.3464 15.0793 63.5468 15.1705 63.6576 15.282C63.8192 15.4445 63.838 15.4283 63.7524 15.2009C63.6488 14.9253 63.0592 14.7943 63.0212 15.0388ZM90.0152 15.2694C90.1828 15.4632 90.23 15.5681 90.12 15.5029C90.01 15.4376 89.92 15.4615 89.92 15.556C89.92 15.6504 89.9896 15.7278 90.0748 15.7278C90.1604 15.7278 90.192 15.828 90.1456 15.95C90.0216 16.2779 90.4384 16.374 90.888 16.1214C91.2596 15.9131 91.2584 15.877 90.88 15.8292C90.792 15.8182 90.732 15.7724 90.7472 15.7278C90.8284 15.4838 90.3408 14.9172 90.0496 14.9172C89.7144 14.9172 89.714 14.9216 90.0152 15.2694ZM90.7544 15.2929C90.7764 15.5653 90.8752 15.6606 91.1124 15.6383C91.4552 15.6062 91.4756 15.2544 91.1472 15.0428C90.8272 14.8365 90.7224 14.9034 90.7544 15.2929ZM60.3368 16.5815C59.8288 16.847 59.5604 17.528 59.9904 17.4615C60.1544 17.436 60.4172 17.3091 60.5744 17.1794C60.8336 16.9654 60.8488 16.9739 60.7404 17.2681C60.6468 17.5223 60.6632 17.5503 60.8156 17.3966C60.9616 17.2499 60.9648 17.1453 60.8292 16.9791C60.6936 16.8138 60.6952 16.7096 60.836 16.5669C61.08 16.3196 60.8236 16.3269 60.3368 16.5815ZM56.16 17.7546C56.16 17.8883 56.0468 17.9978 55.9088 17.9978C55.74 17.9978 55.6744 18.1173 55.7088 18.3626C55.76 18.7262 57.0984 19.0395 57.1332 18.6962C57.1408 18.624 57.1648 18.3974 57.1872 18.1919C57.2116 17.969 57.1136 17.757 56.9444 17.665C56.524 17.4372 56.16 17.4785 56.16 17.7546ZM97.7256 17.6832C97.5144 17.8081 97.4844 17.9329 97.5956 18.2292C97.6748 18.4404 97.696 18.6569 97.6432 18.7108C97.59 18.7643 97.9188 18.8085 98.3732 18.8085C99.142 18.8085 99.2 18.7809 99.2 18.4149C99.2 17.6682 98.4128 17.2775 97.7256 17.6832ZM54.584 19.0687C54.2924 19.4027 54.48 19.5612 54.7924 19.2446C54.9284 19.1068 55.04 18.952 55.04 18.9013C55.04 18.731 54.8024 18.8182 54.584 19.0687ZM99.8936 19.3354C100.26 19.7164 100.416 19.7967 100.458 19.6252C100.49 19.4951 100.436 19.3609 100.337 19.3277C100.239 19.2945 100.206 19.1891 100.264 19.0938C100.326 18.9913 100.294 18.9678 100.185 19.0363C100.083 19.0999 100 19.0748 100 18.9803C100 18.8859 99.862 18.8085 99.6936 18.8085C99.4332 18.8085 99.4628 18.8871 99.8936 19.3354ZM50.6264 20.3261C50.3356 21.0942 50.6092 21.4837 51.44 21.4837H52.24V20.8352V20.1866L51.4784 20.1372C50.9224 20.1011 50.6924 20.1522 50.6264 20.3261ZM102.624 20.7156C102.62 21.4087 102.766 21.5599 103.44 21.5599C104.682 21.5599 104.676 20.2227 103.434 20.1542L102.628 20.1096L102.624 20.7156ZM69.0228 21.641C69.042 21.7723 69.1076 21.9304 69.1688 21.9924C69.23 22.0545 69.28 22.2279 69.28 22.3775C69.28 22.6848 70.4828 22.7845 70.8292 22.5064C71.4656 21.9945 71.0156 21.4027 69.99 21.4027C69.1992 21.4027 68.9956 21.4529 69.0228 21.641ZM83.9816 21.4432C83.8516 21.7326 83.8996 22.3609 84.05 22.3317C84.1544 22.311 84.2268 22.3714 84.2104 22.4651C84.1932 22.566 84.5544 22.6467 85.0904 22.6621C85.5908 22.6767 85.928 22.6361 85.84 22.5725C85.752 22.5088 85.6728 22.3654 85.664 22.2539C85.6552 22.1424 85.6372 21.9053 85.624 21.7269C85.6036 21.4505 84.0956 21.1899 83.9816 21.4432ZM46.72 22.8339C46.72 22.9584 46.584 22.9957 46.348 22.9357C45.9016 22.8222 45.5316 23.1987 45.6664 23.6296C45.8048 24.0706 46.8784 24.0362 47.0436 23.585C47.1188 23.3799 47.0804 23.1371 46.9424 22.9462C46.82 22.7764 46.72 22.7261 46.72 22.8339ZM65.12 23.1051C64.85 23.3961 64.8084 23.5157 64.972 23.5295C65.0976 23.54 64.984 23.6045 64.72 23.6726C64.3436 23.7695 64.316 23.8007 64.5924 23.8157C64.7864 23.8262 65.1408 23.7443 65.3796 23.6341C65.7256 23.4744 65.828 23.4744 65.8808 23.6341C66.0528 24.1574 67.04 23.628 67.04 23.0123C67.04 22.4991 65.618 22.5676 65.12 23.1051ZM87.8896 22.9649C87.67 23.5445 88.046 23.7447 89.3748 23.7577C90.0708 23.7646 90.4112 23.7439 90.132 23.7119C89.6488 23.6568 89.012 23.1862 89.4204 23.1862C89.5192 23.1862 89.6 23.2591 89.6 23.3483C89.6 23.4375 89.726 23.5092 89.88 23.508C90.1192 23.506 90.1252 23.4825 89.92 23.3483C89.7176 23.2158 89.716 23.1906 89.9104 23.1886C90.076 23.187 90.0532 23.1189 89.8304 22.9482C89.3884 22.609 88.0196 22.6211 87.8896 22.9649ZM107.52 22.9105C107.52 23.0605 107.659 23.2713 107.828 23.3783C108.114 23.5591 108.116 23.5887 107.868 23.78C107.64 23.9559 107.725 23.9871 108.44 23.9916C109.165 23.9961 109.28 23.9539 109.28 23.6843C109.28 23.3232 108.877 22.8619 108.562 22.8619C108.443 22.8619 108.22 22.8129 108.065 22.7529C107.84 22.6653 107.806 22.7054 107.893 22.9555C107.998 23.2599 107.995 23.2599 107.76 22.9527C107.552 22.6791 107.52 22.6734 107.52 22.9105ZM65.44 23.2672C65.3268 23.4055 65.1984 23.4817 65.1544 23.4371C65.1104 23.3925 65.1668 23.2433 65.28 23.1051C65.3932 22.9669 65.5216 22.8907 65.5656 22.9353C65.6096 22.9799 65.5532 23.129 65.44 23.2672ZM66.7808 23.2599C66.6616 23.5745 66.2724 23.6977 66.1396 23.463C66.0784 23.3552 66.084 23.3175 66.1512 23.3791C66.312 23.5254 66.7128 23.1489 66.5984 22.9584C66.55 22.8777 66.5904 22.8619 66.6884 22.9231C66.786 22.9843 66.8276 23.1359 66.7808 23.2599ZM46.24 23.1764C46.24 23.3678 45.928 23.5725 45.8132 23.4565C45.6988 23.3402 45.9008 23.024 46.0896 23.024C46.1724 23.024 46.24 23.0925 46.24 23.1764ZM109.021 23.4367C109.068 23.5607 109.019 23.7127 108.913 23.7743C108.807 23.8363 108.77 23.8307 108.83 23.7626C108.975 23.5996 108.603 23.1935 108.415 23.3094C108.336 23.3584 108.32 23.3175 108.38 23.2182C108.515 22.9973 108.904 23.1298 109.021 23.4367ZM42.9868 25.4022C42.8236 25.5672 42.8644 26.1565 43.0576 26.4289C43.2032 26.634 43.216 26.628 43.14 26.3884C43.0804 26.2003 43.1344 26.1047 43.3 26.1047C43.4376 26.1047 43.5864 25.9636 43.6308 25.7917C43.6828 25.5895 43.8052 25.5088 43.9756 25.5635C44.2032 25.6369 44.2064 25.6243 44 25.4739C43.7312 25.2782 43.1496 25.2368 42.9868 25.4022ZM96.6528 25.4966C96.6452 25.6628 96.756 25.7816 96.92 25.7828C97.1576 25.7848 97.164 25.8083 96.9612 25.9381C96.7672 26.0625 96.7608 26.1298 96.928 26.2992C97.0952 26.4687 97.1616 26.4622 97.2844 26.2656C97.4124 26.0601 97.4356 26.0666 97.4376 26.3073C97.4392 26.4869 97.5636 26.5911 97.7772 26.5911C98.0188 26.5911 98.0868 26.5185 98.0172 26.3345C97.9636 26.1934 97.92 26.0163 97.92 25.9409C97.92 25.7167 97.436 25.294 97.1792 25.294C97.0484 25.294 96.9856 25.3669 97.04 25.4561C97.0944 25.5453 97.0688 25.6182 96.9828 25.6182C96.8968 25.6182 96.7904 25.527 96.746 25.4156C96.6976 25.2944 96.66 25.3272 96.6528 25.4966ZM43.52 25.6993C43.52 25.8331 43.412 25.9425 43.28 25.9425C43.03 25.9425 42.9624 25.7508 43.1468 25.5643C43.3308 25.3775 43.52 25.446 43.52 25.6993ZM97.6 25.6993C97.7632 25.8983 97.752 25.9425 97.5396 25.9425C97.3968 25.9425 97.28 25.8331 97.28 25.6993C97.28 25.5655 97.3072 25.4561 97.3404 25.4561C97.3736 25.4561 97.4904 25.5655 97.6 25.6993ZM57.6736 26.1156C57.6156 26.2104 57.6064 26.3272 57.6532 26.375C57.768 26.4909 58.08 26.2862 58.08 26.0949C58.08 25.8878 57.8036 25.9016 57.6736 26.1156ZM54.3008 26.9559C54.3328 27.1565 54.288 27.4593 54.2008 27.6292C54.07 27.8841 54.0896 27.919 54.3144 27.8318C54.464 27.7735 54.6832 27.726 54.8016 27.726C55.1168 27.726 55.52 27.2648 55.52 26.9036C55.52 26.647 55.4056 26.5911 54.8812 26.5911C54.3076 26.5911 54.248 26.6284 54.3008 26.9559ZM40.6368 27.0005C40.5256 27.1363 40.4808 27.2943 40.5372 27.3515C40.5936 27.4091 40.64 27.3616 40.64 27.2469C40.64 27.0815 40.6984 27.084 40.92 27.2603C41.17 27.4593 41.178 27.4545 40.9932 27.2149C40.8244 26.996 40.8244 26.9316 40.9932 26.8626C41.116 26.8128 41.1268 26.7735 41.0196 26.7662C40.9204 26.7589 40.748 26.8643 40.6368 27.0005ZM55.2608 27.1513C55.1416 27.4658 54.7524 27.589 54.6196 27.3543C54.5584 27.2465 54.564 27.2088 54.6312 27.2704C54.792 27.4168 55.1928 27.0402 55.0784 26.8497C55.03 26.769 55.0704 26.7532 55.1684 26.8144C55.266 26.8756 55.3076 27.0272 55.2608 27.1513ZM113.887 26.8626C114.056 26.9316 114.056 26.996 113.887 27.2149C113.702 27.4545 113.71 27.4593 113.96 27.2603C114.182 27.084 114.24 27.0815 114.24 27.2469C114.24 27.3616 114.286 27.4091 114.343 27.3515C114.477 27.2153 114.094 26.7496 113.86 26.7662C113.753 26.7735 113.764 26.8128 113.887 26.8626ZM99.36 27.1261C99.36 27.3973 99.6844 27.726 99.952 27.726C100.066 27.726 100.16 27.6409 100.16 27.5367C100.16 27.433 100.113 27.3957 100.055 27.4545C99.91 27.6012 99.5024 27.2376 99.6112 27.0592C99.6596 26.9802 99.6228 26.9153 99.5296 26.9153C99.4364 26.9153 99.36 27.0102 99.36 27.1261ZM114.56 28.0775C114.56 28.1812 114.609 28.2169 114.669 28.1561C114.806 28.0171 115.696 28.8659 115.592 29.0369C115.549 29.1062 115.588 29.2088 115.677 29.2647C115.864 29.3815 115.902 28.8156 115.72 28.6312C115.654 28.5643 115.6 28.4244 115.6 28.3207C115.6 28.2165 115.516 28.1314 115.413 28.1314C115.311 28.1314 115.173 28.0767 115.107 28.0098C114.921 27.8217 114.56 27.8663 114.56 28.0775ZM114.56 28.5116C114.56 28.6685 115.091 29.1853 115.252 29.1853C115.312 29.1853 115.36 29.1001 115.36 28.996C115.36 28.8922 115.313 28.8549 115.255 28.9137C115.11 29.0604 114.702 28.6968 114.811 28.5185C114.86 28.4394 114.823 28.3746 114.73 28.3746C114.636 28.3746 114.56 28.4362 114.56 28.5116ZM51.36 29.2217C51.36 29.3016 51.296 29.3267 51.218 29.2777C51.14 29.2286 50.988 29.2967 50.88 29.4285C50.772 29.5602 50.6124 29.6234 50.5248 29.5687C50.4284 29.5079 50.4512 29.4143 50.5828 29.3296C50.752 29.2209 50.738 29.1897 50.52 29.1877C50.2068 29.1849 50.1456 29.4313 50.4172 29.6012C50.5404 29.6786 50.5284 29.7544 50.3772 29.8517C50.204 29.9627 50.2028 29.9915 50.3696 29.9935C50.4848 29.9947 50.5344 30.0689 50.48 30.1581C50.3576 30.3591 50.4336 30.3608 50.9328 30.1686C51.3928 29.9915 51.9304 29.077 51.5744 29.077C51.4564 29.077 51.36 29.1423 51.36 29.2217ZM103.315 29.5322C103.562 30.0345 104.273 30.4325 104.504 30.1986C104.577 30.1249 104.487 30.0531 104.305 30.0393C103.905 30.0089 103.52 29.7078 103.52 29.426C103.52 29.3125 103.42 29.1812 103.298 29.1338C103.116 29.0629 103.119 29.1334 103.315 29.5322ZM83.3932 29.2947C83.2644 29.3474 83.24 29.4496 83.3284 29.5659C83.5588 29.8691 83.694 30.3482 83.518 30.2379C83.4312 30.1836 83.36 30.2181 83.36 30.315C83.36 30.4232 83.6968 30.4795 84.24 30.4613C85.1364 30.4317 85.5004 30.0665 84.8148 29.8849C84.6468 29.8403 84.4736 29.6648 84.4296 29.4945C84.352 29.193 83.8716 29.1006 83.3932 29.2947ZM51.2 29.5039C51.2 29.5898 51.038 29.7463 50.84 29.8517C50.482 30.0422 50.4816 30.0414 50.7848 29.6952C51.1236 29.3089 51.2 29.2736 51.2 29.5039ZM67.9628 29.8204C67.6752 30.0807 67.4944 30.3482 67.5608 30.4155C67.6272 30.4828 67.8428 30.3928 68.0408 30.2157C68.4264 29.8699 68.596 29.8403 68.9364 30.0588C69.0772 30.1492 69.0568 30.0491 68.878 29.7726C68.5412 29.2513 68.5944 29.2485 67.9628 29.8204ZM68.246 30.3105C68.1948 30.394 68.2988 30.4516 68.4764 30.4382C68.6544 30.4244 68.8 30.3559 68.8 30.2858C68.8 30.1066 68.3584 30.1261 68.246 30.3105ZM63.622 30.7256C63.5716 30.8593 63.5996 30.9688 63.6852 30.9688C63.7704 30.9688 63.84 31.1512 63.84 31.3741C63.84 31.7162 63.9148 31.7795 64.32 31.7795C64.7732 31.7795 64.8 31.7434 64.8 31.1309C64.8 30.4333 63.856 30.1086 63.622 30.7256ZM105.902 30.8448C106.066 31.291 106.987 31.863 106.987 31.518C106.987 31.3944 106.922 31.2931 106.844 31.2931C106.765 31.2931 106.74 31.2282 106.789 31.1492C106.9 30.9676 106.464 30.593 106.07 30.5322C105.824 30.4945 105.795 30.5493 105.902 30.8448ZM94.88 32.428C95.056 32.6064 95.2 32.8253 95.2 32.9144C95.2 33.0036 95.398 33.0737 95.64 33.0701L96.08 33.0632L95.526 32.5837C94.8972 32.0389 94.3712 31.9124 94.88 32.428ZM55.7868 33.1848C55.3912 33.5853 55.694 34.34 56.28 34.4146C57.1368 34.5232 57.3212 34.2626 57.1408 33.1982C57.1152 33.0478 55.9336 33.036 55.7868 33.1848ZM96.2496 33.5399C96.2708 33.7758 96.2956 34.0514 96.304 34.1532C96.3232 34.3733 97.3596 34.5241 97.6412 34.3477C97.9008 34.1856 97.9608 33.3956 97.71 33.4446C97.6056 33.4653 97.5336 33.4037 97.5504 33.308C97.5684 33.2075 97.2912 33.1293 96.8964 33.1228C96.2504 33.1126 96.2136 33.1362 96.2496 33.5399ZM119.88 33.184C119.77 33.229 119.68 33.5152 119.68 33.8196C119.68 34.4422 120.648 34.6858 120.863 34.1171C121.03 33.6749 120.97 33.5225 120.66 33.6047C120.43 33.6655 120.379 33.6141 120.439 33.3802C120.517 33.0794 120.312 33.0073 119.88 33.184ZM33.8264 34.325L33.3748 34.9249L33.7916 34.6088C34.0212 34.4349 34.1804 34.263 34.1456 34.2265C34.1112 34.1901 34.1628 34.0624 34.2608 33.9428C34.3588 33.8232 34.4028 33.7251 34.3584 33.7251C34.3144 33.7251 34.0748 33.9951 33.8264 34.325ZM53.72 35.0356L53.12 35.6708H53.76C54.3996 35.6708 54.4896 35.5394 54.3864 34.7567C54.3788 34.6996 54.4688 34.5913 54.5864 34.516C54.7572 34.4061 54.752 34.381 54.56 34.3895C54.428 34.3956 54.05 34.6866 53.72 35.0356ZM121.028 34.6485C121.052 34.8094 121.124 34.929 121.188 34.914C121.432 34.8585 121.441 34.7385 121.217 34.55C121.029 34.3919 120.994 34.4102 121.028 34.6485ZM32.8736 34.7089C32.8156 34.8037 32.8064 34.9205 32.8532 34.9683C32.968 35.0842 33.28 34.8795 33.28 34.6882C33.28 34.4811 33.0036 34.4949 32.8736 34.7089ZM53.3352 34.7859C53.2832 34.9237 53.2836 35.0798 53.3364 35.1333C53.4504 35.2488 53.92 34.8824 53.92 34.6781C53.92 34.4333 53.4348 34.5228 53.3352 34.7859ZM121.68 35.3465C121.626 35.4357 121.603 35.5143 121.63 35.5212C122.157 35.6533 122.247 35.6315 122.069 35.4146C121.845 35.141 121.809 35.1345 121.68 35.3465ZM112 35.9217C112 36.0214 112.105 36.1033 112.233 36.1033C112.361 36.1033 112.497 36.0214 112.535 35.9217C112.573 35.822 112.468 35.7401 112.302 35.7401C112.136 35.7401 112 35.822 112 35.9217ZM112.761 35.9679C112.698 36.2103 112.748 36.2606 112.987 36.1969C113.155 36.1523 113.268 36.0384 113.236 35.944C113.135 35.6355 112.843 35.6501 112.761 35.9679ZM113.04 36.4434C112.796 36.625 112.774 36.9679 113.006 36.9679C113.119 36.9679 113.212 36.822 113.212 36.6436C113.212 36.4653 113.209 36.3205 113.206 36.3218C113.202 36.323 113.128 36.3777 113.04 36.4434ZM50.6676 37.1057C50.3928 37.6659 50.5804 38.2662 51.0376 38.2893C51.3028 38.3027 51.61 38.3209 51.72 38.3298C51.8492 38.3404 51.92 38.117 51.92 37.6975C51.92 37.0891 50.9096 36.6116 50.6676 37.1057ZM69.6148 37.3432C69.5188 37.5941 69.44 37.9042 69.44 38.0323C69.44 38.8394 68.2508 39.1519 67.6568 38.5005C67.282 38.0899 66.236 37.4543 65.9348 37.4543C65.848 37.4543 65.62 37.8908 65.428 38.4247C65.236 38.9581 64.9972 39.4636 64.8976 39.5475C64.7184 39.6979 62.7472 38.8438 62.3536 38.445C62.0496 38.1369 61.96 38.2399 61.8432 39.0291C61.5608 40.9366 60.9928 41.5134 60.1248 40.7728C59.2092 39.9922 57.8392 40.4036 58.3064 41.3188C58.956 42.592 57.1388 43.635 56.1368 42.5645C55.508 41.8928 55.0964 42.5507 55.1724 44.106C55.2356 45.3982 54.7784 45.8441 53.7616 45.4809C52.5776 45.0573 52.078 45.5835 52.5584 46.7484C52.8256 47.3962 52.7672 47.673 52.2004 48.4497C51.8512 48.9276 51.7788 48.9612 51.544 48.7541C50.218 47.5847 49.5956 48.9499 50.6884 50.6304C51.194 51.4075 50.9224 51.8116 49.7816 51.9794C48.6324 52.1488 48.0704 52.4865 48.3676 52.8286C49.682 54.3413 49.6828 55.3806 48.37 55.951C47.538 56.3125 47.538 56.3109 48.24 57.6514C48.998 59.0997 48.896 59.4503 47.56 59.9849C47.274 60.0993 47.04 60.2606 47.04 60.3433C47.04 60.6834 47.588 61.5293 48.1748 62.0948C48.9412 62.8333 48.9468 62.9744 48.24 63.6501C47.2852 64.5629 47.41 65.3594 48.6 65.9439C49.7036 66.4859 49.8124 66.8069 49.1328 67.5175C48.3164 68.3711 48.6428 69.4473 49.7772 69.6415C50.9956 69.8502 51.3048 70.5377 50.5644 71.3925C50.1516 71.8688 50.1076 72.0083 50.2316 72.4464C50.4628 73.2632 50.5404 73.311 51.0356 72.9402C52.1752 72.0865 53.2128 73.9535 52.4 75.3945C52.0864 75.9502 52.0944 75.9762 52.6484 76.2088C53.0352 76.371 53.2708 76.373 53.7836 76.2174C54.8188 75.9028 55.4484 76.6264 55.1824 77.825C54.9468 78.8886 55.3744 79.2947 56.3296 78.9141C56.9588 78.664 57.0288 78.666 57.5884 78.9555C58.666 79.5128 58.7036 79.6401 58.1712 80.925C58.0168 81.2979 59.3044 81.4739 59.76 81.1423C59.936 81.0142 60.2368 80.7941 60.428 80.6535C61.0064 80.2278 61.5428 80.7037 61.6848 81.7681C61.882 83.2493 62.6384 83.3826 64.124 82.1982C64.7384 81.7082 65.4324 82.4317 65.4392 83.5699C65.4444 84.426 66.5316 84.3117 67.624 83.3397C68.4732 82.5841 68.8912 82.7195 69.5064 83.9501C69.8156 84.5691 69.9432 84.5334 71.1212 83.5002C71.9536 82.7706 72.5044 82.6789 72.9216 83.2014C73.5852 84.0328 73.7676 84.1499 74.3944 84.1499C75.094 84.1499 75.2476 83.9777 75.422 82.9967C75.6172 81.8995 76.06 81.715 76.7828 82.4305C77.5236 83.1637 78.6348 83.0802 78.7984 82.2797C78.8432 82.06 78.9208 81.6838 78.9708 81.4443C79.1676 80.4966 79.9744 80.3369 80.7444 81.0932C81.4684 81.8042 82.048 81.4889 81.9488 80.4374C81.8268 79.1395 82.7908 78.5546 84.432 78.9315C85.4036 79.1545 85.7848 78.7422 85.388 77.8987C84.8464 76.7475 86.0212 75.4172 86.9504 76.1294C87.796 76.7775 88.4984 76.2157 88.1064 75.2048C87.4596 73.5356 88.864 71.9154 89.9788 73.0451C90.5944 73.669 90.7036 72.1173 90.0936 71.4128C89.528 70.7602 89.5136 70.6836 89.8396 70.0444C90.0516 69.6293 90.1772 69.5689 90.9176 69.5255L91.756 69.4765L91.8596 68.8279C91.9528 68.2471 91.9068 68.1157 91.4216 67.571C90.6372 66.6897 90.8576 66.1555 92.16 65.7802C93.1876 65.4838 93.3124 64.4405 92.4104 63.687C91.6824 63.0789 91.6916 62.7413 92.454 62.0713C93.6916 60.9841 93.65 60.4466 92.2516 59.4568C91.6364 59.0214 91.744 58.5914 92.8688 56.9927C93.2808 56.4078 93.0552 56.0584 92.1664 55.9048C90.9048 55.6863 90.752 55.2323 91.516 53.9741C92.4372 52.4569 92.288 52.0467 90.8144 52.0467C89.6588 52.0467 89.314 51.2368 90.0896 50.3442C91.0952 49.1874 90.7388 47.8716 89.5772 48.4537L88.8912 48.7979L88.432 48.3548C87.688 47.6382 87.6376 47.4371 88.0156 46.7022C88.338 46.0756 88.3412 46.0233 88.0836 45.6248C87.804 45.1923 87.7256 45.1895 86.774 45.5774C86.1572 45.8291 85.0008 45.1161 85.2084 44.6123C85.728 43.3529 85.3924 42.3127 84.5908 42.6982C83.052 43.438 81.7388 42.7797 81.9952 41.3963C82.2044 40.2666 81.3896 39.8823 80.5448 40.712C79.7864 41.4571 79.5752 41.2836 78.558 39.0769C78.2752 38.4632 77.4624 38.5013 76.7968 39.16C76.094 39.8551 75.6756 39.7376 75.4436 38.7802C75.1204 37.4474 73.8828 37.1122 73.2564 38.188C72.5764 39.3558 71.9108 39.2605 70.6148 37.8102L69.7896 36.8868L69.6148 37.3432ZM40.8168 37.5147C40.4168 38.0031 40.906 38.4587 41.3484 38.01C41.6672 37.6874 41.6668 37.5151 41.3468 37.3907C41.014 37.2613 41.0272 37.2581 40.8168 37.5147ZM30.72 38.3363C30.72 38.5516 31.1728 38.7323 31.2436 38.5455C31.292 38.4182 31.2024 38.3221 31.0224 38.3084C30.856 38.2954 30.72 38.3079 30.72 38.3363ZM123.52 38.9176C123.52 39.4741 123.569 39.5637 123.88 39.5746C124.078 39.5811 124.366 39.6115 124.52 39.6411C124.757 39.6873 124.793 39.5925 124.749 39.0331C124.667 38.0056 123.52 37.8977 123.52 38.9176ZM30.1228 39.22C30.1364 39.4024 30.2312 39.4932 30.3568 39.4441C30.518 39.3817 30.5244 39.3087 30.3844 39.1377C30.1408 38.8402 30.0956 38.8548 30.1228 39.22ZM28.8532 41.1044C28.8532 41.3582 29.228 41.5616 29.3444 41.3711C29.4384 41.2171 29.2548 40.9504 29.0268 40.9086C28.9312 40.8912 28.8532 40.9796 28.8532 41.1044ZM125.6 41.1024C125.6 41.2362 125.708 41.3456 125.84 41.3456C125.972 41.3456 126.08 41.2362 126.08 41.1024C126.08 40.9686 125.972 40.8592 125.84 40.8592C125.708 40.8592 125.6 40.9686 125.6 41.1024ZM106.88 44.209C106.88 44.6569 106.953 44.9175 107.08 44.9256C107.19 44.9329 107.475 44.9536 107.712 44.9714C108.133 45.003 108.304 44.0314 107.942 43.6646C107.494 43.2114 106.88 43.5264 106.88 44.209ZM67.68 45.823C68.076 45.9446 68.768 46.0448 69.2176 46.046C69.824 46.0472 70.1876 46.1522 70.6248 46.4529C70.9488 46.6759 71.2776 46.8583 71.3548 46.8583C71.664 46.8583 72.48 47.7196 72.4824 48.0484C72.4856 48.5028 72.5504 48.585 73.624 49.5027C74.1216 49.9275 74.5748 50.463 74.6316 50.6924C74.6884 50.9223 74.9836 51.3475 75.2876 51.6381C75.5912 51.9283 75.8404 52.3033 75.8404 52.4711C75.8408 52.6389 75.984 53.0138 76.1588 53.3045C76.67 54.1537 76.722 54.9607 76.338 56.0847C76.0916 56.8054 76.0044 57.4374 76.016 58.4114C76.0304 59.6015 76.048 59.6769 76.178 59.0997C76.3312 58.4175 76.8096 57.8836 77.2676 57.8836C77.4172 57.8836 77.6956 57.6704 77.8856 57.4098C78.6024 56.4272 81.0308 56.4597 82.0668 57.4653C82.2992 57.6911 82.7128 57.9546 82.9864 58.051C85.0952 58.7961 84.8824 62.7372 82.6756 63.811C82.216 64.0343 81.48 64.4324 81.04 64.695C80.6 64.9573 80.132 65.175 80 65.1786C79.3352 65.196 79.3544 65.4316 80.1524 67.0294C81.3676 69.4623 81.468 71.7091 80.4076 72.7225C80.0928 73.0233 79.8448 73.4521 79.7788 73.8104C79.4532 75.5692 75.6216 76.5761 72.4984 75.7236C71.768 75.5246 70.4964 74.1002 70.3192 73.2831C70.248 72.9543 69.9596 72.5028 69.6192 72.1862L69.04 71.6487V70.0492C69.04 68.6139 69.0796 68.3954 69.4248 67.922C69.6368 67.6322 69.8956 67.0967 70 66.7331C70.148 66.2183 70.3204 66.0084 70.7752 65.7866C71.3524 65.5053 71.4964 65.2844 71.2168 65.1093C70.9656 64.952 69.3752 65.3343 68.9424 65.6561C68.588 65.9196 68.4308 65.9411 67.9024 65.7984C66.8164 65.5053 65.8928 65.4616 65.26 65.6727C64.4448 65.9455 62.0904 65.2366 61.4288 64.5191C61.198 64.2686 60.8208 64.0157 60.5908 63.9573C59.9908 63.8045 59.6724 63.3521 58.7148 61.291C58.446 60.7125 58.1228 60.1811 57.9964 60.1094C57.8704 60.038 57.4676 59.4596 57.1016 58.8244L56.436 57.6696L56.6312 56.3405C56.782 55.3146 56.7832 54.8654 56.638 54.3742C56.4164 53.6243 57.116 51.4606 57.9152 50.4229C58.1568 50.1095 58.4032 49.6973 58.4628 49.5072C58.6152 49.0212 59.3216 48.3431 60.078 47.9576C60.4312 47.7772 61.0292 47.3759 61.4068 47.0654C61.7844 46.7549 62.4552 46.4043 62.8968 46.2863C63.3384 46.1684 63.864 45.9629 64.0644 45.8295C64.7532 45.3723 66.2032 45.3694 67.68 45.823ZM34.8776 45.8449C34.8756 46.0873 34.8524 46.0934 34.72 45.8855C34.598 45.6945 34.5644 45.6901 34.5624 45.8648C34.5608 46.0326 34.5072 46.0427 34.3452 45.9065C34.052 45.6601 33.92 45.838 33.92 46.4801C33.92 47.1141 34.0624 47.1562 34.512 46.6556C34.9672 46.1493 35.254 45.5612 35.0456 45.5612C34.9544 45.5612 34.8788 45.6889 34.8776 45.8449ZM120.295 46.2288C120.373 46.4412 120.562 46.6402 120.716 46.671C121.09 46.7456 120.963 46.3865 120.508 46.0804C120.17 45.8526 120.16 45.8587 120.295 46.2288ZM42.24 46.3058C42.24 46.4481 42.096 46.6025 41.92 46.6491C41.718 46.7026 41.6 46.8704 41.6 47.1043C41.6 47.3127 41.35 47.7277 41.028 48.054C40.5116 48.5773 40.3852 49.1477 40.8512 48.8514C40.9548 48.7849 41.166 48.752 41.32 48.7776C41.4992 48.8076 41.658 48.6706 41.76 48.3982C41.9668 47.8473 41.9616 47.7877 41.72 47.9288C41.61 47.9928 41.6944 47.8514 41.908 47.6142C42.3188 47.157 42.58 47.0107 42.2368 47.4298C42.1256 47.5656 42.0904 47.7298 42.1592 47.7946C42.2276 47.8591 42.3148 47.825 42.3524 47.7184C42.39 47.6122 42.52 47.5636 42.6412 47.611C42.8112 47.6771 42.8604 47.508 42.8556 46.8721C42.8504 46.1716 42.8032 46.0476 42.5448 46.0476C42.3724 46.0476 42.24 46.1599 42.24 46.3058ZM119.84 46.4412C119.84 46.7399 120.277 47.1826 120.572 47.1826C120.888 47.1826 120.861 47.097 120.393 46.6224C119.924 46.1481 119.84 46.1201 119.84 46.4412ZM33.6468 47.5052C33.6012 47.6823 33.5008 47.7881 33.4236 47.7399C33.3468 47.6917 33.3312 47.778 33.3896 47.932C33.4716 48.1489 33.4336 48.1874 33.2196 48.1043C33.0552 48.0403 32.9828 48.0617 33.0412 48.1574C33.0948 48.2454 33.0088 48.3232 32.8496 48.3305C32.6904 48.3374 32.646 48.3787 32.7512 48.4221C33.0748 48.5555 33.5576 48.187 33.7348 47.6722C33.8276 47.4031 33.8644 47.1826 33.8168 47.1826C33.7692 47.1826 33.6924 47.3277 33.6468 47.5052ZM108.16 48.1011C108.16 48.6544 108.22 48.8084 108.44 48.8246C108.594 48.836 108.877 48.8623 109.068 48.883C109.385 48.917 109.414 48.8522 109.387 48.1732C109.358 47.4258 109.357 47.4258 108.759 47.412L108.16 47.3982V48.1011ZM129.12 47.5028C129.12 47.6021 129.246 47.6617 129.4 47.6357C129.591 47.6029 129.665 47.6783 129.633 47.8716C129.607 48.0277 129.666 48.1554 129.764 48.1554C129.862 48.1554 129.919 47.9912 129.891 47.7906C129.838 47.4156 129.12 47.1473 129.12 47.5028ZM32.3676 49.9932C32.424 50.1416 32.4004 50.2632 32.3148 50.2632C32.2296 50.2632 32.16 50.191 32.16 50.1026C32.16 50.0147 31.9944 49.9563 31.7924 49.9734C31.426 50.0042 31.166 50.7496 31.5216 50.7496C31.6088 50.7496 31.68 50.827 31.68 50.9214C31.68 51.0159 31.608 51.0479 31.52 50.9928C31.432 50.9377 31.36 50.9697 31.36 51.0641C31.36 51.1586 31.504 51.236 31.68 51.236C31.856 51.236 32 51.1655 32 51.0791C32 50.9924 32.1204 50.9689 32.2676 51.026C32.4708 51.1051 32.5108 51.0645 32.4328 50.8586C32.3764 50.7095 32.3996 50.5874 32.4852 50.5874C32.7044 50.5874 32.678 49.9819 32.4528 49.8408C32.3268 49.7622 32.2992 49.812 32.3676 49.9932ZM122.301 50.1744C122.168 50.5258 122.383 50.8035 122.629 50.5968C122.896 50.3718 123.084 50.581 122.86 50.8542C122.728 51.0167 122.746 51.0941 122.934 51.1675C123.328 51.3207 123.52 51.101 123.52 50.4966C123.52 49.8862 122.511 49.6191 122.301 50.1744ZM23.68 50.4156C23.68 50.793 23.9396 50.9972 24.0536 50.7099C24.0984 50.598 24.1404 50.6827 24.1472 50.8983C24.1544 51.1136 24.21 51.2392 24.2712 51.1772C24.5036 50.9417 24.438 50.596 24.1428 50.5007C23.9736 50.4464 23.8768 50.3341 23.9272 50.2514C23.9776 50.1687 23.9428 50.101 23.8496 50.101C23.7564 50.101 23.68 50.2425 23.68 50.4156ZM129.92 50.7812C129.92 51.782 131.133 51.7455 131.151 50.7443L131.163 50.0901L130.542 50.1274C129.935 50.1635 129.92 50.1793 129.92 50.7812ZM68.16 52.5331C68.16 52.6223 68.3084 52.6952 68.4896 52.6952C68.6708 52.6952 68.7744 52.6223 68.72 52.5331C68.6656 52.4439 68.5172 52.371 68.3904 52.371C68.2636 52.371 68.16 52.4439 68.16 52.5331ZM23.1304 52.7127C23.2048 52.8347 23.126 52.8553 22.8844 52.7775C22.5716 52.677 22.542 52.707 22.6412 53.024C22.714 53.2554 22.6952 53.3474 22.5892 53.281C22.4816 53.2137 22.426 53.5473 22.43 54.2335C22.436 55.3259 22.4556 55.3527 23.2 55.2935C23.7632 55.2485 23.8448 55.12 23.7368 54.4459C23.6484 53.8955 23.6136 53.8638 23.2504 54.0037C22.7444 54.1987 22.7708 54.2064 22.6736 53.8302C22.6276 53.6518 22.6552 53.5059 22.7348 53.5059C22.8148 53.5059 22.88 53.3965 22.88 53.2627C22.88 53.129 22.988 53.0195 23.12 53.0195C23.252 53.0195 23.36 52.9421 23.36 52.8476C23.36 52.7532 23.432 52.7212 23.52 52.7763C23.608 52.8314 23.68 52.7994 23.68 52.705C23.68 52.6105 23.5316 52.5331 23.3504 52.5331C23.1504 52.5331 23.064 52.6036 23.1304 52.7127ZM109.76 52.6069C109.76 52.7029 110.552 53.5059 110.647 53.5059C110.687 53.5059 110.72 53.392 110.72 53.253C110.72 53.114 110.656 53.0402 110.578 53.0892C110.402 53.1995 110.043 52.7864 110.188 52.6397C110.246 52.5809 110.173 52.5331 110.027 52.5331C109.88 52.5331 109.76 52.5663 109.76 52.6069ZM123.52 52.7763C123.52 52.9101 123.595 53.0195 123.687 53.0195C123.779 53.0195 123.833 53.1472 123.807 53.3032C123.775 53.4966 123.849 53.572 124.04 53.5392C124.194 53.5132 124.32 53.5679 124.32 53.6608C124.32 53.754 124.428 53.8302 124.56 53.8302C124.692 53.8302 124.8 53.7528 124.8 53.6583C124.8 53.5639 124.737 53.5266 124.659 53.5748C124.582 53.6235 124.331 53.4731 124.102 53.2404C123.872 53.0082 123.724 52.754 123.772 52.6758C123.82 52.5971 123.783 52.5331 123.69 52.5331C123.596 52.5331 123.52 52.6425 123.52 52.7763ZM131.807 52.8047C131.976 52.8736 131.976 52.938 131.807 53.1569C131.622 53.3965 131.63 53.4013 131.88 53.2023C132.102 53.026 132.16 53.0236 132.16 53.1889C132.16 53.3037 132.206 53.3511 132.263 53.2935C132.397 53.1573 132.014 52.6916 131.78 52.7082C131.673 52.7155 131.684 52.7548 131.807 52.8047ZM38.4112 53.2506C38.2104 53.467 38.0944 53.7224 38.1528 53.818C38.2112 53.9141 38.1468 53.9923 38.0096 53.9923C37.8184 53.9923 37.76 54.1735 37.76 54.7669V55.5412L38.4012 55.4791C39.2204 55.4001 39.2528 55.3324 39.1192 53.9826C38.9956 52.7382 38.94 52.6802 38.4112 53.2506ZM30.7168 53.2668C30.6056 53.4026 30.5588 53.559 30.6132 53.6142C30.7296 53.7317 31.2 53.3693 31.2 53.1618C31.2 52.9384 30.9392 52.9952 30.7168 53.2668ZM65.5944 53.6932C65.4884 53.9024 65.184 54.3065 64.9184 54.591C63.9328 55.6465 64.8328 57.2351 66.4164 57.2351C68.6336 57.2351 68.5944 53.8464 66.3724 53.424C65.8632 53.3272 65.7628 53.362 65.5944 53.6932ZM69.5748 54.3981C69.4856 55.5375 69.6184 57.7215 69.7768 57.7215C69.8556 57.7215 69.92 56.8095 69.92 55.6948C69.92 53.7443 69.6932 52.8914 69.5748 54.3981ZM131.11 54.3965C130.95 55.2603 131.098 55.4795 131.799 55.4208C132.4 55.3705 132.4 55.3697 132.418 54.6003L132.436 53.8302H131.825C131.254 53.8302 131.208 53.8671 131.11 54.3965ZM29.08 56.375C28.5092 56.5241 28.8236 57.7252 29.432 57.7191C29.5908 57.7174 29.6168 57.6737 29.5044 57.5975C29.4076 57.5318 29.3296 57.3628 29.3308 57.2217C29.3336 56.9287 29.7756 56.8707 29.9688 57.1382C30.0448 57.2436 30.0736 57.184 30.0392 56.9919C30.0072 56.8135 29.8952 56.6858 29.7904 56.7081C29.6856 56.7304 29.618 56.6664 29.64 56.5663C29.6876 56.3494 29.4668 56.274 29.08 56.375ZM125.084 56.6267C125.124 56.7831 125.257 56.9108 125.379 56.9108C125.5 56.9108 125.6 57.0203 125.6 57.154C125.6 57.2878 125.708 57.3972 125.84 57.3972C126.007 57.3972 126.08 57.227 126.08 56.8391C126.08 56.3085 126.054 56.2825 125.545 56.3117C125.122 56.336 125.026 56.4017 125.084 56.6267ZM21.76 56.5813C21.76 56.668 21.6396 56.6915 21.4924 56.6344C21.2892 56.5553 21.2492 56.5959 21.3272 56.8018C21.3836 56.9509 21.3604 57.073 21.2748 57.073C21.1896 57.073 21.12 57.2468 21.12 57.4592C21.12 57.8565 21.8248 58.171 22.0148 57.8593C22.0628 57.7807 22.1692 57.7584 22.2512 57.8095C22.3348 57.8618 22.4 57.5784 22.4 57.1637C22.4 56.5326 22.3532 56.4244 22.08 56.4244C21.904 56.4244 21.76 56.4949 21.76 56.5813ZM132.599 56.8703C132.335 57.4057 132.977 58.2059 133.282 57.7215C133.491 57.3891 133.479 57.2983 133.188 57.0036C132.916 56.7276 132.694 56.6773 132.599 56.8703ZM133.503 57.5752C133.494 57.8342 133.548 58.0458 133.623 58.0458C133.792 58.0458 133.806 57.2829 133.64 57.1796C133.574 57.1386 133.512 57.3166 133.503 57.5752ZM63.1112 57.5736C62.9464 57.8439 63.3172 58.154 63.538 57.9303C63.7228 57.743 63.6072 57.3972 63.36 57.3972C63.2824 57.3972 63.1704 57.4767 63.1112 57.5736ZM64.3888 58.8747C64.2352 59.1264 64.5856 59.3084 65.0504 59.2184C65.4956 59.1321 65.5584 58.9371 65.1868 58.7928C64.8044 58.6441 64.5112 58.6741 64.3888 58.8747ZM67.68 58.8378C67.328 58.9388 67.3152 58.9663 67.5732 59.0664C68.058 59.2553 68.6736 59.2022 68.6 58.9781C68.5192 58.7316 68.2128 58.685 67.68 58.8378ZM28.12 58.9744C27.5564 59.0344 27.52 59.0717 27.52 59.5909C27.52 60.0397 27.57 60.124 27.7864 60.0397C27.9728 59.9671 28.0156 59.9967 27.9292 60.1386C27.8396 60.2857 27.9304 60.3262 28.2628 60.2877C28.6316 60.2448 28.73 60.1451 28.7724 59.7713C28.806 59.4718 28.7636 59.3465 28.6524 59.4162C28.4188 59.5626 28.4332 59.293 28.672 59.051C28.7776 58.944 28.8316 58.8686 28.792 58.8836C28.7524 58.8986 28.45 58.9396 28.12 58.9744ZM126.518 59.1155C126.465 59.169 126.46 59.3141 126.508 59.4385C126.555 59.5626 126.487 59.7057 126.357 59.7563C126.124 59.8467 126.013 60.64 126.233 60.64C126.295 60.64 126.34 60.8041 126.333 61.0048C126.323 61.2825 126.406 61.3664 126.68 61.3566C126.878 61.3497 127.04 61.4045 127.04 61.4782C127.04 61.5524 127.112 61.6128 127.2 61.6128C127.292 61.6128 127.36 61.1199 127.36 60.4588C127.36 59.3704 127.341 59.31 127.027 59.3931C126.784 59.4576 126.718 59.4191 126.782 59.2501C126.87 59.019 126.699 58.9323 126.518 59.1155ZM28.544 60.0178C28.4892 60.1074 28.36 60.0924 28.2276 59.9809C28.1044 59.8771 28.0452 59.7243 28.096 59.6408C28.1508 59.5512 28.28 59.5662 28.4124 59.6777C28.5356 59.7815 28.5948 59.9343 28.544 60.0178ZM79.6032 59.9878C79.2728 60.3579 79.3504 61.3485 79.7412 61.7441C80.2408 62.2508 81.4376 61.3408 81.4396 60.4527C81.44 60.2476 80.3144 59.6672 79.9164 59.6672C79.9016 59.6672 79.7608 59.8115 79.6032 59.9878ZM36.7232 60.5788C36.5096 60.7952 36.4696 61.1702 36.4972 62.6951C36.5156 63.7145 36.5808 64.466 36.6424 64.3655C36.7036 64.2646 36.8544 64.1965 36.9772 64.2139C37.854 64.3383 37.9912 63.9549 37.8332 61.8191C37.7136 60.2042 37.4184 59.8743 36.7232 60.5788ZM112.01 62.2614C111.988 64.1369 112 64.207 112.323 64.207C112.508 64.207 112.618 64.1409 112.569 64.0599C112.52 63.9792 112.635 63.9541 112.825 64.0043C113.116 64.0818 113.156 64.0412 113.08 63.7461C113.03 63.5536 113.055 63.4369 113.135 63.4867C113.217 63.5382 113.28 63.0376 113.28 62.3368C113.28 61.2525 113.242 61.0859 112.975 61.0153C112.807 60.9707 112.634 60.7952 112.59 60.625C112.318 59.5715 112.033 60.3765 112.01 62.2614ZM75.96 60.6757C75.9016 60.8293 75.6528 61.0044 75.4068 61.0656C75.1592 61.1268 74.4604 61.6894 73.84 62.327C73.224 62.9598 72.522 63.6067 72.28 63.7648C71.4312 64.3197 71.698 64.5657 73 64.4287C73.638 64.3619 74.97 64.3039 75.96 64.3006C77.7744 64.2942 78.196 64.1685 77.242 63.918C76.7452 63.7875 76.7156 63.7336 76.508 62.5759C76.156 60.6124 76.082 60.3558 75.96 60.6757ZM20.0136 63.1365C19.7688 63.4356 19.8148 65.541 20.0632 65.3789C20.1604 65.3152 20.42 65.2601 20.64 65.2569C21.0868 65.2496 21.2516 64.6792 21.1432 63.5179C21.0812 62.8564 20.4248 62.6347 20.0136 63.1365ZM133.76 64.0793C133.76 65.1636 133.766 65.1798 134.187 65.1798C134.421 65.1798 134.569 65.2248 134.514 65.2804C134.416 65.3793 134.772 65.8284 134.948 65.8284C134.999 65.8284 135.04 65.6825 135.04 65.5041C135.04 65.3258 134.95 65.1786 134.84 65.1774C134.716 65.1758 134.701 65.1296 134.8 65.0558C135.021 64.8916 135.06 63.3732 134.85 63.1166C134.308 62.4539 133.76 62.9375 133.76 64.0793ZM35.552 64.5637C35.3144 64.8045 35.3008 65.1798 35.5296 65.1798C35.6228 65.1798 35.6476 65.0955 35.5848 64.9926C35.5156 64.8795 35.5408 64.8495 35.6484 64.9168C35.88 65.0619 35.7104 65.5041 35.4228 65.5041C35.282 65.5041 35.2 65.6829 35.2 65.9905C35.2 66.2581 35.2732 66.4769 35.3632 66.4769C35.4588 66.4769 35.484 66.2933 35.424 66.0311C35.3252 65.5986 35.3296 65.5949 35.5812 65.9095C35.8256 66.2147 35.8344 66.2155 35.7332 65.9232C35.6632 65.721 35.6856 65.6508 35.7984 65.7214C36.134 65.9313 36.48 65.6391 36.48 65.145C36.48 64.7842 36.4196 64.6821 36.2452 64.7502C36.116 64.8004 35.9608 64.7603 35.9004 64.6614C35.834 64.5524 35.8636 64.5268 35.9752 64.597C36.0768 64.6606 36.16 64.6355 36.16 64.541C36.16 64.3092 35.7896 64.3229 35.552 64.5637ZM110.636 65.3481C110.303 65.8953 110.737 66.7684 111.331 66.7441C111.918 66.7201 111.92 66.7181 111.955 65.95L111.99 65.1798H111.364C111.02 65.1798 110.693 65.2556 110.636 65.3481ZM26.1972 66.3744C26.078 67.1421 26.2396 67.971 26.4892 67.8738C26.6048 67.8292 26.7344 67.8794 26.7772 67.9856C26.826 68.108 26.8604 68.0898 26.87 67.9362C26.8824 67.7347 26.9088 67.7311 27.0244 67.9163C27.3204 68.3898 27.5392 67.9046 27.494 66.8774L27.4484 65.8499L26.862 65.858C26.3308 65.8653 26.2684 65.9139 26.1972 66.3744ZM127.382 66.8928C127.362 67.2884 127.402 67.62 127.473 67.6297C128.644 67.7931 128.83 67.6245 128.672 66.5365C128.558 65.7421 127.425 66.055 127.382 66.8928ZM74.3244 68.8466C73.8548 69.3225 74.0476 71.2134 74.5852 71.4043C75.6448 71.7805 76.2312 71.1003 76.0184 69.7424C75.8396 68.6022 75.0024 68.1595 74.3244 68.8466ZM27.0896 72.6382C27.0868 75.7168 27.1112 76.1035 27.2448 75.1152C27.3488 74.3483 27.3496 73.0897 27.248 71.4671L27.0928 68.9901L27.0896 72.6382ZM112.515 69.7298C112.666 69.819 112.862 70.0176 112.95 70.1708C113.038 70.3241 113.112 70.3634 113.115 70.2584C113.122 70.0111 112.672 69.5559 112.428 69.5624C112.325 69.5653 112.364 69.6406 112.515 69.7298ZM26.7868 73.2867C26.7868 75.0257 26.8104 75.737 26.8392 74.8676C26.868 73.9981 26.868 72.5753 26.8392 71.7059C26.8104 70.8364 26.7868 71.5478 26.7868 73.2867ZM26.3004 73.2867C26.3004 74.3122 26.3264 74.7318 26.3584 74.219C26.39 73.7063 26.39 72.8672 26.3584 72.3544C26.3264 71.8417 26.3004 72.2612 26.3004 73.2867ZM32.7228 72.1473C32.5264 72.4687 32.696 73.5883 32.9508 73.6519C33.6504 73.8266 33.9984 73.5417 34.0488 72.7533L34.0976 71.9896H33.4584C33.1064 71.9896 32.7756 72.0606 32.7228 72.1473ZM113.482 72.7683C113.512 73.1753 114.08 73.1959 114.08 72.7902C114.08 72.5875 113.97 72.476 113.77 72.476C113.57 72.476 113.468 72.5798 113.482 72.7683ZM128.421 72.8408C128.282 73.3641 128.318 74.7703 128.48 75.1513C128.571 75.3649 128.621 74.9644 128.629 73.9758C128.64 72.4485 128.593 72.1903 128.421 72.8408ZM127.888 73.9353C127.888 74.4257 127.918 74.6264 127.955 74.3811C127.991 74.1359 127.991 73.7346 127.955 73.4894C127.918 73.2442 127.888 73.4448 127.888 73.9353ZM31.712 73.6434C31.4412 73.9178 31.4736 74.2068 31.7884 74.3293C32.1352 74.4642 32.522 74.0723 32.3888 73.7208C32.268 73.4018 31.9828 73.369 31.712 73.6434ZM32.2136 73.7326C32.2536 73.7995 32.1896 73.9446 32.0716 74.0553C31.8368 74.2754 31.59 74.052 31.76 73.7731C31.8768 73.5818 32.1112 73.5607 32.2136 73.7326ZM30.432 74.9405C30.1944 75.1813 30.1808 75.5566 30.4096 75.5566C30.5028 75.5566 30.5276 75.4723 30.4648 75.3694C30.3976 75.2595 30.4204 75.2259 30.5204 75.2887C30.6136 75.3471 30.6532 75.5368 30.6084 75.7107C30.5416 75.9693 30.6028 76.0204 30.9464 75.9936C31.1772 75.9754 31.3648 75.9065 31.3632 75.84C31.3612 75.7731 31.36 75.5652 31.36 75.3771C31.36 75.1436 31.286 75.0646 31.1252 75.127C30.996 75.1772 30.8408 75.1371 30.7804 75.0382C30.714 74.9292 30.7436 74.9036 30.8552 74.9738C30.9568 75.0374 31.04 75.0123 31.04 74.9178C31.04 74.686 30.6696 74.6998 30.432 74.9405ZM40.72 75.7188C40.2424 75.842 40.2428 75.8428 40.84 75.8619C41.17 75.8724 41.44 75.808 41.44 75.7188C41.44 75.54 41.4128 75.54 40.72 75.7188ZM38.9772 77.1103C38.6448 77.9883 39.0696 78.7532 39.6328 78.2907C39.7804 78.1691 39.8512 78.1545 39.79 78.2583C39.7208 78.3754 39.7796 78.4318 39.946 78.407C40.0932 78.3851 40.2312 78.2453 40.2528 78.0961C40.2764 77.9312 40.2192 77.8663 40.106 77.9308C39.9872 77.998 39.9924 77.9571 40.12 77.8181C40.4324 77.4768 40.3556 77.0633 39.96 76.9559C39.366 76.7946 39.0796 76.8396 38.9772 77.1103ZM28.2724 77.5064C28.2236 77.6957 28.0344 77.8902 27.852 77.9384C27.6692 77.9871 27.52 78.1318 27.52 78.2603C27.52 78.3892 27.592 78.4492 27.68 78.3941C27.768 78.3389 27.84 78.3584 27.84 78.4374C27.84 78.8067 28.8004 78.4297 28.824 78.0515C28.8372 77.8387 28.8552 77.574 28.864 77.4638C28.8928 77.1055 28.3664 77.1432 28.2724 77.5064ZM117.52 77.3402C117.466 77.4293 117.569 77.5023 117.75 77.5023C117.976 77.5023 118.08 77.6073 118.08 77.8363C118.08 78.0199 118.152 78.1249 118.24 78.0698C118.467 77.9275 118.438 77.7269 118.148 77.433C117.858 77.1391 117.66 77.1099 117.52 77.3402ZM27.7536 77.5132C27.6956 77.6081 27.6864 77.7248 27.7332 77.7727C27.848 77.8886 28.16 77.6839 28.16 77.4926C28.16 77.2854 27.8836 77.2992 27.7536 77.5132ZM37.9476 79.8399C37.732 80.137 37.8328 80.5031 38.124 80.4791C38.5068 80.4479 38.4688 80.5655 38.04 80.7402C37.6924 80.8817 37.6916 80.8869 38.0152 80.8971C38.1996 80.9027 38.4596 80.7795 38.5928 80.6235C38.868 80.3012 39.086 79.5623 38.8652 79.7005C38.7852 79.7503 38.72 79.8922 38.72 80.0154C38.72 80.1387 38.658 80.2781 38.5824 80.3255C38.5068 80.3729 38.4632 80.2436 38.4856 80.0381C38.528 79.6454 38.1812 79.5177 37.9476 79.8399ZM38.3288 80.2445C38.1596 80.5217 37.9428 80.4504 38.002 80.137C38.0312 79.981 38.0612 79.8205 38.0676 79.7803C38.0744 79.7402 38.16 79.7884 38.258 79.8878C38.356 79.9871 38.3876 80.1476 38.3288 80.2445ZM127.418 80.4139C127.446 81.3296 128.64 81.7167 128.64 80.8099C128.64 80.5663 128.593 80.4147 128.535 80.4735C128.477 80.5322 128.333 80.499 128.215 80.3997C128.053 80.2635 127.999 80.2736 127.998 80.4415C127.996 80.6174 127.959 80.6133 127.824 80.4208C127.688 80.2278 127.67 80.2582 127.737 80.5659C127.786 80.7864 127.762 80.8914 127.683 80.8091C127.607 80.7292 127.511 80.4451 127.471 80.1776C127.425 79.8788 127.405 79.97 127.418 80.4139ZM42.9384 81.4852C42.998 82.5561 44.16 82.7552 44.16 81.6948C44.16 81.3506 44.106 81.0649 44.04 81.0588C43.974 81.0531 43.6924 81.026 43.414 80.998C42.9332 80.9498 42.91 80.9733 42.9384 81.4852ZM134.72 81.3125C134.72 81.4726 134.562 81.5557 134.257 81.5557C133.706 81.5557 133.538 81.9964 133.7 83.0207C133.801 83.6635 133.818 83.6793 134.382 83.6315L134.96 83.5825L135.007 82.3259C135.036 81.5322 134.992 81.0693 134.887 81.0693C134.795 81.0693 134.72 81.1788 134.72 81.3125ZM119.474 81.5557C119.428 81.7337 119.455 81.9206 119.535 81.9704C119.615 82.0203 119.68 81.8747 119.68 81.6465C119.68 81.1496 119.589 81.1095 119.474 81.5557ZM19.9884 81.9923C19.6512 82.8905 19.8636 83.5614 20.5052 83.6246C21.1276 83.6862 21.4296 82.9461 21.1848 81.9582C21.0372 81.3624 20.216 81.3855 19.9884 81.9923ZM37.0556 81.6923C36.9324 81.8942 37.2308 82.2542 37.422 82.1346C37.52 82.073 37.6 81.9623 37.6 81.8877C37.6 81.7029 37.1484 81.5403 37.0556 81.6923ZM119.181 82.1366C119.171 82.2185 119.171 82.3401 119.181 82.407C119.192 82.4738 119.128 82.5286 119.04 82.5286C118.952 82.5286 118.88 82.4678 118.88 82.3936C118.88 82.319 118.785 82.2582 118.669 82.2582C118.328 82.2582 118.415 83.3222 118.766 83.4349C119.193 83.5723 119.521 83.2132 119.463 82.6729C119.413 82.2128 119.218 81.8427 119.181 82.1366ZM35.8068 83.0397C35.9756 83.2586 35.9756 83.323 35.8068 83.392C35.684 83.4418 35.6732 83.4811 35.7804 83.4884C36.0136 83.505 36.3972 83.0393 36.2628 82.9031C36.2064 82.8456 36.16 82.893 36.16 83.0077C36.16 83.1731 36.1016 83.1706 35.88 82.9943C35.63 82.7953 35.622 82.8001 35.8068 83.0397ZM119.36 83.0053C119.36 83.1966 119.048 83.4013 118.933 83.2853C118.819 83.169 119.021 82.8528 119.21 82.8528C119.292 82.8528 119.36 82.9213 119.36 83.0053ZM32.7468 83.7718C32.5744 83.9461 32.6236 84.096 32.8532 84.096C32.9708 84.096 33.0668 83.9987 33.0668 83.8796C33.0668 83.6469 32.9188 83.5971 32.7468 83.7718ZM33.56 83.8386C33.406 83.9294 33.28 84.0823 33.28 84.1779C33.28 84.2991 33.3448 84.2971 33.4932 84.1722C33.654 84.0373 33.7068 84.0498 33.7068 84.2245C33.7068 84.3518 33.6288 84.4422 33.5332 84.4248C33.438 84.4073 33.374 84.4722 33.3912 84.5687C33.4084 84.6655 33.3192 84.7446 33.1936 84.7446C33.0212 84.7446 33.0088 84.6911 33.142 84.5281C33.268 84.3745 33.2688 84.3121 33.1452 84.3121C33.0496 84.3121 32.8952 84.4564 32.802 84.6327C32.646 84.9282 32.6788 84.9493 33.224 84.9039C33.7796 84.8577 33.8184 84.8184 33.8636 84.259C33.8904 83.9315 33.896 83.6656 33.876 83.6684C33.8564 83.6712 33.714 83.7478 33.56 83.8386ZM44.36 83.9059C44.07 84.2395 44.1144 84.3899 44.426 84.1293C44.6336 83.9558 44.7068 83.9513 44.7592 84.1094C44.8732 84.4519 45.44 84.3506 45.44 83.9878C45.44 83.5962 44.6792 83.5383 44.36 83.9059ZM44.2468 84.625C44.1964 84.7081 44.228 84.822 44.3172 84.8779C44.4068 84.9339 44.48 84.8942 44.48 84.7892C44.48 84.6785 44.614 84.6339 44.8 84.6834C44.976 84.73 45.12 84.702 45.12 84.6214C45.12 84.4276 44.3652 84.4308 44.2468 84.625ZM133.613 86.0226C133.605 86.1203 133.362 86.1645 133.04 86.1264C132.605 86.0749 132.48 86.1183 132.48 86.321C132.48 86.4981 132.621 86.5812 132.92 86.5796C133.481 86.5763 133.824 86.3579 133.712 86.0737C133.664 85.9521 133.62 85.929 133.613 86.0226ZM21.32 86.2091C21.21 86.2508 21.12 86.3972 21.12 86.5342C21.12 86.7077 21.1808 86.7368 21.32 86.6302C21.43 86.5459 21.718 86.4961 21.96 86.5196C22.234 86.5463 22.4 86.4839 22.4 86.3538C22.4 86.1487 21.7212 86.0579 21.32 86.2091ZM126.162 86.4166C126.108 86.5042 126.081 86.888 126.1 87.2695L126.136 87.9634L126.749 87.9042C127.498 87.8317 127.554 87.749 127.423 86.916C127.319 86.2549 126.466 85.9177 126.162 86.4166ZM29.1668 88.8361C29.012 89.087 29.054 89.207 29.422 89.5641C29.868 89.997 30.082 89.9808 30.0776 89.5139C30.0756 89.2893 30.0564 89.2877 29.9232 89.5005C29.7908 89.7129 29.7352 89.7068 29.4856 89.4543C29.2376 89.2026 29.2312 89.145 29.4388 89.0149C29.6004 88.9136 29.6248 88.8122 29.5148 88.7007C29.4044 88.5889 29.2924 88.6326 29.1668 88.8361ZM21.584 88.8037C20.7308 88.9375 21.0696 90.1158 21.96 90.1109C22.3724 90.1085 22.4 90.0643 22.4 89.3992C22.4 88.9269 22.3332 88.6979 22.2 88.7141C22.09 88.7275 21.8128 88.7676 21.584 88.8037ZM125.28 89.0125C125.28 89.113 125.197 89.1434 125.095 89.0797C124.981 89.008 124.954 89.0352 125.025 89.1511C125.088 89.254 125.063 89.3383 124.97 89.3383C124.333 89.3383 125.066 90.387 125.712 90.3999C126.275 90.4113 126.207 88.9626 125.64 88.8811C125.442 88.8528 125.28 88.9119 125.28 89.0125ZM132.879 89.3392C132.47 89.7972 132.644 89.8398 133.074 89.387C133.269 89.1819 133.37 89.0141 133.299 89.0141C133.228 89.0141 133.039 89.1604 132.879 89.3392ZM133.212 89.5933C132.932 89.8767 132.881 90.149 133.108 90.149C133.19 90.149 133.37 90.0343 133.508 89.8941C133.788 89.6107 133.839 89.3383 133.612 89.3383C133.53 89.3383 133.35 89.4531 133.212 89.5933ZM131.154 91.3967C131.02 91.6277 131.23 92.5807 131.418 92.5925C131.518 92.5985 131.788 92.6289 132.018 92.6597C132.412 92.7132 132.434 92.6788 132.418 92.0408C132.4 91.3845 131.444 90.8973 131.154 91.3967ZM48.422 91.8523C48.3204 92.1206 48.6692 92.4429 48.894 92.288C48.9968 92.2175 48.9548 92.0748 48.7812 91.9046C48.5608 91.6881 48.488 91.6776 48.422 91.8523ZM124.231 92.8904C124.28 92.971 124.165 92.9962 123.975 92.9459C123.684 92.8685 123.644 92.909 123.72 93.2041C123.77 93.3967 123.745 93.5134 123.665 93.4635C123.482 93.3484 123.48 93.8867 123.662 94.1794C123.763 94.3399 123.831 94.3488 123.914 94.2122C123.977 94.1093 124.184 94.0464 124.374 94.0732C124.676 94.1153 124.726 94.0331 124.769 93.4323C124.813 92.8231 124.779 92.7432 124.48 92.7432C124.294 92.7432 124.182 92.8093 124.231 92.8904ZM30.56 93.0477C30.56 93.2552 31.0304 93.6176 31.1468 93.5C31.2628 93.3821 30.9052 92.9054 30.7004 92.9054C30.6232 92.9054 30.56 92.9694 30.56 93.0477ZM22.4896 94.0229C22.5472 94.9925 22.6056 95.0869 23.24 95.2385C23.6764 95.3427 23.68 95.3366 23.68 94.5122V93.6804L23.1276 93.7461C22.672 93.8 22.5628 93.753 22.5064 93.4802C22.4684 93.2978 22.4612 93.5422 22.4896 94.0229ZM131.218 94.1526C131.18 95.1023 131.294 95.1964 131.81 94.6407C132.466 93.9333 132.464 93.2098 131.808 93.2544C131.253 93.2925 131.252 93.2937 131.218 94.1526ZM132.125 93.5803C132.056 93.789 131.52 93.9208 131.52 93.7286C131.52 93.5389 131.712 93.3918 131.96 93.3918C132.085 93.3918 132.159 93.4765 132.125 93.5803ZM114.45 94.9321C114.45 95.4672 114.48 95.6666 114.516 95.3751C114.552 95.0837 114.551 94.6459 114.514 94.4023C114.478 94.1587 114.449 94.397 114.45 94.9321ZM31.36 96.0371C31.36 96.7468 31.378 96.7756 31.8 96.7343C32.042 96.7108 32.3248 96.7561 32.4288 96.8356C32.5676 96.9418 32.6052 96.8048 32.5708 96.3159C32.5156 95.5292 32.5172 95.5316 31.8684 95.3999L31.36 95.2969V96.0371ZM122.72 95.5807C122.72 95.7144 122.607 95.8239 122.468 95.8239C122.202 95.8239 122.189 96.6191 122.452 96.8141C123.104 97.2965 123.784 96.4311 123.449 95.5458C123.338 95.2535 122.72 95.2835 122.72 95.5807ZM130.204 96.9211C129.98 97.1947 129.897 97.6074 130.066 97.6074C130.196 97.6074 130.88 96.9065 130.88 96.7728C130.88 96.5924 130.385 96.701 130.204 96.9211ZM50.7384 98.3216C51.0096 99.2794 51.8872 99.3998 51.8096 98.4687C51.7628 97.9021 51.7296 97.8696 51.1816 97.8563C50.6148 97.8425 50.6056 97.8522 50.7384 98.3216ZM32.842 98.2061C32.9972 98.247 33.0832 98.3471 33.0336 98.4286C32.984 98.5101 33.0676 98.5283 33.2196 98.4691C33.4336 98.386 33.4716 98.4245 33.3896 98.6414C33.3312 98.7954 33.3492 98.8801 33.4296 98.8299C33.51 98.7796 33.6088 98.8668 33.6492 99.024C33.7092 99.2567 33.7264 99.247 33.7416 98.9701C33.764 98.5559 33.286 98.0869 32.8676 98.1124C32.596 98.1291 32.5928 98.14 32.842 98.2061ZM51.1464 98.2154C51.0516 98.3739 51.456 98.7529 51.5828 98.6244C51.6364 98.5705 51.68 98.5705 51.68 98.6248C51.68 98.8692 51.3624 98.8838 51.1316 98.6495C50.908 98.4233 50.9124 98.0938 51.1388 98.0938C51.1828 98.0938 51.186 98.1485 51.1464 98.2154ZM121.372 98.3487C121.233 98.4886 121.12 98.671 121.12 98.7541C121.12 98.9843 121.389 98.9333 121.668 98.6495C121.807 98.5097 121.92 98.3273 121.92 98.2442C121.92 98.0139 121.651 98.065 121.372 98.3487ZM25.148 99.1031C24.9212 99.3329 24.898 99.8773 25.1148 99.8773C25.2004 99.8773 25.2236 99.9993 25.1672 100.148C25.0892 100.354 25.1292 100.395 25.3324 100.316C25.4796 100.259 25.6 100.282 25.6 100.369C25.6 100.856 26.2104 100.48 26.2708 99.9563C26.3636 99.1497 25.6428 98.6017 25.148 99.1031ZM128.64 99.7829C128.64 100.565 128.701 100.617 129.329 100.375C130.149 100.06 130.071 99.2356 129.21 99.1181L128.64 99.0403V99.7829ZM33.92 101.202C33.92 101.579 33.9984 101.831 34.12 101.844C34.23 101.855 34.4844 101.882 34.6852 101.903C35.11 101.948 35.2112 102.028 35.2592 102.359C35.308 102.697 35.6892 103.133 35.8484 103.034C35.9208 102.988 36.0544 103.08 36.1452 103.238C36.3564 103.606 36.368 103.269 36.1628 102.722C36.0764 102.492 35.8244 102.234 35.6028 102.148C35.2408 102.009 35.1248 101.819 35.1812 101.458C35.1916 101.391 35.11 101.335 35 101.334C34.8588 101.332 34.8664 101.289 35.026 101.187C35.216 101.065 35.2072 100.996 34.9716 100.757C34.7356 100.519 34.668 100.51 34.548 100.702C34.4692 100.828 34.4036 100.852 34.4024 100.756C34.4012 100.659 34.292 100.58 34.16 100.58C33.9884 100.58 33.92 100.757 33.92 101.202ZM112.015 101.737C112.032 102.403 112.108 102.909 112.183 102.862C112.258 102.815 112.32 102.886 112.32 103.02C112.32 103.154 112.248 103.308 112.16 103.363C111.898 103.527 111.965 104.417 112.24 104.417C112.372 104.417 112.48 104.352 112.48 104.273C112.48 104.194 112.606 104.139 112.76 104.151C112.936 104.165 113.032 104.068 113.018 103.89C113.006 103.734 113.06 103.606 113.138 103.606C113.216 103.606 113.28 103.055 113.28 102.381C113.28 101.526 113.226 101.189 113.103 101.266C112.982 101.341 112.962 101.262 113.039 101.017C113.138 100.7 113.108 100.67 112.796 100.77C112.554 100.848 112.475 100.827 112.55 100.705C112.616 100.596 112.527 100.526 112.321 100.526C112.004 100.526 111.985 100.602 112.015 101.737ZM26.4688 101.565C26.2148 101.848 26.2152 102.735 26.4696 102.949C27.1616 103.531 28.0444 102.494 27.5408 101.69C27.3692 101.415 26.676 101.335 26.4688 101.565ZM127.342 101.661C127.332 101.75 127.324 101.969 127.324 102.147C127.324 103.012 127.356 103.071 127.83 103.084C128.547 103.105 128.891 102.316 128.432 101.701C128.252 101.461 127.368 101.428 127.342 101.661ZM119.238 102.153C119.038 102.234 118.804 102.49 118.718 102.721C118.512 103.269 118.523 103.606 118.735 103.238C118.826 103.08 118.959 102.988 119.032 103.034C119.204 103.142 119.572 102.687 119.632 102.294C119.657 102.124 119.66 101.99 119.639 101.995C119.618 102.001 119.437 102.072 119.238 102.153ZM112.4 102.472C112.314 102.613 112.638 102.711 113 102.653C113.177 102.625 113.146 102.923 112.96 103.039C112.872 103.094 112.8 103.05 112.8 102.94C112.8 102.831 112.753 102.79 112.695 102.848C112.55 102.995 112.142 102.632 112.251 102.453C112.3 102.374 112.375 102.309 112.419 102.309C112.463 102.309 112.454 102.382 112.4 102.472ZM0 104.019V104.919L0.76 104.884C1.824 104.836 1.92 104.777 1.92 104.168C1.92 103.428 1.5644 103.12 0.7084 103.12H0V104.019ZM126.469 104.435C126.419 104.517 126.317 104.546 126.243 104.5C126.169 104.454 126.128 104.544 126.152 104.7C126.176 104.857 126.137 105.146 126.064 105.343C125.934 105.698 125.936 105.699 126.43 105.419C127.067 105.058 127.307 104.483 126.869 104.367C126.699 104.322 126.519 104.353 126.469 104.435ZM27.69 104.676C27.6844 104.863 27.806 105.126 27.96 105.261C28.278 105.54 29.0072 105.761 28.8708 105.537C28.8216 105.456 28.6816 105.39 28.56 105.39C28.4384 105.39 28.2996 105.325 28.2512 105.246C28.2028 105.167 28.2868 105.112 28.438 105.124C28.612 105.139 28.7136 105.028 28.716 104.823C28.7188 104.604 28.616 104.499 28.4 104.502C28.1964 104.505 28.088 104.608 28.1024 104.786C28.1332 105.174 28.0172 105.135 27.8448 104.701C27.7052 104.349 27.7 104.348 27.69 104.676ZM126.726 104.978C126.613 105.115 126.44 105.226 126.34 105.223C126.241 105.22 126.286 105.144 126.44 105.053C126.594 104.962 126.72 104.809 126.72 104.713C126.72 104.608 126.61 104.628 126.44 104.762C126.185 104.965 126.18 104.959 126.385 104.694C126.535 104.5 126.664 104.457 126.77 104.566C126.877 104.674 126.862 104.811 126.726 104.978ZM28.5868 104.854C28.5868 105.1 28.2904 105.057 28.2056 104.799C28.1756 104.708 28.2492 104.633 28.3688 104.633C28.4888 104.633 28.5868 104.733 28.5868 104.854ZM51.3976 104.748C50.942 104.933 50.6848 105.564 50.64 106.606C50.6212 107.052 50.6324 107.34 50.6652 107.247C50.698 107.154 50.98 107.107 51.2916 107.144L51.858 107.211L51.8216 106.191L51.7856 105.17L51.3504 105.698L50.9152 106.227L51.0224 105.687C51.0888 105.352 51.2644 105.086 51.4848 104.987C51.68 104.899 51.84 104.771 51.84 104.703C51.84 104.559 51.8648 104.557 51.3976 104.748ZM37.76 106.379C37.76 107.266 38.8924 107.419 39.0132 106.548C39.0464 106.307 39.0024 106.205 38.8948 106.272C38.786 106.341 38.762 106.278 38.8296 106.1C38.9116 105.883 38.8736 105.844 38.6596 105.927C38.496 105.991 38.4232 105.97 38.4804 105.876C38.536 105.784 38.4024 105.731 38.1688 105.751C37.8108 105.781 37.76 105.859 37.76 106.379ZM116.2 105.917C116.222 106.028 116.15 106.101 116.04 106.079C115.786 106.028 115.782 106.24 116.032 106.493C116.181 106.644 116.177 106.687 116.012 106.687C115.842 106.687 115.84 106.735 116 106.93C116.446 107.475 117.12 107.237 117.12 106.535C117.12 106.183 117.048 105.85 116.96 105.795C116.872 105.74 116.8 105.787 116.8 105.899C116.8 106.058 116.757 106.06 116.608 105.909C116.358 105.656 116.149 105.66 116.2 105.917ZM111.061 107.372C110.853 107.628 110.726 107.883 110.78 107.937C110.893 108.051 111.484 107.545 111.686 107.162C111.921 106.717 111.47 106.868 111.061 107.372ZM124.552 108.133C124.468 108.214 124.221 108.306 124.002 108.335C123.676 108.38 123.586 108.505 123.502 109.032C123.446 109.384 123.319 109.7 123.22 109.734C123.121 109.767 123.04 109.859 123.04 109.938C123.04 110.017 123.148 110.04 123.28 109.989C123.412 109.937 123.52 109.794 123.52 109.669C123.52 109.545 123.653 109.443 123.815 109.443C124.196 109.443 124.577 108.996 124.677 108.43C124.765 107.93 124.763 107.926 124.552 108.133ZM30.08 108.403C30.08 108.529 30.1396 108.633 30.2128 108.633C30.2856 108.633 30.3396 108.797 30.3328 108.998C30.3236 109.259 30.4112 109.362 30.64 109.362C30.9944 109.362 31.2648 109.567 31.3928 109.933C31.4392 110.065 31.4688 109.796 31.4584 109.335C31.4368 108.348 31.3856 108.278 30.6448 108.218C30.2432 108.186 30.08 108.24 30.08 108.403ZM50.252 108.537C50.1236 108.694 50.1176 108.799 50.2324 108.871C50.3244 108.929 50.4056 108.954 50.4124 108.926C50.5676 108.29 50.5296 108.198 50.252 108.537ZM124.392 108.62C124.442 108.702 124.364 108.889 124.22 109.035C123.878 109.382 123.527 109.096 123.834 108.721C124.067 108.437 124.259 108.402 124.392 108.62ZM49.446 109.355C49.3412 109.483 49.2872 109.756 49.326 109.961C49.3872 110.286 49.3992 110.276 49.4184 109.88C49.43 109.629 49.5072 109.466 49.5888 109.518C49.6708 109.569 49.78 109.542 49.8316 109.457C49.9896 109.198 49.6484 109.108 49.446 109.355ZM122.954 110.427C122.896 110.522 122.886 110.639 122.933 110.687C123.048 110.803 123.36 110.598 123.36 110.407C123.36 110.199 123.084 110.213 122.954 110.427ZM42.7888 111.262C42.6552 111.689 42.8628 112.199 43.1708 112.202C43.3188 112.203 43.5908 112.245 43.7752 112.295C44.0612 112.373 44.1128 112.312 44.1248 111.885C44.1324 111.609 44.0724 111.425 43.9912 111.476C43.9092 111.527 43.8908 111.444 43.9496 111.288C44.0316 111.071 43.9936 111.033 43.7796 111.116C43.616 111.18 43.5432 111.158 43.6004 111.064C43.656 110.973 43.5224 110.92 43.2884 110.939C43.0576 110.959 42.84 111.099 42.7888 111.262ZM93.184 111.684C93.2036 112.19 93.4776 112.3 93.8284 111.945C94.1792 111.589 94.07 111.312 93.5712 111.292C93.2396 111.279 93.1712 111.348 93.184 111.684ZM48.4472 112.646C48.172 112.968 47.954 113.707 48.1748 113.569C48.2548 113.519 48.32 113.368 48.32 113.235C48.32 113.101 48.3912 113.036 48.478 113.09C48.5724 113.149 48.5936 113.076 48.5304 112.91C48.4484 112.693 48.4864 112.654 48.7004 112.737C48.8524 112.796 48.936 112.778 48.8864 112.697C48.8368 112.615 48.9228 112.515 49.078 112.474C49.3076 112.413 49.298 112.396 49.0248 112.381C48.8404 112.37 48.5804 112.49 48.4472 112.646ZM118.307 113.554C118.041 114.257 118.298 114.713 118.96 114.713H119.6V114.064C119.6 113.359 118.539 112.941 118.307 113.554ZM35.4084 113.601C35.1204 113.72 35.4728 114.396 35.9328 114.608C36.3852 114.817 36.6336 114.51 36.5164 113.887C36.444 113.504 35.9524 113.377 35.4084 113.601ZM90.1344 114.722C89.9056 115.327 90.3008 116.011 90.872 115.998C91.4524 115.986 91.6344 115.616 91.4432 114.834C91.3336 114.386 90.2952 114.297 90.1344 114.722ZM117.56 114.759C117.179 114.808 117.12 114.888 117.12 115.355C117.12 115.924 116.918 116.091 116.227 116.091C115.885 116.091 115.84 116.163 115.84 116.716C115.84 117.583 117.02 117.684 117.065 116.821C117.079 116.553 117.097 116.249 117.105 116.145C117.113 116.04 117.329 115.908 117.585 115.851C118.455 115.658 118.432 114.646 117.56 114.759ZM36.48 115.188C36.48 115.691 36.8744 116.091 37.3716 116.091C37.718 116.091 37.76 116.021 37.76 115.443V114.794H37.12C36.5492 114.794 36.48 114.837 36.48 115.188ZM46.56 115.524C46.56 116.281 46.7488 116.419 47.4268 116.155C48.0072 115.929 47.7512 114.794 47.12 114.794C46.5628 114.794 46.56 114.798 46.56 115.524ZM106.595 115.054C106.306 115.181 106 115.471 105.915 115.699C105.716 116.231 105.719 116.36 105.927 116.149C106.037 116.037 106.398 116.029 106.994 116.124C108.169 116.31 108.32 116.236 108.32 115.474C108.32 114.751 107.652 114.589 106.595 115.054ZM37.28 115.28C37.6292 115.634 37.6976 115.929 37.4304 115.929C37.3372 115.929 37.3084 115.851 37.3668 115.756C37.43 115.652 37.3536 115.603 37.176 115.634C36.9636 115.671 36.8944 115.601 36.9308 115.386C36.9612 115.206 36.9132 115.128 36.8108 115.192C36.7168 115.252 36.64 115.222 36.64 115.128C36.64 114.857 36.9308 114.927 37.28 115.28ZM106.639 115.605C106.479 115.785 106.306 115.888 106.254 115.836C106.203 115.783 106.3 115.637 106.471 115.51C106.909 115.186 106.979 115.225 106.639 115.605ZM38.026 116.563C38.1448 117.068 38.0764 116.998 38.5744 117.119C38.9564 117.211 38.99 117.176 39.0092 116.66C39.0292 116.123 39.008 116.102 38.4784 116.122C37.9696 116.142 37.9344 116.176 38.026 116.563ZM104.637 116.5C104.526 116.636 104.479 116.793 104.533 116.848C104.65 116.965 105.12 116.603 105.12 116.395C105.12 116.172 104.859 116.229 104.637 116.5ZM90.06 117.631C90.0492 117.676 90.0312 117.877 90.02 118.077C90.0056 118.337 89.9004 118.442 89.6532 118.442C89.4628 118.442 89.2636 118.485 89.2112 118.539C89.1588 118.592 89.2932 118.626 89.5104 118.614C90.006 118.587 90.1432 118.449 90.1696 117.948C90.188 117.602 90.1176 117.398 90.06 117.631ZM42.48 120.307C42.6392 120.485 42.7944 120.631 42.8248 120.631C42.8552 120.631 42.88 120.485 42.88 120.307C42.88 120.082 42.7732 119.982 42.5352 119.982C42.2004 119.982 42.1988 119.992 42.48 120.307ZM112 120.332C112 120.671 112.01 120.673 112.32 120.388C112.496 120.226 112.64 120.069 112.64 120.038C112.64 120.008 112.496 119.982 112.32 119.982C112.099 119.982 112 120.091 112 120.332ZM110.376 121.227C109.918 121.304 109.686 121.789 109.97 122.076C110.095 122.203 110.087 122.252 109.942 122.252C109.421 122.252 109.985 122.526 110.553 122.549C111.07 122.569 111.2 122.518 111.202 122.292C111.204 122.052 111.228 122.046 111.356 122.251C111.478 122.448 111.545 122.454 111.712 122.285C111.879 122.115 111.873 122.048 111.679 121.924C111.476 121.794 111.482 121.77 111.72 121.768C112.036 121.765 112.11 121.345 111.8 121.313C111.69 121.302 111.42 121.262 111.2 121.224C110.98 121.187 110.609 121.188 110.376 121.227ZM87.7868 121.388C87.7384 121.436 87.8336 121.622 87.998 121.801C88.162 121.979 88.258 122.227 88.2112 122.351C88.096 122.655 88.3976 122.637 88.7084 122.322C89.0196 122.007 89.0372 121.701 88.7376 121.818C88.6152 121.865 88.3708 121.768 88.1944 121.602C88.0184 121.435 87.8348 121.339 87.7868 121.388ZM95.6668 121.44C95.1808 121.727 95.4676 122.53 96.0988 122.65C96.8268 122.789 96.96 122.675 96.96 121.918C96.96 121.243 96.3676 121.024 95.6668 121.44ZM44.1888 122.131C44.2416 122.506 44.96 122.774 44.96 122.418C44.96 122.319 44.834 122.26 44.68 122.286C44.4892 122.318 44.4148 122.243 44.4472 122.05C44.4728 121.894 44.414 121.766 44.316 121.766C44.218 121.766 44.1608 121.93 44.1888 122.131ZM89.3848 123.035C89.2392 123.198 89.1256 123.472 89.1328 123.643C89.142 123.873 89.1684 123.891 89.2336 123.712C89.3832 123.299 89.7968 122.9 90.0648 122.911C90.2292 122.918 90.1908 122.974 89.9564 123.069C89.5824 123.221 89.3244 123.648 89.4992 123.825C89.5536 123.881 89.7592 123.787 89.9564 123.616C90.2464 123.365 90.2732 123.36 90.0976 123.59C89.9112 123.834 89.9172 123.874 90.1404 123.874C90.3304 123.874 90.4 123.722 90.4 123.306C90.4 122.646 89.8608 122.502 89.3848 123.035ZM108.612 123.082C108.399 123.305 108.388 123.379 108.561 123.446C108.826 123.549 109.144 123.196 108.991 122.968C108.921 122.864 108.78 122.906 108.612 123.082ZM45.6048 123.011C45.5984 123.258 46.0476 123.713 46.2916 123.707C46.3952 123.704 46.3564 123.628 46.2052 123.539C46.054 123.45 45.858 123.251 45.77 123.098C45.682 122.945 45.6076 122.906 45.6048 123.011ZM86.4 124.42C86.4 125.136 87.1436 125.531 87.9208 125.229C88.3908 125.046 88.1748 123.917 87.6496 123.811C86.5276 123.583 86.4 123.645 86.4 124.42ZM48.0608 124.499C48.1116 125.413 49.2424 125.461 49.2168 124.548C49.2008 123.979 49.1756 123.954 48.6144 123.938C48.0412 123.921 48.0296 123.933 48.0608 124.499ZM48.9564 124.362C48.848 124.43 48.7988 124.551 48.8476 124.632C48.8964 124.712 48.8132 124.777 48.6624 124.777C48.512 124.777 48.3884 124.655 48.3884 124.506C48.3884 124.352 48.4772 124.269 48.5944 124.315C48.7076 124.359 48.8 124.31 48.8 124.206C48.8 124.102 48.8796 124.067 48.9772 124.127C49.1032 124.206 49.0972 124.274 48.9564 124.362ZM49.5964 125.144C49.3608 125.225 49.4088 125.915 49.6652 126.131C49.7892 126.235 50.368 126.356 50.952 126.398L52.0136 126.476L51.976 125.835L51.9388 125.195L50.846 125.142C50.2448 125.113 49.6824 125.114 49.5964 125.144ZM103.154 125.141C103.003 125.17 102.872 125.298 102.862 125.426C102.789 126.38 102.792 126.386 103.356 126.414C103.657 126.43 103.979 126.345 104.072 126.225C104.164 126.106 104.376 125.984 104.543 125.955C104.887 125.893 105.246 125.407 105.075 125.234C105.013 125.17 104.801 125.258 104.604 125.429C104.362 125.638 104.311 125.652 104.448 125.472C104.656 125.198 103.88 124.999 103.154 125.141ZM105.298 125.348C105.274 125.683 104.77 126.144 104.428 126.144C104.28 126.144 104.16 126.206 104.16 126.283C104.16 126.516 104.923 126.292 105.204 125.977C105.35 125.814 105.434 125.548 105.392 125.386C105.335 125.158 105.313 125.15 105.298 125.348ZM101.287 126.719C101.456 126.927 101.447 127.016 101.234 127.232C101.021 127.448 100.933 127.457 100.728 127.285C100.416 127.023 100.401 127.221 100.708 127.534C100.983 127.812 101.347 127.844 101.183 127.575C101.106 127.449 101.154 127.419 101.326 127.486C101.516 127.56 101.558 127.517 101.485 127.325C101.419 127.15 101.448 127.102 101.573 127.18C101.838 127.346 101.806 126.978 101.532 126.699C101.224 126.388 101.028 126.403 101.287 126.719ZM98.8944 128.303C99.0816 128.964 99.0964 128.968 99.66 128.487C100.337 127.91 100.289 127.743 99.4596 127.787C98.764 127.823 98.76 127.827 98.8944 128.303ZM98.56 128.495C98.7236 128.694 98.7112 128.738 98.49 128.738C98.342 128.738 98.2656 128.811 98.32 128.9C98.4868 129.174 98.8552 129.08 98.798 128.778C98.7688 128.622 98.7388 128.44 98.7324 128.373C98.7256 128.306 98.6392 128.251 98.5404 128.251C98.4164 128.251 98.4224 128.326 98.56 128.495ZM64.76 130.326C64.166 130.352 63.68 130.431 63.68 130.501C63.68 130.743 64.4576 131.365 64.628 131.258C64.7236 131.199 64.8 131.267 64.8 131.413C64.8 132.054 66.1544 131.645 66.2084 130.988C66.266 130.289 66.2064 130.262 64.76 130.326ZM88.7808 130.371C88.6904 130.428 88.6396 130.722 88.668 131.025C88.752 131.917 90.1308 131.88 90.1984 130.984C90.2432 130.391 89.3592 130.009 88.7808 130.371Z\" fill=\"white\" />\r\n        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M63.6801 46.6502C63.1081 46.8841 62.2533 47.3365 61.7809 47.6559C61.3081 47.9749 60.5773 48.4374 60.1561 48.6839C58.3697 49.7292 57.4369 52.1147 57.3945 55.7466L57.3665 58.1685L57.9841 59.4024C58.9061 61.243 60.3369 63.2787 60.8873 63.5332C61.1473 63.6536 61.7825 64.0099 62.2985 64.3249L63.2369 64.898L66.1385 64.9171C69.8301 64.9414 70.6181 64.5916 73.5917 61.6099C73.9045 61.2966 74.3845 60.879 74.6589 60.682C75.1437 60.3335 75.1533 60.3039 74.9937 59.5982C74.8501 58.9626 74.8865 58.7048 75.2861 57.5264C76.3537 54.3769 75.1873 51.2092 71.7601 47.9506C70.3673 46.6263 65.6109 45.861 63.6801 46.6502ZM65.0685 52.4677C65.2401 52.9209 64.4961 53.1876 64.0001 52.8512C63.7925 52.7105 63.8017 52.6562 64.0705 52.4483C64.4777 52.1337 64.9453 52.1427 65.0685 52.4677ZM68.7897 52.3607C68.9801 52.4827 68.9837 52.5517 68.8101 52.7636C68.4565 53.1957 67.7073 52.9546 67.8917 52.4677C67.9997 52.1824 68.4317 52.1309 68.7897 52.3607ZM63.6801 53.5865C63.6801 54.0235 63.4085 54.2679 63.1801 54.0364C62.9829 53.8366 63.2997 52.9623 63.5197 53.1001C63.6081 53.1552 63.6801 53.3741 63.6801 53.5865ZM67.7825 54.235C68.0925 54.8147 68.2741 55.3554 68.2313 55.5727C68.1921 55.7733 68.1233 56.1179 68.0781 56.3384C67.7241 58.0708 64.5425 57.5897 64.2373 55.7575C64.1357 55.1483 64.1697 55.0599 64.6937 54.5735C65.0053 54.2841 65.3093 53.8492 65.3693 53.6068C65.4737 53.1852 65.5173 53.1682 66.3701 53.214L67.2621 53.2622L67.7825 54.235ZM70.0801 55.6943C70.0801 57.7782 69.9021 58.3659 69.4409 57.8033C69.1581 57.4579 69.1377 54.2006 69.4153 53.6976C69.8617 52.8885 70.0801 53.5439 70.0801 55.6943ZM63.6481 57.267C63.9029 57.5252 63.8917 57.9622 63.6245 58.1872C63.2757 58.4802 62.7989 57.854 63.0329 57.4101C63.2369 57.0238 63.3761 56.9914 63.6481 57.267ZM78.9601 57.3886C78.6081 57.5585 77.9601 58.0234 77.5201 58.4218L76.7201 59.1462L76.7357 60.5009C76.7593 62.5466 77.0741 63.0809 78.9565 64.2641C80.6677 65.3395 83.2125 63.7043 83.7069 61.2114C84.2173 58.6343 81.2797 56.2687 78.9601 57.3886ZM68.7201 58.9346C68.7201 59.2398 68.6057 59.2569 66.5081 59.2642C64.3405 59.2715 64.0521 59.2127 64.2097 58.7968C64.3593 58.4012 68.7201 58.5345 68.7201 58.9346ZM81.5269 60.1644C81.9937 60.9297 80.5921 62.3504 79.7533 61.9629C79.1561 61.6873 79.0469 60.3509 79.5833 59.8835C80.0005 59.5195 81.2433 59.6995 81.5269 60.1644ZM73.1133 64.9276C70.7881 65.7955 69.2157 68.5777 69.7377 70.8992C70.1173 72.5878 70.7081 73.8938 71.2505 74.2441C71.5309 74.4252 71.9469 74.7272 72.1749 74.9149C73.9065 76.3425 79.0413 75.2882 79.4457 73.4216C79.5017 73.1646 79.7129 72.7544 79.9157 72.5108C81.7385 70.3155 80.0405 65.9049 76.9761 64.8757C76.2477 64.6309 73.8201 64.6633 73.1133 64.9276ZM76.3201 68.4253C76.3201 68.5777 76.4541 68.8765 76.6173 69.0893C77.3837 70.0856 77.5689 70.8542 77.0421 70.8542C76.9217 70.8542 76.6817 71.0366 76.5085 71.2595C76.2317 71.6166 76.0717 71.6649 75.1689 71.6649C74.5933 71.6649 74.0613 71.7488 73.9549 71.8566C73.6645 72.1509 73.6225 71.981 73.7677 71.0974C73.9477 70.0033 73.9517 68.7849 73.7765 68.4521C73.6477 68.2065 73.7697 68.1773 74.9765 68.1635C76.1437 68.1501 76.3201 68.1846 76.3201 68.4253Z\" fill=\"url(#paint0_linear)\" />\r\n        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M70.3856 15.3601C70.2984 15.5928 70.2636 15.8798 70.3084 15.9981C70.4392 16.3435 69.2364 16.8554 67.8856 17.0289C66.8692 17.1594 66.57 17.2681 66.1676 17.654C65.0992 18.6766 64.0796 18.7273 63.5128 17.7857C63.3416 17.5007 63.2008 17.3406 63.2004 17.4298C63.1992 17.6584 61.8004 18.5283 61.618 18.414C61.5352 18.3621 61.44 18.4026 61.4064 18.5044C61.3668 18.6248 61.2508 18.5931 61.0728 18.4128C60.8156 18.1521 60.8 18.159 60.8 18.5279C60.8 19.3049 59.118 19.9932 58.4968 19.4707C58.3164 19.3187 58.2044 19.3759 57.9364 19.7573C57.5328 20.3321 56.626 20.8347 55.7116 20.9916C55.3412 21.0548 54.9488 21.2348 54.8392 21.3908C54.5744 21.769 54.0284 22.0507 53.562 22.0507C53.162 22.0507 51.9084 22.7852 51.5468 23.2311C51.4296 23.3758 50.9976 23.544 50.5868 23.6056C50.1068 23.677 49.652 23.8829 49.3144 24.1808C49.0252 24.4362 48.7168 24.6449 48.6284 24.6449C48.5404 24.6449 48.1532 24.9733 47.7684 25.3745C46.5756 26.6185 45.3 26.2947 45.3716 24.7665C45.3828 24.5213 45.3252 24.3206 45.2428 24.3206C45.1604 24.3206 45.1228 24.4102 45.1588 24.5197C45.2464 24.7864 44.932 25.1103 44.6808 25.0126C44.5704 24.9696 44.48 25.0195 44.48 25.1236C44.48 25.2274 44.5348 25.2785 44.6016 25.2363C45.24 24.8367 45.5776 26.6157 44.954 27.0928C44.3664 27.5423 43.2816 28.5192 42.406 29.3875C41.9784 29.811 41.528 30.1576 41.4044 30.1576C41.2808 30.1576 40.9804 30.3684 40.7368 30.6266C40.4928 30.8844 40.1012 31.1345 39.8668 31.1827C39.6268 31.2322 39.37 31.4348 39.28 31.6464C39.1284 32.0023 38.9748 32.0437 38.1232 31.9606C38.0016 31.9484 37.9476 31.7563 37.9816 31.4588C38.0164 31.1552 37.9756 31.0145 37.8712 31.0798C37.7696 31.1434 37.7452 31.0794 37.8076 30.914C37.9524 30.5317 37.2516 30.5524 36.9048 30.9403C36.5352 31.3546 36.7324 32.584 37.1696 32.5885C37.2408 32.5893 37.2536 32.6639 37.1984 32.7546C37.1432 32.845 37.0308 32.8771 36.9488 32.826C36.8672 32.7745 36.8 32.8057 36.8 32.8949C36.8 32.9841 36.8664 33.0984 36.9476 33.1495C37.2772 33.3558 36.9532 34.4514 36.414 34.9553C36.1192 35.2309 35.832 35.6026 35.7764 35.7805C35.7204 35.9589 35.506 36.1964 35.3 36.3079C35.0936 36.4198 34.8088 36.7578 34.6672 37.0594C34.4932 37.4287 34.264 37.6382 33.9644 37.7023C33.22 37.8616 33.0532 38.0193 32.704 38.894C32.1996 40.1583 31.6228 40.6917 30.73 40.7184C30.2836 40.7322 30.1552 40.7699 30.4 40.8161C31.4932 41.022 31.2028 42.9515 30.0328 43.2571C29.5532 43.3824 29.5168 43.4424 29.4696 44.191C29.4148 45.0629 29.1496 45.4772 28.5484 45.6304C28.1924 45.7208 28.16 45.8084 28.16 46.6794C28.16 47.568 28.1248 47.6571 27.6216 48.0459C27.1804 48.3872 27.0644 48.6069 26.9784 49.2655C26.9036 49.8354 26.7424 50.2031 26.424 50.5306C25.9324 51.0361 25.5244 52.047 25.3544 53.1812C25.2944 53.5825 25.1456 54.0255 25.024 54.1653C24.9024 54.3052 24.7348 54.7815 24.6524 55.2237C24.4608 56.246 23.9164 57.2857 23.4676 57.4851C23.0128 57.6878 22.7476 59.5398 23.0216 60.6014C23.38 61.9897 22.9964 62.9094 22.0588 62.9094C21.796 62.9094 21.6232 62.9783 21.6744 63.0626C21.9172 63.4603 21.9408 65.7991 21.7104 66.5859C21.334 67.8704 21.1876 68.0318 20.4648 67.962L19.84 67.9016V69.4184V70.9352L20.6032 70.8817C21.7824 70.7986 21.9864 71.1225 22.0536 73.1825C22.1228 75.3162 21.858 75.7791 20.6172 75.692L19.84 75.6372V77.3162V78.9951L20.482 78.9331L21.1236 78.8711L21.4524 79.762C22.1828 81.7397 22.1988 82.9841 21.5 83.4478C21.108 83.7085 21.0616 84.0506 21.4132 84.0887C21.516 84.1 21.8556 84.1183 22.168 84.1292C23.1932 84.1657 23.7756 86.3266 23.022 87.2974L22.684 87.7327L23.3276 88.3351C23.7764 88.7546 24.0068 89.1283 24.088 89.5681C24.1524 89.9155 24.3024 90.3885 24.4216 90.62C24.5408 90.851 24.6384 91.2803 24.6392 91.5738C24.6396 91.8672 24.782 92.305 24.9552 92.5466C25.2712 92.9868 25.76 94.6288 25.76 95.2494C25.76 95.433 26.0092 95.7816 26.32 96.033C26.8268 96.4427 26.88 96.5631 26.88 97.3033C26.88 98.0349 26.9392 98.174 27.4436 98.6263C27.8152 98.9599 28.088 99.4082 28.2448 99.9441C28.3756 100.391 28.694 100.978 28.952 101.249C29.3204 101.636 29.432 101.916 29.4708 102.551C29.5128 103.24 29.582 103.39 29.9396 103.563C30.5036 103.836 30.686 104.084 30.7992 104.736C30.8516 105.038 31.0632 105.443 31.2692 105.637C31.4752 105.83 31.6948 106.224 31.7572 106.512C31.8472 106.927 32.0092 107.096 32.5404 107.327C33.156 107.594 33.6 108.157 33.6 108.67C33.6 108.772 33.7496 109.016 33.9324 109.213C34.2972 109.607 34.4324 110.308 34.2412 110.818C34.1332 111.105 34.1796 111.143 34.6192 111.126C34.8948 111.115 35.2196 111.188 35.3412 111.288C35.4632 111.388 35.8592 111.616 36.2212 111.794C36.696 112.028 36.9916 112.333 37.28 112.888C37.5 113.311 37.764 113.658 37.8668 113.658C38.3272 113.659 40.4896 116.003 40.5248 116.54C40.5548 116.991 40.6396 117.092 41.0964 117.22C41.3912 117.303 41.7236 117.497 41.8356 117.652C41.9472 117.807 42.268 117.951 42.5488 117.973C43.2216 118.025 43.4828 118.267 43.6844 119.027C43.8072 119.487 43.9564 119.681 44.2456 119.754C44.4624 119.81 44.64 119.92 44.64 119.999C44.64 120.079 44.7908 120.144 44.9752 120.144C45.7328 120.144 46.5416 120.926 46.6 121.714C46.6236 122.029 46.656 122.04 46.9484 121.832C47.6736 121.318 48.5376 121.575 48.97 122.434C49.2724 123.035 49.3212 123.063 50.0692 123.063C50.756 123.063 50.9044 123.127 51.286 123.589C51.5248 123.879 51.9092 124.191 52.1404 124.283C52.8448 124.562 53.598 125.078 53.5988 125.282C53.6004 125.565 53.7952 125.651 55.2344 125.999C55.9504 126.172 56.766 126.458 57.0468 126.634C57.328 126.81 57.7084 126.954 57.8928 126.954C58.3768 126.954 60.0248 127.594 60.4 127.927C61.0516 128.507 61.8104 128.655 62.5632 128.349C63.4624 127.985 63.9916 128.123 64.7088 128.908C65.17 129.413 65.4084 129.548 65.8404 129.548C66.1416 129.548 66.7868 129.699 67.274 129.884C68.17 130.224 68.2324 130.314 68.162 131.169C68.144 131.392 68.1832 131.521 68.2496 131.454C68.316 131.388 68.4492 131.4 68.5452 131.482C68.6684 131.585 68.704 131.423 68.6656 130.936C68.558 129.56 69.6248 129.256 72.3852 129.874C74.0516 130.248 73.8768 130.139 73.9412 130.845C74.0152 131.653 74.004 131.651 77.4104 131.653C80.484 131.656 81.3048 131.533 81.0004 131.118C80.9236 131.012 80.8736 130.835 80.89 130.724C80.9064 130.612 80.9288 130.454 80.94 130.372C80.962 130.21 83.5676 129.548 84.18 129.549C85.542 129.552 86.3084 130.133 86.1952 131.077C86.1516 131.44 86.15 131.645 86.1916 131.533C86.2332 131.421 86.3332 131.371 86.4136 131.421C86.5484 131.505 86.6336 131.044 86.5724 130.563C86.5332 130.255 87.5056 129.73 88.3148 129.624C89.2744 129.498 89.7428 129.29 90.0968 128.833C90.684 128.077 92.136 127.878 92.6336 128.486C92.8628 128.766 93.6584 128.533 93.9624 128.096C94.2584 127.671 95.0596 127.306 95.9376 127.194C97.0084 127.058 97.3076 126.962 97.68 126.637C98.1376 126.238 98.8408 126.002 99.7504 125.945C100.488 125.899 100.55 125.861 100.672 125.381C100.867 124.619 101.489 124.197 102.418 124.197C103.109 124.197 103.217 124.148 103.43 123.731C103.715 123.173 103.957 123.063 104.901 123.063C105.568 123.063 105.632 123.024 105.852 122.489C106.232 121.568 107.71 121.289 108.151 122.056C108.279 122.279 108.311 122.225 108.315 121.777C108.32 121.192 110.13 119.171 110.648 119.171C110.772 119.171 110.995 118.971 111.145 118.725C111.519 118.113 111.835 117.874 112.27 117.874C112.474 117.874 112.777 117.735 112.944 117.566C113.112 117.396 113.397 117.21 113.579 117.151C113.773 117.089 113.97 116.827 114.053 116.519C114.197 115.991 115.742 114.352 116.646 113.77C116.896 113.609 117.281 113.165 117.501 112.785C117.989 111.941 118.238 111.721 118.825 111.613C119.074 111.568 119.398 111.419 119.546 111.284C119.884 110.974 120.653 111.055 120.929 111.429C121.189 111.781 121.578 111.796 121.706 111.459C121.847 111.087 121.527 110.822 121.272 111.098C121.098 111.287 121.014 111.27 120.733 110.99C120.286 110.546 120.367 109.607 120.896 109.104C121.107 108.903 121.282 108.586 121.285 108.401C121.292 107.921 121.596 107.578 122.32 107.232C122.862 106.972 122.97 106.831 123.086 106.232C123.185 105.726 123.329 105.485 123.611 105.355C123.825 105.256 124 105.071 124 104.942C124 104.469 124.495 103.679 124.961 103.411C125.393 103.162 125.44 103.055 125.44 102.321C125.44 101.612 125.499 101.464 125.904 101.16C126.212 100.93 126.435 100.557 126.565 100.061C126.695 99.5615 126.969 99.1075 127.38 98.7078C127.95 98.1553 128 98.0353 128 97.2332C128 96.3783 128.296 95.8234 128.751 95.8234C128.978 95.8234 129.6 94.048 129.6 93.4002C129.6 93.1112 129.744 92.6897 129.92 92.4627C130.096 92.2361 130.24 91.8384 130.24 91.5794C130.24 91.3204 130.384 90.8222 130.56 90.4728C130.736 90.1234 130.88 89.6155 130.88 89.3444C130.88 88.8632 131.034 88.6532 131.83 88.0554L132.219 87.7623L131.87 87.3124C131.046 86.252 131.837 83.8649 132.952 84.0433C133.737 84.1685 133.91 83.8836 133.332 83.419C132.491 82.7421 132.501 82.2816 133.414 79.7718C133.718 78.9359 133.772 78.88 134.269 78.88C134.8 78.88 134.8 78.8796 134.903 77.9072C135.127 75.7811 135.128 75.7864 134.36 75.7442C132.935 75.666 132.8 75.4536 132.8 73.2862C132.8 71.1132 133.035 70.7784 134.54 70.8039L135.08 70.8128L134.972 69.5769C134.819 67.8445 134.737 67.5575 134.462 67.789C134.34 67.8915 134.24 67.9211 134.24 67.8546C134.24 67.7881 134.143 67.8153 134.025 67.9146C133.589 68.2815 132.789 65.9122 132.963 64.7675C133.03 64.3253 133.056 63.9147 133.021 63.8555C132.986 63.7959 133.028 63.5588 133.115 63.3285C133.261 62.9394 133.24 62.9094 132.821 62.9094C131.967 62.9094 131.53 61.9706 131.839 60.8045C132.109 59.7895 131.774 58.0307 131.194 57.4154C130.802 56.9999 130.08 55.3895 130.08 54.9306C130.08 54.8297 129.956 54.6084 129.805 54.4389C129.653 54.2691 129.481 53.717 129.422 53.2099C129.285 52.0332 128.929 51.0847 128.488 50.7232C128.103 50.4074 127.84 49.6466 127.84 48.8492C127.84 48.433 127.743 48.2745 127.368 48.0779C126.732 47.7447 126.588 47.4301 126.724 46.6725C126.829 46.0921 126.801 46.0143 126.419 45.814C125.768 45.4727 125.48 45.0524 125.4 44.3272C125.31 43.506 125.186 43.2908 124.802 43.2908C124.229 43.2908 123.801 42.4922 123.876 41.564C123.928 40.9296 123.894 40.748 123.738 40.8084C123.356 40.9572 122.105 39.545 122.006 38.8535C121.89 38.0484 121.817 37.9402 121.386 37.9402C120.913 37.9402 120.334 37.5126 120.153 37.029C120.072 36.8138 119.828 36.5689 119.612 36.4854C119.395 36.4019 119.124 36.1526 119.009 35.9313C118.894 35.7104 118.551 35.3594 118.247 35.1523C117.837 34.873 117.66 34.6067 117.563 34.1284C117.492 33.7725 117.318 33.3939 117.176 33.2865C117.012 33.162 116.948 32.9423 116.998 32.6784C117.07 32.2946 117.033 32.2654 116.47 32.2654C115.998 32.2654 115.786 32.1661 115.519 31.8195C115.33 31.5743 114.946 31.2954 114.667 31.2002C114.388 31.1049 114.091 30.8726 114.007 30.6846C113.923 30.4965 113.579 30.2334 113.244 30.0996C112.802 29.9241 112.568 29.6979 112.397 29.2833C112.267 28.9679 112.008 28.6274 111.821 28.5261C110.331 27.7178 109.328 26.61 109.54 26.0053C109.628 25.7544 109.608 25.7353 109.432 25.9015C108.984 26.3222 107.86 26.15 107.31 25.5772C107.033 25.2874 106.444 24.8666 106.003 24.6421C105.465 24.3685 105.184 24.1184 105.15 23.8837C105.076 23.3616 104.801 23.2092 103.852 23.1654C103.17 23.1338 102.895 23.0333 102.507 22.6745C102.206 22.3957 101.696 22.1549 101.171 22.0446C100.654 21.9356 100.236 21.7402 100.1 21.5432C99.9768 21.3657 99.526 21.1253 99.098 21.0094C97.848 20.6705 97.2144 20.3446 96.9944 19.9275C96.808 19.5741 96.6864 19.5376 95.696 19.5376C94.6788 19.5376 94.5664 19.5011 94.0712 19.0106C93.7264 18.6689 93.3812 18.4837 93.0896 18.4837C92.8424 18.4837 92.64 18.4107 92.64 18.3216C92.64 18.2324 92.532 18.1594 92.4 18.1594C92.268 18.1594 92.16 18.095 92.16 18.0163C92.16 17.7711 91.5068 17.6811 91.4188 17.9138C91.1116 18.7249 89.5172 18.5822 88.59 17.6608C87.9604 17.0358 87.9276 17.0245 86.7344 17.0155C84.9704 17.003 84.1144 16.6378 83.9868 15.8433C83.8624 15.0658 83.8384 15.0468 82.8836 14.9535C82.0304 14.8705 82.0188 14.8818 82.0716 15.7346C82.1232 16.5676 81.6336 16.7654 79.8808 16.6191C77.8156 16.4464 76.108 16.4387 74.16 16.5928C72.13 16.7533 71.754 16.5997 71.7724 15.6163C71.7884 14.7606 70.6872 14.5571 70.3856 15.3601ZM61.8732 15.6463C61.478 16.1481 61.4612 16.2138 61.7264 16.2138C61.9296 16.2138 62.0816 16.031 62.198 15.6463C62.2928 15.3342 62.3588 15.0788 62.3452 15.0788C62.3312 15.0788 62.1188 15.3342 61.8732 15.6463ZM91.52 15.9556C91.52 16.2681 91.5848 16.3285 91.8464 16.2592C92.1548 16.1773 92.158 16.1558 91.9016 15.8688C91.5528 15.4785 91.52 15.4858 91.52 15.9556ZM94.08 17.1866C94.08 17.4107 94.1868 17.5109 94.4248 17.5109C94.7596 17.5109 94.7612 17.5011 94.48 17.1866C94.3208 17.0082 94.1656 16.8623 94.1352 16.8623C94.1048 16.8623 94.08 17.0082 94.08 17.1866ZM82.8124 19.5514C83.3968 19.8404 83.4432 19.915 83.4888 20.632C83.5416 21.4662 83.5992 21.5266 83.9952 21.1634C84.406 20.7865 86.5376 20.5295 87.1844 20.7783C87.4268 20.8716 87.8776 20.8655 88.386 20.7621C89.9136 20.4508 90.87 20.9028 90.988 21.9915C91.0252 22.3308 91.1272 22.6539 91.2152 22.709C91.3116 22.7694 91.2764 22.8922 91.1256 23.0187C90.9012 23.2076 90.9044 23.2501 91.1584 23.4451C91.5504 23.7467 91.6716 23.7236 91.6024 23.3608C91.4464 22.5388 92.18 21.8987 93.0312 22.1152C93.4604 22.2242 93.8548 23.2331 93.6644 23.7357C93.59 23.9327 93.6644 23.9964 93.968 23.9964C94.2916 23.9964 94.3536 24.0596 94.286 24.3215C94.184 24.7167 94.4936 25.1313 94.89 25.1313C95.3532 25.1313 95.4228 24.8144 95.0484 24.4106C94.7036 24.0385 94.7036 24.0385 95.0316 23.9518C95.2264 23.8999 95.36 23.7309 95.36 23.5367C95.36 22.9052 97.492 23.3636 97.75 24.0503C97.8976 24.4439 98.6892 24.6397 100.148 24.6437C100.67 24.6449 101.28 25.0146 101.28 25.3304C101.28 25.7317 101.794 25.9801 102.443 25.8918C103.06 25.8083 103.151 25.8476 103.679 26.4272C103.992 26.771 104.446 27.1029 104.688 27.1641C104.929 27.2258 105.325 27.52 105.568 27.8184C105.81 28.1167 106.272 28.4718 106.594 28.608C106.916 28.7442 107.274 28.9914 107.389 29.1576C107.505 29.3234 107.877 29.5516 108.216 29.6643C108.672 29.8159 108.889 30.0088 109.054 30.4097C109.177 30.7077 109.465 31.0826 109.694 31.2435C109.924 31.404 110.383 31.7729 110.715 32.0627C111.047 32.3525 111.47 32.5897 111.655 32.5897C111.842 32.5897 112.147 32.8041 112.344 33.0745C112.539 33.3412 112.847 33.6063 113.029 33.6638C113.211 33.7214 113.81 34.2508 114.36 34.841C114.911 35.4307 115.613 36.1839 115.92 36.5142C116.228 36.8446 116.48 37.1842 116.48 37.2686C116.48 37.3529 116.732 37.5726 117.04 37.7566C117.566 38.0711 117.6 38.1429 117.6 38.9353C117.6 39.7764 117.898 40.3723 118.319 40.3723C118.423 40.3723 118.591 40.5547 118.691 40.7776C118.791 41.0006 118.965 41.1886 119.076 41.1955C120.752 41.2977 121.126 43.3658 119.489 43.4776C118.854 43.521 118.822 43.8124 119.419 44.1294L119.76 44.3106L119.44 43.9349C119.258 43.722 119.224 43.6227 119.36 43.7062C119.687 43.9069 119.885 43.9 120.111 43.6803C120.441 43.3589 121.043 43.613 121.427 44.236C121.629 44.5635 122.018 44.977 122.292 45.1553C122.606 45.36 122.88 45.739 123.035 46.1817C123.17 46.568 123.406 46.9547 123.56 47.041C123.767 47.1573 123.84 47.4038 123.84 47.9903C123.84 49.0604 124.058 49.5683 124.824 50.285C125.444 50.8658 125.469 50.9254 125.416 51.7467C125.366 52.501 125.403 52.6246 125.719 52.7847C126.696 53.2801 126.898 53.8824 126.47 55.0149C126.415 55.1596 126.602 55.4835 126.939 55.8248C127.946 56.8447 128.604 59.3452 128.07 60.1182C127.801 60.5082 127.766 60.466 128.551 60.7121C129.674 61.0643 129.224 62.6719 128.04 62.5389L127.36 62.4627L127.362 63.132C127.364 63.5 127.418 63.7266 127.482 63.6354C127.836 63.1368 128.618 63.3646 128.987 64.0736C129.947 65.9183 129.363 68.2016 127.966 68.0666L127.36 68.0083L127.393 73.9303L127.426 79.8528L127.524 74.178C127.578 71.0568 127.636 68.4805 127.651 68.4529C127.744 68.2912 128 68.6596 128.002 68.9588C128.004 69.2474 128.034 69.2685 128.16 69.0707C128.284 68.8769 128.318 68.9101 128.329 69.2328C128.341 69.6025 128.354 69.6094 128.474 69.3139C128.592 69.0232 128.617 69.018 128.716 69.264C128.8 69.4707 128.914 69.5052 129.179 69.403C130.14 69.0326 130.669 70.7913 130.618 74.1853C130.578 76.7742 130.035 78.2367 129.172 78.0782C128.762 78.0028 128.585 79.6177 128.976 79.8629C129.663 80.2934 129.639 82.2225 128.933 83.2293C128.645 83.6412 128.637 83.7153 128.855 83.9594C129.5 84.6817 129.431 85.6261 128.679 86.3566C128.455 86.5738 128.333 86.9812 128.257 87.7587C128.114 89.2268 127.952 89.609 127.087 90.5028L126.352 91.2624L126.556 92.0006C126.817 92.9442 126.602 93.5259 125.737 94.2206C124.906 94.887 124.71 95.2693 125.032 95.5952C125.595 96.1655 125.534 96.6487 124.82 97.2692C124.405 97.6304 124.092 98.0722 123.994 98.4383C123.907 98.7613 123.668 99.1991 123.462 99.4111C123.257 99.6227 123.048 100.051 122.998 100.363C122.845 101.329 122.582 101.825 122.073 102.113C121.779 102.279 121.547 102.565 121.493 102.828C121.345 103.548 120.952 103.786 120.027 103.715C119.397 103.668 119.138 103.721 118.896 103.951C118.588 104.241 118.579 104.238 118.514 103.805C118.454 103.402 118.446 103.409 118.424 103.895C118.41 104.208 118.488 104.461 118.613 104.51C118.846 104.6 118.875 104.753 118.888 105.936C118.895 106.528 118.795 106.874 118.489 107.323C118.264 107.651 118.08 108.047 118.08 108.203C118.08 108.358 117.903 108.664 117.687 108.883C117.021 109.558 115.61 109.343 115.803 108.597C115.844 108.438 115.797 108.308 115.699 108.308C115.6 108.308 115.52 108.381 115.52 108.47C115.52 108.559 115.444 108.632 115.35 108.632C115.257 108.632 115.216 108.574 115.26 108.503C115.303 108.432 115.181 108.383 114.989 108.394C113.884 108.456 112.849 109.668 113.869 109.705C114.157 109.716 114.357 109.666 114.314 109.595C114.27 109.524 114.326 109.412 114.437 109.347C114.549 109.282 114.588 109.286 114.526 109.357C114.463 109.428 114.517 109.638 114.646 109.825C115.015 110.359 114.93 110.844 114.4 111.226C114.136 111.417 113.92 111.714 113.92 111.886C113.92 112.71 112.516 113.128 112.113 112.424C112.036 112.29 111.746 112.212 111.378 112.226C110.651 112.255 110.375 113.363 111.041 113.578C111.902 113.855 111.589 115.236 110.578 115.614C110.196 115.758 109.816 115.995 109.735 116.142C109.654 116.288 109.248 116.606 108.834 116.848C107.864 117.412 107.165 117.96 106.396 118.755C105.825 119.345 105.721 119.39 104.978 119.355C104.234 119.321 104.158 119.353 103.929 119.802C103.588 120.471 103.078 120.793 102.361 120.793C101.863 120.793 101.719 120.868 101.566 121.21C101.317 121.763 100.657 122.09 99.7872 122.09C99.1556 122.09 99.058 122.141 98.8856 122.562C98.6728 123.083 98.244 123.309 97.04 123.537C96.6 123.62 95.844 123.875 95.36 124.103C94.7164 124.407 94.2144 124.519 93.4908 124.52C92.6712 124.521 92.4856 124.573 92.408 124.82C92.1428 125.667 91.7636 125.786 88.9664 125.9C87.5176 125.958 86.2084 126.073 86.0568 126.156C85.4728 126.473 85.0304 126.329 84.7496 125.733L84.48 125.159L85.04 124.592C85.548 124.077 85.6 123.939 85.6 123.108C85.6 122.201 85.9936 121.441 86.4636 121.441C86.5556 121.441 86.8916 121.135 87.2096 120.761L87.7876 120.08L87.414 119.522C86.928 118.797 86.9408 118.648 87.5476 117.948C87.9812 117.448 88.0568 117.232 88.0676 116.466C88.0784 115.677 88.1388 115.517 88.5644 115.14C89.4956 114.318 89.9688 113.509 89.9848 112.711C89.9996 111.992 90.0184 111.965 90.6 111.825C91.0812 111.709 91.2 111.606 91.2 111.303C91.2 110.952 91.9124 110.254 92.2704 110.254C92.3476 110.254 92.5396 110.033 92.6968 109.764C93.39 108.574 96.316 108.577 96.4216 109.767C96.4332 109.901 96.4512 110.187 96.4616 110.402C96.4868 110.937 96.61 110.768 96.6936 110.086C96.8332 108.942 97.2272 108.63 98.5276 108.635C100.748 108.642 102.53 109.689 101.72 110.51C101.425 110.809 101.68 110.902 102.792 110.902H103.983L103.894 110.171L103.806 109.44L104.557 109.103C105.082 108.868 105.552 108.783 106.122 108.821C106.924 108.875 106.938 108.868 107.075 108.34C107.184 107.917 107.36 107.741 107.906 107.503C108.361 107.306 108.631 107.073 108.694 106.823C108.934 105.884 110.44 104.579 111.29 104.575L112.08 104.572L111.68 104.255C111.46 104.08 111.156 103.936 111.004 103.934C110.671 103.929 110.32 103.27 110.187 102.396C110.073 101.651 110.512 101.012 111.136 101.012C111.746 101.012 112 100.593 112 99.5919C112 98.8805 112.076 98.5996 112.348 98.3065L112.696 97.9312H112.293C111.372 97.9312 111.028 96.8481 111.602 95.7541C112.105 94.7958 112.104 94.2932 111.6 93.686C110.856 92.7906 111.268 91.6078 112.324 91.6078C112.682 91.6078 112.853 91.5044 112.987 91.2077C113.086 90.9872 113.228 90.8457 113.303 90.8928C113.378 90.9398 113.44 90.8239 113.44 90.635C113.44 90.1773 113.733 90.3747 114.01 91.0192C114.139 91.3204 114.23 91.4112 114.234 91.243C114.237 91.0869 114.312 90.9593 114.4 90.9593C114.488 90.9593 114.56 90.6674 114.56 90.3107C114.56 89.6844 114.252 89.4108 114.004 89.8174C113.862 90.0501 113.421 89.8255 112.843 89.2256C112.558 88.9305 112.252 88.6893 112.163 88.6893C112.073 88.6893 112 88.511 112 88.2925C112 88.0744 111.824 87.5596 111.608 87.149C111.084 86.1502 111.32 85.4466 112.18 85.4466C112.813 85.4466 113.28 85.9626 113.28 86.6626C113.28 87.3245 113.367 87.3561 113.87 86.8774C114.324 86.4445 114.34 86.2573 113.92 86.2573C113.744 86.2573 113.592 86.2025 113.582 86.1357C113.353 84.6091 113.806 83.9873 115.149 83.9873C115.358 83.9873 115.572 83.8779 115.622 83.7441C115.673 83.6104 115.843 83.5009 116 83.5009C116.329 83.5009 116.48 83.1876 116.568 82.3214C116.716 80.8621 117.036 80.2464 117.68 80.1787C117.768 80.1698 118.009 80.0681 118.215 79.9529C118.423 79.8374 118.769 79.7896 118.992 79.8467L119.395 79.9489L118.939 79.5512C118.606 79.261 118.41 79.1933 118.212 79.3007C117.459 79.7089 116.007 78.8415 115.994 77.9769C115.984 77.2444 115.614 76.8083 114.944 76.7386C114.245 76.666 113.76 76.3012 113.76 75.848C113.76 75.6794 113.58 75.3592 113.361 75.1366C113.141 74.9141 112.857 74.527 112.729 74.2765C112.601 74.026 112.316 73.7013 112.097 73.5554C111.768 73.3373 111.688 73.1383 111.648 72.437C111.604 71.6487 111.559 71.5627 111.057 71.309C110.302 70.9271 110.266 70.8736 110.08 69.8757C109.963 69.249 109.782 68.8631 109.46 68.5567C108.701 67.8352 108.652 66.8907 109.334 66.1656C109.858 65.6098 109.882 65.5288 109.905 64.2876C109.951 61.7805 110.262 60.9755 111.278 60.7295C111.727 60.6209 111.992 60.3939 111.998 60.1125C111.999 60.0457 111.642 59.9909 111.204 59.9909C110.306 59.9909 109.97 59.6719 109.868 58.7234C109.837 58.4373 109.665 58.04 109.486 57.8406C109.111 57.4239 108.8 56.5285 108.825 55.9375C108.864 54.9999 109.149 53.2355 109.315 52.8978C109.543 52.4325 109.45 52.3482 108.645 52.2931C107.492 52.2136 107.092 51.5756 107.474 50.4293C107.7 49.7511 107.695 49.7207 107.235 49.0669C106.312 47.7548 106.203 47.4241 106.477 46.7589C106.828 45.9069 106.792 45.7755 106.066 45.2887L105.412 44.8501L105.508 43.1679C105.584 41.8469 105.562 41.5121 105.405 41.6102C104.694 42.0553 103.034 41.4229 102.53 40.5154C102.338 40.1692 102.088 39.8859 101.975 39.8859C101.861 39.8859 101.657 39.6674 101.52 39.3999C101.381 39.1279 101.028 38.8105 100.715 38.6783C100.391 38.5409 100.093 38.2681 100.002 38.0261C99.916 37.7975 99.6608 37.5389 99.4352 37.4518C99.1868 37.3561 98.9256 37.0533 98.7744 36.6849C98.4488 35.8924 98.31 35.8174 97.3932 35.9378C96.7476 36.0221 96.5688 35.9836 96.2628 35.6922C96.0464 35.4859 95.516 35.2779 94.9496 35.177C94.1964 35.0424 93.9092 34.9018 93.5608 34.4948C93.3192 34.2127 92.8152 33.8329 92.4408 33.6509C91.7816 33.3298 91.76 33.295 91.76 32.5508C91.76 32.085 91.6812 31.7514 91.56 31.7044C91.4172 31.6493 91.36 31.8479 91.36 32.3975C91.36 33.1819 90.8868 33.7246 90.2032 33.7246C89.7768 33.7246 89.232 32.9679 89.3412 32.5277C89.396 32.3051 89.3656 32.0757 89.2728 32.0177C89.156 31.9448 89.1556 31.8499 89.2708 31.7093C89.3624 31.5974 89.384 31.4462 89.3188 31.3732C89.2532 31.3007 89.344 31.2934 89.52 31.3574C89.7628 31.4458 89.7956 31.4284 89.6556 31.2853C89.5216 31.1487 89.3896 31.1446 89.1756 31.2707C89.0128 31.3663 88.9304 31.447 88.9916 31.4498C89.0532 31.4527 89.0292 31.6699 88.9388 31.933C88.716 32.5812 88.0188 32.8086 86.9076 32.5949C85.5016 32.3246 85.1248 31.9172 85.3208 30.8779C85.3632 30.6529 85.3536 30.494 85.2992 30.5244C84.7948 30.8074 83.9788 31.1179 83.52 31.2022C83.212 31.2589 82.8588 31.3266 82.7352 31.3526C82.612 31.3785 82.036 31.2646 81.4552 31.0992C80.8748 30.9338 80.004 30.7109 79.52 30.6043C78.2824 30.3307 78.2996 29.5686 79.5452 29.4835C80.9132 29.3895 76.6152 29.2322 74.88 29.3125C72.92 29.4033 72.8072 29.4239 73.6596 29.5382C74.998 29.7178 75.7264 30.5034 74.52 30.4657C74.0272 30.4503 74.0212 30.4426 74.4 30.3197C74.754 30.2046 74.7264 30.186 74.16 30.1548C73.5456 30.1207 73.5392 30.1146 74 30.008C74.4444 29.9047 74.4544 29.8876 74.1336 29.7774C73.9432 29.7117 73.5976 29.7065 73.3656 29.7652L72.944 29.8726L73.298 30.1236C73.6368 30.3643 73.5916 30.3874 72.2412 30.6704C71.4652 30.8329 70.5912 31.1089 70.2988 31.2841L69.7668 31.6018L69.2528 31.1633C68.7432 30.7287 67.662 30.3489 67.1992 30.4418C67.0192 30.4782 66.972 30.6647 67.0124 31.1787C67.0904 32.1722 66.7236 32.4535 65.1852 32.5812C64.1844 32.6643 63.9264 32.7449 63.7028 33.0453C63.2948 33.5937 62.3388 33.2597 62.5684 32.6489C62.6672 32.3846 62.6644 32.2812 62.5596 32.3469C62.4716 32.4016 62.3912 32.3696 62.38 32.2751C62.3316 31.8584 62.3136 31.7993 62.2 31.6845C62.134 31.6177 62.0752 31.6663 62.0692 31.7924C62.0048 33.1665 61.7184 33.6363 60.792 33.8888C60.4564 33.9804 60.0804 34.2289 59.9336 34.4559C59.7216 34.7842 59.542 34.8596 58.9744 34.8596C58.3544 34.8596 57.314 35.2349 55.69 36.0444C55.462 36.1583 55.2448 36.4558 55.1664 36.7615C54.8204 38.1153 53.12 37.65 53.12 36.2017C53.12 35.8373 53.0444 35.6703 52.88 35.6703C52.748 35.6703 52.64 35.7351 52.64 35.8146C52.64 35.8936 52.514 35.9484 52.36 35.9362C52.1844 35.922 52.0884 36.0193 52.1024 36.1972C52.1144 36.3533 52.0604 36.481 51.9824 36.481C51.6772 36.481 51.8596 36.9479 52.1836 36.9966C53.5132 37.1972 52.7044 39.2397 50.9368 40.1477C50.4356 40.4051 49.91 40.7249 49.7692 40.8587C49.6284 40.9925 49.3552 41.2113 49.162 41.3451C48.9688 41.4789 48.78 41.7727 48.7424 41.9981C48.6132 42.7744 48.2024 43.5494 47.768 43.838C47.5284 43.9973 47.3688 44.1643 47.4132 44.2093C47.59 44.3884 47.1608 45.2028 46.7804 45.4091C46.5584 45.5295 46.2796 45.8635 46.1608 46.1509C46.0008 46.5392 45.7952 46.7155 45.3596 46.8371C44.6408 47.0386 44.0164 47.6924 43.8932 48.3738C43.7536 49.1472 43.414 49.5898 42.8392 49.7483C42.5076 49.8399 42.3444 49.9733 42.3872 50.1176C42.7304 51.274 42.434 52.2083 41.7248 52.2083C40.9876 52.2083 40.7948 52.4807 41.0664 53.139C41.6 54.4333 41.1908 55.6173 40.0364 56.1187L39.3484 56.4174L39.6344 56.8597C40.3012 57.8913 39.8724 60.618 38.9864 60.9812C38.3148 61.256 38.2364 61.4064 38.498 61.9147C38.8168 62.5341 38.8068 66.136 38.4852 66.5672C38.356 66.7403 38.2476 66.9912 38.244 67.125C38.2408 67.2588 38.1212 67.5871 37.9784 67.8546C37.8356 68.1222 37.656 68.6637 37.5792 69.0585C37.3804 70.0771 37.066 70.3678 36.162 70.3678C35.1644 70.3678 35.1136 70.4691 35.7872 71.1128C36.5852 71.8756 36.402 73.8943 35.5084 74.1816C35.32 74.2425 35.048 74.5919 34.88 74.9887C34.7124 75.3851 34.44 75.7349 34.252 75.7957C34.0692 75.8541 33.92 76.0037 33.92 76.1277C33.92 76.407 32.1572 78.1483 31.8736 78.1496C31.76 78.15 31.3852 78.4422 31.04 78.7989C30.6948 79.1556 30.298 79.4475 30.158 79.4475C30.018 79.4475 29.7988 79.7012 29.6712 80.0117C29.5432 80.3222 29.2656 80.6907 29.0544 80.8309C28.8432 80.9712 28.6272 81.2464 28.574 81.4422C28.5208 81.638 27.9744 82.3457 27.3592 83.0145L26.2408 84.2305L25.856 83.794C25.1308 82.9711 25.1284 81.2549 25.8516 80.1755C26.0628 79.8601 26.2508 79.3976 26.2696 79.1479C26.3044 78.6838 26.8168 78.6011 27.296 78.9825C27.4216 79.0827 27.4524 78.7649 27.4036 77.8662C27.3128 76.197 27.2012 75.9587 27.2452 77.5274C27.2644 78.2104 27.226 78.7349 27.16 78.6935C27.094 78.6518 27.0272 78.0928 27.0116 77.4516L26.9836 76.2858L26.88 77.4208L26.7764 78.5557L26.7484 77.6137C26.73 77.0069 26.6608 76.7094 26.5528 76.7767C26.4612 76.8342 26.2992 76.8079 26.1928 76.7187C26.0864 76.6295 25.7476 76.529 25.4396 76.4953C24.984 76.4459 24.8276 76.3267 24.5968 75.8545C23.9268 74.482 24.2732 69.6454 25.042 69.6361C25.5836 69.6296 26.24 69.1663 26.24 68.7906C26.24 68.4987 26.3064 68.4132 26.48 68.4809C26.626 68.5376 26.72 68.4809 26.72 68.3358C26.72 68.2048 26.5872 68.0978 26.4248 68.0978C25.1844 68.0978 25.14 63.4664 26.3796 63.3772C26.5228 63.3667 26.748 63.3484 26.88 63.3367C27.012 63.3245 27.2076 63.4242 27.3148 63.558C27.4768 63.7598 27.5108 63.7051 27.5148 63.2337C27.5196 62.6792 27.5044 62.6654 26.84 62.6285C25.202 62.5373 25.1724 60.6395 26.8092 60.6395C27.6352 60.6395 27.668 60.5726 27.1004 60.0396C26.7252 59.6869 26.6916 59.5649 26.7824 58.886C26.838 58.4681 26.9288 57.7072 26.984 57.1953C27.0752 56.3473 27.1452 56.2135 27.7656 55.6984C28.4344 55.143 28.4444 55.1199 28.288 54.4957C28.098 53.7381 28.378 52.9765 28.8812 52.882C29.4576 52.7734 29.564 52.5719 29.4316 51.8419C29.3048 51.1447 29.748 49.9384 30.1312 49.9384C30.6096 49.9384 31.04 49.0925 31.04 48.1521C31.04 47.373 31.0976 47.1622 31.3468 47.0268C31.516 46.9352 31.7052 46.6239 31.768 46.3345C31.9228 45.6195 32.2664 45.1245 32.6884 45.0078C32.8816 44.9543 33.2356 44.5948 33.4748 44.2089C33.9556 43.4343 34.7592 43.2981 34.9656 43.9567C35.0184 44.1258 35.1328 44.2636 35.2204 44.2636C35.3076 44.2636 35.3396 44.1987 35.2912 44.1197C35.2428 44.0406 35.3288 43.8765 35.4816 43.7549C35.7336 43.555 35.7392 43.5611 35.5404 43.8177C35.4044 43.9936 35.3868 44.1015 35.4948 44.1015C35.5904 44.1015 35.7464 43.9543 35.8412 43.7747C35.936 43.5952 35.9568 43.4578 35.8868 43.4699C35.0324 43.6146 34.55 43.3179 34.4528 42.5879C34.3596 41.8858 34.9316 41.183 35.5968 41.183C35.886 41.183 36.052 41.065 36.1572 40.7853C36.2392 40.5668 36.528 40.2718 36.7992 40.1295C37.2696 39.883 37.2884 39.8348 37.2136 39.0602C37.1488 38.3922 37.1908 38.2004 37.4512 37.973C38.2732 37.2548 39.4052 36.0132 39.7412 35.4603C39.8928 35.211 40.194 34.939 40.4104 34.8555C40.6268 34.772 40.8864 34.5207 40.9872 34.2966C41.0876 34.0728 41.3972 33.8061 41.6744 33.7048C41.9516 33.603 42.2968 33.3108 42.4416 33.055C42.6092 32.7595 42.8392 32.5876 43.0724 32.5844C43.484 32.5787 44 32.2399 44 31.9752C44 31.8799 44.3296 31.6351 44.7324 31.4312C45.2204 31.1843 45.534 30.8921 45.6724 30.5561C45.806 30.2318 46.1024 29.9472 46.5004 29.7604C46.8412 29.6007 47.3 29.3044 47.52 29.1021C47.74 28.9002 48.0756 28.6874 48.2656 28.6291C48.456 28.5711 48.7912 28.2849 49.0104 27.9935C49.2508 27.6745 49.6808 27.3725 50.0904 27.2359C50.556 27.0798 50.8676 26.8423 51.0772 26.4824C51.4188 25.895 51.6356 25.7957 52.5536 25.8054C53.0924 25.8111 53.256 25.7252 53.6488 25.2286L54.1112 24.6449H55.4284C56.6444 24.6449 56.7612 24.6157 56.9456 24.2671C57.244 23.7021 57.958 23.3478 58.7988 23.3478H59.5484L59.4944 24.2907C59.4408 25.2193 59.446 25.2327 59.84 25.1609C60.404 25.058 60.64 24.8281 60.64 24.3819C60.64 24.1472 60.734 23.9964 60.88 23.9964C61.1176 23.9964 61.1812 23.7597 61.1276 23.0742C61.0808 22.4804 61.698 21.998 62.3644 22.1075C63.0588 22.2218 63.26 22.4107 63.302 22.9859C63.3196 23.2295 63.34 23.4844 63.3472 23.5517C63.354 23.6194 63.5012 23.5854 63.6736 23.4763C63.9636 23.2927 63.9676 23.2562 63.7288 22.9887C63.572 22.8128 63.5428 22.6993 63.6552 22.6993C63.7616 22.6993 63.8412 22.4415 63.8424 22.0913C63.8468 20.9912 64.3316 20.7021 66.0584 20.7702C66.7304 20.797 67.568 20.7658 67.92 20.7013C68.624 20.5724 70.5836 20.9235 70.9688 21.2477C71.1512 21.4005 71.2052 21.3949 71.2236 21.2194C71.2368 21.0969 71.262 20.8874 71.28 20.7536C71.298 20.6199 71.3232 20.3844 71.3364 20.2303C71.4108 19.3519 72.81 19.1408 78.1724 19.1979C81.7472 19.2364 82.2532 19.2749 82.8124 19.5514ZM48.4768 21.9737C48.1676 22.3511 48.3884 22.4224 48.7192 22.0515C48.8788 21.8728 48.9352 21.7264 48.8444 21.7264C48.7536 21.7264 48.588 21.8375 48.4768 21.9737ZM63.56 23.9461C63.714 23.9866 63.966 23.9866 64.12 23.9461C64.274 23.9052 64.148 23.8719 63.84 23.8719C63.532 23.8719 63.406 23.9052 63.56 23.9461ZM90.76 23.9461C90.914 23.9866 91.166 23.9866 91.32 23.9461C91.474 23.9052 91.348 23.8719 91.04 23.8719C90.732 23.8719 90.606 23.9052 90.76 23.9461ZM109.991 24.3348C109.826 24.6052 110.197 24.9153 110.418 24.6915C110.603 24.5043 110.487 24.1585 110.24 24.1585C110.162 24.1585 110.05 24.238 109.991 24.3348ZM109.474 24.8553C109.496 25.1253 109.614 25.2375 109.901 25.2615L110.297 25.2947L109.92 24.8885C109.459 24.3912 109.436 24.3896 109.474 24.8553ZM51.84 28.2371C51.84 28.5764 51.8496 28.578 52.16 28.293C52.336 28.1317 52.48 27.9744 52.48 27.9436C52.48 27.9128 52.336 27.8877 52.16 27.8877C51.9388 27.8877 51.84 27.9959 51.84 28.2371ZM102.64 28.212C102.799 28.3903 102.954 28.5362 102.985 28.5362C103.015 28.5362 103.04 28.3903 103.04 28.212C103.04 27.9878 102.933 27.8877 102.695 27.8877C102.36 27.8877 102.359 27.8974 102.64 28.212ZM103.21 29.5245C103.198 29.8362 103.696 30.3238 104.012 30.3096C104.138 30.3039 104.076 30.2326 103.876 30.1511C103.676 30.0696 103.447 29.8374 103.366 29.6343C103.272 29.3972 103.217 29.3579 103.21 29.5245ZM67.6768 29.7563C67.3676 30.1337 67.5884 30.205 67.9192 29.8341C68.0788 29.6554 68.1352 29.5091 68.0444 29.5091C67.9536 29.5091 67.788 29.6201 67.6768 29.7563ZM88.96 30.8386C88.96 31.1158 89.0028 31.1519 89.152 31.0007C89.2576 30.8937 89.4916 30.8049 89.672 30.8037C89.8524 30.8025 90.108 30.7304 90.24 30.644C90.4136 30.5305 90.2696 30.4863 89.72 30.4843C89.0428 30.4823 88.96 30.5208 88.96 30.8386ZM62.2952 30.8941C62.1564 31.2605 62.2808 31.28 62.6 30.9411C62.8368 30.6898 62.8424 30.644 62.6348 30.644C62.5004 30.644 62.3472 30.7567 62.2952 30.8941ZM117.096 30.9278C117.069 31.2419 117.072 31.7932 117.101 31.9817C117.112 32.0485 117.232 32.1033 117.37 32.1033C117.507 32.1033 117.582 32.0433 117.537 31.9695C117.492 31.8961 117.612 31.8414 117.803 31.8479C118.253 31.8637 118.357 31.3676 117.989 30.9561C117.64 30.5658 117.128 30.5492 117.096 30.9278ZM48.5608 31.1296C48.4012 31.3084 48.3448 31.4547 48.4356 31.4547C48.6368 31.4547 49.036 30.9914 48.9284 30.8824C48.886 30.8394 48.7208 30.9505 48.5608 31.1296ZM94.56 32.0599C94.78 32.1008 95.068 32.2184 95.2 32.3213C95.4088 32.4843 95.4116 32.4717 95.2204 32.2249C95.0992 32.0684 94.812 31.9508 94.5804 31.963L94.16 31.9853L94.56 32.0599ZM45.2928 33.7704C45.2856 33.9293 45.118 34.1255 44.92 34.2062C44.6764 34.3051 44.644 34.3558 44.8204 34.3631C45.1496 34.376 45.4964 33.9638 45.3876 33.6894C45.3368 33.5609 45.3004 33.5917 45.2928 33.7704ZM99.1848 34.8381C99.5952 35.4218 99.9464 35.7157 100.15 35.6452C100.45 35.541 99.9332 34.8312 99.3924 34.6038L98.8644 34.3821L99.1848 34.8381ZM42.5232 36.1198C42.472 36.318 42.2612 36.5487 42.0552 36.6326C41.8212 36.7274 41.776 36.7886 41.9352 36.7951C42.2604 36.8081 42.7744 36.2406 42.6844 35.9674C42.6456 35.8499 42.576 35.9159 42.5232 36.1198ZM52.6532 36.4676C52.2848 36.8409 52.0172 36.9317 52.2992 36.5876C52.3972 36.468 52.424 36.3103 52.3588 36.2374C52.2932 36.1644 52.3252 36.1543 52.4288 36.2143C52.5328 36.2747 52.666 36.2451 52.7248 36.1486C52.784 36.0521 52.8668 36.0083 52.9092 36.0513C52.952 36.0943 52.8368 36.2815 52.6532 36.4676ZM67.04 36.3699C67.7192 36.8677 68.1548 37.3849 68.2448 37.8008C68.3984 38.5097 68.5908 38.3545 68.6764 37.4522C68.7812 36.3452 69.1232 35.9946 70.0972 35.9946C71.448 35.9946 71.924 36.4299 72.0344 37.7655C72.0772 38.2848 72.4788 38.7096 72.4808 38.2373C72.4912 35.7587 75.3224 35.2106 75.8628 37.5827C76.0908 38.5831 76.1112 38.59 76.6868 37.8591C77.6728 36.607 79.6776 37.1765 79.6824 38.7104C79.6864 39.9333 79.8976 40.0881 80.5304 39.3338C81.4304 38.2617 83.1908 39.3318 83.4452 41.1055C83.6028 42.2052 83.6392 42.2344 84.156 41.6734C85.2656 40.47 86.1168 41.1773 86.212 43.3812C86.2836 45.0418 86.3616 45.1635 86.88 44.4257C87.5052 43.536 88.2432 43.8124 89.094 45.2555C89.52 45.9778 89.5212 46.0645 89.1132 46.5416C88.5524 47.1967 88.7484 47.5967 89.6004 47.5355C91.3292 47.4115 91.7596 48.4771 91.0264 51.064C90.9784 51.2335 91.1632 51.3295 91.6956 51.4118C92.8876 51.5967 93.6 52.0794 93.6 52.7024C93.6 52.7811 93.3916 53.0863 93.1368 53.3802C92.4032 54.2265 92.3944 55.107 93.1164 55.3469C94.174 55.6988 94.2068 57.5058 93.1728 58.4652C92.5812 59.0149 92.5976 59.081 93.3676 59.248C94.13 59.4133 94.77 60.1016 94.6636 60.6407C94.5112 61.4141 93.644 62.5495 93.1168 62.667C92.6216 62.7773 92.4544 63.0716 92.8872 63.0716C94.2184 63.0716 94.3256 66.0521 93.01 66.4817C92.1108 66.7756 92.1124 66.7711 92.718 67.4189C93.8716 68.6523 93.3012 70.1987 91.5972 70.4578C90.974 70.5526 90.4116 70.8542 90.858 70.8542C91.4056 70.8542 91.4716 73.3616 90.94 73.9571C90.6104 74.326 89.5668 74.3645 89.2268 74.0199C89.0192 73.8095 88.9796 73.8112 88.8956 74.0333C88.7132 74.5148 88.8024 74.8853 89.2216 75.3904L89.6432 75.8983L89.1952 76.3721C88.5924 77.0093 87.8928 77.2278 87.06 77.0381C86.2412 76.8517 86.1476 76.9716 86.218 78.1192C86.3008 79.471 85.3456 80.7263 84.6976 80.1163C83.828 79.2979 83.2212 79.4998 83.3232 80.5735C83.4552 81.9671 81.9308 82.8179 80.522 82.1369C79.8388 81.807 79.8648 81.7823 79.68 82.9338C79.4068 84.6351 78.0512 85.104 76.8692 83.9063C76.1748 83.2022 76.0612 83.1997 75.9348 83.884C75.64 85.4762 72.8964 85.5394 72.5544 83.9618C72.408 83.2865 72.1452 83.4636 71.912 84.3943C71.4076 86.4064 69.014 86.4871 68.7208 84.5017C68.5664 83.4567 68.4712 83.3672 68.1756 83.9885C68.0348 84.2836 67.812 84.5751 67.68 84.6363C67.548 84.6971 67.0892 84.9192 66.6608 85.1296L65.8816 85.5122L65.3408 84.9144C65.0336 84.5743 64.8 84.1446 64.8 83.918C64.8 83.2075 63.8228 83.3051 63.0936 84.0883C62.178 85.0724 61.232 84.5974 61.0424 83.0579C60.8816 81.7555 60.8416 81.6833 60.4252 81.9537C60.008 82.2245 58.406 82.4414 57.9372 82.2906C57.4488 82.1333 57.22 81.5974 57.2092 80.5849C57.1984 79.5322 56.9376 79.3737 56.2616 80.0089C55.6668 80.5674 55.4804 80.5322 54.7956 79.7312C53.9588 78.7523 53.784 78.3279 54.1156 78.0819C54.2604 77.9749 54.43 77.6794 54.4932 77.426L54.6072 76.9647L53.8112 77.06C51.6088 77.3243 50.2296 76.1905 51.36 75.0446C51.624 74.7771 51.84 74.4034 51.84 74.2141C51.84 73.9465 51.7972 73.9133 51.648 74.0645C51.4364 74.2789 50.2708 74.3255 49.97 74.1318C49.4872 73.8205 49.2608 72.0017 49.594 71.1136C49.778 70.6227 49.7156 70.5745 48.6236 70.3645C47.0272 70.0577 46.566 68.4768 47.76 67.4055C48.4716 66.7675 48.464 66.714 47.6336 66.502C45.912 66.0626 45.8448 63.5255 47.5448 63.147C48.19 63.0035 48.1104 62.8446 47.2808 62.6196C46.3436 62.3655 45.9676 61.9629 45.8356 61.0724C45.648 59.8049 46.2024 59.1803 47.5148 59.1803C48.0608 59.1803 48.1652 58.931 47.684 58.7761C47.0616 58.5759 46.7224 57.9209 46.8156 57.0976C46.97 55.7271 47.0268 55.6023 47.6056 55.357C48.298 55.064 48.2972 54.8933 47.6 53.8994C46.564 52.4224 46.9084 51.6729 48.736 51.4272C49.4492 51.3316 49.6632 51.2428 49.6116 51.0653C49.5736 50.936 49.5144 50.2465 49.48 49.5331C49.396 47.8079 49.5484 47.5927 50.868 47.5732C52.1088 47.555 52.1652 47.4804 51.4524 46.799C50.4276 45.8193 51.4172 44.1416 53.1176 43.9762C53.5736 43.9316 53.9684 43.8141 53.9952 43.7148C54.5484 41.6564 54.8356 41.183 55.5316 41.183C56.1976 41.183 56.4668 41.3358 56.7376 41.8664C57.068 42.5133 57.178 42.3406 57.2056 41.1351C57.254 39.0111 58.6988 38.149 60.1084 39.4031C60.7648 39.9868 60.96 39.9151 60.96 39.0898C60.96 37.1518 62.2688 36.6565 63.8428 37.999C64.5744 38.6228 64.7408 38.5531 64.8528 37.5754C65.012 36.1851 66.0252 35.6265 67.04 36.3699ZM106.36 42.3228C106.558 42.4035 106.726 42.5996 106.733 42.7585C106.74 42.9373 106.777 42.9681 106.828 42.8396C106.936 42.5652 106.59 42.153 106.26 42.1659C106.084 42.1732 106.116 42.2239 106.36 42.3228ZM45.6552 42.568C45.5164 42.9345 45.6408 42.9539 45.96 42.6151C46.1968 42.3637 46.2024 42.3179 45.9948 42.3179C45.8604 42.3179 45.7072 42.4306 45.6552 42.568ZM35.7336 44.0411C35.4212 44.3787 35.314 44.5879 35.4536 44.5879C35.7528 44.5879 36.32 44.0038 36.32 43.6961C36.32 43.3957 36.3448 43.3812 35.7336 44.0411ZM118.56 43.66C118.56 43.8137 118.704 44.0852 118.88 44.2636C119.056 44.4419 119.324 44.5879 119.476 44.5879C119.704 44.5879 119.691 44.5453 119.401 44.3394C119.208 44.2024 118.94 43.9308 118.805 43.7358C118.602 43.4416 118.56 43.4286 118.56 43.66ZM54.08 44.3349C54.08 44.7451 54.3152 45.02 54.4612 44.7808C54.578 44.5895 54.3924 43.9393 54.2212 43.9393C54.1436 43.9393 54.08 44.1173 54.08 44.3349ZM45.04 44.4257C44.7588 44.7403 44.7604 44.75 45.0952 44.75C45.3332 44.75 45.44 44.6499 45.44 44.4257C45.44 44.2474 45.4152 44.1015 45.3848 44.1015C45.3544 44.1015 45.1992 44.2474 45.04 44.4257ZM24.5376 48.9737C24.0792 49.1484 23.5832 50.0957 24.0088 49.983C24.3668 49.8881 25.0132 49.2015 24.9372 48.9968C24.9044 48.9084 24.7344 48.8983 24.5376 48.9737ZM129.92 49.0235C129.92 49.2672 130.516 49.846 130.912 49.987C131.167 50.0783 131.167 50.0519 130.908 49.5825C130.61 49.043 129.92 48.6522 129.92 49.0235ZM27.2524 69.1517C27.2532 69.776 27.282 70.0115 27.3168 69.675C27.3516 69.3386 27.3508 68.8279 27.3156 68.5401C27.28 68.2523 27.2516 68.5275 27.2524 69.1517ZM40.8108 69.1112C40.9964 69.4902 41.3648 69.9867 41.63 70.2145C42.4744 70.9409 42.5348 72.358 41.7524 73.0965L41.4052 73.4241L42.1932 74.2064C43.0304 75.0381 43.604 76.2902 43.7636 77.634C43.8196 78.107 43.976 78.4483 44.2464 78.6879C44.5456 78.953 44.7016 79.3384 44.8652 80.2205C45.0336 81.1288 45.176 81.4722 45.4856 81.719C45.7476 81.9278 45.9568 82.336 46.0864 82.8917C46.2348 83.5269 46.4428 83.8929 46.9028 84.3274C47.4484 84.8426 47.52 84.9979 47.52 85.6651C47.52 86.0797 47.5864 86.4194 47.6676 86.4194C48.2424 86.4194 48.8204 87.2962 48.778 88.1036C48.7412 88.8057 48.7852 88.956 49.0704 89.0999C49.714 89.425 49.9052 89.6938 50.0136 90.4258C50.0892 90.9374 50.21 91.1862 50.408 91.2385C50.726 91.3228 50.9716 91.8534 51.1368 92.8129C51.1988 93.1728 51.418 93.6118 51.6404 93.8206C52.0708 94.2247 51.8004 94.8323 51.2804 94.63C51.0676 94.547 50.56 95.0707 50.56 95.373C50.56 95.4424 50.832 95.4991 51.1644 95.4991C52.3692 95.4991 52.9128 96.3824 52.3268 97.3884C51.7408 98.3945 51.9344 98.904 52.902 98.904C53.638 98.904 53.9704 100.05 53.8908 102.314C53.8164 104.427 53.584 105.065 52.8892 105.065C51.9632 105.065 51.8204 105.318 52.342 106.034C52.6328 106.432 52.6656 106.62 52.5612 107.284C52.4936 107.713 52.4296 108.43 52.4192 108.875C52.392 110.032 52.1752 110.323 51.28 110.406C50.7716 110.453 50.69 110.688 50.9316 111.409C51.2264 112.29 51.0692 113.375 50.5796 113.837C50.3928 114.013 50.24 114.304 50.24 114.483C50.24 115.105 49.7704 115.772 49.26 115.876C48.886 115.952 48.6956 116.138 48.4352 116.681C48.0612 117.461 48.0816 117.454 46.862 117.228C46.1624 117.099 45.892 116.948 45.4268 116.427C45.112 116.075 44.644 115.736 44.3868 115.674C43.6876 115.504 43.36 115.138 43.36 114.524C43.36 113.872 42.866 113.368 41.8748 113.009C41.3348 112.813 41.1328 112.623 40.864 112.056C40.6788 111.666 40.4088 111.28 40.264 111.198C40.1188 111.115 40 110.884 40 110.683C40 110.227 39.7168 109.929 39.2836 109.929C39.1008 109.929 38.828 109.783 38.6772 109.605C38.5264 109.427 38.2192 109.281 37.9944 109.281C37.5504 109.281 36.8 108.631 36.8 108.247C36.8 108.116 36.6212 107.794 36.4028 107.531C36.1584 107.236 35.966 106.749 35.902 106.261C35.7496 105.103 35.7884 104.846 36.1524 104.599C36.3768 104.447 36.4732 104.217 36.4584 103.87C36.4392 103.429 36.4272 103.415 36.3648 103.768C36.3252 103.991 36.2228 104.246 36.1368 104.336C36.0352 104.441 36.0224 104.385 36.1004 104.173C36.2072 103.884 36.1908 103.873 35.9464 104.075C35.7104 104.269 35.6852 104.267 35.7632 104.061C35.8184 103.916 35.7596 103.822 35.614 103.822C35.482 103.822 35.4092 103.88 35.452 103.95C35.5652 104.136 33.8804 103.918 33.6264 103.715C33.5088 103.62 33.302 103.263 33.1672 102.921C33.032 102.579 32.7928 102.229 32.6352 102.144C32.468 102.054 32.302 101.708 32.2364 101.314C32.078 100.364 31.7584 99.6677 31.3716 99.4297C31.1892 99.3175 31.0396 99.0621 31.0392 98.8623C31.0372 98.0224 30.71 97.3086 30.1828 96.9936C29.5788 96.6325 29.1968 95.5931 29.3092 94.6175C29.37 94.0897 29.3332 94.0293 28.8508 93.868C28.1368 93.6293 27.8332 92.7095 28.2136 91.9369C28.5252 91.3042 28.3556 90.952 27.5544 90.5644C27.0212 90.3071 27.0084 90.2783 27.1112 89.5843C27.17 89.1871 27.136 88.5649 27.0352 88.1847C26.8572 87.5154 26.8656 87.4891 27.408 86.9857C27.7128 86.7027 28.012 86.3128 28.0724 86.119C28.1332 85.9257 28.3924 85.6573 28.6488 85.5232C28.9048 85.389 29.2252 85.0623 29.3604 84.7976C29.7924 83.9509 31.2 84.0185 31.2 84.8864C31.2 86.1211 31.8168 86.7023 32.448 86.0627C32.772 85.7344 32.69 84.9602 32.3316 84.9602C31.576 84.9602 31.308 84.0741 31.7776 83.128C32.138 82.402 33.1272 81.3931 33.4788 81.3931C33.736 81.3931 34.3728 80.869 35.3168 79.8804C35.4724 79.7174 35.8592 79.3161 36.176 78.9886C36.4928 78.6615 36.8 78.1942 36.8584 77.9505C36.9168 77.7065 37.2816 77.1459 37.6684 76.7041C38.3124 75.9696 38.3648 75.8452 38.2856 75.2457C38.1592 74.2899 38.5016 73.8399 39.4372 73.7329C40.412 73.6215 40.4556 73.5444 39.862 72.9826C39.2984 72.4492 39.276 72.2729 39.538 70.4148C39.8232 68.3917 40.2464 67.9584 40.8108 69.1112ZM115.004 73.617C115.204 73.6985 115.433 73.9307 115.514 74.1338C115.65 74.4788 115.66 74.4812 115.67 74.1699C115.683 73.7451 115.387 73.4455 114.968 73.4585C114.661 73.4682 114.663 73.4784 115.004 73.617ZM115.84 75.5278C115.84 75.722 115.921 75.8804 116.02 75.8804C116.137 75.8804 116.123 75.9761 115.98 76.1549C115.859 76.3056 115.84 76.3802 115.939 76.3206C116.037 76.2611 116.246 76.3567 116.404 76.5326C116.561 76.709 116.804 76.848 116.945 76.8419C117.164 76.8322 117.166 76.8152 116.96 76.7203C116.828 76.6595 116.707 76.4641 116.692 76.2858C116.664 75.966 116.667 75.966 116.892 76.2761C117.094 76.5553 117.12 76.5594 117.12 76.3117C117.12 76.1581 116.994 75.9875 116.84 75.9323C116.686 75.8772 116.398 75.6843 116.2 75.5039L115.84 75.1755V75.5278ZM128.366 77.745C128.367 78.1909 128.398 78.3543 128.435 78.1078C128.472 77.861 128.471 77.4962 128.433 77.2971C128.395 77.0977 128.364 77.2991 128.366 77.745ZM45.04 85.2844C45.1992 85.4628 45.3544 85.6087 45.3848 85.6087C45.4152 85.6087 45.44 85.4628 45.44 85.2844C45.44 85.0603 45.3332 84.9602 45.0952 84.9602C44.7604 84.9602 44.7588 84.9699 45.04 85.2844ZM30.44 86.2208C30.1488 86.2686 30.08 86.3849 30.08 86.8308C30.08 87.2864 30.1288 87.3647 30.36 87.2808C31.3316 86.9297 31.3968 86.0639 30.44 86.2208ZM46.88 90.0675C47.6552 91.1862 48 91.3609 48 90.635C48 90.2102 47.9432 90.1486 47.552 90.1486C47.3056 90.1486 47.0032 90.0574 46.8796 89.9459C46.688 89.7728 46.688 89.7902 46.88 90.0675ZM23.85 96.9738C23.838 97.2855 24.3364 97.7731 24.6524 97.7589C24.7776 97.7532 24.7164 97.6819 24.5164 97.6004C24.316 97.5189 24.0868 97.2867 24.0064 97.0836C23.9124 96.8465 23.8568 96.8072 23.85 96.9738ZM50.9848 104.875C50.8392 105.038 50.7244 105.276 50.73 105.402C50.7356 105.529 50.806 105.467 50.8864 105.264C50.9668 105.061 51.196 104.829 51.3964 104.747C51.6304 104.652 51.6692 104.596 51.5048 104.589C51.3644 104.583 51.1304 104.712 50.9848 104.875ZM111.281 107.659C111.121 107.837 111.065 107.984 111.156 107.984C111.357 107.984 111.756 107.52 111.648 107.411C111.606 107.368 111.441 107.479 111.281 107.659ZM40 108.47C40 108.559 40.0576 108.632 40.1276 108.632C40.198 108.632 40.252 108.866 40.2476 109.152C40.2408 109.62 40.2864 109.671 40.72 109.678C40.984 109.683 41.25 109.757 41.3112 109.843C41.3724 109.93 41.4628 109.96 41.512 109.91C41.6992 109.721 41.0828 108.799 40.6076 108.559C40.0212 108.263 40 108.26 40 108.47ZM122.006 111.362C121.898 111.859 121.115 112.265 120.991 111.887C120.959 111.792 120.852 111.713 120.752 111.713C120.649 111.713 120.682 111.825 120.828 111.973C121.246 112.397 122.034 112.135 122.165 111.528C122.223 111.261 122.234 111.005 122.19 110.96C122.146 110.916 122.063 111.096 122.006 111.362ZM34.8 113.821C34.9592 113.999 35.1144 114.145 35.1448 114.145C35.1752 114.145 35.2 113.999 35.2 113.821C35.2 113.597 35.0932 113.496 34.8552 113.496C34.5204 113.496 34.5188 113.506 34.8 113.821ZM46.2 113.663C46.398 113.744 46.5656 113.94 46.5728 114.099C46.5804 114.278 46.6168 114.309 46.6676 114.18C46.7764 113.906 46.4296 113.494 46.1004 113.507C45.924 113.514 45.9564 113.564 46.2 113.663ZM90.24 116.44C90.24 116.779 90.2496 116.781 90.56 116.496C90.736 116.335 90.88 116.177 90.88 116.147C90.88 116.116 90.736 116.091 90.56 116.091C90.3388 116.091 90.24 116.199 90.24 116.44ZM39.04 118.103C39.04 118.356 39.4512 118.741 39.6348 118.66C39.7036 118.629 39.598 118.442 39.4 118.245C39.1684 118.014 39.04 117.963 39.04 118.103ZM40.1296 118.442C40.2104 118.62 40.3168 118.875 40.3656 119.009C40.4428 119.219 40.4564 119.218 40.4672 118.999C40.4744 118.861 40.368 118.605 40.2312 118.432C39.9864 118.122 39.9848 118.123 40.1296 118.442ZM94.9768 121.578C94.2624 122.003 94.0904 122.635 94.7144 122.542C94.9772 122.503 95.2176 122.549 95.2488 122.643C95.28 122.738 95.3156 122.539 95.328 122.201C95.3404 121.864 95.3932 121.518 95.4448 121.433C95.5648 121.237 95.536 121.246 94.9768 121.578ZM54.8456 127.736C54.4376 127.899 54.8192 128.55 55.4876 128.831L56.0156 129.053L55.6804 128.576C55.496 128.313 55.2752 128.055 55.19 128.001C55.1048 127.948 55.0764 127.836 55.1268 127.753C55.2304 127.583 55.2248 127.583 54.8456 127.736ZM6.4812 131.798C6.1072 131.879 5.9848 132.008 5.9204 132.387C5.8384 132.869 5.832 132.872 4.5592 132.953L3.28 133.034L3.2304 133.642C3.182 134.233 3.1632 134.25 2.5504 134.25C1.9216 134.25 1.92 134.252 1.92 134.899C1.92 135.606 1.9312 135.6 0.68 135.55L0 135.523V142.02C0 148.343 0.00840001 148.518 0.3104 148.518C0.5536 148.518 0.6316 148.65 0.6704 149.126C0.7172 149.699 0.754 149.737 1.3108 149.784C1.866 149.831 1.9048 149.87 1.9508 150.433C1.998 151.009 2.0248 151.033 2.6616 151.08C3.248 151.124 3.334 151.182 3.416 151.598C3.5628 152.343 4.1084 152.407 10.2852 152.409C15.4412 152.409 15.8572 152.389 15.9488 152.126C16.1108 151.66 16.6748 151.112 16.9912 151.112C17.27 151.112 17.2844 150.932 17.2432 147.91L17.2 144.708H16H14.8L14.7504 145.316C14.702 145.907 14.6832 145.924 14.0704 145.924C13.4416 145.924 13.44 145.926 13.44 146.572V147.221H10.8896H8.3392L8.2896 146.613C8.2428 146.038 8.2076 146.002 7.64 145.955L7.04 145.904L7.0336 145.022C7.03 144.537 7.0272 143.411 7.0272 142.519C7.0272 139.154 6.9848 139.438 7.488 139.438C8.0564 139.438 8.32 139.171 8.32 138.595C8.32 138.174 8.3656 138.141 8.96 138.141H9.6V137.493C9.6 136.505 10.83 136.466 10.9104 137.452L10.96 138.06L12.2 138.108L13.44 138.155V138.797V139.438H15.36H17.28V136.39C17.28 132.721 17.4228 132.953 15.168 132.953H13.44V132.499C13.44 131.689 13.2972 131.654 10.008 131.675C8.3316 131.685 6.7448 131.741 6.4812 131.798ZM18.56 142.681V152.409H21.76H24.96V148.518V144.627H27.52H30.08V148.518V152.409H33.28H36.48V142.681V132.953H33.28H30.08V136.196V139.438H27.52H24.96V136.196V132.953H21.76H18.56V142.681ZM44.16 133.595V134.25H43.52H42.88V135.547V136.844H42.432C41.6876 136.844 41.6 137.076 41.6 139.048C41.6 140.861 41.5996 140.863 41.1896 140.967C40.612 141.114 40.32 141.93 40.32 143.396V144.607L39.72 144.658L39.12 144.708L39.0732 145.964C39.0268 147.217 39.0248 147.221 38.5852 147.221C37.8188 147.221 37.76 147.42 37.76 150.01V152.409H40.96H44.16V151.774C44.16 151.197 44.2052 151.128 44.6496 151.029C45.1952 150.908 45.4752 150.389 45.4332 149.577C45.3748 148.452 45.2548 148.518 47.342 148.518H49.2444L49.3484 149.08C49.4376 149.562 49.53 149.656 50.006 149.746C50.55 149.849 50.5604 149.867 50.5756 150.685C50.5844 151.143 50.6024 151.7 50.6156 151.923L50.64 152.328L57.64 152.369L64.64 152.411V148.474V144.537L65.28 144.599C65.9068 144.66 65.92 144.674 65.92 145.292C65.92 145.921 65.9228 145.924 66.56 145.924H67.2L67.2156 146.775C67.2464 148.424 67.2492 148.435 67.68 148.462C67.9 148.475 68.17 148.493 68.28 148.502C68.4176 148.513 68.48 148.843 68.48 149.56C68.48 150.709 68.7092 151.112 69.3616 151.112C69.684 151.112 69.748 151.203 69.7904 151.72L69.84 152.328L73 152.372L76.16 152.416V142.684V132.953H73.6H71.04V136.241V139.528L70.4 139.466C69.7732 139.406 69.76 139.391 69.76 138.773C69.76 138.144 69.7572 138.141 69.12 138.141H68.48L68.4652 137.371C68.4308 135.561 68.4552 135.629 67.84 135.62L67.28 135.612L67.1868 134.521C67.0532 132.957 67.3124 133.041 62.4724 132.986L58.24 132.938V141.417V149.896L57.72 149.868C57.434 149.853 57.146 149.835 57.08 149.828C57.014 149.821 56.96 149.027 56.96 148.064C56.96 146.16 56.8684 145.924 56.128 145.924H55.68V144.475C55.68 142.694 55.5356 142.26 54.896 142.117C54.4152 142.01 54.4128 142.004 54.3664 140.765L54.32 139.519L53.72 139.469L53.12 139.419V137.678C53.12 135.784 53.0276 135.547 52.288 135.547C51.8472 135.547 51.8396 135.531 51.8216 134.534C51.8112 133.976 51.7932 133.411 51.7816 133.277C51.7632 133.07 51.1988 133.027 47.96 132.987L44.16 132.939V133.595ZM83.84 133.592C83.84 134.213 83.8232 134.232 83.24 134.281L82.64 134.331L82.5952 136.227L82.55 138.122L81.9552 138.173L81.36 138.222L81.3136 139.554C81.268 140.867 81.2584 140.894 80.6336 141.515C80.0048 142.14 80 142.153 80 143.386V144.627H79.552C78.8124 144.627 78.72 144.864 78.72 146.757V148.499L78.12 148.549L77.52 148.599L77.4748 150.504L77.43 152.409H80.6348H83.84V151.761C83.84 151.159 83.872 151.112 84.288 151.112C84.968 151.112 85.12 150.84 85.12 149.621V148.518H87.68H90.24L90.2556 149.694C90.264 150.34 90.2596 151.13 90.2452 151.449C90.2012 152.442 89.97 152.415 98.0976 152.37L105.52 152.328L105.494 149.734C105.48 148.307 105.504 147.359 105.548 147.626C105.658 148.293 105.878 148.518 106.42 148.518C106.745 148.518 106.885 148.601 106.897 148.802C106.906 148.958 106.924 149.232 106.937 149.41C106.951 149.609 107.083 149.743 107.28 149.757C107.456 149.77 107.726 149.788 107.88 149.798C108.097 149.811 108.16 149.961 108.16 150.464V151.112H108.8H109.44V151.761V152.409H113.299H117.158L117.092 150.878C117.022 149.258 116.772 148.68 116.138 148.68C115.95 148.68 115.812 148.522 115.75 148.234C115.58 147.452 115.547 147.407 115.09 147.354C114.697 147.309 114.63 147.22 114.56 146.654C114.484 146.038 114.449 146.003 113.88 145.955C113.392 145.914 113.276 145.838 113.262 145.549C113.214 144.635 113.272 144.693 112.36 144.645C112.05 144.629 112 144.537 112 143.978V143.33H111.36H110.72V142.033V140.736H111.36H112V140.087C112 139.528 112.05 139.436 112.36 139.42C113.272 139.372 113.214 139.43 113.262 138.516C113.276 138.227 113.392 138.151 113.88 138.111C114.448 138.063 114.483 138.027 114.53 137.452C114.576 136.885 114.614 136.844 115.098 136.844C115.383 136.844 115.694 136.765 115.79 136.668C115.915 136.541 115.994 136.541 116.071 136.668C116.13 136.765 116.391 136.844 116.65 136.844C117.094 136.844 117.121 136.883 117.139 137.533C117.175 138.833 117.316 139.184 117.841 139.276C118.261 139.349 118.33 139.439 118.4 140.007C118.476 140.621 118.511 140.657 119.08 140.705L119.68 140.755V141.788C119.68 142.93 119.911 143.33 120.572 143.33C120.912 143.33 120.96 143.403 120.96 143.922C120.96 144.4 121.084 144.639 121.6 145.151L122.24 145.787V149.098V152.409H125.44H128.64V148.528V144.646L129.24 144.596L129.84 144.546L129.887 143.289L129.934 142.033H130.567C131.199 142.033 131.2 142.031 131.2 141.384C131.2 140.806 131.242 140.736 131.588 140.736C132.251 140.736 132.48 140.337 132.48 139.183V138.141H133.12H133.76V137.197C133.76 136.197 134.158 135.547 134.77 135.547C135.001 135.547 135.04 135.358 135.04 134.247V132.947L131.24 132.991L127.44 133.034L127.393 134.291L127.346 135.547H126.713H126.08V136.844V138.141H125.447H124.814L124.767 136.885L124.72 135.628L124.12 135.578C123.522 135.528 123.52 135.526 123.505 134.767C123.497 134.349 123.479 133.788 123.465 133.52L123.44 133.034H116.048C111.333 133.034 108.598 133.093 108.496 133.196C108.34 133.355 108.194 134.212 108.172 135.101C108.161 135.511 108.109 135.547 107.52 135.547C106.882 135.547 106.88 135.549 106.88 136.186C106.88 136.807 106.863 136.826 106.28 136.875C105.716 136.922 105.674 136.964 105.573 137.574C105.514 137.931 105.478 137.055 105.493 135.628L105.52 133.034H101.76H98L97.9756 133.439C97.9624 133.662 97.9444 137.234 97.9356 141.376C97.9236 147.234 97.8772 148.864 97.728 148.713C97.6224 148.606 97.3376 148.518 97.0948 148.518C96.6552 148.518 96.6532 148.514 96.6068 147.262L96.56 146.005L95.96 145.955L95.36 145.904V144.223C95.36 142.391 95.214 142.033 94.4684 142.033C94.0812 142.033 94.08 142.027 94.08 140.282C94.08 138.381 93.9876 138.141 93.2548 138.141C92.8152 138.141 92.8132 138.137 92.7668 136.885L92.72 135.628L92.12 135.578L91.52 135.528V134.24V132.953H87.68H83.84V133.592ZM140.16 133.592C140.16 134.213 140.143 134.232 139.56 134.281L138.96 134.331L138.915 136.227L138.87 138.122L138.275 138.173L137.68 138.222L137.634 139.554C137.588 140.867 137.578 140.894 136.954 141.515C136.326 142.139 136.32 142.155 136.32 143.376V144.607L135.72 144.658L135.12 144.708L135.075 146.604L135.03 148.499L134.435 148.549L133.84 148.599L133.795 150.504L133.75 152.409H136.955H140.16V151.761C140.16 151.159 140.192 151.112 140.608 151.112C141.288 151.112 141.44 150.84 141.44 149.621V148.518H144H146.56L146.576 149.694C146.585 150.34 146.579 151.11 146.563 151.404C146.509 152.402 146.539 152.409 150.58 152.409H154.24V150.658C154.24 148.758 154.148 148.518 153.415 148.518C152.975 148.518 152.973 148.514 152.927 147.262L152.88 146.005L152.28 145.955L151.68 145.904V144.223C151.68 142.391 151.534 142.033 150.788 142.033C150.384 142.033 150.298 141.427 150.395 139.258C150.426 138.579 150.081 138.141 149.515 138.141C149.15 138.141 149.132 138.088 149.087 136.885L149.04 135.628L148.44 135.578L147.84 135.528V134.24V132.953H144H140.16V133.592ZM41.5364 141.305C41.4764 141.718 40.64 142.281 40.64 141.907C40.64 141.764 41.3164 141.06 41.4536 141.06C41.5188 141.06 41.5556 141.17 41.5364 141.305ZM48 142.681V143.33H47.36H46.72V142.681V142.033H47.36H48V142.681ZM144 142.681C144 143.183 143.939 143.33 143.728 143.33C143.516 143.33 143.499 143.286 143.648 143.135C143.754 143.028 143.84 142.759 143.84 142.537V142.134L143.391 142.57C142.842 143.103 142.528 143.152 143.014 142.628C143.206 142.421 143.314 142.202 143.255 142.142C143.195 142.082 143.339 142.033 143.573 142.033C143.964 142.033 144 142.087 144 142.681ZM87.68 142.924C87.68 143.147 87.618 143.33 87.542 143.33C87.4664 143.33 87.4388 143.147 87.4808 142.924C87.5228 142.701 87.5848 142.519 87.6188 142.519C87.6524 142.519 87.68 142.701 87.68 142.924ZM4.5908 156.405C4.53 156.467 4.48 157.344 4.48 158.355C4.48 160.192 4.48 160.192 4.0916 160.192C3.548 160.192 3.1744 160.629 3.206 161.228C3.2204 161.505 3.2252 162.257 3.2164 162.898L3.2 164.064L2.6 164.114L2 164.164L1.9556 166.493C1.9032 169.236 1.9188 169.272 3.1876 169.272C4.2008 169.272 4.48 169.092 4.48 168.438C4.48 168.042 4.5448 167.989 5.08 167.944L5.68 167.894L5.7268 166.637L5.7736 165.38H7.04H8.3064L8.3532 166.637L8.4 167.894L9.0324 167.975C9.6316 168.051 9.6652 168.086 9.6724 168.623L9.68 169.191L12.8 169.185L15.92 169.179L15.932 168.374C15.9388 167.931 15.9568 166.473 15.972 165.133L16 162.697L16.64 162.758L17.28 162.82V165.851C17.28 167.993 17.3364 168.94 17.472 169.077C17.7456 169.354 19.434 169.329 19.6672 169.044C19.8864 168.777 19.848 159.335 19.6268 159.111C19.5536 159.037 17.8436 158.953 15.8268 158.925L12.16 158.873V161.025C12.16 162.697 12.1172 163.132 11.968 162.981C11.8624 162.874 11.5776 162.786 11.3348 162.786C10.8952 162.786 10.8932 162.782 10.8468 161.53L10.8 160.273L10.2048 160.223L9.61 160.173L9.5648 158.278L9.52 156.382L7.1108 156.337C5.7856 156.312 4.6516 156.343 4.5908 156.405ZM24.96 157.598V158.895H25.6H26.24V162.128V165.361L25.64 165.411L25.04 165.462V166.678V167.894L25.6724 167.975C26.2716 168.051 26.3052 168.086 26.3124 168.623L26.32 169.191H28.8H31.28L31.3228 167.985C31.3756 166.501 31.348 166.525 32.104 167.307C32.584 167.803 32.8712 167.963 33.356 168.003C33.9568 168.053 33.9856 168.081 33.9928 168.623L34 169.191H36.48H38.96L38.9676 168.623C38.9748 168.073 38.996 168.054 39.6524 168.005L40.33 167.956L40.2848 166.06L40.24 164.164H39.04H37.84L37.7904 164.772L37.7408 165.38H36.4704H35.2V164.788C35.2 164.31 35.0756 164.071 34.56 163.559C33.6788 162.684 33.618 161.624 34.4352 161.386C34.8232 161.273 34.9872 161.107 35.0984 160.714C35.2172 160.295 35.33 160.192 35.6712 160.192C36.2176 160.192 36.48 159.918 36.48 159.349C36.48 158.927 36.5256 158.895 37.12 158.895C37.7716 158.895 37.8828 159.079 37.7756 159.974C37.76 160.102 38.1608 160.161 39.04 160.161C39.9192 160.161 40.32 160.102 40.3044 159.974C40.292 159.871 40.2908 159.586 40.3012 159.341L40.32 158.895H41.6H42.88L42.8936 163.475C42.9012 165.995 42.9192 168.311 42.9336 168.623L42.96 169.191H44.16H45.36L45.3864 168.623C45.4008 168.311 45.4188 165.995 45.4264 163.475L45.44 158.895H47.36H49.28V157.598V156.301H44.1504C40.7716 156.301 39.0548 156.356 39.12 156.463C39.1744 156.552 39.1468 156.625 39.0588 156.625C38.9708 156.625 38.8544 156.552 38.8 156.463C38.6776 156.263 34.1348 156.242 34.0132 156.441C33.966 156.518 33.7596 156.549 33.554 156.509C33.1052 156.422 32.7288 156.818 32.8424 157.258C32.912 157.529 32.8204 157.576 32.1412 157.624L31.36 157.679V156.99V156.301H28.16H24.96V157.598ZM53.1928 156.504C53.1504 156.617 53.1348 159.225 53.158 162.301L53.2 167.894L53.8324 167.975C54.4316 168.051 54.4652 168.086 54.4724 168.623L54.48 169.191H57.6H60.72L60.7276 168.623C60.7348 168.075 60.7576 168.054 61.3988 168.006C62.054 167.958 62.0632 167.948 62.116 167.277L62.17 166.596L62.362 167.045C62.4676 167.292 62.7356 167.564 62.9572 167.649C63.2788 167.773 63.36 167.916 63.36 168.356C63.36 169.25 63.448 169.269 67.3728 169.228L70.96 169.191L70.9684 168.623C70.9764 168.062 70.984 168.056 71.68 168.056C72.376 168.056 72.3836 168.062 72.3916 168.623L72.4 169.191L74.44 169.228C75.562 169.248 76.48 169.206 76.48 169.134C76.48 169.062 76.642 169.009 76.84 169.016C77.114 169.025 77.1968 168.941 77.1872 168.664C77.1804 168.463 77.2344 168.299 77.3072 168.299C77.3804 168.299 77.44 168.188 77.44 168.052C77.44 167.916 77.6212 167.735 77.8428 167.649C78.0644 167.564 78.3324 167.292 78.438 167.045C78.63 166.596 78.63 166.596 78.6844 167.286L78.7384 167.975H79.4092C80.0776 167.974 80.08 167.977 80.08 168.583V169.191H82.56H85.04L85.0496 168.668C85.062 167.982 85.0504 167.989 86.248 167.963C87.7004 167.932 87.68 167.925 87.68 168.441C87.68 169.24 87.8264 169.268 91.6924 169.222L95.28 169.179V167.969V166.759H94.68H94.0796L94.08 161.53V156.301H92.8H91.52V157.598V158.895H89.6H87.68V159.544C87.68 160.231 87.6844 160.228 86.56 160.228C85.1336 160.228 85.1424 160.232 85.0896 159.584L85.04 158.976L82.52 158.931L80 158.887V159.523C80 160.155 79.9948 160.16 79.32 160.216C77.7304 160.349 77.44 160.244 77.44 159.534V158.895H74.88H72.32V159.527C72.32 160.154 72.314 160.16 71.64 160.216C70.208 160.336 69.76 160.22 69.76 159.728C69.76 158.933 69.6036 158.895 66.368 158.895H63.36L63.3416 160.557C63.3312 161.471 63.2904 162.094 63.2508 161.94C63.208 161.776 62.9536 161.619 62.6292 161.558L62.08 161.453V159.601C62.08 157.393 61.8828 156.757 61.1132 156.485C60.346 156.214 53.2964 156.231 53.1928 156.504ZM101.394 156.593C100.841 156.935 100.48 157.626 100.48 158.346C100.48 158.839 100.434 158.895 100.032 158.895C99.3788 158.895 99.2 159.174 99.2 160.192C99.2 161.21 99.3788 161.489 100.032 161.489C100.434 161.489 100.48 161.546 100.48 162.032C100.48 163.212 101.398 164.117 102.537 164.059C102.77 164.047 103.554 164.048 104.28 164.061L105.6 164.083V164.732V165.38H103.68H101.76V164.926C101.76 164.263 101.485 164.083 100.468 164.083C99.2372 164.083 99.1776 164.186 99.2336 166.215L99.28 167.894L100.47 167.937C101.838 167.987 101.818 167.976 101.83 168.668L101.84 169.191H104.32H106.8L106.808 168.623C106.815 168.074 106.836 168.054 107.488 168.006C108.005 167.967 108.16 167.89 108.16 167.669C108.16 166.759 109.398 166.397 109.47 167.286C109.516 167.847 109.562 167.898 110.063 167.946C110.685 168.006 110.96 168.239 110.96 168.704C110.96 168.936 111.062 169.025 111.32 169.016C111.518 169.009 111.68 169.062 111.68 169.134C111.68 169.206 112.598 169.248 113.72 169.228L115.76 169.191L115.768 168.623C115.776 168.081 115.806 168.052 116.448 167.964C116.943 167.896 117.12 167.928 117.12 168.085C117.12 168.203 117.18 168.299 117.253 168.299C117.326 168.299 117.38 168.463 117.373 168.664C117.363 168.941 117.446 169.025 117.72 169.016C117.918 169.009 118.08 169.062 118.08 169.135C118.08 169.207 118.71 169.249 119.48 169.228L120.88 169.191L120.905 168.704C120.919 168.437 120.937 168.143 120.945 168.051C120.985 167.606 122.24 168 122.24 168.458C122.24 168.705 122.333 168.986 122.446 169.081C122.74 169.328 126.399 169.304 126.402 169.055C126.404 168.916 126.436 168.915 126.522 169.05C126.591 169.156 127.04 169.224 127.6 169.212L128.56 169.191L128.586 168.623C128.601 168.311 128.619 166.578 128.626 164.772L128.64 161.489H129.28H129.92L129.939 164.529C129.949 166.201 129.949 167.649 129.938 167.746C129.927 167.843 130.18 167.932 130.502 167.944C131.216 167.971 131.258 168.012 131.27 168.668L131.28 169.191L134.6 169.22C136.426 169.236 137.92 169.194 137.92 169.126C137.92 169.058 138.082 169.009 138.28 169.016C138.538 169.025 138.64 168.936 138.64 168.704C138.64 168.19 138.98 167.95 139.631 168.005C140.192 168.053 140.226 168.087 140.233 168.623L140.24 169.191L142.28 169.228C143.402 169.248 144.32 169.206 144.32 169.134C144.32 169.062 144.482 169.009 144.68 169.016C144.954 169.025 145.037 168.941 145.027 168.664C145.02 168.463 145.074 168.299 145.147 168.299C145.22 168.299 145.28 168.197 145.28 168.072C145.28 167.842 146.393 166.616 146.502 166.727C146.534 166.76 146.579 167.328 146.6 167.989L146.64 169.191L148.48 169.19L150.32 169.19L150.332 168.38C150.339 167.934 150.357 166.406 150.372 164.983C150.394 162.972 150.443 162.44 150.592 162.592C150.698 162.699 150.986 162.786 151.232 162.786H151.68V165.834C151.68 167.989 151.736 168.94 151.872 169.077C152.121 169.33 153.799 169.33 154.048 169.077C154.334 168.788 154.322 159.327 154.035 159.087C153.905 158.977 152.506 158.91 150.195 158.901L146.56 158.888V159.581V160.273L145.96 160.257C145.422 160.242 145.354 160.193 145.306 159.77C145.208 158.921 145.12 158.895 142.38 158.895C140.983 158.895 139.84 158.955 139.84 159.03C139.84 159.103 139.678 159.158 139.48 159.151C139.206 159.141 139.123 159.225 139.133 159.503C139.15 159.995 138.911 159.967 138.786 159.462C138.73 159.239 138.569 159.057 138.427 159.057C138.231 159.057 138.254 158.996 138.524 158.805C138.936 158.512 139.052 156.808 138.68 156.497C138.57 156.405 137.706 156.323 136.76 156.313L135.04 156.297V157.596V158.895H133.76H132.48L132.461 158.368C132.451 158.078 132.451 157.786 132.461 157.719C132.472 157.653 132.415 157.598 132.335 157.598C132.255 157.598 132.228 157.452 132.274 157.273C132.41 156.747 132.066 156.5 131.2 156.5C130.334 156.5 129.99 156.747 130.126 157.273C130.172 157.452 130.145 157.598 130.065 157.598C129.985 157.598 129.928 157.653 129.939 157.719C129.949 157.786 129.949 158.078 129.939 158.368L129.92 158.895H128H126.08V162.138V165.38H125.44H124.8V162.393C124.8 158.703 124.918 158.895 122.635 158.895H120.974L120.927 157.638L120.88 156.382L119 156.336L117.12 156.291V158.241V160.192H116.48H115.84V159.538V158.884L113.276 158.903C111.431 158.918 110.719 158.976 110.735 159.112C110.843 160.008 110.732 160.192 110.08 160.192H109.44V160.841V161.489H108.16H106.88V161.035C106.88 160.785 106.794 160.494 106.688 160.387C106.539 160.235 106.708 160.189 107.448 160.177C107.972 160.169 108.616 160.151 108.88 160.137L109.36 160.111L109.389 158.932C109.419 157.755 109.418 157.752 108.749 157.038L108.08 156.323L104.96 156.321C102.307 156.319 101.773 156.36 101.394 156.593ZM33.4676 157.092C33.2996 157.268 33.1588 157.311 33.0892 157.207C32.9364 156.979 33.2544 156.625 33.5192 156.728C33.6916 156.795 33.6812 156.869 33.4676 157.092ZM131.496 156.801C131.909 156.576 132.204 156.888 131.98 157.312C131.822 157.61 131.8 157.611 131.507 157.343C131.216 157.075 131.184 157.075 130.893 157.343C130.6 157.611 130.578 157.61 130.42 157.312C130.196 156.888 130.491 156.576 130.904 156.801C131.099 156.906 131.301 156.906 131.496 156.801ZM130.496 156.924C130.332 157.193 130.66 157.461 130.858 157.219C131.008 157.037 130.997 156.968 130.809 156.894C130.678 156.843 130.537 156.856 130.496 156.924ZM131.545 156.934C131.388 157.032 131.395 157.101 131.574 157.252C131.754 157.403 131.822 157.392 131.894 157.202C132.006 156.907 131.818 156.763 131.545 156.934ZM31.36 159.526C31.36 160.145 31.3468 160.159 30.72 160.22L30.08 160.282V159.588V158.895H30.72C31.3572 158.895 31.36 158.898 31.36 159.526ZM58.24 159.544V160.192H57.6H56.96V159.544V158.895H57.6H58.24V159.544ZM104.641 159.303C104.725 159.528 104.994 159.791 105.237 159.888C105.775 160.104 105.378 160.336 104.656 160.229C104.27 160.171 104.239 160.113 104.294 159.531C104.364 158.789 104.431 158.744 104.641 159.303ZM135.04 163.435V165.38H133.76H132.48V163.435V161.489H133.76H135.04V163.435ZM91.0052 162.66L91.52 162.796V164.088V165.38H90.88C90.2856 165.38 90.24 165.348 90.24 164.926C90.24 164.345 89.98 164.088 89.368 164.065C89.0304 164.051 88.9788 164.021 89.2 163.967C89.778 163.824 90.0728 163.404 90.1868 162.561C90.274 161.915 90.3196 161.82 90.3944 162.129C90.4608 162.403 90.6492 162.567 91.0052 162.66ZM30.1904 162.908C30.15 163.064 30.1172 162.936 30.1172 162.624C30.1172 162.312 30.15 162.184 30.1904 162.34C30.2304 162.496 30.2304 162.752 30.1904 162.908ZM142.72 163.921V165.38H142.08H141.44V164.083V162.786H141.91C142.169 162.786 142.426 162.713 142.48 162.624C142.682 162.293 142.72 162.497 142.72 163.921ZM114.56 163.435C114.56 164.044 114.532 164.083 114.089 164.083C113.784 164.083 113.53 164.21 113.369 164.444C113.171 164.731 113.12 164.749 113.12 164.532C113.12 164.35 112.936 164.225 112.56 164.154C112.034 164.054 112 164.009 112 163.417V162.786H113.28H114.56V163.435ZM59.52 164.732V165.38H58.24H56.96V164.732V164.083H58.24H59.52V164.732Z\" fill=\"url(#paint1_linear)\" />\r\n        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M62.9528 15.0666C63.002 15.1473 62.9516 15.2551 62.8408 15.3066C62.7304 15.3581 62.792 15.3625 62.9776 15.3167C63.4668 15.1959 63.7676 15.6155 63.434 15.9535C63.0752 16.3171 62.9308 16.2802 63.262 15.9093C63.6172 15.5121 63.184 15.2803 62.8048 15.6649C62.5852 15.8871 62.56 15.8858 62.56 15.6515C62.56 15.4363 62.5208 15.427 62.336 15.5993C62.1796 15.7456 62.1612 15.8692 62.2756 16.0111C62.3656 16.1226 62.4124 16.2202 62.3796 16.2288C62.3468 16.2369 62.068 16.2762 61.76 16.3159C60.8876 16.429 60.83 16.4784 60.8472 17.0917C60.8732 18.0184 62.5968 18.1882 63.0604 17.3098C63.2208 17.0062 63.2464 17.0163 63.5352 17.4971C64.1388 18.5031 65.2896 18.4277 65.8416 17.3459C66.0648 16.9085 66.1636 16.8623 66.8764 16.8623C68.6236 16.8623 69.8048 16.3848 69.6804 15.729C69.6468 15.5535 69.6872 15.3674 69.77 15.3159C70.3096 14.9779 69.6956 14.9004 66.84 14.9475C64.2816 14.9892 63.7684 15.0366 63.8092 15.228C63.8448 15.395 63.8008 15.4128 63.6492 15.2936C63.3484 15.0569 62.8472 14.894 62.9528 15.0666ZM72.72 15.0322C73.108 15.127 73.43 15.4031 73.152 15.4031C73.0464 15.4031 72.96 15.517 72.96 15.656C72.96 15.795 73.0312 15.8639 73.118 15.8096C73.2088 15.7529 73.2356 15.8177 73.1816 15.9608C73.0484 16.3123 73.5308 16.4598 74.042 16.2239C74.3804 16.0678 74.4176 16.0001 74.2316 15.881C74.0316 15.7525 74.0328 15.7318 74.24 15.7273C74.4532 15.7229 74.4532 15.7051 74.24 15.5652C74.0268 15.4254 74.0268 15.4067 74.24 15.3946C74.372 15.3873 74.156 15.2778 73.76 15.1514C73.364 15.0249 72.896 14.9288 72.72 14.9377L72.4 14.9544L72.72 15.0322ZM80.8 15.0804C80.8 15.1688 80.53 15.2421 80.2 15.2434C79.8008 15.245 79.6728 15.2928 79.818 15.386C80.0024 15.504 80.0024 15.5397 79.818 15.6138C79.68 15.6694 79.7172 15.7075 79.92 15.7172C80.1808 15.7294 80.1964 15.7602 80.0048 15.883C79.6728 16.0958 79.8336 16.1967 80.6928 16.3163L81.44 16.4201V15.9247C81.44 15.6524 81.4776 15.3301 81.5236 15.2089C81.5788 15.0626 81.4708 14.9766 81.2036 14.9539C80.9816 14.9357 80.8 14.9925 80.8 15.0804ZM84.288 15.1112C84.3936 15.2182 84.48 15.5137 84.48 15.7679C84.48 16.4022 85.3068 16.7695 86.8 16.7991C88.6328 16.8352 88.6156 16.8307 88.8784 17.3459C89.3696 18.3078 90.5008 18.5437 91.204 17.8311C91.544 17.4865 91.6408 16.3341 91.3668 15.8948C91.272 15.7427 91.2824 15.579 91.3964 15.44C91.5316 15.2746 91.52 15.2344 91.3472 15.2721C91.222 15.2997 91.1396 15.2255 91.164 15.1072C91.188 14.9892 91.1308 14.941 91.036 15.0002C90.9156 15.0756 90.9204 15.1761 91.052 15.3366C91.1772 15.4894 91.1824 15.5652 91.0676 15.5652C90.9732 15.5652 90.8212 15.4375 90.73 15.2815C90.5888 15.0403 90.572 15.0581 90.618 15.4031C90.6476 15.626 90.7548 15.8177 90.856 15.8287C91.2608 15.8733 91.2648 15.9093 90.888 16.1209C90.4384 16.3735 90.0216 16.2774 90.1456 15.9495C90.192 15.8275 90.1604 15.7273 90.0748 15.7273C89.9896 15.7273 89.92 15.6499 89.92 15.5555C89.92 15.461 90.01 15.4371 90.12 15.5024C90.23 15.5676 90.1828 15.4627 90.0152 15.2689C89.724 14.9325 89.5844 14.9167 86.9032 14.9167C84.72 14.9167 84.1388 14.96 84.288 15.1112ZM92.1464 16.4176C91.2076 17.1635 92.1844 18.1963 93.4192 17.763C93.9876 17.5636 94.234 16.7877 93.84 16.4371C93.5852 16.2105 92.4244 16.1971 92.1464 16.4176ZM60.4832 17.2636C60.3404 17.4379 59.9796 17.5109 59.2604 17.5109C58.552 17.5109 58.2392 17.5729 58.2376 17.7135C58.2356 17.8647 58.2008 17.8611 58.0996 17.6993C57.8244 17.2595 57.2084 17.5453 57.186 18.1229C57.1596 18.8031 57.2004 18.7772 56.078 18.8327C55.5512 18.8586 55.0604 18.9551 54.988 19.0467C54.9 19.1574 54.8284 19.1452 54.774 19.0098C54.7292 18.8975 54.6192 18.8521 54.5292 18.9085C54.426 18.9729 54.4456 19.0629 54.5828 19.1525C54.758 19.2668 54.7604 19.3203 54.5944 19.4289C54.4816 19.5031 54.4352 19.6851 54.4916 19.8343C54.5816 20.0722 54.4512 20.1051 53.4172 20.1047H52.24V20.7937V21.4832L50.804 21.4577L49.368 21.4326L48.6652 22.1448C48.2788 22.5363 47.8956 22.8152 47.814 22.7641C47.7328 22.713 47.5472 22.769 47.4024 22.8882C47.2188 23.0385 47.1748 23.0434 47.2576 22.904C47.3352 22.7726 47.2996 22.7329 47.1548 22.7893C47.0332 22.8367 46.9332 22.9785 46.9332 23.1046C46.9332 23.2303 46.9924 23.2967 47.0644 23.2513C47.1368 23.2063 47.1344 23.3373 47.0592 23.5424C46.9256 23.9064 45.76 24.1366 45.76 23.799C45.76 23.7292 45.63 23.7998 45.4712 23.9558C45.3092 24.1147 45.2488 24.2854 45.3332 24.3437C45.416 24.4013 45.448 24.638 45.4044 24.8699C45.3144 25.3466 45.4488 25.4917 46.2244 25.7564C46.7456 25.9343 46.7936 25.9157 47.3444 25.3206C47.6608 24.9785 48.1464 24.5659 48.4236 24.4037C48.8084 24.178 48.9504 23.9599 49.0264 23.4779C49.1232 22.8651 49.136 22.8545 49.4788 23.0977C50.0572 23.5079 50.7976 23.4115 51.4376 22.8415C51.7504 22.5635 52.4912 22.1371 53.0832 21.8947C54.1152 21.4719 54.1636 21.4269 54.2508 20.8197C54.32 20.3389 54.3724 20.2546 54.468 20.4699C54.7936 21.2019 56.4024 20.7374 57.0188 19.733C57.4256 19.0698 57.9604 18.9162 58.826 19.2141C59.742 19.5291 60.48 19.1926 60.48 18.4594C60.48 18.217 60.554 17.8209 60.6444 17.5802C60.8392 17.0613 60.7664 16.9182 60.4832 17.2636ZM94.4 18.2312C94.4 19.3345 95.1848 19.7585 96.2172 19.2129C96.804 18.9028 97.522 19.2153 98.0024 19.9903C98.3156 20.495 98.504 20.5781 99.9492 20.8505C100.142 20.887 100.342 21.0548 100.395 21.2234C100.456 21.4168 100.705 21.5708 101.07 21.6405C101.389 21.7009 102.124 21.981 102.705 22.2627C103.366 22.5837 104.113 22.8063 104.705 22.859C105.564 22.9348 105.655 22.9794 105.707 23.3478C105.802 24.0255 105.88 24.1313 106.54 24.4726C106.89 24.6534 107.223 24.9497 107.28 25.1305C107.632 26.2562 109.36 25.9866 109.36 24.8062V24.0774L108.48 23.9891C107.845 23.925 107.68 23.863 107.887 23.7661C108.158 23.6397 108.155 23.6182 107.847 23.3997C107.667 23.2716 107.52 23.062 107.52 22.9331C107.52 22.8047 107.448 22.6993 107.36 22.6993C107.272 22.6993 107.2 22.7722 107.2 22.8614C107.2 22.9506 107.124 23.0235 107.03 23.0235C106.937 23.0235 106.906 22.9506 106.96 22.8614C107.02 22.7625 106.775 22.6993 106.33 22.6993C105.557 22.6993 105.604 22.756 105.535 21.7264C105.522 21.5327 105.258 21.4812 104.24 21.4735C102.524 21.4601 102.589 21.4877 102.616 20.7941L102.64 20.1861L101.626 20.1375C100.68 20.0921 100.572 20.0463 100.011 19.4484C99.4528 18.8538 99.3464 18.808 98.5288 18.808C97.6696 18.808 97.648 18.797 97.6672 18.3621C97.7012 17.5964 97.5232 17.5109 95.9004 17.5109H94.4V18.2312ZM73.6228 19.5258C72.036 19.7877 71.7736 19.9867 71.9264 20.8116L72.0356 21.4022H77.4664H82.8976L82.8488 20.6348L82.8 19.8679L81.92 19.6535C80.6144 19.3353 75.2736 19.253 73.6228 19.5258ZM67.838 21.0151C67.3564 21.159 66.9336 21.1808 66.508 21.084C65.202 20.7869 64.4108 21.105 64.246 21.9936C64.1724 22.3912 64.0344 22.6008 63.8056 22.6612C63.4812 22.7475 63.4804 22.7556 63.7764 22.9777C64.0744 23.2015 64.0744 23.21 63.7764 23.4337C63.3808 23.7309 63.1792 23.591 63.2704 23.0823C63.3316 22.7394 63.252 22.6372 62.7644 22.4305C61.8624 22.0487 61.4068 22.3292 61.4708 23.227L61.52 23.9153L63.28 23.9234C64.4284 23.9283 65.2068 23.8553 65.52 23.7126C65.9308 23.5254 65.942 23.5059 65.5988 23.5764C64.9464 23.7102 64.7356 23.4654 65.1584 23.0645C65.4732 22.7657 65.7428 22.7163 67.2452 22.6794C68.5888 22.6466 68.9528 22.5902 68.8904 22.4248C68.846 22.3085 68.8796 22.2129 68.9652 22.2129C69.0504 22.2129 69.1256 22.3405 69.1328 22.4966C69.1404 22.6749 69.176 22.7029 69.2276 22.5724C69.2732 22.4581 69.2564 22.2392 69.1908 22.086C68.916 21.4443 68.964 21.4022 69.9608 21.4022C71.1716 21.4022 71.0856 21.2943 69.6552 21.0183C68.74 20.8416 68.4196 20.8408 67.838 21.0151ZM84.528 21.0949C83.706 21.3361 83.8004 21.4877 84.7348 21.4277C85.5176 21.3774 85.6024 21.4046 85.624 21.7114C85.6372 21.8979 85.6552 22.1419 85.664 22.2534C85.6936 22.6291 86.0624 22.709 87.7796 22.7126C89.0084 22.7155 89.5832 22.7824 89.8208 22.951C90.052 23.1151 90.0804 23.1865 89.9156 23.1881C89.7112 23.1901 89.7116 23.2112 89.92 23.3478C90.1252 23.482 90.1192 23.5055 89.88 23.5075C89.726 23.5087 89.6 23.437 89.6 23.3478C89.6 23.2586 89.5192 23.1857 89.4204 23.1857C89.2964 23.1857 89.3024 23.2607 89.44 23.4289C89.6088 23.6352 89.5692 23.6745 89.1796 23.6887L88.72 23.7053L89.2 23.8192C89.464 23.8821 90.508 23.9291 91.52 23.9242L93.36 23.9153L93.4076 23.3397C93.478 22.4942 93.0224 22.1135 92.25 22.3717C91.7076 22.5529 91.6344 22.6741 91.6372 23.3883C91.6384 23.7357 91.5148 23.7455 91.1104 23.4289C90.8096 23.193 90.8092 23.1796 91.0964 23.0061C91.3768 22.8363 91.3728 22.8168 91.022 22.6393C90.7896 22.5221 90.5984 22.2262 90.51 21.848C90.3268 21.0629 89.4776 20.7654 88.2916 21.071C87.7516 21.2104 87.4536 21.2153 87.222 21.09C86.8384 20.8817 85.2456 20.8849 84.528 21.0949ZM49.2248 22.4492C49.1728 22.5866 49.0088 22.6993 48.8604 22.6993C48.614 22.6993 48.616 22.6709 48.8808 22.3742C49.1992 22.0175 49.3736 22.0556 49.2248 22.4492ZM65.28 23.1046C65.1668 23.2428 65.1104 23.392 65.1544 23.4366C65.1984 23.4812 65.3268 23.405 65.44 23.2667C65.5532 23.1285 65.6096 22.9794 65.5656 22.9348C65.5216 22.8902 65.3932 22.9664 65.28 23.1046ZM66.6136 22.983C66.7172 23.1561 66.2992 23.5132 66.1512 23.3786C66.084 23.317 66.0832 23.3628 66.1504 23.48C66.2472 23.6502 66.3324 23.6376 66.572 23.4179C66.8332 23.1784 66.8608 22.8614 66.6212 22.8614C66.5772 22.8614 66.574 22.9161 66.6136 22.983ZM108.385 23.2108C108.322 23.3138 108.336 23.3579 108.415 23.3089C108.603 23.193 108.975 23.5991 108.83 23.7621C108.77 23.8302 108.815 23.831 108.93 23.7629C109.098 23.6648 109.085 23.5772 108.866 23.3316C108.542 22.9696 108.533 22.9672 108.385 23.2108ZM57.9784 23.7118C57.7908 23.7973 57.5724 24.0969 57.4932 24.3774L57.3492 24.8881L55.7588 24.9692C54.2808 25.0446 54.1548 25.0774 53.9784 25.437C53.7072 25.9903 53.468 26.0989 52.5148 26.1017C51.7216 26.1042 51.6492 26.139 51.344 26.6627C51.1356 27.0206 50.816 27.289 50.454 27.4098C50.0576 27.5423 49.8252 27.7539 49.6752 28.1179C49.4584 28.6436 48.8856 29.0226 48.3072 29.0226C48.1268 29.0226 47.934 29.1759 47.8604 29.3773C47.7708 29.6221 47.5124 29.7851 47.0252 29.9043C46.46 30.0425 46.2656 30.1868 46.0456 30.6331C45.8948 30.9395 45.5776 31.3469 45.34 31.5386C45.0308 31.7883 44.934 31.9849 44.998 32.2326C45.1004 32.6294 44.902 32.841 44.2804 32.9995C44.0324 33.0623 43.8872 33.1847 43.946 33.2812C44.012 33.389 43.9236 33.4178 43.7052 33.3598C43.5152 33.3096 43.36 33.3391 43.36 33.4251C43.36 33.511 43.2772 33.5297 43.1756 33.466C43.0744 33.4028 42.8984 33.4798 42.7848 33.6375C42.6708 33.7952 42.3444 33.9723 42.0596 34.0315C41.716 34.1028 41.4536 34.2986 41.282 34.6127C41.1224 34.9046 40.828 35.1377 40.5168 35.2195C40.1112 35.3261 39.974 35.4773 39.8252 35.9812C39.7148 36.3545 39.494 36.6767 39.2824 36.7748C39.0724 36.8717 38.8852 37.1429 38.828 37.4339C38.7512 37.8222 38.618 37.9576 38.2052 38.0663L37.68 38.2041L37.6764 39.3285C37.6744 39.9471 37.6224 40.534 37.5612 40.6325C37.4884 40.7496 37.6144 40.8056 37.9244 40.7946C38.2636 40.7825 38.3992 40.6965 38.3996 40.4939C38.4 40.3252 38.5208 40.2101 38.698 40.2101C38.9292 40.2101 38.9784 40.1197 38.9192 39.8048C38.8512 39.4452 38.8972 39.3994 39.3216 39.3994C39.8656 39.3994 40.1048 39.1749 40.1848 38.5888C40.2152 38.3658 40.312 38.1822 40.4 38.181C40.6624 38.1769 40.96 37.9349 40.9576 37.7278C40.956 37.6119 40.8932 37.6317 40.8 37.7781C40.7148 37.9118 40.6436 37.939 40.6424 37.8385C40.6392 37.5981 41.0988 37.2159 41.2304 37.3496C41.2872 37.4068 41.2372 37.4538 41.12 37.4538C41.0028 37.4538 40.9528 37.5008 41.0096 37.558C41.178 37.729 41.5884 37.2872 41.4932 37.0367C41.4452 36.9094 41.4856 36.8052 41.5828 36.8052C41.6804 36.8052 41.742 36.7505 41.72 36.6836C41.682 36.5677 42.3928 35.7667 42.56 35.7372C42.604 35.7295 42.766 35.667 42.92 35.5985C43.074 35.5296 43.29 35.5053 43.4 35.5438C43.7124 35.6541 44.08 35.1527 44.08 34.6164C44.08 34.3489 44.152 34.1288 44.24 34.1275C44.328 34.1263 44.484 34.0708 44.5864 34.0047C44.6888 33.9386 44.7968 33.9508 44.8264 34.0319C44.856 34.1129 44.9728 34.0769 45.0864 33.952C45.2324 33.7911 45.2384 33.7246 45.1068 33.7246C44.9664 33.7246 44.9664 33.6687 45.108 33.496C45.2364 33.3395 45.2424 33.2338 45.1276 33.162C45.0356 33.104 44.96 32.9877 44.96 32.903C44.96 32.8175 45.0904 32.8317 45.2536 32.935C45.7348 33.2394 46.4476 32.9046 46.6208 32.2934C46.7324 31.899 46.856 31.779 47.1512 31.779C47.6796 31.779 48.3848 31.385 48.7892 30.8645C49 30.5925 49.344 30.3939 49.7064 30.3343C50.0256 30.2816 50.274 30.1811 50.2584 30.111C50.2168 29.9249 51.1516 29.1633 51.48 29.1155C51.6772 29.0867 51.7748 28.899 51.8096 28.4811L51.8592 27.8877H52.964C54.1496 27.8877 54.4212 27.7032 54.304 26.9773C54.2516 26.6526 54.3304 26.6299 55.7708 26.5537C57.3288 26.471 58.08 26.1313 58.08 25.5083C58.08 25.3713 58.2804 25.2935 58.6328 25.2935C59.1356 25.2935 59.1948 25.2432 59.2888 24.7365C59.4444 23.895 58.7576 23.3575 57.9784 23.7118ZM95.84 23.724C95.608 23.8452 95.4596 24.0478 95.4864 24.2063C95.5124 24.3563 95.4512 24.6348 95.3508 24.8249C95.24 25.034 95.2332 25.1297 95.3328 25.0673C95.4236 25.0105 95.5432 25.0381 95.5984 25.1285C95.6536 25.2193 95.9468 25.2935 96.2496 25.2935C96.5524 25.2935 96.8 25.3664 96.8 25.4556C96.8 25.5448 96.8764 25.6177 96.9696 25.6177C97.0628 25.6177 97.0944 25.5448 97.04 25.4556C96.9856 25.3664 97.0116 25.2935 97.0976 25.2935C97.4972 25.2935 97.7592 25.529 97.9248 26.0373C98.0928 26.5533 98.1516 26.5906 98.7952 26.5906C99.2632 26.5906 99.5156 26.6692 99.5784 26.8354C99.6292 26.97 99.7632 27.0612 99.8756 27.0381C99.988 27.015 100.062 27.0855 100.041 27.1949C99.986 27.4771 100.778 27.8496 101.44 27.8532C103.072 27.8613 103.04 27.8512 103.04 28.3717C103.04 29.0474 104.374 30.3818 104.913 30.2447C105.115 30.1933 105.28 30.2103 105.28 30.282C105.28 30.3542 105.514 30.4308 105.8 30.4527C106.372 30.4965 106.876 30.9083 106.946 31.3886C106.991 31.6987 107.038 31.721 107.737 31.7587C108.015 31.7737 108.152 31.9131 108.259 32.2921C108.368 32.6764 108.544 32.8535 108.962 32.9966C109.363 33.1336 109.521 33.2848 109.525 33.5337C109.53 33.9804 109.834 34.2816 110.283 34.2872C110.545 34.2909 110.686 34.438 110.816 34.8466C110.989 35.3873 112.116 35.9791 112.507 35.7343C112.578 35.6897 112.594 35.7663 112.542 35.9042C112.489 36.042 112.382 36.1145 112.303 36.0651C112.062 35.9143 112.144 36.2795 112.412 36.5503C112.679 36.8215 113.039 36.9041 112.89 36.6601C112.842 36.5803 112.894 36.4789 113.007 36.4352C113.119 36.3914 113.22 36.4749 113.23 36.6208C113.304 37.6865 113.514 38.0663 114.074 38.153C114.48 38.2158 115.082 38.913 114.73 38.913C114.626 38.913 114.586 38.9872 114.642 39.078C114.697 39.1684 114.82 39.1935 114.916 39.1339C115.016 39.0715 115.044 39.0999 114.982 39.2012C114.923 39.2977 114.948 39.423 115.037 39.4789C115.127 39.5348 115.2 39.5048 115.2 39.4124C115.2 39.3001 115.331 39.3046 115.595 39.4266C115.812 39.5271 115.955 39.6662 115.912 39.7363C115.87 39.806 115.916 39.9142 116.014 39.9758C116.117 40.0399 116.131 40.1323 116.048 40.1899C115.968 40.2458 116.032 40.4189 116.191 40.5749C116.35 40.731 116.48 40.7768 116.48 40.6767C116.48 40.547 116.539 40.5441 116.685 40.6674C117.014 40.9434 117.312 40.6252 117.312 39.9989C117.312 39.1246 116.998 38.3399 116.55 38.0971C116.33 37.9775 116.002 37.6378 115.822 37.3423C115.641 37.0468 115.436 36.8052 115.364 36.8052C115.293 36.8052 115.118 36.5093 114.975 36.1474C114.788 35.6731 114.565 35.4259 114.176 35.2613C113.833 35.1158 113.601 34.8851 113.536 34.6245C113.472 34.3651 113.284 34.1778 113.022 34.1109C112.795 34.053 112.249 33.7603 111.808 33.4599C111.146 33.008 110.545 32.8252 109.913 32.8835C109.866 32.888 109.811 32.6594 109.792 32.3756C109.77 32.0583 109.608 31.7352 109.37 31.5358C109.157 31.3574 108.934 31.0092 108.873 30.762C108.728 30.1681 108.228 29.8333 107.484 29.8333C107.001 29.8333 106.88 29.7725 106.88 29.5309C106.88 29.3234 106.66 29.1438 106.176 28.9566C105.667 28.7592 105.417 28.5464 105.268 28.1832C105.128 27.8398 104.846 27.5845 104.374 27.3729C103.994 27.2026 103.6 26.9027 103.498 26.7057C103.222 26.1739 103.03 26.0944 102.28 26.2039C101.491 26.319 100.8 25.9696 100.8 25.4548C100.8 25.0535 100.344 24.9319 98.7448 24.9072C97.534 24.8885 97.5196 24.8829 97.4696 24.4439C97.3804 23.6611 96.6108 23.3207 95.84 23.724ZM90.36 23.784C90.206 23.8245 89.954 23.8245 89.8 23.784C89.646 23.743 89.772 23.7098 90.08 23.7098C90.388 23.7098 90.514 23.743 90.36 23.784ZM44.8276 24.4017C44.8676 24.6482 44.8032 24.7134 44.56 24.6729C44.2404 24.6198 44.2404 24.6202 44.5588 24.8618C44.7344 24.9947 44.9152 25.0551 44.9608 24.9959C45.0064 24.9368 45.0908 24.8516 45.1488 24.8066C45.2064 24.7621 45.146 24.5797 45.0144 24.4013C44.7752 24.0774 44.7752 24.0774 44.8276 24.4017ZM109.789 24.5233C109.839 24.8816 110.56 25.1743 110.56 24.8362C110.56 24.7507 110.434 24.6911 110.28 24.7033C110.104 24.7175 110.008 24.6202 110.022 24.4422C110.034 24.2862 109.976 24.1585 109.891 24.1585C109.807 24.1585 109.761 24.3227 109.789 24.5233ZM44.3328 25.0908C44.3256 25.2023 44.2104 25.2935 44.076 25.2935C43.942 25.2935 43.7636 25.4759 43.68 25.6988C43.5964 25.9218 43.416 26.1042 43.2788 26.1042C43.142 26.1042 42.9884 26.2136 42.938 26.3474C42.8872 26.4811 42.6604 26.5906 42.4344 26.5906C41.8048 26.5906 40.9408 26.955 41.0276 27.184C41.074 27.3068 41.0136 27.3498 40.872 27.2947C40.7316 27.2399 40.64 27.3028 40.64 27.4535C40.64 27.9104 40.1776 28.233 39.8096 28.0332C39.6292 27.9355 39.5184 27.9173 39.564 27.9931C39.6732 28.1759 39.2676 28.5484 39.1152 28.4049C39.05 28.3433 39.0768 28.4495 39.1748 28.6408C39.3568 28.9959 39.0688 29.4839 38.8236 29.2358C38.7648 29.1763 38.5036 29.3343 38.2432 29.5869C37.7524 30.0636 37.678 30.6558 38.0948 30.7693C38.2696 30.8171 38.2664 30.7924 38.08 30.659C37.948 30.5642 37.9156 30.4855 38.008 30.4843C38.1004 30.4831 38.25 30.5569 38.3408 30.6489C38.6532 30.9654 40.2804 30.6485 40.5592 30.2168C40.7004 29.9987 40.9652 29.8333 41.1732 29.8333C41.6048 29.8333 41.9216 29.593 42.2948 28.9821C42.4448 28.7369 42.662 28.5362 42.7776 28.5362C42.8928 28.5362 43.2416 28.2626 43.5524 27.9282C43.8632 27.5938 44.3068 27.1893 44.5388 27.0287C45.0248 26.6927 45.182 25.2935 44.7332 25.2935C44.6088 25.2935 44.4704 25.2023 44.426 25.0908C44.3616 24.9287 44.3428 24.9287 44.3328 25.0908ZM109.952 26.0579C109.996 26.7519 110.049 26.8362 110.64 27.1487C111.479 27.593 112.373 28.4872 112.629 29.1373C112.772 29.5022 112.996 29.7117 113.382 29.8406C113.684 29.942 114.039 30.1912 114.171 30.3955C114.326 30.6343 114.636 30.8029 115.043 30.869C115.542 30.9496 115.696 31.0562 115.775 31.3752C115.83 31.5974 115.946 31.779 116.034 31.779C116.122 31.779 116.147 31.6533 116.089 31.5001C116.03 31.3469 116.034 31.2731 116.097 31.3367C116.159 31.4 116.321 31.3615 116.456 31.2508C116.657 31.0858 116.677 31.0903 116.566 31.2772C116.471 31.4365 116.49 31.4681 116.626 31.3821C116.734 31.3149 116.783 31.1576 116.736 31.0331C116.689 30.9083 116.746 30.8061 116.863 30.8061C117.046 30.8061 117.107 30.2695 116.956 29.9955C116.932 29.9509 116.901 29.8049 116.888 29.6712C116.876 29.5374 116.771 29.4486 116.656 29.4742C116.54 29.4997 116.354 29.4422 116.24 29.3469C116.126 29.2517 115.972 29.1941 115.897 29.2196C115.822 29.2452 115.749 29.2042 115.736 29.1292C115.69 28.8722 114.831 28.0612 114.696 28.1463C114.621 28.1929 114.56 28.1617 114.56 28.077C114.56 27.9922 114.377 27.8763 114.154 27.8196C113.919 27.76 113.792 27.642 113.854 27.5415C113.926 27.4231 114.005 27.4381 114.098 27.5865C114.173 27.7077 114.236 27.7267 114.238 27.6291C114.241 27.3846 113.623 26.8378 113.492 26.97C113.434 27.0287 113.475 27.077 113.583 27.077C113.691 27.077 113.733 27.1524 113.677 27.2444C113.617 27.3421 113.436 27.2343 113.244 26.9866C112.991 26.6607 112.806 26.5768 112.457 26.6287C112.001 26.6964 111.936 26.6153 111.993 26.0539C112.047 25.5338 111.709 25.3275 110.786 25.3162L109.903 25.3056L109.952 26.0579ZM43.1468 25.5638C42.9624 25.7503 43.03 25.942 43.28 25.942C43.412 25.942 43.52 25.8326 43.52 25.6988C43.52 25.4455 43.3308 25.377 43.1468 25.5638ZM97.28 25.6988C97.28 25.8326 97.3968 25.942 97.5396 25.942C97.752 25.942 97.7632 25.8978 97.6 25.6988C97.4904 25.565 97.3736 25.4556 97.3404 25.4556C97.3072 25.4556 97.28 25.565 97.28 25.6988ZM55.0936 26.8743C55.1972 27.0474 54.7792 27.4045 54.6312 27.2699C54.564 27.2083 54.5632 27.2541 54.6304 27.3713C54.7272 27.5415 54.8124 27.5289 55.052 27.3092C55.3132 27.0697 55.3408 26.7527 55.1012 26.7527C55.0572 26.7527 55.054 26.8074 55.0936 26.8743ZM114.811 28.518C114.702 28.6963 115.11 29.0599 115.255 28.9132C115.313 28.8544 115.36 28.8917 115.36 28.9955C115.36 29.2577 115.197 29.2322 114.852 28.9164C114.527 28.6177 114.471 28.3741 114.73 28.3741C114.823 28.3741 114.86 28.4389 114.811 28.518ZM69.44 29.3574C69.44 29.4162 69.2684 29.4308 69.0588 29.3903C68.8492 29.3497 68.622 29.4073 68.554 29.5188C68.4836 29.6347 68.496 29.6805 68.5832 29.6258C68.6672 29.5731 68.8276 29.6789 68.9396 29.8609C69.1072 30.1329 69.106 30.1677 68.932 30.0575C68.5664 29.826 68.35 29.8552 68.0656 30.1734C67.9144 30.3432 67.8692 30.4819 67.9656 30.4819C68.0624 30.4819 68.1856 30.4089 68.24 30.3197C68.3716 30.1041 68.8 30.1114 68.8 30.3295C68.8 30.4239 68.7168 30.449 68.6152 30.3854C68.5008 30.3137 68.474 30.3408 68.5448 30.4567C68.6076 30.5597 68.7844 30.644 68.9376 30.644C69.0908 30.644 69.2948 30.7239 69.3916 30.822C69.5188 30.9509 69.9228 30.9087 70.8644 30.6675C72.2232 30.3193 72.9616 30.0101 72.4572 30.0003C72.3124 29.9975 72.1528 29.886 72.102 29.7523C72.0416 29.5925 71.792 29.509 71.3744 29.509C71.0248 29.509 70.6932 29.4341 70.6376 29.3424C70.5292 29.1649 69.44 29.1787 69.44 29.3574ZM81.36 29.3477C81.184 29.4239 80.716 29.4965 80.32 29.509C79.7924 29.5257 79.6856 29.5658 79.92 29.6586C80.2296 29.7814 80.2284 29.7891 79.8796 29.9014C78.5176 30.3404 81.8884 31.0149 84.0536 30.7372C85.1264 30.5994 85.142 30.3951 84.0748 30.462C83.6224 30.49 83.36 30.4389 83.36 30.3226C83.36 30.2212 83.4432 30.1904 83.5448 30.2541C83.6464 30.3177 83.6968 30.3039 83.6572 30.2233C83.6176 30.1426 83.4944 29.8917 83.384 29.6655C83.1672 29.2229 82.0532 29.0478 81.36 29.3477ZM48.3992 30.807C48.0808 31.1637 47.9064 31.1256 48.0552 30.732C48.1072 30.5946 48.2712 30.4819 48.4196 30.4819C48.666 30.4819 48.664 30.5102 48.3992 30.807ZM63.3268 30.9249C63.1784 32.1345 63.8288 32.6002 65.3276 32.3578C66.2624 32.2066 66.7204 31.8677 66.7176 31.3294C66.7136 30.6006 66.5276 30.46 65.6248 30.5017L64.8 30.5398V31.1592C64.8 31.7397 64.7696 31.779 64.32 31.779C63.9148 31.779 63.84 31.7157 63.84 31.3736C63.84 31.1507 63.7636 30.9683 63.6704 30.9683C63.5772 30.9683 63.5424 30.9002 63.5932 30.8175C63.6436 30.7344 63.6168 30.6237 63.5336 30.5715C63.45 30.5192 63.3572 30.6781 63.3268 30.9249ZM85.7624 31.0798C85.768 32.4514 88.1716 33.1308 88.8012 31.9387C89.346 30.9075 88.934 30.5463 87.16 30.4989L85.76 30.462L85.7624 31.0798ZM90.094 30.762C89.7876 30.8203 89.7544 30.8686 89.934 30.9954C90.076 31.0956 90.0964 31.1819 89.9896 31.2273C89.7972 31.3088 89.8732 33.0728 90.0784 33.2937C90.4436 33.6861 90.9904 32.9127 90.892 32.1438C90.8776 32.0323 90.97 31.9411 91.0972 31.9411C91.4016 31.9411 91.3468 30.9995 91.03 30.7964C90.7904 30.6428 90.7292 30.6404 90.094 30.762ZM91.0992 31.1665C91.228 31.3732 91.2196 31.4993 91.0668 31.6529C90.8996 31.8211 90.8792 31.8118 90.958 31.6022C91.0748 31.2909 90.6512 30.8921 90.3824 31.0603C90.258 31.1385 90.2324 31.1118 90.31 30.9845C90.4692 30.7235 90.8836 30.8191 91.0992 31.1665ZM62.7912 31.3067C62.7324 31.4036 62.764 31.5641 62.862 31.6634C62.96 31.7628 63.0456 31.811 63.0524 31.7709C63.0588 31.7307 63.0888 31.5702 63.118 31.4142C63.1772 31.1008 62.9604 31.0295 62.7912 31.3067ZM59.0856 32.0181C58.7648 32.1596 58.5324 32.4016 58.4684 32.6606C58.3804 33.0157 58.2764 33.0761 57.756 33.0761C57.1568 33.0761 57.1472 33.0858 57.1912 33.6476C57.2472 34.359 57.122 34.4376 55.9608 34.4206C54.9776 34.4056 54.4028 34.5009 54.4248 34.6743C54.5256 35.4696 54.3936 35.6703 53.77 35.6703H53.14L53.2348 36.2783C53.3592 37.0768 54.5888 37.5665 54.66 36.8458C54.6712 36.7343 54.6888 36.5324 54.7 36.3975C54.7112 36.2621 54.972 36.0298 55.28 35.8806C55.588 35.7319 55.84 35.5539 55.84 35.4854C55.84 35.4169 56.1092 35.3095 56.4388 35.2467C56.768 35.1843 57.3548 34.9621 57.7424 34.753C58.1304 34.5442 58.5988 34.3675 58.784 34.3602C58.9688 34.3533 59.0376 34.3132 58.9368 34.2714C58.684 34.1665 58.864 33.5625 59.148 33.5625C59.2752 33.5625 59.3344 33.4895 59.28 33.4004C59.1484 33.1843 59.4108 33.1924 59.6264 33.4109C60.3248 34.1186 61.772 33.4449 61.7328 32.4304L61.7076 31.779L60.6536 31.7855C60.074 31.7887 59.3684 31.8937 59.0856 32.0181ZM91.84 32.4235C91.84 33.1093 92.348 33.5625 93.1176 33.5625C93.3276 33.5625 93.5708 33.7684 93.776 34.1206C94.0544 34.5994 94.2308 34.7056 95.0104 34.8653C95.5108 34.9682 96.0852 35.1182 96.2876 35.1989C97.196 35.5625 97.92 35.286 97.92 34.5758C97.92 34.2832 97.864 34.2268 97.6776 34.3322C97.3188 34.5357 96.3236 34.3768 96.3 34.1121C96.2888 33.9881 96.2712 33.7226 96.26 33.522C96.2444 33.2342 96.1304 33.1466 95.7204 33.1065C95.42 33.0769 95.1348 32.931 95.0448 32.7607C94.9588 32.5986 94.7688 32.419 94.622 32.3619C94.3964 32.2743 94.3868 32.297 94.56 32.5086C94.7328 32.7198 94.7236 32.7429 94.5008 32.6565C94.2952 32.5763 94.2604 32.6205 94.3436 32.8552C94.4028 33.0214 94.4012 33.1122 94.3404 33.0574C94.2796 33.0027 94.1972 32.7838 94.1568 32.571C94.0488 31.9995 93.6404 31.779 92.6896 31.779H91.84V32.4235ZM118.182 31.9776C118.226 32.0493 118.347 32.057 118.451 31.9938C118.592 31.9079 118.592 31.9395 118.448 32.1195C118.292 32.3144 118.312 32.3639 118.55 32.3821C118.762 32.3983 118.822 32.3209 118.766 32.1032C118.723 31.9346 118.559 31.8114 118.395 31.824C118.234 31.8361 118.138 31.9054 118.182 31.9776ZM59.52 32.2265C59.52 32.2942 59.376 32.4405 59.2 32.552C59.024 32.6634 58.88 32.8592 58.88 32.9869C58.88 33.3209 58.6144 33.4405 58.6076 33.1093C58.6044 32.9573 58.7488 32.6687 58.9288 32.4681C59.256 32.1028 59.52 31.995 59.52 32.2265ZM118.253 33.1357C117.75 33.9597 117.814 34.4826 118.463 34.8709C118.761 35.0493 119.042 35.3351 119.086 35.5057C119.13 35.6764 119.397 35.9585 119.679 36.1324C119.961 36.3063 120.328 36.6747 120.494 36.9512C120.675 37.2531 120.94 37.4635 121.158 37.4785C121.357 37.4919 121.628 37.5101 121.76 37.519C121.892 37.5276 122.069 37.772 122.153 38.0618C122.237 38.3516 122.363 38.5888 122.433 38.5888C122.503 38.5888 122.56 38.7655 122.56 38.9815C122.56 39.7193 123.308 40.3958 124.061 40.3398C124.953 40.2738 125.03 39.6998 124.16 39.5993C123.473 39.5198 123.546 39.622 123.499 38.6658C123.458 37.83 122.77 36.8166 122.402 37.0472C122.263 37.1344 122.164 36.4039 122.198 35.5438C122.206 35.3225 121.337 34.3683 121.151 34.3955C121.09 34.4044 120.734 34.4028 120.36 34.3922L119.68 34.3732V33.5815C119.68 32.916 119.627 32.7757 119.347 32.7015C119.104 32.6371 119.038 32.6756 119.102 32.8446C119.153 32.9788 119.094 33.0761 118.96 33.0761C118.821 33.0761 118.767 32.9796 118.822 32.8329C118.997 32.372 118.585 32.5909 118.253 33.1357ZM35.2 33.1896C35.2 33.4036 35.1572 33.4218 35.0084 33.271C34.7608 33.0201 33.846 33.8426 34.0672 34.117C34.1572 34.2285 34.0544 34.4072 33.7844 34.6087C33.3632 34.9232 33.362 34.9232 33.5932 34.6087C33.7212 34.4348 33.5772 34.526 33.2732 34.8118C32.8164 35.2414 32.7116 35.4648 32.6716 36.0975C32.6144 37.0047 32.548 37.1457 32.2348 37.0241C32.1056 36.9739 32 37.0225 32 37.1319C32 37.2803 31.9452 37.2852 31.7852 37.1506C31.6672 37.0513 31.524 37.0176 31.4668 37.0756C31.4096 37.1336 31.4428 37.2787 31.5408 37.3983C31.6736 37.5604 31.6688 37.6159 31.5224 37.6159C31.4144 37.6159 31.3616 37.7108 31.4056 37.8267C31.5552 38.2215 31.1288 38.8117 30.898 38.5296C30.7216 38.3143 30.666 38.3176 30.4144 38.5592C30.1532 38.8101 30.1508 38.8571 30.3852 39.1433C30.6128 39.4213 30.6132 39.4444 30.39 39.3626C30.1936 39.2904 30.1376 39.3974 30.1292 39.8619L30.1184 40.4533L30.8204 40.3962C31.6988 40.3252 32.2288 39.7484 32.1072 38.9961C31.9828 38.2235 31.9108 37.9576 31.7928 37.8381C31.5892 37.6317 32.0224 37.2706 32.2468 37.4595C32.39 37.5799 32.4828 37.5803 32.5556 37.4611C32.6128 37.367 32.8352 37.335 33.05 37.3897C33.7348 37.564 34.2 37.3383 34.3956 36.7371C34.5216 36.3509 34.7196 36.132 35.048 36.016C35.3552 35.9074 35.52 35.738 35.52 35.53C35.52 34.9974 35.704 34.68 36.102 34.5268C36.5828 34.3416 36.6012 33.2382 36.1232 33.2382C36.0276 33.2382 36.0428 33.3545 36.1604 33.522C36.27 33.678 36.1844 33.6233 35.97 33.4004C35.4916 32.9034 35.2 32.8235 35.2 33.1896ZM100 35.8421C100 35.9366 99.9356 35.9735 99.8568 35.924C99.674 35.8093 99.5184 36.2126 99.5932 36.6066C99.6672 36.997 101.145 38.4639 101.853 38.8506C102.154 39.0148 102.4 39.2016 102.4 39.2661C102.4 39.5121 103.373 40.8299 103.729 41.0666C104.513 41.5867 105.601 41.4894 105.598 40.8992C105.594 40.0245 105.43 39.7363 104.877 39.6313C104.436 39.5474 104.334 39.4436 104.25 38.9941C104.166 38.5373 104.062 38.4351 103.557 38.3143C103.072 38.198 102.963 38.0995 102.962 37.7724C102.96 37.2576 102.738 37.0099 102.32 37.0566C101.856 37.108 101.52 36.7983 101.52 36.3188C101.52 35.9832 101.444 35.9147 101.08 35.92C100.838 35.9232 100.64 35.8685 100.64 35.7984C100.64 35.7278 100.496 35.6703 100.32 35.6703C100.144 35.6703 100 35.7477 100 35.8421ZM113.236 35.9435C113.268 36.0379 113.155 36.1518 112.987 36.1964C112.748 36.26 112.698 36.2098 112.761 35.9674C112.843 35.6496 113.135 35.635 113.236 35.9435ZM42.1608 36.318C42.0012 36.4968 41.9448 36.6431 42.0356 36.6431C42.2368 36.6431 42.636 36.1798 42.5284 36.0708C42.486 36.0278 42.3208 36.1389 42.1608 36.318ZM69.206 36.4741C69.0336 36.6674 68.8536 37.1615 68.8064 37.5726C68.6988 38.504 68.408 38.6248 68.0588 37.883C67.2128 36.0849 64.9636 35.9869 64.9604 37.7481C64.9588 38.8498 64.3692 38.8526 63.0152 37.757C62.0468 36.9735 61.3056 37.4201 61.1344 38.8907C60.988 40.1514 60.954 40.1765 60.0144 39.7306C58.2512 38.8936 57.1404 39.6187 57.3872 41.4448C57.5168 42.403 57.1288 42.5773 56.4764 41.8538C55.3616 40.6167 54.1716 41.9799 54.552 44.0589C54.7252 45.0037 54.4468 45.2295 53.7948 44.6738C53.1896 44.1578 52.844 44.1574 52.1544 44.673C51.1728 45.407 50.9436 46.1934 51.5864 46.6206C52.5216 47.2412 52.2164 47.8079 51.0024 47.7058C49.6556 47.5927 49.1756 48.9599 49.838 51.0223C49.9392 51.3368 49.882 51.3879 49.336 51.475C47.1992 51.8147 46.6668 52.4787 47.6952 53.5208C47.8748 53.7028 48.1232 54.143 48.2472 54.4993L48.4728 55.1463L47.922 55.3797C46.8232 55.8451 46.6372 57.5435 47.6 58.3221C48.348 58.9269 48.3072 59.1121 47.3768 59.3383C45.4228 59.8134 45.5596 61.8628 47.59 62.5316C48.2412 62.746 48.2824 63.0452 47.6896 63.2548C46.2864 63.7501 46.42 66.0338 47.8736 66.3994C48.638 66.5915 48.6884 66.8518 48.0764 67.4529C46.9924 68.5177 47.3324 69.812 48.8 70.2072C49.9924 70.5282 50.1324 70.6426 49.8436 71.0601C49.3872 71.7208 49.58 73.591 50.144 73.9729C50.5344 74.2367 51.1936 74.0957 51.4548 73.6916C51.8312 73.1091 52 73.1901 52 73.9538C52 74.4645 51.8872 74.7519 51.52 75.1755C50.9448 75.8395 50.9392 75.893 51.4 76.3186C51.9384 76.8159 52.872 77.0656 53.7144 76.9375C54.5968 76.8034 54.7344 76.9586 54.5344 77.8609C54.3484 78.7008 54.474 79.1049 55.086 79.6311L55.582 80.0579L56.1848 79.7397C57.1232 79.244 57.4996 79.4478 57.3944 80.3943C57.2048 82.0968 58.934 82.8572 60.3776 81.7064C60.8528 81.3274 60.9144 81.4032 61.136 82.6403C61.4288 84.2759 62.0828 84.766 62.858 83.9301C63.1548 83.6095 63.894 83.2755 64.56 83.1604C64.648 83.145 64.7976 83.4125 64.892 83.7542C65.2812 85.1591 66.8588 85.3071 67.9388 84.0404C68.524 83.3541 68.7196 83.4133 68.8628 84.3189C69.0616 85.5799 69.7676 85.9171 71.0676 85.3715C71.3464 85.2548 71.84 84.3489 71.84 83.9549C71.84 83.6294 72.1612 83.3493 72.4196 83.4498C72.5408 83.4968 72.64 83.6273 72.64 83.7396C72.64 83.8519 72.7892 84.1357 72.9716 84.3708C73.6228 85.2094 75.84 84.8422 75.84 83.8957C75.84 83.072 76.1516 82.9683 76.8596 83.5564C77.4768 84.0688 78.0116 84.2333 78.8424 84.1661C79.0856 84.1462 79.4672 83.3136 79.5936 82.5281C79.746 81.5787 79.8996 81.4519 80.406 81.8552C81.5904 82.7996 83.5372 81.691 82.9188 80.4243L82.5984 79.7681L83.0192 79.6752C83.2508 79.6242 83.5328 79.5532 83.646 79.518C83.7592 79.4823 84.1472 79.5561 84.5084 79.6821C85.6328 80.0749 86.1416 79.5232 86.0616 77.9979C86.0056 76.9238 86.2212 76.6797 87.0404 76.8901C88.3792 77.2347 89.2776 76.4544 88.882 75.2906C88.698 74.7495 88.7068 73.2862 88.8936 73.2862C88.9224 73.2862 89.1256 73.4686 89.3456 73.6916C90.1436 74.5006 91.0136 74.0385 91.1596 72.7281C91.2544 71.8744 90.9784 71.0698 90.5428 70.9295C90.0192 70.7613 90.2116 70.5538 91 70.4379C91.9056 70.3041 92.564 69.992 92.7008 69.6308C93.03 68.7609 92.62 67.2433 92.0016 67.0443C91.4832 66.8777 91.6256 66.714 92.4816 66.4918C94.0312 66.0893 94.3372 64.0363 92.9552 63.3123C92.3404 62.9901 92.3552 62.7837 93.0128 62.5053C93.6768 62.224 93.8056 62.0562 94.1328 61.0448L94.3948 60.2341L93.9148 59.7882C93.6508 59.543 93.3008 59.3424 93.1372 59.3424C92.506 59.3424 92.43 58.9192 92.9616 58.3675C94.1888 57.0955 94.0408 55.6975 92.64 55.3331C92.332 55.2529 92.1044 55.139 92.134 55.0798C92.1636 55.0206 92.2308 54.807 92.2828 54.6055C92.3348 54.4037 92.5816 53.8451 92.8312 53.3648C93.4252 52.2201 93.0672 51.7612 91.36 51.4791C90.3748 51.3166 90.322 51.2594 90.7408 50.8078C91.8484 49.6133 91.2316 47.5854 89.7976 47.7058C88.6988 47.7982 88.5412 47.6174 88.8064 46.5696C89.2104 44.9717 88.1112 43.6843 87.106 44.5785C86.2864 45.3081 86.1724 45.1878 86.0784 43.4958C85.9608 41.3731 85.3052 40.7626 84.3064 41.8461C83.7628 42.4359 82.2528 42.4456 82.7772 41.8558C83.296 41.2725 83.2636 40.7687 82.6648 40.097C81.7092 39.0253 81.3988 38.9361 80.722 39.5381C79.8656 40.3001 79.52 40.0768 79.52 38.7614C79.52 37.2957 77.7576 36.8705 76.782 38.1007C76.2316 38.7947 75.84 38.7635 75.84 38.0253C75.84 36.1547 73.3632 35.9005 72.7456 37.7079C72.4312 38.6285 71.9752 38.5847 71.792 37.6159C71.5444 36.3059 69.9752 35.6131 69.206 36.4741ZM51.9108 37.6378L51.92 38.3083L50.6584 38.3269L49.3964 38.3455L49.3364 38.9013C49.262 39.5912 49.2312 39.6216 48.596 39.6333C48.122 39.6418 48.0792 39.6864 48.0704 40.1814C48.0608 40.718 47.7872 41.0492 47.4544 40.9264C47.0632 40.7821 46.8064 41.1805 46.7808 41.9726C46.7664 42.416 46.7176 42.8392 46.6728 42.913C46.604 43.0256 47.196 43.0589 47.9404 42.9847C48.158 42.9628 48.4496 42.2559 48.5136 41.5948C48.548 41.2385 48.6608 41.0909 48.9512 41.022C49.2232 40.9576 49.3828 40.7707 49.4756 40.4075C49.5896 39.9629 49.6816 39.8859 50.0992 39.8859C50.3688 39.8859 50.7724 39.7399 50.9964 39.5616C51.22 39.3832 51.5292 39.2373 51.6832 39.2373C52.1092 39.2373 52.48 38.5231 52.48 37.7027C52.48 37.1015 52.4272 36.9674 52.1908 36.9674C51.9568 36.9674 51.9032 37.0959 51.9108 37.6378ZM71.8904 38.9041C72.4652 39.1222 72.8208 38.9357 73.2564 38.1875C73.8828 37.1117 75.1204 37.4469 75.4436 38.7797C75.6756 39.7371 76.094 39.8546 76.7968 39.1595C77.4624 38.5008 78.2752 38.4627 78.558 39.0764C79.5752 41.2831 79.7864 41.4566 80.5448 40.7115C81.3896 39.8818 82.2044 40.2661 81.9952 41.3958C81.7388 42.7792 83.052 43.4375 84.5908 42.6977C85.3924 42.3122 85.728 43.3524 85.2084 44.6118C85.0008 45.1156 86.1572 45.8286 86.774 45.5769C87.7256 45.189 87.804 45.1918 88.0836 45.6243C88.3412 46.0228 88.338 46.0751 88.0156 46.7017C87.6376 47.4366 87.688 47.6377 88.432 48.3543L88.8912 48.7973L89.5772 48.4532C90.7388 47.8711 91.0952 49.1869 90.0896 50.3437C89.314 51.2363 89.6588 52.0462 90.8144 52.0462C92.288 52.0462 92.4372 52.4564 91.516 53.9736C90.752 55.2318 90.9048 55.6858 92.1664 55.9042C93.0552 56.0579 93.2808 56.4073 92.8688 56.9922C91.744 58.5909 91.6364 59.0209 92.2516 59.4563C93.65 60.4461 93.6916 60.9836 92.454 62.0707C91.6916 62.7408 91.6824 63.0784 92.4104 63.6864C93.3124 64.44 93.1876 65.4833 92.16 65.7796C90.8576 66.155 90.6372 66.6892 91.4216 67.5705C91.9068 68.1152 91.9528 68.2466 91.8596 68.8274L91.756 69.476L90.9176 69.525C90.1772 69.5684 90.0516 69.6288 89.8396 70.0439C89.5136 70.6831 89.528 70.7597 90.0936 71.4123C90.7036 72.1168 90.5944 73.6684 89.9788 73.0446C88.864 71.9149 87.4596 73.5351 88.1064 75.2043C88.4984 76.2152 87.796 76.777 86.9504 76.1289C86.4664 75.7576 86.1536 75.8338 85.6164 76.4536C85.0392 77.12 85.0348 77.1475 85.388 77.8982C85.7848 78.7417 85.4036 79.154 84.432 78.931C82.7908 78.5541 81.8268 79.139 81.9488 80.4369C82.048 81.4883 81.4684 81.8037 80.7444 81.0927C79.9744 80.3364 79.1676 80.4961 78.9708 81.4438C78.9208 81.6833 78.8432 82.0595 78.7984 82.2792C78.6348 83.0797 77.5236 83.1632 76.7828 82.43C76.06 81.7145 75.6172 81.899 75.422 82.9962C75.2476 83.9772 75.094 84.1494 74.3944 84.1494C73.7676 84.1494 73.5852 84.0323 72.9216 83.2009C72.5044 82.6784 71.9536 82.77 71.1212 83.4997C69.9432 84.5329 69.8156 84.5686 69.5064 83.9496C68.8912 82.719 68.4732 82.5836 67.624 83.3391C66.5316 84.3112 65.4444 84.4255 65.4392 83.5694C65.4324 82.4312 64.7384 81.7076 64.124 82.1977C62.6384 83.3821 61.882 83.2488 61.6848 81.7676C61.5428 80.7032 61.0064 80.2273 60.428 80.6529C60.2368 80.7936 59.936 81.0137 59.76 81.1418C59.3044 81.4734 58.0168 81.2974 58.1712 80.9245C58.7036 79.6396 58.666 79.5123 57.5884 78.9549C57.0288 78.6655 56.9588 78.6635 56.3296 78.9136C55.3744 79.2942 54.9468 78.8881 55.1824 77.8244C55.4484 76.6258 54.8188 75.9023 53.7836 76.2168C53.2708 76.3725 53.0352 76.3705 52.6484 76.2083C52.0944 75.9757 52.0864 75.9497 52.4 75.394C53.2128 73.953 52.1752 72.086 51.0356 72.9396C50.5404 73.3105 50.4628 73.2627 50.2316 72.4459C50.1076 72.0078 50.1516 71.8683 50.5644 71.392C51.3048 70.5372 50.9956 69.8497 49.7772 69.641C48.6428 69.4468 48.3164 68.3706 49.1328 67.5169C49.8124 66.8064 49.7036 66.4853 48.6 65.9434C47.41 65.3589 47.2852 64.5624 48.24 63.6496C48.9468 62.9739 48.9412 62.8328 48.1748 62.0942C47.588 61.5288 47.04 60.6828 47.04 60.3428C47.04 60.2601 47.274 60.0987 47.56 59.9844C48.896 59.4498 48.998 59.0992 48.24 57.6509C47.538 56.3104 47.538 56.312 48.37 55.9505C49.6828 55.3801 49.682 54.3408 48.3676 52.8281C48.0704 52.486 48.6324 52.1483 49.7816 51.9789C50.9224 51.8111 51.194 51.407 50.6884 50.6299C49.5956 48.9494 50.218 47.5842 51.544 48.7536C51.7788 48.9607 51.8512 48.9271 52.2004 48.4492C52.7672 47.6725 52.8256 47.3957 52.5584 46.7479C52.078 45.583 52.5776 45.0568 53.7616 45.4804C54.7784 45.8436 55.2356 45.3977 55.1724 44.1055C55.0964 42.5502 55.508 41.8923 56.1368 42.564C57.1388 43.6345 58.956 42.5915 58.3064 41.3183C57.8392 40.4031 59.2092 39.9916 60.1248 40.7723C60.9928 41.5129 61.5608 40.9361 61.8432 39.0286C61.96 38.2393 62.0496 38.1364 62.3536 38.4445C62.7472 38.8433 64.7184 39.6974 64.8976 39.547C64.9972 39.4631 65.236 38.9576 65.428 38.4242C65.62 37.8903 65.848 37.4538 65.9348 37.4538C66.236 37.4538 67.282 38.0894 67.6568 38.5C68.2508 39.1514 69.44 38.8389 69.44 38.0318C69.44 37.9037 69.5188 37.5936 69.6148 37.3427L69.7896 36.8863L70.6148 37.8097C71.0688 38.3176 71.6428 38.8101 71.8904 38.9041ZM36.384 41.0926C36.2896 41.3098 36.0284 41.4578 35.6232 41.5234C34.4168 41.7196 34.3524 43.3901 35.5476 43.4869C35.9808 43.5218 35.9308 44.1014 35.4948 44.1014C35.3868 44.1014 35.4044 43.9936 35.5404 43.8177C35.7392 43.5611 35.7336 43.555 35.4816 43.7549C35.3288 43.8765 35.2436 44.0423 35.2932 44.1229C35.3432 44.2048 35.1244 44.2372 34.7972 44.1959C34.0224 44.0986 33.8348 44.189 33.4528 44.8456C33.2724 45.1549 33.0016 45.3985 32.8372 45.3985C32.2184 45.3985 31.9368 46.4861 32.312 47.4253C32.3956 47.6336 32.3652 47.8383 32.2272 47.9984C32.0416 48.2136 32.0684 48.2522 32.4248 48.2817C33.0436 48.3336 33.92 47.3061 33.92 46.5286C33.92 45.8396 34.0464 45.6547 34.3452 45.906C34.5044 46.0398 34.56 46.037 34.56 45.8951C34.56 45.7897 34.6284 45.7467 34.712 45.799C34.796 45.8513 34.9536 45.5923 35.0628 45.223C35.174 44.8473 35.5296 44.2855 35.8708 43.9466C36.4216 43.3994 36.48 43.2603 36.48 42.4995C36.48 41.6921 36.494 41.6653 36.8192 41.842C37.0528 41.9685 37.1252 41.9709 37.0508 41.8493C36.9816 41.7358 37.0412 41.7111 37.2196 41.7804C37.4336 41.8635 37.4716 41.825 37.3896 41.6082C37.326 41.4403 37.3476 41.3682 37.4432 41.4282C37.5408 41.4894 37.5356 41.3795 37.43 41.1444C37.2128 40.6613 36.5856 40.6301 36.384 41.0926ZM117.157 40.9965C117.111 41.1173 117.138 41.2632 117.217 41.3208C117.296 41.3787 117.36 41.5356 117.36 41.6694C117.36 41.8031 117.486 41.9024 117.64 41.8899C117.794 41.8777 117.92 41.9324 117.92 42.0115C117.92 42.0909 118.028 42.1558 118.16 42.1558C118.32 42.1558 118.4 42.3179 118.4 42.6422C118.4 42.9097 118.415 43.1833 118.432 43.2502C118.494 43.4796 119.411 44.4257 119.572 44.4257C119.661 44.4257 119.686 44.3779 119.628 44.3191C119.57 44.2603 119.61 44.0962 119.716 43.9543C119.822 43.8124 119.846 43.75 119.77 43.8165C119.692 43.8825 119.515 43.8461 119.375 43.7354C119.149 43.5571 119.145 43.5668 119.34 43.8177C119.476 43.9936 119.493 44.1014 119.385 44.1014C118.949 44.1014 118.899 43.5218 119.332 43.4869C119.842 43.4456 120.161 43.0601 120.158 42.4898C120.153 41.7225 119.925 41.5644 118.76 41.5206C118.494 41.5109 118.4 41.4091 118.4 41.1303C118.4 40.6953 117.316 40.5786 117.157 40.9965ZM29.3192 41.1692C29.3448 41.3305 29.2608 41.4095 29.0936 41.3816C28.8952 41.3487 28.8388 41.4416 28.8716 41.7464C28.9044 42.0484 28.8376 42.1611 28.618 42.176C28.454 42.1874 28.158 42.2056 27.96 42.2166C27.5736 42.2385 27.5756 42.23 27.54 43.917C27.5208 44.8302 27.5044 44.8659 27.12 44.8229C26.8616 44.7942 26.72 44.8594 26.72 45.0074C26.72 45.1334 26.622 45.2364 26.502 45.2364C26.382 45.2364 26.2828 45.4006 26.2812 45.6012C26.2688 47.3422 26.2684 47.3442 25.7796 47.3442C25.1332 47.3442 24.984 47.6073 24.9456 48.8156C24.9132 49.8196 24.8916 49.8735 24.5048 49.906C23.9788 49.9501 23.7676 50.289 24.1324 50.5038C24.4224 50.6749 24.4856 50.9594 24.28 51.1678C24.214 51.2347 24.1544 51.1131 24.1472 50.8978C24.1404 50.6822 24.0984 50.5975 24.0536 50.7094C24.0092 50.8216 23.9068 50.8719 23.8264 50.8216C23.746 50.7714 23.68 50.807 23.68 50.9015C23.68 50.9959 23.77 51.0746 23.88 51.0758C24.0292 51.0778 24.0256 51.1131 23.866 51.216C23.744 51.2943 23.6648 51.5902 23.682 51.9023C23.7272 52.7207 23.6964 52.8865 23.52 52.7758C23.432 52.7207 23.36 52.7527 23.36 52.8471C23.36 52.9416 23.252 53.019 23.12 53.019C22.988 53.019 22.88 53.1284 22.88 53.2622C22.88 53.396 22.8148 53.5054 22.7348 53.5054C22.6552 53.5054 22.6276 53.6513 22.6736 53.8297C22.7708 54.2059 22.7444 54.1981 23.2504 54.0032C23.6136 53.8633 23.6484 53.895 23.7368 54.4454C23.852 55.1661 23.7456 55.2901 22.988 55.3189L22.4 55.3416V56.6217C22.4 57.3708 22.338 57.8637 22.2512 57.809C22.1692 57.7579 22.0588 57.7867 22.006 57.8734C21.9532 57.9601 21.7968 57.9873 21.6588 57.9334C21.2236 57.7644 21.1248 58.2277 21.1224 60.4542C21.1204 62.363 21.15 62.6082 21.3732 62.5215C21.5124 62.4672 21.8344 62.423 22.0888 62.423C22.7664 62.423 23.07 61.7663 22.806 60.8725C22.6992 60.5106 22.6276 59.8904 22.6472 59.4944C22.6668 59.0988 22.6912 58.4283 22.7012 58.0047C22.72 57.2423 23.188 56.4592 23.506 56.6582C23.9628 56.9444 24.5052 55.4742 24.424 54.171C24.3792 53.4523 24.3916 52.8715 24.4512 52.88C24.7924 52.9282 24.938 52.7819 25.242 52.0867C25.4272 51.6631 25.618 51.1285 25.6656 50.8986C25.7132 50.6684 25.9204 50.4029 26.1256 50.3081C26.4952 50.1374 26.88 49.2213 26.88 48.512C26.88 48.3243 27.0928 48.0235 27.3644 47.8274C27.8184 47.4998 27.8472 47.4167 27.8204 46.5112C27.79 45.4865 27.9272 45.2113 28.5144 45.1205C29.0032 45.0447 29.0776 44.9352 29.1608 44.1651C29.2488 43.3491 29.374 43.1286 29.748 43.1286C30.6124 43.1286 31.1708 41.9726 30.6532 41.2543C30.3596 40.8473 29.2564 40.7768 29.3192 41.1692ZM124.393 41.0909C123.68 41.6305 124.213 43.1286 125.118 43.1286C125.491 43.1286 125.566 43.2713 125.654 44.1383C125.732 44.9142 125.98 45.2056 126.612 45.2676L127.12 45.3175V46.416C127.12 47.4249 127.152 47.5306 127.52 47.7175C127.846 47.8837 127.953 48.1123 128.103 48.9643C128.244 49.7608 128.386 50.0871 128.704 50.3437C128.933 50.529 129.122 50.7868 129.124 50.9173C129.126 51.0478 129.268 51.4678 129.439 51.8508C129.61 52.2343 129.768 52.8046 129.789 53.1183C129.81 53.4325 129.916 53.7397 130.024 53.8009C130.132 53.8621 130.267 54.2768 130.324 54.7223C130.468 55.8386 131.094 56.9103 131.604 56.9103C132.201 56.9103 132.463 59.1158 132.105 61.1259C131.939 62.0594 132.174 62.3942 133.04 62.4574L133.68 62.5041L133.719 60.7295C133.74 59.753 133.69 58.7072 133.608 58.4048C133.515 58.0631 133.515 57.704 133.609 57.4547C133.718 57.1616 133.709 57.085 133.574 57.1697C133.45 57.2476 133.417 57.1782 133.474 56.9561C133.544 56.689 133.498 56.6432 133.235 56.7133C133.03 56.7676 132.949 56.7356 133.015 56.6266C133.082 56.5179 133.002 56.4855 132.8 56.539C132.52 56.6132 132.48 56.5443 132.48 55.9926V55.3615L131.841 55.4231C131.098 55.4948 130.946 55.2812 131.11 54.396C131.205 53.8824 131.264 53.8297 131.752 53.8297C132.216 53.8297 132.278 53.7839 132.204 53.4961C132.155 53.3056 132.028 53.1978 131.907 53.2448C131.78 53.2942 131.728 53.2415 131.778 53.1118C131.826 52.9829 131.709 52.8589 131.485 52.8017C131.156 52.7178 131.118 52.6278 131.172 52.0519L131.234 51.3976H130.577C129.728 51.3976 129.511 50.2055 130.347 50.1354C130.907 50.0884 131.04 49.9437 130.547 49.9193C130.334 49.9088 130.119 49.9043 130.068 49.9096C130.018 49.9149 129.959 49.5424 129.938 49.0811C129.918 48.6202 129.829 48.1982 129.742 48.1435C129.655 48.0888 129.605 47.9413 129.632 47.8156C129.661 47.6754 129.572 47.6056 129.4 47.6352C129.246 47.6612 129.12 47.6064 129.12 47.5136C129.12 47.4204 129.012 47.3442 128.88 47.3442C128.641 47.3442 128.578 47.043 128.635 46.1683C128.664 45.7204 127.91 44.75 127.532 44.75C127.431 44.75 127.359 44.3973 127.358 43.8988C127.354 42.5546 127.248 42.3297 126.565 42.219C126.051 42.1355 125.974 42.0678 126.01 41.7334C126.036 41.487 125.969 41.3451 125.826 41.3451C125.702 41.3451 125.6 41.249 125.6 41.1315C125.6 40.8712 124.722 40.8417 124.393 41.0909ZM105.735 42.3585C105.639 43.1347 105.686 43.4042 105.914 43.3884C106.096 43.3763 106.162 43.5404 106.166 44.0204C106.18 45.3718 107.25 46.3442 107.947 45.6377C108.247 45.3337 108.104 44.8809 107.721 44.9202C106.956 44.9997 106.88 44.934 106.88 44.1959C106.88 43.7747 106.798 43.4464 106.68 43.3982C106.52 43.3329 106.52 43.3138 106.68 43.3037C107.093 43.277 106.861 43.0131 106.44 43.0301C106.059 43.0451 106.002 42.988 106.017 42.6017C106.034 42.1679 105.785 41.9531 105.735 42.3585ZM46.1664 43.4423C46.104 43.5445 45.8972 43.5895 45.7064 43.5421C45.516 43.4946 45.4504 43.4979 45.5608 43.5494C45.6716 43.6008 45.7088 43.7277 45.6436 43.8315C45.5784 43.9352 45.5236 44.1663 45.5224 44.3446C45.5208 44.5838 45.3944 44.6831 45.04 44.7236C44.392 44.7978 44.2052 44.9855 44.13 45.6381C44.0068 46.7086 45.4548 46.9093 45.9564 45.8914C46.1084 45.583 46.4144 45.234 46.6364 45.116C47.1032 44.8683 47.1828 44.1926 46.8052 43.6864C46.676 43.5133 46.5668 43.4448 46.5628 43.534C46.5584 43.6231 46.4932 43.5972 46.4176 43.476C46.318 43.3167 46.2488 43.3074 46.1664 43.4423ZM119.813 44.3041C119.732 44.9154 119.765 46.013 119.863 45.9518C119.926 45.9125 120.021 46.0207 120.075 46.1926C120.128 46.3641 120.428 46.7021 120.74 46.9433C121.136 47.2493 121.284 47.4743 121.229 47.6875C121.185 47.8557 121.207 47.9575 121.277 47.9137C121.422 47.8225 121.798 48.2246 121.679 48.3446C121.636 48.3879 121.76 48.4179 121.953 48.4111C122.273 48.3993 122.3 48.4666 122.26 49.1682L122.216 49.9384H122.868H123.52L123.539 51.0328C123.549 51.6348 123.546 52.2185 123.532 52.3299C123.518 52.4414 123.585 52.5326 123.682 52.5326C123.78 52.5326 123.82 52.5966 123.772 52.6753C123.724 52.7535 123.872 53.0077 124.102 53.2399C124.331 53.4726 124.582 53.623 124.659 53.5743C124.811 53.4795 124.813 53.5005 124.853 55.7267C124.882 57.3011 124.966 57.5126 125.604 57.6107C125.994 57.6707 126.258 58.4741 126.144 59.2573C126.124 59.3939 126.174 59.4648 126.254 59.4145C126.334 59.3643 126.4 59.3943 126.4 59.4814C126.4 59.5686 126.326 59.6768 126.236 59.7222C126.146 59.7676 126.164 59.7854 126.276 59.7623C126.388 59.7388 126.48 59.586 126.481 59.4226C126.481 59.2593 126.571 59.0955 126.681 59.0582C126.804 59.0169 126.845 59.0846 126.788 59.2358C126.718 59.4198 126.778 59.4591 127.027 59.3926C127.347 59.3079 127.36 59.3659 127.362 60.8231C127.364 61.6585 127.418 62.2665 127.482 62.1741C127.547 62.0821 127.852 62.0063 128.16 62.0059C128.888 62.0051 128.993 61.4011 128.28 61.318C127.767 61.258 127.537 60.663 127.81 60.1C128.272 59.1433 128.126 58.3995 127.301 57.5098C127.07 57.2601 126.88 56.9525 126.88 56.826C126.88 56.6995 126.732 56.3084 126.552 55.9573C126.321 55.5086 126.234 55.0688 126.26 54.4803C126.301 53.582 126.142 53.3502 125.48 53.3457C125.139 53.3433 125.12 53.2796 125.12 52.1248V50.9059L124.579 50.6445C124.124 50.4244 123.992 50.229 123.747 49.4078C123.586 48.8715 123.43 48.5083 123.4 48.6008C123.37 48.6932 123.204 48.7317 123.032 48.6863C122.837 48.6344 122.717 48.6867 122.711 48.8249C122.706 48.9469 122.614 48.7913 122.506 48.4792C122.3 47.8825 122.339 47.1821 122.579 47.1821C122.656 47.1821 122.72 46.9016 122.72 46.5586C122.72 45.9433 122.358 45.3985 121.95 45.3985C121.848 45.3985 121.582 45.1067 121.36 44.75C120.946 44.0848 119.883 43.7784 119.813 44.3041ZM64.8944 45.5124C64.6384 45.5538 64.2648 45.6961 64.0644 45.829C63.864 45.9624 63.3384 46.1679 62.8968 46.2858C62.4552 46.4038 61.7844 46.7544 61.4068 47.0649C61.0292 47.3754 60.4312 47.7767 60.078 47.9571C59.3216 48.3425 58.6152 49.0207 58.4628 49.5067C58.4032 49.6968 58.1568 50.109 57.9152 50.4224C57.116 51.46 56.4164 53.6238 56.638 54.3737C56.7832 54.8649 56.782 55.3141 56.6312 56.34L56.436 57.6691L57.1016 58.8239C57.4676 59.4591 57.8704 60.0375 57.9964 60.1089C58.1228 60.1806 58.446 60.712 58.7148 61.2905C59.6724 63.3516 59.9908 63.804 60.5908 63.9568C60.8208 64.0152 61.198 64.2681 61.4288 64.5186C62.0904 65.2361 64.4448 65.945 65.26 65.6722C65.8928 65.461 66.8164 65.5048 67.9024 65.7979C68.4308 65.9406 68.588 65.9191 68.9424 65.6556C69.3752 65.3338 70.9656 64.9515 71.2168 65.1088C71.4964 65.2839 71.3524 65.5048 70.7752 65.7861C70.3204 66.0079 70.148 66.2178 70 66.7326C69.8956 67.0962 69.6368 67.6317 69.4248 67.9215C69.0796 68.3949 69.04 68.6134 69.04 70.0487V71.6482L69.6192 72.1857C69.9596 72.5023 70.248 72.9538 70.3192 73.2826C70.4964 74.0997 71.768 75.5241 72.4984 75.7231C75.6216 76.5756 79.4532 75.5687 79.7788 73.8099C79.8448 73.4516 80.0928 73.0227 80.4076 72.722C81.468 71.7086 81.3676 69.4618 80.1524 67.0289C79.3544 65.431 79.3352 65.1955 80 65.1781C80.132 65.1745 80.6 64.9568 81.04 64.6945C81.48 64.4319 82.216 64.0338 82.6756 63.8105C84.8824 62.7367 85.0952 58.7956 82.9864 58.0505C82.7128 57.9541 82.2992 57.6906 82.0668 57.4648C81.0308 56.4592 78.6024 56.4267 77.8856 57.4093C77.6956 57.6699 77.4172 57.8831 77.2676 57.8831C76.8096 57.8831 76.3312 58.417 76.178 59.0992C76.048 59.6764 76.0304 59.601 76.016 58.4109C76.0044 57.4369 76.0916 56.8049 76.338 56.0842C76.722 54.9602 76.67 54.1532 76.1588 53.304C75.984 53.0133 75.8408 52.6384 75.8404 52.4706C75.8404 52.3028 75.5912 51.9278 75.2876 51.6376C74.9836 51.347 74.6884 50.9218 74.6316 50.6919C74.5748 50.4625 74.1216 49.927 73.624 49.5022C72.5504 48.5845 72.4856 48.5023 72.4824 48.0479C72.48 47.7191 71.664 46.8578 71.3548 46.8578C71.2776 46.8578 70.9488 46.6754 70.6248 46.4524C70.1876 46.1517 69.824 46.0467 69.2176 46.0455C68.768 46.0443 68.076 45.9441 67.68 45.8225C66.8052 45.5538 65.5252 45.4115 64.8944 45.5124ZM120.93 46.5221C121.056 46.9076 120.438 46.621 120.295 46.2283C120.16 45.8582 120.17 45.8521 120.508 46.0799C120.703 46.2108 120.893 46.4099 120.93 46.5221ZM42.9276 46.2623C42.8736 46.3507 42.8408 46.711 42.8544 47.0629C42.8736 47.5578 42.8272 47.6826 42.65 47.6137C42.524 47.5647 42.39 47.6117 42.3524 47.7179C42.3148 47.8245 42.2276 47.8586 42.1592 47.7941C42.0904 47.7293 42.1324 47.5469 42.2524 47.3888C42.3724 47.2303 42.2744 47.2777 42.0352 47.4942C41.5992 47.8878 41.4596 48.0997 41.76 47.9117C41.9608 47.7856 41.9604 47.8638 41.7572 48.4058C41.636 48.7284 41.5132 48.818 41.2772 48.7556C41.1028 48.7094 40.9192 48.739 40.8692 48.8213C40.8188 48.9035 40.7188 48.9339 40.6464 48.8885C40.4684 48.7771 40.328 49.6769 40.3676 50.6745C40.3984 51.454 40.3812 51.4909 40 51.4641C39.2612 51.4122 39.1268 51.7746 39.1228 53.8297L39.12 55.37L38.48 55.4511C37.8844 55.5265 37.8216 55.5962 37.896 56.0996C37.9504 56.4677 39.06 56.2666 39.4924 55.8106C40.6804 54.5577 40.9552 53.9225 40.6636 53.1045C40.2728 52.0105 40.4688 51.3976 41.2088 51.3976C41.7392 51.3976 41.7436 51.3915 41.7916 50.563C41.842 49.6956 41.908 49.6149 42.7836 49.3494C43.4972 49.133 43.6044 48.8273 43.426 47.5189C43.34 46.8878 43.326 46.3714 43.3948 46.3714C43.4636 46.3714 43.52 46.3106 43.52 46.2364C43.52 46.0467 43.0464 46.0674 42.9276 46.2623ZM107.84 46.268C107.84 46.4184 107.707 46.463 107.423 46.4078C106.704 46.2684 106.428 47.3507 107.04 47.9117C107.216 48.073 107.36 48.3012 107.36 48.4183C107.36 48.5355 107.508 48.9202 107.69 49.2732C107.998 49.8711 108.003 49.9481 107.77 50.4049C107.166 51.5898 107.729 52.1317 109.326 51.9023C109.395 51.8921 109.431 51.2173 109.406 50.4025L109.36 48.921L108.812 48.8602C108.114 48.7836 108.174 48.9157 108.134 47.3758C108.106 46.3361 107.84 45.3321 107.84 46.268ZM67.5688 46.4682C69.2528 46.7394 71.2164 47.4342 71.76 47.9506C75.1872 51.2091 76.3536 54.3769 75.286 57.5264C74.8864 58.7048 74.85 58.9626 74.9936 59.5981C75.1532 60.3039 75.1436 60.3334 74.6588 60.682C74.3844 60.879 73.9044 61.2965 73.5916 61.6099C70.618 64.5916 69.83 64.9414 66.1384 64.9171L63.2368 64.898L62.2984 64.3249C61.7824 64.0099 61.1472 63.6536 60.8872 63.5332C60.3368 63.2787 58.906 61.243 57.984 59.4024L57.3664 58.1685L57.3944 55.7466C57.4368 52.1147 58.3696 49.7292 60.156 48.6839C60.5772 48.4374 61.308 47.9749 61.7808 47.6559C63.8232 46.2765 64.9472 46.0459 67.5688 46.4682ZM31.58 48.2789C31.4812 48.3446 31.3464 48.6535 31.2808 48.9656C31.0956 49.846 30.746 50.4248 30.3996 50.4248C29.8296 50.4248 29.5352 51.1269 29.7472 51.9809C29.9808 52.9213 29.868 53.3027 29.356 53.3027C28.6496 53.3027 28.4512 53.6209 28.568 54.5674C28.6676 55.3757 28.646 55.4434 28.096 56.0603C27.7792 56.4158 27.52 56.8094 27.52 56.9354C27.52 57.0615 27.3788 57.5714 27.2068 58.0684C26.7512 59.3809 27.2392 60.8652 27.8908 60.1506C28.0404 59.9869 28.0212 59.9642 27.8 60.0432C27.5684 60.1255 27.52 60.046 27.52 59.5803C27.52 59.0469 27.5484 59.0181 28.0748 59.0181C28.5268 59.0181 28.6108 59.0684 28.5276 59.2881C28.462 59.462 28.4884 59.5183 28.6024 59.447C28.7 59.3857 28.7656 58.9755 28.7496 58.5284C28.7332 58.0842 28.7664 57.7206 28.8228 57.721C28.8796 57.721 28.9688 57.6079 29.0212 57.4693C29.0756 57.325 29.0488 57.2601 28.958 57.3169C28.8672 57.374 28.8 57.2054 28.8 56.92C28.8 56.5978 28.8844 56.4154 29.04 56.3996C29.172 56.3862 29.37 56.368 29.48 56.359C29.59 56.3501 29.6628 56.4316 29.642 56.5398C29.6208 56.648 29.6964 56.7003 29.8092 56.6566C29.9936 56.5848 30.0704 55.8528 30.134 53.5565C30.1396 53.3615 30.2028 53.2387 30.2748 53.2837C30.3464 53.3287 30.3584 53.4519 30.3012 53.5573C30.244 53.6623 30.4384 53.5127 30.7332 53.2241C31.0604 52.9039 31.2788 52.5249 31.2936 52.2513C31.3072 52.0048 31.3276 51.5979 31.3392 51.3474C31.3508 51.0892 31.4292 50.9355 31.52 50.9923C31.608 51.0474 31.68 51.0154 31.68 50.9209C31.68 50.8265 31.6088 50.7491 31.5216 50.7491C31.4348 50.7491 31.3772 50.5813 31.394 50.3766C31.4244 50.0053 32.16 49.7418 32.16 50.1021C32.16 50.1905 32.2296 50.2627 32.3148 50.2627C32.4004 50.2627 32.4284 50.1532 32.378 50.0195C32.3272 49.8857 32.3676 49.7763 32.468 49.7763C32.576 49.7763 32.6348 49.5497 32.6132 49.2197C32.5928 48.9133 32.5364 48.6668 32.488 48.6713C32.4396 48.6757 32.346 48.662 32.28 48.6401C32.214 48.6186 32.07 48.5882 31.96 48.5732C31.85 48.5578 31.778 48.4577 31.8 48.3503C31.8464 48.1245 31.8244 48.1172 31.58 48.2789ZM122.296 50.6263C122.238 50.7215 122.256 50.7592 122.335 50.7102C122.523 50.5942 122.895 51.0004 122.75 51.1633C122.69 51.2314 122.724 51.2391 122.826 51.18C122.928 51.1204 122.994 50.9509 122.972 50.8026C122.928 50.4925 122.453 50.3693 122.296 50.6263ZM64.0704 52.4483C63.8016 52.6562 63.7924 52.7105 64 52.8512C64.496 53.1876 65.24 52.9209 65.0684 52.4677C64.9452 52.1427 64.4776 52.1337 64.0704 52.4483ZM67.8916 52.4677C67.7072 52.9546 68.4564 53.1957 68.81 52.7636C68.9836 52.5516 68.98 52.4827 68.7896 52.3607C68.4316 52.1309 67.9996 52.1824 67.8916 52.4677ZM68.72 52.5326C68.7744 52.6218 68.6708 52.6947 68.4896 52.6947C68.3084 52.6947 68.16 52.6218 68.16 52.5326C68.16 52.4434 68.2636 52.3705 68.3904 52.3705C68.5172 52.3705 68.6656 52.4434 68.72 52.5326ZM109.487 52.8236C109.37 52.8994 109.252 53.6128 109.186 54.6558C109.058 56.6541 109.208 57.1669 109.868 56.9987C110.092 56.9419 110.37 56.9804 110.495 57.0854C110.686 57.2455 110.72 57.0125 110.72 55.552C110.72 54.5492 110.655 53.8297 110.565 53.8297C110.48 53.8297 110.452 53.7202 110.502 53.5865C110.553 53.4527 110.514 53.3433 110.417 53.3433C110.32 53.3433 110.24 53.2659 110.24 53.1714C110.24 53.077 110.33 53.0547 110.44 53.1216C110.576 53.2042 110.57 53.1556 110.42 52.9691C110.183 52.672 109.999 52.593 110.16 52.8569C110.214 52.946 110.183 53.019 110.09 53.019C109.996 53.019 109.92 52.946 109.92 52.8569C109.92 52.6647 109.754 52.6522 109.487 52.8236ZM63.1936 53.441C63.0892 53.7198 63.084 53.9391 63.18 54.0364C63.4084 54.2679 63.68 54.0234 63.68 53.5865C63.68 53.0194 63.3848 52.9314 63.1936 53.441ZM65.3692 53.6068C65.3092 53.8491 65.0052 54.2841 64.6936 54.5735C64.1696 55.0599 64.1356 55.1483 64.2372 55.7575C64.5424 57.5897 67.724 58.0708 68.078 56.3384C68.1232 56.1179 68.192 55.7733 68.2312 55.5727C68.274 55.3554 68.0924 54.8147 67.7824 54.235L67.262 53.2622L66.37 53.214C65.5172 53.1682 65.4736 53.1852 65.3692 53.6068ZM67.0944 53.6205C68.044 54.2152 68.3124 56.2926 67.5232 56.9403C66.0032 58.1875 63.5912 56.0121 64.9184 54.5905C65.184 54.306 65.4884 53.9018 65.5944 53.6927C65.7804 53.3263 66.5644 53.2886 67.0944 53.6205ZM69.4152 53.6975C69.1376 54.2006 69.158 57.4579 69.4408 57.8033C69.902 58.3659 70.08 57.7781 70.08 55.6943C70.08 53.5439 69.8616 52.8885 69.4152 53.6975ZM69.92 55.6943C69.92 57.935 69.6676 58.4705 69.5756 56.4243C69.5036 54.8135 69.5868 53.6676 69.776 53.6676C69.8552 53.6676 69.92 54.5796 69.92 55.6943ZM126.08 56.8386C126.08 57.2265 126.007 57.3967 125.84 57.3967C125.708 57.3967 125.6 57.2873 125.6 57.1535C125.6 57.0197 125.5 56.9103 125.379 56.9103C124.847 56.9103 125.005 56.3424 125.545 56.3112C126.054 56.282 126.08 56.308 126.08 56.8386ZM133.188 57.0031C133.479 57.2978 133.491 57.3886 133.282 57.721C132.977 58.2054 132.335 57.4052 132.599 56.8698C132.694 56.6768 132.916 56.7271 133.188 57.0031ZM29.3208 57.2767C29.306 57.4786 29.3876 57.5617 29.5672 57.5264C29.9528 57.4514 30.0212 56.9229 29.6416 56.9517C29.4748 56.9646 29.3336 57.1077 29.3208 57.2767ZM37.8464 57.0388C37.508 57.3821 37.7784 59.3079 38.176 59.3853C39.1128 59.5665 39.404 59.0505 39.2056 57.5589C39.146 57.1118 38.1504 56.7307 37.8464 57.0388ZM63.0328 57.4101C62.7988 57.8539 63.2756 58.4802 63.6244 58.1871C63.8916 57.9622 63.9028 57.5252 63.648 57.267C63.376 56.9914 63.2368 57.0238 63.0328 57.4101ZM81.3252 57.3132C83.1644 58.1742 84.0284 59.5876 83.7068 61.2114C83.2124 63.7043 80.6676 65.3394 78.9564 64.2641C77.074 63.0809 76.7592 62.5466 76.7356 60.5008L76.72 59.1462L77.52 58.4218C78.9312 57.1442 80.1836 56.7794 81.3252 57.3132ZM63.6088 57.573C63.7736 57.8434 63.4028 58.1535 63.182 57.9297C62.9972 57.7425 63.1128 57.3967 63.36 57.3967C63.4376 57.3967 63.5496 57.4762 63.6088 57.573ZM110.432 57.9156C109.79 58.5657 110.32 59.6358 111.345 59.7611L112 59.8409V58.9755C112 57.982 111.817 57.721 111.12 57.721C110.847 57.721 110.538 57.8086 110.432 57.9156ZM64.2096 58.7968C64.1112 59.0566 64.28 59.3432 64.5296 59.3399C64.644 59.3383 64.6248 59.2763 64.4812 59.1847C64.1132 58.9488 64.5228 58.629 65.0284 58.7575C65.536 58.8864 65.5648 59.1397 65.08 59.2094C64.882 59.2378 65.62 59.2613 66.72 59.2613C68.6132 59.2613 68.72 59.2439 68.72 58.937C68.72 58.5349 64.36 58.3991 64.2096 58.7968ZM68.6 58.9776C68.6736 59.2017 68.058 59.2548 67.5732 59.0659C67.3152 58.9658 67.328 58.9382 67.68 58.8373C68.2128 58.6845 68.5192 58.7311 68.6 58.9776ZM28.096 59.6403C28.0452 59.7238 28.1044 59.8766 28.2276 59.9804C28.36 60.0919 28.4892 60.1069 28.544 60.0173C28.5948 59.9338 28.5356 59.781 28.4124 59.6772C28.28 59.5657 28.1508 59.5507 28.096 59.6403ZM80.08 59.6362C80.168 59.7206 80.5056 59.8754 80.83 59.9804C81.1544 60.0858 81.4532 60.2783 81.4936 60.4088C81.542 60.5641 81.5588 60.5487 81.5424 60.3634C81.5264 60.1827 81.2304 59.9735 80.7188 59.7822C80.2796 59.6176 79.992 59.5519 80.08 59.6362ZM79.452 59.9775C79.2912 60.1575 79.204 60.4478 79.2452 60.6666L79.3164 61.0448L79.3384 60.652C79.35 60.4364 79.4792 60.1263 79.6248 59.963C79.7704 59.8 79.8536 59.6666 79.8096 59.6666C79.7656 59.6666 79.6048 59.8065 79.452 59.9775ZM37.8132 62.2049C37.828 63.1996 37.7892 64.0658 37.7268 64.1303C37.5324 64.3305 36.7712 64.258 36.6112 64.0241C36.5036 63.8664 36.4888 63.9078 36.5604 64.166C36.6332 64.4282 36.594 64.5308 36.4204 64.5308C36.2876 64.5308 36.1348 64.6029 36.0812 64.6909C36.0252 64.7829 36.0892 64.8101 36.2316 64.7549C36.422 64.6808 36.48 64.7716 36.48 65.1445C36.48 65.6386 36.134 65.9308 35.7984 65.7209C35.6856 65.6503 35.6632 65.7205 35.7332 65.9227C35.8324 66.2089 35.824 66.2117 35.6276 65.956C35.4408 65.7132 35.4108 65.7732 35.3844 66.4424C35.368 66.8623 35.3284 67.4614 35.2968 67.7735C35.2648 68.0856 35.32 68.3945 35.4192 68.4602C35.548 68.5449 35.5424 68.5802 35.4 68.5818C35.268 68.5834 35.2008 68.8465 35.2024 69.3544C35.2036 69.778 35.2584 70.0394 35.324 69.9352C35.3892 69.8307 35.694 69.7212 36.0012 69.692L36.56 69.6381L36.5728 68.3953C36.5864 67.024 36.8864 66.3143 37.452 66.3143C38.1136 66.3143 38.792 63.6082 38.414 62.4757C38.3004 62.1344 38.1128 61.5272 37.9972 61.1259C37.7952 60.4259 37.788 60.4696 37.8132 62.2049ZM76.508 62.5754C76.7156 63.7331 76.7452 63.787 77.242 63.9175C78.196 64.168 77.7744 64.2936 75.96 64.3001C74.97 64.3034 73.638 64.3613 73 64.4282C71.698 64.5652 71.4312 64.3192 72.28 63.7643C72.522 63.6062 73.224 62.9593 73.84 62.3265C74.4604 61.6889 75.1592 61.1263 75.4068 61.0651C75.6528 61.0039 75.9016 60.8288 75.96 60.6751C76.082 60.3553 76.156 60.6119 76.508 62.5754ZM111.513 60.956C111.289 61.183 110.972 61.4453 110.81 61.5381C110.57 61.6747 110.488 62.0128 110.375 63.3216C110.166 65.7314 110.053 66.2085 109.642 66.3921C109.072 66.6463 109.109 68.099 109.68 67.8773C109.79 67.8339 109.962 67.8805 110.06 67.9807C110.193 68.1152 110.24 68.1096 110.24 67.9584C110.24 67.8461 110.312 67.7995 110.4 67.855C110.508 67.9219 110.508 68.0561 110.4 68.2591C109.827 69.3442 110.551 70.8736 111.56 70.7111C111.627 70.7005 111.768 71.0199 111.874 71.4216C111.98 71.8229 112.152 72.1512 112.256 72.1512C112.46 72.1512 112.656 72.5229 112.724 73.043C112.824 73.8063 113.258 74.666 113.568 74.7142C113.796 74.7495 113.92 74.9364 113.998 75.3628C114.266 76.8176 115.84 76.8119 115.84 75.3563C115.84 74.7698 115.382 74.304 115.018 74.5197C114.81 74.6425 114.532 74.1338 114.736 74.0057C114.847 73.9364 115.02 74.0122 115.144 74.184C115.263 74.3486 115.36 74.4054 115.36 74.3097C115.36 74.0304 114.942 73.7588 114.673 73.8634C114.497 73.9319 114.438 73.8736 114.472 73.6636C114.497 73.5006 114.459 73.2509 114.387 73.1083C114.313 72.964 114.323 72.7674 114.409 72.664C114.494 72.5619 114.518 72.5096 114.464 72.5481C114.308 72.6595 113.944 72.2493 114.04 72.0702C114.088 71.981 114.036 71.9936 113.924 72.0981C113.645 72.3592 113.28 72.1857 113.28 71.7921C113.28 71.5558 113.204 71.4934 113 71.5619C112.754 71.6446 112.75 71.634 112.974 71.4755C113.393 71.1772 112.768 69.7192 112.22 69.7192C112.016 69.7192 111.929 69.3515 111.988 68.7305C112.018 68.4018 111.592 68.035 111.308 68.1456C110.883 68.3106 110.757 67.9985 110.699 66.6386L110.64 65.2604L111.312 65.2109L111.983 65.1615L112.032 62.8847C112.085 60.3638 112.088 60.3728 111.513 60.956ZM27.3868 60.9232C27.3704 61.0464 27.1132 61.1259 26.7308 61.1259C25.594 61.1259 25.6748 62.1587 26.8224 62.2941C27.4796 62.3719 27.5692 62.2426 27.4776 61.3456C27.4424 61.0019 27.4016 60.8117 27.3868 60.9232ZM81.28 60.971C81.28 61.0643 81.1032 61.3196 80.8872 61.5385C80.6712 61.7574 80.5632 61.9366 80.6472 61.9366C80.8868 61.9366 81.44 61.3144 81.44 61.0448C81.44 60.9111 81.404 60.8016 81.36 60.8016C81.316 60.8016 81.28 60.8778 81.28 60.971ZM79.37 61.4039C79.36 61.7582 79.7796 62.1084 80.1896 62.0886C80.3052 62.0829 80.2364 62.0116 80.0364 61.9301C79.836 61.8486 79.6068 61.6164 79.5264 61.4133L79.3804 61.0448L79.37 61.4039ZM21.1436 63.9155C21.1484 65.1789 21.1004 65.2993 20.6068 65.2559C19.988 65.2012 19.84 65.4655 19.8424 66.6179C19.844 67.3714 19.8912 67.6199 20 67.4493C20.0852 67.3155 20.1564 67.279 20.158 67.3682C20.1596 67.4574 20.3744 67.538 20.6356 67.5473C21.4692 67.5773 21.9984 64.4534 21.3636 63.2527C21.152 62.8522 21.1392 62.8899 21.1436 63.9155ZM133.493 63.4769C132.898 65.0233 133.308 67.3568 134.199 67.4947C134.693 67.5709 134.737 67.6434 134.876 68.6142C134.982 69.3503 135.003 69.2153 135.02 67.6876C135.038 66.0885 135.007 65.8753 134.728 65.6718C134.557 65.547 134.454 65.3848 134.498 65.3119C134.542 65.2389 134.398 65.1793 134.177 65.1793C133.792 65.1793 133.773 65.1331 133.727 64.0849C133.683 63.059 133.668 63.0209 133.493 63.4769ZM26.3036 63.8441C25.402 64.4529 25.5068 68.0978 26.4256 68.0978C26.674 68.0978 26.7156 68.2186 26.6932 68.868C26.6684 69.5737 26.6608 69.587 26.6036 69.0301C26.508 68.1071 26.2948 68.3021 26.1692 69.4265C26.0528 70.4691 25.6468 71.0864 25.1936 70.9105C25.0568 70.857 24.9388 70.968 24.8816 71.2044C24.3612 73.3511 24.634 75.7349 25.3676 75.4495C25.678 75.3287 26.0192 75.7171 26.1556 76.347C26.232 76.6984 26.3432 76.848 26.4876 76.7916C26.6492 76.7288 26.7188 76.9226 26.7608 77.5504C26.792 78.0141 26.7852 77.0802 26.746 75.4751C26.6668 72.2339 26.8692 67.6414 27.0492 68.5842C27.1416 69.0674 27.1612 69.0873 27.1788 68.7192C27.2092 68.0954 27.0352 67.6827 26.86 67.9624C26.7636 68.1169 26.724 68.1225 26.7224 67.9815C26.7212 67.8724 26.622 67.8218 26.5024 67.8684C26.2416 67.9697 26.078 67.1521 26.1984 66.3479C26.2536 65.9803 26.3596 65.8222 26.5392 65.8396C27.4604 65.93 27.5064 65.8834 27.4516 64.9175C27.3908 63.8514 26.9304 63.4209 26.3036 63.8441ZM127.514 64.2178C127.425 64.3869 127.372 64.8915 127.396 65.3386C127.442 66.1817 127.516 66.2458 128.348 66.1627C128.638 66.1335 128.762 66.583 128.665 67.3151C128.612 67.7119 128.555 67.7439 127.993 67.6917C127.512 67.6471 127.398 67.6852 127.466 67.8664C127.838 68.8469 129.134 67.7922 129.242 66.4209C129.384 64.6362 128.134 63.0432 127.514 64.2178ZM76.976 64.8757C80.0404 65.9049 81.7384 70.3154 79.9156 72.5108C79.7128 72.7544 79.5016 73.1646 79.4456 73.4216C79.0412 75.2882 73.9064 76.3425 72.1748 74.9149C71.9468 74.7272 71.5308 74.4252 71.2504 74.244C70.282 73.619 69.4156 70.6494 69.7536 69.1156C70.5084 65.6917 73.7468 63.7906 76.976 64.8757ZM73.7764 68.4521C73.9516 68.7849 73.9476 70.0033 73.7676 71.0973C73.6224 71.981 73.6644 72.1508 73.9548 71.8566C74.0612 71.7487 74.5932 71.6648 75.1688 71.6648C76.0716 71.6648 76.2316 71.6166 76.5084 71.2595C76.6816 71.0366 76.9216 70.8541 77.042 70.8541C77.5688 70.8541 77.3836 70.0856 76.6172 69.0893C76.454 68.8765 76.32 68.5777 76.32 68.4253C76.32 68.1845 76.1436 68.1501 74.9764 68.1635C73.7696 68.1773 73.6476 68.2064 73.7764 68.4521ZM75.6612 68.7309C76.318 69.1525 76.2004 71.0548 75.4996 71.3491C74.5464 71.7491 74.1676 71.4297 74.1132 70.1805C74.0516 68.7735 74.7332 68.1355 75.6612 68.7309ZM127.774 69.8728C127.624 71.4208 127.702 78.9647 127.867 78.8625C128.113 78.7097 128.496 79.3141 128.303 79.5496C128.199 79.6761 128.073 79.7373 128.022 79.6858C127.971 79.6343 128.02 79.5346 128.132 79.4649C128.295 79.3631 128.293 79.3023 128.122 79.1588C127.789 78.8783 127.4 79.186 127.67 79.5163C127.81 79.6874 127.82 79.7717 127.7 79.7717C127.486 79.7717 127.456 80.6854 127.665 80.8163C127.745 80.8661 127.775 80.7429 127.731 80.5423C127.668 80.2488 127.686 80.2249 127.824 80.4203C127.959 80.6128 127.996 80.6169 127.998 80.4409C127.999 80.2731 128.053 80.263 128.215 80.3992C128.333 80.4985 128.477 80.5317 128.535 80.473C128.593 80.4142 128.64 80.5674 128.64 80.8139C128.64 81.2403 128.61 81.2577 128 81.1864L127.36 81.1114L127.362 81.86C127.366 83.1057 127.481 83.3387 128.094 83.3387C129.082 83.3387 129.646 81.3181 128.978 80.1718C128.789 79.8467 128.62 79.4101 128.603 79.2014C128.586 78.9926 128.522 78.835 128.462 78.8508C128.322 78.8877 128.315 78.8175 128.345 77.7855L128.37 76.9343L128.48 77.745L128.59 78.5557L128.615 77.6084C128.636 76.8087 128.69 76.6473 128.96 76.576C129.136 76.5294 129.28 76.439 129.28 76.3757C129.28 76.3121 129.438 76.2659 129.631 76.2728C130.051 76.2882 130.204 75.7426 130.265 74.0158C130.331 72.129 129.754 70.294 129.386 71.219C129.342 71.3304 129.3 71.2575 129.293 71.0568C129.28 70.6782 128.975 70.538 128.94 70.8947C128.93 71.0061 128.83 70.6231 128.72 70.0435C128.61 69.4638 128.503 69.1355 128.484 69.3138C128.453 69.5935 128.43 69.5826 128.32 69.2328C128.193 68.8311 128.192 68.8315 128.153 69.3138C128.118 69.7524 128.104 69.7362 128.01 69.1517C127.918 68.5773 127.891 68.66 127.774 69.8728ZM27.2436 70.8541C27.2436 71.2554 27.2748 71.4196 27.3128 71.219C27.3512 71.0183 27.3512 70.69 27.3128 70.4893C27.2748 70.2887 27.2436 70.4529 27.2436 70.8541ZM34.0968 70.9149C33.9748 71.0637 33.9484 71.5145 34.018 72.2704C34.1376 73.576 34.0776 73.6579 33.0172 73.6364C32.4924 73.6259 32.2376 73.707 32.0344 73.9489C31.8836 74.1285 31.5532 74.4917 31.3004 74.7564C31.0476 75.0207 30.9576 75.1913 31.1004 75.1358C31.2892 75.0624 31.36 75.1281 31.36 75.3766C31.36 75.5646 31.378 75.7714 31.4 75.8362C31.422 75.9015 31.2344 75.9704 30.9836 75.9903C30.6024 76.0198 30.5404 75.9736 30.6084 75.7098C30.6536 75.5359 30.6248 75.4345 30.5452 75.4844C30.4652 75.5343 30.4 75.7211 30.4 75.8995C30.4 76.0798 30.3272 76.1783 30.236 76.1212C30.146 76.0648 30.0824 76.0786 30.0948 76.152C30.2236 76.9015 30.0692 77.1775 29.522 77.1775C28.9968 77.1775 28.958 77.2148 28.864 77.8103C28.7672 78.4227 27.8612 78.9444 27.83 78.4061C27.8244 78.31 27.752 78.4025 27.6696 78.6112C27.5868 78.82 27.5556 79.0506 27.6004 79.1236C27.7752 79.4106 27.4708 79.7713 27.0628 79.7604C26.6828 79.7502 26.6724 79.7348 26.96 79.6096C27.136 79.533 27.2036 79.4653 27.1104 79.4588C27.0176 79.4527 26.8016 79.3319 26.6304 79.1909C26.4072 79.0064 26.3916 78.957 26.5744 79.0137C27.1 79.1775 27.196 78.8824 27.2552 76.9258C27.3024 75.366 27.2856 75.1621 27.1688 75.8804C27.0888 76.3709 27.0452 77.2339 27.072 77.7985C27.1196 78.8196 27.118 78.824 26.7068 78.7628C26.256 78.6951 26.1428 79.006 26.4564 79.4474C26.5516 79.5812 26.5648 79.6347 26.4856 79.5666C26.2424 79.357 25.6032 80.9241 25.6016 81.7328C25.5996 82.7627 26.1304 83.3128 26.5376 82.7032C26.682 82.4871 27.07 82.0425 27.4 81.7145C27.73 81.3866 28 81.004 28 80.8637C28 80.3639 28.2 80.096 28.5732 80.096C28.8288 80.096 29.0296 79.944 29.1912 79.627C29.3228 79.3692 29.6484 79.0814 29.9148 78.9874C30.1812 78.8929 30.4808 78.6347 30.5804 78.413C30.68 78.1913 30.9656 77.9246 31.2148 77.8196C31.4644 77.715 31.8128 77.3818 31.9888 77.079C32.1652 76.7766 32.4084 76.529 32.53 76.529C32.8224 76.529 33.28 76.0044 33.28 75.6688C33.28 75.5217 33.4672 75.2773 33.6964 75.1249C33.9256 74.9728 34.2876 74.5882 34.5012 74.27C34.7144 73.9518 35.0672 73.4435 35.2848 73.1407C36.2212 71.8359 35.0852 69.7078 34.0968 70.9149ZM40.084 71.1703C39.59 72.1391 39.8976 73.0576 40.7504 73.1585C41.392 73.2343 41.682 73.0544 41.9064 72.4411C42.3832 71.1387 40.6996 69.9644 40.084 71.1703ZM19.9232 71.1472C19.8776 71.268 19.84 72.2307 19.84 73.2862C19.84 75.6603 19.8404 75.6611 20.6452 75.5833C21.704 75.4811 21.96 74.9891 21.894 73.1816C21.852 72.0296 21.7752 71.6255 21.5496 71.3734C21.1956 70.9778 20.048 70.8181 19.9232 71.1472ZM133.345 71.195C133.096 71.4727 133.03 71.8408 132.986 73.1824C132.92 75.2473 133.169 75.7183 134.332 75.7183H135.04V73.2862V70.8541H134.345C133.842 70.8541 133.565 70.9482 133.345 71.195ZM26.3584 74.2185C26.3264 74.7313 26.3004 74.3117 26.3004 73.2862C26.3004 72.2607 26.3264 71.8412 26.3584 72.3539C26.39 72.8667 26.39 73.7057 26.3584 74.2185ZM114.08 72.7897C114.08 73.1954 113.512 73.1747 113.482 72.7678C113.468 72.5793 113.57 72.4755 113.77 72.4755C113.97 72.4755 114.08 72.587 114.08 72.7897ZM128.629 73.9753C128.621 74.9639 128.571 75.3644 128.48 75.1508C128.245 74.5959 128.323 72.4755 128.579 72.4755C128.612 72.4755 128.635 73.1504 128.629 73.9753ZM127.955 74.3806C127.918 74.6259 127.888 74.4252 127.888 73.9348C127.888 73.4443 127.918 73.2436 127.955 73.4889C127.991 73.7341 127.991 74.1354 127.955 74.3806ZM40.872 73.7856C40.8204 73.8707 40.7192 73.9031 40.6472 73.8582C40.5752 73.8132 40.4276 73.8845 40.3192 74.017C40.2108 74.1492 39.858 74.3377 39.5348 74.4358C38.994 74.5999 38.9524 74.6555 39.0088 75.1423C39.082 75.7775 38.228 77.4325 37.7472 77.5869C37.4312 77.6887 36.96 78.4398 36.96 78.8415C36.96 78.9627 36.744 79.2241 36.48 79.4219C36.216 79.6197 36 79.9241 36 80.0988C36 80.3064 35.8116 80.4957 35.4556 80.6464C35.156 80.7733 34.8648 81.0238 34.8088 81.203C34.746 81.4028 34.448 81.612 34.0368 81.7445C33.6384 81.873 33.2936 82.111 33.1856 82.3315C33.086 82.5354 32.8504 82.8685 32.6624 83.0716C32.4132 83.3404 32.32 83.6472 32.32 84.2005C32.32 85.0015 32.514 85.1774 32.8 84.6358C32.894 84.4575 33.0496 84.3116 33.1452 84.3116C33.264 84.3116 33.26 84.3837 33.132 84.5402C33.0036 84.6966 32.9976 84.8024 33.1124 84.8742C33.2828 84.9812 33.3044 84.9544 33.34 84.5953C33.3508 84.4838 33.45 84.3926 33.56 84.3926C33.67 84.3926 33.76 84.3379 33.76 84.271C33.76 84.2042 33.76 84.104 33.76 84.0485C33.76 83.993 33.652 84.0384 33.52 84.1494C33.3628 84.282 33.28 84.2905 33.28 84.175C33.28 83.9038 33.8376 83.663 34.4644 83.663C34.9132 83.663 35.0756 83.5747 35.2512 83.2346C35.3928 82.9606 35.5136 82.873 35.586 82.9914C35.648 83.0931 35.6108 83.1766 35.5028 83.1766C35.3948 83.1766 35.3544 83.2248 35.4124 83.2836C35.5428 83.4158 36.1608 82.8689 36.1576 82.6245C36.1564 82.5268 36.0932 82.5459 36.0176 82.6671C35.93 82.8069 35.8428 82.8264 35.7784 82.7206C35.722 82.6282 35.9272 82.4705 36.24 82.3659C36.576 82.2536 36.7596 82.1065 36.6952 82.0011C36.628 81.8913 36.6808 81.8605 36.8344 81.9204C37.1524 82.0441 37.4424 81.7502 37.3204 81.428C37.2624 81.2751 37.292 81.2192 37.3956 81.2845C37.56 81.387 37.7992 80.8025 37.8268 80.231C37.8456 79.8439 38.046 79.6907 38.5332 79.6907C38.9556 79.6907 38.9596 79.6797 38.9224 78.6368C38.862 76.9501 38.9328 76.7945 39.7004 76.9189L40.3452 77.0235L40.2936 76.4179C40.2408 75.7969 40.8844 75.4122 41.546 75.6696C41.6636 75.7154 41.7652 75.6903 41.772 75.6141C41.7784 75.5375 41.816 75.2983 41.8552 75.0823C42.016 74.195 41.2436 73.1764 40.872 73.7856ZM32.2744 74.2128C32.1276 74.3612 31.9664 74.4414 31.916 74.3904C31.866 74.3393 31.9448 74.1759 32.0916 74.0276C32.238 73.8788 32.3992 73.799 32.4496 73.8496C32.5 73.9007 32.4208 74.0641 32.2744 74.2128ZM41.618 77.1568C41.6216 77.8293 41.6932 78.5107 41.7776 78.6704C41.8844 78.8718 41.8744 78.961 41.746 78.961C41.6092 78.961 41.6072 79.0178 41.7392 79.1787C41.8372 79.2983 41.882 79.4442 41.8388 79.503C41.7952 79.5617 41.8072 79.5739 41.8652 79.5297C41.9232 79.4859 42.0672 79.5313 42.1852 79.6307C42.338 79.7596 42.4 79.7604 42.4 79.6347C42.4 79.537 42.508 79.4997 42.64 79.5508C42.7956 79.6112 42.88 79.8629 42.88 80.2646C42.88 80.8674 43.2688 81.2451 43.6464 81.0088C43.9916 80.7928 44.144 81.2451 44.1728 82.5726C44.1916 83.4449 44.2688 83.9873 44.3736 83.9873C44.482 83.9873 44.474 84.0582 44.352 84.1819C44.0448 84.4932 44.126 84.5848 44.64 84.5082C44.9056 84.4688 45.12 84.5106 45.12 84.6022C45.12 84.6934 44.976 84.7295 44.8 84.6829C44.6212 84.6354 44.48 84.678 44.48 84.7789C44.48 84.8786 44.696 84.9601 44.96 84.9601H45.44L45.46 86.014C45.4908 87.6463 45.4024 87.4862 46.302 87.5341C46.66 87.5531 46.688 87.6257 46.7476 88.6986C46.8148 89.9037 46.9616 90.1412 47.64 90.1461C47.974 90.1485 48.1276 90.626 48.0188 91.324C48.0084 91.3909 48.0776 91.4456 48.1724 91.4456C48.606 91.4456 49.302 92.4221 49.3272 93.0658C49.3412 93.4229 49.4172 93.7156 49.496 93.7156C49.5748 93.7156 49.5496 93.825 49.44 93.9588C49.2884 94.1436 49.2852 94.2559 49.426 94.4281C49.528 94.5526 49.5908 94.7532 49.5656 94.874C49.5392 95.0021 49.632 95.0751 49.788 95.0487C49.9352 95.0244 50.1016 95.0791 50.1572 95.1703C50.4052 95.5769 50.5392 95.2413 50.6456 93.9466C50.7692 92.4444 50.7096 92.2786 50.0272 92.2215C49.52 92.1789 49.3108 91.669 49.5864 91.1473C49.9676 90.425 49.5972 89.5 48.9268 89.5C48.5012 89.5 48.2928 89.0821 48.408 88.4595C48.5768 87.5487 48.3972 87.119 47.76 86.9058C47.2164 86.7242 47.2 86.6938 47.1976 85.8798C47.1948 84.9354 47.0856 84.6885 46.5504 84.4182C46.2848 84.284 46.0924 83.9378 45.8828 83.2167C45.7024 82.5953 45.5016 82.2038 45.3632 82.2038C44.9892 82.2038 44.64 81.5248 44.64 80.7972C44.64 79.8467 44.3544 79.3044 43.7108 79.0316C43.2512 78.837 43.18 78.7405 43.2696 78.4345C43.7256 76.8788 43.364 75.9749 42.2744 75.9493L41.6116 75.9339L41.618 77.1568ZM128.115 78.1098C128.078 78.355 128.048 78.1544 128.048 77.6639C128.048 77.1735 128.078 76.9728 128.115 77.218C128.151 77.4633 128.151 77.8646 128.115 78.1098ZM116.829 77.4073C116.302 78.1434 116.705 78.8877 117.691 78.9999C118.317 79.0709 118.342 79.0563 118.342 78.612C118.342 78.3583 118.283 78.1503 118.211 78.1503C118.139 78.1503 118.08 78.0044 118.08 77.8261C118.08 77.61 117.973 77.5018 117.76 77.5018C117.584 77.5018 117.44 77.441 117.44 77.3668C117.44 77.1702 116.977 77.201 116.829 77.4073ZM134.914 77.94C134.862 79.2233 134.557 79.7279 133.89 79.6323C133.765 79.6144 133.214 81.0538 133.048 81.8313C132.974 82.1823 133.026 82.5378 133.208 82.9285C133.612 83.7907 133.828 83.8381 133.702 83.0364C133.538 81.9962 133.703 81.5552 134.257 81.5552C134.55 81.5552 134.72 81.4709 134.72 81.3254C134.72 81.1993 134.794 81.0708 134.886 81.04C134.991 81.0044 135.032 80.2796 135 79.0401C134.972 77.9712 134.933 77.4763 134.914 77.94ZM19.8612 80.8256C19.8608 81.8556 19.9028 82.1774 20.0048 81.92C20.4472 80.8049 21.3764 81.6926 21.1896 83.0522L21.0948 83.7441L21.4204 83.3387C22.0624 82.539 21.5568 79.4049 20.8312 79.687C20.7036 79.7369 20.5004 79.6943 20.3796 79.5926C20.2068 79.4474 20.1576 79.4726 20.1488 79.7113C20.1384 79.9938 20.128 79.9922 20 79.6907C19.9096 79.4778 19.862 79.8674 19.8612 80.8256ZM38.0676 79.8394C38.0612 79.8467 38.0312 79.9805 38.002 80.1365C37.9312 80.5098 38.186 80.5009 38.3856 80.1232C38.5088 79.8901 38.2396 79.6497 38.0676 79.8394ZM118.88 79.9116C118.88 80.0076 118.784 80.0486 118.666 80.0028C118.526 79.948 118.306 80.2439 118.029 80.8588C117.796 81.3757 117.605 81.7409 117.603 81.6703C117.601 81.6002 117.452 81.6821 117.272 81.8528C117.021 82.0891 116.952 82.3335 116.98 82.8823L117.017 83.6014L117.668 83.573C118.702 83.528 118.813 83.5057 118.64 83.3768C118.389 83.19 118.408 82.2577 118.662 82.2577C118.782 82.2577 118.88 82.3185 118.88 82.3931C118.88 82.4673 118.956 82.5281 119.05 82.5281C119.143 82.5281 119.178 82.46 119.127 82.3773C119.076 82.2942 119.103 82.1835 119.186 82.1312C119.27 82.0789 119.39 82.1219 119.454 82.2261C119.526 82.344 119.5 82.3728 119.386 82.3015C119.266 82.2257 119.238 82.2784 119.306 82.4563C119.4 82.7056 119.419 82.7052 119.56 82.449C119.656 82.2767 119.657 82.1154 119.563 82.0202C119.48 81.9363 119.46 81.5516 119.518 81.1649C119.608 80.5625 119.57 80.4105 119.252 80.1C119.047 79.9006 118.88 79.8159 118.88 79.9116ZM33.0668 83.8791C33.0668 83.9982 32.9708 84.0955 32.8532 84.0955C32.6236 84.0955 32.5744 83.9455 32.7468 83.7712C32.9188 83.5965 33.0668 83.6464 33.0668 83.8791ZM45.44 83.9873C45.44 84.3667 45.0416 84.4174 44.7084 84.0801C44.3752 83.7425 44.4232 83.663 44.96 83.663C45.3332 83.663 45.44 83.7352 45.44 83.9873ZM127.579 83.9468C127.646 84.0607 127.621 84.1494 127.521 84.1494C127.408 84.1494 127.36 84.4324 127.391 84.9196L127.44 85.6897H128.075C128.843 85.6897 129.214 85.1839 128.922 84.5349C128.754 84.16 128.223 83.8689 128.043 84.0521C127.991 84.104 127.839 84.0562 127.704 83.9455C127.508 83.7846 127.483 83.785 127.579 83.9468ZM114.042 84.5953C113.906 84.7514 113.767 85.1891 113.733 85.5681L113.672 86.2572H114.676C115.228 86.2572 115.68 86.196 115.68 86.121C115.68 86.0464 115.899 85.9982 116.166 86.0144C116.434 86.0306 116.699 85.967 116.756 85.8738C116.929 85.5904 116.948 84.9715 116.786 84.8705C116.703 84.8183 116.676 84.708 116.726 84.6253C116.783 84.5333 116.666 84.5333 116.426 84.6261C116.144 84.7343 115.949 84.7129 115.736 84.5495C115.314 84.2248 114.342 84.2512 114.042 84.5953ZM21.12 85.3598V86.2264L21.76 86.164C22.2428 86.117 22.4 86.1595 22.4 86.3383C22.4 86.5065 22.2596 86.5584 21.9168 86.5183C21.6508 86.4866 21.3828 86.543 21.3212 86.6431C21.1144 86.9783 21.1116 87.4489 21.3152 87.5766C21.476 87.6771 21.4768 87.744 21.3188 87.9041C20.8272 88.4023 21.0756 88.9001 21.76 88.789L22.4 88.6856L22.4052 89.4574C22.4108 90.2288 22.4108 90.2292 22.7052 89.8721C23.0168 89.4935 22.9704 88.6277 22.6024 87.9613C22.462 87.7067 22.5052 87.5555 22.8312 87.1628C23.6352 86.1944 22.994 84.5803 21.7832 84.524L21.12 84.4932V85.3598ZM132.36 84.6764C131.61 85.6285 131.517 86.5223 132.095 87.2187L132.51 87.7189L132.175 88.2945C131.991 88.6111 131.839 89.0298 131.838 89.2256C131.834 89.6735 131.602 90.0569 131.408 89.9353C130.86 89.592 130.23 91.6791 130.641 92.4776C131.017 93.2081 130.656 94.2449 130.19 93.7727C130.035 93.6158 129.466 94.703 129.355 95.3673C129.276 95.8375 129.136 96.0528 128.785 96.2364C128.383 96.4472 128.32 96.5732 128.319 97.165C128.318 98.1752 128.026 99.0896 127.675 99.1824C127.314 99.2781 126.998 99.743 126.73 100.572C126.621 100.909 126.358 101.301 126.146 101.441C125.829 101.651 125.76 101.833 125.76 102.454C125.76 103.302 125.418 103.93 124.956 103.93C123.998 103.93 124.283 105.62 125.249 105.663C125.976 105.696 126.273 105.376 126.149 104.696C126.12 104.537 126.16 104.447 126.237 104.496C126.315 104.544 126.421 104.513 126.474 104.426C126.527 104.34 126.688 104.314 126.831 104.37C126.994 104.434 127.053 104.407 126.987 104.299C126.929 104.204 126.994 104.083 127.131 104.029C127.325 103.954 127.374 103.706 127.352 102.918C127.312 101.494 127.31 101.498 127.808 101.498C128.054 101.498 128.349 101.589 128.462 101.701C128.628 101.864 128.662 101.841 128.636 101.579C128.618 101.401 128.612 100.756 128.622 100.147L128.64 99.0397L129.192 99.1151C129.797 99.1978 129.952 98.906 129.952 97.6831C129.952 97.0702 130.408 96.54 130.802 96.6936C130.942 96.7479 131.016 96.7252 130.966 96.6434C130.916 96.5615 130.945 96.4504 131.03 96.3969C131.116 96.343 131.178 96.101 131.168 95.8586C131.094 94.0852 131.242 93.2964 131.655 93.2616C132.393 93.2 132.484 92.6211 131.756 92.6211C131.244 92.6211 131.241 92.6183 131.175 91.932L131.12 91.3646H131.8H132.48V90.6657C132.48 90.2758 132.546 90.0083 132.629 90.0606C132.711 90.1116 132.825 90.076 132.883 89.9811C132.956 89.8619 133.061 89.8697 133.223 90.0058C133.412 90.1643 133.448 90.1579 133.409 89.9734C133.382 89.8441 133.46 89.7651 133.587 89.793C133.764 89.8315 133.774 89.7926 133.628 89.6159C133.526 89.4911 133.496 89.3354 133.561 89.2697C133.626 89.2041 133.694 88.543 133.713 87.8012L133.747 86.4522L133.114 86.5381C132.586 86.6099 132.48 86.577 132.48 86.3419C132.48 86.1153 132.589 86.0724 133.036 86.1255C133.668 86.2001 133.76 86.0704 133.76 85.1089C133.76 84.4356 132.786 84.1348 132.36 84.6764ZM30.08 85.2747C30.08 85.4478 30.1512 85.6342 30.238 85.6885C30.3308 85.7469 30.3544 85.6768 30.2948 85.5195C30.2372 85.3679 30.29 85.1895 30.4168 85.1085C30.5956 84.9938 30.584 84.9646 30.36 84.9626C30.1888 84.9609 30.08 85.0821 30.08 85.2747ZM111.687 86.0055C111.356 86.41 111.818 87.1465 112.41 87.1595C112.677 87.1652 112.981 87.2244 113.087 87.2909C113.224 87.376 113.28 87.245 113.28 86.8434C113.28 85.9658 112.19 85.3922 111.687 86.0055ZM28.59 86.9244C28.2532 87.7931 28.5356 88.6625 29.1436 88.6289C29.6288 88.6021 29.8984 88.3573 29.8324 88.0034C29.8032 87.8494 29.8508 87.6788 29.9376 87.6245C30.0364 87.5624 30.0176 87.4279 29.8876 87.2657C29.7124 87.046 29.7176 87.027 29.92 87.1429C30.052 87.2183 29.9484 87.0501 29.69 86.7688C29.074 86.0983 28.9004 86.1231 28.59 86.9244ZM127.392 87.0274L127.44 87.7975H126.786C126.058 87.7975 126.093 87.7209 126.084 89.3455C126.078 90.4858 125.753 90.748 125.064 90.1692C124.827 89.9694 124.8 90.0062 124.8 90.534C124.8 90.8603 124.88 91.1214 124.98 91.1214C125.104 91.1214 125.109 91.1842 124.996 91.324C124.906 91.4355 124.826 92.0626 124.817 92.7172C124.799 94.0406 124.74 94.2308 124.389 94.0941C124.114 93.9875 123.52 94.4667 123.52 94.7946C123.52 95.0175 123.599 95.0487 124.16 95.0487C124.336 95.0487 124.552 95.0406 124.639 95.0305C124.727 95.0208 124.951 94.6835 125.138 94.2814C125.361 93.799 125.607 93.5169 125.86 93.4529C126.343 93.3301 126.502 92.7379 126.262 91.9551C126.048 91.2551 126.551 90.0245 127.164 89.7464C127.893 89.4161 128.314 87.0849 127.748 86.5122C127.375 86.1336 127.34 86.1847 127.392 87.0274ZM113.194 87.6832C113.225 87.7148 113.189 87.9593 113.114 88.226C112.848 89.1635 113.588 89.984 114.136 89.3609C114.474 88.9771 114.545 88.1234 114.24 88.1226C114.108 88.1222 114 88.0189 114 87.8928C114 87.757 113.825 87.6561 113.568 87.6447C113.331 87.6342 113.162 87.6516 113.194 87.6832ZM28.5544 89.5125C28.3236 90.031 28.3156 90.1943 28.4956 90.6986C28.6608 91.1619 28.6644 91.3954 28.512 91.8218C28.176 92.7642 28.4112 93.5534 29.028 93.5534C29.5808 93.5534 29.9372 93.8667 29.762 94.1979C29.3508 94.9766 29.662 96.0459 30.4472 96.553C30.8092 96.7868 31.0092 97.0921 31.164 97.6474C31.3432 98.2899 31.442 98.4175 31.76 98.4175C32.2688 98.4175 32.3548 98.6016 32.342 99.6668C32.3328 100.471 32.5 101.1 32.786 101.336C32.8992 101.43 33.5268 102.739 33.66 103.16C33.7428 103.422 34.4304 103.555 35.172 103.453C35.2884 103.437 35.4768 103.502 35.5908 103.598C35.7404 103.724 35.8464 103.712 35.9756 103.555C36.1132 103.387 36.0452 103.257 35.6768 102.981C35.4144 102.784 35.2 102.479 35.2 102.304C35.2 102.128 35.146 101.98 35.08 101.973C33.8624 101.86 33.9544 101.973 33.8968 100.525C33.8508 99.3584 33.8244 99.2854 33.2444 98.7139C32.7752 98.2518 32.64 97.9936 32.64 97.5582C32.64 96.902 32.4084 96.6746 31.8 96.7337C31.3248 96.7804 31.3408 96.8622 31.3184 94.2522C31.3164 94.0573 31.0624 93.656 30.7536 93.3605C30.4448 93.0654 30.24 92.9101 30.2984 93.0151C30.3572 93.1205 30.3464 93.2437 30.2748 93.2887C30.2028 93.3337 30.1384 93.2109 30.1316 93.0159C30.1248 92.821 30.1004 92.095 30.0776 91.4018C30.0376 90.1826 30.0168 90.1226 29.4292 89.5271L28.8216 88.9118L28.5544 89.5125ZM29.28 89.1558C29.28 89.3601 29.7496 89.7266 29.8636 89.611C30.0276 89.4453 29.7828 89.0136 29.5252 89.0136C29.3904 89.0136 29.28 89.0776 29.28 89.1558ZM133.074 89.3865C132.88 89.5916 132.69 89.7379 132.654 89.712C132.561 89.6439 133.143 89.0136 133.299 89.0136C133.37 89.0136 133.269 89.1814 133.074 89.3865ZM22.6084 90.277C22.3208 90.4623 22.368 92.7427 22.6592 92.7427C22.7808 92.7427 22.88 92.8157 22.88 92.9049C22.88 92.994 22.808 93.067 22.72 93.067C22.632 93.067 22.56 93.2348 22.56 93.4399C22.56 93.7703 22.6236 93.8051 23.12 93.7464L23.68 93.6799V94.4857C23.68 95.7731 23.8564 96.7795 24.0676 96.6973C24.2716 96.6182 24.9912 97.3097 24.9484 97.544C24.8344 98.1687 24.9816 99.2501 25.16 99.1001C25.4068 98.8934 26.2364 99.0361 26.2492 99.2878C26.2544 99.3888 26.2612 99.9639 26.264 100.566C26.2672 101.168 26.3348 101.66 26.4148 101.66C26.4948 101.66 26.56 101.597 26.56 101.52C26.56 101.364 27.3288 101.413 27.4928 101.579C27.5504 101.637 27.5988 102.257 27.6 102.957C27.6028 104.364 27.6432 104.456 28.27 104.49C28.6252 104.509 28.7088 104.595 28.728 104.959C28.7604 105.579 28.98 105.744 29.6896 105.684C30.768 105.593 30.8328 104.088 29.7684 103.851C29.2612 103.738 29.204 103.626 29.0424 102.421C28.9848 101.992 28.8384 101.603 28.7176 101.556C28.5964 101.509 28.3112 100.976 28.0836 100.373C27.7956 99.6088 27.5528 99.2217 27.2848 99.0977C26.8712 98.9068 26.5624 98.0823 26.5608 97.165C26.56 96.7487 26.4624 96.5911 26.08 96.3908C25.816 96.2526 25.5948 96.0499 25.588 95.9409C25.5244 94.8773 25.1792 94.2105 24.5556 93.9466C24.244 93.8145 23.9096 93.5299 23.8128 93.3143C23.7156 93.0982 23.484 92.8915 23.298 92.8542L22.96 92.7869L23.2952 92.7646C24.1184 92.7107 24.526 91.5174 24.0084 90.6755C23.6836 90.1465 23.078 89.9742 22.6084 90.277ZM113.936 91.1619C113.922 91.4168 113.741 91.5194 113.4 91.4647C113.334 91.4541 113.298 91.5348 113.32 91.6438C113.346 91.7719 113.106 91.8571 112.64 91.885C111.204 91.9701 110.889 93.7156 112.31 93.7156C112.868 93.7156 113.08 93.9758 113.036 94.6073C113.017 94.8748 112.992 95.2234 112.981 95.3815C112.968 95.5655 112.783 95.705 112.469 95.7686C111.312 96.0033 111.227 97.9311 112.374 97.9311C113.031 97.9311 113.28 97.6823 113.28 97.0272C113.28 96.5858 113.348 96.4986 113.756 96.416C114.283 96.3093 114.346 96.1472 114.444 94.6555C114.479 94.1217 114.443 93.7695 114.359 93.8226C114.278 93.8728 114.237 93.7054 114.266 93.4501C114.316 93.0248 114.282 92.9904 113.862 93.0407C113.552 93.0771 113.44 93.0358 113.516 92.9118C113.577 92.8108 113.558 92.6406 113.472 92.5328C113.158 92.1367 113.547 91.5798 114.078 91.6645C114.502 91.7322 114.56 91.6941 114.56 91.3504C114.56 90.8563 114.246 90.8315 114.224 91.324C114.209 91.6738 114.203 91.6722 114.08 91.2835C113.994 91.0131 113.946 90.9726 113.936 91.1619ZM48.17 91.7853C48.158 92.097 48.6564 92.5846 48.9724 92.5705C49.0976 92.5648 49.0364 92.4934 48.8364 92.412C48.636 92.3305 48.4068 92.0982 48.3264 91.8952C48.2324 91.658 48.1768 91.6187 48.17 91.7853ZM113.76 92.2421C113.76 92.6276 114.276 92.5919 114.332 92.2024C114.358 92.0305 114.26 91.932 114.066 91.932C113.871 91.932 113.76 92.0447 113.76 92.2421ZM131.594 93.5644C131.424 93.8424 131.576 93.8696 131.911 93.6211C132.17 93.429 132.178 93.3913 131.96 93.3913C131.816 93.3913 131.652 93.4691 131.594 93.5644ZM123.562 95.9652C123.649 96.7297 123.592 96.7974 122.828 96.8262C122.303 96.8464 122.281 96.8728 122.289 97.4593C122.296 97.9498 122.197 98.1606 121.789 98.5237C121.509 98.7726 121.28 99.0693 121.28 99.1832C121.28 99.2971 121.208 99.3904 121.12 99.3904C121.032 99.3904 120.959 99.6275 120.958 99.9173C120.954 100.596 120.813 100.788 120.32 100.782C119.986 100.779 119.923 100.85 119.938 101.219C119.948 101.462 119.91 101.66 119.853 101.66C119.796 101.66 119.735 101.861 119.718 102.106C119.698 102.377 119.491 102.72 119.19 102.98C118.557 103.527 118.707 103.598 120.04 103.386L121.12 103.215L121.145 102.478C121.159 102.073 121.17 101.666 121.169 101.574C121.168 101.481 121.394 101.434 121.676 101.467C122.42 101.555 122.792 100.932 122.664 99.8123C122.556 98.8732 122.666 98.5902 123.122 98.632C123.352 98.6526 123.532 98.4666 123.77 97.964C123.952 97.5805 124.33 97.1257 124.61 96.953C125.198 96.5911 125.17 96.6673 124.944 96.0098C124.844 95.7167 124.656 95.4983 124.504 95.497C124.359 95.4958 124.07 95.4484 123.862 95.3921C123.502 95.2944 123.488 95.3203 123.562 95.9652ZM50.5932 96.7702L50.64 97.8501L51.1992 97.8533C51.6912 97.8566 51.7688 97.9149 51.8496 98.3397C51.9392 98.8128 51.9432 98.8091 52.0444 98.1743C52.1012 97.8176 52.1912 97.2704 52.2444 96.9583C52.372 96.2084 52.0936 95.8829 51.2332 95.7759L50.546 95.69L50.5932 96.7702ZM24 97.0754C24 97.2793 24.4572 97.6839 24.5648 97.5748C24.6072 97.5319 24.4976 97.3645 24.3208 97.2023C24.1444 97.0406 24 96.9834 24 97.0754ZM130.481 97.2818C130.321 97.4605 130.265 97.6069 130.356 97.6069C130.557 97.6069 130.956 97.1435 130.848 97.0345C130.806 96.9915 130.641 97.1026 130.481 97.2818ZM50.9732 98.2339C50.926 98.3109 51.0228 98.4982 51.188 98.6498C51.4276 98.8695 51.5128 98.8821 51.6096 98.7118C51.6768 98.5947 51.676 98.5489 51.6088 98.6105C51.4608 98.7451 51.0428 98.388 51.1464 98.2149C51.186 98.148 51.1828 98.0933 51.1388 98.0933C51.0948 98.0933 51.0204 98.1565 50.9732 98.2339ZM52.2 99.664C51.846 99.7361 51.84 99.7783 51.84 102.133V104.528L52.52 104.513C53.3844 104.494 53.5788 104.019 53.5888 101.904C53.598 99.8602 53.3336 99.4342 52.2 99.664ZM111.785 100.924C111.732 101.062 111.436 101.297 111.125 101.447C110.391 101.802 110.41 102.096 111.233 103.084L111.905 103.893L112.113 103.488C112.35 103.024 112.383 102.737 112.185 102.861C112.111 102.907 112.034 102.457 112.015 101.861C111.978 100.702 111.935 100.527 111.785 100.924ZM112.251 102.453C112.142 102.631 112.55 102.995 112.695 102.848C112.753 102.789 112.8 102.831 112.8 102.94C112.8 103.049 112.872 103.094 112.96 103.038C113.146 102.922 113.177 102.624 113 102.652C112.638 102.71 112.314 102.612 112.4 102.471C112.454 102.382 112.463 102.309 112.419 102.309C112.375 102.309 112.3 102.374 112.251 102.453ZM36.348 104.629C36.3344 104.735 36.296 105.004 36.2628 105.227C36.2296 105.45 36.2948 105.864 36.4076 106.146C36.5204 106.429 36.5812 106.692 36.5424 106.731C36.504 106.77 36.582 106.895 36.716 107.008C36.8504 107.12 36.96 107.451 36.96 107.742C36.96 108.578 37.4296 109.033 38.3044 109.042L39.04 109.051V108.021C39.04 107.136 39.0004 106.995 38.76 107.019C37.8544 107.113 37.8116 107.068 37.7064 105.928C37.6516 105.332 37.5512 104.795 37.4832 104.733C37.2368 104.51 36.374 104.431 36.348 104.629ZM117.346 104.654C117.159 104.869 117.105 105.265 117.118 106.322C117.128 107.203 116.589 107.543 116.049 106.995C115.922 106.867 115.88 107.079 115.897 107.762C115.934 109.263 117.403 109.532 117.761 108.104C117.856 107.725 117.995 107.27 118.07 107.092C118.768 105.443 118.737 104.501 117.986 104.492C117.714 104.489 117.426 104.562 117.346 104.654ZM28.2056 104.798C28.2904 105.057 28.5868 105.1 28.5868 104.854C28.5868 104.732 28.4888 104.633 28.3688 104.633C28.2492 104.633 28.1756 104.707 28.2056 104.798ZM0.6 104.872L0 104.923V106.291V107.659L0.44 107.678L0.88 107.698L0.4 107.822C-0.0552 107.939 -0.0592 107.947 0.32 107.981L0.72 108.016L0.32 108.151C0.0308 108.248 0.1864 108.277 0.88 108.256L1.84 108.227L1.866 106.502C1.8948 104.568 2.0376 104.752 0.6 104.872ZM51.5684 105.028C51.3748 105.182 51.138 105.527 51.0424 105.795L50.8684 106.281L51.2344 105.873C51.4356 105.648 51.546 105.535 51.48 105.621C51.414 105.708 51.362 105.855 51.3648 105.949C51.37 106.129 51.6852 105.647 51.702 105.433C51.7072 105.365 51.7788 105.181 51.8616 105.025C52.0464 104.674 52.012 104.675 51.5684 105.028ZM110.171 105.327C109.437 106.157 109.264 106.381 108.96 106.895C108.79 107.182 108.378 107.563 108.046 107.741C107.627 107.965 107.426 108.192 107.395 108.471C107.281 109.505 107.214 109.624 106.854 109.429C105.63 108.765 104.266 109.101 104.347 110.047C104.376 110.395 104.307 110.649 104.157 110.746C103.999 110.847 104.366 110.898 105.262 110.9C106.349 110.902 106.648 110.848 106.834 110.618C106.96 110.462 107.023 110.418 106.974 110.519C106.924 110.62 107.03 110.742 107.21 110.789C107.472 110.859 107.526 110.807 107.488 110.524C107.45 110.245 107.512 110.183 107.787 110.221C108.064 110.26 108.117 110.205 108.051 109.948C107.979 109.667 108.059 109.619 108.664 109.575C109.342 109.525 109.361 109.509 109.41 108.916C109.458 108.325 109.477 108.308 110.09 108.308C110.704 108.308 110.72 108.294 110.72 107.735C110.72 107.143 111.106 106.826 111.692 106.934C111.897 106.973 111.949 106.79 111.972 105.942L112 104.903H111.273C110.691 104.903 110.471 104.988 110.171 105.327ZM51.8452 106.403C51.84 107.187 51.2812 107.514 50.792 107.019C50.696 106.922 50.6232 107.116 50.594 107.546C50.5264 108.548 50.462 108.88 50.3448 108.835C50.2872 108.813 50.1952 108.794 50.1404 108.794C50.0856 108.794 50.1396 108.667 50.2604 108.511C50.4632 108.248 50.4556 108.245 50.16 108.463C49.4932 108.955 49.318 109.3 49.4448 109.87C49.5144 110.182 49.5048 110.375 49.4228 110.324C49.3444 110.275 49.28 110.38 49.28 110.559C49.28 111.059 49.5324 111.101 49.742 110.634C49.9204 110.238 49.948 110.229 50.2252 110.483C50.5008 110.736 50.5244 110.733 50.602 110.433C50.6556 110.225 50.9136 110.051 51.342 109.934C51.9628 109.765 52 109.721 51.9992 109.153C51.9988 108.822 52.1172 108.215 52.2624 107.805C52.5404 107.018 52.492 106.493 52.092 105.957C51.8652 105.653 51.85 105.68 51.8452 106.403ZM30.1136 107.036C30.0752 107.929 30.2896 108.364 30.7024 108.234C31.1912 108.081 31.4388 108.422 31.4624 109.283C31.4868 110.173 31.83 110.74 32.3448 110.74C32.5072 110.74 32.64 110.849 32.64 110.983C32.64 111.213 32.7204 111.252 33.2668 111.292C33.3916 111.301 33.506 111.479 33.5212 111.688C33.5364 111.896 33.6448 112.127 33.7624 112.201C33.88 112.275 34.0016 112.503 34.0328 112.71C34.1068 113.201 34.2448 113.325 34.7672 113.369C35.0052 113.389 35.2 113.455 35.2 113.516C35.2 113.577 35.478 113.59 35.818 113.544C36.4836 113.453 36.7832 113.926 36.4468 114.535C36.3252 114.755 36.4128 114.793 37.032 114.793H37.76V115.896C37.76 117.227 37.8908 117.388 38.9748 117.388C39.8668 117.388 40 117.265 40 116.441C40 116.027 38.0084 113.821 37.6348 113.821C37.5604 113.821 37.378 113.563 37.2296 113.247C37.0372 112.838 36.758 112.586 36.2576 112.369C35.8712 112.201 35.5072 111.985 35.448 111.888C35.3892 111.792 35.0992 111.713 34.8036 111.713C34.0108 111.713 33.7088 111.565 33.9356 111.288C34.0744 111.119 34.0728 111.064 33.93 111.064C33.826 111.064 33.7856 110.991 33.84 110.902C33.8944 110.813 33.8316 110.74 33.7004 110.74C33.3708 110.74 33.2144 110.174 33.2524 109.119C33.2908 108.041 33.2048 107.89 32.3924 107.607C31.996 107.47 31.682 107.226 31.5512 106.956C31.4008 106.645 31.22 106.524 30.9032 106.524C30.6616 106.524 30.3932 106.453 30.3068 106.365C30.2036 106.261 30.1372 106.492 30.1136 107.036ZM123.52 106.642C123.52 106.986 122.905 107.497 122.492 107.497C121.998 107.497 121.44 108.199 121.44 108.821C121.44 109.092 121.337 109.331 121.196 109.386C121.015 109.456 120.96 109.703 120.981 110.357C121.01 111.227 121.012 111.231 121.314 110.902C121.576 110.618 121.92 110.582 121.92 110.84C121.92 110.885 121.849 110.877 121.762 110.822C121.671 110.766 121.644 110.83 121.699 110.975C121.751 111.113 121.863 111.226 121.946 111.226C122.03 111.226 122.062 111.166 122.018 111.093C121.973 111.02 122.078 110.838 122.25 110.688C122.621 110.366 122.784 110.335 122.624 110.618C122.56 110.73 122.7 110.644 122.934 110.428C123.364 110.031 123.495 109.826 123.2 110.01C122.957 110.162 123.009 109.938 123.28 109.663C123.412 109.529 123.52 109.21 123.52 108.954C123.52 108.416 123.617 108.33 124.286 108.279C124.703 108.246 124.753 108.198 124.622 107.95C124.521 107.757 124.525 107.659 124.634 107.659C125.224 107.659 124.774 106.556 124.16 106.496C123.716 106.454 123.52 106.498 123.52 106.642ZM123.846 108.706C123.539 109.081 123.816 109.353 124.172 109.027C124.337 108.875 124.434 108.688 124.387 108.611C124.261 108.404 124.065 108.439 123.846 108.706ZM97.6 108.902C97.0372 109.129 96.8 109.504 96.8 110.169V110.844L99.0056 110.88L101.211 110.915L101.178 110.463C101.161 110.214 101.14 109.888 101.133 109.74C101.11 109.273 98.3224 108.612 97.6 108.902ZM93.5496 109.286C93.3132 109.475 93.12 109.729 93.12 109.852C93.12 109.975 92.8616 110.275 92.546 110.519C92.0624 110.892 91.986 111.034 92.062 111.419C92.1116 111.669 92.082 111.875 91.996 111.875C91.9104 111.875 91.84 111.937 91.84 112.012C91.84 112.088 92.128 112.149 92.48 112.149C93.1068 112.149 93.2388 111.989 93.1388 111.348C93.1284 111.281 93.174 111.235 93.24 111.245C93.6364 111.309 94.084 111.202 94 111.064C93.9376 110.962 94.3124 110.902 95.0132 110.902C96.5428 110.902 96.948 109.723 95.5568 109.319C94.2276 108.934 93.996 108.93 93.5496 109.286ZM113.34 110.442C113.356 110.731 113.249 110.829 112.819 110.919C111.904 111.11 111.649 112.072 112.434 112.374C113.314 112.714 113.6 112.472 113.6 111.385C113.6 110.852 113.605 110.363 113.612 110.298C113.619 110.233 113.556 110.158 113.472 110.13C113.389 110.101 113.33 110.242 113.34 110.442ZM41.1224 111.51C41.1264 112.505 41.388 112.677 43.38 112.992C44.08 113.102 44.12 113.089 44.12 112.734C44.12 112.424 44.0128 112.342 43.5044 112.259C42.8484 112.153 42.6164 111.813 42.8 111.226C42.8932 110.928 42.8288 110.902 42.0108 110.902H41.12L41.1224 111.51ZM49.4896 111.192C49.3848 111.259 49.3056 111.539 49.3132 111.813C49.324 112.189 49.164 112.482 48.6636 113.005C48.1512 113.54 48 113.823 48 114.245C48 114.547 47.928 114.793 47.84 114.793C47.752 114.793 47.68 115.078 47.68 115.425C47.68 116.072 47.5028 116.253 46.8668 116.253C46.5852 116.253 46.4096 115.318 46.5496 114.565C46.5644 114.484 46.4832 114.358 46.3684 114.284C46.2 114.176 46.1996 114.149 46.3664 114.147C46.5348 114.145 46.5348 114.104 46.3664 113.92C46.2168 113.757 46.1276 113.745 46.0424 113.879C45.9604 114.008 45.924 113.997 45.9224 113.844C45.9212 113.715 45.8204 113.663 45.68 113.717C45.548 113.768 45.44 113.74 45.44 113.653C45.44 113.427 44.1004 113.459 43.872 113.691C43.7664 113.798 43.68 114.162 43.68 114.498C43.68 115.161 43.7796 115.225 44.96 115.317C45.4372 115.354 45.5276 115.426 45.57 115.801C45.7196 117.114 47.6376 117.489 48.256 116.325C48.4384 115.981 48.7072 115.742 48.9768 115.682C49.8056 115.497 50.3208 114.162 49.776 113.61C49.5032 113.333 49.5628 113.217 50.0384 113.096C50.5764 112.959 50.7144 112.754 50.7176 112.089C50.7212 111.297 50.068 110.819 49.4896 111.192ZM118.972 112.106C118.588 112.226 118.14 112.55 117.817 112.94C117.527 113.29 117.234 113.627 117.165 113.687C117.096 113.748 116.525 114.295 115.895 114.903L114.75 116.009L114.663 117.046C114.596 117.855 114.24 118.903 114.24 118.292C114.24 118.219 114.136 118.247 114.008 118.354C113.828 118.505 113.572 118.506 112.871 118.358C111.91 118.157 111.79 118.2 111.462 118.861C111.362 119.062 111.057 119.352 110.784 119.506C110.511 119.66 110.106 119.958 109.883 120.168C109.661 120.377 109.29 120.68 109.06 120.841C108.746 121.058 108.64 121.27 108.64 121.682C108.64 122.403 108.494 122.469 107.75 122.084C106.85 121.619 106.306 121.861 106.008 122.86C105.89 123.251 105.881 123.255 104.815 123.305C104.249 123.332 104.028 123.437 103.695 123.833C103.375 124.214 103.096 124.353 102.48 124.441C101.383 124.595 101.158 124.751 100.962 125.486C100.797 126.108 100.776 126.123 99.888 126.235C99.1652 126.327 98.9044 126.443 98.5968 126.814C98.268 127.21 98.0904 127.28 97.3856 127.291C96.3388 127.306 95.2864 127.624 95.2584 127.932C95.2468 128.063 95.2228 128.316 95.206 128.494C95.188 128.678 95.1396 128.73 95.0936 128.615C95.0492 128.503 94.9472 128.452 94.8676 128.502C94.3232 128.843 92.8368 128.883 92.2372 128.574C91.1896 128.032 90.4 128.503 90.4 129.668V130.386L92.68 130.34C94.7848 130.297 95.4528 130.165 95.2528 129.83C94.9588 129.338 95.4004 129.062 96.4812 129.062C97.0864 129.062 97.6276 128.985 97.6848 128.892C97.7556 128.775 97.86 128.781 98.0144 128.912C98.1868 129.057 98.24 129.056 98.24 128.909C98.24 128.803 98.366 128.73 98.52 128.746C98.9904 128.794 99.0224 128.754 98.8876 128.278L98.7576 127.818L99.6588 127.782C100.402 127.752 101.326 127.44 100.672 127.44C100.566 127.44 100.48 127.366 100.48 127.274C100.48 127.183 100.664 127.23 100.888 127.379C101.184 127.576 101.344 127.602 101.472 127.473C101.6 127.343 101.574 127.181 101.38 126.881C101.233 126.653 101.186 126.467 101.276 126.467C101.366 126.467 101.44 126.555 101.44 126.662C101.44 126.813 101.483 126.813 101.632 126.662C101.738 126.555 102.046 126.467 102.318 126.467C102.775 126.467 102.814 126.424 102.828 125.892C102.848 125.126 102.867 125.114 104.06 125.151C104.624 125.169 104.66 125.195 104.462 125.454C104.287 125.684 104.314 125.679 104.604 125.428C104.801 125.257 105.013 125.17 105.075 125.233C105.257 125.417 104.883 125.884 104.477 125.982C104.272 126.031 104.086 126.162 104.064 126.273C104.042 126.384 104.06 126.401 104.105 126.309C104.15 126.218 104.314 126.143 104.468 126.143C104.779 126.143 105.28 125.66 105.28 125.36C105.28 125.256 105.388 125.17 105.52 125.17C105.652 125.17 105.76 125.083 105.76 124.976C105.76 124.836 105.809 124.831 105.934 124.957C106.029 125.054 106.238 125.098 106.399 125.056C106.743 124.964 106.913 124.458 106.678 124.22C106.566 124.106 106.66 124.022 106.977 123.953C107.232 123.899 107.574 123.78 107.737 123.689C107.968 123.561 108.006 123.573 107.912 123.739C107.845 123.858 108.078 123.644 108.43 123.265C108.878 122.783 109.201 122.576 109.505 122.576C109.754 122.576 109.897 122.507 109.84 122.414C109.786 122.325 109.832 122.252 109.942 122.252C110.087 122.252 110.095 122.202 109.97 122.076C109.444 121.542 110.749 120.861 111.509 121.273C111.854 121.461 112 121.221 112 120.465C112 120.046 112.058 119.996 112.6 119.951C112.996 119.918 113.185 119.827 113.156 119.686C113.125 119.535 113.214 119.504 113.456 119.582C113.686 119.656 113.764 119.634 113.692 119.514C113.624 119.403 113.676 119.373 113.831 119.433C113.967 119.486 114.029 119.613 113.968 119.715C113.908 119.817 113.98 119.801 114.129 119.678C114.413 119.445 114.504 119.249 114.257 119.404C114.178 119.453 114.071 119.381 114.018 119.243C113.959 119.086 113.989 119.033 114.099 119.102C114.218 119.176 114.237 119.093 114.16 118.847C114.087 118.614 114.105 118.519 114.209 118.584C114.299 118.641 114.409 118.595 114.454 118.483C114.518 118.321 114.537 118.321 114.547 118.482C114.554 118.594 114.619 118.685 114.692 118.685C114.764 118.685 114.808 118.409 114.79 118.072C114.756 117.445 115.094 117.264 115.648 117.611C115.788 117.698 115.84 117.507 115.84 116.911C115.84 116.004 115.875 115.986 117.451 116.079C118.256 116.127 118.418 115.85 118.365 114.528L118.32 113.415L119.332 113.384C120.522 113.348 120.8 113.165 120.8 112.423C120.8 111.798 120.255 111.704 118.972 112.106ZM91.2112 113.294C91.2048 113.408 90.9928 113.496 90.728 113.496C90.3676 113.496 90.1528 113.64 89.818 114.104C89.5768 114.439 89.1356 114.976 88.8376 115.299C88.3236 115.856 88.2996 115.935 88.3684 116.84C88.4504 117.915 88.294 118.36 87.8344 118.36C87.608 118.36 87.52 118.471 87.52 118.754C87.52 119.257 87.974 119.749 88.2136 119.506C88.4624 119.254 88.64 119.295 88.64 119.604C88.64 120.018 88.8468 119.715 88.8984 119.226C88.9232 118.988 89.0656 118.678 89.2144 118.537C89.4364 118.326 89.4624 118.323 89.3592 118.523C89.2576 118.718 89.2744 118.727 89.4448 118.567C89.5912 118.429 89.7172 118.419 89.854 118.534C89.9816 118.642 90.0856 118.644 90.1484 118.542C90.2016 118.455 90.1684 118.335 90.0748 118.276C89.9584 118.203 89.97 118.087 90.1124 117.91C90.2876 117.69 90.2828 117.672 90.08 117.793C89.8824 117.911 89.8744 117.893 90.0348 117.692C90.2156 117.466 90.2752 116.494 90.1936 115.118C90.1572 114.5 91.0624 114.151 91.3808 114.66C91.5612 114.948 91.5428 113.846 91.36 113.415C91.2844 113.237 91.2176 113.182 91.2112 113.294ZM108.44 113.854C108.286 114.014 108.214 114.145 108.28 114.144C108.431 114.144 108.334 115.965 108.173 116.136C108.108 116.205 107.644 116.213 107.141 116.153L106.227 116.044L106.59 115.653C106.85 115.372 106.877 115.291 106.686 115.365C106.539 115.423 106.302 115.651 106.158 115.874C106.014 116.096 105.802 116.242 105.688 116.197C105.573 116.152 105.236 116.376 104.939 116.695C104.643 117.014 104.485 117.226 104.589 117.166C104.693 117.107 104.817 117.123 104.865 117.202C104.914 117.28 104.828 117.339 104.676 117.331C103.755 117.285 103.213 117.559 103.108 118.123C103.006 118.677 102.993 118.685 102.182 118.687C100.913 118.69 100.662 118.805 100.546 119.432C100.447 119.967 100.423 119.982 99.6728 119.982C98.5704 119.982 98.13 120.193 98.002 120.783C97.912 121.198 97.8184 121.279 97.4272 121.279C96.99 121.279 96.96 121.32 96.96 121.918C96.96 122.87 95.6072 123.089 95.4892 122.156L95.44 121.769L95.2548 122.173C95.1532 122.395 95.1352 122.536 95.2148 122.486C95.2948 122.436 95.36 122.504 95.36 122.636C95.36 123.773 98.1476 123.502 98.636 122.318C98.866 121.759 98.8872 121.749 99.728 121.784C100.748 121.825 100.922 121.736 101.218 121.016C101.428 120.508 101.496 120.468 102.173 120.468C103.026 120.468 103.519 120.244 103.522 119.855C103.528 119.277 103.815 119.091 104.833 119.009C105.729 118.937 105.86 118.881 106.043 118.492C106.156 118.252 106.408 118.006 106.604 117.947C106.8 117.887 107.145 117.662 107.372 117.448C107.598 117.233 108.101 116.895 108.49 116.696C109.018 116.425 109.232 116.201 109.341 115.807C109.471 115.335 109.548 115.28 110.072 115.28C111.03 115.28 111.304 114.972 111.065 114.164C110.851 113.442 110.22 113.266 109.221 113.65C109.001 113.735 108.798 113.75 108.771 113.684C108.743 113.618 108.594 113.695 108.44 113.854ZM35.2108 114.072C35.1968 114.497 35.4928 114.797 35.912 114.783C36.234 114.772 36.2336 114.768 35.8968 114.603C35.7084 114.511 35.4792 114.278 35.3876 114.087C35.2248 113.746 35.2216 113.746 35.2108 114.072ZM118.152 115.337C118.093 115.573 117.999 115.767 117.943 115.768C117.886 115.77 117.678 115.815 117.48 115.868C117.156 115.956 117.12 115.909 117.12 115.391C117.12 114.885 117.173 114.808 117.56 114.758C118.141 114.684 118.28 114.819 118.152 115.337ZM36.64 115.127C36.64 115.222 36.7168 115.251 36.8108 115.192C36.9132 115.128 36.9612 115.205 36.9308 115.385C36.8944 115.6 36.9636 115.671 37.176 115.634C37.3536 115.603 37.43 115.652 37.3668 115.755C37.3084 115.851 37.3372 115.928 37.4304 115.928C37.6976 115.928 37.6292 115.634 37.28 115.28C36.9308 114.926 36.64 114.857 36.64 115.127ZM39.0092 116.66C38.9908 117.152 38.4872 117.35 38.1424 117C37.7976 116.651 37.9928 116.14 38.4784 116.122C39.008 116.101 39.0292 116.123 39.0092 116.66ZM115.04 118.184C115.04 118.57 115.556 118.534 115.612 118.144C115.638 117.973 115.54 117.874 115.346 117.874C115.151 117.874 115.04 117.987 115.04 118.184ZM41.7068 118.543C41.5456 118.638 41.1496 118.677 40.8268 118.631C40.504 118.584 40.3656 118.583 40.5196 118.627C40.7472 118.693 40.7664 118.769 40.6236 119.04C40.3732 119.514 40.7824 119.928 41.2508 119.673C41.6736 119.444 41.7692 119.449 41.72 119.698C41.6948 119.825 41.9048 119.92 42.28 119.951C42.6604 119.983 42.8872 120.087 42.9 120.235C42.9112 120.363 42.938 120.541 42.96 120.63C42.982 120.72 43.0088 120.902 43.02 121.036C43.0428 121.313 43.68 121.374 43.68 121.099C43.68 121.001 43.584 120.958 43.4668 121.003C43.3492 121.049 43.2532 120.98 43.2532 120.851C43.2532 120.722 43.3372 120.649 43.44 120.689C43.5428 120.729 43.6268 120.663 43.6268 120.543C43.6268 120.422 43.5488 120.338 43.4532 120.356C43.3484 120.375 43.278 120.067 43.2744 119.577C43.2668 118.384 42.6576 117.983 41.7068 118.543ZM40.8472 119.28C40.7656 119.496 40.8076 119.527 41.0524 119.433C41.2992 119.338 41.3204 119.354 41.16 119.518C40.9228 119.761 40.5356 119.474 40.7112 119.185C40.876 118.915 40.9624 118.976 40.8472 119.28ZM87.398 120.894C87.2552 121.197 86.8992 121.589 86.6068 121.764C85.9768 122.14 85.76 122.639 85.76 123.71C85.76 124.468 85.5492 124.89 85.0944 125.044C84.6808 125.184 85.1612 125.493 85.6892 125.426C85.9996 125.387 86.4556 125.466 86.7356 125.608C87.0932 125.788 87.4392 125.827 87.9756 125.745C88.3852 125.683 89.3076 125.615 90.0256 125.595C91.37 125.557 91.84 125.366 91.84 124.859C91.84 124.37 92.2008 124.197 93.2216 124.197C94.6916 124.197 95.0592 124.014 95.012 123.302C94.9636 122.575 94.7652 122.519 92.6064 122.625C90.5992 122.724 90.4 122.795 90.4 123.404C90.4 123.729 90.32 123.873 90.1404 123.873C89.9172 123.873 89.9112 123.833 90.0976 123.589C90.2732 123.36 90.2464 123.365 89.9564 123.615C89.7592 123.786 89.5536 123.88 89.4992 123.825C89.3244 123.648 89.5824 123.221 89.9564 123.069C90.1908 122.974 90.2292 122.917 90.0648 122.91C89.7796 122.899 89.28 123.391 89.28 123.683C89.28 123.792 89.0412 123.873 88.72 123.873C88.1468 123.873 88.0668 124.012 88.1484 124.867C88.182 125.22 87.8548 125.325 87.0596 125.217L86.4 125.128V124.402V123.677L87.04 123.739L87.68 123.801V123.098C87.68 122.711 87.744 122.435 87.822 122.484C88.1616 122.696 88.3132 122.144 88.0068 121.81C87.8376 121.626 87.7384 121.436 87.7868 121.387C87.8348 121.338 88.0224 121.439 88.204 121.61C88.6252 122.007 88.9112 121.791 88.8648 121.111C88.7988 120.145 87.8188 120 87.398 120.894ZM44.0648 120.983C43.8972 121.176 43.85 121.281 43.96 121.216C44.0932 121.138 44.16 121.209 44.16 121.431C44.16 121.615 44.2352 121.765 44.3272 121.765C44.4188 121.765 44.4728 121.893 44.4472 122.049C44.4148 122.242 44.4892 122.318 44.68 122.285C44.834 122.259 44.96 122.314 44.96 122.407C44.96 122.5 45.14 122.576 45.36 122.576C45.5884 122.576 45.76 122.67 45.76 122.794C45.76 123.082 46.2788 123.549 46.5992 123.549C46.7392 123.549 46.8772 123.619 46.9068 123.705C46.936 123.791 47.464 123.882 48.08 123.909C49.1492 123.954 49.2008 123.975 49.2172 124.36C49.2584 125.317 49.2708 125.348 49.56 125.215C49.894 125.062 52.006 125.198 52.0024 125.373C51.9792 126.529 51.9672 126.507 52.56 126.437C52.868 126.4 53.1252 126.41 53.132 126.459C53.2012 126.979 53.312 127.375 53.418 127.483C53.6428 127.711 55.04 127.82 55.04 127.61C55.04 127.506 55.112 127.466 55.2 127.521C55.2952 127.581 55.36 127.39 55.36 127.05C55.36 126.344 55.0436 126.143 53.9304 126.143C53.1464 126.143 53.12 126.128 53.12 125.682C53.12 125.144 52.7908 124.799 51.93 124.434C51.5896 124.29 51.1848 124.014 51.0304 123.82C50.852 123.597 50.4364 123.407 49.8952 123.302C49.202 123.168 49.0016 123.053 48.8304 122.691C48.4112 121.805 47.2932 121.574 46.8596 122.285C46.6424 122.641 46.24 122.27 46.24 121.715C46.24 120.672 44.7636 120.175 44.0648 120.983ZM109.083 123.026C109.032 123.224 108.821 123.454 108.615 123.538C108.381 123.633 108.336 123.694 108.495 123.701C108.82 123.714 109.334 123.146 109.244 122.873C109.206 122.756 109.136 122.822 109.083 123.026ZM48.8 124.205C48.8 124.309 48.7076 124.358 48.5944 124.314C48.4772 124.269 48.3884 124.351 48.3884 124.506C48.3884 124.655 48.512 124.777 48.6624 124.777C48.8132 124.777 48.8964 124.711 48.8476 124.631C48.7988 124.551 48.848 124.43 48.9564 124.362C49.0972 124.274 49.1032 124.206 48.9772 124.127C48.8796 124.066 48.8 124.101 48.8 124.205ZM56.2 127.451C55.914 127.54 55.68 127.687 55.68 127.779C55.68 127.871 55.59 127.893 55.48 127.827C55.37 127.762 55.4008 127.849 55.5484 128.02C55.6964 128.192 55.8176 128.368 55.8184 128.413C55.8252 128.929 56.0472 129.001 57.712 129.025C59.448 129.049 59.7556 129.16 59.6264 129.715C59.5032 130.242 59.9152 130.318 62.972 130.337C64.6372 130.347 66.0616 130.356 66.1368 130.357C66.212 130.358 66.246 130.651 66.2124 131.007L66.1516 131.656H66.7428C67.65 131.656 67.84 131.527 67.84 130.911C67.84 130.073 65.8004 129.424 64.76 129.932C64.5204 130.049 64.48 129.986 64.48 129.493C64.48 128.575 63.4408 128.098 62.5236 128.595C62.3392 128.695 61.5304 128.791 60.726 128.809L59.2636 128.84L59.2264 128.343C59.1568 127.421 57.694 126.99 56.2 127.451ZM87.7696 130.001C86.3888 130.484 86.554 131.648 88.0044 131.653L88.7284 131.656L88.6676 131.007C88.6012 130.305 88.5988 130.306 89.64 130.355C90.2868 130.386 90.4308 130.149 89.9304 129.878C89.4856 129.637 88.6792 129.683 87.7696 130.001ZM69.2556 130.086C69.0228 130.266 68.8916 130.839 68.9432 131.453C68.976 131.848 72.16 131.728 72.16 131.331C72.16 131.153 72.2296 131.007 72.3148 131.007C72.6836 131.007 72.1644 130.28 71.6652 130.097C70.95 129.835 69.5896 129.829 69.2556 130.086ZM83.2164 130.082C82.7164 130.262 82.1916 131.007 82.5652 131.007C82.6504 131.007 82.72 131.158 82.72 131.342C82.72 131.662 82.7952 131.676 84.3944 131.636C85.7452 131.602 86.0356 131.554 85.8964 131.384C85.8016 131.268 85.7668 131.002 85.8188 130.792C85.9816 130.135 84.326 129.683 83.2164 130.082ZM40.988 141.435C40.5784 141.877 40.5504 142.017 40.8816 141.968C41.3072 141.904 41.8396 141.06 41.4536 141.06C41.3888 141.06 41.1792 141.229 40.988 141.435ZM33.1408 156.843C32.8684 157.175 33.1692 157.405 33.4676 157.092C33.6812 156.869 33.6916 156.795 33.5192 156.728C33.4004 156.682 33.2304 156.734 33.1408 156.843ZM130.432 156.82C130.078 157.178 130.523 157.682 130.893 157.343C131.184 157.075 131.216 157.075 131.507 157.343C131.8 157.611 131.822 157.61 131.98 157.312C132.204 156.888 131.909 156.576 131.496 156.8C131.301 156.906 131.099 156.906 130.904 156.8C130.703 156.691 130.552 156.698 130.432 156.82ZM130.858 157.219C130.71 157.4 130.641 157.407 130.545 157.248C130.376 156.972 130.518 156.781 130.809 156.894C130.997 156.967 131.008 157.037 130.858 157.219ZM131.894 157.202C131.822 157.392 131.754 157.403 131.574 157.252C131.395 157.101 131.388 157.032 131.545 156.934C131.818 156.763 132.006 156.907 131.894 157.202Z\" fill=\"url(#paint2_linear)\" />\r\n        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M69.8331 15.2004C69.7663 15.3565 69.6975 15.6556 69.6799 15.8652C69.6283 16.4732 68.5347 16.8623 66.8763 16.8623C66.1635 16.8623 66.0647 16.9085 65.8415 17.3459C65.2895 18.4278 64.1387 18.5031 63.5351 17.4971C63.2463 17.0163 63.2207 17.0062 63.0603 17.3098C62.8175 17.7699 61.7707 18.0082 61.1519 17.7447C60.6035 17.5109 60.4799 17.6426 60.4799 18.4618C60.4799 19.1922 59.7403 19.5287 58.8259 19.2141C57.9603 18.9162 57.4255 19.0698 57.0187 19.733C56.4023 20.7374 54.7935 21.2019 54.4679 20.4699C54.3723 20.2546 54.3199 20.339 54.2507 20.8197C54.1635 21.4269 54.1151 21.4719 53.0831 21.8947C52.4911 22.1371 51.7503 22.5635 51.4375 22.8415C50.7975 23.4115 50.0571 23.5079 49.4787 23.0977C49.1359 22.8545 49.1231 22.8651 49.0263 23.4779C48.9503 23.9599 48.8083 24.178 48.4235 24.4037C48.1463 24.5659 47.6603 24.9789 47.3435 25.3214L46.7667 25.9445L46.1011 25.7065C45.4551 25.4755 45.4403 25.4779 45.6031 25.7864C45.9347 26.4138 46.9583 26.2193 47.7683 25.3745C48.1531 24.9733 48.5403 24.6449 48.6283 24.6449C48.7167 24.6449 49.0251 24.4362 49.3143 24.1808C49.6519 23.8829 50.1067 23.677 50.5867 23.6056C50.9975 23.544 51.4295 23.3758 51.5467 23.2311C51.9083 22.7852 53.1619 22.0507 53.5619 22.0507C54.0283 22.0507 54.5743 21.769 54.8391 21.3908C54.9487 21.2348 55.3411 21.0548 55.7115 20.9916C56.6259 20.8347 57.5327 20.3321 57.9363 19.7573C58.2043 19.3759 58.3163 19.3187 58.4967 19.4707C59.1179 19.9932 60.7999 19.3049 60.7999 18.5279C60.7999 18.159 60.8155 18.1521 61.0727 18.4128C61.2507 18.5931 61.3667 18.6248 61.4063 18.5044C61.4399 18.4026 61.5351 18.3621 61.6179 18.414C61.8003 18.5283 63.1991 17.6584 63.2003 17.4298C63.2007 17.3406 63.3415 17.5007 63.5127 17.7857C64.0795 18.7273 65.0991 18.6766 66.1675 17.654C66.5699 17.2681 66.8691 17.1594 67.8855 17.0289C69.2363 16.8554 70.4391 16.3435 70.3083 15.9981C70.2635 15.8798 70.2999 15.5883 70.3895 15.35C70.5823 14.8356 70.0499 14.6921 69.8331 15.2004ZM71.7531 15.2924C71.4615 16.4695 72.0055 16.7634 74.1599 16.5928C76.1079 16.4387 77.8155 16.4464 79.8807 16.6191C81.7491 16.7748 82.0927 16.6045 82.0515 15.5421C82.0099 14.4675 81.4399 14.8246 81.4399 15.9248V16.4201L80.6927 16.3163C79.8335 16.1967 79.6727 16.0958 80.0047 15.883C80.1963 15.7602 80.1807 15.7294 79.9199 15.7172C79.7171 15.7075 79.6799 15.6694 79.8179 15.6139C80.0023 15.5397 80.0023 15.504 79.8179 15.3861C79.6727 15.2928 79.8007 15.245 80.1999 15.2434C80.5299 15.2422 80.7999 15.168 80.7999 15.0788C80.7999 14.9746 79.4379 14.9227 76.9999 14.9337C73.6239 14.9487 73.2711 14.9746 73.8399 15.1643C74.1919 15.2819 74.3719 15.3848 74.2399 15.3929C74.0267 15.4063 74.0267 15.4254 74.2399 15.5652C74.4531 15.7051 74.4531 15.7229 74.2399 15.7274C74.0327 15.7318 74.0315 15.7525 74.2315 15.881C74.4175 16.0001 74.3803 16.0678 74.0419 16.2239C73.5307 16.4598 73.0483 16.3123 73.1815 15.9608C73.2355 15.8177 73.2087 15.7529 73.1179 15.8096C73.0311 15.864 72.9599 15.795 72.9599 15.656C72.9599 15.517 73.0463 15.4031 73.1519 15.4031C73.5459 15.4031 73.0271 15.1015 72.4471 14.9937C71.9063 14.8932 71.8455 14.9191 71.7531 15.2924ZM83.5599 15.0285C83.8199 15.0974 83.9139 15.3147 84.0351 16.1286C84.1075 16.6147 85.2963 17.005 86.7343 17.0155C87.9275 17.0245 87.9603 17.0358 88.5899 17.6608C89.5171 18.5822 91.1115 18.7249 91.4187 17.9138C91.5067 17.6811 92.1599 17.7711 92.1599 18.0163C92.1599 18.095 92.2679 18.1594 92.3999 18.1594C92.5319 18.1594 92.6399 18.2324 92.6399 18.3216C92.6399 18.4107 92.8423 18.4837 93.0895 18.4837C93.3811 18.4837 93.7263 18.6689 94.0711 19.0106C94.5663 19.5011 94.6787 19.5376 95.6959 19.5376C96.6863 19.5376 96.8079 19.5741 96.9943 19.9275C97.2143 20.3446 97.8479 20.6705 99.0979 21.0094C99.5259 21.1253 99.9767 21.3657 100.1 21.5432C100.236 21.7402 100.654 21.9356 101.171 22.0446C101.696 22.1549 102.206 22.3957 102.507 22.6745C102.895 23.0333 103.17 23.1338 103.852 23.1654C104.801 23.2092 105.076 23.3616 105.15 23.8837C105.184 24.1184 105.465 24.3685 106.003 24.6421C106.444 24.8666 107.033 25.2874 107.31 25.5772C107.859 26.1496 108.989 26.323 109.426 25.9015C109.597 25.7365 109.617 25.7625 109.534 26.0409C109.354 26.6473 110.347 27.7268 111.821 28.5261C112.008 28.6274 112.267 28.9679 112.397 29.2833C112.568 29.6979 112.802 29.9241 113.244 30.0996C113.579 30.2334 113.923 30.4965 114.007 30.6845C114.091 30.8726 114.388 31.1049 114.667 31.2001C114.946 31.2954 115.329 31.5743 115.519 31.8195C115.786 32.1661 115.998 32.2654 116.469 32.2654C117.033 32.2654 117.07 32.2946 116.997 32.6784C116.948 32.9423 117.012 33.162 117.176 33.2865C117.317 33.3939 117.491 33.7725 117.563 34.1284C117.659 34.6067 117.837 34.873 118.247 35.1523C118.551 35.3594 118.894 35.7104 119.009 35.9313C119.124 36.1526 119.395 36.4019 119.612 36.4854C119.828 36.5689 120.072 36.8138 120.153 37.029C120.334 37.5126 120.913 37.9402 121.386 37.9402C121.817 37.9402 121.89 38.0484 122.006 38.8535C122.105 39.545 123.356 40.9572 123.738 40.8084C123.894 40.748 123.927 40.9296 123.876 41.564C123.801 42.4922 124.229 43.2908 124.802 43.2908C125.186 43.2908 125.31 43.506 125.4 44.3272C125.479 45.0524 125.768 45.4727 126.419 45.814C126.801 46.0143 126.829 46.0921 126.724 46.6725C126.587 47.4301 126.731 47.7447 127.368 48.0779C127.743 48.2745 127.84 48.4329 127.84 48.8492C127.84 49.6465 128.103 50.4074 128.488 50.7231C128.929 51.0847 129.285 52.0332 129.422 53.2099C129.481 53.717 129.653 54.2691 129.805 54.4389C129.956 54.6084 130.08 54.8297 130.08 54.9306C130.08 55.3895 130.801 56.9999 131.193 57.4154C131.773 58.0307 132.109 59.7895 131.839 60.8045C131.529 61.9706 131.967 62.9094 132.821 62.9094C133.24 62.9094 133.261 62.9394 133.115 63.3285C133.028 63.5588 132.986 63.7959 133.021 63.8555C133.056 63.9147 133.03 64.3253 132.963 64.7675C132.782 65.9568 133.59 68.2806 134.049 67.8939C134.181 67.7833 134.33 67.7164 134.38 67.7452C134.431 67.7744 134.493 67.735 134.518 67.658C134.543 67.5814 134.408 67.5068 134.218 67.4922C133.29 67.4213 132.857 64.6131 133.57 63.2848C133.901 62.6674 133.805 62.5065 133.08 62.4647C132.172 62.4125 131.934 62.0849 132.105 61.1259C132.463 59.1158 132.201 56.9103 131.603 56.9103C131.094 56.9103 130.467 55.8386 130.324 54.7223C130.267 54.2768 130.132 53.8621 130.023 53.8009C129.915 53.7397 129.809 53.4325 129.789 53.1183C129.768 52.8046 129.61 52.2343 129.439 51.8508C129.267 51.4678 129.125 51.0478 129.123 50.9173C129.121 50.7868 128.933 50.529 128.703 50.3437C128.386 50.0872 128.244 49.7609 128.103 48.9644C127.953 48.1123 127.846 47.8837 127.52 47.7175C127.152 47.5307 127.12 47.4249 127.12 46.416V45.3175L126.612 45.2676C125.979 45.2056 125.732 44.9142 125.654 44.1383C125.566 43.2713 125.491 43.1286 125.118 43.1286C124.183 43.1286 123.685 41.6256 124.432 41.0618C125.004 40.6297 124.844 40.2851 124.099 40.3455C123.317 40.4083 122.56 39.7379 122.56 38.9815C122.56 38.7655 122.503 38.5888 122.433 38.5888C122.363 38.5888 122.237 38.3516 122.153 38.0618C122.069 37.772 121.892 37.5276 121.76 37.5191C121.628 37.5101 121.357 37.4919 121.158 37.4785C120.94 37.4635 120.675 37.2532 120.493 36.9512C120.327 36.6747 119.961 36.3063 119.679 36.1324C119.397 35.9585 119.129 35.6764 119.085 35.5057C119.041 35.3351 118.761 35.0493 118.463 34.8709C117.814 34.4826 117.75 33.9597 118.253 33.1357C118.585 32.5909 118.997 32.372 118.822 32.8329C118.767 32.9796 118.821 33.0761 118.96 33.0761C119.099 33.0761 119.154 32.9796 119.097 32.8308C119.031 32.6557 119.077 32.6144 119.262 32.6861C119.569 32.8057 119.615 32.4263 119.328 32.1357C119.059 31.8629 118.666 31.8896 118.773 32.1734C118.832 32.3286 118.761 32.3983 118.559 32.3829C118.331 32.3655 118.298 32.3084 118.427 32.1503C118.522 32.0352 118.572 31.9354 118.539 31.9286C118.171 31.8515 117.487 31.8876 117.545 31.9817C117.585 32.0485 117.514 32.1033 117.386 32.1033C117.097 32.1033 116.989 31.8288 117.05 31.252C117.082 30.9549 117.023 30.8062 116.874 30.8062C116.748 30.8062 116.687 30.9051 116.736 31.0331C116.783 31.1576 116.733 31.3149 116.626 31.3821C116.489 31.4681 116.471 31.4365 116.566 31.2772C116.677 31.0903 116.657 31.0858 116.456 31.2508C116.321 31.3615 116.159 31.4 116.097 31.3367C116.034 31.2731 116.03 31.3469 116.089 31.5001C116.147 31.6533 116.122 31.779 116.034 31.779C115.946 31.779 115.83 31.5974 115.775 31.3753C115.696 31.0563 115.542 30.9496 115.043 30.869C114.636 30.8029 114.326 30.6343 114.171 30.3955C114.039 30.1912 113.684 29.942 113.382 29.8406C112.996 29.7117 112.772 29.5022 112.629 29.1374C112.373 28.4872 111.479 27.593 110.64 27.1487C110.051 26.837 109.996 26.7511 109.951 26.0648C109.925 25.6546 109.802 25.2339 109.678 25.1297C109.494 24.9749 109.465 25.0061 109.521 25.3012C109.559 25.4994 109.554 25.6246 109.509 25.5796C109.465 25.5347 109.162 25.5906 108.836 25.7041C108.142 25.9461 107.456 25.6927 107.28 25.1305C107.223 24.9497 106.89 24.6534 106.54 24.4727C105.88 24.1314 105.802 24.0256 105.707 23.3478C105.655 22.9794 105.563 22.9348 104.705 22.859C104.113 22.8063 103.366 22.5837 102.705 22.2627C102.124 21.981 101.389 21.7009 101.07 21.6405C100.705 21.5708 100.456 21.4168 100.395 21.2234C100.342 21.0548 100.142 20.887 99.9491 20.8505C98.5039 20.5781 98.3155 20.495 98.0023 19.9904C97.5219 19.2153 96.8039 18.9028 96.2171 19.2129C95.1847 19.7585 94.3999 19.3345 94.3999 18.2312C94.3999 17.4302 94.3787 17.4184 93.4955 17.7342C92.1899 18.2008 91.1755 17.2065 92.1463 16.4116C92.3671 16.2312 92.3479 16.2101 91.9999 16.2494C91.6579 16.2883 91.5863 16.3978 91.5059 17.007C91.3091 18.5044 89.5831 18.7269 88.8783 17.3459C88.6155 16.8307 88.6327 16.8352 86.7999 16.7991C85.3067 16.7695 84.4799 16.4023 84.4799 15.7679C84.4799 15.1899 84.2147 14.911 83.6879 14.9353C83.4171 14.9479 83.3739 14.9791 83.5599 15.0285ZM60.5179 16.808C60.4071 16.8534 60.2351 17.0484 60.1363 17.2413C59.9679 17.5696 59.9835 17.5668 60.3783 17.1988C60.6103 16.9827 60.7999 16.7821 60.7999 16.7529C60.7999 16.6937 60.7971 16.6941 60.5179 16.808ZM73.1703 19.2802C72.1699 19.4067 71.3747 19.7848 71.3423 20.1493C71.2291 21.4346 71.2215 21.4022 71.6327 21.4022C72.0023 21.4022 72.0211 21.3616 71.9247 20.7816C71.7835 19.9348 71.9939 19.797 73.8759 19.5056C75.7139 19.2206 80.4899 19.3094 81.9199 19.6551L82.7999 19.8679L82.8487 20.6349C82.8895 21.2777 82.9495 21.4022 83.2175 21.4022C83.8899 21.4022 83.5667 19.9247 82.8123 19.5514C82.1191 19.2084 75.2639 19.0159 73.1703 19.2802ZM67.9403 20.7058C67.8783 20.7686 67.1463 20.8027 66.3139 20.7812C64.2747 20.7285 63.8467 20.9567 63.8423 22.101C63.8395 22.8436 64.1043 22.7585 64.2503 21.9697C64.4103 21.1059 65.2155 20.7897 66.5079 21.084C66.9335 21.1809 67.3563 21.159 67.8379 21.0151C68.5283 20.8083 70.3259 20.996 70.9231 21.3373C71.0691 21.4208 71.0739 21.3993 70.9427 21.2542C70.6339 20.9141 68.1779 20.4654 67.9403 20.7058ZM86.0715 20.6478C86.0319 20.6843 85.6107 20.7552 85.1351 20.8055C84.6595 20.8558 84.1627 21.0053 84.0315 21.1383C83.8199 21.3527 83.8635 21.3547 84.4163 21.1553C85.1647 20.885 86.7751 20.8473 87.2219 21.0901C87.4535 21.2153 87.7515 21.2104 88.2915 21.071C89.4579 20.7706 90.3539 21.0702 90.4903 21.8063C90.6575 22.7106 91.0787 22.9299 90.9935 22.0682C90.8783 20.8983 89.9559 20.4423 88.3623 20.767C87.9015 20.861 87.4599 20.8971 87.3807 20.8477C87.1815 20.7228 86.1587 20.5668 86.0715 20.6478ZM48.8807 22.3742C48.7211 22.5529 48.6647 22.6993 48.7555 22.6993C48.9567 22.6993 49.3559 22.236 49.2483 22.1269C49.2059 22.084 49.0407 22.195 48.8807 22.3742ZM61.4499 22.3649C61.1051 22.7143 61.0191 23.9964 61.3399 23.9964C61.4571 23.9964 61.5023 23.7414 61.4659 23.2805C61.3963 22.3924 61.7855 22.0771 62.5971 22.3641C63.2107 22.5805 63.4067 22.4467 62.8115 22.2173C62.1743 21.9717 61.7975 22.0126 61.4499 22.3649ZM91.9999 22.311C91.7763 22.45 91.7299 22.5185 91.8947 22.4666C92.7459 22.1983 92.9031 22.2048 93.1851 22.5205C93.3879 22.7479 93.4563 23.0215 93.4103 23.4216C93.3415 24.0199 93.5115 24.2092 93.6683 23.709C94.0239 22.5736 92.9819 21.7005 91.9999 22.311ZM95.3599 23.5367C95.3599 23.7305 95.2263 23.8999 95.0335 23.951C94.7251 24.0329 94.7219 24.0543 94.9783 24.3413C95.3315 24.7365 95.5791 24.7292 95.4751 24.3267C95.3791 23.9554 95.5883 23.7422 96.2019 23.5862C96.7887 23.437 97.4023 23.8496 97.4691 24.4386C97.5195 24.8841 97.5303 24.8881 98.7447 24.9072C100.344 24.9319 100.8 25.0535 100.8 25.4548C100.8 25.9696 101.491 26.319 102.28 26.2039C103.03 26.0944 103.222 26.1739 103.498 26.7057C103.6 26.9027 103.994 27.2026 104.373 27.3729C104.846 27.5845 105.128 27.8398 105.268 28.1832C105.417 28.5464 105.667 28.7592 106.176 28.9566C106.66 29.1438 106.88 29.3234 106.88 29.5309C106.88 29.7725 107.001 29.8333 107.484 29.8333C108.228 29.8333 108.728 30.1681 108.873 30.762C108.934 31.0092 109.157 31.3574 109.37 31.5358C109.608 31.7352 109.77 32.0583 109.792 32.3756C109.811 32.6594 109.866 32.888 109.913 32.8835C110.545 32.8252 111.146 33.008 111.808 33.4599C112.249 33.7603 112.795 34.053 113.022 34.1109C113.284 34.1778 113.472 34.3651 113.536 34.6245C113.601 34.8851 113.833 35.1158 114.176 35.2613C114.565 35.4259 114.787 35.6731 114.975 36.1474C115.118 36.5093 115.293 36.8052 115.364 36.8052C115.436 36.8052 115.641 37.0468 115.821 37.3423C116.001 37.6378 116.329 37.9775 116.55 38.0971C117.206 38.453 117.609 40.3865 117.096 40.714C116.965 40.7975 117.18 40.8299 117.64 40.7963C118.348 40.744 118.4 40.7667 118.4 41.1238C118.4 41.4091 118.492 41.5109 118.76 41.5206C119.577 41.5514 119.877 41.6292 120.012 41.8461C120.205 42.1546 120.196 42.7565 119.994 43.1392C119.81 43.4878 119.99 43.5603 120.288 43.2583C120.571 42.9713 120.521 42.0812 120.199 41.6791C119.945 41.3601 119.642 41.23 119.076 41.1955C118.965 41.1886 118.791 41.0006 118.691 40.7776C118.591 40.5547 118.423 40.3723 118.319 40.3723C117.898 40.3723 117.6 39.7764 117.6 38.9353C117.6 38.1429 117.566 38.0711 117.04 37.7566C116.732 37.5726 116.48 37.3529 116.48 37.2686C116.48 37.1842 116.228 36.8446 115.92 36.5142C115.613 36.1839 114.911 35.4307 114.36 34.841C113.81 34.2508 113.211 33.7214 113.029 33.6638C112.847 33.6063 112.539 33.3412 112.344 33.0745C112.147 32.8041 111.842 32.5897 111.655 32.5897C111.47 32.5897 111.047 32.3525 110.715 32.0627C110.383 31.7729 109.924 31.404 109.694 31.2435C109.465 31.0826 109.177 30.7077 109.054 30.4097C108.889 30.0088 108.672 29.8159 108.215 29.6643C107.877 29.5516 107.505 29.3234 107.389 29.1576C107.273 28.9914 106.916 28.7442 106.594 28.608C106.272 28.4718 105.81 28.1167 105.568 27.8184C105.325 27.52 104.929 27.2257 104.688 27.1641C104.446 27.1029 103.992 26.771 103.679 26.4272C103.151 25.8476 103.06 25.8083 102.443 25.8918C101.794 25.9801 101.28 25.7317 101.28 25.3304C101.28 25.0146 100.67 24.6449 100.148 24.6437C98.6891 24.6397 97.8975 24.4439 97.7499 24.0503C97.4919 23.3636 95.3599 22.9052 95.3599 23.5367ZM57.5707 23.6263C57.3343 23.7746 57.0523 24.0649 56.9435 24.2704C56.7615 24.6149 56.6407 24.6449 55.4283 24.6449H54.1111L53.6487 25.2286C53.2559 25.7252 53.0923 25.8111 52.5535 25.8054C51.6355 25.7957 51.4187 25.895 51.0771 26.4823C50.8675 26.8423 50.5559 27.0798 50.0903 27.2359C49.6807 27.3725 49.2507 27.6745 49.0103 27.9935C48.7911 28.2849 48.4559 28.5711 48.2655 28.629C48.0755 28.6874 47.7399 28.9002 47.5199 29.1021C47.2999 29.3044 46.8411 29.6007 46.5003 29.7604C46.1023 29.9472 45.8059 30.2318 45.6723 30.5561C45.5339 30.8921 45.2203 31.1843 44.7323 31.4312C44.3295 31.6351 43.9999 31.8799 43.9999 31.9752C43.9999 32.2399 43.4839 32.5787 43.0723 32.5844C42.8391 32.5876 42.6091 32.7595 42.4415 33.055C42.2967 33.3108 41.9515 33.603 41.6743 33.7048C41.3971 33.8061 41.0875 34.0728 40.9871 34.2966C40.8863 34.5207 40.6267 34.772 40.4103 34.8555C40.1939 34.939 39.8927 35.211 39.7411 35.4603C39.4067 36.01 38.1575 37.3788 37.4075 38.0172C37.1947 38.1984 37.1523 38.4274 37.2135 39.0602C37.2883 39.8348 37.2695 39.883 36.7991 40.1295C36.5279 40.2718 36.2391 40.5668 36.1571 40.7853C36.0519 41.065 35.8859 41.183 35.5967 41.183C34.7207 41.183 34.2571 42.0946 34.5539 43.2328C34.5571 43.2458 34.6695 43.2989 34.8035 43.3507C35.0003 43.4274 35.0155 43.3856 34.8835 43.1355C34.4595 42.3321 34.7643 41.6637 35.6195 41.523C35.9995 41.4602 36.2947 41.2993 36.3963 41.0999C36.5455 40.806 37.2551 40.6013 37.2983 40.8392C37.4599 41.7306 37.4251 41.8234 36.9499 41.7675C36.6323 41.7298 36.4799 41.7837 36.4799 41.9337C36.4799 42.2389 37.1975 42.2162 37.5083 41.9008C37.6467 41.761 37.7599 41.4752 37.7599 41.2661C37.7599 41.0569 37.8499 40.8437 37.9599 40.7926C38.0699 40.7415 37.9887 40.7432 37.7799 40.7967C37.4863 40.8713 37.4307 40.8433 37.5363 40.6734C37.6111 40.5522 37.6743 39.9471 37.6763 39.3285L37.6799 38.2041L38.2051 38.0663C38.6179 37.9576 38.7511 37.8223 38.8279 37.4339C38.8851 37.1429 39.0723 36.8717 39.2823 36.7748C39.4939 36.6768 39.7147 36.3545 39.8251 35.9812C39.9739 35.4773 40.1111 35.3261 40.5167 35.2195C40.8279 35.1377 41.1223 34.9046 41.2819 34.6127C41.4535 34.2986 41.7159 34.1028 42.0595 34.0315C42.3443 33.9723 42.6707 33.7952 42.7847 33.6375C42.8983 33.4798 43.0743 33.4028 43.1755 33.466C43.2771 33.5297 43.3599 33.511 43.3599 33.4251C43.3599 33.3391 43.5151 33.3096 43.7051 33.3598C43.9235 33.4178 44.0119 33.389 43.9459 33.2812C43.8871 33.1847 44.0323 33.0623 44.2803 32.9995C44.9019 32.841 45.1003 32.6294 44.9979 32.2326C44.9339 31.9849 45.0307 31.7883 45.3399 31.5386C45.5775 31.3469 45.8947 30.9395 46.0455 30.6331C46.2655 30.1868 46.4599 30.0425 47.0251 29.9043C47.5123 29.7851 47.7707 29.6221 47.8603 29.3773C47.9339 29.1759 48.1267 29.0226 48.3071 29.0226C48.8855 29.0226 49.4583 28.6436 49.6751 28.1179C49.8251 27.7539 50.0575 27.5423 50.4539 27.4098C50.8159 27.289 51.1355 27.0206 51.3439 26.6627C51.6491 26.139 51.7215 26.1042 52.5147 26.1017C53.4679 26.0989 53.7071 25.9903 53.9783 25.437C54.1547 25.0774 54.2807 25.0446 55.7587 24.9692L57.3491 24.8881L57.4927 24.379C57.8283 23.1885 59.4879 23.4451 59.2963 24.6575C59.2279 25.0908 59.2487 25.2821 59.3563 25.2148C59.4463 25.1585 59.5199 24.715 59.5199 24.2299V23.3478L58.7599 23.3523C58.3367 23.3547 57.8095 23.4759 57.5707 23.6263ZM44.9599 24.2935C44.9599 24.3977 44.9059 24.4645 44.8399 24.4423C44.7739 24.42 44.7079 24.4666 44.6935 24.5456C44.6791 24.6251 44.5711 24.7515 44.4535 24.8269C44.3343 24.9035 44.3175 24.9651 44.4151 24.9668C44.6563 24.97 45.1959 24.3438 45.0655 24.2116C45.0075 24.1528 44.9599 24.1897 44.9599 24.2935ZM44.9599 26.0965C44.9599 26.6072 44.8743 26.7969 44.5387 27.0288C44.3067 27.1893 43.8631 27.5938 43.5523 27.9282C43.2415 28.2626 42.8927 28.5362 42.7775 28.5362C42.6619 28.5362 42.4447 28.7369 42.2947 28.9821C41.9215 29.593 41.6047 29.8333 41.1731 29.8333C40.9651 29.8333 40.7003 29.9987 40.5591 30.2168C40.2803 30.6485 38.6531 30.9655 38.3407 30.6489C38.2499 30.5569 38.1003 30.4831 38.0079 30.4843C37.9155 30.4855 37.9479 30.5577 38.0799 30.644C38.2851 30.7782 38.2791 30.8017 38.0399 30.8037C37.8859 30.8049 37.7599 30.8836 37.7599 30.978C37.7599 31.0725 37.8223 31.1106 37.8983 31.0627C37.9747 31.0149 38.0119 31.1933 37.9815 31.4588C37.9475 31.7563 38.0015 31.9484 38.1231 31.9606C38.9747 32.0437 39.1283 32.0023 39.2799 31.6464C39.3699 31.4348 39.6267 31.2322 39.8667 31.1827C40.1011 31.1345 40.4927 30.8844 40.7367 30.6266C40.9803 30.3684 41.2807 30.1576 41.4043 30.1576C41.5279 30.1576 41.9783 29.811 42.4059 29.3874C42.8331 28.9639 43.5147 28.3254 43.9207 27.9687C45.4451 26.6299 45.3891 26.7065 45.3143 26.0588C45.2219 25.257 44.9599 25.285 44.9599 26.0965ZM113.118 26.8314C113.22 26.9558 113.418 27.0134 113.558 26.9586C113.725 26.8934 113.773 26.9238 113.698 27.0474C113.621 27.1743 113.673 27.2006 113.859 27.1281C114.073 27.045 114.112 27.0835 114.03 27.3003C113.958 27.4892 113.984 27.5423 114.109 27.4641C114.233 27.3867 114.26 27.4377 114.192 27.6177C114.136 27.7661 114.16 27.8877 114.245 27.8877C114.802 27.8877 114.162 26.9607 113.466 26.7596C113.017 26.6299 112.962 26.6412 113.118 26.8314ZM50.7111 29.7762L50.1599 30.3672L50.6723 29.9947C50.9539 29.7896 51.2215 29.5236 51.2671 29.4033C51.3903 29.0778 51.3163 29.1276 50.7111 29.7762ZM70.6399 29.3469C70.6943 29.4361 71.0247 29.5091 71.3743 29.5091C71.7919 29.5091 72.0415 29.5926 72.1019 29.7523C72.1527 29.886 72.3123 29.9975 72.4571 30.0003C72.9615 30.0101 72.2231 30.3193 70.8643 30.6675C69.9227 30.9087 69.5187 30.9509 69.3915 30.822C69.2947 30.7239 69.1043 30.646 68.9679 30.6489C68.8027 30.6521 68.8927 30.8126 69.2379 31.1308L69.7555 31.6083L70.2931 31.2873C70.5883 31.1106 71.4651 30.8329 72.2411 30.6704C73.5915 30.3874 73.6367 30.3643 73.2979 30.1236L72.9439 29.8726L73.3655 29.7652C73.5975 29.7065 73.9431 29.7117 74.1335 29.7774C74.4543 29.8876 74.4443 29.9047 73.9999 30.008C73.5391 30.1146 73.5455 30.1207 74.1599 30.1548C74.7263 30.186 74.7539 30.2046 74.3999 30.3197C74.0211 30.4426 74.0271 30.4503 74.5199 30.4657C75.7343 30.5034 74.9783 29.6971 73.6511 29.539L72.7199 29.428L74.0799 29.3368C75.2223 29.2598 75.0479 29.2403 72.9903 29.2152C71.3907 29.1953 70.5755 29.2411 70.6399 29.3469ZM79.1483 29.3688C80.2267 29.4523 81.0839 29.4474 81.3083 29.3562C81.5631 29.2529 81.0023 29.2091 79.5199 29.218L77.3599 29.2306L79.1483 29.3688ZM78.7743 29.8122C78.3119 30.2034 78.4711 30.3724 79.5199 30.6043C80.0039 30.7109 80.8747 30.9338 81.4551 31.0992C82.0359 31.2646 82.6119 31.3797 82.7351 31.355C82.8587 31.3299 83.1759 31.2666 83.4399 31.2143C84.1831 31.0664 84.9471 30.7964 85.0363 30.6497C85.0811 30.5767 84.8279 30.5828 84.4739 30.6635C82.5815 31.0944 78.3535 30.3931 79.8795 29.9014C80.2283 29.7891 80.2295 29.7814 79.9199 29.6586C79.4191 29.46 79.1475 29.4965 78.7743 29.8122ZM48.1567 30.7291C47.8475 31.1065 48.0683 31.1779 48.3991 30.807C48.5587 30.6282 48.6151 30.4819 48.5243 30.4819C48.4335 30.4819 48.2679 30.5929 48.1567 30.7291ZM66.6727 31.1053C66.8347 32.3278 63.7983 33.0854 63.4315 31.914C63.3603 31.6874 63.2859 31.6375 63.2083 31.7652C63.1223 31.9059 63.0391 31.8921 62.8919 31.7125C62.6819 31.4559 62.7807 31.1304 63.0691 31.1304C63.1703 31.1304 63.1503 31.2451 63.0195 31.4142C62.8203 31.6712 62.8263 31.6772 63.0799 31.4754C63.2339 31.353 63.3543 31.0976 63.3471 30.9079C63.3403 30.7182 63.2995 30.6501 63.2571 30.7567C63.2143 30.8629 63.0875 30.9144 62.9751 30.8706C62.7215 30.7721 62.3355 31.2176 62.4755 31.4474C62.5323 31.5406 62.5091 31.6168 62.4235 31.6168C62.3379 31.6168 62.2923 31.7445 62.3219 31.9006C62.3511 32.0566 62.3811 32.2435 62.3875 32.3157C62.3943 32.3878 62.4715 32.4016 62.5595 32.3469C62.6643 32.2812 62.6671 32.3846 62.5683 32.6488C62.3387 33.2597 63.2947 33.5937 63.7027 33.0453C63.9263 32.7449 64.1843 32.6643 65.1851 32.5812C66.6967 32.4559 67.0771 32.1742 67.0075 31.2326C66.9815 30.8783 66.8763 30.5601 66.7739 30.5261C66.6447 30.4831 66.6139 30.6598 66.6727 31.1053ZM85.3867 30.5901C85.0715 30.9091 85.3303 32.0323 85.7743 32.2731C87.0079 32.9423 89.6171 32.5532 88.8835 31.8098C88.8375 31.7632 88.7999 31.8138 88.7999 31.9225C88.7999 32.3866 87.7123 32.6221 86.8043 32.3546C85.8991 32.0883 85.7599 31.9123 85.7599 31.036C85.7599 30.5115 85.6243 30.3493 85.3867 30.5901ZM106.184 30.7295C106.235 30.8657 106.431 31.0583 106.619 31.1568C106.933 31.3222 106.929 31.3023 106.572 30.9091C106.126 30.4178 106.053 30.3838 106.184 30.7295ZM89.1459 31.0173C89.0099 31.1835 89.0907 31.2322 89.5263 31.2447C90.1019 31.261 90.2659 31.0753 89.8267 30.9047C89.4587 30.7616 89.3395 30.781 89.1459 31.0173ZM90.8007 31.1312C90.9607 31.3104 91.1259 31.4215 91.1683 31.3785C91.2759 31.2695 90.8767 30.8062 90.6755 30.8062C90.5847 30.8062 90.6411 30.9525 90.8007 31.1312ZM89.3319 31.3992C89.3899 31.4579 89.3623 31.5974 89.2707 31.7093C89.1555 31.8499 89.1559 31.9448 89.2727 32.0177C89.3655 32.0757 89.3959 32.3051 89.3411 32.5277C89.1275 33.3894 90.0647 33.9435 90.8951 33.4466C91.4311 33.1255 91.6023 31.9411 91.1127 31.9411C90.9771 31.9411 90.8775 32.0323 90.8919 32.1438C90.9643 32.7105 90.8467 33.0826 90.5427 33.2475C90.0875 33.4944 89.9523 33.3047 89.9019 32.3465C89.8783 31.9006 89.7827 31.4823 89.6895 31.4166C89.4783 31.2682 89.1887 31.2541 89.3319 31.3992ZM36.1599 31.9087C35.6003 31.9975 35.3599 32.2382 35.3599 32.7105C35.3599 33.055 35.3963 33.085 35.6035 32.9107C35.8043 32.7421 35.8315 32.7478 35.7579 32.9419C35.7083 33.0732 35.8295 33.3169 36.0315 33.4916C36.3175 33.7392 36.3483 33.7457 36.1775 33.522C36.0583 33.3659 36.0339 33.2382 36.1231 33.2382C36.6011 33.2382 36.5827 34.3416 36.1019 34.5268C35.7039 34.68 35.5199 34.9974 35.5199 35.53C35.5199 35.738 35.3551 35.9074 35.0479 36.016C34.7231 36.1308 34.5215 36.3509 34.4003 36.723C34.1511 37.4883 33.3855 37.7051 32.6859 37.209C32.4319 37.0282 32.3107 37.0136 32.2255 37.153C32.1491 37.2783 32.1807 37.2977 32.3199 37.2106C32.4675 37.1182 32.4911 37.1421 32.3999 37.2917C32.3087 37.4412 32.3323 37.4651 32.4799 37.3727C32.6215 37.284 32.6507 37.3046 32.5703 37.4368C32.4855 37.5758 32.3927 37.5823 32.2467 37.4595C32.0223 37.2706 31.5891 37.6317 31.7927 37.8381C32.5995 38.656 31.9799 40.3723 30.8779 40.3723C30.5375 40.3723 30.2143 40.4452 30.1599 40.5344C30.0999 40.6329 30.3351 40.6966 30.7607 40.6966C31.6195 40.6966 32.1995 40.1583 32.7039 38.894C33.0531 38.0193 33.2199 37.8616 33.9643 37.7023C34.2639 37.6382 34.4931 37.4287 34.6671 37.0594C34.8087 36.7578 35.0935 36.4198 35.2999 36.3079C35.5059 36.1964 35.7203 35.9589 35.7763 35.7805C35.8319 35.6026 36.1191 35.2309 36.4139 34.9553C36.9531 34.4514 37.2771 33.3558 36.9475 33.1494C36.8663 33.0984 36.7999 32.9841 36.7999 32.8949C36.7999 32.8057 36.8671 32.7745 36.9487 32.826C37.0307 32.8771 37.1431 32.845 37.1983 32.7546C37.2535 32.6638 37.2227 32.5897 37.1295 32.5897C37.0363 32.5897 36.9599 32.4891 36.9599 32.3663C36.9599 32.0352 36.6127 31.8365 36.1599 31.9087ZM61.8151 31.9817C61.7471 32.0931 61.7123 32.3825 61.7375 32.6253C61.8215 33.4372 60.2347 34.0274 59.6263 33.4109C59.4107 33.1924 59.1483 33.1843 59.2799 33.4004C59.3343 33.4895 59.2751 33.5625 59.1479 33.5625C58.8639 33.5625 58.6839 34.1665 58.9367 34.2714C59.0375 34.3132 58.9687 34.3533 58.7839 34.3602C58.5987 34.3675 58.1303 34.5442 57.7423 34.753C57.3547 34.9621 56.7679 35.1843 56.4387 35.2467C56.1091 35.3095 55.8399 35.4169 55.8399 35.4854C55.8399 35.5539 55.5879 35.7319 55.2799 35.8807C54.9719 36.0298 54.7111 36.2621 54.6999 36.3975C54.6887 36.5324 54.6699 36.7343 54.6571 36.8458C54.6427 36.9747 54.3891 37.0436 53.9595 37.0347C53.2183 37.0193 53.2503 37.3298 54.0099 37.5227C54.5675 37.6646 55.0099 37.3735 55.1663 36.7615C55.2447 36.4558 55.4619 36.1583 55.6899 36.0444C57.3139 35.2349 58.3543 34.8596 58.9743 34.8596C59.5419 34.8596 59.7215 34.7842 59.9335 34.4559C60.0803 34.2289 60.4563 33.9804 60.7919 33.8888C61.5719 33.676 61.8883 33.2998 61.9923 32.4624C62.0795 31.7595 62.0311 31.6278 61.8151 31.9817ZM93.9135 32.0141C94.0115 32.1341 94.1231 32.3955 94.1611 32.5949C94.1987 32.7948 94.2795 33.0027 94.3403 33.0574C94.4011 33.1122 94.4027 33.0214 94.3435 32.8552C94.2619 32.6257 94.2963 32.5767 94.4863 32.6509C94.6503 32.7145 94.6971 32.6833 94.6219 32.5601C94.5455 32.4348 94.5959 32.4069 94.7735 32.4758C95.2959 32.6793 95.0283 32.4296 94.3875 32.1154C93.9919 31.9221 93.8051 31.8819 93.9135 32.0141ZM91.7411 32.5897C91.7591 33.2816 91.7951 33.3363 92.4407 33.6509C92.8151 33.8329 93.3191 34.2127 93.5607 34.4948C93.9091 34.9018 94.1963 35.0424 94.9495 35.177C95.5159 35.2779 96.0463 35.4859 96.2627 35.6922C96.5687 35.9836 96.7475 36.0221 97.3931 35.9378C98.3099 35.8174 98.4487 35.8924 98.7743 36.6849C98.9255 37.0533 99.1867 37.3561 99.4351 37.4518C99.6607 37.5389 99.9159 37.7975 100.002 38.0261C100.093 38.2681 100.391 38.5409 100.715 38.6783C101.028 38.8105 101.381 39.1279 101.52 39.3999C101.657 39.6674 101.861 39.8859 101.975 39.8859C102.088 39.8859 102.338 40.1692 102.53 40.5154C103.056 41.4639 104.903 42.1161 105.461 41.5506C105.589 41.4209 105.44 41.3723 104.913 41.3723C103.939 41.3723 102.4 40.0821 102.4 39.2661C102.4 39.2016 102.154 39.0148 101.853 38.8506C101.145 38.4639 99.6671 36.997 99.5931 36.6066C99.5183 36.2126 99.6739 35.8093 99.8567 35.924C100.168 36.119 99.9583 35.7189 99.4331 35.1162C99.1291 34.7672 98.8799 34.5742 98.8799 34.6877C98.8799 34.8012 98.7807 34.8555 98.6595 34.8085C98.5383 34.7615 98.3623 34.8004 98.2683 34.8957C98.1475 35.0181 98.1239 34.967 98.1875 34.721C98.2395 34.5187 98.2023 34.3732 98.0987 34.3732C98.0003 34.3732 97.9199 34.5045 97.9199 34.665C97.9199 35.2872 97.1435 35.5414 96.2875 35.1989C96.0851 35.1182 95.5107 34.9682 95.0103 34.8653C94.2307 34.7056 94.0543 34.5994 93.7759 34.1207C93.5707 33.7684 93.3275 33.5625 93.1175 33.5625C92.4083 33.5625 91.8631 33.113 91.7911 32.4689C91.7323 31.9456 91.7251 31.9626 91.7411 32.5897ZM58.9287 32.4681C58.6127 32.8203 58.4719 33.4745 58.7491 33.301C58.8239 33.254 58.8439 33.1482 58.7935 33.0655C58.7431 32.9829 58.8963 32.7328 59.1343 32.5094C59.3719 32.2861 59.4967 32.1033 59.4111 32.1033C59.3255 32.1033 59.1083 32.2674 58.9287 32.4681ZM65.3775 36.3509C65.0587 36.6342 64.9395 36.9196 64.8835 37.5349C64.8211 38.2223 64.8291 38.2552 64.9375 37.7513C65.3243 35.952 67.1871 36.0302 68.0587 37.8831C68.4079 38.6248 68.6987 38.504 68.8063 37.5726C69.0303 35.6297 71.4843 35.6156 71.7715 37.5555C71.8295 37.9475 71.9271 38.3002 71.9887 38.3383C72.1167 38.4189 71.9415 37.0176 71.7739 36.6245C71.6087 36.237 70.9639 35.9946 70.0971 35.9946C69.1231 35.9946 68.7811 36.3452 68.6763 37.4522C68.5907 38.3545 68.3983 38.5097 68.2447 37.8008C68.1895 37.5458 67.9499 37.1591 67.7123 36.9414C66.6495 35.9686 65.9939 35.8028 65.3775 36.3509ZM73.1283 36.4725C72.8343 36.7704 72.3835 38.059 72.5239 38.2008C72.5595 38.2369 72.6715 37.986 72.7727 37.6435C73.1727 36.2917 74.7263 35.9982 75.4951 37.1295L75.8807 37.697L75.7679 37.2106C75.5195 36.1405 73.9023 35.6881 73.1283 36.4725ZM31.7199 37.1701C31.7419 37.2815 31.6699 37.3545 31.5599 37.3322C31.4499 37.3099 31.3599 37.3646 31.3599 37.4538C31.3599 37.6735 31.5743 37.6581 31.8079 37.4214C32.0415 37.1846 32.0567 36.9674 31.8399 36.9674C31.7519 36.9674 31.6979 37.0586 31.7199 37.1701ZM123.04 37.2106C123.04 37.3444 123.157 37.4538 123.299 37.4538C123.512 37.4538 123.523 37.4096 123.36 37.2106C123.25 37.0768 123.133 36.9674 123.1 36.9674C123.067 36.9674 123.04 37.0768 123.04 37.2106ZM52.4799 37.774C52.4799 38.532 52.0959 39.2373 51.6831 39.2373C51.5291 39.2373 51.2199 39.3832 50.9963 39.5616C50.7723 39.7399 50.3687 39.8859 50.0991 39.8859C49.6815 39.8859 49.5895 39.9629 49.4755 40.4075C49.3827 40.7703 49.2231 40.9576 48.9511 41.0224C48.6859 41.0853 48.5455 41.2438 48.5151 41.5137C48.3731 42.7788 48.0819 43.1469 47.3187 43.0253C46.9055 42.9596 46.7567 43.0147 46.5879 43.2956C46.4715 43.4902 46.4499 43.6029 46.5399 43.5465C46.7507 43.4144 47.0399 43.9608 47.0399 44.491C47.0399 44.7654 46.9059 44.9729 46.6363 45.116C46.4143 45.234 46.1083 45.583 45.9563 45.8914C45.6239 46.5663 45.0167 46.7029 44.2375 46.2777C43.4247 45.8339 43.2363 46.1286 43.4291 47.542C43.6043 48.8257 43.4939 49.1338 42.7835 49.3494C41.9079 49.6149 41.8419 49.6956 41.7915 50.563C41.7435 51.3916 41.7391 51.3976 41.2087 51.3976C40.4687 51.3976 40.2727 52.0105 40.6635 53.1045C40.9551 53.9225 40.6803 54.5577 39.4923 55.8106C39.0331 56.2946 38.0211 56.4494 37.8659 56.0591C37.8215 55.9476 37.7795 56.1211 37.7727 56.4446C37.7607 57.0007 37.7859 57.0307 38.2363 56.9918C39.0331 56.9229 39.2551 57.2172 39.2203 58.297C39.1835 59.432 39.1947 59.4174 38.3715 59.3841L37.7171 59.3578L37.8143 60.19C37.8679 60.6476 38.0731 61.4777 38.2703 62.0351C38.7987 63.528 38.2655 66.3143 37.4519 66.3143C36.8863 66.3143 36.5863 67.0241 36.5727 68.3953L36.5599 69.6381L36.0011 69.692C35.4671 69.7431 35.2079 69.9361 35.2023 70.2867C35.1983 70.5384 36.8419 70.3702 37.1567 70.0864C37.3091 69.949 37.4755 69.5733 37.5267 69.251C37.5779 68.9288 37.7595 68.3653 37.9299 67.9989C38.1003 67.6325 38.2423 67.2312 38.2451 67.1072C38.2479 66.9831 38.3559 66.7403 38.4851 66.5672C38.8067 66.136 38.8167 62.5341 38.4979 61.9147C38.2363 61.4064 38.3147 61.256 38.9863 60.9812C39.8723 60.618 40.3011 57.8912 39.6343 56.8596L39.3483 56.4174L40.0363 56.1187C41.1907 55.6173 41.5999 54.4333 41.0663 53.139C40.7947 52.4807 40.9875 52.2083 41.7247 52.2083C42.4339 52.2083 42.7303 51.274 42.3871 50.1176C42.3443 49.9733 42.5075 49.8399 42.8391 49.7483C43.4139 49.5898 43.7535 49.1472 43.8931 48.3738C44.0163 47.6924 44.6407 47.0386 45.3595 46.8371C45.7951 46.7155 46.0007 46.5392 46.1607 46.1509C46.2795 45.8635 46.5583 45.5295 46.7803 45.4091C47.1607 45.2028 47.5899 44.3884 47.4131 44.2093C47.3687 44.1643 47.5283 43.9973 47.7679 43.838C48.2023 43.5494 48.6131 42.7743 48.7423 41.9981C48.7799 41.7727 48.9687 41.4789 49.1619 41.3451C49.3551 41.2113 49.6255 40.9892 49.7631 40.8518C49.9011 40.714 50.2475 40.5036 50.5331 40.3836C52.1387 39.7095 53.4579 37.7229 52.6399 37.2106C52.5431 37.1502 52.4799 37.3731 52.4799 37.774ZM61.7323 37.3261C61.2455 37.4927 60.9599 38.1449 60.9599 39.0898C60.9599 39.915 60.7647 39.9868 60.1083 39.4031C59.1711 38.5693 57.9627 38.7335 57.4159 39.7695C57.1871 40.202 57.1055 42.3459 57.3227 42.2101C57.4079 42.1566 57.4359 41.8048 57.3847 41.4266C57.1403 39.6196 58.2595 38.8976 60.0143 39.7306C60.9539 40.1765 60.9879 40.1514 61.1343 38.8907C61.3031 37.4392 61.9883 37.0027 62.9747 37.7173C63.8319 38.3383 64.5483 38.727 64.6819 38.6435C64.7575 38.5961 64.6055 38.4368 64.3443 38.2892C64.0831 38.1421 63.6915 37.8912 63.4743 37.7319C62.9063 37.316 62.2251 37.1571 61.7323 37.3261ZM76.6867 37.8591C76.1635 38.5235 76.0467 38.5559 75.9527 38.0618C75.8863 37.7124 75.8827 37.7116 75.8615 38.042C75.8163 38.7627 76.2355 38.7894 76.7819 38.1007C77.7575 36.8705 79.5199 37.2957 79.5199 38.7614C79.5199 40.0768 79.8655 40.3001 80.7219 39.5381C81.9023 38.4878 83.8343 40.6666 82.7771 41.8558C82.2527 42.4456 83.7627 42.4359 84.3063 41.8461C85.3051 40.7626 85.9607 41.3731 86.0783 43.4959C86.1723 45.1878 86.2863 45.3082 87.1059 44.5785C88.1155 43.6803 89.2103 44.9721 88.8035 46.5809C88.5355 47.6405 88.7259 47.8391 89.8399 47.6604L90.6399 47.5319L89.7599 47.5594C88.7431 47.5919 88.5175 47.2372 89.1131 46.5416C89.5211 46.0645 89.5199 45.9778 89.0939 45.2555C88.2431 43.8124 87.5051 43.536 86.8799 44.4257C86.3615 45.1634 86.2835 45.0418 86.2119 43.3811C86.1167 41.1773 85.2655 40.47 84.1559 41.6734C83.6391 42.2344 83.6027 42.2052 83.4451 41.1055C83.1907 39.3318 81.4303 38.2617 80.5303 39.3338C79.8975 40.0881 79.6863 39.9333 79.6823 38.7104C79.6775 37.1765 77.6727 36.607 76.6867 37.8591ZM38.4735 40.3832C38.4155 40.4781 38.4063 40.5948 38.4531 40.6426C38.5679 40.7586 38.8799 40.5539 38.8799 40.3625C38.8799 40.1554 38.6035 40.1692 38.4735 40.3832ZM30.6307 41.219C31.1619 41.9872 30.6339 43.1286 29.7479 43.1286C29.3739 43.1286 29.2487 43.3491 29.1607 44.1651C29.0775 44.9352 29.0031 45.0447 28.5143 45.1205C27.9271 45.2113 27.7899 45.4865 27.8203 46.5112C27.8471 47.4168 27.8183 47.4998 27.3643 47.8274C27.0927 48.0236 26.8799 48.3243 26.8799 48.512C26.8799 49.2213 26.4951 50.1374 26.1255 50.3081C25.9203 50.4029 25.7131 50.6684 25.6655 50.8987C25.6179 51.1285 25.4271 51.6631 25.2419 52.0867C24.9379 52.7819 24.7923 52.9282 24.4511 52.88C24.3915 52.8715 24.3791 53.4523 24.4239 54.171C24.5051 55.4742 23.9627 56.9444 23.5059 56.6582C23.1879 56.4592 22.7199 57.2423 22.7011 58.0047C22.6911 58.4283 22.6667 59.0988 22.6471 59.4944C22.6275 59.8904 22.6991 60.5106 22.8059 60.8726C23.0791 61.7971 22.7691 62.4218 22.0359 62.4254C21.2103 62.4295 21.0431 62.6131 21.3387 63.1923C21.9915 64.4716 21.4899 67.5782 20.6355 67.5474C20.3743 67.538 20.1595 67.4574 20.1579 67.3682C20.1547 67.1975 19.8467 67.6167 19.8423 67.7971C19.8355 68.0844 21.0967 68.0107 21.2799 67.7131C21.8559 66.7784 22.1107 63.7777 21.6743 63.0626C21.6231 62.9783 21.7959 62.9094 22.0587 62.9094C22.9963 62.9094 23.3799 61.9897 23.0215 60.6014C22.7475 59.5398 23.0127 57.6878 23.4675 57.4851C23.9163 57.2857 24.4607 56.246 24.6523 55.2237C24.7347 54.7814 24.9023 54.3052 25.0239 54.1653C25.1455 54.0255 25.2943 53.5824 25.3543 53.1811C25.5243 52.047 25.9323 51.0361 26.4239 50.5306C26.7423 50.2031 26.9035 49.8354 26.9783 49.2655C27.0643 48.6068 27.1803 48.3871 27.6215 48.0458C28.1247 47.6571 28.1599 47.5679 28.1599 46.6794C28.1599 45.8083 28.1923 45.7208 28.5483 45.6304C29.1495 45.4772 29.4147 45.0629 29.4695 44.191C29.5167 43.4424 29.5531 43.3824 30.0327 43.2571C31.0303 42.9965 31.5483 40.8587 30.6139 40.8587C30.4163 40.8587 30.4187 40.9122 30.6307 41.219ZM54.8291 41.4744C54.6155 41.7136 54.3183 42.5121 53.9951 43.7147C53.9683 43.8141 53.5735 43.9316 53.1175 43.9762C51.4255 44.1408 50.4271 45.8193 51.4435 46.7905C52.1631 47.4784 52.0755 47.6348 51.0047 47.5736L50.1599 47.5254L50.9599 47.6571C52.1779 47.8578 52.5423 47.255 51.5863 46.6207C50.9435 46.1934 51.1727 45.4071 52.1543 44.673C52.7787 44.206 53.3067 44.1489 53.6071 44.5157C53.9967 44.9912 54.3495 45.0893 54.5831 44.7873C54.7743 44.54 54.7699 44.5307 54.5451 44.7082C54.2355 44.9527 54.0799 44.8221 54.0799 44.3175C54.0799 43.8769 54.3471 43.8068 54.4395 44.223C54.4739 44.3791 54.5063 44.0074 54.5111 43.397C54.5259 41.5072 55.4835 40.7663 56.4955 41.8615L56.9923 42.399L56.7423 41.8915C56.3647 41.127 55.3391 40.9033 54.8291 41.4744ZM46.2763 42.4955C45.8627 42.6536 45.5475 43.3122 45.8059 43.4784C46.0343 43.626 46.5035 43.3021 46.7023 42.8595C46.9003 42.4193 46.7683 42.307 46.2763 42.4955ZM105.982 42.6827C105.999 43.039 106.72 43.2875 106.72 42.9373C106.72 42.8562 106.594 42.8116 106.44 42.8376C106.249 42.8704 106.175 42.795 106.207 42.6017C106.233 42.4456 106.189 42.3179 106.109 42.3179C106.029 42.3179 105.972 42.4821 105.982 42.6827ZM105.547 43.0747C105.125 43.5019 105.455 44.8793 106.08 45.2984C106.791 45.7751 106.827 45.9089 106.477 46.7589C106.203 47.424 106.312 47.7548 107.235 49.0669C107.695 49.7207 107.7 49.7511 107.474 50.4293C107.212 51.2164 107.262 51.5821 107.688 51.9724C108.075 52.3271 109.44 52.4487 109.44 52.1285C109.44 51.9598 109.278 51.9217 108.805 51.9797C107.729 52.111 107.262 51.4005 107.77 50.4049C108.003 49.9481 107.998 49.8711 107.69 49.2732C107.508 48.9202 107.36 48.5355 107.36 48.4184C107.36 48.3012 107.216 48.073 107.04 47.9117C106.428 47.3507 106.704 46.2684 107.423 46.4079C107.707 46.463 107.84 46.4184 107.84 46.268C107.84 46.1464 107.912 46.0471 108 46.0471C108.088 46.0471 108.16 45.9377 108.16 45.8039C108.16 45.4991 107.903 45.4849 107.79 45.784C107.48 46.6012 106.177 45.1865 106.166 44.0204C106.161 43.5165 106.1 43.3763 105.893 43.3921C105.727 43.4047 105.658 43.3276 105.709 43.1894C105.8 42.9515 105.722 42.8968 105.547 43.0747ZM33.4783 44.204C33.2371 44.5923 32.8815 44.9543 32.6883 45.0078C32.2663 45.1245 31.9227 45.6195 31.7679 46.3345C31.7051 46.6239 31.5159 46.9352 31.3467 47.0268C31.0975 47.1622 31.0399 47.373 31.0399 48.152C31.0399 49.0924 30.6095 49.9384 30.1311 49.9384C29.7479 49.9384 29.3047 51.1447 29.4315 51.8419C29.5639 52.5719 29.4575 52.7734 28.8811 52.882C28.3779 52.9765 28.0979 53.7381 28.2879 54.4957C28.4447 55.1219 28.4359 55.1418 27.7435 55.7166C27.1951 56.1718 27.0399 56.4085 27.0399 56.7895C27.0399 57.0583 26.9559 57.7413 26.8527 58.3071C26.7083 59.1032 26.7095 59.4336 26.8587 59.7656C27.1171 60.3399 27.2319 60.1831 27.0427 59.5143C26.9255 59.0996 26.9623 58.7725 27.2055 58.0716C27.3783 57.5727 27.5199 57.0615 27.5199 56.9355C27.5199 56.8094 27.7791 56.4158 28.0959 56.0603C28.6459 55.4434 28.6675 55.3757 28.5679 54.5674C28.4511 53.6209 28.6495 53.3028 29.3559 53.3028C29.8679 53.3028 29.9807 52.9213 29.7471 51.9809C29.5351 51.1269 29.8295 50.4248 30.3995 50.4248C30.7559 50.4248 31.1191 49.8099 31.2819 48.9307C31.3423 48.6056 31.4915 48.3004 31.6139 48.253C31.7359 48.2056 31.8191 48.2185 31.7979 48.2822C31.7771 48.3458 31.8319 48.4216 31.9199 48.4504C32.0079 48.4788 32.1903 48.6036 32.3255 48.7276C32.5387 48.923 32.5715 48.9104 32.5715 48.6348C32.5715 48.3332 32.4319 48.24 32.0843 48.3097C31.9987 48.3272 32.0443 48.208 32.1851 48.0454C32.3587 47.8452 32.3995 47.6446 32.3119 47.4253C31.9367 46.4861 32.2183 45.3985 32.8371 45.3985C33.0015 45.3985 33.2723 45.1549 33.4527 44.8457C33.8151 44.2235 34.0195 44.1055 34.6215 44.1724C35.3095 44.249 35.0719 43.7143 34.3583 43.5802C33.9739 43.508 33.8595 43.5895 33.4783 44.204ZM119.983 43.7918C119.799 43.9539 119.686 44.1809 119.731 44.2964C119.795 44.4565 119.817 44.4586 119.827 44.3041C119.861 43.7707 120.947 44.0869 121.36 44.75C121.582 45.1067 121.86 45.3985 121.977 45.3985C122.358 45.3985 122.72 45.9774 122.72 46.5866C122.72 46.9141 122.656 47.1821 122.579 47.1821C122.339 47.1821 122.299 47.8825 122.506 48.4792C122.614 48.7913 122.706 48.9469 122.711 48.8249C122.717 48.6867 122.837 48.6344 123.032 48.6863C123.204 48.7317 123.369 48.6932 123.4 48.6008C123.43 48.5083 123.586 48.8715 123.747 49.4078C123.992 50.229 124.124 50.4244 124.579 50.6445L125.12 50.906V52.1248C125.12 53.2796 125.139 53.3433 125.48 53.3457C126.142 53.3502 126.301 53.582 126.26 54.4803C126.234 55.0688 126.321 55.5086 126.551 55.9574C126.732 56.3084 126.88 56.6995 126.88 56.826C126.88 56.9525 127.069 57.2601 127.301 57.5098C128.126 58.3996 128.272 59.1434 127.809 60.1C127.537 60.663 127.767 61.258 128.28 61.318C128.993 61.4011 128.887 62.0051 128.16 62.0059C127.567 62.0063 127.247 62.2499 127.568 62.4566C128.424 63.0079 129.579 62.0173 129.044 61.1908C128.899 60.967 128.66 60.7445 128.511 60.6962C128.362 60.648 128.146 60.5795 128.03 60.5442C127.864 60.4932 127.872 60.4048 128.07 60.1182C128.604 59.3452 127.946 56.8447 126.939 55.8248C126.602 55.4835 126.415 55.1596 126.469 55.0149C126.898 53.8824 126.695 53.2801 125.719 52.7847C125.403 52.6246 125.366 52.501 125.415 51.7466C125.469 50.9254 125.444 50.8658 124.823 50.285C124.057 49.5683 123.84 49.0604 123.84 47.9903C123.84 47.4038 123.767 47.1573 123.56 47.041C123.406 46.9547 123.169 46.568 123.035 46.1817C122.88 45.739 122.606 45.36 122.292 45.1553C122.018 44.977 121.629 44.5635 121.427 44.236C120.997 43.5376 120.46 43.3726 119.983 43.7918ZM26.3999 44.9932C26.2367 45.1922 26.2479 45.2364 26.4603 45.2364C26.6031 45.2364 26.7199 45.127 26.7199 44.9932C26.7199 44.8594 26.6927 44.75 26.6595 44.75C26.6263 44.75 26.5095 44.8594 26.3999 44.9932ZM127.944 44.9977C128.061 45.3082 128.64 45.6462 128.64 45.4042C128.64 45.3118 128.532 45.2364 128.4 45.2364C128.268 45.2364 128.16 45.127 128.16 44.9932C128.16 44.8594 128.09 44.75 128.005 44.75C127.919 44.75 127.892 44.8615 127.944 44.9977ZM49.5895 48.0126C49.4727 48.2335 49.4403 48.8278 49.4987 49.6745C49.6143 51.3494 49.6227 51.3976 49.8051 51.3976C49.8907 51.3976 49.9063 51.2379 49.8407 51.0328C49.5523 50.1309 49.5563 48.3105 49.8467 47.985C50.0023 47.8107 50.0487 47.6685 49.9503 47.6685C49.8519 47.6685 49.6895 47.8233 49.5895 48.0126ZM91.2479 49.1277C91.2479 49.6182 91.2779 49.8188 91.3147 49.5736C91.3511 49.3284 91.3511 48.9271 91.3147 48.6818C91.2779 48.4366 91.2479 48.6372 91.2479 49.1277ZM24.5679 49.6052C24.2979 49.9076 24.2987 49.9198 24.5911 49.8975C24.7607 49.8845 24.9063 49.7442 24.9183 49.5821C24.9455 49.2149 24.9143 49.2169 24.5679 49.6052ZM129.961 49.5821C129.973 49.7442 130.119 49.8845 130.289 49.8975C130.581 49.9198 130.582 49.9076 130.312 49.6052C129.965 49.2169 129.934 49.2149 129.961 49.5821ZM91.0399 50.2915C91.0399 50.4264 90.8975 50.6672 90.7235 50.8265C90.5499 50.9862 90.4459 51.18 90.4931 51.257C90.5979 51.4288 91.0503 51.4455 91.0135 51.276C90.9991 51.2092 91.0439 50.9505 91.1127 50.7009C91.1819 50.4516 91.1935 50.2023 91.1391 50.1471C91.0847 50.0916 91.0399 50.1569 91.0399 50.2915ZM47.9495 51.5626C46.8527 51.8962 46.7367 52.6692 47.5999 53.8994C48.2971 54.8933 48.2979 55.064 47.6055 55.357C47.0247 55.6031 46.9711 55.7227 46.8115 57.1268C46.7303 57.8386 46.7647 57.95 47.1831 58.3428C48.0167 59.1243 48.1599 59.2183 48.1599 58.9841C48.1599 58.8689 47.9079 58.571 47.5999 58.3221C46.6383 57.5443 46.8227 55.8451 47.9195 55.3806L48.4679 55.1483L48.2187 54.4081C48.0819 54.0008 47.9063 53.6676 47.8291 53.6676C47.6539 53.6676 47.1999 52.7985 47.1999 52.4633C47.1999 52.1029 47.8671 51.717 48.7499 51.5667C49.4059 51.4552 49.4371 51.4349 48.9599 51.4305C48.6519 51.4276 48.1971 51.4872 47.9495 51.5626ZM91.7599 51.548C93.1579 51.8901 93.3895 52.2809 92.8423 53.3741C91.9951 55.0664 91.9419 55.2893 92.3867 55.2885C92.4819 55.2885 92.5803 54.9853 92.6055 54.6144C92.6375 54.1422 92.7935 53.7762 93.1255 53.3932C93.9583 52.4321 93.1395 51.3441 91.6367 51.4143C91.3587 51.4272 91.3859 51.4568 91.7599 51.548ZM109.048 53.8702C108.729 56.2691 108.821 57.1012 109.485 57.8406C109.665 58.04 109.837 58.4372 109.868 58.7234C109.972 59.6813 110.304 59.9909 111.23 59.9909C112.164 59.9909 112.195 59.873 111.292 59.7558C110.249 59.6204 109.835 58.6051 110.513 57.8458C110.903 57.4097 110.6 56.978 109.943 57.0319C109.19 57.0935 109.056 56.6825 109.184 54.6911C109.298 52.893 109.231 52.4896 109.048 53.8702ZM92.9599 55.4041C94.0479 55.8094 94.0487 57.2411 92.9615 58.3675C92.4299 58.9192 92.5059 59.3424 93.1371 59.3424C93.3007 59.3424 93.6507 59.543 93.9147 59.7883L94.3947 60.2341L94.1327 61.0448C93.8055 62.0562 93.6767 62.224 93.0127 62.5053C92.3551 62.7838 92.3403 62.9901 92.9551 63.3123C94.3371 64.0363 94.0311 66.0893 92.4815 66.4918C91.6255 66.714 91.4831 66.8777 92.0015 67.0443C93.0327 67.3759 93.0887 69.6215 92.0799 70.1805C91.8171 70.3264 91.8075 70.3588 92.0275 70.3629C93.2567 70.3856 93.7047 68.474 92.7179 67.4189C92.1123 66.7711 92.1107 66.7756 93.0099 66.4817C94.3255 66.052 94.2183 63.0716 92.8871 63.0716C92.4543 63.0716 92.6215 62.7773 93.1167 62.667C93.6439 62.5495 94.5111 61.4141 94.6635 60.6407C94.7731 60.087 94.1051 59.3922 93.3199 59.2431C92.6023 59.1065 92.5535 58.9403 93.1123 58.537C94.2235 57.7356 94.1367 55.2496 92.9999 55.3019C92.7783 55.312 92.7699 55.3331 92.9599 55.4041ZM46.4551 59.4153C45.1287 60.0003 45.6923 62.1891 47.2807 62.6196C48.1103 62.8446 48.1899 63.0034 47.5447 63.1469C45.8447 63.5255 45.9119 66.0626 47.6335 66.502C48.4639 66.714 48.4715 66.7675 47.7599 67.4055C46.5659 68.4768 47.0271 70.0577 48.6235 70.3645C49.7155 70.5745 49.7779 70.6227 49.5939 71.1136C49.2607 72.0017 49.4871 73.8205 49.9699 74.1318C50.2707 74.3255 51.4363 74.2789 51.6479 74.0645C51.7971 73.9133 51.8399 73.9465 51.8399 74.2141C51.8399 74.4034 51.6239 74.7771 51.3599 75.0446C50.5679 75.8472 50.9523 76.7462 52.1675 76.9335L52.7199 77.0186L52.2399 76.8342C51.0579 76.3802 50.8639 75.9327 51.5199 75.1755C51.8871 74.7519 51.9999 74.4646 51.9999 73.9538C51.9999 73.1902 51.8311 73.1091 51.4547 73.6916C51.1935 74.0957 50.5343 74.2368 50.1439 73.9729C49.5799 73.591 49.3871 71.7208 49.8435 71.0601C50.1323 70.6426 49.9923 70.5283 48.7999 70.2072C47.3323 69.812 46.9923 68.5178 48.0763 67.4529C48.6883 66.8518 48.6379 66.5916 47.8735 66.3994C46.4199 66.0338 46.2863 63.7501 47.6895 63.2548C48.2823 63.0452 48.2411 62.7461 47.5899 62.5316C45.6811 61.9029 45.4123 59.8474 47.1767 59.3712C47.6359 59.2471 47.6747 59.2115 47.3599 59.2034C47.1399 59.1977 46.7327 59.2929 46.4551 59.4153ZM25.8491 60.9998C25.5251 61.468 25.5343 61.8211 25.8799 62.2386C26.1823 62.6034 27.3675 62.7959 27.4679 62.4968C27.4991 62.4031 27.2559 62.3095 26.9223 62.2872C25.7203 62.2065 25.5263 61.1259 26.7135 61.1259C27.1099 61.1259 27.3583 61.0404 27.4179 60.8827C27.5819 60.4486 26.1563 60.5552 25.8491 60.9998ZM111.12 60.7562C110.277 60.9642 109.948 61.9188 109.905 64.2876C109.882 65.5287 109.858 65.6098 109.334 66.1655C108.652 66.8907 108.701 67.8352 109.46 68.5567C109.782 68.8631 109.963 69.249 110.08 69.8757C110.266 70.8736 110.302 70.9271 111.057 71.309C111.559 71.5627 111.604 71.6486 111.648 72.437C111.688 73.1383 111.768 73.3373 112.097 73.5554C112.316 73.7013 112.601 74.026 112.729 74.2765C112.857 74.527 113.141 74.9141 113.361 75.1366C113.58 75.3592 113.76 75.6794 113.76 75.848C113.76 76.3012 114.245 76.666 114.944 76.7385C115.614 76.8083 115.983 77.2444 115.994 77.9769C116.006 78.8001 117.563 79.7681 118.16 79.3234C118.405 79.1406 118.446 78.7507 118.204 78.9027C117.247 79.5018 116.055 78.0332 116.913 77.3117C117.182 77.0855 117.177 76.8533 116.905 76.8533C116.786 76.8533 116.561 76.709 116.403 76.5326C116.246 76.3567 116.037 76.261 115.939 76.3206C115.84 76.3802 115.859 76.3056 115.979 76.1548C116.1 76.0041 116.127 75.8804 116.039 75.8804C115.951 75.8804 115.79 75.9899 115.68 76.1236C115.14 76.7823 114.18 76.3478 113.998 75.3628C113.92 74.9364 113.796 74.7495 113.568 74.7143C113.258 74.666 112.824 73.8063 112.723 73.043C112.656 72.523 112.46 72.1513 112.256 72.1513C112.152 72.1513 111.979 71.8229 111.873 71.4216C111.768 71.0199 111.627 70.7005 111.56 70.7111C110.551 70.8736 109.827 69.3442 110.4 68.2591C110.508 68.0561 110.508 67.9219 110.4 67.855C110.312 67.7995 110.24 67.8461 110.24 67.9584C110.24 68.1096 110.193 68.1152 110.06 67.9807C109.962 67.8806 109.79 67.8339 109.68 67.8773C109.109 68.099 109.072 66.6463 109.642 66.3921C110.053 66.2085 110.166 65.7314 110.375 63.3216C110.486 62.0391 110.573 61.6723 110.8 61.5381C111.822 60.9342 111.982 60.543 111.12 60.7562ZM26.3759 63.3549C25.5603 63.5353 25.0951 67.0074 25.7923 67.7136C26.0403 67.9653 26.0435 67.9409 25.8363 67.3516C25.4211 66.1708 25.7823 63.9998 26.4287 63.7918C26.8799 63.6467 27.3327 63.8608 27.4079 64.2547C27.4699 64.579 27.4779 64.5746 27.4931 64.2065C27.5215 63.5117 27.1047 63.194 26.3759 63.3549ZM127.445 63.6852C127.266 64.1571 127.337 64.4599 127.56 64.1733C128.543 62.9078 129.772 65.6127 129.032 67.414C128.794 67.9941 128.796 68.0058 129.072 67.7269C129.524 67.2717 129.473 65.0071 128.99 64.08C128.612 63.3541 127.662 63.1113 127.445 63.6852ZM35.2403 67.0439C35.2419 67.4006 35.2747 67.5275 35.3131 67.3256C35.3515 67.1242 35.3499 66.8323 35.3099 66.6771C35.2699 66.5222 35.2383 66.6872 35.2403 67.0439ZM39.9415 68.7869C39.7263 69.1351 39.3599 71.2169 39.3599 72.0929C39.3599 72.3487 39.5523 72.6896 39.8619 72.9826C40.4555 73.5444 40.4119 73.6214 39.4371 73.7329C38.5015 73.8399 38.1591 74.2899 38.2855 75.2457C38.3647 75.8452 38.3123 75.9696 37.6683 76.7041C37.2815 77.1459 36.9167 77.7065 36.8583 77.9505C36.7999 78.1941 36.4927 78.6615 36.1759 78.9886C35.8591 79.3161 35.4723 79.7174 35.3167 79.8804C34.3727 80.869 33.7359 81.3931 33.4787 81.3931C32.4591 81.3931 31.1015 84.0266 31.7715 84.7052C32.1851 85.1247 32.3199 85.0011 32.3199 84.2005C32.3199 83.6472 32.4131 83.3404 32.6623 83.0716C32.8503 82.8686 33.0859 82.5354 33.1855 82.3315C33.2935 82.111 33.6383 81.873 34.0367 81.7445C34.4479 81.612 34.7459 81.4028 34.8087 81.203C34.8647 81.0238 35.1559 80.7733 35.4555 80.6465C35.8115 80.4957 35.9999 80.3064 35.9999 80.0988C35.9999 79.9241 36.2159 79.6197 36.4799 79.4219C36.7439 79.2241 36.9599 78.9627 36.9599 78.8415C36.9599 78.4398 37.4311 77.6887 37.7471 77.5869C38.2311 77.4313 39.0819 75.7775 39.0079 75.1358C38.9547 74.6745 39.0019 74.5878 39.3531 74.5002C39.5767 74.4447 39.9399 74.2785 40.1599 74.1306C40.3799 73.983 40.6139 73.8513 40.6799 73.8375C40.7459 73.8241 40.8179 73.7949 40.8399 73.7722C40.8619 73.7495 41.0395 73.7143 41.2347 73.6932C41.8415 73.6283 42.1487 75.3746 41.5919 75.7232C41.3471 75.8764 41.9943 76.0369 42.4903 75.9457C43.2943 75.7981 43.6807 77.0324 43.2695 78.4345C43.1799 78.7405 43.2511 78.837 43.7107 79.0316C44.3543 79.3044 44.6399 79.8467 44.6399 80.7973C44.6399 81.5248 44.9891 82.2038 45.3631 82.2038C45.5015 82.2038 45.7023 82.5954 45.8827 83.2168C46.0923 83.9379 46.2847 84.284 46.5503 84.4182C47.0855 84.6886 47.1947 84.9354 47.1975 85.8799C47.1999 86.6938 47.2163 86.7242 47.7599 86.9058C48.3971 87.119 48.5767 87.5487 48.4079 88.4595C48.2903 89.0959 48.5023 89.5 48.9547 89.5C49.5995 89.5 49.9599 90.44 49.5863 91.1473C49.3155 91.6597 49.5199 92.1789 50.0083 92.2198C50.7319 92.2806 50.7675 92.3714 50.6519 93.8595C50.5511 95.159 50.5611 95.2312 50.7963 94.898C50.9395 94.6949 51.1487 94.5789 51.2803 94.63C51.8003 94.8323 52.0707 94.2247 51.6403 93.8206C51.4179 93.6118 51.1987 93.1728 51.1367 92.8129C50.9715 91.8534 50.7259 91.3228 50.4079 91.2385C50.2099 91.1862 50.0891 90.9373 50.0135 90.4258C49.9051 89.6937 49.7139 89.425 49.0703 89.0999C48.7851 88.956 48.7411 88.8056 48.7779 88.1036C48.8203 87.2961 48.2423 86.4194 47.6675 86.4194C47.5863 86.4194 47.5199 86.0797 47.5199 85.665C47.5199 84.9978 47.4483 84.8426 46.9027 84.3274C46.4427 83.8929 46.2347 83.5268 46.0863 82.8917C45.9567 82.3359 45.7475 81.9278 45.4855 81.719C45.1759 81.4722 45.0335 81.1288 44.8651 80.2204C44.7015 79.3384 44.5455 78.9529 44.2463 78.6878C43.9759 78.4483 43.8195 78.107 43.7635 77.6339C43.6039 76.2902 43.0303 75.0381 42.1931 74.2064L41.4051 73.424L41.7523 73.0965C42.5347 72.358 42.4743 70.9409 41.6299 70.2145C41.3647 69.9867 40.9963 69.4902 40.8107 69.1112C40.4279 68.3289 40.2631 68.2677 39.9415 68.7869ZM127.623 69.0301C127.397 70.4119 127.507 79.1629 127.748 79.0693C127.874 79.0202 128.063 79.0855 128.168 79.214C128.303 79.3794 128.307 79.4475 128.179 79.4475C128.081 79.4475 128 79.5293 128 79.6295C128 79.7584 128.067 79.7551 128.23 79.6177C128.357 79.5111 128.424 79.3271 128.38 79.2087C128.335 79.0908 128.36 78.9554 128.435 78.9079C128.51 78.8609 128.586 78.9931 128.603 79.2014C128.62 79.4102 128.789 79.8467 128.978 80.1718C129.371 80.8463 129.331 81.9675 128.884 82.8434C128.585 83.4308 127.605 83.5771 127.47 83.055C127.41 82.8215 127.394 82.8301 127.378 83.1037C127.368 83.2865 127.449 83.5264 127.559 83.6375C127.717 83.7976 127.709 83.8706 127.519 83.9946C127.35 84.1049 127.445 84.1267 127.84 84.0696C128.729 83.9407 129.267 84.5609 128.903 85.2945C128.742 85.6192 128.587 85.6898 128.034 85.6898C127.271 85.6898 127.134 85.9893 127.68 86.4628C128.321 87.0189 127.948 89.391 127.164 89.7464C126.551 90.0245 126.048 91.2551 126.262 91.9552C126.501 92.7375 126.343 93.3301 125.86 93.4525C125.624 93.5129 125.371 93.7825 125.197 94.1598C124.863 94.8878 124.372 95.414 124.282 95.1412C124.249 95.039 124.134 95.0098 124.028 95.0763C123.746 95.2526 123.959 95.4991 124.394 95.4991C124.67 95.4991 124.815 95.6329 124.944 96.0098C125.17 96.6673 125.197 96.5911 124.61 96.9531C124.33 97.1257 123.952 97.5805 123.77 97.964C123.532 98.4666 123.351 98.6527 123.122 98.632C122.666 98.5902 122.556 98.8732 122.663 99.8123C122.792 100.932 122.42 101.555 121.676 101.467C121.394 101.434 121.168 101.481 121.169 101.574C121.169 101.666 121.159 102.079 121.145 102.49L121.12 103.24L120.12 103.374C119.57 103.448 118.994 103.494 118.84 103.478C118.631 103.455 118.564 103.56 118.576 103.892L118.592 104.336L118.72 103.93C118.79 103.707 118.855 103.625 118.864 103.747C118.875 103.9 118.942 103.921 119.08 103.813C119.19 103.727 119.633 103.682 120.066 103.713C120.957 103.778 121.347 103.535 121.493 102.828C121.547 102.565 121.779 102.279 122.073 102.113C122.582 101.825 122.845 101.329 122.998 100.363C123.048 100.051 123.257 99.6227 123.462 99.4111C123.667 99.1991 123.907 98.7613 123.994 98.4382C124.092 98.0722 124.405 97.6304 124.82 97.2692C125.533 96.6486 125.595 96.1655 125.032 95.5952C124.71 95.2693 124.906 94.887 125.737 94.2206C126.602 93.5259 126.817 92.9442 126.556 92.0006L126.352 91.2624L127.087 90.5028C127.951 89.609 128.114 89.2268 128.257 87.7586C128.333 86.9812 128.455 86.5738 128.679 86.3565C129.431 85.6261 129.5 84.6817 128.855 83.9593C128.637 83.7153 128.645 83.6411 128.933 83.2293C129.639 82.2224 129.663 80.2934 128.976 79.8629C128.585 79.6177 128.761 78.0028 129.172 78.0782C130.035 78.2367 130.578 76.7742 130.618 74.1853C130.669 70.7865 130.14 69.0325 129.176 69.4042C128.939 69.4954 128.795 69.4764 128.743 69.3463C128.7 69.2393 128.663 69.2976 128.662 69.476C128.657 69.8708 128.915 71.1796 128.941 70.8947C128.974 70.5372 129.279 70.6782 129.293 71.0568C129.299 71.2575 129.341 71.3304 129.386 71.219C129.754 70.294 130.331 72.129 130.265 74.0158C130.204 75.7426 130.051 76.2882 129.631 76.2728C129.438 76.2659 129.28 76.3121 129.28 76.3758C129.28 76.439 129.136 76.5294 128.96 76.576C128.688 76.6481 128.64 76.7973 128.64 77.5679C128.64 78.0665 128.568 78.4746 128.48 78.4746C128.392 78.4746 128.32 78.5796 128.32 78.7077C128.32 78.8358 128.191 78.931 128.034 78.9189C127.765 78.8986 127.748 78.5772 127.754 73.6595C127.757 70.7792 127.751 68.4221 127.741 68.4221C127.73 68.4221 127.677 68.6957 127.623 69.0301ZM26.5971 69.0706C26.5971 69.3828 26.6299 69.5104 26.6703 69.3544C26.7103 69.1983 26.7103 68.943 26.6703 68.7869C26.6299 68.6308 26.5971 68.7585 26.5971 69.0706ZM26.9487 72.6377C26.9487 74.7333 26.9715 75.5906 26.9995 74.5428C27.0271 73.495 27.0271 71.7804 26.9995 70.7326C26.9715 69.6847 26.9487 70.542 26.9487 72.6377ZM25.7047 69.4164C25.5427 69.5121 25.2907 69.6073 25.1447 69.628C24.0143 69.7885 23.9119 76.4163 25.0399 76.4191C25.1279 76.4191 25.4335 76.4726 25.7187 76.5379C26.2179 76.6518 26.2335 76.6404 26.1315 76.2294C25.9971 75.6859 25.6559 75.3377 25.3675 75.4495C24.6339 75.7349 24.3611 73.3511 24.8815 71.2044C24.9387 70.9681 25.0567 70.857 25.1935 70.9105C25.5455 71.0471 26.0203 70.5011 26.1243 69.8408C26.2259 69.1947 26.1727 69.1408 25.7047 69.4164ZM90.5999 70.4821C90.1611 70.568 90.1315 70.7974 90.5427 70.9296C90.9783 71.0698 91.2543 71.8744 91.1595 72.7281C91.0135 74.0385 90.1435 74.5006 89.3455 73.6916C88.8419 73.1816 88.7971 73.1849 88.8127 73.7321C88.8195 73.9773 88.8611 74.0876 88.9055 73.9769C88.9663 73.8241 89.0435 73.8343 89.2243 74.0175C89.5663 74.364 90.6095 74.3271 90.9399 73.9571C91.4855 73.3462 91.4015 70.8542 90.8355 70.8542C90.5203 70.8542 90.9351 70.5619 91.3599 70.4845L91.7599 70.4119H91.3599C91.1399 70.4119 90.7979 70.4435 90.5999 70.4821ZM41.4335 70.8509C42.3299 71.3369 41.9155 73.4577 40.9267 73.4459C40.7799 73.4443 40.7895 73.3977 40.9599 73.2862C41.1435 73.1658 41.0835 73.1285 40.7055 73.1265C39.9127 73.1225 39.5963 72.1265 40.0839 71.1703C40.3427 70.6637 40.8619 70.5408 41.4335 70.8509ZM20.6631 70.9713C22.4647 71.1647 22.4763 75.409 20.6755 75.6003L20.0799 75.664L20.7483 75.6911C21.8619 75.7365 22.1203 75.2396 22.0535 73.1825C21.9887 71.1942 21.7847 70.8379 20.7351 70.8813L20.0799 70.9085L20.6631 70.9713ZM35.5143 71.1679C35.8019 71.7127 35.7039 72.5566 35.2847 73.1407C35.0671 73.4435 34.7143 73.9518 34.5011 74.27C34.2875 74.5882 33.9255 74.9729 33.6963 75.1249C33.4671 75.2773 33.2799 75.5343 33.2799 75.6968C33.2799 76.0219 32.8059 76.529 32.5019 76.529C32.3959 76.529 32.1651 76.7766 31.9887 77.079C31.8127 77.3818 31.4643 77.715 31.2147 77.8196C30.9655 77.9246 30.6799 78.1913 30.5803 78.413C30.4807 78.6347 30.1811 78.8929 29.9147 78.9874C29.6483 79.0814 29.3227 79.3692 29.1911 79.627C29.0295 79.944 28.8287 80.096 28.5731 80.096C28.1999 80.096 27.9999 80.3639 27.9999 80.8637C27.9999 81.004 27.7299 81.3866 27.3999 81.7145C27.0699 82.0425 26.6819 82.4871 26.5375 82.7032C25.8135 83.7871 25.2579 81.6708 25.9155 80.3331C26.2247 79.704 26.2247 79.6984 25.9195 80.0684C25.0979 81.064 25.1075 83.1612 25.9367 83.9216C26.2975 84.2524 28.3303 82.3408 28.5739 81.4422C28.6271 81.2464 28.8431 80.9711 29.0543 80.8309C29.2655 80.6906 29.5431 80.3222 29.6711 80.0117C29.7987 79.7012 30.0179 79.4475 30.1579 79.4475C30.2979 79.4475 30.6947 79.1556 31.0399 78.7989C31.3851 78.4422 31.7599 78.15 31.8735 78.1495C32.1571 78.1483 33.9199 76.407 33.9199 76.1277C33.9199 76.0037 34.0691 75.8541 34.2519 75.7957C34.4399 75.7349 34.7123 75.3851 34.8799 74.9887C35.0479 74.5918 35.3199 74.2424 35.5083 74.1816C36.2379 73.9469 36.5667 72.0264 36.0019 71.2988C35.6015 70.7832 35.2631 70.692 35.5143 71.1679ZM133.19 71.0844C132.572 71.542 132.663 75.2217 133.301 75.5679C133.619 75.7402 133.619 75.7309 133.279 75.2655C132.801 74.6105 132.847 71.7512 133.345 71.1951C133.698 70.8003 133.635 70.7548 133.19 71.0844ZM114.453 73.7094C114.453 73.8667 114.559 73.9076 114.787 73.8391C115.109 73.7422 115.11 73.7467 114.816 73.9745C114.487 74.2282 114.65 74.4439 115.24 74.5371C115.834 74.6308 115.381 73.8099 114.707 73.5696C114.553 73.5148 114.453 73.5696 114.453 73.7094ZM88.8347 75.1508C88.8835 75.3292 88.9711 75.5914 89.0291 75.7337C89.0971 75.8995 88.9659 76.1751 88.6631 76.5038C88.0355 77.1844 88.3295 77.1593 89.0735 76.4686L89.6623 75.9214L89.2043 75.3742C88.8855 74.9931 88.7731 74.925 88.8347 75.1508ZM116.32 76.1415C116.32 76.334 116.652 76.6911 116.832 76.6911C117.014 76.6911 116.991 76.2432 116.802 76.1248C116.709 76.0669 116.681 76.1471 116.735 76.3178C116.816 76.5788 116.799 76.5764 116.573 76.2955C116.434 76.122 116.32 76.0527 116.32 76.1415ZM86.1239 77.0762C85.8491 77.4041 85.8495 77.4074 86.1423 77.1767C86.3083 77.0454 86.6143 76.9607 86.8223 76.9882C87.3235 77.0551 87.3087 76.912 86.8039 76.8143C86.5335 76.7621 86.3179 76.8451 86.1239 77.0762ZM128.048 77.6639C128.048 78.1544 128.078 78.3551 128.115 78.1098C128.151 77.8646 128.151 77.4633 128.115 77.2181C128.078 76.9728 128.048 77.1735 128.048 77.6639ZM54.3999 77.6866C54.3999 77.7884 54.2767 77.9627 54.1263 78.0742C53.7831 78.3287 53.9503 78.7422 54.7955 79.7312C55.4803 80.5322 55.6667 80.5674 56.2615 80.0089C56.8971 79.4118 57.1963 79.5423 57.2159 80.4243C57.2415 81.6035 57.2651 81.7024 57.5999 82.0417C57.8291 82.2739 58.1127 82.3599 58.5999 82.344C58.9935 82.3311 59.1115 82.295 58.8799 82.2581C57.9443 82.1085 57.7539 82.0141 57.5383 81.5913C57.3915 81.3035 57.3403 80.8787 57.3943 80.3943C57.4995 79.4479 57.1231 79.244 56.1847 79.7397L55.5819 80.0579L55.0311 79.6019C54.5259 79.1836 54.4819 79.0774 54.5039 78.3238C54.5175 77.8719 54.4995 77.5018 54.4639 77.5018C54.4287 77.5018 54.3999 77.5849 54.3999 77.6866ZM86.1087 78.2412C86.0627 79.5549 85.5207 80.036 84.4919 79.6769C84.1111 79.5435 83.7667 79.4673 83.7275 79.5074C83.6879 79.5472 83.8175 79.6319 84.0155 79.6955C84.2135 79.7592 84.5147 79.9432 84.6851 80.1041C85.3275 80.7105 86.2971 79.4961 86.1983 78.2087L86.1375 77.4207L86.1087 78.2412ZM20.4399 78.9302C19.8275 78.9817 19.7535 79.1094 19.9999 79.6907C20.1279 79.9922 20.1383 79.9939 20.1487 79.7113C20.1575 79.4726 20.2067 79.4475 20.3795 79.5926C20.5003 79.6943 20.7071 79.7357 20.8387 79.6842C21.4187 79.4588 22.0843 82.5042 21.5875 83.1105C21.4811 83.2403 21.4303 83.3829 21.4743 83.4275C22.0203 83.9812 22.1203 81.7575 21.6175 80.2383C21.1743 78.8998 21.1479 78.8711 20.4399 78.9302ZM133.659 79.0822C133.609 79.2387 133.386 79.8406 133.163 80.4203C132.657 81.7372 132.609 82.6939 133.025 83.1604C133.433 83.6176 133.497 83.5058 133.188 82.8771C133.018 82.5321 132.972 82.1904 133.047 81.8378C133.214 81.0551 133.764 79.6141 133.89 79.6323C134.278 79.6878 134.529 79.563 134.672 79.2448C134.823 78.9083 134.794 78.8767 134.293 78.839C133.894 78.809 133.726 78.8735 133.659 79.0822ZM26.6455 79.1321C26.6919 79.2087 26.8387 79.229 26.9715 79.1771C27.2903 79.0535 27.2035 79.49 26.8799 79.6388C26.7191 79.7126 26.7795 79.7527 27.0627 79.7604C27.4571 79.7709 27.8127 79.366 27.5991 79.1495C27.4515 78.9995 26.5547 78.9837 26.6455 79.1321ZM82.7827 79.7093C82.6647 79.7588 82.7111 79.9991 82.9223 80.432C83.5375 81.6918 81.5855 82.7956 80.4059 81.8552C79.8995 81.4519 79.7459 81.5788 79.5935 82.5281C79.4671 83.3136 79.0855 84.1462 78.8423 84.1661C78.0127 84.2334 77.4767 84.0688 76.8627 83.5589C76.4547 83.22 76.1475 83.066 76.0847 83.1689C76.0275 83.2621 76.0547 83.3388 76.1451 83.3388C76.2355 83.3388 76.5611 83.5941 76.8691 83.9062C78.0511 85.104 79.4067 84.635 79.6799 82.9338C79.8647 81.7822 79.8387 81.807 80.5219 82.1369C81.9295 82.8171 83.4551 81.9671 83.3231 80.5755C83.2763 80.083 83.3147 79.7547 83.4239 79.7089C83.5207 79.6684 83.4559 79.6351 83.2799 79.6351C83.1039 79.6351 82.8803 79.6684 82.7827 79.7093ZM38.5231 80.0591C38.4719 80.2573 38.2611 80.488 38.0551 80.5719C37.8211 80.6667 37.7759 80.7279 37.9351 80.7344C38.2603 80.7474 38.7743 80.1799 38.6843 79.9067C38.6455 79.7892 38.5759 79.8552 38.5231 80.0591ZM118.16 79.9732C117.984 80.079 117.768 80.1718 117.68 80.1803C117.038 80.2415 116.716 80.8621 116.567 82.3213C116.479 83.1876 116.329 83.5009 116 83.5009C115.843 83.5009 115.673 83.6103 115.622 83.7441C115.572 83.8779 115.352 83.9873 115.135 83.9873C114.106 83.9873 113.447 84.5528 113.475 85.4129C113.499 86.1774 113.76 86.2398 113.76 85.4814C113.76 84.4433 114.899 83.9062 115.736 84.5495C115.946 84.7104 116.145 84.734 116.415 84.6302C116.676 84.5293 116.785 84.539 116.758 84.6606C116.737 84.7587 116.8 84.8685 116.898 84.9054C117.023 84.9524 117.057 84.5536 117.012 83.5653C116.955 82.3104 116.983 82.1252 117.274 81.8503C117.453 81.6813 117.601 81.6002 117.603 81.6704C117.605 81.7409 117.796 81.3757 118.029 80.8589C118.306 80.244 118.526 79.9481 118.666 80.0028C118.784 80.0486 118.88 80.0153 118.88 79.9286C118.88 79.7182 118.552 79.7385 118.16 79.9732ZM60.4851 81.6302C60.3719 81.7681 60.0547 81.9468 59.7799 82.0279C59.3199 82.1629 59.3123 82.1758 59.6843 82.1892C59.9067 82.1973 60.2415 82.0956 60.4279 81.963C60.8371 81.6724 60.8811 81.7506 61.0423 83.0579C61.2319 84.5974 62.1779 85.0724 63.0935 84.0882C63.4651 83.689 64.4255 83.2857 64.6583 83.4312C64.8127 83.5281 64.8555 83.2869 64.7099 83.1397C64.5615 82.9889 63.3095 83.5305 62.8711 83.9346C62.0111 84.7275 61.4307 84.2881 61.1315 82.6168C60.9339 81.5131 60.7771 81.2735 60.4851 81.6302ZM36.1123 82.6359C36.1803 82.8159 36.1527 82.8669 36.0291 82.7895C35.9039 82.7113 35.8779 82.7644 35.9495 82.9533C36.0315 83.1701 35.9935 83.2086 35.7795 83.1255C35.5931 83.053 35.5407 83.0793 35.6179 83.2062C35.6931 83.3294 35.6455 83.3602 35.4795 83.2954C35.3371 83.2403 35.1899 83.2938 35.1427 83.4182C35.0127 83.7607 35.9687 83.3769 36.1631 83.008C36.3627 82.6306 36.3635 82.3659 36.1651 82.3659C36.0795 82.3659 36.0559 82.4875 36.1123 82.6359ZM72.0319 83.5333C71.9263 83.6403 71.8399 83.83 71.8399 83.9549C71.8399 84.3489 71.3463 85.2548 71.0675 85.3716C69.7675 85.9172 69.0615 85.5799 68.8627 84.3189C68.8051 83.9545 68.7063 83.6233 68.6431 83.584C68.3823 83.4206 68.8711 85.2333 69.1823 85.5836C69.8851 86.3748 71.5415 85.7615 71.8483 84.5961C71.9483 84.2167 72.0959 83.7786 72.1763 83.6225C72.3475 83.2905 72.3003 83.2613 72.0319 83.5333ZM72.5663 83.9062C72.8207 85.2252 75.8399 85.5759 75.8399 84.2865C75.8399 84.2111 75.6959 84.2954 75.5199 84.4737C74.7631 85.2406 73.0895 84.8612 72.6447 83.8219C72.4807 83.4385 72.4767 83.4425 72.5663 83.9062ZM64.8159 83.9492C64.8067 84.1576 65.0359 84.5771 65.3455 84.9196L65.8911 85.5228L66.5271 85.1604C66.8771 84.9609 67.2687 84.798 67.3967 84.798C67.6695 84.798 68.0647 84.3696 68.2195 83.9062C68.2899 83.6963 68.1859 83.7623 67.9251 84.0923C67.0527 85.1977 65.2579 85.1259 64.9395 83.9727C64.8331 83.5872 64.8315 83.5868 64.8159 83.9492ZM21.1199 84.2447C21.1199 84.3708 21.2459 84.481 21.3999 84.4895C21.5539 84.4985 21.8515 84.5167 22.0615 84.5301C23.0035 84.5909 23.5147 86.3395 22.8311 87.1628C22.5051 87.5556 22.4619 87.7067 22.6023 87.9613C22.9723 88.6313 23.0155 89.4878 22.6995 89.8944L22.4007 90.2799L23.0307 90.1939C24.4707 89.9986 24.7339 92.5093 23.3031 92.7926C22.9651 92.8595 22.9651 92.8611 23.2943 92.883C23.4811 92.8951 23.7079 93.0816 23.8087 93.3058C23.9079 93.5263 24.2439 93.8145 24.5555 93.9466C25.1791 94.2105 25.5243 94.8773 25.5879 95.9409C25.5947 96.0499 25.8159 96.2526 26.0799 96.3908C26.4623 96.5911 26.5599 96.7488 26.5607 97.1651C26.5623 98.0823 26.8711 98.9068 27.2847 99.0977C27.5527 99.2218 27.7955 99.6089 28.0835 100.373C28.3111 100.976 28.5963 101.509 28.7175 101.556C28.8383 101.603 28.9847 101.992 29.0423 102.421C29.2039 103.626 29.2611 103.738 29.7683 103.851C30.5571 104.027 30.7043 104.638 30.2059 105.668C29.9755 106.143 30.2807 106.524 30.8907 106.524C31.2211 106.524 31.3987 106.64 31.5511 106.956C31.6819 107.227 31.9959 107.47 32.3923 107.608C33.2047 107.89 33.2907 108.041 33.2523 109.119C33.2143 110.174 33.3707 110.74 33.7003 110.74C33.8315 110.74 33.8943 110.813 33.8399 110.902C33.7855 110.991 33.8531 111.064 33.9903 111.064C34.1275 111.064 34.2491 110.973 34.2607 110.862C34.3523 109.961 34.2987 109.67 33.9675 109.271C33.7655 109.028 33.5999 108.751 33.5999 108.657C33.5999 108.156 33.1499 107.591 32.5403 107.327C32.0091 107.096 31.8471 106.927 31.7571 106.512C31.6947 106.224 31.4751 105.83 31.2691 105.637C31.0631 105.443 30.8515 105.038 30.7991 104.736C30.6859 104.084 30.5035 103.836 29.9395 103.563C29.5819 103.39 29.5127 103.24 29.4707 102.551C29.4319 101.916 29.3203 101.636 28.9519 101.249C28.6939 100.978 28.3755 100.391 28.2447 99.9441C28.0879 99.4082 27.8151 98.9599 27.4435 98.6263C26.9391 98.174 26.8799 98.0349 26.8799 97.3033C26.8799 96.5631 26.8267 96.4427 26.3199 96.0329C26.0091 95.7816 25.7599 95.433 25.7599 95.2494C25.7599 94.6288 25.2711 92.9868 24.9551 92.5466C24.7819 92.305 24.6395 91.8672 24.6391 91.5737C24.6383 91.2803 24.5407 90.851 24.4215 90.62C24.3023 90.3885 24.1523 89.9155 24.0879 89.5681C24.0067 89.1283 23.7763 88.7546 23.3275 88.335L22.6839 87.7327L23.0219 87.2973C23.7575 86.3497 23.1935 84.1604 22.2079 84.1369C21.9175 84.1304 21.5539 84.1 21.3999 84.0704C21.2403 84.0392 21.1199 84.1142 21.1199 84.2447ZM132.149 84.3606C131.478 85.0911 131.333 86.6208 131.869 87.3123L132.219 87.7623L131.829 88.0553C131.034 88.6532 130.88 88.8632 130.88 89.3443C130.88 89.6155 130.736 90.1234 130.56 90.4728C130.384 90.8222 130.24 91.3204 130.24 91.5794C130.24 91.8384 130.096 92.2361 129.92 92.4626C129.744 92.6896 129.6 93.1112 129.6 93.4002C129.6 94.0877 128.972 95.8234 128.723 95.8234C128.298 95.8234 128 96.4164 128 97.2615C128 98.0309 127.945 98.1602 127.38 98.7078C126.969 99.1075 126.695 99.5614 126.565 100.061C126.435 100.557 126.211 100.93 125.904 101.16C125.499 101.464 125.44 101.612 125.44 102.321C125.44 103.055 125.393 103.162 124.961 103.411C124.495 103.679 124 104.469 124 104.942C124 105.07 123.825 105.256 123.611 105.355C123.329 105.485 123.185 105.726 123.086 106.232C122.97 106.831 122.861 106.972 122.32 107.232C121.595 107.578 121.292 107.921 121.285 108.401C121.282 108.586 121.107 108.903 120.896 109.104C120.425 109.552 120.255 110.68 120.636 110.828C120.988 110.965 121.024 110.896 120.979 110.153C120.949 109.67 121.007 109.459 121.189 109.389C121.337 109.331 121.44 109.098 121.44 108.821C121.44 108.199 121.997 107.497 122.492 107.497C122.905 107.497 123.52 106.986 123.52 106.642C123.52 106.498 123.714 106.454 124.151 106.496C124.793 106.558 125.009 106.157 124.619 105.625C124.223 105.085 124.456 103.93 124.96 103.93C125.418 103.93 125.76 103.299 125.76 102.454C125.76 101.833 125.829 101.651 126.146 101.441C126.358 101.301 126.621 100.909 126.73 100.572C126.998 99.743 127.314 99.2781 127.675 99.1824C128.025 99.0896 128.317 98.1752 128.319 97.1651C128.32 96.5732 128.383 96.4472 128.785 96.2364C129.135 96.0528 129.276 95.8375 129.355 95.3673C129.465 94.703 130.035 93.6159 130.189 93.7727C130.655 94.2449 131.017 93.2081 130.641 92.4776C130.23 91.6791 130.859 89.592 131.408 89.9353C131.602 90.0569 131.834 89.6735 131.837 89.2256C131.839 89.0298 131.991 88.6111 132.175 88.2945L132.51 87.7189L132.095 87.2187C131.278 86.2345 131.875 84.5941 133.084 84.5049C133.976 84.4393 133.997 84.0562 133.11 84.0364C132.645 84.0262 132.372 84.1178 132.149 84.3606ZM29.7967 84.2581C29.6847 84.3035 29.4855 84.552 29.3539 84.8098C29.2223 85.068 28.9047 85.389 28.6487 85.5232C28.3923 85.6573 28.1331 85.9257 28.0723 86.119C28.0119 86.3128 27.7127 86.7027 27.4079 86.9856C26.8655 87.4891 26.8571 87.5154 27.0351 88.1846C27.1359 88.5649 27.1699 89.1871 27.1111 89.5843C27.0083 90.2783 27.0211 90.307 27.5543 90.5644C28.3555 90.9519 28.5251 91.3042 28.2135 91.9369C27.8331 92.7095 28.1367 93.6292 28.8507 93.868C29.3331 94.0293 29.3699 94.0897 29.3091 94.6175C29.1967 95.5931 29.5787 96.6324 30.1827 96.9936C30.7099 97.3085 31.0371 98.0224 31.0391 98.8622C31.0395 99.0621 31.1891 99.3174 31.3715 99.4297C31.7583 99.6676 32.0779 100.364 32.2363 101.314C32.3019 101.708 32.4679 102.053 32.6351 102.144C32.7927 102.229 33.0319 102.579 33.1671 102.921C33.5579 103.911 35.2447 104.5 35.6875 103.801C35.8379 103.563 35.8515 103.576 35.7859 103.89C35.7439 104.09 35.7415 104.255 35.7799 104.255C35.8187 104.255 35.9215 104.09 36.0083 103.89C36.1575 103.546 36.1631 103.55 36.1063 103.966C36.0731 104.208 36.1079 104.368 36.1831 104.321C36.6519 104.028 36.3019 103.488 35.6399 103.484C33.9283 103.475 33.7503 103.445 33.6599 103.16C33.5267 102.739 32.8991 101.43 32.7859 101.336C32.4999 101.1 32.3327 100.471 32.3419 99.6668C32.3547 98.6016 32.2687 98.4176 31.7599 98.4176C31.4419 98.4176 31.3431 98.2899 31.1639 97.6474C31.0091 97.0921 30.8091 96.7869 30.4471 96.553C29.6619 96.0459 29.3507 94.9766 29.7619 94.1979C29.9371 93.8668 29.5807 93.5534 29.0279 93.5534C28.4111 93.5534 28.1759 92.7642 28.5119 91.8218C28.6643 91.3954 28.6607 91.1619 28.4955 90.6986C28.2811 90.0979 28.6491 88.7379 28.9711 88.9394C29.0407 88.9832 29.1431 88.9447 29.1983 88.8543C29.2535 88.7635 29.1827 88.6893 29.0411 88.6893C28.5499 88.6893 28.2939 87.6877 28.5899 86.9244C28.7319 86.5576 28.9331 86.2572 29.0363 86.2572C29.2459 86.2572 30.0151 87.0331 29.9731 87.2025C29.9587 87.2625 29.9615 87.3261 29.9799 87.3448C29.9979 87.363 30.0303 87.1482 30.0515 86.8669C30.0991 86.2321 30.0823 86.2471 30.7815 86.2082L31.3603 86.1762L31.2547 85.3655C31.1187 84.3221 30.6019 83.9297 29.7967 84.2581ZM30.4167 85.1085C30.2899 85.1896 30.2371 85.3679 30.2947 85.5195C30.3543 85.6768 30.3307 85.7469 30.2379 85.6885C29.9643 85.5171 30.0575 84.9601 30.3599 84.9626C30.5839 84.9646 30.5955 84.9938 30.4167 85.1085ZM111.564 85.6492C111.224 86.0955 111.233 86.4352 111.608 87.149C111.824 87.5596 112 88.0744 112 88.2925C112 88.5109 112.073 88.6893 112.163 88.6893C112.252 88.6893 112.565 88.9386 112.857 89.2438C113.432 89.8433 113.646 89.9228 114.2 89.742C114.447 89.6609 114.56 89.4963 114.56 89.2158V88.8077L114.24 89.2199C113.642 89.9905 112.814 89.2864 113.105 88.2544C113.309 87.53 113.099 87.1676 112.47 87.1579C112.036 87.1506 111.882 87.057 111.71 86.6946C111.324 85.8803 112.121 85.453 112.941 86.0351C113.299 86.2893 113.307 86.2868 113.141 85.9731C112.86 85.4409 111.878 85.239 111.564 85.6492ZM113.44 90.6248C113.44 90.8194 113.378 90.9398 113.303 90.8928C113.228 90.8457 113.086 90.9872 112.987 91.2077C112.853 91.5044 112.682 91.6078 112.324 91.6078C111.268 91.6078 110.856 92.7906 111.6 93.686C112.104 94.2932 112.105 94.7958 111.602 95.7541C111.187 96.5449 111.191 97.1379 111.614 97.5947C111.792 97.7881 111.798 97.7301 111.649 97.2388C111.424 96.4962 111.749 95.915 112.469 95.7686C112.783 95.705 112.967 95.5656 112.981 95.3815C112.992 95.2234 113.017 94.8749 113.035 94.6073C113.08 93.9758 112.868 93.7156 112.309 93.7156C110.889 93.7156 111.204 91.9702 112.64 91.885C113.106 91.8571 113.346 91.7719 113.32 91.6439C113.298 91.5348 113.334 91.4542 113.4 91.4647C113.95 91.5527 114.144 90.8636 113.68 90.4728C113.479 90.3038 113.44 90.3285 113.44 90.6248ZM48.3299 91.6232C48.3179 91.9349 48.8163 92.4225 49.1323 92.4083C49.2575 92.4027 49.1963 92.3313 48.9963 92.2498C48.7959 92.1684 48.5667 91.9361 48.4863 91.733C48.3923 91.4959 48.3367 91.4566 48.3299 91.6232ZM113.8 91.6216C113.602 91.6974 113.44 91.8713 113.44 92.0079C113.44 92.1445 113.435 92.3094 113.428 92.3739C113.421 92.4387 113.505 92.5214 113.614 92.5583C113.735 92.5993 113.775 92.5303 113.718 92.3792C113.602 92.0727 113.885 91.7667 114.18 91.881C114.301 91.928 114.4 91.8903 114.4 91.7967C114.4 91.532 114.192 91.4712 113.8 91.6216ZM22.3999 92.9049C22.3999 92.9941 22.5079 93.067 22.6399 93.067C22.7719 93.067 22.8799 92.9941 22.8799 92.9049C22.8799 92.8157 22.7719 92.7427 22.6399 92.7427C22.5079 92.7427 22.3999 92.8157 22.3999 92.9049ZM50.6163 95.6101C50.6767 95.6714 51.0287 95.7626 51.3991 95.8128C52.2091 95.9231 52.5103 96.4735 52.2067 97.2883C51.9759 97.9085 52.0819 97.906 52.3991 97.2838C52.8867 96.3288 52.3003 95.4991 51.1375 95.4991C50.7907 95.4991 50.5559 95.5489 50.6163 95.6101ZM24.1599 96.829C24.1599 97.1326 24.5611 97.4982 24.8039 97.4164C24.9003 97.3839 24.7947 97.1817 24.5695 96.9672C24.2579 96.6709 24.1599 96.6377 24.1599 96.829ZM130.228 97.0613C129.871 97.4545 129.867 97.4743 130.181 97.3089C130.369 97.2104 130.564 97.0179 130.616 96.8817C130.747 96.536 130.674 96.57 130.228 97.0613ZM51.8399 99.2124C51.8399 99.7078 51.8567 99.7195 52.5107 99.677C53.4187 99.6182 53.5971 99.9875 53.5887 101.904C53.5799 103.828 53.3591 104.491 52.7183 104.516C52.4551 104.527 52.1651 104.545 52.0739 104.557C51.7767 104.596 51.8279 105.524 52.1575 106.071C52.5419 106.711 52.5595 107.102 52.2399 107.877C52.1079 108.198 51.9999 108.751 51.9999 109.107C51.9999 109.728 51.9731 109.762 51.3419 109.934C50.9135 110.051 50.6555 110.225 50.6019 110.433C50.5243 110.733 50.5007 110.736 50.2251 110.483C49.9479 110.229 49.9203 110.238 49.7419 110.634C49.6383 110.865 49.4915 111.016 49.4167 110.969C49.3415 110.922 49.2799 110.959 49.2799 111.051C49.2799 111.148 49.4695 111.18 49.7339 111.126C50.8787 110.894 51.1747 112.807 50.0383 113.096C49.5627 113.217 49.5031 113.333 49.7759 113.61C50.3207 114.162 49.8055 115.497 48.9767 115.682C48.7071 115.742 48.4383 115.981 48.2559 116.325C47.6375 117.489 45.7195 117.114 45.5699 115.801C45.5275 115.426 45.4371 115.354 44.9599 115.317C43.7715 115.224 43.6799 115.164 43.6799 114.476C43.6799 114.126 43.7531 113.794 43.8427 113.738C43.9319 113.682 43.9635 113.568 43.9131 113.485C43.8623 113.402 43.9115 113.334 44.0223 113.334C44.4731 113.334 43.8831 113.038 43.2799 112.962C42.2655 112.834 41.4047 112.565 41.2591 112.333C41.0363 111.977 41.0923 110.902 41.3331 110.902C41.4635 110.902 41.5467 110.713 41.5467 110.416C41.5467 109.899 41.4619 109.83 41.1519 110.091C41.0123 110.209 41.0035 110.201 41.1199 110.059C41.3795 109.744 41.3099 109.67 40.7599 109.678C40.2767 109.686 40.2403 109.649 40.2475 109.159C40.2555 108.602 40.1831 108.531 39.8719 108.794C39.7323 108.912 39.7235 108.903 39.8399 108.762C40.1047 108.44 40.0235 108.327 39.5631 108.377C39.2963 108.406 39.0939 108.544 39.0431 108.731C38.7795 109.703 36.9599 108.839 36.9599 107.743C36.9599 107.451 36.8503 107.12 36.7159 107.008C36.5819 106.895 36.5075 106.767 36.5503 106.723C36.5935 106.68 36.5627 106.519 36.4819 106.366C36.2351 105.899 36.1643 105.198 36.3319 104.88C36.4555 104.646 36.4351 104.579 36.2403 104.579C36.0075 104.579 35.6531 105.195 35.7691 105.399C35.7975 105.448 35.8623 105.841 35.9131 106.271C35.9715 106.762 36.1531 107.229 36.4027 107.531C36.6211 107.794 36.7999 108.116 36.7999 108.247C36.7999 108.631 37.5503 109.281 37.9943 109.281C38.2191 109.281 38.5263 109.427 38.6771 109.605C38.8279 109.783 39.1007 109.929 39.2835 109.929C39.7167 109.929 39.9999 110.227 39.9999 110.683C39.9999 110.884 40.1187 111.115 40.2639 111.198C40.4087 111.28 40.6787 111.666 40.8639 112.056C41.1327 112.623 41.3347 112.813 41.8747 113.009C42.8659 113.368 43.3599 113.872 43.3599 114.524C43.3599 115.138 43.6875 115.504 44.3867 115.673C44.6439 115.735 45.1119 116.075 45.4267 116.427C45.8919 116.948 46.1623 117.099 46.8619 117.228C48.0815 117.454 48.0611 117.461 48.4351 116.681C48.6955 116.138 48.8859 115.952 49.2599 115.876C49.7703 115.772 50.2399 115.105 50.2399 114.483C50.2399 114.304 50.3927 114.013 50.5795 113.837C51.0691 113.375 51.2263 112.29 50.9315 111.409C50.6899 110.688 50.7715 110.453 51.2799 110.406C52.1751 110.323 52.3919 110.031 52.4191 108.875C52.4295 108.43 52.4935 107.713 52.5611 107.284C52.6655 106.62 52.6327 106.432 52.3419 106.034C51.8203 105.318 51.9631 105.065 52.8891 105.065C53.5839 105.065 53.8163 104.427 53.8907 102.314C53.9691 100.088 53.6359 98.906 52.9287 98.9019C52.7259 98.9007 52.3979 98.8557 52.1999 98.8018C51.8827 98.7155 51.8399 98.7641 51.8399 99.2124ZM111.2 100.967C110.45 101.104 110.072 101.628 110.184 102.375C110.314 103.236 110.665 103.93 110.97 103.93C111.102 103.93 111.389 104.048 111.606 104.192C112.258 104.625 112.098 104.109 111.28 103.137C110.434 102.133 110.38 101.775 111.035 101.5C111.488 101.31 112.032 100.826 111.74 100.872C111.663 100.884 111.42 100.927 111.2 100.967ZM35.1999 102.365C35.1999 102.39 35.4259 102.625 35.7019 102.886C36.2019 103.361 36.2027 103.361 35.9323 102.931C35.7115 102.579 35.1999 102.184 35.1999 102.365ZM119.343 102.512C119.211 102.623 119.002 102.86 118.878 103.038C118.754 103.217 118.883 103.148 119.166 102.886C119.449 102.625 119.68 102.388 119.68 102.36C119.68 102.264 119.581 102.309 119.343 102.512ZM27.8499 104.594C27.8379 104.906 28.3363 105.394 28.6523 105.379C28.7775 105.374 28.7163 105.302 28.5163 105.221C28.3159 105.139 28.0867 104.907 28.0063 104.704C27.9123 104.467 27.8567 104.428 27.8499 104.594ZM118.535 105.09C118.589 105.662 118.483 106.115 118.07 107.092C117.995 107.27 117.855 107.725 117.761 108.104C117.565 108.885 117.073 109.132 116.301 108.837C115.781 108.638 115.604 108.74 115.916 109.057C116.493 109.641 118.08 109.014 118.08 108.203C118.08 108.047 118.264 107.651 118.489 107.323C118.795 106.874 118.895 106.528 118.888 105.935C118.875 104.779 118.846 104.6 118.651 104.524C118.536 104.48 118.496 104.675 118.535 105.09ZM109.645 105.511C109.176 106.024 108.747 106.614 108.694 106.823C108.631 107.073 108.361 107.306 107.906 107.503C107.36 107.741 107.184 107.917 107.075 108.34C106.938 108.868 106.924 108.875 106.121 108.821C104.767 108.731 103.801 109.258 103.876 110.047C103.915 110.446 104.016 110.659 104.167 110.659C104.336 110.659 104.385 110.5 104.35 110.079C104.266 109.1 105.606 108.752 106.854 109.429C107.214 109.624 107.281 109.505 107.395 108.471C107.426 108.192 107.627 107.965 108.046 107.741C108.378 107.563 108.789 107.182 108.959 106.895C109.129 106.609 109.397 106.224 109.554 106.04C110.525 104.906 110.53 104.903 111.273 104.903C111.673 104.903 112 104.83 112 104.741C112 104.107 110.474 104.606 109.645 105.511ZM110.877 107.258C110.567 107.635 110.788 107.707 111.119 107.336C111.279 107.157 111.335 107.011 111.244 107.011C111.153 107.011 110.988 107.122 110.877 107.258ZM97.3291 108.826C97.1363 108.92 96.9351 109.112 96.8823 109.252C96.8103 109.443 96.8723 109.427 97.1311 109.191C97.5663 108.793 99.1203 108.796 100.313 109.197C101.127 109.471 101.212 109.601 101.131 110.442C101.091 110.854 101.457 110.992 101.658 110.641C101.955 110.124 101.883 109.588 101.481 109.321C100.619 108.749 98.1007 108.448 97.3291 108.826ZM93.0383 109.353C92.7311 109.682 92.4799 110.02 92.4799 110.103C92.4799 110.186 92.4011 110.254 92.3047 110.254C91.9179 110.254 91.1999 110.935 91.1999 111.303C91.1999 111.606 91.0811 111.709 90.5999 111.825C90.0183 111.965 89.9995 111.992 89.9847 112.711C89.9687 113.509 89.4955 114.318 88.5643 115.14C88.1387 115.517 88.0783 115.677 88.0675 116.466C88.0567 117.232 87.9811 117.448 87.5475 117.948C86.9407 118.648 86.9279 118.797 87.4139 119.522L87.7875 120.08L87.2095 120.761C86.8915 121.135 86.5555 121.441 86.4635 121.441C85.9935 121.441 85.5999 122.201 85.5999 123.108C85.5999 123.939 85.5479 124.077 85.0399 124.592L84.4799 125.159L84.7495 125.732C85.0303 126.329 85.4727 126.473 86.0567 126.156C86.2083 126.073 87.5175 125.958 88.9663 125.899C91.7635 125.786 92.1427 125.667 92.4079 124.82C92.4855 124.573 92.6711 124.521 93.4907 124.52C94.2143 124.519 94.7163 124.407 95.3599 124.103C95.8439 123.875 96.5999 123.62 97.0399 123.537C98.2439 123.309 98.6727 123.083 98.8855 122.562C99.0579 122.141 99.1555 122.09 99.7871 122.09C100.657 122.09 101.317 121.763 101.566 121.21C101.719 120.868 101.863 120.793 102.361 120.793C103.078 120.793 103.588 120.471 103.929 119.802C104.158 119.353 104.234 119.321 104.978 119.355C105.721 119.39 105.825 119.345 106.396 118.755C107.165 117.959 107.864 117.412 108.837 116.846C109.253 116.603 109.663 116.274 109.747 116.114C109.832 115.954 110.192 115.735 110.548 115.627C111.483 115.343 111.859 114.35 111.261 113.744C110.903 113.38 110.859 113.492 111.077 114.212C111.306 114.965 111.01 115.28 110.072 115.28C109.548 115.28 109.471 115.335 109.341 115.807C109.232 116.201 109.018 116.425 108.49 116.696C108.101 116.895 107.598 117.233 107.371 117.448C107.145 117.662 106.8 117.887 106.604 117.947C106.408 118.006 106.156 118.252 106.043 118.492C105.859 118.881 105.729 118.937 104.833 119.009C103.815 119.091 103.528 119.277 103.522 119.855C103.519 120.244 103.026 120.468 102.173 120.468C101.496 120.468 101.428 120.508 101.218 121.016C100.922 121.736 100.748 121.825 99.7279 121.784C98.8871 121.749 98.8659 121.759 98.6359 122.318C98.2307 123.3 96.1415 123.741 95.4899 122.981C95.2987 122.758 95.0291 122.577 94.8911 122.579C94.7423 122.58 94.7063 122.63 94.8035 122.7C94.8931 122.766 94.9887 123.056 95.0155 123.345C95.0759 124.004 94.6683 124.197 93.2215 124.197C92.2007 124.197 91.8399 124.37 91.8399 124.859C91.8399 125.366 91.3699 125.557 90.0255 125.595C89.3075 125.615 88.3851 125.683 87.9755 125.745C87.4391 125.827 87.0931 125.788 86.7355 125.608C86.4555 125.466 85.9995 125.387 85.6891 125.426C85.1611 125.493 84.6807 125.184 85.0943 125.044C85.5491 124.89 85.7599 124.468 85.7599 123.71C85.7599 122.639 85.9767 122.14 86.6067 121.764C86.8991 121.589 87.2611 121.185 87.4115 120.866C87.6275 120.406 87.7503 120.307 88.0023 120.388C88.2395 120.464 88.3203 120.416 88.3211 120.195C88.3219 119.975 88.4015 120.022 88.6399 120.387L88.9579 120.874L88.9587 120.256C88.9595 119.885 88.8959 119.679 88.7999 119.739C88.7119 119.794 88.6399 119.725 88.6399 119.586C88.6399 119.293 88.4575 119.259 88.2135 119.506C87.9739 119.749 87.5199 119.257 87.5199 118.754C87.5199 118.471 87.6079 118.36 87.8343 118.36C88.2939 118.36 88.4503 117.915 88.3683 116.84C88.2995 115.935 88.3235 115.856 88.8375 115.299C89.1355 114.976 89.5767 114.439 89.8179 114.104C90.1527 113.64 90.3675 113.496 90.7279 113.496C90.9875 113.496 91.1999 113.419 91.1999 113.324C91.1999 113.23 91.2607 113.191 91.3351 113.237C91.4091 113.284 91.4535 113.07 91.4331 112.761C91.4127 112.452 91.4647 112.199 91.5491 112.199C91.8619 112.199 92.1239 111.758 92.0487 111.358C91.9871 111.033 92.0779 110.868 92.4763 110.58C92.7547 110.38 93.0459 110.046 93.1239 109.838C93.4779 108.894 95.5463 108.823 96.2743 109.729C96.4455 109.943 96.4859 109.952 96.4411 109.767C96.2131 108.823 93.8043 108.529 93.0383 109.353ZM113.347 109.789C113.286 109.89 113.335 110.029 113.458 110.098C113.622 110.19 113.666 110.504 113.626 111.293C113.567 112.481 113.313 112.713 112.442 112.377C112.104 112.247 112.032 112.258 112.098 112.431C112.354 113.109 113.714 112.796 113.866 112.024C113.919 111.755 114.164 111.397 114.421 111.211C114.889 110.873 115.006 110.382 114.724 109.931C114.529 109.618 114.031 109.617 113.891 109.929C113.802 110.128 113.78 110.121 113.771 109.889C113.758 109.569 113.516 109.511 113.347 109.789ZM96.2727 110.308C96.0939 110.778 96.1375 110.902 96.4799 110.902C96.7275 110.902 96.7951 110.801 96.7783 110.456C96.7567 110.014 96.7555 110.014 96.6735 110.416L96.5911 110.821L96.4883 110.416C96.3979 110.061 96.3711 110.047 96.2727 110.308ZM107.456 110.228C107.332 110.43 107.631 110.79 107.822 110.67C107.92 110.609 108 110.498 108 110.423C108 110.239 107.548 110.076 107.456 110.228ZM121.48 110.694C121.37 110.734 121.28 110.823 121.28 110.891C121.28 111.066 122.039 111.003 122.192 110.815C122.263 110.729 122.255 110.713 122.175 110.779C122.095 110.845 121.951 110.837 121.855 110.76C121.759 110.684 121.59 110.654 121.48 110.694ZM120.16 111.03C119.94 111.065 119.651 111.192 119.518 111.312C119.386 111.432 119.074 111.568 118.825 111.613C118.238 111.721 117.989 111.941 117.501 112.785C117.281 113.165 116.896 113.609 116.646 113.77C115.742 114.352 114.197 115.991 114.053 116.519C113.969 116.827 113.773 117.089 113.579 117.151C113.397 117.21 113.111 117.396 112.944 117.566C112.777 117.735 112.474 117.874 112.27 117.874C111.835 117.874 111.519 118.113 111.145 118.725C110.995 118.971 110.771 119.171 110.648 119.171C110.13 119.171 108.32 121.192 108.315 121.777C108.311 122.225 108.279 122.279 108.151 122.056C107.71 121.289 106.232 121.568 105.852 122.489C105.632 123.024 105.568 123.062 104.901 123.062C103.957 123.062 103.715 123.173 103.43 123.73C103.217 124.148 103.109 124.197 102.418 124.197C101.489 124.197 100.867 124.619 100.672 125.381C100.549 125.861 100.488 125.899 99.7503 125.945C98.8407 126.002 98.1375 126.238 97.6799 126.637C97.3075 126.962 97.0083 127.058 95.9375 127.194C95.0595 127.306 94.2583 127.671 93.9623 128.096C93.6583 128.533 92.8627 128.766 92.6335 128.486C92.1359 127.878 90.6839 128.077 90.0967 128.833C89.7427 129.29 89.2743 129.498 88.3147 129.624C87.5055 129.73 86.5331 130.255 86.5723 130.563C86.6355 131.061 86.5459 131.504 86.3999 131.413C86.3119 131.357 86.2399 131.389 86.2399 131.484C86.2399 131.816 86.8791 131.668 86.8999 131.332C86.9111 131.153 86.9287 130.843 86.9399 130.642C86.9811 129.89 89.4631 129.409 90.0799 130.034L90.3999 130.359V129.654C90.3999 128.503 91.1951 128.035 92.2371 128.574C92.8367 128.883 94.3231 128.843 94.8675 128.502C94.9471 128.452 95.0491 128.503 95.0935 128.615C95.1395 128.73 95.1879 128.678 95.2059 128.494C95.2227 128.316 95.2467 128.063 95.2583 127.932C95.2863 127.624 96.3387 127.306 97.3855 127.291C98.0903 127.28 98.2679 127.21 98.5967 126.814C98.9043 126.443 99.1651 126.327 99.8879 126.235C100.776 126.123 100.797 126.108 100.962 125.486C101.158 124.751 101.383 124.595 102.48 124.441C103.096 124.354 103.375 124.214 103.695 123.833C104.028 123.437 104.249 123.332 104.815 123.305C105.881 123.255 105.89 123.251 106.008 122.86C106.306 121.861 106.85 121.619 107.75 122.084C108.493 122.469 108.64 122.403 108.64 121.682C108.64 121.27 108.745 121.058 109.059 120.841C109.29 120.68 109.661 120.377 109.883 120.168C110.106 119.958 110.511 119.66 110.784 119.506C111.057 119.352 111.361 119.062 111.462 118.861C111.789 118.201 111.911 118.157 112.851 118.354C113.553 118.502 113.813 118.497 114.108 118.329C114.312 118.213 114.502 118.107 114.529 118.095C114.556 118.082 114.617 117.608 114.664 117.041L114.749 116.01L115.895 114.906C117.181 113.666 117.345 113.496 117.943 112.781C118.363 112.28 119.387 111.875 120.233 111.875C120.446 111.875 120.666 111.801 120.721 111.71C120.777 111.62 120.877 111.58 120.944 111.622C121.011 111.664 121.067 111.592 121.067 111.462C121.067 111.333 121.031 111.262 120.989 111.305C120.946 111.348 120.832 111.29 120.736 111.175C120.639 111.06 120.38 110.995 120.16 111.03ZM34.0207 111.248C33.6143 111.491 33.9559 111.707 34.7503 111.71C35.0751 111.712 35.3891 111.792 35.4479 111.888C35.5071 111.985 35.8711 112.201 36.2575 112.369C36.7579 112.586 37.0371 112.838 37.2295 113.247C37.3779 113.563 37.5603 113.821 37.6347 113.821C38.0083 113.821 39.9999 116.027 39.9999 116.441C39.9999 117.03 39.8479 117.388 39.5979 117.388C39.4655 117.388 39.4187 117.52 39.4687 117.752C39.5323 118.046 39.5139 118.069 39.3763 117.874C39.2247 117.659 39.2047 117.66 39.2023 117.882C39.1991 118.205 39.5135 118.523 39.8319 118.52C40.0503 118.518 40.0515 118.499 39.8399 118.36C39.4495 118.105 39.9075 118.176 40.4655 118.459C40.7923 118.624 41.1367 118.678 41.4099 118.608C43.0539 118.183 43.2659 118.293 43.2743 119.577C43.2779 120.067 43.3483 120.375 43.4531 120.356C43.5487 120.338 43.6267 120.422 43.6267 120.543C43.6267 120.673 43.5231 120.725 43.3731 120.671C43.1871 120.605 43.2051 120.669 43.4399 120.911C43.7539 121.235 43.7663 121.235 44.0903 120.936C44.8915 120.195 46.2399 120.701 46.2399 121.743C46.2399 122.273 46.6487 122.631 46.8595 122.285C47.2931 121.574 48.4111 121.805 48.8303 122.691C49.0015 123.053 49.2019 123.168 49.8951 123.302C50.4363 123.407 50.8519 123.597 51.0303 123.82C51.1847 124.014 51.5895 124.29 51.9299 124.434C52.7907 124.799 53.1199 125.144 53.1199 125.682C53.1199 126.128 53.1463 126.143 53.9303 126.143C55.0435 126.143 55.3599 126.344 55.3599 127.05C55.3599 127.364 55.2943 127.58 55.2139 127.53C55.0015 127.397 55.0979 127.85 55.3467 128.154C55.4635 128.296 55.6335 128.413 55.7243 128.413C55.8151 128.413 55.7523 128.255 55.5847 128.061C55.4171 127.867 55.3699 127.762 55.4799 127.827C55.5899 127.893 55.6799 127.871 55.6799 127.78C55.6799 127.511 56.9719 127.239 57.8867 127.316C58.8591 127.398 59.1731 127.638 59.2263 128.343L59.2635 128.84L60.7259 128.809C61.5303 128.791 62.3391 128.695 62.5235 128.595C63.4407 128.098 64.4799 128.575 64.4799 129.493C64.4799 129.986 64.5203 130.049 64.7599 129.932C65.8787 129.386 67.8399 130.075 67.8399 131.015C67.8399 132.021 68.8955 131.962 68.9347 130.953C68.9747 129.919 70.1627 129.546 71.6651 130.097C72.1643 130.28 72.6835 131.007 72.3147 131.007C72.2295 131.007 72.1599 131.153 72.1599 131.332C72.1599 131.624 72.2659 131.655 73.2399 131.653C73.8339 131.652 74.2463 131.597 74.1563 131.532C74.0667 131.466 73.9695 131.157 73.9411 130.845C73.8767 130.139 74.0515 130.248 72.3851 129.874C69.7143 129.276 68.6399 129.55 68.6399 130.83C68.6399 131.272 68.5719 131.44 68.3919 131.44C68.2391 131.44 68.1539 131.31 68.1695 131.102C68.2291 130.319 68.1547 130.218 67.2739 129.884C66.7867 129.699 66.1415 129.548 65.8403 129.548C65.4083 129.548 65.1699 129.413 64.7087 128.908C63.9915 128.123 63.4623 127.985 62.5631 128.349C61.8103 128.655 61.0515 128.507 60.3999 127.927C60.0247 127.594 58.3767 126.954 57.8927 126.954C57.7083 126.954 57.3279 126.81 57.0467 126.634C56.7659 126.458 55.9503 126.172 55.2343 125.999C53.7951 125.651 53.6003 125.565 53.5987 125.282C53.5979 125.078 52.8447 124.562 52.1403 124.283C51.9091 124.191 51.5247 123.879 51.2859 123.589C50.9043 123.127 50.7559 123.062 50.0691 123.062C49.3211 123.062 49.2723 123.035 48.9699 122.434C48.5375 121.574 47.6735 121.317 46.9483 121.832C46.6559 122.04 46.6235 122.029 46.5999 121.714C46.5415 120.926 45.7327 120.144 44.9751 120.144C44.7907 120.144 44.6399 120.079 44.6399 119.999C44.6399 119.92 44.4623 119.81 44.2455 119.754C43.9563 119.681 43.8071 119.487 43.6843 119.026C43.4827 118.267 43.2215 118.025 42.5487 117.973C42.2679 117.951 41.9471 117.807 41.8355 117.652C41.7235 117.497 41.3911 117.303 41.0963 117.22C40.6395 117.092 40.5547 116.991 40.5247 116.54C40.4895 116.003 38.3271 113.659 37.8667 113.658C37.7639 113.658 37.4999 113.313 37.2799 112.891C37.0463 112.444 36.6799 112.024 36.3999 111.882C36.1359 111.748 35.7399 111.53 35.5199 111.397C35.0011 111.084 34.3967 111.023 34.0207 111.248ZM32.8051 111.336C32.7987 111.577 33.2439 112.037 33.4835 112.037C33.5939 112.037 33.5767 111.958 33.4391 111.834C33.3155 111.723 33.1235 111.522 33.0123 111.389C32.8843 111.235 32.8083 111.215 32.8051 111.336ZM121.56 111.564C121.406 111.735 121.28 111.914 121.28 111.962C121.28 112.138 121.885 111.714 121.976 111.474C122.102 111.141 121.903 111.184 121.56 111.564ZM114.764 117.71C114.754 117.846 114.722 118.058 114.693 118.18C114.663 118.301 114.742 118.438 114.866 118.484C115.016 118.539 115.06 118.486 114.998 118.321C114.947 118.186 114.98 118 115.072 117.907C115.164 117.813 115.348 117.78 115.481 117.832C115.637 117.892 115.698 117.849 115.653 117.711C115.551 117.402 114.787 117.401 114.764 117.71ZM114.175 118.894C114.24 119.102 114.214 119.174 114.099 119.102C113.985 119.031 113.961 119.091 114.03 119.272C114.112 119.489 114.073 119.527 113.859 119.444C113.68 119.375 113.622 119.399 113.692 119.514C113.763 119.631 113.692 119.658 113.487 119.592C113.274 119.523 113.173 119.566 113.173 119.726C113.173 119.924 113.25 119.929 113.658 119.76C114.203 119.535 114.729 118.577 114.307 118.577C114.15 118.577 114.107 118.679 114.175 118.894ZM40.4799 118.857C40.4799 119.229 40.8139 119.631 41.2499 119.785C41.6111 119.913 41.7067 119.898 41.7067 119.718C41.7067 119.566 41.6027 119.524 41.3931 119.592C41.1879 119.658 41.1171 119.631 41.1883 119.514C41.2583 119.399 41.1995 119.375 41.0203 119.444C40.8063 119.527 40.7683 119.489 40.8503 119.272C40.9219 119.083 40.8959 119.03 40.7707 119.108C40.6471 119.186 40.6195 119.135 40.6875 118.955C40.7439 118.806 40.7203 118.685 40.6347 118.685C40.5495 118.685 40.4799 118.763 40.4799 118.857ZM108.923 122.863C108.872 123.062 108.661 123.292 108.455 123.376C108.221 123.471 108.176 123.532 108.335 123.539C108.66 123.552 109.174 122.984 109.084 122.711C109.046 122.593 108.976 122.66 108.923 122.863ZM82.3295 129.888C81.6311 130.062 81.0315 130.232 80.9975 130.266C80.8567 130.409 80.8515 130.94 80.9895 131.116C81.0879 131.242 81.0407 131.363 80.8487 131.476C80.6259 131.607 80.8071 131.647 81.6399 131.651C82.6471 131.655 83.2383 131.233 82.5795 130.98C82.2367 130.848 82.7359 130.207 83.3051 130.048C84.7007 129.657 85.8915 130.122 85.8275 131.032C85.7895 131.575 85.8183 131.646 86.0111 131.484C86.3131 131.23 86.3035 130.446 85.9947 130.133C85.3787 129.509 84.1743 129.428 82.3295 129.888ZM105.502 136.115C105.502 137.274 105.528 137.727 105.559 137.121C105.59 136.515 105.59 135.567 105.558 135.013C105.527 134.46 105.502 134.955 105.502 136.115ZM143.068 142.528C142.863 142.791 142.76 143.005 142.84 143.005C143.004 143.005 143.68 142.312 143.68 142.144C143.68 141.909 143.425 142.069 143.068 142.528ZM105.502 149.248C105.502 150.407 105.528 150.86 105.559 150.254C105.59 149.649 105.59 148.7 105.558 148.146C105.527 147.593 105.502 148.088 105.502 149.248ZM30.1171 162.624C30.1171 162.936 30.1499 163.064 30.1903 162.908C30.2303 162.752 30.2303 162.496 30.1903 162.34C30.1499 162.184 30.1171 162.312 30.1171 162.624ZM13.6399 169.226C13.8819 169.263 14.2779 169.263 14.5199 169.226C14.7619 169.189 14.5639 169.158 14.0799 169.158C13.5959 169.158 13.3979 169.189 13.6399 169.226ZM92.9999 169.226C93.2419 169.263 93.6379 169.263 93.8799 169.226C94.1219 169.189 93.9239 169.158 93.4399 169.158C92.9559 169.158 92.7579 169.189 92.9999 169.226ZM148.04 169.226C148.282 169.263 148.678 169.263 148.92 169.226C149.162 169.189 148.964 169.158 148.48 169.158C147.996 169.158 147.798 169.189 148.04 169.226Z\" fill=\"url(#paint3_linear)\" />\r\n        <defs>\r\n            <linearGradient id=\"paint0_linear\" x1=\"70.5659\" y1=\"46.3311\" x2=\"70.5659\" y2=\"75.5777\" gradientUnits=\"userSpaceOnUse\">\r\n                <stop stop-color=\"#E78C57\" />\r\n                <stop offset=\"1\" stop-color=\"#DB723E\" />\r\n            </linearGradient>\r\n            <linearGradient id=\"paint1_linear\" x1=\"77.1281\" y1=\"14.8544\" x2=\"77.1281\" y2=\"169.272\" gradientUnits=\"userSpaceOnUse\">\r\n                <stop stop-color=\"#E78C57\" />\r\n                <stop offset=\"1\" stop-color=\"#DB723E\" />\r\n            </linearGradient>\r\n            <linearGradient id=\"paint2_linear\" x1=\"67.52\" y1=\"14.9167\" x2=\"67.52\" y2=\"157.54\" gradientUnits=\"userSpaceOnUse\">\r\n                <stop stop-color=\"#E78C57\" />\r\n                <stop offset=\"1\" stop-color=\"#DB723E\" />\r\n            </linearGradient>\r\n            <linearGradient id=\"paint3_linear\" x1=\"81.2799\" y1=\"14.8839\" x2=\"81.2799\" y2=\"169.254\" gradientUnits=\"userSpaceOnUse\">\r\n                <stop stop-color=\"#E78C57\" />\r\n                <stop offset=\"1\" stop-color=\"#DB723E\" />\r\n            </linearGradient>\r\n        </defs>\r\n    </svg>\r\n)\r\n}\r\nexport default Chanakya;\r\n\r\n<svg width=\"160\" height=\"179\" viewBox=\"0 0 160 179\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M63.0212 15.0388C63.0108 15.1056 63.0108 15.2151 63.0212 15.282C63.0528 15.4871 62.7516 15.4165 62.6732 15.2009C62.6164 15.044 62.5504 15.0493 62.38 15.2248C62.2408 15.3679 62.2336 15.4088 62.36 15.3367C62.4928 15.2609 62.56 15.3383 62.56 15.5677C62.56 15.8778 62.5852 15.8875 62.8048 15.6654C63.1884 15.2763 63.6156 15.5142 63.256 15.9171C63.0152 16.1867 63.0124 16.2147 63.2364 16.1275C63.6552 15.965 63.6928 15.5933 63.3176 15.327C63.0712 15.1518 63.0404 15.0793 63.2124 15.0793C63.3464 15.0793 63.5468 15.1705 63.6576 15.282C63.8192 15.4445 63.838 15.4283 63.7524 15.2009C63.6488 14.9253 63.0592 14.7943 63.0212 15.0388ZM90.0152 15.2694C90.1828 15.4632 90.23 15.5681 90.12 15.5029C90.01 15.4376 89.92 15.4615 89.92 15.556C89.92 15.6504 89.9896 15.7278 90.0748 15.7278C90.1604 15.7278 90.192 15.828 90.1456 15.95C90.0216 16.2779 90.4384 16.374 90.888 16.1214C91.2596 15.9131 91.2584 15.877 90.88 15.8292C90.792 15.8182 90.732 15.7724 90.7472 15.7278C90.8284 15.4838 90.3408 14.9172 90.0496 14.9172C89.7144 14.9172 89.714 14.9216 90.0152 15.2694ZM90.7544 15.2929C90.7764 15.5653 90.8752 15.6606 91.1124 15.6383C91.4552 15.6062 91.4756 15.2544 91.1472 15.0428C90.8272 14.8365 90.7224 14.9034 90.7544 15.2929ZM60.3368 16.5815C59.8288 16.847 59.5604 17.528 59.9904 17.4615C60.1544 17.436 60.4172 17.3091 60.5744 17.1794C60.8336 16.9654 60.8488 16.9739 60.7404 17.2681C60.6468 17.5223 60.6632 17.5503 60.8156 17.3966C60.9616 17.2499 60.9648 17.1453 60.8292 16.9791C60.6936 16.8138 60.6952 16.7096 60.836 16.5669C61.08 16.3196 60.8236 16.3269 60.3368 16.5815ZM56.16 17.7546C56.16 17.8883 56.0468 17.9978 55.9088 17.9978C55.74 17.9978 55.6744 18.1173 55.7088 18.3626C55.76 18.7262 57.0984 19.0395 57.1332 18.6962C57.1408 18.624 57.1648 18.3974 57.1872 18.1919C57.2116 17.969 57.1136 17.757 56.9444 17.665C56.524 17.4372 56.16 17.4785 56.16 17.7546ZM97.7256 17.6832C97.5144 17.8081 97.4844 17.9329 97.5956 18.2292C97.6748 18.4404 97.696 18.6569 97.6432 18.7108C97.59 18.7643 97.9188 18.8085 98.3732 18.8085C99.142 18.8085 99.2 18.7809 99.2 18.4149C99.2 17.6682 98.4128 17.2775 97.7256 17.6832ZM54.584 19.0687C54.2924 19.4027 54.48 19.5612 54.7924 19.2446C54.9284 19.1068 55.04 18.952 55.04 18.9013C55.04 18.731 54.8024 18.8182 54.584 19.0687ZM99.8936 19.3354C100.26 19.7164 100.416 19.7967 100.458 19.6252C100.49 19.4951 100.436 19.3609 100.337 19.3277C100.239 19.2945 100.206 19.1891 100.264 19.0938C100.326 18.9913 100.294 18.9678 100.185 19.0363C100.083 19.0999 100 19.0748 100 18.9803C100 18.8859 99.862 18.8085 99.6936 18.8085C99.4332 18.8085 99.4628 18.8871 99.8936 19.3354ZM50.6264 20.3261C50.3356 21.0942 50.6092 21.4837 51.44 21.4837H52.24V20.8352V20.1866L51.4784 20.1372C50.9224 20.1011 50.6924 20.1522 50.6264 20.3261ZM102.624 20.7156C102.62 21.4087 102.766 21.5599 103.44 21.5599C104.682 21.5599 104.676 20.2227 103.434 20.1542L102.628 20.1096L102.624 20.7156ZM69.0228 21.641C69.042 21.7723 69.1076 21.9304 69.1688 21.9924C69.23 22.0545 69.28 22.2279 69.28 22.3775C69.28 22.6848 70.4828 22.7845 70.8292 22.5064C71.4656 21.9945 71.0156 21.4027 69.99 21.4027C69.1992 21.4027 68.9956 21.4529 69.0228 21.641ZM83.9816 21.4432C83.8516 21.7326 83.8996 22.3609 84.05 22.3317C84.1544 22.311 84.2268 22.3714 84.2104 22.4651C84.1932 22.566 84.5544 22.6467 85.0904 22.6621C85.5908 22.6767 85.928 22.6361 85.84 22.5725C85.752 22.5088 85.6728 22.3654 85.664 22.2539C85.6552 22.1424 85.6372 21.9053 85.624 21.7269C85.6036 21.4505 84.0956 21.1899 83.9816 21.4432ZM46.72 22.8339C46.72 22.9584 46.584 22.9957 46.348 22.9357C45.9016 22.8222 45.5316 23.1987 45.6664 23.6296C45.8048 24.0706 46.8784 24.0362 47.0436 23.585C47.1188 23.3799 47.0804 23.1371 46.9424 22.9462C46.82 22.7764 46.72 22.7261 46.72 22.8339ZM65.12 23.1051C64.85 23.3961 64.8084 23.5157 64.972 23.5295C65.0976 23.54 64.984 23.6045 64.72 23.6726C64.3436 23.7695 64.316 23.8007 64.5924 23.8157C64.7864 23.8262 65.1408 23.7443 65.3796 23.6341C65.7256 23.4744 65.828 23.4744 65.8808 23.6341C66.0528 24.1574 67.04 23.628 67.04 23.0123C67.04 22.4991 65.618 22.5676 65.12 23.1051ZM87.8896 22.9649C87.67 23.5445 88.046 23.7447 89.3748 23.7577C90.0708 23.7646 90.4112 23.7439 90.132 23.7119C89.6488 23.6568 89.012 23.1862 89.4204 23.1862C89.5192 23.1862 89.6 23.2591 89.6 23.3483C89.6 23.4375 89.726 23.5092 89.88 23.508C90.1192 23.506 90.1252 23.4825 89.92 23.3483C89.7176 23.2158 89.716 23.1906 89.9104 23.1886C90.076 23.187 90.0532 23.1189 89.8304 22.9482C89.3884 22.609 88.0196 22.6211 87.8896 22.9649ZM107.52 22.9105C107.52 23.0605 107.659 23.2713 107.828 23.3783C108.114 23.5591 108.116 23.5887 107.868 23.78C107.64 23.9559 107.725 23.9871 108.44 23.9916C109.165 23.9961 109.28 23.9539 109.28 23.6843C109.28 23.3232 108.877 22.8619 108.562 22.8619C108.443 22.8619 108.22 22.8129 108.065 22.7529C107.84 22.6653 107.806 22.7054 107.893 22.9555C107.998 23.2599 107.995 23.2599 107.76 22.9527C107.552 22.6791 107.52 22.6734 107.52 22.9105ZM65.44 23.2672C65.3268 23.4055 65.1984 23.4817 65.1544 23.4371C65.1104 23.3925 65.1668 23.2433 65.28 23.1051C65.3932 22.9669 65.5216 22.8907 65.5656 22.9353C65.6096 22.9799 65.5532 23.129 65.44 23.2672ZM66.7808 23.2599C66.6616 23.5745 66.2724 23.6977 66.1396 23.463C66.0784 23.3552 66.084 23.3175 66.1512 23.3791C66.312 23.5254 66.7128 23.1489 66.5984 22.9584C66.55 22.8777 66.5904 22.8619 66.6884 22.9231C66.786 22.9843 66.8276 23.1359 66.7808 23.2599ZM46.24 23.1764C46.24 23.3678 45.928 23.5725 45.8132 23.4565C45.6988 23.3402 45.9008 23.024 46.0896 23.024C46.1724 23.024 46.24 23.0925 46.24 23.1764ZM109.021 23.4367C109.068 23.5607 109.019 23.7127 108.913 23.7743C108.807 23.8363 108.77 23.8307 108.83 23.7626C108.975 23.5996 108.603 23.1935 108.415 23.3094C108.336 23.3584 108.32 23.3175 108.38 23.2182C108.515 22.9973 108.904 23.1298 109.021 23.4367ZM42.9868 25.4022C42.8236 25.5672 42.8644 26.1565 43.0576 26.4289C43.2032 26.634 43.216 26.628 43.14 26.3884C43.0804 26.2003 43.1344 26.1047 43.3 26.1047C43.4376 26.1047 43.5864 25.9636 43.6308 25.7917C43.6828 25.5895 43.8052 25.5088 43.9756 25.5635C44.2032 25.6369 44.2064 25.6243 44 25.4739C43.7312 25.2782 43.1496 25.2368 42.9868 25.4022ZM96.6528 25.4966C96.6452 25.6628 96.756 25.7816 96.92 25.7828C97.1576 25.7848 97.164 25.8083 96.9612 25.9381C96.7672 26.0625 96.7608 26.1298 96.928 26.2992C97.0952 26.4687 97.1616 26.4622 97.2844 26.2656C97.4124 26.0601 97.4356 26.0666 97.4376 26.3073C97.4392 26.4869 97.5636 26.5911 97.7772 26.5911C98.0188 26.5911 98.0868 26.5185 98.0172 26.3345C97.9636 26.1934 97.92 26.0163 97.92 25.9409C97.92 25.7167 97.436 25.294 97.1792 25.294C97.0484 25.294 96.9856 25.3669 97.04 25.4561C97.0944 25.5453 97.0688 25.6182 96.9828 25.6182C96.8968 25.6182 96.7904 25.527 96.746 25.4156C96.6976 25.2944 96.66 25.3272 96.6528 25.4966ZM43.52 25.6993C43.52 25.8331 43.412 25.9425 43.28 25.9425C43.03 25.9425 42.9624 25.7508 43.1468 25.5643C43.3308 25.3775 43.52 25.446 43.52 25.6993ZM97.6 25.6993C97.7632 25.8983 97.752 25.9425 97.5396 25.9425C97.3968 25.9425 97.28 25.8331 97.28 25.6993C97.28 25.5655 97.3072 25.4561 97.3404 25.4561C97.3736 25.4561 97.4904 25.5655 97.6 25.6993ZM57.6736 26.1156C57.6156 26.2104 57.6064 26.3272 57.6532 26.375C57.768 26.4909 58.08 26.2862 58.08 26.0949C58.08 25.8878 57.8036 25.9016 57.6736 26.1156ZM54.3008 26.9559C54.3328 27.1565 54.288 27.4593 54.2008 27.6292C54.07 27.8841 54.0896 27.919 54.3144 27.8318C54.464 27.7735 54.6832 27.726 54.8016 27.726C55.1168 27.726 55.52 27.2648 55.52 26.9036C55.52 26.647 55.4056 26.5911 54.8812 26.5911C54.3076 26.5911 54.248 26.6284 54.3008 26.9559ZM40.6368 27.0005C40.5256 27.1363 40.4808 27.2943 40.5372 27.3515C40.5936 27.4091 40.64 27.3616 40.64 27.2469C40.64 27.0815 40.6984 27.084 40.92 27.2603C41.17 27.4593 41.178 27.4545 40.9932 27.2149C40.8244 26.996 40.8244 26.9316 40.9932 26.8626C41.116 26.8128 41.1268 26.7735 41.0196 26.7662C40.9204 26.7589 40.748 26.8643 40.6368 27.0005ZM55.2608 27.1513C55.1416 27.4658 54.7524 27.589 54.6196 27.3543C54.5584 27.2465 54.564 27.2088 54.6312 27.2704C54.792 27.4168 55.1928 27.0402 55.0784 26.8497C55.03 26.769 55.0704 26.7532 55.1684 26.8144C55.266 26.8756 55.3076 27.0272 55.2608 27.1513ZM113.887 26.8626C114.056 26.9316 114.056 26.996 113.887 27.2149C113.702 27.4545 113.71 27.4593 113.96 27.2603C114.182 27.084 114.24 27.0815 114.24 27.2469C114.24 27.3616 114.286 27.4091 114.343 27.3515C114.477 27.2153 114.094 26.7496 113.86 26.7662C113.753 26.7735 113.764 26.8128 113.887 26.8626ZM99.36 27.1261C99.36 27.3973 99.6844 27.726 99.952 27.726C100.066 27.726 100.16 27.6409 100.16 27.5367C100.16 27.433 100.113 27.3957 100.055 27.4545C99.91 27.6012 99.5024 27.2376 99.6112 27.0592C99.6596 26.9802 99.6228 26.9153 99.5296 26.9153C99.4364 26.9153 99.36 27.0102 99.36 27.1261ZM114.56 28.0775C114.56 28.1812 114.609 28.2169 114.669 28.1561C114.806 28.0171 115.696 28.8659 115.592 29.0369C115.549 29.1062 115.588 29.2088 115.677 29.2647C115.864 29.3815 115.902 28.8156 115.72 28.6312C115.654 28.5643 115.6 28.4244 115.6 28.3207C115.6 28.2165 115.516 28.1314 115.413 28.1314C115.311 28.1314 115.173 28.0767 115.107 28.0098C114.921 27.8217 114.56 27.8663 114.56 28.0775ZM114.56 28.5116C114.56 28.6685 115.091 29.1853 115.252 29.1853C115.312 29.1853 115.36 29.1001 115.36 28.996C115.36 28.8922 115.313 28.8549 115.255 28.9137C115.11 29.0604 114.702 28.6968 114.811 28.5185C114.86 28.4394 114.823 28.3746 114.73 28.3746C114.636 28.3746 114.56 28.4362 114.56 28.5116ZM51.36 29.2217C51.36 29.3016 51.296 29.3267 51.218 29.2777C51.14 29.2286 50.988 29.2967 50.88 29.4285C50.772 29.5602 50.6124 29.6234 50.5248 29.5687C50.4284 29.5079 50.4512 29.4143 50.5828 29.3296C50.752 29.2209 50.738 29.1897 50.52 29.1877C50.2068 29.1849 50.1456 29.4313 50.4172 29.6012C50.5404 29.6786 50.5284 29.7544 50.3772 29.8517C50.204 29.9627 50.2028 29.9915 50.3696 29.9935C50.4848 29.9947 50.5344 30.0689 50.48 30.1581C50.3576 30.3591 50.4336 30.3608 50.9328 30.1686C51.3928 29.9915 51.9304 29.077 51.5744 29.077C51.4564 29.077 51.36 29.1423 51.36 29.2217ZM103.315 29.5322C103.562 30.0345 104.273 30.4325 104.504 30.1986C104.577 30.1249 104.487 30.0531 104.305 30.0393C103.905 30.0089 103.52 29.7078 103.52 29.426C103.52 29.3125 103.42 29.1812 103.298 29.1338C103.116 29.0629 103.119 29.1334 103.315 29.5322ZM83.3932 29.2947C83.2644 29.3474 83.24 29.4496 83.3284 29.5659C83.5588 29.8691 83.694 30.3482 83.518 30.2379C83.4312 30.1836 83.36 30.2181 83.36 30.315C83.36 30.4232 83.6968 30.4795 84.24 30.4613C85.1364 30.4317 85.5004 30.0665 84.8148 29.8849C84.6468 29.8403 84.4736 29.6648 84.4296 29.4945C84.352 29.193 83.8716 29.1006 83.3932 29.2947ZM51.2 29.5039C51.2 29.5898 51.038 29.7463 50.84 29.8517C50.482 30.0422 50.4816 30.0414 50.7848 29.6952C51.1236 29.3089 51.2 29.2736 51.2 29.5039ZM67.9628 29.8204C67.6752 30.0807 67.4944 30.3482 67.5608 30.4155C67.6272 30.4828 67.8428 30.3928 68.0408 30.2157C68.4264 29.8699 68.596 29.8403 68.9364 30.0588C69.0772 30.1492 69.0568 30.0491 68.878 29.7726C68.5412 29.2513 68.5944 29.2485 67.9628 29.8204ZM68.246 30.3105C68.1948 30.394 68.2988 30.4516 68.4764 30.4382C68.6544 30.4244 68.8 30.3559 68.8 30.2858C68.8 30.1066 68.3584 30.1261 68.246 30.3105ZM63.622 30.7256C63.5716 30.8593 63.5996 30.9688 63.6852 30.9688C63.7704 30.9688 63.84 31.1512 63.84 31.3741C63.84 31.7162 63.9148 31.7795 64.32 31.7795C64.7732 31.7795 64.8 31.7434 64.8 31.1309C64.8 30.4333 63.856 30.1086 63.622 30.7256ZM105.902 30.8448C106.066 31.291 106.987 31.863 106.987 31.518C106.987 31.3944 106.922 31.2931 106.844 31.2931C106.765 31.2931 106.74 31.2282 106.789 31.1492C106.9 30.9676 106.464 30.593 106.07 30.5322C105.824 30.4945 105.795 30.5493 105.902 30.8448ZM94.88 32.428C95.056 32.6064 95.2 32.8253 95.2 32.9144C95.2 33.0036 95.398 33.0737 95.64 33.0701L96.08 33.0632L95.526 32.5837C94.8972 32.0389 94.3712 31.9124 94.88 32.428ZM55.7868 33.1848C55.3912 33.5853 55.694 34.34 56.28 34.4146C57.1368 34.5232 57.3212 34.2626 57.1408 33.1982C57.1152 33.0478 55.9336 33.036 55.7868 33.1848ZM96.2496 33.5399C96.2708 33.7758 96.2956 34.0514 96.304 34.1532C96.3232 34.3733 97.3596 34.5241 97.6412 34.3477C97.9008 34.1856 97.9608 33.3956 97.71 33.4446C97.6056 33.4653 97.5336 33.4037 97.5504 33.308C97.5684 33.2075 97.2912 33.1293 96.8964 33.1228C96.2504 33.1126 96.2136 33.1362 96.2496 33.5399ZM119.88 33.184C119.77 33.229 119.68 33.5152 119.68 33.8196C119.68 34.4422 120.648 34.6858 120.863 34.1171C121.03 33.6749 120.97 33.5225 120.66 33.6047C120.43 33.6655 120.379 33.6141 120.439 33.3802C120.517 33.0794 120.312 33.0073 119.88 33.184ZM33.8264 34.325L33.3748 34.9249L33.7916 34.6088C34.0212 34.4349 34.1804 34.263 34.1456 34.2265C34.1112 34.1901 34.1628 34.0624 34.2608 33.9428C34.3588 33.8232 34.4028 33.7251 34.3584 33.7251C34.3144 33.7251 34.0748 33.9951 33.8264 34.325ZM53.72 35.0356L53.12 35.6708H53.76C54.3996 35.6708 54.4896 35.5394 54.3864 34.7567C54.3788 34.6996 54.4688 34.5913 54.5864 34.516C54.7572 34.4061 54.752 34.381 54.56 34.3895C54.428 34.3956 54.05 34.6866 53.72 35.0356ZM121.028 34.6485C121.052 34.8094 121.124 34.929 121.188 34.914C121.432 34.8585 121.441 34.7385 121.217 34.55C121.029 34.3919 120.994 34.4102 121.028 34.6485ZM32.8736 34.7089C32.8156 34.8037 32.8064 34.9205 32.8532 34.9683C32.968 35.0842 33.28 34.8795 33.28 34.6882C33.28 34.4811 33.0036 34.4949 32.8736 34.7089ZM53.3352 34.7859C53.2832 34.9237 53.2836 35.0798 53.3364 35.1333C53.4504 35.2488 53.92 34.8824 53.92 34.6781C53.92 34.4333 53.4348 34.5228 53.3352 34.7859ZM121.68 35.3465C121.626 35.4357 121.603 35.5143 121.63 35.5212C122.157 35.6533 122.247 35.6315 122.069 35.4146C121.845 35.141 121.809 35.1345 121.68 35.3465ZM112 35.9217C112 36.0214 112.105 36.1033 112.233 36.1033C112.361 36.1033 112.497 36.0214 112.535 35.9217C112.573 35.822 112.468 35.7401 112.302 35.7401C112.136 35.7401 112 35.822 112 35.9217ZM112.761 35.9679C112.698 36.2103 112.748 36.2606 112.987 36.1969C113.155 36.1523 113.268 36.0384 113.236 35.944C113.135 35.6355 112.843 35.6501 112.761 35.9679ZM113.04 36.4434C112.796 36.625 112.774 36.9679 113.006 36.9679C113.119 36.9679 113.212 36.822 113.212 36.6436C113.212 36.4653 113.209 36.3205 113.206 36.3218C113.202 36.323 113.128 36.3777 113.04 36.4434ZM50.6676 37.1057C50.3928 37.6659 50.5804 38.2662 51.0376 38.2893C51.3028 38.3027 51.61 38.3209 51.72 38.3298C51.8492 38.3404 51.92 38.117 51.92 37.6975C51.92 37.0891 50.9096 36.6116 50.6676 37.1057ZM69.6148 37.3432C69.5188 37.5941 69.44 37.9042 69.44 38.0323C69.44 38.8394 68.2508 39.1519 67.6568 38.5005C67.282 38.0899 66.236 37.4543 65.9348 37.4543C65.848 37.4543 65.62 37.8908 65.428 38.4247C65.236 38.9581 64.9972 39.4636 64.8976 39.5475C64.7184 39.6979 62.7472 38.8438 62.3536 38.445C62.0496 38.1369 61.96 38.2399 61.8432 39.0291C61.5608 40.9366 60.9928 41.5134 60.1248 40.7728C59.2092 39.9922 57.8392 40.4036 58.3064 41.3188C58.956 42.592 57.1388 43.635 56.1368 42.5645C55.508 41.8928 55.0964 42.5507 55.1724 44.106C55.2356 45.3982 54.7784 45.8441 53.7616 45.4809C52.5776 45.0573 52.078 45.5835 52.5584 46.7484C52.8256 47.3962 52.7672 47.673 52.2004 48.4497C51.8512 48.9276 51.7788 48.9612 51.544 48.7541C50.218 47.5847 49.5956 48.9499 50.6884 50.6304C51.194 51.4075 50.9224 51.8116 49.7816 51.9794C48.6324 52.1488 48.0704 52.4865 48.3676 52.8286C49.682 54.3413 49.6828 55.3806 48.37 55.951C47.538 56.3125 47.538 56.3109 48.24 57.6514C48.998 59.0997 48.896 59.4503 47.56 59.9849C47.274 60.0993 47.04 60.2606 47.04 60.3433C47.04 60.6834 47.588 61.5293 48.1748 62.0948C48.9412 62.8333 48.9468 62.9744 48.24 63.6501C47.2852 64.5629 47.41 65.3594 48.6 65.9439C49.7036 66.4859 49.8124 66.8069 49.1328 67.5175C48.3164 68.3711 48.6428 69.4473 49.7772 69.6415C50.9956 69.8502 51.3048 70.5377 50.5644 71.3925C50.1516 71.8688 50.1076 72.0083 50.2316 72.4464C50.4628 73.2632 50.5404 73.311 51.0356 72.9402C52.1752 72.0865 53.2128 73.9535 52.4 75.3945C52.0864 75.9502 52.0944 75.9762 52.6484 76.2088C53.0352 76.371 53.2708 76.373 53.7836 76.2174C54.8188 75.9028 55.4484 76.6264 55.1824 77.825C54.9468 78.8886 55.3744 79.2947 56.3296 78.9141C56.9588 78.664 57.0288 78.666 57.5884 78.9555C58.666 79.5128 58.7036 79.6401 58.1712 80.925C58.0168 81.2979 59.3044 81.4739 59.76 81.1423C59.936 81.0142 60.2368 80.7941 60.428 80.6535C61.0064 80.2278 61.5428 80.7037 61.6848 81.7681C61.882 83.2493 62.6384 83.3826 64.124 82.1982C64.7384 81.7082 65.4324 82.4317 65.4392 83.5699C65.4444 84.426 66.5316 84.3117 67.624 83.3397C68.4732 82.5841 68.8912 82.7195 69.5064 83.9501C69.8156 84.5691 69.9432 84.5334 71.1212 83.5002C71.9536 82.7706 72.5044 82.6789 72.9216 83.2014C73.5852 84.0328 73.7676 84.1499 74.3944 84.1499C75.094 84.1499 75.2476 83.9777 75.422 82.9967C75.6172 81.8995 76.06 81.715 76.7828 82.4305C77.5236 83.1637 78.6348 83.0802 78.7984 82.2797C78.8432 82.06 78.9208 81.6838 78.9708 81.4443C79.1676 80.4966 79.9744 80.3369 80.7444 81.0932C81.4684 81.8042 82.048 81.4889 81.9488 80.4374C81.8268 79.1395 82.7908 78.5546 84.432 78.9315C85.4036 79.1545 85.7848 78.7422 85.388 77.8987C84.8464 76.7475 86.0212 75.4172 86.9504 76.1294C87.796 76.7775 88.4984 76.2157 88.1064 75.2048C87.4596 73.5356 88.864 71.9154 89.9788 73.0451C90.5944 73.669 90.7036 72.1173 90.0936 71.4128C89.528 70.7602 89.5136 70.6836 89.8396 70.0444C90.0516 69.6293 90.1772 69.5689 90.9176 69.5255L91.756 69.4765L91.8596 68.8279C91.9528 68.2471 91.9068 68.1157 91.4216 67.571C90.6372 66.6897 90.8576 66.1555 92.16 65.7802C93.1876 65.4838 93.3124 64.4405 92.4104 63.687C91.6824 63.0789 91.6916 62.7413 92.454 62.0713C93.6916 60.9841 93.65 60.4466 92.2516 59.4568C91.6364 59.0214 91.744 58.5914 92.8688 56.9927C93.2808 56.4078 93.0552 56.0584 92.1664 55.9048C90.9048 55.6863 90.752 55.2323 91.516 53.9741C92.4372 52.4569 92.288 52.0467 90.8144 52.0467C89.6588 52.0467 89.314 51.2368 90.0896 50.3442C91.0952 49.1874 90.7388 47.8716 89.5772 48.4537L88.8912 48.7979L88.432 48.3548C87.688 47.6382 87.6376 47.4371 88.0156 46.7022C88.338 46.0756 88.3412 46.0233 88.0836 45.6248C87.804 45.1923 87.7256 45.1895 86.774 45.5774C86.1572 45.8291 85.0008 45.1161 85.2084 44.6123C85.728 43.3529 85.3924 42.3127 84.5908 42.6982C83.052 43.438 81.7388 42.7797 81.9952 41.3963C82.2044 40.2666 81.3896 39.8823 80.5448 40.712C79.7864 41.4571 79.5752 41.2836 78.558 39.0769C78.2752 38.4632 77.4624 38.5013 76.7968 39.16C76.094 39.8551 75.6756 39.7376 75.4436 38.7802C75.1204 37.4474 73.8828 37.1122 73.2564 38.188C72.5764 39.3558 71.9108 39.2605 70.6148 37.8102L69.7896 36.8868L69.6148 37.3432ZM40.8168 37.5147C40.4168 38.0031 40.906 38.4587 41.3484 38.01C41.6672 37.6874 41.6668 37.5151 41.3468 37.3907C41.014 37.2613 41.0272 37.2581 40.8168 37.5147ZM30.72 38.3363C30.72 38.5516 31.1728 38.7323 31.2436 38.5455C31.292 38.4182 31.2024 38.3221 31.0224 38.3084C30.856 38.2954 30.72 38.3079 30.72 38.3363ZM123.52 38.9176C123.52 39.4741 123.569 39.5637 123.88 39.5746C124.078 39.5811 124.366 39.6115 124.52 39.6411C124.757 39.6873 124.793 39.5925 124.749 39.0331C124.667 38.0056 123.52 37.8977 123.52 38.9176ZM30.1228 39.22C30.1364 39.4024 30.2312 39.4932 30.3568 39.4441C30.518 39.3817 30.5244 39.3087 30.3844 39.1377C30.1408 38.8402 30.0956 38.8548 30.1228 39.22ZM28.8532 41.1044C28.8532 41.3582 29.228 41.5616 29.3444 41.3711C29.4384 41.2171 29.2548 40.9504 29.0268 40.9086C28.9312 40.8912 28.8532 40.9796 28.8532 41.1044ZM125.6 41.1024C125.6 41.2362 125.708 41.3456 125.84 41.3456C125.972 41.3456 126.08 41.2362 126.08 41.1024C126.08 40.9686 125.972 40.8592 125.84 40.8592C125.708 40.8592 125.6 40.9686 125.6 41.1024ZM106.88 44.209C106.88 44.6569 106.953 44.9175 107.08 44.9256C107.19 44.9329 107.475 44.9536 107.712 44.9714C108.133 45.003 108.304 44.0314 107.942 43.6646C107.494 43.2114 106.88 43.5264 106.88 44.209ZM67.68 45.823C68.076 45.9446 68.768 46.0448 69.2176 46.046C69.824 46.0472 70.1876 46.1522 70.6248 46.4529C70.9488 46.6759 71.2776 46.8583 71.3548 46.8583C71.664 46.8583 72.48 47.7196 72.4824 48.0484C72.4856 48.5028 72.5504 48.585 73.624 49.5027C74.1216 49.9275 74.5748 50.463 74.6316 50.6924C74.6884 50.9223 74.9836 51.3475 75.2876 51.6381C75.5912 51.9283 75.8404 52.3033 75.8404 52.4711C75.8408 52.6389 75.984 53.0138 76.1588 53.3045C76.67 54.1537 76.722 54.9607 76.338 56.0847C76.0916 56.8054 76.0044 57.4374 76.016 58.4114C76.0304 59.6015 76.048 59.6769 76.178 59.0997C76.3312 58.4175 76.8096 57.8836 77.2676 57.8836C77.4172 57.8836 77.6956 57.6704 77.8856 57.4098C78.6024 56.4272 81.0308 56.4597 82.0668 57.4653C82.2992 57.6911 82.7128 57.9546 82.9864 58.051C85.0952 58.7961 84.8824 62.7372 82.6756 63.811C82.216 64.0343 81.48 64.4324 81.04 64.695C80.6 64.9573 80.132 65.175 80 65.1786C79.3352 65.196 79.3544 65.4316 80.1524 67.0294C81.3676 69.4623 81.468 71.7091 80.4076 72.7225C80.0928 73.0233 79.8448 73.4521 79.7788 73.8104C79.4532 75.5692 75.6216 76.5761 72.4984 75.7236C71.768 75.5246 70.4964 74.1002 70.3192 73.2831C70.248 72.9543 69.9596 72.5028 69.6192 72.1862L69.04 71.6487V70.0492C69.04 68.6139 69.0796 68.3954 69.4248 67.922C69.6368 67.6322 69.8956 67.0967 70 66.7331C70.148 66.2183 70.3204 66.0084 70.7752 65.7866C71.3524 65.5053 71.4964 65.2844 71.2168 65.1093C70.9656 64.952 69.3752 65.3343 68.9424 65.6561C68.588 65.9196 68.4308 65.9411 67.9024 65.7984C66.8164 65.5053 65.8928 65.4616 65.26 65.6727C64.4448 65.9455 62.0904 65.2366 61.4288 64.5191C61.198 64.2686 60.8208 64.0157 60.5908 63.9573C59.9908 63.8045 59.6724 63.3521 58.7148 61.291C58.446 60.7125 58.1228 60.1811 57.9964 60.1094C57.8704 60.038 57.4676 59.4596 57.1016 58.8244L56.436 57.6696L56.6312 56.3405C56.782 55.3146 56.7832 54.8654 56.638 54.3742C56.4164 53.6243 57.116 51.4606 57.9152 50.4229C58.1568 50.1095 58.4032 49.6973 58.4628 49.5072C58.6152 49.0212 59.3216 48.3431 60.078 47.9576C60.4312 47.7772 61.0292 47.3759 61.4068 47.0654C61.7844 46.7549 62.4552 46.4043 62.8968 46.2863C63.3384 46.1684 63.864 45.9629 64.0644 45.8295C64.7532 45.3723 66.2032 45.3694 67.68 45.823ZM34.8776 45.8449C34.8756 46.0873 34.8524 46.0934 34.72 45.8855C34.598 45.6945 34.5644 45.6901 34.5624 45.8648C34.5608 46.0326 34.5072 46.0427 34.3452 45.9065C34.052 45.6601 33.92 45.838 33.92 46.4801C33.92 47.1141 34.0624 47.1562 34.512 46.6556C34.9672 46.1493 35.254 45.5612 35.0456 45.5612C34.9544 45.5612 34.8788 45.6889 34.8776 45.8449ZM120.295 46.2288C120.373 46.4412 120.562 46.6402 120.716 46.671C121.09 46.7456 120.963 46.3865 120.508 46.0804C120.17 45.8526 120.16 45.8587 120.295 46.2288ZM42.24 46.3058C42.24 46.4481 42.096 46.6025 41.92 46.6491C41.718 46.7026 41.6 46.8704 41.6 47.1043C41.6 47.3127 41.35 47.7277 41.028 48.054C40.5116 48.5773 40.3852 49.1477 40.8512 48.8514C40.9548 48.7849 41.166 48.752 41.32 48.7776C41.4992 48.8076 41.658 48.6706 41.76 48.3982C41.9668 47.8473 41.9616 47.7877 41.72 47.9288C41.61 47.9928 41.6944 47.8514 41.908 47.6142C42.3188 47.157 42.58 47.0107 42.2368 47.4298C42.1256 47.5656 42.0904 47.7298 42.1592 47.7946C42.2276 47.8591 42.3148 47.825 42.3524 47.7184C42.39 47.6122 42.52 47.5636 42.6412 47.611C42.8112 47.6771 42.8604 47.508 42.8556 46.8721C42.8504 46.1716 42.8032 46.0476 42.5448 46.0476C42.3724 46.0476 42.24 46.1599 42.24 46.3058ZM119.84 46.4412C119.84 46.7399 120.277 47.1826 120.572 47.1826C120.888 47.1826 120.861 47.097 120.393 46.6224C119.924 46.1481 119.84 46.1201 119.84 46.4412ZM33.6468 47.5052C33.6012 47.6823 33.5008 47.7881 33.4236 47.7399C33.3468 47.6917 33.3312 47.778 33.3896 47.932C33.4716 48.1489 33.4336 48.1874 33.2196 48.1043C33.0552 48.0403 32.9828 48.0617 33.0412 48.1574C33.0948 48.2454 33.0088 48.3232 32.8496 48.3305C32.6904 48.3374 32.646 48.3787 32.7512 48.4221C33.0748 48.5555 33.5576 48.187 33.7348 47.6722C33.8276 47.4031 33.8644 47.1826 33.8168 47.1826C33.7692 47.1826 33.6924 47.3277 33.6468 47.5052ZM108.16 48.1011C108.16 48.6544 108.22 48.8084 108.44 48.8246C108.594 48.836 108.877 48.8623 109.068 48.883C109.385 48.917 109.414 48.8522 109.387 48.1732C109.358 47.4258 109.357 47.4258 108.759 47.412L108.16 47.3982V48.1011ZM129.12 47.5028C129.12 47.6021 129.246 47.6617 129.4 47.6357C129.591 47.6029 129.665 47.6783 129.633 47.8716C129.607 48.0277 129.666 48.1554 129.764 48.1554C129.862 48.1554 129.919 47.9912 129.891 47.7906C129.838 47.4156 129.12 47.1473 129.12 47.5028ZM32.3676 49.9932C32.424 50.1416 32.4004 50.2632 32.3148 50.2632C32.2296 50.2632 32.16 50.191 32.16 50.1026C32.16 50.0147 31.9944 49.9563 31.7924 49.9734C31.426 50.0042 31.166 50.7496 31.5216 50.7496C31.6088 50.7496 31.68 50.827 31.68 50.9214C31.68 51.0159 31.608 51.0479 31.52 50.9928C31.432 50.9377 31.36 50.9697 31.36 51.0641C31.36 51.1586 31.504 51.236 31.68 51.236C31.856 51.236 32 51.1655 32 51.0791C32 50.9924 32.1204 50.9689 32.2676 51.026C32.4708 51.1051 32.5108 51.0645 32.4328 50.8586C32.3764 50.7095 32.3996 50.5874 32.4852 50.5874C32.7044 50.5874 32.678 49.9819 32.4528 49.8408C32.3268 49.7622 32.2992 49.812 32.3676 49.9932ZM122.301 50.1744C122.168 50.5258 122.383 50.8035 122.629 50.5968C122.896 50.3718 123.084 50.581 122.86 50.8542C122.728 51.0167 122.746 51.0941 122.934 51.1675C123.328 51.3207 123.52 51.101 123.52 50.4966C123.52 49.8862 122.511 49.6191 122.301 50.1744ZM23.68 50.4156C23.68 50.793 23.9396 50.9972 24.0536 50.7099C24.0984 50.598 24.1404 50.6827 24.1472 50.8983C24.1544 51.1136 24.21 51.2392 24.2712 51.1772C24.5036 50.9417 24.438 50.596 24.1428 50.5007C23.9736 50.4464 23.8768 50.3341 23.9272 50.2514C23.9776 50.1687 23.9428 50.101 23.8496 50.101C23.7564 50.101 23.68 50.2425 23.68 50.4156ZM129.92 50.7812C129.92 51.782 131.133 51.7455 131.151 50.7443L131.163 50.0901L130.542 50.1274C129.935 50.1635 129.92 50.1793 129.92 50.7812ZM68.16 52.5331C68.16 52.6223 68.3084 52.6952 68.4896 52.6952C68.6708 52.6952 68.7744 52.6223 68.72 52.5331C68.6656 52.4439 68.5172 52.371 68.3904 52.371C68.2636 52.371 68.16 52.4439 68.16 52.5331ZM23.1304 52.7127C23.2048 52.8347 23.126 52.8553 22.8844 52.7775C22.5716 52.677 22.542 52.707 22.6412 53.024C22.714 53.2554 22.6952 53.3474 22.5892 53.281C22.4816 53.2137 22.426 53.5473 22.43 54.2335C22.436 55.3259 22.4556 55.3527 23.2 55.2935C23.7632 55.2485 23.8448 55.12 23.7368 54.4459C23.6484 53.8955 23.6136 53.8638 23.2504 54.0037C22.7444 54.1987 22.7708 54.2064 22.6736 53.8302C22.6276 53.6518 22.6552 53.5059 22.7348 53.5059C22.8148 53.5059 22.88 53.3965 22.88 53.2627C22.88 53.129 22.988 53.0195 23.12 53.0195C23.252 53.0195 23.36 52.9421 23.36 52.8476C23.36 52.7532 23.432 52.7212 23.52 52.7763C23.608 52.8314 23.68 52.7994 23.68 52.705C23.68 52.6105 23.5316 52.5331 23.3504 52.5331C23.1504 52.5331 23.064 52.6036 23.1304 52.7127ZM109.76 52.6069C109.76 52.7029 110.552 53.5059 110.647 53.5059C110.687 53.5059 110.72 53.392 110.72 53.253C110.72 53.114 110.656 53.0402 110.578 53.0892C110.402 53.1995 110.043 52.7864 110.188 52.6397C110.246 52.5809 110.173 52.5331 110.027 52.5331C109.88 52.5331 109.76 52.5663 109.76 52.6069ZM123.52 52.7763C123.52 52.9101 123.595 53.0195 123.687 53.0195C123.779 53.0195 123.833 53.1472 123.807 53.3032C123.775 53.4966 123.849 53.572 124.04 53.5392C124.194 53.5132 124.32 53.5679 124.32 53.6608C124.32 53.754 124.428 53.8302 124.56 53.8302C124.692 53.8302 124.8 53.7528 124.8 53.6583C124.8 53.5639 124.737 53.5266 124.659 53.5748C124.582 53.6235 124.331 53.4731 124.102 53.2404C123.872 53.0082 123.724 52.754 123.772 52.6758C123.82 52.5971 123.783 52.5331 123.69 52.5331C123.596 52.5331 123.52 52.6425 123.52 52.7763ZM131.807 52.8047C131.976 52.8736 131.976 52.938 131.807 53.1569C131.622 53.3965 131.63 53.4013 131.88 53.2023C132.102 53.026 132.16 53.0236 132.16 53.1889C132.16 53.3037 132.206 53.3511 132.263 53.2935C132.397 53.1573 132.014 52.6916 131.78 52.7082C131.673 52.7155 131.684 52.7548 131.807 52.8047ZM38.4112 53.2506C38.2104 53.467 38.0944 53.7224 38.1528 53.818C38.2112 53.9141 38.1468 53.9923 38.0096 53.9923C37.8184 53.9923 37.76 54.1735 37.76 54.7669V55.5412L38.4012 55.4791C39.2204 55.4001 39.2528 55.3324 39.1192 53.9826C38.9956 52.7382 38.94 52.6802 38.4112 53.2506ZM30.7168 53.2668C30.6056 53.4026 30.5588 53.559 30.6132 53.6142C30.7296 53.7317 31.2 53.3693 31.2 53.1618C31.2 52.9384 30.9392 52.9952 30.7168 53.2668ZM65.5944 53.6932C65.4884 53.9024 65.184 54.3065 64.9184 54.591C63.9328 55.6465 64.8328 57.2351 66.4164 57.2351C68.6336 57.2351 68.5944 53.8464 66.3724 53.424C65.8632 53.3272 65.7628 53.362 65.5944 53.6932ZM69.5748 54.3981C69.4856 55.5375 69.6184 57.7215 69.7768 57.7215C69.8556 57.7215 69.92 56.8095 69.92 55.6948C69.92 53.7443 69.6932 52.8914 69.5748 54.3981ZM131.11 54.3965C130.95 55.2603 131.098 55.4795 131.799 55.4208C132.4 55.3705 132.4 55.3697 132.418 54.6003L132.436 53.8302H131.825C131.254 53.8302 131.208 53.8671 131.11 54.3965ZM29.08 56.375C28.5092 56.5241 28.8236 57.7252 29.432 57.7191C29.5908 57.7174 29.6168 57.6737 29.5044 57.5975C29.4076 57.5318 29.3296 57.3628 29.3308 57.2217C29.3336 56.9287 29.7756 56.8707 29.9688 57.1382C30.0448 57.2436 30.0736 57.184 30.0392 56.9919C30.0072 56.8135 29.8952 56.6858 29.7904 56.7081C29.6856 56.7304 29.618 56.6664 29.64 56.5663C29.6876 56.3494 29.4668 56.274 29.08 56.375ZM125.084 56.6267C125.124 56.7831 125.257 56.9108 125.379 56.9108C125.5 56.9108 125.6 57.0203 125.6 57.154C125.6 57.2878 125.708 57.3972 125.84 57.3972C126.007 57.3972 126.08 57.227 126.08 56.8391C126.08 56.3085 126.054 56.2825 125.545 56.3117C125.122 56.336 125.026 56.4017 125.084 56.6267ZM21.76 56.5813C21.76 56.668 21.6396 56.6915 21.4924 56.6344C21.2892 56.5553 21.2492 56.5959 21.3272 56.8018C21.3836 56.9509 21.3604 57.073 21.2748 57.073C21.1896 57.073 21.12 57.2468 21.12 57.4592C21.12 57.8565 21.8248 58.171 22.0148 57.8593C22.0628 57.7807 22.1692 57.7584 22.2512 57.8095C22.3348 57.8618 22.4 57.5784 22.4 57.1637C22.4 56.5326 22.3532 56.4244 22.08 56.4244C21.904 56.4244 21.76 56.4949 21.76 56.5813ZM132.599 56.8703C132.335 57.4057 132.977 58.2059 133.282 57.7215C133.491 57.3891 133.479 57.2983 133.188 57.0036C132.916 56.7276 132.694 56.6773 132.599 56.8703ZM133.503 57.5752C133.494 57.8342 133.548 58.0458 133.623 58.0458C133.792 58.0458 133.806 57.2829 133.64 57.1796C133.574 57.1386 133.512 57.3166 133.503 57.5752ZM63.1112 57.5736C62.9464 57.8439 63.3172 58.154 63.538 57.9303C63.7228 57.743 63.6072 57.3972 63.36 57.3972C63.2824 57.3972 63.1704 57.4767 63.1112 57.5736ZM64.3888 58.8747C64.2352 59.1264 64.5856 59.3084 65.0504 59.2184C65.4956 59.1321 65.5584 58.9371 65.1868 58.7928C64.8044 58.6441 64.5112 58.6741 64.3888 58.8747ZM67.68 58.8378C67.328 58.9388 67.3152 58.9663 67.5732 59.0664C68.058 59.2553 68.6736 59.2022 68.6 58.9781C68.5192 58.7316 68.2128 58.685 67.68 58.8378ZM28.12 58.9744C27.5564 59.0344 27.52 59.0717 27.52 59.5909C27.52 60.0397 27.57 60.124 27.7864 60.0397C27.9728 59.9671 28.0156 59.9967 27.9292 60.1386C27.8396 60.2857 27.9304 60.3262 28.2628 60.2877C28.6316 60.2448 28.73 60.1451 28.7724 59.7713C28.806 59.4718 28.7636 59.3465 28.6524 59.4162C28.4188 59.5626 28.4332 59.293 28.672 59.051C28.7776 58.944 28.8316 58.8686 28.792 58.8836C28.7524 58.8986 28.45 58.9396 28.12 58.9744ZM126.518 59.1155C126.465 59.169 126.46 59.3141 126.508 59.4385C126.555 59.5626 126.487 59.7057 126.357 59.7563C126.124 59.8467 126.013 60.64 126.233 60.64C126.295 60.64 126.34 60.8041 126.333 61.0048C126.323 61.2825 126.406 61.3664 126.68 61.3566C126.878 61.3497 127.04 61.4045 127.04 61.4782C127.04 61.5524 127.112 61.6128 127.2 61.6128C127.292 61.6128 127.36 61.1199 127.36 60.4588C127.36 59.3704 127.341 59.31 127.027 59.3931C126.784 59.4576 126.718 59.4191 126.782 59.2501C126.87 59.019 126.699 58.9323 126.518 59.1155ZM28.544 60.0178C28.4892 60.1074 28.36 60.0924 28.2276 59.9809C28.1044 59.8771 28.0452 59.7243 28.096 59.6408C28.1508 59.5512 28.28 59.5662 28.4124 59.6777C28.5356 59.7815 28.5948 59.9343 28.544 60.0178ZM79.6032 59.9878C79.2728 60.3579 79.3504 61.3485 79.7412 61.7441C80.2408 62.2508 81.4376 61.3408 81.4396 60.4527C81.44 60.2476 80.3144 59.6672 79.9164 59.6672C79.9016 59.6672 79.7608 59.8115 79.6032 59.9878ZM36.7232 60.5788C36.5096 60.7952 36.4696 61.1702 36.4972 62.6951C36.5156 63.7145 36.5808 64.466 36.6424 64.3655C36.7036 64.2646 36.8544 64.1965 36.9772 64.2139C37.854 64.3383 37.9912 63.9549 37.8332 61.8191C37.7136 60.2042 37.4184 59.8743 36.7232 60.5788ZM112.01 62.2614C111.988 64.1369 112 64.207 112.323 64.207C112.508 64.207 112.618 64.1409 112.569 64.0599C112.52 63.9792 112.635 63.9541 112.825 64.0043C113.116 64.0818 113.156 64.0412 113.08 63.7461C113.03 63.5536 113.055 63.4369 113.135 63.4867C113.217 63.5382 113.28 63.0376 113.28 62.3368C113.28 61.2525 113.242 61.0859 112.975 61.0153C112.807 60.9707 112.634 60.7952 112.59 60.625C112.318 59.5715 112.033 60.3765 112.01 62.2614ZM75.96 60.6757C75.9016 60.8293 75.6528 61.0044 75.4068 61.0656C75.1592 61.1268 74.4604 61.6894 73.84 62.327C73.224 62.9598 72.522 63.6067 72.28 63.7648C71.4312 64.3197 71.698 64.5657 73 64.4287C73.638 64.3619 74.97 64.3039 75.96 64.3006C77.7744 64.2942 78.196 64.1685 77.242 63.918C76.7452 63.7875 76.7156 63.7336 76.508 62.5759C76.156 60.6124 76.082 60.3558 75.96 60.6757ZM20.0136 63.1365C19.7688 63.4356 19.8148 65.541 20.0632 65.3789C20.1604 65.3152 20.42 65.2601 20.64 65.2569C21.0868 65.2496 21.2516 64.6792 21.1432 63.5179C21.0812 62.8564 20.4248 62.6347 20.0136 63.1365ZM133.76 64.0793C133.76 65.1636 133.766 65.1798 134.187 65.1798C134.421 65.1798 134.569 65.2248 134.514 65.2804C134.416 65.3793 134.772 65.8284 134.948 65.8284C134.999 65.8284 135.04 65.6825 135.04 65.5041C135.04 65.3258 134.95 65.1786 134.84 65.1774C134.716 65.1758 134.701 65.1296 134.8 65.0558C135.021 64.8916 135.06 63.3732 134.85 63.1166C134.308 62.4539 133.76 62.9375 133.76 64.0793ZM35.552 64.5637C35.3144 64.8045 35.3008 65.1798 35.5296 65.1798C35.6228 65.1798 35.6476 65.0955 35.5848 64.9926C35.5156 64.8795 35.5408 64.8495 35.6484 64.9168C35.88 65.0619 35.7104 65.5041 35.4228 65.5041C35.282 65.5041 35.2 65.6829 35.2 65.9905C35.2 66.2581 35.2732 66.4769 35.3632 66.4769C35.4588 66.4769 35.484 66.2933 35.424 66.0311C35.3252 65.5986 35.3296 65.5949 35.5812 65.9095C35.8256 66.2147 35.8344 66.2155 35.7332 65.9232C35.6632 65.721 35.6856 65.6508 35.7984 65.7214C36.134 65.9313 36.48 65.6391 36.48 65.145C36.48 64.7842 36.4196 64.6821 36.2452 64.7502C36.116 64.8004 35.9608 64.7603 35.9004 64.6614C35.834 64.5524 35.8636 64.5268 35.9752 64.597C36.0768 64.6606 36.16 64.6355 36.16 64.541C36.16 64.3092 35.7896 64.3229 35.552 64.5637ZM110.636 65.3481C110.303 65.8953 110.737 66.7684 111.331 66.7441C111.918 66.7201 111.92 66.7181 111.955 65.95L111.99 65.1798H111.364C111.02 65.1798 110.693 65.2556 110.636 65.3481ZM26.1972 66.3744C26.078 67.1421 26.2396 67.971 26.4892 67.8738C26.6048 67.8292 26.7344 67.8794 26.7772 67.9856C26.826 68.108 26.8604 68.0898 26.87 67.9362C26.8824 67.7347 26.9088 67.7311 27.0244 67.9163C27.3204 68.3898 27.5392 67.9046 27.494 66.8774L27.4484 65.8499L26.862 65.858C26.3308 65.8653 26.2684 65.9139 26.1972 66.3744ZM127.382 66.8928C127.362 67.2884 127.402 67.62 127.473 67.6297C128.644 67.7931 128.83 67.6245 128.672 66.5365C128.558 65.7421 127.425 66.055 127.382 66.8928ZM74.3244 68.8466C73.8548 69.3225 74.0476 71.2134 74.5852 71.4043C75.6448 71.7805 76.2312 71.1003 76.0184 69.7424C75.8396 68.6022 75.0024 68.1595 74.3244 68.8466ZM27.0896 72.6382C27.0868 75.7168 27.1112 76.1035 27.2448 75.1152C27.3488 74.3483 27.3496 73.0897 27.248 71.4671L27.0928 68.9901L27.0896 72.6382ZM112.515 69.7298C112.666 69.819 112.862 70.0176 112.95 70.1708C113.038 70.3241 113.112 70.3634 113.115 70.2584C113.122 70.0111 112.672 69.5559 112.428 69.5624C112.325 69.5653 112.364 69.6406 112.515 69.7298ZM26.7868 73.2867C26.7868 75.0257 26.8104 75.737 26.8392 74.8676C26.868 73.9981 26.868 72.5753 26.8392 71.7059C26.8104 70.8364 26.7868 71.5478 26.7868 73.2867ZM26.3004 73.2867C26.3004 74.3122 26.3264 74.7318 26.3584 74.219C26.39 73.7063 26.39 72.8672 26.3584 72.3544C26.3264 71.8417 26.3004 72.2612 26.3004 73.2867ZM32.7228 72.1473C32.5264 72.4687 32.696 73.5883 32.9508 73.6519C33.6504 73.8266 33.9984 73.5417 34.0488 72.7533L34.0976 71.9896H33.4584C33.1064 71.9896 32.7756 72.0606 32.7228 72.1473ZM113.482 72.7683C113.512 73.1753 114.08 73.1959 114.08 72.7902C114.08 72.5875 113.97 72.476 113.77 72.476C113.57 72.476 113.468 72.5798 113.482 72.7683ZM128.421 72.8408C128.282 73.3641 128.318 74.7703 128.48 75.1513C128.571 75.3649 128.621 74.9644 128.629 73.9758C128.64 72.4485 128.593 72.1903 128.421 72.8408ZM127.888 73.9353C127.888 74.4257 127.918 74.6264 127.955 74.3811C127.991 74.1359 127.991 73.7346 127.955 73.4894C127.918 73.2442 127.888 73.4448 127.888 73.9353ZM31.712 73.6434C31.4412 73.9178 31.4736 74.2068 31.7884 74.3293C32.1352 74.4642 32.522 74.0723 32.3888 73.7208C32.268 73.4018 31.9828 73.369 31.712 73.6434ZM32.2136 73.7326C32.2536 73.7995 32.1896 73.9446 32.0716 74.0553C31.8368 74.2754 31.59 74.052 31.76 73.7731C31.8768 73.5818 32.1112 73.5607 32.2136 73.7326ZM30.432 74.9405C30.1944 75.1813 30.1808 75.5566 30.4096 75.5566C30.5028 75.5566 30.5276 75.4723 30.4648 75.3694C30.3976 75.2595 30.4204 75.2259 30.5204 75.2887C30.6136 75.3471 30.6532 75.5368 30.6084 75.7107C30.5416 75.9693 30.6028 76.0204 30.9464 75.9936C31.1772 75.9754 31.3648 75.9065 31.3632 75.84C31.3612 75.7731 31.36 75.5652 31.36 75.3771C31.36 75.1436 31.286 75.0646 31.1252 75.127C30.996 75.1772 30.8408 75.1371 30.7804 75.0382C30.714 74.9292 30.7436 74.9036 30.8552 74.9738C30.9568 75.0374 31.04 75.0123 31.04 74.9178C31.04 74.686 30.6696 74.6998 30.432 74.9405ZM40.72 75.7188C40.2424 75.842 40.2428 75.8428 40.84 75.8619C41.17 75.8724 41.44 75.808 41.44 75.7188C41.44 75.54 41.4128 75.54 40.72 75.7188ZM38.9772 77.1103C38.6448 77.9883 39.0696 78.7532 39.6328 78.2907C39.7804 78.1691 39.8512 78.1545 39.79 78.2583C39.7208 78.3754 39.7796 78.4318 39.946 78.407C40.0932 78.3851 40.2312 78.2453 40.2528 78.0961C40.2764 77.9312 40.2192 77.8663 40.106 77.9308C39.9872 77.998 39.9924 77.9571 40.12 77.8181C40.4324 77.4768 40.3556 77.0633 39.96 76.9559C39.366 76.7946 39.0796 76.8396 38.9772 77.1103ZM28.2724 77.5064C28.2236 77.6957 28.0344 77.8902 27.852 77.9384C27.6692 77.9871 27.52 78.1318 27.52 78.2603C27.52 78.3892 27.592 78.4492 27.68 78.3941C27.768 78.3389 27.84 78.3584 27.84 78.4374C27.84 78.8067 28.8004 78.4297 28.824 78.0515C28.8372 77.8387 28.8552 77.574 28.864 77.4638C28.8928 77.1055 28.3664 77.1432 28.2724 77.5064ZM117.52 77.3402C117.466 77.4293 117.569 77.5023 117.75 77.5023C117.976 77.5023 118.08 77.6073 118.08 77.8363C118.08 78.0199 118.152 78.1249 118.24 78.0698C118.467 77.9275 118.438 77.7269 118.148 77.433C117.858 77.1391 117.66 77.1099 117.52 77.3402ZM27.7536 77.5132C27.6956 77.6081 27.6864 77.7248 27.7332 77.7727C27.848 77.8886 28.16 77.6839 28.16 77.4926C28.16 77.2854 27.8836 77.2992 27.7536 77.5132ZM37.9476 79.8399C37.732 80.137 37.8328 80.5031 38.124 80.4791C38.5068 80.4479 38.4688 80.5655 38.04 80.7402C37.6924 80.8817 37.6916 80.8869 38.0152 80.8971C38.1996 80.9027 38.4596 80.7795 38.5928 80.6235C38.868 80.3012 39.086 79.5623 38.8652 79.7005C38.7852 79.7503 38.72 79.8922 38.72 80.0154C38.72 80.1387 38.658 80.2781 38.5824 80.3255C38.5068 80.3729 38.4632 80.2436 38.4856 80.0381C38.528 79.6454 38.1812 79.5177 37.9476 79.8399ZM38.3288 80.2445C38.1596 80.5217 37.9428 80.4504 38.002 80.137C38.0312 79.981 38.0612 79.8205 38.0676 79.7803C38.0744 79.7402 38.16 79.7884 38.258 79.8878C38.356 79.9871 38.3876 80.1476 38.3288 80.2445ZM127.418 80.4139C127.446 81.3296 128.64 81.7167 128.64 80.8099C128.64 80.5663 128.593 80.4147 128.535 80.4735C128.477 80.5322 128.333 80.499 128.215 80.3997C128.053 80.2635 127.999 80.2736 127.998 80.4415C127.996 80.6174 127.959 80.6133 127.824 80.4208C127.688 80.2278 127.67 80.2582 127.737 80.5659C127.786 80.7864 127.762 80.8914 127.683 80.8091C127.607 80.7292 127.511 80.4451 127.471 80.1776C127.425 79.8788 127.405 79.97 127.418 80.4139ZM42.9384 81.4852C42.998 82.5561 44.16 82.7552 44.16 81.6948C44.16 81.3506 44.106 81.0649 44.04 81.0588C43.974 81.0531 43.6924 81.026 43.414 80.998C42.9332 80.9498 42.91 80.9733 42.9384 81.4852ZM134.72 81.3125C134.72 81.4726 134.562 81.5557 134.257 81.5557C133.706 81.5557 133.538 81.9964 133.7 83.0207C133.801 83.6635 133.818 83.6793 134.382 83.6315L134.96 83.5825L135.007 82.3259C135.036 81.5322 134.992 81.0693 134.887 81.0693C134.795 81.0693 134.72 81.1788 134.72 81.3125ZM119.474 81.5557C119.428 81.7337 119.455 81.9206 119.535 81.9704C119.615 82.0203 119.68 81.8747 119.68 81.6465C119.68 81.1496 119.589 81.1095 119.474 81.5557ZM19.9884 81.9923C19.6512 82.8905 19.8636 83.5614 20.5052 83.6246C21.1276 83.6862 21.4296 82.9461 21.1848 81.9582C21.0372 81.3624 20.216 81.3855 19.9884 81.9923ZM37.0556 81.6923C36.9324 81.8942 37.2308 82.2542 37.422 82.1346C37.52 82.073 37.6 81.9623 37.6 81.8877C37.6 81.7029 37.1484 81.5403 37.0556 81.6923ZM119.181 82.1366C119.171 82.2185 119.171 82.3401 119.181 82.407C119.192 82.4738 119.128 82.5286 119.04 82.5286C118.952 82.5286 118.88 82.4678 118.88 82.3936C118.88 82.319 118.785 82.2582 118.669 82.2582C118.328 82.2582 118.415 83.3222 118.766 83.4349C119.193 83.5723 119.521 83.2132 119.463 82.6729C119.413 82.2128 119.218 81.8427 119.181 82.1366ZM35.8068 83.0397C35.9756 83.2586 35.9756 83.323 35.8068 83.392C35.684 83.4418 35.6732 83.4811 35.7804 83.4884C36.0136 83.505 36.3972 83.0393 36.2628 82.9031C36.2064 82.8456 36.16 82.893 36.16 83.0077C36.16 83.1731 36.1016 83.1706 35.88 82.9943C35.63 82.7953 35.622 82.8001 35.8068 83.0397ZM119.36 83.0053C119.36 83.1966 119.048 83.4013 118.933 83.2853C118.819 83.169 119.021 82.8528 119.21 82.8528C119.292 82.8528 119.36 82.9213 119.36 83.0053ZM32.7468 83.7718C32.5744 83.9461 32.6236 84.096 32.8532 84.096C32.9708 84.096 33.0668 83.9987 33.0668 83.8796C33.0668 83.6469 32.9188 83.5971 32.7468 83.7718ZM33.56 83.8386C33.406 83.9294 33.28 84.0823 33.28 84.1779C33.28 84.2991 33.3448 84.2971 33.4932 84.1722C33.654 84.0373 33.7068 84.0498 33.7068 84.2245C33.7068 84.3518 33.6288 84.4422 33.5332 84.4248C33.438 84.4073 33.374 84.4722 33.3912 84.5687C33.4084 84.6655 33.3192 84.7446 33.1936 84.7446C33.0212 84.7446 33.0088 84.6911 33.142 84.5281C33.268 84.3745 33.2688 84.3121 33.1452 84.3121C33.0496 84.3121 32.8952 84.4564 32.802 84.6327C32.646 84.9282 32.6788 84.9493 33.224 84.9039C33.7796 84.8577 33.8184 84.8184 33.8636 84.259C33.8904 83.9315 33.896 83.6656 33.876 83.6684C33.8564 83.6712 33.714 83.7478 33.56 83.8386ZM44.36 83.9059C44.07 84.2395 44.1144 84.3899 44.426 84.1293C44.6336 83.9558 44.7068 83.9513 44.7592 84.1094C44.8732 84.4519 45.44 84.3506 45.44 83.9878C45.44 83.5962 44.6792 83.5383 44.36 83.9059ZM44.2468 84.625C44.1964 84.7081 44.228 84.822 44.3172 84.8779C44.4068 84.9339 44.48 84.8942 44.48 84.7892C44.48 84.6785 44.614 84.6339 44.8 84.6834C44.976 84.73 45.12 84.702 45.12 84.6214C45.12 84.4276 44.3652 84.4308 44.2468 84.625ZM133.613 86.0226C133.605 86.1203 133.362 86.1645 133.04 86.1264C132.605 86.0749 132.48 86.1183 132.48 86.321C132.48 86.4981 132.621 86.5812 132.92 86.5796C133.481 86.5763 133.824 86.3579 133.712 86.0737C133.664 85.9521 133.62 85.929 133.613 86.0226ZM21.32 86.2091C21.21 86.2508 21.12 86.3972 21.12 86.5342C21.12 86.7077 21.1808 86.7368 21.32 86.6302C21.43 86.5459 21.718 86.4961 21.96 86.5196C22.234 86.5463 22.4 86.4839 22.4 86.3538C22.4 86.1487 21.7212 86.0579 21.32 86.2091ZM126.162 86.4166C126.108 86.5042 126.081 86.888 126.1 87.2695L126.136 87.9634L126.749 87.9042C127.498 87.8317 127.554 87.749 127.423 86.916C127.319 86.2549 126.466 85.9177 126.162 86.4166ZM29.1668 88.8361C29.012 89.087 29.054 89.207 29.422 89.5641C29.868 89.997 30.082 89.9808 30.0776 89.5139C30.0756 89.2893 30.0564 89.2877 29.9232 89.5005C29.7908 89.7129 29.7352 89.7068 29.4856 89.4543C29.2376 89.2026 29.2312 89.145 29.4388 89.0149C29.6004 88.9136 29.6248 88.8122 29.5148 88.7007C29.4044 88.5889 29.2924 88.6326 29.1668 88.8361ZM21.584 88.8037C20.7308 88.9375 21.0696 90.1158 21.96 90.1109C22.3724 90.1085 22.4 90.0643 22.4 89.3992C22.4 88.9269 22.3332 88.6979 22.2 88.7141C22.09 88.7275 21.8128 88.7676 21.584 88.8037ZM125.28 89.0125C125.28 89.113 125.197 89.1434 125.095 89.0797C124.981 89.008 124.954 89.0352 125.025 89.1511C125.088 89.254 125.063 89.3383 124.97 89.3383C124.333 89.3383 125.066 90.387 125.712 90.3999C126.275 90.4113 126.207 88.9626 125.64 88.8811C125.442 88.8528 125.28 88.9119 125.28 89.0125ZM132.879 89.3392C132.47 89.7972 132.644 89.8398 133.074 89.387C133.269 89.1819 133.37 89.0141 133.299 89.0141C133.228 89.0141 133.039 89.1604 132.879 89.3392ZM133.212 89.5933C132.932 89.8767 132.881 90.149 133.108 90.149C133.19 90.149 133.37 90.0343 133.508 89.8941C133.788 89.6107 133.839 89.3383 133.612 89.3383C133.53 89.3383 133.35 89.4531 133.212 89.5933ZM131.154 91.3967C131.02 91.6277 131.23 92.5807 131.418 92.5925C131.518 92.5985 131.788 92.6289 132.018 92.6597C132.412 92.7132 132.434 92.6788 132.418 92.0408C132.4 91.3845 131.444 90.8973 131.154 91.3967ZM48.422 91.8523C48.3204 92.1206 48.6692 92.4429 48.894 92.288C48.9968 92.2175 48.9548 92.0748 48.7812 91.9046C48.5608 91.6881 48.488 91.6776 48.422 91.8523ZM124.231 92.8904C124.28 92.971 124.165 92.9962 123.975 92.9459C123.684 92.8685 123.644 92.909 123.72 93.2041C123.77 93.3967 123.745 93.5134 123.665 93.4635C123.482 93.3484 123.48 93.8867 123.662 94.1794C123.763 94.3399 123.831 94.3488 123.914 94.2122C123.977 94.1093 124.184 94.0464 124.374 94.0732C124.676 94.1153 124.726 94.0331 124.769 93.4323C124.813 92.8231 124.779 92.7432 124.48 92.7432C124.294 92.7432 124.182 92.8093 124.231 92.8904ZM30.56 93.0477C30.56 93.2552 31.0304 93.6176 31.1468 93.5C31.2628 93.3821 30.9052 92.9054 30.7004 92.9054C30.6232 92.9054 30.56 92.9694 30.56 93.0477ZM22.4896 94.0229C22.5472 94.9925 22.6056 95.0869 23.24 95.2385C23.6764 95.3427 23.68 95.3366 23.68 94.5122V93.6804L23.1276 93.7461C22.672 93.8 22.5628 93.753 22.5064 93.4802C22.4684 93.2978 22.4612 93.5422 22.4896 94.0229ZM131.218 94.1526C131.18 95.1023 131.294 95.1964 131.81 94.6407C132.466 93.9333 132.464 93.2098 131.808 93.2544C131.253 93.2925 131.252 93.2937 131.218 94.1526ZM132.125 93.5803C132.056 93.789 131.52 93.9208 131.52 93.7286C131.52 93.5389 131.712 93.3918 131.96 93.3918C132.085 93.3918 132.159 93.4765 132.125 93.5803ZM114.45 94.9321C114.45 95.4672 114.48 95.6666 114.516 95.3751C114.552 95.0837 114.551 94.6459 114.514 94.4023C114.478 94.1587 114.449 94.397 114.45 94.9321ZM31.36 96.0371C31.36 96.7468 31.378 96.7756 31.8 96.7343C32.042 96.7108 32.3248 96.7561 32.4288 96.8356C32.5676 96.9418 32.6052 96.8048 32.5708 96.3159C32.5156 95.5292 32.5172 95.5316 31.8684 95.3999L31.36 95.2969V96.0371ZM122.72 95.5807C122.72 95.7144 122.607 95.8239 122.468 95.8239C122.202 95.8239 122.189 96.6191 122.452 96.8141C123.104 97.2965 123.784 96.4311 123.449 95.5458C123.338 95.2535 122.72 95.2835 122.72 95.5807ZM130.204 96.9211C129.98 97.1947 129.897 97.6074 130.066 97.6074C130.196 97.6074 130.88 96.9065 130.88 96.7728C130.88 96.5924 130.385 96.701 130.204 96.9211ZM50.7384 98.3216C51.0096 99.2794 51.8872 99.3998 51.8096 98.4687C51.7628 97.9021 51.7296 97.8696 51.1816 97.8563C50.6148 97.8425 50.6056 97.8522 50.7384 98.3216ZM32.842 98.2061C32.9972 98.247 33.0832 98.3471 33.0336 98.4286C32.984 98.5101 33.0676 98.5283 33.2196 98.4691C33.4336 98.386 33.4716 98.4245 33.3896 98.6414C33.3312 98.7954 33.3492 98.8801 33.4296 98.8299C33.51 98.7796 33.6088 98.8668 33.6492 99.024C33.7092 99.2567 33.7264 99.247 33.7416 98.9701C33.764 98.5559 33.286 98.0869 32.8676 98.1124C32.596 98.1291 32.5928 98.14 32.842 98.2061ZM51.1464 98.2154C51.0516 98.3739 51.456 98.7529 51.5828 98.6244C51.6364 98.5705 51.68 98.5705 51.68 98.6248C51.68 98.8692 51.3624 98.8838 51.1316 98.6495C50.908 98.4233 50.9124 98.0938 51.1388 98.0938C51.1828 98.0938 51.186 98.1485 51.1464 98.2154ZM121.372 98.3487C121.233 98.4886 121.12 98.671 121.12 98.7541C121.12 98.9843 121.389 98.9333 121.668 98.6495C121.807 98.5097 121.92 98.3273 121.92 98.2442C121.92 98.0139 121.651 98.065 121.372 98.3487ZM25.148 99.1031C24.9212 99.3329 24.898 99.8773 25.1148 99.8773C25.2004 99.8773 25.2236 99.9993 25.1672 100.148C25.0892 100.354 25.1292 100.395 25.3324 100.316C25.4796 100.259 25.6 100.282 25.6 100.369C25.6 100.856 26.2104 100.48 26.2708 99.9563C26.3636 99.1497 25.6428 98.6017 25.148 99.1031ZM128.64 99.7829C128.64 100.565 128.701 100.617 129.329 100.375C130.149 100.06 130.071 99.2356 129.21 99.1181L128.64 99.0403V99.7829ZM33.92 101.202C33.92 101.579 33.9984 101.831 34.12 101.844C34.23 101.855 34.4844 101.882 34.6852 101.903C35.11 101.948 35.2112 102.028 35.2592 102.359C35.308 102.697 35.6892 103.133 35.8484 103.034C35.9208 102.988 36.0544 103.08 36.1452 103.238C36.3564 103.606 36.368 103.269 36.1628 102.722C36.0764 102.492 35.8244 102.234 35.6028 102.148C35.2408 102.009 35.1248 101.819 35.1812 101.458C35.1916 101.391 35.11 101.335 35 101.334C34.8588 101.332 34.8664 101.289 35.026 101.187C35.216 101.065 35.2072 100.996 34.9716 100.757C34.7356 100.519 34.668 100.51 34.548 100.702C34.4692 100.828 34.4036 100.852 34.4024 100.756C34.4012 100.659 34.292 100.58 34.16 100.58C33.9884 100.58 33.92 100.757 33.92 101.202ZM112.015 101.737C112.032 102.403 112.108 102.909 112.183 102.862C112.258 102.815 112.32 102.886 112.32 103.02C112.32 103.154 112.248 103.308 112.16 103.363C111.898 103.527 111.965 104.417 112.24 104.417C112.372 104.417 112.48 104.352 112.48 104.273C112.48 104.194 112.606 104.139 112.76 104.151C112.936 104.165 113.032 104.068 113.018 103.89C113.006 103.734 113.06 103.606 113.138 103.606C113.216 103.606 113.28 103.055 113.28 102.381C113.28 101.526 113.226 101.189 113.103 101.266C112.982 101.341 112.962 101.262 113.039 101.017C113.138 100.7 113.108 100.67 112.796 100.77C112.554 100.848 112.475 100.827 112.55 100.705C112.616 100.596 112.527 100.526 112.321 100.526C112.004 100.526 111.985 100.602 112.015 101.737ZM26.4688 101.565C26.2148 101.848 26.2152 102.735 26.4696 102.949C27.1616 103.531 28.0444 102.494 27.5408 101.69C27.3692 101.415 26.676 101.335 26.4688 101.565ZM127.342 101.661C127.332 101.75 127.324 101.969 127.324 102.147C127.324 103.012 127.356 103.071 127.83 103.084C128.547 103.105 128.891 102.316 128.432 101.701C128.252 101.461 127.368 101.428 127.342 101.661ZM119.238 102.153C119.038 102.234 118.804 102.49 118.718 102.721C118.512 103.269 118.523 103.606 118.735 103.238C118.826 103.08 118.959 102.988 119.032 103.034C119.204 103.142 119.572 102.687 119.632 102.294C119.657 102.124 119.66 101.99 119.639 101.995C119.618 102.001 119.437 102.072 119.238 102.153ZM112.4 102.472C112.314 102.613 112.638 102.711 113 102.653C113.177 102.625 113.146 102.923 112.96 103.039C112.872 103.094 112.8 103.05 112.8 102.94C112.8 102.831 112.753 102.79 112.695 102.848C112.55 102.995 112.142 102.632 112.251 102.453C112.3 102.374 112.375 102.309 112.419 102.309C112.463 102.309 112.454 102.382 112.4 102.472ZM0 104.019V104.919L0.76 104.884C1.824 104.836 1.92 104.777 1.92 104.168C1.92 103.428 1.5644 103.12 0.7084 103.12H0V104.019ZM126.469 104.435C126.419 104.517 126.317 104.546 126.243 104.5C126.169 104.454 126.128 104.544 126.152 104.7C126.176 104.857 126.137 105.146 126.064 105.343C125.934 105.698 125.936 105.699 126.43 105.419C127.067 105.058 127.307 104.483 126.869 104.367C126.699 104.322 126.519 104.353 126.469 104.435ZM27.69 104.676C27.6844 104.863 27.806 105.126 27.96 105.261C28.278 105.54 29.0072 105.761 28.8708 105.537C28.8216 105.456 28.6816 105.39 28.56 105.39C28.4384 105.39 28.2996 105.325 28.2512 105.246C28.2028 105.167 28.2868 105.112 28.438 105.124C28.612 105.139 28.7136 105.028 28.716 104.823C28.7188 104.604 28.616 104.499 28.4 104.502C28.1964 104.505 28.088 104.608 28.1024 104.786C28.1332 105.174 28.0172 105.135 27.8448 104.701C27.7052 104.349 27.7 104.348 27.69 104.676ZM126.726 104.978C126.613 105.115 126.44 105.226 126.34 105.223C126.241 105.22 126.286 105.144 126.44 105.053C126.594 104.962 126.72 104.809 126.72 104.713C126.72 104.608 126.61 104.628 126.44 104.762C126.185 104.965 126.18 104.959 126.385 104.694C126.535 104.5 126.664 104.457 126.77 104.566C126.877 104.674 126.862 104.811 126.726 104.978ZM28.5868 104.854C28.5868 105.1 28.2904 105.057 28.2056 104.799C28.1756 104.708 28.2492 104.633 28.3688 104.633C28.4888 104.633 28.5868 104.733 28.5868 104.854ZM51.3976 104.748C50.942 104.933 50.6848 105.564 50.64 106.606C50.6212 107.052 50.6324 107.34 50.6652 107.247C50.698 107.154 50.98 107.107 51.2916 107.144L51.858 107.211L51.8216 106.191L51.7856 105.17L51.3504 105.698L50.9152 106.227L51.0224 105.687C51.0888 105.352 51.2644 105.086 51.4848 104.987C51.68 104.899 51.84 104.771 51.84 104.703C51.84 104.559 51.8648 104.557 51.3976 104.748ZM37.76 106.379C37.76 107.266 38.8924 107.419 39.0132 106.548C39.0464 106.307 39.0024 106.205 38.8948 106.272C38.786 106.341 38.762 106.278 38.8296 106.1C38.9116 105.883 38.8736 105.844 38.6596 105.927C38.496 105.991 38.4232 105.97 38.4804 105.876C38.536 105.784 38.4024 105.731 38.1688 105.751C37.8108 105.781 37.76 105.859 37.76 106.379ZM116.2 105.917C116.222 106.028 116.15 106.101 116.04 106.079C115.786 106.028 115.782 106.24 116.032 106.493C116.181 106.644 116.177 106.687 116.012 106.687C115.842 106.687 115.84 106.735 116 106.93C116.446 107.475 117.12 107.237 117.12 106.535C117.12 106.183 117.048 105.85 116.96 105.795C116.872 105.74 116.8 105.787 116.8 105.899C116.8 106.058 116.757 106.06 116.608 105.909C116.358 105.656 116.149 105.66 116.2 105.917ZM111.061 107.372C110.853 107.628 110.726 107.883 110.78 107.937C110.893 108.051 111.484 107.545 111.686 107.162C111.921 106.717 111.47 106.868 111.061 107.372ZM124.552 108.133C124.468 108.214 124.221 108.306 124.002 108.335C123.676 108.38 123.586 108.505 123.502 109.032C123.446 109.384 123.319 109.7 123.22 109.734C123.121 109.767 123.04 109.859 123.04 109.938C123.04 110.017 123.148 110.04 123.28 109.989C123.412 109.937 123.52 109.794 123.52 109.669C123.52 109.545 123.653 109.443 123.815 109.443C124.196 109.443 124.577 108.996 124.677 108.43C124.765 107.93 124.763 107.926 124.552 108.133ZM30.08 108.403C30.08 108.529 30.1396 108.633 30.2128 108.633C30.2856 108.633 30.3396 108.797 30.3328 108.998C30.3236 109.259 30.4112 109.362 30.64 109.362C30.9944 109.362 31.2648 109.567 31.3928 109.933C31.4392 110.065 31.4688 109.796 31.4584 109.335C31.4368 108.348 31.3856 108.278 30.6448 108.218C30.2432 108.186 30.08 108.24 30.08 108.403ZM50.252 108.537C50.1236 108.694 50.1176 108.799 50.2324 108.871C50.3244 108.929 50.4056 108.954 50.4124 108.926C50.5676 108.29 50.5296 108.198 50.252 108.537ZM124.392 108.62C124.442 108.702 124.364 108.889 124.22 109.035C123.878 109.382 123.527 109.096 123.834 108.721C124.067 108.437 124.259 108.402 124.392 108.62ZM49.446 109.355C49.3412 109.483 49.2872 109.756 49.326 109.961C49.3872 110.286 49.3992 110.276 49.4184 109.88C49.43 109.629 49.5072 109.466 49.5888 109.518C49.6708 109.569 49.78 109.542 49.8316 109.457C49.9896 109.198 49.6484 109.108 49.446 109.355ZM122.954 110.427C122.896 110.522 122.886 110.639 122.933 110.687C123.048 110.803 123.36 110.598 123.36 110.407C123.36 110.199 123.084 110.213 122.954 110.427ZM42.7888 111.262C42.6552 111.689 42.8628 112.199 43.1708 112.202C43.3188 112.203 43.5908 112.245 43.7752 112.295C44.0612 112.373 44.1128 112.312 44.1248 111.885C44.1324 111.609 44.0724 111.425 43.9912 111.476C43.9092 111.527 43.8908 111.444 43.9496 111.288C44.0316 111.071 43.9936 111.033 43.7796 111.116C43.616 111.18 43.5432 111.158 43.6004 111.064C43.656 110.973 43.5224 110.92 43.2884 110.939C43.0576 110.959 42.84 111.099 42.7888 111.262ZM93.184 111.684C93.2036 112.19 93.4776 112.3 93.8284 111.945C94.1792 111.589 94.07 111.312 93.5712 111.292C93.2396 111.279 93.1712 111.348 93.184 111.684ZM48.4472 112.646C48.172 112.968 47.954 113.707 48.1748 113.569C48.2548 113.519 48.32 113.368 48.32 113.235C48.32 113.101 48.3912 113.036 48.478 113.09C48.5724 113.149 48.5936 113.076 48.5304 112.91C48.4484 112.693 48.4864 112.654 48.7004 112.737C48.8524 112.796 48.936 112.778 48.8864 112.697C48.8368 112.615 48.9228 112.515 49.078 112.474C49.3076 112.413 49.298 112.396 49.0248 112.381C48.8404 112.37 48.5804 112.49 48.4472 112.646ZM118.307 113.554C118.041 114.257 118.298 114.713 118.96 114.713H119.6V114.064C119.6 113.359 118.539 112.941 118.307 113.554ZM35.4084 113.601C35.1204 113.72 35.4728 114.396 35.9328 114.608C36.3852 114.817 36.6336 114.51 36.5164 113.887C36.444 113.504 35.9524 113.377 35.4084 113.601ZM90.1344 114.722C89.9056 115.327 90.3008 116.011 90.872 115.998C91.4524 115.986 91.6344 115.616 91.4432 114.834C91.3336 114.386 90.2952 114.297 90.1344 114.722ZM117.56 114.759C117.179 114.808 117.12 114.888 117.12 115.355C117.12 115.924 116.918 116.091 116.227 116.091C115.885 116.091 115.84 116.163 115.84 116.716C115.84 117.583 117.02 117.684 117.065 116.821C117.079 116.553 117.097 116.249 117.105 116.145C117.113 116.04 117.329 115.908 117.585 115.851C118.455 115.658 118.432 114.646 117.56 114.759ZM36.48 115.188C36.48 115.691 36.8744 116.091 37.3716 116.091C37.718 116.091 37.76 116.021 37.76 115.443V114.794H37.12C36.5492 114.794 36.48 114.837 36.48 115.188ZM46.56 115.524C46.56 116.281 46.7488 116.419 47.4268 116.155C48.0072 115.929 47.7512 114.794 47.12 114.794C46.5628 114.794 46.56 114.798 46.56 115.524ZM106.595 115.054C106.306 115.181 106 115.471 105.915 115.699C105.716 116.231 105.719 116.36 105.927 116.149C106.037 116.037 106.398 116.029 106.994 116.124C108.169 116.31 108.32 116.236 108.32 115.474C108.32 114.751 107.652 114.589 106.595 115.054ZM37.28 115.28C37.6292 115.634 37.6976 115.929 37.4304 115.929C37.3372 115.929 37.3084 115.851 37.3668 115.756C37.43 115.652 37.3536 115.603 37.176 115.634C36.9636 115.671 36.8944 115.601 36.9308 115.386C36.9612 115.206 36.9132 115.128 36.8108 115.192C36.7168 115.252 36.64 115.222 36.64 115.128C36.64 114.857 36.9308 114.927 37.28 115.28ZM106.639 115.605C106.479 115.785 106.306 115.888 106.254 115.836C106.203 115.783 106.3 115.637 106.471 115.51C106.909 115.186 106.979 115.225 106.639 115.605ZM38.026 116.563C38.1448 117.068 38.0764 116.998 38.5744 117.119C38.9564 117.211 38.99 117.176 39.0092 116.66C39.0292 116.123 39.008 116.102 38.4784 116.122C37.9696 116.142 37.9344 116.176 38.026 116.563ZM104.637 116.5C104.526 116.636 104.479 116.793 104.533 116.848C104.65 116.965 105.12 116.603 105.12 116.395C105.12 116.172 104.859 116.229 104.637 116.5ZM90.06 117.631C90.0492 117.676 90.0312 117.877 90.02 118.077C90.0056 118.337 89.9004 118.442 89.6532 118.442C89.4628 118.442 89.2636 118.485 89.2112 118.539C89.1588 118.592 89.2932 118.626 89.5104 118.614C90.006 118.587 90.1432 118.449 90.1696 117.948C90.188 117.602 90.1176 117.398 90.06 117.631ZM42.48 120.307C42.6392 120.485 42.7944 120.631 42.8248 120.631C42.8552 120.631 42.88 120.485 42.88 120.307C42.88 120.082 42.7732 119.982 42.5352 119.982C42.2004 119.982 42.1988 119.992 42.48 120.307ZM112 120.332C112 120.671 112.01 120.673 112.32 120.388C112.496 120.226 112.64 120.069 112.64 120.038C112.64 120.008 112.496 119.982 112.32 119.982C112.099 119.982 112 120.091 112 120.332ZM110.376 121.227C109.918 121.304 109.686 121.789 109.97 122.076C110.095 122.203 110.087 122.252 109.942 122.252C109.421 122.252 109.985 122.526 110.553 122.549C111.07 122.569 111.2 122.518 111.202 122.292C111.204 122.052 111.228 122.046 111.356 122.251C111.478 122.448 111.545 122.454 111.712 122.285C111.879 122.115 111.873 122.048 111.679 121.924C111.476 121.794 111.482 121.77 111.72 121.768C112.036 121.765 112.11 121.345 111.8 121.313C111.69 121.302 111.42 121.262 111.2 121.224C110.98 121.187 110.609 121.188 110.376 121.227ZM87.7868 121.388C87.7384 121.436 87.8336 121.622 87.998 121.801C88.162 121.979 88.258 122.227 88.2112 122.351C88.096 122.655 88.3976 122.637 88.7084 122.322C89.0196 122.007 89.0372 121.701 88.7376 121.818C88.6152 121.865 88.3708 121.768 88.1944 121.602C88.0184 121.435 87.8348 121.339 87.7868 121.388ZM95.6668 121.44C95.1808 121.727 95.4676 122.53 96.0988 122.65C96.8268 122.789 96.96 122.675 96.96 121.918C96.96 121.243 96.3676 121.024 95.6668 121.44ZM44.1888 122.131C44.2416 122.506 44.96 122.774 44.96 122.418C44.96 122.319 44.834 122.26 44.68 122.286C44.4892 122.318 44.4148 122.243 44.4472 122.05C44.4728 121.894 44.414 121.766 44.316 121.766C44.218 121.766 44.1608 121.93 44.1888 122.131ZM89.3848 123.035C89.2392 123.198 89.1256 123.472 89.1328 123.643C89.142 123.873 89.1684 123.891 89.2336 123.712C89.3832 123.299 89.7968 122.9 90.0648 122.911C90.2292 122.918 90.1908 122.974 89.9564 123.069C89.5824 123.221 89.3244 123.648 89.4992 123.825C89.5536 123.881 89.7592 123.787 89.9564 123.616C90.2464 123.365 90.2732 123.36 90.0976 123.59C89.9112 123.834 89.9172 123.874 90.1404 123.874C90.3304 123.874 90.4 123.722 90.4 123.306C90.4 122.646 89.8608 122.502 89.3848 123.035ZM108.612 123.082C108.399 123.305 108.388 123.379 108.561 123.446C108.826 123.549 109.144 123.196 108.991 122.968C108.921 122.864 108.78 122.906 108.612 123.082ZM45.6048 123.011C45.5984 123.258 46.0476 123.713 46.2916 123.707C46.3952 123.704 46.3564 123.628 46.2052 123.539C46.054 123.45 45.858 123.251 45.77 123.098C45.682 122.945 45.6076 122.906 45.6048 123.011ZM86.4 124.42C86.4 125.136 87.1436 125.531 87.9208 125.229C88.3908 125.046 88.1748 123.917 87.6496 123.811C86.5276 123.583 86.4 123.645 86.4 124.42ZM48.0608 124.499C48.1116 125.413 49.2424 125.461 49.2168 124.548C49.2008 123.979 49.1756 123.954 48.6144 123.938C48.0412 123.921 48.0296 123.933 48.0608 124.499ZM48.9564 124.362C48.848 124.43 48.7988 124.551 48.8476 124.632C48.8964 124.712 48.8132 124.777 48.6624 124.777C48.512 124.777 48.3884 124.655 48.3884 124.506C48.3884 124.352 48.4772 124.269 48.5944 124.315C48.7076 124.359 48.8 124.31 48.8 124.206C48.8 124.102 48.8796 124.067 48.9772 124.127C49.1032 124.206 49.0972 124.274 48.9564 124.362ZM49.5964 125.144C49.3608 125.225 49.4088 125.915 49.6652 126.131C49.7892 126.235 50.368 126.356 50.952 126.398L52.0136 126.476L51.976 125.835L51.9388 125.195L50.846 125.142C50.2448 125.113 49.6824 125.114 49.5964 125.144ZM103.154 125.141C103.003 125.17 102.872 125.298 102.862 125.426C102.789 126.38 102.792 126.386 103.356 126.414C103.657 126.43 103.979 126.345 104.072 126.225C104.164 126.106 104.376 125.984 104.543 125.955C104.887 125.893 105.246 125.407 105.075 125.234C105.013 125.17 104.801 125.258 104.604 125.429C104.362 125.638 104.311 125.652 104.448 125.472C104.656 125.198 103.88 124.999 103.154 125.141ZM105.298 125.348C105.274 125.683 104.77 126.144 104.428 126.144C104.28 126.144 104.16 126.206 104.16 126.283C104.16 126.516 104.923 126.292 105.204 125.977C105.35 125.814 105.434 125.548 105.392 125.386C105.335 125.158 105.313 125.15 105.298 125.348ZM101.287 126.719C101.456 126.927 101.447 127.016 101.234 127.232C101.021 127.448 100.933 127.457 100.728 127.285C100.416 127.023 100.401 127.221 100.708 127.534C100.983 127.812 101.347 127.844 101.183 127.575C101.106 127.449 101.154 127.419 101.326 127.486C101.516 127.56 101.558 127.517 101.485 127.325C101.419 127.15 101.448 127.102 101.573 127.18C101.838 127.346 101.806 126.978 101.532 126.699C101.224 126.388 101.028 126.403 101.287 126.719ZM98.8944 128.303C99.0816 128.964 99.0964 128.968 99.66 128.487C100.337 127.91 100.289 127.743 99.4596 127.787C98.764 127.823 98.76 127.827 98.8944 128.303ZM98.56 128.495C98.7236 128.694 98.7112 128.738 98.49 128.738C98.342 128.738 98.2656 128.811 98.32 128.9C98.4868 129.174 98.8552 129.08 98.798 128.778C98.7688 128.622 98.7388 128.44 98.7324 128.373C98.7256 128.306 98.6392 128.251 98.5404 128.251C98.4164 128.251 98.4224 128.326 98.56 128.495ZM64.76 130.326C64.166 130.352 63.68 130.431 63.68 130.501C63.68 130.743 64.4576 131.365 64.628 131.258C64.7236 131.199 64.8 131.267 64.8 131.413C64.8 132.054 66.1544 131.645 66.2084 130.988C66.266 130.289 66.2064 130.262 64.76 130.326ZM88.7808 130.371C88.6904 130.428 88.6396 130.722 88.668 131.025C88.752 131.917 90.1308 131.88 90.1984 130.984C90.2432 130.391 89.3592 130.009 88.7808 130.371Z\" fill=\"white\"/>\r\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M63.6801 46.6502C63.1081 46.8841 62.2533 47.3365 61.7809 47.6559C61.3081 47.9749 60.5773 48.4374 60.1561 48.6839C58.3697 49.7292 57.4369 52.1147 57.3945 55.7466L57.3665 58.1685L57.9841 59.4024C58.9061 61.243 60.3369 63.2787 60.8873 63.5332C61.1473 63.6536 61.7825 64.0099 62.2985 64.3249L63.2369 64.898L66.1385 64.9171C69.8301 64.9414 70.6181 64.5916 73.5917 61.6099C73.9045 61.2966 74.3845 60.879 74.6589 60.682C75.1437 60.3335 75.1533 60.3039 74.9937 59.5982C74.8501 58.9626 74.8865 58.7048 75.2861 57.5264C76.3537 54.3769 75.1873 51.2092 71.7601 47.9506C70.3673 46.6263 65.6109 45.861 63.6801 46.6502ZM65.0685 52.4677C65.2401 52.9209 64.4961 53.1876 64.0001 52.8512C63.7925 52.7105 63.8017 52.6562 64.0705 52.4483C64.4777 52.1337 64.9453 52.1427 65.0685 52.4677ZM68.7897 52.3607C68.9801 52.4827 68.9837 52.5517 68.8101 52.7636C68.4565 53.1957 67.7073 52.9546 67.8917 52.4677C67.9997 52.1824 68.4317 52.1309 68.7897 52.3607ZM63.6801 53.5865C63.6801 54.0235 63.4085 54.2679 63.1801 54.0364C62.9829 53.8366 63.2997 52.9623 63.5197 53.1001C63.6081 53.1552 63.6801 53.3741 63.6801 53.5865ZM67.7825 54.235C68.0925 54.8147 68.2741 55.3554 68.2313 55.5727C68.1921 55.7733 68.1233 56.1179 68.0781 56.3384C67.7241 58.0708 64.5425 57.5897 64.2373 55.7575C64.1357 55.1483 64.1697 55.0599 64.6937 54.5735C65.0053 54.2841 65.3093 53.8492 65.3693 53.6068C65.4737 53.1852 65.5173 53.1682 66.3701 53.214L67.2621 53.2622L67.7825 54.235ZM70.0801 55.6943C70.0801 57.7782 69.9021 58.3659 69.4409 57.8033C69.1581 57.4579 69.1377 54.2006 69.4153 53.6976C69.8617 52.8885 70.0801 53.5439 70.0801 55.6943ZM63.6481 57.267C63.9029 57.5252 63.8917 57.9622 63.6245 58.1872C63.2757 58.4802 62.7989 57.854 63.0329 57.4101C63.2369 57.0238 63.3761 56.9914 63.6481 57.267ZM78.9601 57.3886C78.6081 57.5585 77.9601 58.0234 77.5201 58.4218L76.7201 59.1462L76.7357 60.5009C76.7593 62.5466 77.0741 63.0809 78.9565 64.2641C80.6677 65.3395 83.2125 63.7043 83.7069 61.2114C84.2173 58.6343 81.2797 56.2687 78.9601 57.3886ZM68.7201 58.9346C68.7201 59.2398 68.6057 59.2569 66.5081 59.2642C64.3405 59.2715 64.0521 59.2127 64.2097 58.7968C64.3593 58.4012 68.7201 58.5345 68.7201 58.9346ZM81.5269 60.1644C81.9937 60.9297 80.5921 62.3504 79.7533 61.9629C79.1561 61.6873 79.0469 60.3509 79.5833 59.8835C80.0005 59.5195 81.2433 59.6995 81.5269 60.1644ZM73.1133 64.9276C70.7881 65.7955 69.2157 68.5777 69.7377 70.8992C70.1173 72.5878 70.7081 73.8938 71.2505 74.2441C71.5309 74.4252 71.9469 74.7272 72.1749 74.9149C73.9065 76.3425 79.0413 75.2882 79.4457 73.4216C79.5017 73.1646 79.7129 72.7544 79.9157 72.5108C81.7385 70.3155 80.0405 65.9049 76.9761 64.8757C76.2477 64.6309 73.8201 64.6633 73.1133 64.9276ZM76.3201 68.4253C76.3201 68.5777 76.4541 68.8765 76.6173 69.0893C77.3837 70.0856 77.5689 70.8542 77.0421 70.8542C76.9217 70.8542 76.6817 71.0366 76.5085 71.2595C76.2317 71.6166 76.0717 71.6649 75.1689 71.6649C74.5933 71.6649 74.0613 71.7488 73.9549 71.8566C73.6645 72.1509 73.6225 71.981 73.7677 71.0974C73.9477 70.0033 73.9517 68.7849 73.7765 68.4521C73.6477 68.2065 73.7697 68.1773 74.9765 68.1635C76.1437 68.1501 76.3201 68.1846 76.3201 68.4253Z\" fill=\"url(#paint0_linear)\"/>\r\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M70.3856 15.3601C70.2984 15.5928 70.2636 15.8798 70.3084 15.9981C70.4392 16.3435 69.2364 16.8554 67.8856 17.0289C66.8692 17.1594 66.57 17.2681 66.1676 17.654C65.0992 18.6766 64.0796 18.7273 63.5128 17.7857C63.3416 17.5007 63.2008 17.3406 63.2004 17.4298C63.1992 17.6584 61.8004 18.5283 61.618 18.414C61.5352 18.3621 61.44 18.4026 61.4064 18.5044C61.3668 18.6248 61.2508 18.5931 61.0728 18.4128C60.8156 18.1521 60.8 18.159 60.8 18.5279C60.8 19.3049 59.118 19.9932 58.4968 19.4707C58.3164 19.3187 58.2044 19.3759 57.9364 19.7573C57.5328 20.3321 56.626 20.8347 55.7116 20.9916C55.3412 21.0548 54.9488 21.2348 54.8392 21.3908C54.5744 21.769 54.0284 22.0507 53.562 22.0507C53.162 22.0507 51.9084 22.7852 51.5468 23.2311C51.4296 23.3758 50.9976 23.544 50.5868 23.6056C50.1068 23.677 49.652 23.8829 49.3144 24.1808C49.0252 24.4362 48.7168 24.6449 48.6284 24.6449C48.5404 24.6449 48.1532 24.9733 47.7684 25.3745C46.5756 26.6185 45.3 26.2947 45.3716 24.7665C45.3828 24.5213 45.3252 24.3206 45.2428 24.3206C45.1604 24.3206 45.1228 24.4102 45.1588 24.5197C45.2464 24.7864 44.932 25.1103 44.6808 25.0126C44.5704 24.9696 44.48 25.0195 44.48 25.1236C44.48 25.2274 44.5348 25.2785 44.6016 25.2363C45.24 24.8367 45.5776 26.6157 44.954 27.0928C44.3664 27.5423 43.2816 28.5192 42.406 29.3875C41.9784 29.811 41.528 30.1576 41.4044 30.1576C41.2808 30.1576 40.9804 30.3684 40.7368 30.6266C40.4928 30.8844 40.1012 31.1345 39.8668 31.1827C39.6268 31.2322 39.37 31.4348 39.28 31.6464C39.1284 32.0023 38.9748 32.0437 38.1232 31.9606C38.0016 31.9484 37.9476 31.7563 37.9816 31.4588C38.0164 31.1552 37.9756 31.0145 37.8712 31.0798C37.7696 31.1434 37.7452 31.0794 37.8076 30.914C37.9524 30.5317 37.2516 30.5524 36.9048 30.9403C36.5352 31.3546 36.7324 32.584 37.1696 32.5885C37.2408 32.5893 37.2536 32.6639 37.1984 32.7546C37.1432 32.845 37.0308 32.8771 36.9488 32.826C36.8672 32.7745 36.8 32.8057 36.8 32.8949C36.8 32.9841 36.8664 33.0984 36.9476 33.1495C37.2772 33.3558 36.9532 34.4514 36.414 34.9553C36.1192 35.2309 35.832 35.6026 35.7764 35.7805C35.7204 35.9589 35.506 36.1964 35.3 36.3079C35.0936 36.4198 34.8088 36.7578 34.6672 37.0594C34.4932 37.4287 34.264 37.6382 33.9644 37.7023C33.22 37.8616 33.0532 38.0193 32.704 38.894C32.1996 40.1583 31.6228 40.6917 30.73 40.7184C30.2836 40.7322 30.1552 40.7699 30.4 40.8161C31.4932 41.022 31.2028 42.9515 30.0328 43.2571C29.5532 43.3824 29.5168 43.4424 29.4696 44.191C29.4148 45.0629 29.1496 45.4772 28.5484 45.6304C28.1924 45.7208 28.16 45.8084 28.16 46.6794C28.16 47.568 28.1248 47.6571 27.6216 48.0459C27.1804 48.3872 27.0644 48.6069 26.9784 49.2655C26.9036 49.8354 26.7424 50.2031 26.424 50.5306C25.9324 51.0361 25.5244 52.047 25.3544 53.1812C25.2944 53.5825 25.1456 54.0255 25.024 54.1653C24.9024 54.3052 24.7348 54.7815 24.6524 55.2237C24.4608 56.246 23.9164 57.2857 23.4676 57.4851C23.0128 57.6878 22.7476 59.5398 23.0216 60.6014C23.38 61.9897 22.9964 62.9094 22.0588 62.9094C21.796 62.9094 21.6232 62.9783 21.6744 63.0626C21.9172 63.4603 21.9408 65.7991 21.7104 66.5859C21.334 67.8704 21.1876 68.0318 20.4648 67.962L19.84 67.9016V69.4184V70.9352L20.6032 70.8817C21.7824 70.7986 21.9864 71.1225 22.0536 73.1825C22.1228 75.3162 21.858 75.7791 20.6172 75.692L19.84 75.6372V77.3162V78.9951L20.482 78.9331L21.1236 78.8711L21.4524 79.762C22.1828 81.7397 22.1988 82.9841 21.5 83.4478C21.108 83.7085 21.0616 84.0506 21.4132 84.0887C21.516 84.1 21.8556 84.1183 22.168 84.1292C23.1932 84.1657 23.7756 86.3266 23.022 87.2974L22.684 87.7327L23.3276 88.3351C23.7764 88.7546 24.0068 89.1283 24.088 89.5681C24.1524 89.9155 24.3024 90.3885 24.4216 90.62C24.5408 90.851 24.6384 91.2803 24.6392 91.5738C24.6396 91.8672 24.782 92.305 24.9552 92.5466C25.2712 92.9868 25.76 94.6288 25.76 95.2494C25.76 95.433 26.0092 95.7816 26.32 96.033C26.8268 96.4427 26.88 96.5631 26.88 97.3033C26.88 98.0349 26.9392 98.174 27.4436 98.6263C27.8152 98.9599 28.088 99.4082 28.2448 99.9441C28.3756 100.391 28.694 100.978 28.952 101.249C29.3204 101.636 29.432 101.916 29.4708 102.551C29.5128 103.24 29.582 103.39 29.9396 103.563C30.5036 103.836 30.686 104.084 30.7992 104.736C30.8516 105.038 31.0632 105.443 31.2692 105.637C31.4752 105.83 31.6948 106.224 31.7572 106.512C31.8472 106.927 32.0092 107.096 32.5404 107.327C33.156 107.594 33.6 108.157 33.6 108.67C33.6 108.772 33.7496 109.016 33.9324 109.213C34.2972 109.607 34.4324 110.308 34.2412 110.818C34.1332 111.105 34.1796 111.143 34.6192 111.126C34.8948 111.115 35.2196 111.188 35.3412 111.288C35.4632 111.388 35.8592 111.616 36.2212 111.794C36.696 112.028 36.9916 112.333 37.28 112.888C37.5 113.311 37.764 113.658 37.8668 113.658C38.3272 113.659 40.4896 116.003 40.5248 116.54C40.5548 116.991 40.6396 117.092 41.0964 117.22C41.3912 117.303 41.7236 117.497 41.8356 117.652C41.9472 117.807 42.268 117.951 42.5488 117.973C43.2216 118.025 43.4828 118.267 43.6844 119.027C43.8072 119.487 43.9564 119.681 44.2456 119.754C44.4624 119.81 44.64 119.92 44.64 119.999C44.64 120.079 44.7908 120.144 44.9752 120.144C45.7328 120.144 46.5416 120.926 46.6 121.714C46.6236 122.029 46.656 122.04 46.9484 121.832C47.6736 121.318 48.5376 121.575 48.97 122.434C49.2724 123.035 49.3212 123.063 50.0692 123.063C50.756 123.063 50.9044 123.127 51.286 123.589C51.5248 123.879 51.9092 124.191 52.1404 124.283C52.8448 124.562 53.598 125.078 53.5988 125.282C53.6004 125.565 53.7952 125.651 55.2344 125.999C55.9504 126.172 56.766 126.458 57.0468 126.634C57.328 126.81 57.7084 126.954 57.8928 126.954C58.3768 126.954 60.0248 127.594 60.4 127.927C61.0516 128.507 61.8104 128.655 62.5632 128.349C63.4624 127.985 63.9916 128.123 64.7088 128.908C65.17 129.413 65.4084 129.548 65.8404 129.548C66.1416 129.548 66.7868 129.699 67.274 129.884C68.17 130.224 68.2324 130.314 68.162 131.169C68.144 131.392 68.1832 131.521 68.2496 131.454C68.316 131.388 68.4492 131.4 68.5452 131.482C68.6684 131.585 68.704 131.423 68.6656 130.936C68.558 129.56 69.6248 129.256 72.3852 129.874C74.0516 130.248 73.8768 130.139 73.9412 130.845C74.0152 131.653 74.004 131.651 77.4104 131.653C80.484 131.656 81.3048 131.533 81.0004 131.118C80.9236 131.012 80.8736 130.835 80.89 130.724C80.9064 130.612 80.9288 130.454 80.94 130.372C80.962 130.21 83.5676 129.548 84.18 129.549C85.542 129.552 86.3084 130.133 86.1952 131.077C86.1516 131.44 86.15 131.645 86.1916 131.533C86.2332 131.421 86.3332 131.371 86.4136 131.421C86.5484 131.505 86.6336 131.044 86.5724 130.563C86.5332 130.255 87.5056 129.73 88.3148 129.624C89.2744 129.498 89.7428 129.29 90.0968 128.833C90.684 128.077 92.136 127.878 92.6336 128.486C92.8628 128.766 93.6584 128.533 93.9624 128.096C94.2584 127.671 95.0596 127.306 95.9376 127.194C97.0084 127.058 97.3076 126.962 97.68 126.637C98.1376 126.238 98.8408 126.002 99.7504 125.945C100.488 125.899 100.55 125.861 100.672 125.381C100.867 124.619 101.489 124.197 102.418 124.197C103.109 124.197 103.217 124.148 103.43 123.731C103.715 123.173 103.957 123.063 104.901 123.063C105.568 123.063 105.632 123.024 105.852 122.489C106.232 121.568 107.71 121.289 108.151 122.056C108.279 122.279 108.311 122.225 108.315 121.777C108.32 121.192 110.13 119.171 110.648 119.171C110.772 119.171 110.995 118.971 111.145 118.725C111.519 118.113 111.835 117.874 112.27 117.874C112.474 117.874 112.777 117.735 112.944 117.566C113.112 117.396 113.397 117.21 113.579 117.151C113.773 117.089 113.97 116.827 114.053 116.519C114.197 115.991 115.742 114.352 116.646 113.77C116.896 113.609 117.281 113.165 117.501 112.785C117.989 111.941 118.238 111.721 118.825 111.613C119.074 111.568 119.398 111.419 119.546 111.284C119.884 110.974 120.653 111.055 120.929 111.429C121.189 111.781 121.578 111.796 121.706 111.459C121.847 111.087 121.527 110.822 121.272 111.098C121.098 111.287 121.014 111.27 120.733 110.99C120.286 110.546 120.367 109.607 120.896 109.104C121.107 108.903 121.282 108.586 121.285 108.401C121.292 107.921 121.596 107.578 122.32 107.232C122.862 106.972 122.97 106.831 123.086 106.232C123.185 105.726 123.329 105.485 123.611 105.355C123.825 105.256 124 105.071 124 104.942C124 104.469 124.495 103.679 124.961 103.411C125.393 103.162 125.44 103.055 125.44 102.321C125.44 101.612 125.499 101.464 125.904 101.16C126.212 100.93 126.435 100.557 126.565 100.061C126.695 99.5615 126.969 99.1075 127.38 98.7078C127.95 98.1553 128 98.0353 128 97.2332C128 96.3783 128.296 95.8234 128.751 95.8234C128.978 95.8234 129.6 94.048 129.6 93.4002C129.6 93.1112 129.744 92.6897 129.92 92.4627C130.096 92.2361 130.24 91.8384 130.24 91.5794C130.24 91.3204 130.384 90.8222 130.56 90.4728C130.736 90.1234 130.88 89.6155 130.88 89.3444C130.88 88.8632 131.034 88.6532 131.83 88.0554L132.219 87.7623L131.87 87.3124C131.046 86.252 131.837 83.8649 132.952 84.0433C133.737 84.1685 133.91 83.8836 133.332 83.419C132.491 82.7421 132.501 82.2816 133.414 79.7718C133.718 78.9359 133.772 78.88 134.269 78.88C134.8 78.88 134.8 78.8796 134.903 77.9072C135.127 75.7811 135.128 75.7864 134.36 75.7442C132.935 75.666 132.8 75.4536 132.8 73.2862C132.8 71.1132 133.035 70.7784 134.54 70.8039L135.08 70.8128L134.972 69.5769C134.819 67.8445 134.737 67.5575 134.462 67.789C134.34 67.8915 134.24 67.9211 134.24 67.8546C134.24 67.7881 134.143 67.8153 134.025 67.9146C133.589 68.2815 132.789 65.9122 132.963 64.7675C133.03 64.3253 133.056 63.9147 133.021 63.8555C132.986 63.7959 133.028 63.5588 133.115 63.3285C133.261 62.9394 133.24 62.9094 132.821 62.9094C131.967 62.9094 131.53 61.9706 131.839 60.8045C132.109 59.7895 131.774 58.0307 131.194 57.4154C130.802 56.9999 130.08 55.3895 130.08 54.9306C130.08 54.8297 129.956 54.6084 129.805 54.4389C129.653 54.2691 129.481 53.717 129.422 53.2099C129.285 52.0332 128.929 51.0847 128.488 50.7232C128.103 50.4074 127.84 49.6466 127.84 48.8492C127.84 48.433 127.743 48.2745 127.368 48.0779C126.732 47.7447 126.588 47.4301 126.724 46.6725C126.829 46.0921 126.801 46.0143 126.419 45.814C125.768 45.4727 125.48 45.0524 125.4 44.3272C125.31 43.506 125.186 43.2908 124.802 43.2908C124.229 43.2908 123.801 42.4922 123.876 41.564C123.928 40.9296 123.894 40.748 123.738 40.8084C123.356 40.9572 122.105 39.545 122.006 38.8535C121.89 38.0484 121.817 37.9402 121.386 37.9402C120.913 37.9402 120.334 37.5126 120.153 37.029C120.072 36.8138 119.828 36.5689 119.612 36.4854C119.395 36.4019 119.124 36.1526 119.009 35.9313C118.894 35.7104 118.551 35.3594 118.247 35.1523C117.837 34.873 117.66 34.6067 117.563 34.1284C117.492 33.7725 117.318 33.3939 117.176 33.2865C117.012 33.162 116.948 32.9423 116.998 32.6784C117.07 32.2946 117.033 32.2654 116.47 32.2654C115.998 32.2654 115.786 32.1661 115.519 31.8195C115.33 31.5743 114.946 31.2954 114.667 31.2002C114.388 31.1049 114.091 30.8726 114.007 30.6846C113.923 30.4965 113.579 30.2334 113.244 30.0996C112.802 29.9241 112.568 29.6979 112.397 29.2833C112.267 28.9679 112.008 28.6274 111.821 28.5261C110.331 27.7178 109.328 26.61 109.54 26.0053C109.628 25.7544 109.608 25.7353 109.432 25.9015C108.984 26.3222 107.86 26.15 107.31 25.5772C107.033 25.2874 106.444 24.8666 106.003 24.6421C105.465 24.3685 105.184 24.1184 105.15 23.8837C105.076 23.3616 104.801 23.2092 103.852 23.1654C103.17 23.1338 102.895 23.0333 102.507 22.6745C102.206 22.3957 101.696 22.1549 101.171 22.0446C100.654 21.9356 100.236 21.7402 100.1 21.5432C99.9768 21.3657 99.526 21.1253 99.098 21.0094C97.848 20.6705 97.2144 20.3446 96.9944 19.9275C96.808 19.5741 96.6864 19.5376 95.696 19.5376C94.6788 19.5376 94.5664 19.5011 94.0712 19.0106C93.7264 18.6689 93.3812 18.4837 93.0896 18.4837C92.8424 18.4837 92.64 18.4107 92.64 18.3216C92.64 18.2324 92.532 18.1594 92.4 18.1594C92.268 18.1594 92.16 18.095 92.16 18.0163C92.16 17.7711 91.5068 17.6811 91.4188 17.9138C91.1116 18.7249 89.5172 18.5822 88.59 17.6608C87.9604 17.0358 87.9276 17.0245 86.7344 17.0155C84.9704 17.003 84.1144 16.6378 83.9868 15.8433C83.8624 15.0658 83.8384 15.0468 82.8836 14.9535C82.0304 14.8705 82.0188 14.8818 82.0716 15.7346C82.1232 16.5676 81.6336 16.7654 79.8808 16.6191C77.8156 16.4464 76.108 16.4387 74.16 16.5928C72.13 16.7533 71.754 16.5997 71.7724 15.6163C71.7884 14.7606 70.6872 14.5571 70.3856 15.3601ZM61.8732 15.6463C61.478 16.1481 61.4612 16.2138 61.7264 16.2138C61.9296 16.2138 62.0816 16.031 62.198 15.6463C62.2928 15.3342 62.3588 15.0788 62.3452 15.0788C62.3312 15.0788 62.1188 15.3342 61.8732 15.6463ZM91.52 15.9556C91.52 16.2681 91.5848 16.3285 91.8464 16.2592C92.1548 16.1773 92.158 16.1558 91.9016 15.8688C91.5528 15.4785 91.52 15.4858 91.52 15.9556ZM94.08 17.1866C94.08 17.4107 94.1868 17.5109 94.4248 17.5109C94.7596 17.5109 94.7612 17.5011 94.48 17.1866C94.3208 17.0082 94.1656 16.8623 94.1352 16.8623C94.1048 16.8623 94.08 17.0082 94.08 17.1866ZM82.8124 19.5514C83.3968 19.8404 83.4432 19.915 83.4888 20.632C83.5416 21.4662 83.5992 21.5266 83.9952 21.1634C84.406 20.7865 86.5376 20.5295 87.1844 20.7783C87.4268 20.8716 87.8776 20.8655 88.386 20.7621C89.9136 20.4508 90.87 20.9028 90.988 21.9915C91.0252 22.3308 91.1272 22.6539 91.2152 22.709C91.3116 22.7694 91.2764 22.8922 91.1256 23.0187C90.9012 23.2076 90.9044 23.2501 91.1584 23.4451C91.5504 23.7467 91.6716 23.7236 91.6024 23.3608C91.4464 22.5388 92.18 21.8987 93.0312 22.1152C93.4604 22.2242 93.8548 23.2331 93.6644 23.7357C93.59 23.9327 93.6644 23.9964 93.968 23.9964C94.2916 23.9964 94.3536 24.0596 94.286 24.3215C94.184 24.7167 94.4936 25.1313 94.89 25.1313C95.3532 25.1313 95.4228 24.8144 95.0484 24.4106C94.7036 24.0385 94.7036 24.0385 95.0316 23.9518C95.2264 23.8999 95.36 23.7309 95.36 23.5367C95.36 22.9052 97.492 23.3636 97.75 24.0503C97.8976 24.4439 98.6892 24.6397 100.148 24.6437C100.67 24.6449 101.28 25.0146 101.28 25.3304C101.28 25.7317 101.794 25.9801 102.443 25.8918C103.06 25.8083 103.151 25.8476 103.679 26.4272C103.992 26.771 104.446 27.1029 104.688 27.1641C104.929 27.2258 105.325 27.52 105.568 27.8184C105.81 28.1167 106.272 28.4718 106.594 28.608C106.916 28.7442 107.274 28.9914 107.389 29.1576C107.505 29.3234 107.877 29.5516 108.216 29.6643C108.672 29.8159 108.889 30.0088 109.054 30.4097C109.177 30.7077 109.465 31.0826 109.694 31.2435C109.924 31.404 110.383 31.7729 110.715 32.0627C111.047 32.3525 111.47 32.5897 111.655 32.5897C111.842 32.5897 112.147 32.8041 112.344 33.0745C112.539 33.3412 112.847 33.6063 113.029 33.6638C113.211 33.7214 113.81 34.2508 114.36 34.841C114.911 35.4307 115.613 36.1839 115.92 36.5142C116.228 36.8446 116.48 37.1842 116.48 37.2686C116.48 37.3529 116.732 37.5726 117.04 37.7566C117.566 38.0711 117.6 38.1429 117.6 38.9353C117.6 39.7764 117.898 40.3723 118.319 40.3723C118.423 40.3723 118.591 40.5547 118.691 40.7776C118.791 41.0006 118.965 41.1886 119.076 41.1955C120.752 41.2977 121.126 43.3658 119.489 43.4776C118.854 43.521 118.822 43.8124 119.419 44.1294L119.76 44.3106L119.44 43.9349C119.258 43.722 119.224 43.6227 119.36 43.7062C119.687 43.9069 119.885 43.9 120.111 43.6803C120.441 43.3589 121.043 43.613 121.427 44.236C121.629 44.5635 122.018 44.977 122.292 45.1553C122.606 45.36 122.88 45.739 123.035 46.1817C123.17 46.568 123.406 46.9547 123.56 47.041C123.767 47.1573 123.84 47.4038 123.84 47.9903C123.84 49.0604 124.058 49.5683 124.824 50.285C125.444 50.8658 125.469 50.9254 125.416 51.7467C125.366 52.501 125.403 52.6246 125.719 52.7847C126.696 53.2801 126.898 53.8824 126.47 55.0149C126.415 55.1596 126.602 55.4835 126.939 55.8248C127.946 56.8447 128.604 59.3452 128.07 60.1182C127.801 60.5082 127.766 60.466 128.551 60.7121C129.674 61.0643 129.224 62.6719 128.04 62.5389L127.36 62.4627L127.362 63.132C127.364 63.5 127.418 63.7266 127.482 63.6354C127.836 63.1368 128.618 63.3646 128.987 64.0736C129.947 65.9183 129.363 68.2016 127.966 68.0666L127.36 68.0083L127.393 73.9303L127.426 79.8528L127.524 74.178C127.578 71.0568 127.636 68.4805 127.651 68.4529C127.744 68.2912 128 68.6596 128.002 68.9588C128.004 69.2474 128.034 69.2685 128.16 69.0707C128.284 68.8769 128.318 68.9101 128.329 69.2328C128.341 69.6025 128.354 69.6094 128.474 69.3139C128.592 69.0232 128.617 69.018 128.716 69.264C128.8 69.4707 128.914 69.5052 129.179 69.403C130.14 69.0326 130.669 70.7913 130.618 74.1853C130.578 76.7742 130.035 78.2367 129.172 78.0782C128.762 78.0028 128.585 79.6177 128.976 79.8629C129.663 80.2934 129.639 82.2225 128.933 83.2293C128.645 83.6412 128.637 83.7153 128.855 83.9594C129.5 84.6817 129.431 85.6261 128.679 86.3566C128.455 86.5738 128.333 86.9812 128.257 87.7587C128.114 89.2268 127.952 89.609 127.087 90.5028L126.352 91.2624L126.556 92.0006C126.817 92.9442 126.602 93.5259 125.737 94.2206C124.906 94.887 124.71 95.2693 125.032 95.5952C125.595 96.1655 125.534 96.6487 124.82 97.2692C124.405 97.6304 124.092 98.0722 123.994 98.4383C123.907 98.7613 123.668 99.1991 123.462 99.4111C123.257 99.6227 123.048 100.051 122.998 100.363C122.845 101.329 122.582 101.825 122.073 102.113C121.779 102.279 121.547 102.565 121.493 102.828C121.345 103.548 120.952 103.786 120.027 103.715C119.397 103.668 119.138 103.721 118.896 103.951C118.588 104.241 118.579 104.238 118.514 103.805C118.454 103.402 118.446 103.409 118.424 103.895C118.41 104.208 118.488 104.461 118.613 104.51C118.846 104.6 118.875 104.753 118.888 105.936C118.895 106.528 118.795 106.874 118.489 107.323C118.264 107.651 118.08 108.047 118.08 108.203C118.08 108.358 117.903 108.664 117.687 108.883C117.021 109.558 115.61 109.343 115.803 108.597C115.844 108.438 115.797 108.308 115.699 108.308C115.6 108.308 115.52 108.381 115.52 108.47C115.52 108.559 115.444 108.632 115.35 108.632C115.257 108.632 115.216 108.574 115.26 108.503C115.303 108.432 115.181 108.383 114.989 108.394C113.884 108.456 112.849 109.668 113.869 109.705C114.157 109.716 114.357 109.666 114.314 109.595C114.27 109.524 114.326 109.412 114.437 109.347C114.549 109.282 114.588 109.286 114.526 109.357C114.463 109.428 114.517 109.638 114.646 109.825C115.015 110.359 114.93 110.844 114.4 111.226C114.136 111.417 113.92 111.714 113.92 111.886C113.92 112.71 112.516 113.128 112.113 112.424C112.036 112.29 111.746 112.212 111.378 112.226C110.651 112.255 110.375 113.363 111.041 113.578C111.902 113.855 111.589 115.236 110.578 115.614C110.196 115.758 109.816 115.995 109.735 116.142C109.654 116.288 109.248 116.606 108.834 116.848C107.864 117.412 107.165 117.96 106.396 118.755C105.825 119.345 105.721 119.39 104.978 119.355C104.234 119.321 104.158 119.353 103.929 119.802C103.588 120.471 103.078 120.793 102.361 120.793C101.863 120.793 101.719 120.868 101.566 121.21C101.317 121.763 100.657 122.09 99.7872 122.09C99.1556 122.09 99.058 122.141 98.8856 122.562C98.6728 123.083 98.244 123.309 97.04 123.537C96.6 123.62 95.844 123.875 95.36 124.103C94.7164 124.407 94.2144 124.519 93.4908 124.52C92.6712 124.521 92.4856 124.573 92.408 124.82C92.1428 125.667 91.7636 125.786 88.9664 125.9C87.5176 125.958 86.2084 126.073 86.0568 126.156C85.4728 126.473 85.0304 126.329 84.7496 125.733L84.48 125.159L85.04 124.592C85.548 124.077 85.6 123.939 85.6 123.108C85.6 122.201 85.9936 121.441 86.4636 121.441C86.5556 121.441 86.8916 121.135 87.2096 120.761L87.7876 120.08L87.414 119.522C86.928 118.797 86.9408 118.648 87.5476 117.948C87.9812 117.448 88.0568 117.232 88.0676 116.466C88.0784 115.677 88.1388 115.517 88.5644 115.14C89.4956 114.318 89.9688 113.509 89.9848 112.711C89.9996 111.992 90.0184 111.965 90.6 111.825C91.0812 111.709 91.2 111.606 91.2 111.303C91.2 110.952 91.9124 110.254 92.2704 110.254C92.3476 110.254 92.5396 110.033 92.6968 109.764C93.39 108.574 96.316 108.577 96.4216 109.767C96.4332 109.901 96.4512 110.187 96.4616 110.402C96.4868 110.937 96.61 110.768 96.6936 110.086C96.8332 108.942 97.2272 108.63 98.5276 108.635C100.748 108.642 102.53 109.689 101.72 110.51C101.425 110.809 101.68 110.902 102.792 110.902H103.983L103.894 110.171L103.806 109.44L104.557 109.103C105.082 108.868 105.552 108.783 106.122 108.821C106.924 108.875 106.938 108.868 107.075 108.34C107.184 107.917 107.36 107.741 107.906 107.503C108.361 107.306 108.631 107.073 108.694 106.823C108.934 105.884 110.44 104.579 111.29 104.575L112.08 104.572L111.68 104.255C111.46 104.08 111.156 103.936 111.004 103.934C110.671 103.929 110.32 103.27 110.187 102.396C110.073 101.651 110.512 101.012 111.136 101.012C111.746 101.012 112 100.593 112 99.5919C112 98.8805 112.076 98.5996 112.348 98.3065L112.696 97.9312H112.293C111.372 97.9312 111.028 96.8481 111.602 95.7541C112.105 94.7958 112.104 94.2932 111.6 93.686C110.856 92.7906 111.268 91.6078 112.324 91.6078C112.682 91.6078 112.853 91.5044 112.987 91.2077C113.086 90.9872 113.228 90.8457 113.303 90.8928C113.378 90.9398 113.44 90.8239 113.44 90.635C113.44 90.1773 113.733 90.3747 114.01 91.0192C114.139 91.3204 114.23 91.4112 114.234 91.243C114.237 91.0869 114.312 90.9593 114.4 90.9593C114.488 90.9593 114.56 90.6674 114.56 90.3107C114.56 89.6844 114.252 89.4108 114.004 89.8174C113.862 90.0501 113.421 89.8255 112.843 89.2256C112.558 88.9305 112.252 88.6893 112.163 88.6893C112.073 88.6893 112 88.511 112 88.2925C112 88.0744 111.824 87.5596 111.608 87.149C111.084 86.1502 111.32 85.4466 112.18 85.4466C112.813 85.4466 113.28 85.9626 113.28 86.6626C113.28 87.3245 113.367 87.3561 113.87 86.8774C114.324 86.4445 114.34 86.2573 113.92 86.2573C113.744 86.2573 113.592 86.2025 113.582 86.1357C113.353 84.6091 113.806 83.9873 115.149 83.9873C115.358 83.9873 115.572 83.8779 115.622 83.7441C115.673 83.6104 115.843 83.5009 116 83.5009C116.329 83.5009 116.48 83.1876 116.568 82.3214C116.716 80.8621 117.036 80.2464 117.68 80.1787C117.768 80.1698 118.009 80.0681 118.215 79.9529C118.423 79.8374 118.769 79.7896 118.992 79.8467L119.395 79.9489L118.939 79.5512C118.606 79.261 118.41 79.1933 118.212 79.3007C117.459 79.7089 116.007 78.8415 115.994 77.9769C115.984 77.2444 115.614 76.8083 114.944 76.7386C114.245 76.666 113.76 76.3012 113.76 75.848C113.76 75.6794 113.58 75.3592 113.361 75.1366C113.141 74.9141 112.857 74.527 112.729 74.2765C112.601 74.026 112.316 73.7013 112.097 73.5554C111.768 73.3373 111.688 73.1383 111.648 72.437C111.604 71.6487 111.559 71.5627 111.057 71.309C110.302 70.9271 110.266 70.8736 110.08 69.8757C109.963 69.249 109.782 68.8631 109.46 68.5567C108.701 67.8352 108.652 66.8907 109.334 66.1656C109.858 65.6098 109.882 65.5288 109.905 64.2876C109.951 61.7805 110.262 60.9755 111.278 60.7295C111.727 60.6209 111.992 60.3939 111.998 60.1125C111.999 60.0457 111.642 59.9909 111.204 59.9909C110.306 59.9909 109.97 59.6719 109.868 58.7234C109.837 58.4373 109.665 58.04 109.486 57.8406C109.111 57.4239 108.8 56.5285 108.825 55.9375C108.864 54.9999 109.149 53.2355 109.315 52.8978C109.543 52.4325 109.45 52.3482 108.645 52.2931C107.492 52.2136 107.092 51.5756 107.474 50.4293C107.7 49.7511 107.695 49.7207 107.235 49.0669C106.312 47.7548 106.203 47.4241 106.477 46.7589C106.828 45.9069 106.792 45.7755 106.066 45.2887L105.412 44.8501L105.508 43.1679C105.584 41.8469 105.562 41.5121 105.405 41.6102C104.694 42.0553 103.034 41.4229 102.53 40.5154C102.338 40.1692 102.088 39.8859 101.975 39.8859C101.861 39.8859 101.657 39.6674 101.52 39.3999C101.381 39.1279 101.028 38.8105 100.715 38.6783C100.391 38.5409 100.093 38.2681 100.002 38.0261C99.916 37.7975 99.6608 37.5389 99.4352 37.4518C99.1868 37.3561 98.9256 37.0533 98.7744 36.6849C98.4488 35.8924 98.31 35.8174 97.3932 35.9378C96.7476 36.0221 96.5688 35.9836 96.2628 35.6922C96.0464 35.4859 95.516 35.2779 94.9496 35.177C94.1964 35.0424 93.9092 34.9018 93.5608 34.4948C93.3192 34.2127 92.8152 33.8329 92.4408 33.6509C91.7816 33.3298 91.76 33.295 91.76 32.5508C91.76 32.085 91.6812 31.7514 91.56 31.7044C91.4172 31.6493 91.36 31.8479 91.36 32.3975C91.36 33.1819 90.8868 33.7246 90.2032 33.7246C89.7768 33.7246 89.232 32.9679 89.3412 32.5277C89.396 32.3051 89.3656 32.0757 89.2728 32.0177C89.156 31.9448 89.1556 31.8499 89.2708 31.7093C89.3624 31.5974 89.384 31.4462 89.3188 31.3732C89.2532 31.3007 89.344 31.2934 89.52 31.3574C89.7628 31.4458 89.7956 31.4284 89.6556 31.2853C89.5216 31.1487 89.3896 31.1446 89.1756 31.2707C89.0128 31.3663 88.9304 31.447 88.9916 31.4498C89.0532 31.4527 89.0292 31.6699 88.9388 31.933C88.716 32.5812 88.0188 32.8086 86.9076 32.5949C85.5016 32.3246 85.1248 31.9172 85.3208 30.8779C85.3632 30.6529 85.3536 30.494 85.2992 30.5244C84.7948 30.8074 83.9788 31.1179 83.52 31.2022C83.212 31.2589 82.8588 31.3266 82.7352 31.3526C82.612 31.3785 82.036 31.2646 81.4552 31.0992C80.8748 30.9338 80.004 30.7109 79.52 30.6043C78.2824 30.3307 78.2996 29.5686 79.5452 29.4835C80.9132 29.3895 76.6152 29.2322 74.88 29.3125C72.92 29.4033 72.8072 29.4239 73.6596 29.5382C74.998 29.7178 75.7264 30.5034 74.52 30.4657C74.0272 30.4503 74.0212 30.4426 74.4 30.3197C74.754 30.2046 74.7264 30.186 74.16 30.1548C73.5456 30.1207 73.5392 30.1146 74 30.008C74.4444 29.9047 74.4544 29.8876 74.1336 29.7774C73.9432 29.7117 73.5976 29.7065 73.3656 29.7652L72.944 29.8726L73.298 30.1236C73.6368 30.3643 73.5916 30.3874 72.2412 30.6704C71.4652 30.8329 70.5912 31.1089 70.2988 31.2841L69.7668 31.6018L69.2528 31.1633C68.7432 30.7287 67.662 30.3489 67.1992 30.4418C67.0192 30.4782 66.972 30.6647 67.0124 31.1787C67.0904 32.1722 66.7236 32.4535 65.1852 32.5812C64.1844 32.6643 63.9264 32.7449 63.7028 33.0453C63.2948 33.5937 62.3388 33.2597 62.5684 32.6489C62.6672 32.3846 62.6644 32.2812 62.5596 32.3469C62.4716 32.4016 62.3912 32.3696 62.38 32.2751C62.3316 31.8584 62.3136 31.7993 62.2 31.6845C62.134 31.6177 62.0752 31.6663 62.0692 31.7924C62.0048 33.1665 61.7184 33.6363 60.792 33.8888C60.4564 33.9804 60.0804 34.2289 59.9336 34.4559C59.7216 34.7842 59.542 34.8596 58.9744 34.8596C58.3544 34.8596 57.314 35.2349 55.69 36.0444C55.462 36.1583 55.2448 36.4558 55.1664 36.7615C54.8204 38.1153 53.12 37.65 53.12 36.2017C53.12 35.8373 53.0444 35.6703 52.88 35.6703C52.748 35.6703 52.64 35.7351 52.64 35.8146C52.64 35.8936 52.514 35.9484 52.36 35.9362C52.1844 35.922 52.0884 36.0193 52.1024 36.1972C52.1144 36.3533 52.0604 36.481 51.9824 36.481C51.6772 36.481 51.8596 36.9479 52.1836 36.9966C53.5132 37.1972 52.7044 39.2397 50.9368 40.1477C50.4356 40.4051 49.91 40.7249 49.7692 40.8587C49.6284 40.9925 49.3552 41.2113 49.162 41.3451C48.9688 41.4789 48.78 41.7727 48.7424 41.9981C48.6132 42.7744 48.2024 43.5494 47.768 43.838C47.5284 43.9973 47.3688 44.1643 47.4132 44.2093C47.59 44.3884 47.1608 45.2028 46.7804 45.4091C46.5584 45.5295 46.2796 45.8635 46.1608 46.1509C46.0008 46.5392 45.7952 46.7155 45.3596 46.8371C44.6408 47.0386 44.0164 47.6924 43.8932 48.3738C43.7536 49.1472 43.414 49.5898 42.8392 49.7483C42.5076 49.8399 42.3444 49.9733 42.3872 50.1176C42.7304 51.274 42.434 52.2083 41.7248 52.2083C40.9876 52.2083 40.7948 52.4807 41.0664 53.139C41.6 54.4333 41.1908 55.6173 40.0364 56.1187L39.3484 56.4174L39.6344 56.8597C40.3012 57.8913 39.8724 60.618 38.9864 60.9812C38.3148 61.256 38.2364 61.4064 38.498 61.9147C38.8168 62.5341 38.8068 66.136 38.4852 66.5672C38.356 66.7403 38.2476 66.9912 38.244 67.125C38.2408 67.2588 38.1212 67.5871 37.9784 67.8546C37.8356 68.1222 37.656 68.6637 37.5792 69.0585C37.3804 70.0771 37.066 70.3678 36.162 70.3678C35.1644 70.3678 35.1136 70.4691 35.7872 71.1128C36.5852 71.8756 36.402 73.8943 35.5084 74.1816C35.32 74.2425 35.048 74.5919 34.88 74.9887C34.7124 75.3851 34.44 75.7349 34.252 75.7957C34.0692 75.8541 33.92 76.0037 33.92 76.1277C33.92 76.407 32.1572 78.1483 31.8736 78.1496C31.76 78.15 31.3852 78.4422 31.04 78.7989C30.6948 79.1556 30.298 79.4475 30.158 79.4475C30.018 79.4475 29.7988 79.7012 29.6712 80.0117C29.5432 80.3222 29.2656 80.6907 29.0544 80.8309C28.8432 80.9712 28.6272 81.2464 28.574 81.4422C28.5208 81.638 27.9744 82.3457 27.3592 83.0145L26.2408 84.2305L25.856 83.794C25.1308 82.9711 25.1284 81.2549 25.8516 80.1755C26.0628 79.8601 26.2508 79.3976 26.2696 79.1479C26.3044 78.6838 26.8168 78.6011 27.296 78.9825C27.4216 79.0827 27.4524 78.7649 27.4036 77.8662C27.3128 76.197 27.2012 75.9587 27.2452 77.5274C27.2644 78.2104 27.226 78.7349 27.16 78.6935C27.094 78.6518 27.0272 78.0928 27.0116 77.4516L26.9836 76.2858L26.88 77.4208L26.7764 78.5557L26.7484 77.6137C26.73 77.0069 26.6608 76.7094 26.5528 76.7767C26.4612 76.8342 26.2992 76.8079 26.1928 76.7187C26.0864 76.6295 25.7476 76.529 25.4396 76.4953C24.984 76.4459 24.8276 76.3267 24.5968 75.8545C23.9268 74.482 24.2732 69.6454 25.042 69.6361C25.5836 69.6296 26.24 69.1663 26.24 68.7906C26.24 68.4987 26.3064 68.4132 26.48 68.4809C26.626 68.5376 26.72 68.4809 26.72 68.3358C26.72 68.2048 26.5872 68.0978 26.4248 68.0978C25.1844 68.0978 25.14 63.4664 26.3796 63.3772C26.5228 63.3667 26.748 63.3484 26.88 63.3367C27.012 63.3245 27.2076 63.4242 27.3148 63.558C27.4768 63.7598 27.5108 63.7051 27.5148 63.2337C27.5196 62.6792 27.5044 62.6654 26.84 62.6285C25.202 62.5373 25.1724 60.6395 26.8092 60.6395C27.6352 60.6395 27.668 60.5726 27.1004 60.0396C26.7252 59.6869 26.6916 59.5649 26.7824 58.886C26.838 58.4681 26.9288 57.7072 26.984 57.1953C27.0752 56.3473 27.1452 56.2135 27.7656 55.6984C28.4344 55.143 28.4444 55.1199 28.288 54.4957C28.098 53.7381 28.378 52.9765 28.8812 52.882C29.4576 52.7734 29.564 52.5719 29.4316 51.8419C29.3048 51.1447 29.748 49.9384 30.1312 49.9384C30.6096 49.9384 31.04 49.0925 31.04 48.1521C31.04 47.373 31.0976 47.1622 31.3468 47.0268C31.516 46.9352 31.7052 46.6239 31.768 46.3345C31.9228 45.6195 32.2664 45.1245 32.6884 45.0078C32.8816 44.9543 33.2356 44.5948 33.4748 44.2089C33.9556 43.4343 34.7592 43.2981 34.9656 43.9567C35.0184 44.1258 35.1328 44.2636 35.2204 44.2636C35.3076 44.2636 35.3396 44.1987 35.2912 44.1197C35.2428 44.0406 35.3288 43.8765 35.4816 43.7549C35.7336 43.555 35.7392 43.5611 35.5404 43.8177C35.4044 43.9936 35.3868 44.1015 35.4948 44.1015C35.5904 44.1015 35.7464 43.9543 35.8412 43.7747C35.936 43.5952 35.9568 43.4578 35.8868 43.4699C35.0324 43.6146 34.55 43.3179 34.4528 42.5879C34.3596 41.8858 34.9316 41.183 35.5968 41.183C35.886 41.183 36.052 41.065 36.1572 40.7853C36.2392 40.5668 36.528 40.2718 36.7992 40.1295C37.2696 39.883 37.2884 39.8348 37.2136 39.0602C37.1488 38.3922 37.1908 38.2004 37.4512 37.973C38.2732 37.2548 39.4052 36.0132 39.7412 35.4603C39.8928 35.211 40.194 34.939 40.4104 34.8555C40.6268 34.772 40.8864 34.5207 40.9872 34.2966C41.0876 34.0728 41.3972 33.8061 41.6744 33.7048C41.9516 33.603 42.2968 33.3108 42.4416 33.055C42.6092 32.7595 42.8392 32.5876 43.0724 32.5844C43.484 32.5787 44 32.2399 44 31.9752C44 31.8799 44.3296 31.6351 44.7324 31.4312C45.2204 31.1843 45.534 30.8921 45.6724 30.5561C45.806 30.2318 46.1024 29.9472 46.5004 29.7604C46.8412 29.6007 47.3 29.3044 47.52 29.1021C47.74 28.9002 48.0756 28.6874 48.2656 28.6291C48.456 28.5711 48.7912 28.2849 49.0104 27.9935C49.2508 27.6745 49.6808 27.3725 50.0904 27.2359C50.556 27.0798 50.8676 26.8423 51.0772 26.4824C51.4188 25.895 51.6356 25.7957 52.5536 25.8054C53.0924 25.8111 53.256 25.7252 53.6488 25.2286L54.1112 24.6449H55.4284C56.6444 24.6449 56.7612 24.6157 56.9456 24.2671C57.244 23.7021 57.958 23.3478 58.7988 23.3478H59.5484L59.4944 24.2907C59.4408 25.2193 59.446 25.2327 59.84 25.1609C60.404 25.058 60.64 24.8281 60.64 24.3819C60.64 24.1472 60.734 23.9964 60.88 23.9964C61.1176 23.9964 61.1812 23.7597 61.1276 23.0742C61.0808 22.4804 61.698 21.998 62.3644 22.1075C63.0588 22.2218 63.26 22.4107 63.302 22.9859C63.3196 23.2295 63.34 23.4844 63.3472 23.5517C63.354 23.6194 63.5012 23.5854 63.6736 23.4763C63.9636 23.2927 63.9676 23.2562 63.7288 22.9887C63.572 22.8128 63.5428 22.6993 63.6552 22.6993C63.7616 22.6993 63.8412 22.4415 63.8424 22.0913C63.8468 20.9912 64.3316 20.7021 66.0584 20.7702C66.7304 20.797 67.568 20.7658 67.92 20.7013C68.624 20.5724 70.5836 20.9235 70.9688 21.2477C71.1512 21.4005 71.2052 21.3949 71.2236 21.2194C71.2368 21.0969 71.262 20.8874 71.28 20.7536C71.298 20.6199 71.3232 20.3844 71.3364 20.2303C71.4108 19.3519 72.81 19.1408 78.1724 19.1979C81.7472 19.2364 82.2532 19.2749 82.8124 19.5514ZM48.4768 21.9737C48.1676 22.3511 48.3884 22.4224 48.7192 22.0515C48.8788 21.8728 48.9352 21.7264 48.8444 21.7264C48.7536 21.7264 48.588 21.8375 48.4768 21.9737ZM63.56 23.9461C63.714 23.9866 63.966 23.9866 64.12 23.9461C64.274 23.9052 64.148 23.8719 63.84 23.8719C63.532 23.8719 63.406 23.9052 63.56 23.9461ZM90.76 23.9461C90.914 23.9866 91.166 23.9866 91.32 23.9461C91.474 23.9052 91.348 23.8719 91.04 23.8719C90.732 23.8719 90.606 23.9052 90.76 23.9461ZM109.991 24.3348C109.826 24.6052 110.197 24.9153 110.418 24.6915C110.603 24.5043 110.487 24.1585 110.24 24.1585C110.162 24.1585 110.05 24.238 109.991 24.3348ZM109.474 24.8553C109.496 25.1253 109.614 25.2375 109.901 25.2615L110.297 25.2947L109.92 24.8885C109.459 24.3912 109.436 24.3896 109.474 24.8553ZM51.84 28.2371C51.84 28.5764 51.8496 28.578 52.16 28.293C52.336 28.1317 52.48 27.9744 52.48 27.9436C52.48 27.9128 52.336 27.8877 52.16 27.8877C51.9388 27.8877 51.84 27.9959 51.84 28.2371ZM102.64 28.212C102.799 28.3903 102.954 28.5362 102.985 28.5362C103.015 28.5362 103.04 28.3903 103.04 28.212C103.04 27.9878 102.933 27.8877 102.695 27.8877C102.36 27.8877 102.359 27.8974 102.64 28.212ZM103.21 29.5245C103.198 29.8362 103.696 30.3238 104.012 30.3096C104.138 30.3039 104.076 30.2326 103.876 30.1511C103.676 30.0696 103.447 29.8374 103.366 29.6343C103.272 29.3972 103.217 29.3579 103.21 29.5245ZM67.6768 29.7563C67.3676 30.1337 67.5884 30.205 67.9192 29.8341C68.0788 29.6554 68.1352 29.5091 68.0444 29.5091C67.9536 29.5091 67.788 29.6201 67.6768 29.7563ZM88.96 30.8386C88.96 31.1158 89.0028 31.1519 89.152 31.0007C89.2576 30.8937 89.4916 30.8049 89.672 30.8037C89.8524 30.8025 90.108 30.7304 90.24 30.644C90.4136 30.5305 90.2696 30.4863 89.72 30.4843C89.0428 30.4823 88.96 30.5208 88.96 30.8386ZM62.2952 30.8941C62.1564 31.2605 62.2808 31.28 62.6 30.9411C62.8368 30.6898 62.8424 30.644 62.6348 30.644C62.5004 30.644 62.3472 30.7567 62.2952 30.8941ZM117.096 30.9278C117.069 31.2419 117.072 31.7932 117.101 31.9817C117.112 32.0485 117.232 32.1033 117.37 32.1033C117.507 32.1033 117.582 32.0433 117.537 31.9695C117.492 31.8961 117.612 31.8414 117.803 31.8479C118.253 31.8637 118.357 31.3676 117.989 30.9561C117.64 30.5658 117.128 30.5492 117.096 30.9278ZM48.5608 31.1296C48.4012 31.3084 48.3448 31.4547 48.4356 31.4547C48.6368 31.4547 49.036 30.9914 48.9284 30.8824C48.886 30.8394 48.7208 30.9505 48.5608 31.1296ZM94.56 32.0599C94.78 32.1008 95.068 32.2184 95.2 32.3213C95.4088 32.4843 95.4116 32.4717 95.2204 32.2249C95.0992 32.0684 94.812 31.9508 94.5804 31.963L94.16 31.9853L94.56 32.0599ZM45.2928 33.7704C45.2856 33.9293 45.118 34.1255 44.92 34.2062C44.6764 34.3051 44.644 34.3558 44.8204 34.3631C45.1496 34.376 45.4964 33.9638 45.3876 33.6894C45.3368 33.5609 45.3004 33.5917 45.2928 33.7704ZM99.1848 34.8381C99.5952 35.4218 99.9464 35.7157 100.15 35.6452C100.45 35.541 99.9332 34.8312 99.3924 34.6038L98.8644 34.3821L99.1848 34.8381ZM42.5232 36.1198C42.472 36.318 42.2612 36.5487 42.0552 36.6326C41.8212 36.7274 41.776 36.7886 41.9352 36.7951C42.2604 36.8081 42.7744 36.2406 42.6844 35.9674C42.6456 35.8499 42.576 35.9159 42.5232 36.1198ZM52.6532 36.4676C52.2848 36.8409 52.0172 36.9317 52.2992 36.5876C52.3972 36.468 52.424 36.3103 52.3588 36.2374C52.2932 36.1644 52.3252 36.1543 52.4288 36.2143C52.5328 36.2747 52.666 36.2451 52.7248 36.1486C52.784 36.0521 52.8668 36.0083 52.9092 36.0513C52.952 36.0943 52.8368 36.2815 52.6532 36.4676ZM67.04 36.3699C67.7192 36.8677 68.1548 37.3849 68.2448 37.8008C68.3984 38.5097 68.5908 38.3545 68.6764 37.4522C68.7812 36.3452 69.1232 35.9946 70.0972 35.9946C71.448 35.9946 71.924 36.4299 72.0344 37.7655C72.0772 38.2848 72.4788 38.7096 72.4808 38.2373C72.4912 35.7587 75.3224 35.2106 75.8628 37.5827C76.0908 38.5831 76.1112 38.59 76.6868 37.8591C77.6728 36.607 79.6776 37.1765 79.6824 38.7104C79.6864 39.9333 79.8976 40.0881 80.5304 39.3338C81.4304 38.2617 83.1908 39.3318 83.4452 41.1055C83.6028 42.2052 83.6392 42.2344 84.156 41.6734C85.2656 40.47 86.1168 41.1773 86.212 43.3812C86.2836 45.0418 86.3616 45.1635 86.88 44.4257C87.5052 43.536 88.2432 43.8124 89.094 45.2555C89.52 45.9778 89.5212 46.0645 89.1132 46.5416C88.5524 47.1967 88.7484 47.5967 89.6004 47.5355C91.3292 47.4115 91.7596 48.4771 91.0264 51.064C90.9784 51.2335 91.1632 51.3295 91.6956 51.4118C92.8876 51.5967 93.6 52.0794 93.6 52.7024C93.6 52.7811 93.3916 53.0863 93.1368 53.3802C92.4032 54.2265 92.3944 55.107 93.1164 55.3469C94.174 55.6988 94.2068 57.5058 93.1728 58.4652C92.5812 59.0149 92.5976 59.081 93.3676 59.248C94.13 59.4133 94.77 60.1016 94.6636 60.6407C94.5112 61.4141 93.644 62.5495 93.1168 62.667C92.6216 62.7773 92.4544 63.0716 92.8872 63.0716C94.2184 63.0716 94.3256 66.0521 93.01 66.4817C92.1108 66.7756 92.1124 66.7711 92.718 67.4189C93.8716 68.6523 93.3012 70.1987 91.5972 70.4578C90.974 70.5526 90.4116 70.8542 90.858 70.8542C91.4056 70.8542 91.4716 73.3616 90.94 73.9571C90.6104 74.326 89.5668 74.3645 89.2268 74.0199C89.0192 73.8095 88.9796 73.8112 88.8956 74.0333C88.7132 74.5148 88.8024 74.8853 89.2216 75.3904L89.6432 75.8983L89.1952 76.3721C88.5924 77.0093 87.8928 77.2278 87.06 77.0381C86.2412 76.8517 86.1476 76.9716 86.218 78.1192C86.3008 79.471 85.3456 80.7263 84.6976 80.1163C83.828 79.2979 83.2212 79.4998 83.3232 80.5735C83.4552 81.9671 81.9308 82.8179 80.522 82.1369C79.8388 81.807 79.8648 81.7823 79.68 82.9338C79.4068 84.6351 78.0512 85.104 76.8692 83.9063C76.1748 83.2022 76.0612 83.1997 75.9348 83.884C75.64 85.4762 72.8964 85.5394 72.5544 83.9618C72.408 83.2865 72.1452 83.4636 71.912 84.3943C71.4076 86.4064 69.014 86.4871 68.7208 84.5017C68.5664 83.4567 68.4712 83.3672 68.1756 83.9885C68.0348 84.2836 67.812 84.5751 67.68 84.6363C67.548 84.6971 67.0892 84.9192 66.6608 85.1296L65.8816 85.5122L65.3408 84.9144C65.0336 84.5743 64.8 84.1446 64.8 83.918C64.8 83.2075 63.8228 83.3051 63.0936 84.0883C62.178 85.0724 61.232 84.5974 61.0424 83.0579C60.8816 81.7555 60.8416 81.6833 60.4252 81.9537C60.008 82.2245 58.406 82.4414 57.9372 82.2906C57.4488 82.1333 57.22 81.5974 57.2092 80.5849C57.1984 79.5322 56.9376 79.3737 56.2616 80.0089C55.6668 80.5674 55.4804 80.5322 54.7956 79.7312C53.9588 78.7523 53.784 78.3279 54.1156 78.0819C54.2604 77.9749 54.43 77.6794 54.4932 77.426L54.6072 76.9647L53.8112 77.06C51.6088 77.3243 50.2296 76.1905 51.36 75.0446C51.624 74.7771 51.84 74.4034 51.84 74.2141C51.84 73.9465 51.7972 73.9133 51.648 74.0645C51.4364 74.2789 50.2708 74.3255 49.97 74.1318C49.4872 73.8205 49.2608 72.0017 49.594 71.1136C49.778 70.6227 49.7156 70.5745 48.6236 70.3645C47.0272 70.0577 46.566 68.4768 47.76 67.4055C48.4716 66.7675 48.464 66.714 47.6336 66.502C45.912 66.0626 45.8448 63.5255 47.5448 63.147C48.19 63.0035 48.1104 62.8446 47.2808 62.6196C46.3436 62.3655 45.9676 61.9629 45.8356 61.0724C45.648 59.8049 46.2024 59.1803 47.5148 59.1803C48.0608 59.1803 48.1652 58.931 47.684 58.7761C47.0616 58.5759 46.7224 57.9209 46.8156 57.0976C46.97 55.7271 47.0268 55.6023 47.6056 55.357C48.298 55.064 48.2972 54.8933 47.6 53.8994C46.564 52.4224 46.9084 51.6729 48.736 51.4272C49.4492 51.3316 49.6632 51.2428 49.6116 51.0653C49.5736 50.936 49.5144 50.2465 49.48 49.5331C49.396 47.8079 49.5484 47.5927 50.868 47.5732C52.1088 47.555 52.1652 47.4804 51.4524 46.799C50.4276 45.8193 51.4172 44.1416 53.1176 43.9762C53.5736 43.9316 53.9684 43.8141 53.9952 43.7148C54.5484 41.6564 54.8356 41.183 55.5316 41.183C56.1976 41.183 56.4668 41.3358 56.7376 41.8664C57.068 42.5133 57.178 42.3406 57.2056 41.1351C57.254 39.0111 58.6988 38.149 60.1084 39.4031C60.7648 39.9868 60.96 39.9151 60.96 39.0898C60.96 37.1518 62.2688 36.6565 63.8428 37.999C64.5744 38.6228 64.7408 38.5531 64.8528 37.5754C65.012 36.1851 66.0252 35.6265 67.04 36.3699ZM106.36 42.3228C106.558 42.4035 106.726 42.5996 106.733 42.7585C106.74 42.9373 106.777 42.9681 106.828 42.8396C106.936 42.5652 106.59 42.153 106.26 42.1659C106.084 42.1732 106.116 42.2239 106.36 42.3228ZM45.6552 42.568C45.5164 42.9345 45.6408 42.9539 45.96 42.6151C46.1968 42.3637 46.2024 42.3179 45.9948 42.3179C45.8604 42.3179 45.7072 42.4306 45.6552 42.568ZM35.7336 44.0411C35.4212 44.3787 35.314 44.5879 35.4536 44.5879C35.7528 44.5879 36.32 44.0038 36.32 43.6961C36.32 43.3957 36.3448 43.3812 35.7336 44.0411ZM118.56 43.66C118.56 43.8137 118.704 44.0852 118.88 44.2636C119.056 44.4419 119.324 44.5879 119.476 44.5879C119.704 44.5879 119.691 44.5453 119.401 44.3394C119.208 44.2024 118.94 43.9308 118.805 43.7358C118.602 43.4416 118.56 43.4286 118.56 43.66ZM54.08 44.3349C54.08 44.7451 54.3152 45.02 54.4612 44.7808C54.578 44.5895 54.3924 43.9393 54.2212 43.9393C54.1436 43.9393 54.08 44.1173 54.08 44.3349ZM45.04 44.4257C44.7588 44.7403 44.7604 44.75 45.0952 44.75C45.3332 44.75 45.44 44.6499 45.44 44.4257C45.44 44.2474 45.4152 44.1015 45.3848 44.1015C45.3544 44.1015 45.1992 44.2474 45.04 44.4257ZM24.5376 48.9737C24.0792 49.1484 23.5832 50.0957 24.0088 49.983C24.3668 49.8881 25.0132 49.2015 24.9372 48.9968C24.9044 48.9084 24.7344 48.8983 24.5376 48.9737ZM129.92 49.0235C129.92 49.2672 130.516 49.846 130.912 49.987C131.167 50.0783 131.167 50.0519 130.908 49.5825C130.61 49.043 129.92 48.6522 129.92 49.0235ZM27.2524 69.1517C27.2532 69.776 27.282 70.0115 27.3168 69.675C27.3516 69.3386 27.3508 68.8279 27.3156 68.5401C27.28 68.2523 27.2516 68.5275 27.2524 69.1517ZM40.8108 69.1112C40.9964 69.4902 41.3648 69.9867 41.63 70.2145C42.4744 70.9409 42.5348 72.358 41.7524 73.0965L41.4052 73.4241L42.1932 74.2064C43.0304 75.0381 43.604 76.2902 43.7636 77.634C43.8196 78.107 43.976 78.4483 44.2464 78.6879C44.5456 78.953 44.7016 79.3384 44.8652 80.2205C45.0336 81.1288 45.176 81.4722 45.4856 81.719C45.7476 81.9278 45.9568 82.336 46.0864 82.8917C46.2348 83.5269 46.4428 83.8929 46.9028 84.3274C47.4484 84.8426 47.52 84.9979 47.52 85.6651C47.52 86.0797 47.5864 86.4194 47.6676 86.4194C48.2424 86.4194 48.8204 87.2962 48.778 88.1036C48.7412 88.8057 48.7852 88.956 49.0704 89.0999C49.714 89.425 49.9052 89.6938 50.0136 90.4258C50.0892 90.9374 50.21 91.1862 50.408 91.2385C50.726 91.3228 50.9716 91.8534 51.1368 92.8129C51.1988 93.1728 51.418 93.6118 51.6404 93.8206C52.0708 94.2247 51.8004 94.8323 51.2804 94.63C51.0676 94.547 50.56 95.0707 50.56 95.373C50.56 95.4424 50.832 95.4991 51.1644 95.4991C52.3692 95.4991 52.9128 96.3824 52.3268 97.3884C51.7408 98.3945 51.9344 98.904 52.902 98.904C53.638 98.904 53.9704 100.05 53.8908 102.314C53.8164 104.427 53.584 105.065 52.8892 105.065C51.9632 105.065 51.8204 105.318 52.342 106.034C52.6328 106.432 52.6656 106.62 52.5612 107.284C52.4936 107.713 52.4296 108.43 52.4192 108.875C52.392 110.032 52.1752 110.323 51.28 110.406C50.7716 110.453 50.69 110.688 50.9316 111.409C51.2264 112.29 51.0692 113.375 50.5796 113.837C50.3928 114.013 50.24 114.304 50.24 114.483C50.24 115.105 49.7704 115.772 49.26 115.876C48.886 115.952 48.6956 116.138 48.4352 116.681C48.0612 117.461 48.0816 117.454 46.862 117.228C46.1624 117.099 45.892 116.948 45.4268 116.427C45.112 116.075 44.644 115.736 44.3868 115.674C43.6876 115.504 43.36 115.138 43.36 114.524C43.36 113.872 42.866 113.368 41.8748 113.009C41.3348 112.813 41.1328 112.623 40.864 112.056C40.6788 111.666 40.4088 111.28 40.264 111.198C40.1188 111.115 40 110.884 40 110.683C40 110.227 39.7168 109.929 39.2836 109.929C39.1008 109.929 38.828 109.783 38.6772 109.605C38.5264 109.427 38.2192 109.281 37.9944 109.281C37.5504 109.281 36.8 108.631 36.8 108.247C36.8 108.116 36.6212 107.794 36.4028 107.531C36.1584 107.236 35.966 106.749 35.902 106.261C35.7496 105.103 35.7884 104.846 36.1524 104.599C36.3768 104.447 36.4732 104.217 36.4584 103.87C36.4392 103.429 36.4272 103.415 36.3648 103.768C36.3252 103.991 36.2228 104.246 36.1368 104.336C36.0352 104.441 36.0224 104.385 36.1004 104.173C36.2072 103.884 36.1908 103.873 35.9464 104.075C35.7104 104.269 35.6852 104.267 35.7632 104.061C35.8184 103.916 35.7596 103.822 35.614 103.822C35.482 103.822 35.4092 103.88 35.452 103.95C35.5652 104.136 33.8804 103.918 33.6264 103.715C33.5088 103.62 33.302 103.263 33.1672 102.921C33.032 102.579 32.7928 102.229 32.6352 102.144C32.468 102.054 32.302 101.708 32.2364 101.314C32.078 100.364 31.7584 99.6677 31.3716 99.4297C31.1892 99.3175 31.0396 99.0621 31.0392 98.8623C31.0372 98.0224 30.71 97.3086 30.1828 96.9936C29.5788 96.6325 29.1968 95.5931 29.3092 94.6175C29.37 94.0897 29.3332 94.0293 28.8508 93.868C28.1368 93.6293 27.8332 92.7095 28.2136 91.9369C28.5252 91.3042 28.3556 90.952 27.5544 90.5644C27.0212 90.3071 27.0084 90.2783 27.1112 89.5843C27.17 89.1871 27.136 88.5649 27.0352 88.1847C26.8572 87.5154 26.8656 87.4891 27.408 86.9857C27.7128 86.7027 28.012 86.3128 28.0724 86.119C28.1332 85.9257 28.3924 85.6573 28.6488 85.5232C28.9048 85.389 29.2252 85.0623 29.3604 84.7976C29.7924 83.9509 31.2 84.0185 31.2 84.8864C31.2 86.1211 31.8168 86.7023 32.448 86.0627C32.772 85.7344 32.69 84.9602 32.3316 84.9602C31.576 84.9602 31.308 84.0741 31.7776 83.128C32.138 82.402 33.1272 81.3931 33.4788 81.3931C33.736 81.3931 34.3728 80.869 35.3168 79.8804C35.4724 79.7174 35.8592 79.3161 36.176 78.9886C36.4928 78.6615 36.8 78.1942 36.8584 77.9505C36.9168 77.7065 37.2816 77.1459 37.6684 76.7041C38.3124 75.9696 38.3648 75.8452 38.2856 75.2457C38.1592 74.2899 38.5016 73.8399 39.4372 73.7329C40.412 73.6215 40.4556 73.5444 39.862 72.9826C39.2984 72.4492 39.276 72.2729 39.538 70.4148C39.8232 68.3917 40.2464 67.9584 40.8108 69.1112ZM115.004 73.617C115.204 73.6985 115.433 73.9307 115.514 74.1338C115.65 74.4788 115.66 74.4812 115.67 74.1699C115.683 73.7451 115.387 73.4455 114.968 73.4585C114.661 73.4682 114.663 73.4784 115.004 73.617ZM115.84 75.5278C115.84 75.722 115.921 75.8804 116.02 75.8804C116.137 75.8804 116.123 75.9761 115.98 76.1549C115.859 76.3056 115.84 76.3802 115.939 76.3206C116.037 76.2611 116.246 76.3567 116.404 76.5326C116.561 76.709 116.804 76.848 116.945 76.8419C117.164 76.8322 117.166 76.8152 116.96 76.7203C116.828 76.6595 116.707 76.4641 116.692 76.2858C116.664 75.966 116.667 75.966 116.892 76.2761C117.094 76.5553 117.12 76.5594 117.12 76.3117C117.12 76.1581 116.994 75.9875 116.84 75.9323C116.686 75.8772 116.398 75.6843 116.2 75.5039L115.84 75.1755V75.5278ZM128.366 77.745C128.367 78.1909 128.398 78.3543 128.435 78.1078C128.472 77.861 128.471 77.4962 128.433 77.2971C128.395 77.0977 128.364 77.2991 128.366 77.745ZM45.04 85.2844C45.1992 85.4628 45.3544 85.6087 45.3848 85.6087C45.4152 85.6087 45.44 85.4628 45.44 85.2844C45.44 85.0603 45.3332 84.9602 45.0952 84.9602C44.7604 84.9602 44.7588 84.9699 45.04 85.2844ZM30.44 86.2208C30.1488 86.2686 30.08 86.3849 30.08 86.8308C30.08 87.2864 30.1288 87.3647 30.36 87.2808C31.3316 86.9297 31.3968 86.0639 30.44 86.2208ZM46.88 90.0675C47.6552 91.1862 48 91.3609 48 90.635C48 90.2102 47.9432 90.1486 47.552 90.1486C47.3056 90.1486 47.0032 90.0574 46.8796 89.9459C46.688 89.7728 46.688 89.7902 46.88 90.0675ZM23.85 96.9738C23.838 97.2855 24.3364 97.7731 24.6524 97.7589C24.7776 97.7532 24.7164 97.6819 24.5164 97.6004C24.316 97.5189 24.0868 97.2867 24.0064 97.0836C23.9124 96.8465 23.8568 96.8072 23.85 96.9738ZM50.9848 104.875C50.8392 105.038 50.7244 105.276 50.73 105.402C50.7356 105.529 50.806 105.467 50.8864 105.264C50.9668 105.061 51.196 104.829 51.3964 104.747C51.6304 104.652 51.6692 104.596 51.5048 104.589C51.3644 104.583 51.1304 104.712 50.9848 104.875ZM111.281 107.659C111.121 107.837 111.065 107.984 111.156 107.984C111.357 107.984 111.756 107.52 111.648 107.411C111.606 107.368 111.441 107.479 111.281 107.659ZM40 108.47C40 108.559 40.0576 108.632 40.1276 108.632C40.198 108.632 40.252 108.866 40.2476 109.152C40.2408 109.62 40.2864 109.671 40.72 109.678C40.984 109.683 41.25 109.757 41.3112 109.843C41.3724 109.93 41.4628 109.96 41.512 109.91C41.6992 109.721 41.0828 108.799 40.6076 108.559C40.0212 108.263 40 108.26 40 108.47ZM122.006 111.362C121.898 111.859 121.115 112.265 120.991 111.887C120.959 111.792 120.852 111.713 120.752 111.713C120.649 111.713 120.682 111.825 120.828 111.973C121.246 112.397 122.034 112.135 122.165 111.528C122.223 111.261 122.234 111.005 122.19 110.96C122.146 110.916 122.063 111.096 122.006 111.362ZM34.8 113.821C34.9592 113.999 35.1144 114.145 35.1448 114.145C35.1752 114.145 35.2 113.999 35.2 113.821C35.2 113.597 35.0932 113.496 34.8552 113.496C34.5204 113.496 34.5188 113.506 34.8 113.821ZM46.2 113.663C46.398 113.744 46.5656 113.94 46.5728 114.099C46.5804 114.278 46.6168 114.309 46.6676 114.18C46.7764 113.906 46.4296 113.494 46.1004 113.507C45.924 113.514 45.9564 113.564 46.2 113.663ZM90.24 116.44C90.24 116.779 90.2496 116.781 90.56 116.496C90.736 116.335 90.88 116.177 90.88 116.147C90.88 116.116 90.736 116.091 90.56 116.091C90.3388 116.091 90.24 116.199 90.24 116.44ZM39.04 118.103C39.04 118.356 39.4512 118.741 39.6348 118.66C39.7036 118.629 39.598 118.442 39.4 118.245C39.1684 118.014 39.04 117.963 39.04 118.103ZM40.1296 118.442C40.2104 118.62 40.3168 118.875 40.3656 119.009C40.4428 119.219 40.4564 119.218 40.4672 118.999C40.4744 118.861 40.368 118.605 40.2312 118.432C39.9864 118.122 39.9848 118.123 40.1296 118.442ZM94.9768 121.578C94.2624 122.003 94.0904 122.635 94.7144 122.542C94.9772 122.503 95.2176 122.549 95.2488 122.643C95.28 122.738 95.3156 122.539 95.328 122.201C95.3404 121.864 95.3932 121.518 95.4448 121.433C95.5648 121.237 95.536 121.246 94.9768 121.578ZM54.8456 127.736C54.4376 127.899 54.8192 128.55 55.4876 128.831L56.0156 129.053L55.6804 128.576C55.496 128.313 55.2752 128.055 55.19 128.001C55.1048 127.948 55.0764 127.836 55.1268 127.753C55.2304 127.583 55.2248 127.583 54.8456 127.736ZM6.4812 131.798C6.1072 131.879 5.9848 132.008 5.9204 132.387C5.8384 132.869 5.832 132.872 4.5592 132.953L3.28 133.034L3.2304 133.642C3.182 134.233 3.1632 134.25 2.5504 134.25C1.9216 134.25 1.92 134.252 1.92 134.899C1.92 135.606 1.9312 135.6 0.68 135.55L0 135.523V142.02C0 148.343 0.00840001 148.518 0.3104 148.518C0.5536 148.518 0.6316 148.65 0.6704 149.126C0.7172 149.699 0.754 149.737 1.3108 149.784C1.866 149.831 1.9048 149.87 1.9508 150.433C1.998 151.009 2.0248 151.033 2.6616 151.08C3.248 151.124 3.334 151.182 3.416 151.598C3.5628 152.343 4.1084 152.407 10.2852 152.409C15.4412 152.409 15.8572 152.389 15.9488 152.126C16.1108 151.66 16.6748 151.112 16.9912 151.112C17.27 151.112 17.2844 150.932 17.2432 147.91L17.2 144.708H16H14.8L14.7504 145.316C14.702 145.907 14.6832 145.924 14.0704 145.924C13.4416 145.924 13.44 145.926 13.44 146.572V147.221H10.8896H8.3392L8.2896 146.613C8.2428 146.038 8.2076 146.002 7.64 145.955L7.04 145.904L7.0336 145.022C7.03 144.537 7.0272 143.411 7.0272 142.519C7.0272 139.154 6.9848 139.438 7.488 139.438C8.0564 139.438 8.32 139.171 8.32 138.595C8.32 138.174 8.3656 138.141 8.96 138.141H9.6V137.493C9.6 136.505 10.83 136.466 10.9104 137.452L10.96 138.06L12.2 138.108L13.44 138.155V138.797V139.438H15.36H17.28V136.39C17.28 132.721 17.4228 132.953 15.168 132.953H13.44V132.499C13.44 131.689 13.2972 131.654 10.008 131.675C8.3316 131.685 6.7448 131.741 6.4812 131.798ZM18.56 142.681V152.409H21.76H24.96V148.518V144.627H27.52H30.08V148.518V152.409H33.28H36.48V142.681V132.953H33.28H30.08V136.196V139.438H27.52H24.96V136.196V132.953H21.76H18.56V142.681ZM44.16 133.595V134.25H43.52H42.88V135.547V136.844H42.432C41.6876 136.844 41.6 137.076 41.6 139.048C41.6 140.861 41.5996 140.863 41.1896 140.967C40.612 141.114 40.32 141.93 40.32 143.396V144.607L39.72 144.658L39.12 144.708L39.0732 145.964C39.0268 147.217 39.0248 147.221 38.5852 147.221C37.8188 147.221 37.76 147.42 37.76 150.01V152.409H40.96H44.16V151.774C44.16 151.197 44.2052 151.128 44.6496 151.029C45.1952 150.908 45.4752 150.389 45.4332 149.577C45.3748 148.452 45.2548 148.518 47.342 148.518H49.2444L49.3484 149.08C49.4376 149.562 49.53 149.656 50.006 149.746C50.55 149.849 50.5604 149.867 50.5756 150.685C50.5844 151.143 50.6024 151.7 50.6156 151.923L50.64 152.328L57.64 152.369L64.64 152.411V148.474V144.537L65.28 144.599C65.9068 144.66 65.92 144.674 65.92 145.292C65.92 145.921 65.9228 145.924 66.56 145.924H67.2L67.2156 146.775C67.2464 148.424 67.2492 148.435 67.68 148.462C67.9 148.475 68.17 148.493 68.28 148.502C68.4176 148.513 68.48 148.843 68.48 149.56C68.48 150.709 68.7092 151.112 69.3616 151.112C69.684 151.112 69.748 151.203 69.7904 151.72L69.84 152.328L73 152.372L76.16 152.416V142.684V132.953H73.6H71.04V136.241V139.528L70.4 139.466C69.7732 139.406 69.76 139.391 69.76 138.773C69.76 138.144 69.7572 138.141 69.12 138.141H68.48L68.4652 137.371C68.4308 135.561 68.4552 135.629 67.84 135.62L67.28 135.612L67.1868 134.521C67.0532 132.957 67.3124 133.041 62.4724 132.986L58.24 132.938V141.417V149.896L57.72 149.868C57.434 149.853 57.146 149.835 57.08 149.828C57.014 149.821 56.96 149.027 56.96 148.064C56.96 146.16 56.8684 145.924 56.128 145.924H55.68V144.475C55.68 142.694 55.5356 142.26 54.896 142.117C54.4152 142.01 54.4128 142.004 54.3664 140.765L54.32 139.519L53.72 139.469L53.12 139.419V137.678C53.12 135.784 53.0276 135.547 52.288 135.547C51.8472 135.547 51.8396 135.531 51.8216 134.534C51.8112 133.976 51.7932 133.411 51.7816 133.277C51.7632 133.07 51.1988 133.027 47.96 132.987L44.16 132.939V133.595ZM83.84 133.592C83.84 134.213 83.8232 134.232 83.24 134.281L82.64 134.331L82.5952 136.227L82.55 138.122L81.9552 138.173L81.36 138.222L81.3136 139.554C81.268 140.867 81.2584 140.894 80.6336 141.515C80.0048 142.14 80 142.153 80 143.386V144.627H79.552C78.8124 144.627 78.72 144.864 78.72 146.757V148.499L78.12 148.549L77.52 148.599L77.4748 150.504L77.43 152.409H80.6348H83.84V151.761C83.84 151.159 83.872 151.112 84.288 151.112C84.968 151.112 85.12 150.84 85.12 149.621V148.518H87.68H90.24L90.2556 149.694C90.264 150.34 90.2596 151.13 90.2452 151.449C90.2012 152.442 89.97 152.415 98.0976 152.37L105.52 152.328L105.494 149.734C105.48 148.307 105.504 147.359 105.548 147.626C105.658 148.293 105.878 148.518 106.42 148.518C106.745 148.518 106.885 148.601 106.897 148.802C106.906 148.958 106.924 149.232 106.937 149.41C106.951 149.609 107.083 149.743 107.28 149.757C107.456 149.77 107.726 149.788 107.88 149.798C108.097 149.811 108.16 149.961 108.16 150.464V151.112H108.8H109.44V151.761V152.409H113.299H117.158L117.092 150.878C117.022 149.258 116.772 148.68 116.138 148.68C115.95 148.68 115.812 148.522 115.75 148.234C115.58 147.452 115.547 147.407 115.09 147.354C114.697 147.309 114.63 147.22 114.56 146.654C114.484 146.038 114.449 146.003 113.88 145.955C113.392 145.914 113.276 145.838 113.262 145.549C113.214 144.635 113.272 144.693 112.36 144.645C112.05 144.629 112 144.537 112 143.978V143.33H111.36H110.72V142.033V140.736H111.36H112V140.087C112 139.528 112.05 139.436 112.36 139.42C113.272 139.372 113.214 139.43 113.262 138.516C113.276 138.227 113.392 138.151 113.88 138.111C114.448 138.063 114.483 138.027 114.53 137.452C114.576 136.885 114.614 136.844 115.098 136.844C115.383 136.844 115.694 136.765 115.79 136.668C115.915 136.541 115.994 136.541 116.071 136.668C116.13 136.765 116.391 136.844 116.65 136.844C117.094 136.844 117.121 136.883 117.139 137.533C117.175 138.833 117.316 139.184 117.841 139.276C118.261 139.349 118.33 139.439 118.4 140.007C118.476 140.621 118.511 140.657 119.08 140.705L119.68 140.755V141.788C119.68 142.93 119.911 143.33 120.572 143.33C120.912 143.33 120.96 143.403 120.96 143.922C120.96 144.4 121.084 144.639 121.6 145.151L122.24 145.787V149.098V152.409H125.44H128.64V148.528V144.646L129.24 144.596L129.84 144.546L129.887 143.289L129.934 142.033H130.567C131.199 142.033 131.2 142.031 131.2 141.384C131.2 140.806 131.242 140.736 131.588 140.736C132.251 140.736 132.48 140.337 132.48 139.183V138.141H133.12H133.76V137.197C133.76 136.197 134.158 135.547 134.77 135.547C135.001 135.547 135.04 135.358 135.04 134.247V132.947L131.24 132.991L127.44 133.034L127.393 134.291L127.346 135.547H126.713H126.08V136.844V138.141H125.447H124.814L124.767 136.885L124.72 135.628L124.12 135.578C123.522 135.528 123.52 135.526 123.505 134.767C123.497 134.349 123.479 133.788 123.465 133.52L123.44 133.034H116.048C111.333 133.034 108.598 133.093 108.496 133.196C108.34 133.355 108.194 134.212 108.172 135.101C108.161 135.511 108.109 135.547 107.52 135.547C106.882 135.547 106.88 135.549 106.88 136.186C106.88 136.807 106.863 136.826 106.28 136.875C105.716 136.922 105.674 136.964 105.573 137.574C105.514 137.931 105.478 137.055 105.493 135.628L105.52 133.034H101.76H98L97.9756 133.439C97.9624 133.662 97.9444 137.234 97.9356 141.376C97.9236 147.234 97.8772 148.864 97.728 148.713C97.6224 148.606 97.3376 148.518 97.0948 148.518C96.6552 148.518 96.6532 148.514 96.6068 147.262L96.56 146.005L95.96 145.955L95.36 145.904V144.223C95.36 142.391 95.214 142.033 94.4684 142.033C94.0812 142.033 94.08 142.027 94.08 140.282C94.08 138.381 93.9876 138.141 93.2548 138.141C92.8152 138.141 92.8132 138.137 92.7668 136.885L92.72 135.628L92.12 135.578L91.52 135.528V134.24V132.953H87.68H83.84V133.592ZM140.16 133.592C140.16 134.213 140.143 134.232 139.56 134.281L138.96 134.331L138.915 136.227L138.87 138.122L138.275 138.173L137.68 138.222L137.634 139.554C137.588 140.867 137.578 140.894 136.954 141.515C136.326 142.139 136.32 142.155 136.32 143.376V144.607L135.72 144.658L135.12 144.708L135.075 146.604L135.03 148.499L134.435 148.549L133.84 148.599L133.795 150.504L133.75 152.409H136.955H140.16V151.761C140.16 151.159 140.192 151.112 140.608 151.112C141.288 151.112 141.44 150.84 141.44 149.621V148.518H144H146.56L146.576 149.694C146.585 150.34 146.579 151.11 146.563 151.404C146.509 152.402 146.539 152.409 150.58 152.409H154.24V150.658C154.24 148.758 154.148 148.518 153.415 148.518C152.975 148.518 152.973 148.514 152.927 147.262L152.88 146.005L152.28 145.955L151.68 145.904V144.223C151.68 142.391 151.534 142.033 150.788 142.033C150.384 142.033 150.298 141.427 150.395 139.258C150.426 138.579 150.081 138.141 149.515 138.141C149.15 138.141 149.132 138.088 149.087 136.885L149.04 135.628L148.44 135.578L147.84 135.528V134.24V132.953H144H140.16V133.592ZM41.5364 141.305C41.4764 141.718 40.64 142.281 40.64 141.907C40.64 141.764 41.3164 141.06 41.4536 141.06C41.5188 141.06 41.5556 141.17 41.5364 141.305ZM48 142.681V143.33H47.36H46.72V142.681V142.033H47.36H48V142.681ZM144 142.681C144 143.183 143.939 143.33 143.728 143.33C143.516 143.33 143.499 143.286 143.648 143.135C143.754 143.028 143.84 142.759 143.84 142.537V142.134L143.391 142.57C142.842 143.103 142.528 143.152 143.014 142.628C143.206 142.421 143.314 142.202 143.255 142.142C143.195 142.082 143.339 142.033 143.573 142.033C143.964 142.033 144 142.087 144 142.681ZM87.68 142.924C87.68 143.147 87.618 143.33 87.542 143.33C87.4664 143.33 87.4388 143.147 87.4808 142.924C87.5228 142.701 87.5848 142.519 87.6188 142.519C87.6524 142.519 87.68 142.701 87.68 142.924ZM4.5908 156.405C4.53 156.467 4.48 157.344 4.48 158.355C4.48 160.192 4.48 160.192 4.0916 160.192C3.548 160.192 3.1744 160.629 3.206 161.228C3.2204 161.505 3.2252 162.257 3.2164 162.898L3.2 164.064L2.6 164.114L2 164.164L1.9556 166.493C1.9032 169.236 1.9188 169.272 3.1876 169.272C4.2008 169.272 4.48 169.092 4.48 168.438C4.48 168.042 4.5448 167.989 5.08 167.944L5.68 167.894L5.7268 166.637L5.7736 165.38H7.04H8.3064L8.3532 166.637L8.4 167.894L9.0324 167.975C9.6316 168.051 9.6652 168.086 9.6724 168.623L9.68 169.191L12.8 169.185L15.92 169.179L15.932 168.374C15.9388 167.931 15.9568 166.473 15.972 165.133L16 162.697L16.64 162.758L17.28 162.82V165.851C17.28 167.993 17.3364 168.94 17.472 169.077C17.7456 169.354 19.434 169.329 19.6672 169.044C19.8864 168.777 19.848 159.335 19.6268 159.111C19.5536 159.037 17.8436 158.953 15.8268 158.925L12.16 158.873V161.025C12.16 162.697 12.1172 163.132 11.968 162.981C11.8624 162.874 11.5776 162.786 11.3348 162.786C10.8952 162.786 10.8932 162.782 10.8468 161.53L10.8 160.273L10.2048 160.223L9.61 160.173L9.5648 158.278L9.52 156.382L7.1108 156.337C5.7856 156.312 4.6516 156.343 4.5908 156.405ZM24.96 157.598V158.895H25.6H26.24V162.128V165.361L25.64 165.411L25.04 165.462V166.678V167.894L25.6724 167.975C26.2716 168.051 26.3052 168.086 26.3124 168.623L26.32 169.191H28.8H31.28L31.3228 167.985C31.3756 166.501 31.348 166.525 32.104 167.307C32.584 167.803 32.8712 167.963 33.356 168.003C33.9568 168.053 33.9856 168.081 33.9928 168.623L34 169.191H36.48H38.96L38.9676 168.623C38.9748 168.073 38.996 168.054 39.6524 168.005L40.33 167.956L40.2848 166.06L40.24 164.164H39.04H37.84L37.7904 164.772L37.7408 165.38H36.4704H35.2V164.788C35.2 164.31 35.0756 164.071 34.56 163.559C33.6788 162.684 33.618 161.624 34.4352 161.386C34.8232 161.273 34.9872 161.107 35.0984 160.714C35.2172 160.295 35.33 160.192 35.6712 160.192C36.2176 160.192 36.48 159.918 36.48 159.349C36.48 158.927 36.5256 158.895 37.12 158.895C37.7716 158.895 37.8828 159.079 37.7756 159.974C37.76 160.102 38.1608 160.161 39.04 160.161C39.9192 160.161 40.32 160.102 40.3044 159.974C40.292 159.871 40.2908 159.586 40.3012 159.341L40.32 158.895H41.6H42.88L42.8936 163.475C42.9012 165.995 42.9192 168.311 42.9336 168.623L42.96 169.191H44.16H45.36L45.3864 168.623C45.4008 168.311 45.4188 165.995 45.4264 163.475L45.44 158.895H47.36H49.28V157.598V156.301H44.1504C40.7716 156.301 39.0548 156.356 39.12 156.463C39.1744 156.552 39.1468 156.625 39.0588 156.625C38.9708 156.625 38.8544 156.552 38.8 156.463C38.6776 156.263 34.1348 156.242 34.0132 156.441C33.966 156.518 33.7596 156.549 33.554 156.509C33.1052 156.422 32.7288 156.818 32.8424 157.258C32.912 157.529 32.8204 157.576 32.1412 157.624L31.36 157.679V156.99V156.301H28.16H24.96V157.598ZM53.1928 156.504C53.1504 156.617 53.1348 159.225 53.158 162.301L53.2 167.894L53.8324 167.975C54.4316 168.051 54.4652 168.086 54.4724 168.623L54.48 169.191H57.6H60.72L60.7276 168.623C60.7348 168.075 60.7576 168.054 61.3988 168.006C62.054 167.958 62.0632 167.948 62.116 167.277L62.17 166.596L62.362 167.045C62.4676 167.292 62.7356 167.564 62.9572 167.649C63.2788 167.773 63.36 167.916 63.36 168.356C63.36 169.25 63.448 169.269 67.3728 169.228L70.96 169.191L70.9684 168.623C70.9764 168.062 70.984 168.056 71.68 168.056C72.376 168.056 72.3836 168.062 72.3916 168.623L72.4 169.191L74.44 169.228C75.562 169.248 76.48 169.206 76.48 169.134C76.48 169.062 76.642 169.009 76.84 169.016C77.114 169.025 77.1968 168.941 77.1872 168.664C77.1804 168.463 77.2344 168.299 77.3072 168.299C77.3804 168.299 77.44 168.188 77.44 168.052C77.44 167.916 77.6212 167.735 77.8428 167.649C78.0644 167.564 78.3324 167.292 78.438 167.045C78.63 166.596 78.63 166.596 78.6844 167.286L78.7384 167.975H79.4092C80.0776 167.974 80.08 167.977 80.08 168.583V169.191H82.56H85.04L85.0496 168.668C85.062 167.982 85.0504 167.989 86.248 167.963C87.7004 167.932 87.68 167.925 87.68 168.441C87.68 169.24 87.8264 169.268 91.6924 169.222L95.28 169.179V167.969V166.759H94.68H94.0796L94.08 161.53V156.301H92.8H91.52V157.598V158.895H89.6H87.68V159.544C87.68 160.231 87.6844 160.228 86.56 160.228C85.1336 160.228 85.1424 160.232 85.0896 159.584L85.04 158.976L82.52 158.931L80 158.887V159.523C80 160.155 79.9948 160.16 79.32 160.216C77.7304 160.349 77.44 160.244 77.44 159.534V158.895H74.88H72.32V159.527C72.32 160.154 72.314 160.16 71.64 160.216C70.208 160.336 69.76 160.22 69.76 159.728C69.76 158.933 69.6036 158.895 66.368 158.895H63.36L63.3416 160.557C63.3312 161.471 63.2904 162.094 63.2508 161.94C63.208 161.776 62.9536 161.619 62.6292 161.558L62.08 161.453V159.601C62.08 157.393 61.8828 156.757 61.1132 156.485C60.346 156.214 53.2964 156.231 53.1928 156.504ZM101.394 156.593C100.841 156.935 100.48 157.626 100.48 158.346C100.48 158.839 100.434 158.895 100.032 158.895C99.3788 158.895 99.2 159.174 99.2 160.192C99.2 161.21 99.3788 161.489 100.032 161.489C100.434 161.489 100.48 161.546 100.48 162.032C100.48 163.212 101.398 164.117 102.537 164.059C102.77 164.047 103.554 164.048 104.28 164.061L105.6 164.083V164.732V165.38H103.68H101.76V164.926C101.76 164.263 101.485 164.083 100.468 164.083C99.2372 164.083 99.1776 164.186 99.2336 166.215L99.28 167.894L100.47 167.937C101.838 167.987 101.818 167.976 101.83 168.668L101.84 169.191H104.32H106.8L106.808 168.623C106.815 168.074 106.836 168.054 107.488 168.006C108.005 167.967 108.16 167.89 108.16 167.669C108.16 166.759 109.398 166.397 109.47 167.286C109.516 167.847 109.562 167.898 110.063 167.946C110.685 168.006 110.96 168.239 110.96 168.704C110.96 168.936 111.062 169.025 111.32 169.016C111.518 169.009 111.68 169.062 111.68 169.134C111.68 169.206 112.598 169.248 113.72 169.228L115.76 169.191L115.768 168.623C115.776 168.081 115.806 168.052 116.448 167.964C116.943 167.896 117.12 167.928 117.12 168.085C117.12 168.203 117.18 168.299 117.253 168.299C117.326 168.299 117.38 168.463 117.373 168.664C117.363 168.941 117.446 169.025 117.72 169.016C117.918 169.009 118.08 169.062 118.08 169.135C118.08 169.207 118.71 169.249 119.48 169.228L120.88 169.191L120.905 168.704C120.919 168.437 120.937 168.143 120.945 168.051C120.985 167.606 122.24 168 122.24 168.458C122.24 168.705 122.333 168.986 122.446 169.081C122.74 169.328 126.399 169.304 126.402 169.055C126.404 168.916 126.436 168.915 126.522 169.05C126.591 169.156 127.04 169.224 127.6 169.212L128.56 169.191L128.586 168.623C128.601 168.311 128.619 166.578 128.626 164.772L128.64 161.489H129.28H129.92L129.939 164.529C129.949 166.201 129.949 167.649 129.938 167.746C129.927 167.843 130.18 167.932 130.502 167.944C131.216 167.971 131.258 168.012 131.27 168.668L131.28 169.191L134.6 169.22C136.426 169.236 137.92 169.194 137.92 169.126C137.92 169.058 138.082 169.009 138.28 169.016C138.538 169.025 138.64 168.936 138.64 168.704C138.64 168.19 138.98 167.95 139.631 168.005C140.192 168.053 140.226 168.087 140.233 168.623L140.24 169.191L142.28 169.228C143.402 169.248 144.32 169.206 144.32 169.134C144.32 169.062 144.482 169.009 144.68 169.016C144.954 169.025 145.037 168.941 145.027 168.664C145.02 168.463 145.074 168.299 145.147 168.299C145.22 168.299 145.28 168.197 145.28 168.072C145.28 167.842 146.393 166.616 146.502 166.727C146.534 166.76 146.579 167.328 146.6 167.989L146.64 169.191L148.48 169.19L150.32 169.19L150.332 168.38C150.339 167.934 150.357 166.406 150.372 164.983C150.394 162.972 150.443 162.44 150.592 162.592C150.698 162.699 150.986 162.786 151.232 162.786H151.68V165.834C151.68 167.989 151.736 168.94 151.872 169.077C152.121 169.33 153.799 169.33 154.048 169.077C154.334 168.788 154.322 159.327 154.035 159.087C153.905 158.977 152.506 158.91 150.195 158.901L146.56 158.888V159.581V160.273L145.96 160.257C145.422 160.242 145.354 160.193 145.306 159.77C145.208 158.921 145.12 158.895 142.38 158.895C140.983 158.895 139.84 158.955 139.84 159.03C139.84 159.103 139.678 159.158 139.48 159.151C139.206 159.141 139.123 159.225 139.133 159.503C139.15 159.995 138.911 159.967 138.786 159.462C138.73 159.239 138.569 159.057 138.427 159.057C138.231 159.057 138.254 158.996 138.524 158.805C138.936 158.512 139.052 156.808 138.68 156.497C138.57 156.405 137.706 156.323 136.76 156.313L135.04 156.297V157.596V158.895H133.76H132.48L132.461 158.368C132.451 158.078 132.451 157.786 132.461 157.719C132.472 157.653 132.415 157.598 132.335 157.598C132.255 157.598 132.228 157.452 132.274 157.273C132.41 156.747 132.066 156.5 131.2 156.5C130.334 156.5 129.99 156.747 130.126 157.273C130.172 157.452 130.145 157.598 130.065 157.598C129.985 157.598 129.928 157.653 129.939 157.719C129.949 157.786 129.949 158.078 129.939 158.368L129.92 158.895H128H126.08V162.138V165.38H125.44H124.8V162.393C124.8 158.703 124.918 158.895 122.635 158.895H120.974L120.927 157.638L120.88 156.382L119 156.336L117.12 156.291V158.241V160.192H116.48H115.84V159.538V158.884L113.276 158.903C111.431 158.918 110.719 158.976 110.735 159.112C110.843 160.008 110.732 160.192 110.08 160.192H109.44V160.841V161.489H108.16H106.88V161.035C106.88 160.785 106.794 160.494 106.688 160.387C106.539 160.235 106.708 160.189 107.448 160.177C107.972 160.169 108.616 160.151 108.88 160.137L109.36 160.111L109.389 158.932C109.419 157.755 109.418 157.752 108.749 157.038L108.08 156.323L104.96 156.321C102.307 156.319 101.773 156.36 101.394 156.593ZM33.4676 157.092C33.2996 157.268 33.1588 157.311 33.0892 157.207C32.9364 156.979 33.2544 156.625 33.5192 156.728C33.6916 156.795 33.6812 156.869 33.4676 157.092ZM131.496 156.801C131.909 156.576 132.204 156.888 131.98 157.312C131.822 157.61 131.8 157.611 131.507 157.343C131.216 157.075 131.184 157.075 130.893 157.343C130.6 157.611 130.578 157.61 130.42 157.312C130.196 156.888 130.491 156.576 130.904 156.801C131.099 156.906 131.301 156.906 131.496 156.801ZM130.496 156.924C130.332 157.193 130.66 157.461 130.858 157.219C131.008 157.037 130.997 156.968 130.809 156.894C130.678 156.843 130.537 156.856 130.496 156.924ZM131.545 156.934C131.388 157.032 131.395 157.101 131.574 157.252C131.754 157.403 131.822 157.392 131.894 157.202C132.006 156.907 131.818 156.763 131.545 156.934ZM31.36 159.526C31.36 160.145 31.3468 160.159 30.72 160.22L30.08 160.282V159.588V158.895H30.72C31.3572 158.895 31.36 158.898 31.36 159.526ZM58.24 159.544V160.192H57.6H56.96V159.544V158.895H57.6H58.24V159.544ZM104.641 159.303C104.725 159.528 104.994 159.791 105.237 159.888C105.775 160.104 105.378 160.336 104.656 160.229C104.27 160.171 104.239 160.113 104.294 159.531C104.364 158.789 104.431 158.744 104.641 159.303ZM135.04 163.435V165.38H133.76H132.48V163.435V161.489H133.76H135.04V163.435ZM91.0052 162.66L91.52 162.796V164.088V165.38H90.88C90.2856 165.38 90.24 165.348 90.24 164.926C90.24 164.345 89.98 164.088 89.368 164.065C89.0304 164.051 88.9788 164.021 89.2 163.967C89.778 163.824 90.0728 163.404 90.1868 162.561C90.274 161.915 90.3196 161.82 90.3944 162.129C90.4608 162.403 90.6492 162.567 91.0052 162.66ZM30.1904 162.908C30.15 163.064 30.1172 162.936 30.1172 162.624C30.1172 162.312 30.15 162.184 30.1904 162.34C30.2304 162.496 30.2304 162.752 30.1904 162.908ZM142.72 163.921V165.38H142.08H141.44V164.083V162.786H141.91C142.169 162.786 142.426 162.713 142.48 162.624C142.682 162.293 142.72 162.497 142.72 163.921ZM114.56 163.435C114.56 164.044 114.532 164.083 114.089 164.083C113.784 164.083 113.53 164.21 113.369 164.444C113.171 164.731 113.12 164.749 113.12 164.532C113.12 164.35 112.936 164.225 112.56 164.154C112.034 164.054 112 164.009 112 163.417V162.786H113.28H114.56V163.435ZM59.52 164.732V165.38H58.24H56.96V164.732V164.083H58.24H59.52V164.732Z\" fill=\"url(#paint1_linear)\"/>\r\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M62.9528 15.0666C63.002 15.1473 62.9516 15.2551 62.8408 15.3066C62.7304 15.3581 62.792 15.3625 62.9776 15.3167C63.4668 15.1959 63.7676 15.6155 63.434 15.9535C63.0752 16.3171 62.9308 16.2802 63.262 15.9093C63.6172 15.5121 63.184 15.2803 62.8048 15.6649C62.5852 15.8871 62.56 15.8858 62.56 15.6515C62.56 15.4363 62.5208 15.427 62.336 15.5993C62.1796 15.7456 62.1612 15.8692 62.2756 16.0111C62.3656 16.1226 62.4124 16.2202 62.3796 16.2288C62.3468 16.2369 62.068 16.2762 61.76 16.3159C60.8876 16.429 60.83 16.4784 60.8472 17.0917C60.8732 18.0184 62.5968 18.1882 63.0604 17.3098C63.2208 17.0062 63.2464 17.0163 63.5352 17.4971C64.1388 18.5031 65.2896 18.4277 65.8416 17.3459C66.0648 16.9085 66.1636 16.8623 66.8764 16.8623C68.6236 16.8623 69.8048 16.3848 69.6804 15.729C69.6468 15.5535 69.6872 15.3674 69.77 15.3159C70.3096 14.9779 69.6956 14.9004 66.84 14.9475C64.2816 14.9892 63.7684 15.0366 63.8092 15.228C63.8448 15.395 63.8008 15.4128 63.6492 15.2936C63.3484 15.0569 62.8472 14.894 62.9528 15.0666ZM72.72 15.0322C73.108 15.127 73.43 15.4031 73.152 15.4031C73.0464 15.4031 72.96 15.517 72.96 15.656C72.96 15.795 73.0312 15.8639 73.118 15.8096C73.2088 15.7529 73.2356 15.8177 73.1816 15.9608C73.0484 16.3123 73.5308 16.4598 74.042 16.2239C74.3804 16.0678 74.4176 16.0001 74.2316 15.881C74.0316 15.7525 74.0328 15.7318 74.24 15.7273C74.4532 15.7229 74.4532 15.7051 74.24 15.5652C74.0268 15.4254 74.0268 15.4067 74.24 15.3946C74.372 15.3873 74.156 15.2778 73.76 15.1514C73.364 15.0249 72.896 14.9288 72.72 14.9377L72.4 14.9544L72.72 15.0322ZM80.8 15.0804C80.8 15.1688 80.53 15.2421 80.2 15.2434C79.8008 15.245 79.6728 15.2928 79.818 15.386C80.0024 15.504 80.0024 15.5397 79.818 15.6138C79.68 15.6694 79.7172 15.7075 79.92 15.7172C80.1808 15.7294 80.1964 15.7602 80.0048 15.883C79.6728 16.0958 79.8336 16.1967 80.6928 16.3163L81.44 16.4201V15.9247C81.44 15.6524 81.4776 15.3301 81.5236 15.2089C81.5788 15.0626 81.4708 14.9766 81.2036 14.9539C80.9816 14.9357 80.8 14.9925 80.8 15.0804ZM84.288 15.1112C84.3936 15.2182 84.48 15.5137 84.48 15.7679C84.48 16.4022 85.3068 16.7695 86.8 16.7991C88.6328 16.8352 88.6156 16.8307 88.8784 17.3459C89.3696 18.3078 90.5008 18.5437 91.204 17.8311C91.544 17.4865 91.6408 16.3341 91.3668 15.8948C91.272 15.7427 91.2824 15.579 91.3964 15.44C91.5316 15.2746 91.52 15.2344 91.3472 15.2721C91.222 15.2997 91.1396 15.2255 91.164 15.1072C91.188 14.9892 91.1308 14.941 91.036 15.0002C90.9156 15.0756 90.9204 15.1761 91.052 15.3366C91.1772 15.4894 91.1824 15.5652 91.0676 15.5652C90.9732 15.5652 90.8212 15.4375 90.73 15.2815C90.5888 15.0403 90.572 15.0581 90.618 15.4031C90.6476 15.626 90.7548 15.8177 90.856 15.8287C91.2608 15.8733 91.2648 15.9093 90.888 16.1209C90.4384 16.3735 90.0216 16.2774 90.1456 15.9495C90.192 15.8275 90.1604 15.7273 90.0748 15.7273C89.9896 15.7273 89.92 15.6499 89.92 15.5555C89.92 15.461 90.01 15.4371 90.12 15.5024C90.23 15.5676 90.1828 15.4627 90.0152 15.2689C89.724 14.9325 89.5844 14.9167 86.9032 14.9167C84.72 14.9167 84.1388 14.96 84.288 15.1112ZM92.1464 16.4176C91.2076 17.1635 92.1844 18.1963 93.4192 17.763C93.9876 17.5636 94.234 16.7877 93.84 16.4371C93.5852 16.2105 92.4244 16.1971 92.1464 16.4176ZM60.4832 17.2636C60.3404 17.4379 59.9796 17.5109 59.2604 17.5109C58.552 17.5109 58.2392 17.5729 58.2376 17.7135C58.2356 17.8647 58.2008 17.8611 58.0996 17.6993C57.8244 17.2595 57.2084 17.5453 57.186 18.1229C57.1596 18.8031 57.2004 18.7772 56.078 18.8327C55.5512 18.8586 55.0604 18.9551 54.988 19.0467C54.9 19.1574 54.8284 19.1452 54.774 19.0098C54.7292 18.8975 54.6192 18.8521 54.5292 18.9085C54.426 18.9729 54.4456 19.0629 54.5828 19.1525C54.758 19.2668 54.7604 19.3203 54.5944 19.4289C54.4816 19.5031 54.4352 19.6851 54.4916 19.8343C54.5816 20.0722 54.4512 20.1051 53.4172 20.1047H52.24V20.7937V21.4832L50.804 21.4577L49.368 21.4326L48.6652 22.1448C48.2788 22.5363 47.8956 22.8152 47.814 22.7641C47.7328 22.713 47.5472 22.769 47.4024 22.8882C47.2188 23.0385 47.1748 23.0434 47.2576 22.904C47.3352 22.7726 47.2996 22.7329 47.1548 22.7893C47.0332 22.8367 46.9332 22.9785 46.9332 23.1046C46.9332 23.2303 46.9924 23.2967 47.0644 23.2513C47.1368 23.2063 47.1344 23.3373 47.0592 23.5424C46.9256 23.9064 45.76 24.1366 45.76 23.799C45.76 23.7292 45.63 23.7998 45.4712 23.9558C45.3092 24.1147 45.2488 24.2854 45.3332 24.3437C45.416 24.4013 45.448 24.638 45.4044 24.8699C45.3144 25.3466 45.4488 25.4917 46.2244 25.7564C46.7456 25.9343 46.7936 25.9157 47.3444 25.3206C47.6608 24.9785 48.1464 24.5659 48.4236 24.4037C48.8084 24.178 48.9504 23.9599 49.0264 23.4779C49.1232 22.8651 49.136 22.8545 49.4788 23.0977C50.0572 23.5079 50.7976 23.4115 51.4376 22.8415C51.7504 22.5635 52.4912 22.1371 53.0832 21.8947C54.1152 21.4719 54.1636 21.4269 54.2508 20.8197C54.32 20.3389 54.3724 20.2546 54.468 20.4699C54.7936 21.2019 56.4024 20.7374 57.0188 19.733C57.4256 19.0698 57.9604 18.9162 58.826 19.2141C59.742 19.5291 60.48 19.1926 60.48 18.4594C60.48 18.217 60.554 17.8209 60.6444 17.5802C60.8392 17.0613 60.7664 16.9182 60.4832 17.2636ZM94.4 18.2312C94.4 19.3345 95.1848 19.7585 96.2172 19.2129C96.804 18.9028 97.522 19.2153 98.0024 19.9903C98.3156 20.495 98.504 20.5781 99.9492 20.8505C100.142 20.887 100.342 21.0548 100.395 21.2234C100.456 21.4168 100.705 21.5708 101.07 21.6405C101.389 21.7009 102.124 21.981 102.705 22.2627C103.366 22.5837 104.113 22.8063 104.705 22.859C105.564 22.9348 105.655 22.9794 105.707 23.3478C105.802 24.0255 105.88 24.1313 106.54 24.4726C106.89 24.6534 107.223 24.9497 107.28 25.1305C107.632 26.2562 109.36 25.9866 109.36 24.8062V24.0774L108.48 23.9891C107.845 23.925 107.68 23.863 107.887 23.7661C108.158 23.6397 108.155 23.6182 107.847 23.3997C107.667 23.2716 107.52 23.062 107.52 22.9331C107.52 22.8047 107.448 22.6993 107.36 22.6993C107.272 22.6993 107.2 22.7722 107.2 22.8614C107.2 22.9506 107.124 23.0235 107.03 23.0235C106.937 23.0235 106.906 22.9506 106.96 22.8614C107.02 22.7625 106.775 22.6993 106.33 22.6993C105.557 22.6993 105.604 22.756 105.535 21.7264C105.522 21.5327 105.258 21.4812 104.24 21.4735C102.524 21.4601 102.589 21.4877 102.616 20.7941L102.64 20.1861L101.626 20.1375C100.68 20.0921 100.572 20.0463 100.011 19.4484C99.4528 18.8538 99.3464 18.808 98.5288 18.808C97.6696 18.808 97.648 18.797 97.6672 18.3621C97.7012 17.5964 97.5232 17.5109 95.9004 17.5109H94.4V18.2312ZM73.6228 19.5258C72.036 19.7877 71.7736 19.9867 71.9264 20.8116L72.0356 21.4022H77.4664H82.8976L82.8488 20.6348L82.8 19.8679L81.92 19.6535C80.6144 19.3353 75.2736 19.253 73.6228 19.5258ZM67.838 21.0151C67.3564 21.159 66.9336 21.1808 66.508 21.084C65.202 20.7869 64.4108 21.105 64.246 21.9936C64.1724 22.3912 64.0344 22.6008 63.8056 22.6612C63.4812 22.7475 63.4804 22.7556 63.7764 22.9777C64.0744 23.2015 64.0744 23.21 63.7764 23.4337C63.3808 23.7309 63.1792 23.591 63.2704 23.0823C63.3316 22.7394 63.252 22.6372 62.7644 22.4305C61.8624 22.0487 61.4068 22.3292 61.4708 23.227L61.52 23.9153L63.28 23.9234C64.4284 23.9283 65.2068 23.8553 65.52 23.7126C65.9308 23.5254 65.942 23.5059 65.5988 23.5764C64.9464 23.7102 64.7356 23.4654 65.1584 23.0645C65.4732 22.7657 65.7428 22.7163 67.2452 22.6794C68.5888 22.6466 68.9528 22.5902 68.8904 22.4248C68.846 22.3085 68.8796 22.2129 68.9652 22.2129C69.0504 22.2129 69.1256 22.3405 69.1328 22.4966C69.1404 22.6749 69.176 22.7029 69.2276 22.5724C69.2732 22.4581 69.2564 22.2392 69.1908 22.086C68.916 21.4443 68.964 21.4022 69.9608 21.4022C71.1716 21.4022 71.0856 21.2943 69.6552 21.0183C68.74 20.8416 68.4196 20.8408 67.838 21.0151ZM84.528 21.0949C83.706 21.3361 83.8004 21.4877 84.7348 21.4277C85.5176 21.3774 85.6024 21.4046 85.624 21.7114C85.6372 21.8979 85.6552 22.1419 85.664 22.2534C85.6936 22.6291 86.0624 22.709 87.7796 22.7126C89.0084 22.7155 89.5832 22.7824 89.8208 22.951C90.052 23.1151 90.0804 23.1865 89.9156 23.1881C89.7112 23.1901 89.7116 23.2112 89.92 23.3478C90.1252 23.482 90.1192 23.5055 89.88 23.5075C89.726 23.5087 89.6 23.437 89.6 23.3478C89.6 23.2586 89.5192 23.1857 89.4204 23.1857C89.2964 23.1857 89.3024 23.2607 89.44 23.4289C89.6088 23.6352 89.5692 23.6745 89.1796 23.6887L88.72 23.7053L89.2 23.8192C89.464 23.8821 90.508 23.9291 91.52 23.9242L93.36 23.9153L93.4076 23.3397C93.478 22.4942 93.0224 22.1135 92.25 22.3717C91.7076 22.5529 91.6344 22.6741 91.6372 23.3883C91.6384 23.7357 91.5148 23.7455 91.1104 23.4289C90.8096 23.193 90.8092 23.1796 91.0964 23.0061C91.3768 22.8363 91.3728 22.8168 91.022 22.6393C90.7896 22.5221 90.5984 22.2262 90.51 21.848C90.3268 21.0629 89.4776 20.7654 88.2916 21.071C87.7516 21.2104 87.4536 21.2153 87.222 21.09C86.8384 20.8817 85.2456 20.8849 84.528 21.0949ZM49.2248 22.4492C49.1728 22.5866 49.0088 22.6993 48.8604 22.6993C48.614 22.6993 48.616 22.6709 48.8808 22.3742C49.1992 22.0175 49.3736 22.0556 49.2248 22.4492ZM65.28 23.1046C65.1668 23.2428 65.1104 23.392 65.1544 23.4366C65.1984 23.4812 65.3268 23.405 65.44 23.2667C65.5532 23.1285 65.6096 22.9794 65.5656 22.9348C65.5216 22.8902 65.3932 22.9664 65.28 23.1046ZM66.6136 22.983C66.7172 23.1561 66.2992 23.5132 66.1512 23.3786C66.084 23.317 66.0832 23.3628 66.1504 23.48C66.2472 23.6502 66.3324 23.6376 66.572 23.4179C66.8332 23.1784 66.8608 22.8614 66.6212 22.8614C66.5772 22.8614 66.574 22.9161 66.6136 22.983ZM108.385 23.2108C108.322 23.3138 108.336 23.3579 108.415 23.3089C108.603 23.193 108.975 23.5991 108.83 23.7621C108.77 23.8302 108.815 23.831 108.93 23.7629C109.098 23.6648 109.085 23.5772 108.866 23.3316C108.542 22.9696 108.533 22.9672 108.385 23.2108ZM57.9784 23.7118C57.7908 23.7973 57.5724 24.0969 57.4932 24.3774L57.3492 24.8881L55.7588 24.9692C54.2808 25.0446 54.1548 25.0774 53.9784 25.437C53.7072 25.9903 53.468 26.0989 52.5148 26.1017C51.7216 26.1042 51.6492 26.139 51.344 26.6627C51.1356 27.0206 50.816 27.289 50.454 27.4098C50.0576 27.5423 49.8252 27.7539 49.6752 28.1179C49.4584 28.6436 48.8856 29.0226 48.3072 29.0226C48.1268 29.0226 47.934 29.1759 47.8604 29.3773C47.7708 29.6221 47.5124 29.7851 47.0252 29.9043C46.46 30.0425 46.2656 30.1868 46.0456 30.6331C45.8948 30.9395 45.5776 31.3469 45.34 31.5386C45.0308 31.7883 44.934 31.9849 44.998 32.2326C45.1004 32.6294 44.902 32.841 44.2804 32.9995C44.0324 33.0623 43.8872 33.1847 43.946 33.2812C44.012 33.389 43.9236 33.4178 43.7052 33.3598C43.5152 33.3096 43.36 33.3391 43.36 33.4251C43.36 33.511 43.2772 33.5297 43.1756 33.466C43.0744 33.4028 42.8984 33.4798 42.7848 33.6375C42.6708 33.7952 42.3444 33.9723 42.0596 34.0315C41.716 34.1028 41.4536 34.2986 41.282 34.6127C41.1224 34.9046 40.828 35.1377 40.5168 35.2195C40.1112 35.3261 39.974 35.4773 39.8252 35.9812C39.7148 36.3545 39.494 36.6767 39.2824 36.7748C39.0724 36.8717 38.8852 37.1429 38.828 37.4339C38.7512 37.8222 38.618 37.9576 38.2052 38.0663L37.68 38.2041L37.6764 39.3285C37.6744 39.9471 37.6224 40.534 37.5612 40.6325C37.4884 40.7496 37.6144 40.8056 37.9244 40.7946C38.2636 40.7825 38.3992 40.6965 38.3996 40.4939C38.4 40.3252 38.5208 40.2101 38.698 40.2101C38.9292 40.2101 38.9784 40.1197 38.9192 39.8048C38.8512 39.4452 38.8972 39.3994 39.3216 39.3994C39.8656 39.3994 40.1048 39.1749 40.1848 38.5888C40.2152 38.3658 40.312 38.1822 40.4 38.181C40.6624 38.1769 40.96 37.9349 40.9576 37.7278C40.956 37.6119 40.8932 37.6317 40.8 37.7781C40.7148 37.9118 40.6436 37.939 40.6424 37.8385C40.6392 37.5981 41.0988 37.2159 41.2304 37.3496C41.2872 37.4068 41.2372 37.4538 41.12 37.4538C41.0028 37.4538 40.9528 37.5008 41.0096 37.558C41.178 37.729 41.5884 37.2872 41.4932 37.0367C41.4452 36.9094 41.4856 36.8052 41.5828 36.8052C41.6804 36.8052 41.742 36.7505 41.72 36.6836C41.682 36.5677 42.3928 35.7667 42.56 35.7372C42.604 35.7295 42.766 35.667 42.92 35.5985C43.074 35.5296 43.29 35.5053 43.4 35.5438C43.7124 35.6541 44.08 35.1527 44.08 34.6164C44.08 34.3489 44.152 34.1288 44.24 34.1275C44.328 34.1263 44.484 34.0708 44.5864 34.0047C44.6888 33.9386 44.7968 33.9508 44.8264 34.0319C44.856 34.1129 44.9728 34.0769 45.0864 33.952C45.2324 33.7911 45.2384 33.7246 45.1068 33.7246C44.9664 33.7246 44.9664 33.6687 45.108 33.496C45.2364 33.3395 45.2424 33.2338 45.1276 33.162C45.0356 33.104 44.96 32.9877 44.96 32.903C44.96 32.8175 45.0904 32.8317 45.2536 32.935C45.7348 33.2394 46.4476 32.9046 46.6208 32.2934C46.7324 31.899 46.856 31.779 47.1512 31.779C47.6796 31.779 48.3848 31.385 48.7892 30.8645C49 30.5925 49.344 30.3939 49.7064 30.3343C50.0256 30.2816 50.274 30.1811 50.2584 30.111C50.2168 29.9249 51.1516 29.1633 51.48 29.1155C51.6772 29.0867 51.7748 28.899 51.8096 28.4811L51.8592 27.8877H52.964C54.1496 27.8877 54.4212 27.7032 54.304 26.9773C54.2516 26.6526 54.3304 26.6299 55.7708 26.5537C57.3288 26.471 58.08 26.1313 58.08 25.5083C58.08 25.3713 58.2804 25.2935 58.6328 25.2935C59.1356 25.2935 59.1948 25.2432 59.2888 24.7365C59.4444 23.895 58.7576 23.3575 57.9784 23.7118ZM95.84 23.724C95.608 23.8452 95.4596 24.0478 95.4864 24.2063C95.5124 24.3563 95.4512 24.6348 95.3508 24.8249C95.24 25.034 95.2332 25.1297 95.3328 25.0673C95.4236 25.0105 95.5432 25.0381 95.5984 25.1285C95.6536 25.2193 95.9468 25.2935 96.2496 25.2935C96.5524 25.2935 96.8 25.3664 96.8 25.4556C96.8 25.5448 96.8764 25.6177 96.9696 25.6177C97.0628 25.6177 97.0944 25.5448 97.04 25.4556C96.9856 25.3664 97.0116 25.2935 97.0976 25.2935C97.4972 25.2935 97.7592 25.529 97.9248 26.0373C98.0928 26.5533 98.1516 26.5906 98.7952 26.5906C99.2632 26.5906 99.5156 26.6692 99.5784 26.8354C99.6292 26.97 99.7632 27.0612 99.8756 27.0381C99.988 27.015 100.062 27.0855 100.041 27.1949C99.986 27.4771 100.778 27.8496 101.44 27.8532C103.072 27.8613 103.04 27.8512 103.04 28.3717C103.04 29.0474 104.374 30.3818 104.913 30.2447C105.115 30.1933 105.28 30.2103 105.28 30.282C105.28 30.3542 105.514 30.4308 105.8 30.4527C106.372 30.4965 106.876 30.9083 106.946 31.3886C106.991 31.6987 107.038 31.721 107.737 31.7587C108.015 31.7737 108.152 31.9131 108.259 32.2921C108.368 32.6764 108.544 32.8535 108.962 32.9966C109.363 33.1336 109.521 33.2848 109.525 33.5337C109.53 33.9804 109.834 34.2816 110.283 34.2872C110.545 34.2909 110.686 34.438 110.816 34.8466C110.989 35.3873 112.116 35.9791 112.507 35.7343C112.578 35.6897 112.594 35.7663 112.542 35.9042C112.489 36.042 112.382 36.1145 112.303 36.0651C112.062 35.9143 112.144 36.2795 112.412 36.5503C112.679 36.8215 113.039 36.9041 112.89 36.6601C112.842 36.5803 112.894 36.4789 113.007 36.4352C113.119 36.3914 113.22 36.4749 113.23 36.6208C113.304 37.6865 113.514 38.0663 114.074 38.153C114.48 38.2158 115.082 38.913 114.73 38.913C114.626 38.913 114.586 38.9872 114.642 39.078C114.697 39.1684 114.82 39.1935 114.916 39.1339C115.016 39.0715 115.044 39.0999 114.982 39.2012C114.923 39.2977 114.948 39.423 115.037 39.4789C115.127 39.5348 115.2 39.5048 115.2 39.4124C115.2 39.3001 115.331 39.3046 115.595 39.4266C115.812 39.5271 115.955 39.6662 115.912 39.7363C115.87 39.806 115.916 39.9142 116.014 39.9758C116.117 40.0399 116.131 40.1323 116.048 40.1899C115.968 40.2458 116.032 40.4189 116.191 40.5749C116.35 40.731 116.48 40.7768 116.48 40.6767C116.48 40.547 116.539 40.5441 116.685 40.6674C117.014 40.9434 117.312 40.6252 117.312 39.9989C117.312 39.1246 116.998 38.3399 116.55 38.0971C116.33 37.9775 116.002 37.6378 115.822 37.3423C115.641 37.0468 115.436 36.8052 115.364 36.8052C115.293 36.8052 115.118 36.5093 114.975 36.1474C114.788 35.6731 114.565 35.4259 114.176 35.2613C113.833 35.1158 113.601 34.8851 113.536 34.6245C113.472 34.3651 113.284 34.1778 113.022 34.1109C112.795 34.053 112.249 33.7603 111.808 33.4599C111.146 33.008 110.545 32.8252 109.913 32.8835C109.866 32.888 109.811 32.6594 109.792 32.3756C109.77 32.0583 109.608 31.7352 109.37 31.5358C109.157 31.3574 108.934 31.0092 108.873 30.762C108.728 30.1681 108.228 29.8333 107.484 29.8333C107.001 29.8333 106.88 29.7725 106.88 29.5309C106.88 29.3234 106.66 29.1438 106.176 28.9566C105.667 28.7592 105.417 28.5464 105.268 28.1832C105.128 27.8398 104.846 27.5845 104.374 27.3729C103.994 27.2026 103.6 26.9027 103.498 26.7057C103.222 26.1739 103.03 26.0944 102.28 26.2039C101.491 26.319 100.8 25.9696 100.8 25.4548C100.8 25.0535 100.344 24.9319 98.7448 24.9072C97.534 24.8885 97.5196 24.8829 97.4696 24.4439C97.3804 23.6611 96.6108 23.3207 95.84 23.724ZM90.36 23.784C90.206 23.8245 89.954 23.8245 89.8 23.784C89.646 23.743 89.772 23.7098 90.08 23.7098C90.388 23.7098 90.514 23.743 90.36 23.784ZM44.8276 24.4017C44.8676 24.6482 44.8032 24.7134 44.56 24.6729C44.2404 24.6198 44.2404 24.6202 44.5588 24.8618C44.7344 24.9947 44.9152 25.0551 44.9608 24.9959C45.0064 24.9368 45.0908 24.8516 45.1488 24.8066C45.2064 24.7621 45.146 24.5797 45.0144 24.4013C44.7752 24.0774 44.7752 24.0774 44.8276 24.4017ZM109.789 24.5233C109.839 24.8816 110.56 25.1743 110.56 24.8362C110.56 24.7507 110.434 24.6911 110.28 24.7033C110.104 24.7175 110.008 24.6202 110.022 24.4422C110.034 24.2862 109.976 24.1585 109.891 24.1585C109.807 24.1585 109.761 24.3227 109.789 24.5233ZM44.3328 25.0908C44.3256 25.2023 44.2104 25.2935 44.076 25.2935C43.942 25.2935 43.7636 25.4759 43.68 25.6988C43.5964 25.9218 43.416 26.1042 43.2788 26.1042C43.142 26.1042 42.9884 26.2136 42.938 26.3474C42.8872 26.4811 42.6604 26.5906 42.4344 26.5906C41.8048 26.5906 40.9408 26.955 41.0276 27.184C41.074 27.3068 41.0136 27.3498 40.872 27.2947C40.7316 27.2399 40.64 27.3028 40.64 27.4535C40.64 27.9104 40.1776 28.233 39.8096 28.0332C39.6292 27.9355 39.5184 27.9173 39.564 27.9931C39.6732 28.1759 39.2676 28.5484 39.1152 28.4049C39.05 28.3433 39.0768 28.4495 39.1748 28.6408C39.3568 28.9959 39.0688 29.4839 38.8236 29.2358C38.7648 29.1763 38.5036 29.3343 38.2432 29.5869C37.7524 30.0636 37.678 30.6558 38.0948 30.7693C38.2696 30.8171 38.2664 30.7924 38.08 30.659C37.948 30.5642 37.9156 30.4855 38.008 30.4843C38.1004 30.4831 38.25 30.5569 38.3408 30.6489C38.6532 30.9654 40.2804 30.6485 40.5592 30.2168C40.7004 29.9987 40.9652 29.8333 41.1732 29.8333C41.6048 29.8333 41.9216 29.593 42.2948 28.9821C42.4448 28.7369 42.662 28.5362 42.7776 28.5362C42.8928 28.5362 43.2416 28.2626 43.5524 27.9282C43.8632 27.5938 44.3068 27.1893 44.5388 27.0287C45.0248 26.6927 45.182 25.2935 44.7332 25.2935C44.6088 25.2935 44.4704 25.2023 44.426 25.0908C44.3616 24.9287 44.3428 24.9287 44.3328 25.0908ZM109.952 26.0579C109.996 26.7519 110.049 26.8362 110.64 27.1487C111.479 27.593 112.373 28.4872 112.629 29.1373C112.772 29.5022 112.996 29.7117 113.382 29.8406C113.684 29.942 114.039 30.1912 114.171 30.3955C114.326 30.6343 114.636 30.8029 115.043 30.869C115.542 30.9496 115.696 31.0562 115.775 31.3752C115.83 31.5974 115.946 31.779 116.034 31.779C116.122 31.779 116.147 31.6533 116.089 31.5001C116.03 31.3469 116.034 31.2731 116.097 31.3367C116.159 31.4 116.321 31.3615 116.456 31.2508C116.657 31.0858 116.677 31.0903 116.566 31.2772C116.471 31.4365 116.49 31.4681 116.626 31.3821C116.734 31.3149 116.783 31.1576 116.736 31.0331C116.689 30.9083 116.746 30.8061 116.863 30.8061C117.046 30.8061 117.107 30.2695 116.956 29.9955C116.932 29.9509 116.901 29.8049 116.888 29.6712C116.876 29.5374 116.771 29.4486 116.656 29.4742C116.54 29.4997 116.354 29.4422 116.24 29.3469C116.126 29.2517 115.972 29.1941 115.897 29.2196C115.822 29.2452 115.749 29.2042 115.736 29.1292C115.69 28.8722 114.831 28.0612 114.696 28.1463C114.621 28.1929 114.56 28.1617 114.56 28.077C114.56 27.9922 114.377 27.8763 114.154 27.8196C113.919 27.76 113.792 27.642 113.854 27.5415C113.926 27.4231 114.005 27.4381 114.098 27.5865C114.173 27.7077 114.236 27.7267 114.238 27.6291C114.241 27.3846 113.623 26.8378 113.492 26.97C113.434 27.0287 113.475 27.077 113.583 27.077C113.691 27.077 113.733 27.1524 113.677 27.2444C113.617 27.3421 113.436 27.2343 113.244 26.9866C112.991 26.6607 112.806 26.5768 112.457 26.6287C112.001 26.6964 111.936 26.6153 111.993 26.0539C112.047 25.5338 111.709 25.3275 110.786 25.3162L109.903 25.3056L109.952 26.0579ZM43.1468 25.5638C42.9624 25.7503 43.03 25.942 43.28 25.942C43.412 25.942 43.52 25.8326 43.52 25.6988C43.52 25.4455 43.3308 25.377 43.1468 25.5638ZM97.28 25.6988C97.28 25.8326 97.3968 25.942 97.5396 25.942C97.752 25.942 97.7632 25.8978 97.6 25.6988C97.4904 25.565 97.3736 25.4556 97.3404 25.4556C97.3072 25.4556 97.28 25.565 97.28 25.6988ZM55.0936 26.8743C55.1972 27.0474 54.7792 27.4045 54.6312 27.2699C54.564 27.2083 54.5632 27.2541 54.6304 27.3713C54.7272 27.5415 54.8124 27.5289 55.052 27.3092C55.3132 27.0697 55.3408 26.7527 55.1012 26.7527C55.0572 26.7527 55.054 26.8074 55.0936 26.8743ZM114.811 28.518C114.702 28.6963 115.11 29.0599 115.255 28.9132C115.313 28.8544 115.36 28.8917 115.36 28.9955C115.36 29.2577 115.197 29.2322 114.852 28.9164C114.527 28.6177 114.471 28.3741 114.73 28.3741C114.823 28.3741 114.86 28.4389 114.811 28.518ZM69.44 29.3574C69.44 29.4162 69.2684 29.4308 69.0588 29.3903C68.8492 29.3497 68.622 29.4073 68.554 29.5188C68.4836 29.6347 68.496 29.6805 68.5832 29.6258C68.6672 29.5731 68.8276 29.6789 68.9396 29.8609C69.1072 30.1329 69.106 30.1677 68.932 30.0575C68.5664 29.826 68.35 29.8552 68.0656 30.1734C67.9144 30.3432 67.8692 30.4819 67.9656 30.4819C68.0624 30.4819 68.1856 30.4089 68.24 30.3197C68.3716 30.1041 68.8 30.1114 68.8 30.3295C68.8 30.4239 68.7168 30.449 68.6152 30.3854C68.5008 30.3137 68.474 30.3408 68.5448 30.4567C68.6076 30.5597 68.7844 30.644 68.9376 30.644C69.0908 30.644 69.2948 30.7239 69.3916 30.822C69.5188 30.9509 69.9228 30.9087 70.8644 30.6675C72.2232 30.3193 72.9616 30.0101 72.4572 30.0003C72.3124 29.9975 72.1528 29.886 72.102 29.7523C72.0416 29.5925 71.792 29.509 71.3744 29.509C71.0248 29.509 70.6932 29.4341 70.6376 29.3424C70.5292 29.1649 69.44 29.1787 69.44 29.3574ZM81.36 29.3477C81.184 29.4239 80.716 29.4965 80.32 29.509C79.7924 29.5257 79.6856 29.5658 79.92 29.6586C80.2296 29.7814 80.2284 29.7891 79.8796 29.9014C78.5176 30.3404 81.8884 31.0149 84.0536 30.7372C85.1264 30.5994 85.142 30.3951 84.0748 30.462C83.6224 30.49 83.36 30.4389 83.36 30.3226C83.36 30.2212 83.4432 30.1904 83.5448 30.2541C83.6464 30.3177 83.6968 30.3039 83.6572 30.2233C83.6176 30.1426 83.4944 29.8917 83.384 29.6655C83.1672 29.2229 82.0532 29.0478 81.36 29.3477ZM48.3992 30.807C48.0808 31.1637 47.9064 31.1256 48.0552 30.732C48.1072 30.5946 48.2712 30.4819 48.4196 30.4819C48.666 30.4819 48.664 30.5102 48.3992 30.807ZM63.3268 30.9249C63.1784 32.1345 63.8288 32.6002 65.3276 32.3578C66.2624 32.2066 66.7204 31.8677 66.7176 31.3294C66.7136 30.6006 66.5276 30.46 65.6248 30.5017L64.8 30.5398V31.1592C64.8 31.7397 64.7696 31.779 64.32 31.779C63.9148 31.779 63.84 31.7157 63.84 31.3736C63.84 31.1507 63.7636 30.9683 63.6704 30.9683C63.5772 30.9683 63.5424 30.9002 63.5932 30.8175C63.6436 30.7344 63.6168 30.6237 63.5336 30.5715C63.45 30.5192 63.3572 30.6781 63.3268 30.9249ZM85.7624 31.0798C85.768 32.4514 88.1716 33.1308 88.8012 31.9387C89.346 30.9075 88.934 30.5463 87.16 30.4989L85.76 30.462L85.7624 31.0798ZM90.094 30.762C89.7876 30.8203 89.7544 30.8686 89.934 30.9954C90.076 31.0956 90.0964 31.1819 89.9896 31.2273C89.7972 31.3088 89.8732 33.0728 90.0784 33.2937C90.4436 33.6861 90.9904 32.9127 90.892 32.1438C90.8776 32.0323 90.97 31.9411 91.0972 31.9411C91.4016 31.9411 91.3468 30.9995 91.03 30.7964C90.7904 30.6428 90.7292 30.6404 90.094 30.762ZM91.0992 31.1665C91.228 31.3732 91.2196 31.4993 91.0668 31.6529C90.8996 31.8211 90.8792 31.8118 90.958 31.6022C91.0748 31.2909 90.6512 30.8921 90.3824 31.0603C90.258 31.1385 90.2324 31.1118 90.31 30.9845C90.4692 30.7235 90.8836 30.8191 91.0992 31.1665ZM62.7912 31.3067C62.7324 31.4036 62.764 31.5641 62.862 31.6634C62.96 31.7628 63.0456 31.811 63.0524 31.7709C63.0588 31.7307 63.0888 31.5702 63.118 31.4142C63.1772 31.1008 62.9604 31.0295 62.7912 31.3067ZM59.0856 32.0181C58.7648 32.1596 58.5324 32.4016 58.4684 32.6606C58.3804 33.0157 58.2764 33.0761 57.756 33.0761C57.1568 33.0761 57.1472 33.0858 57.1912 33.6476C57.2472 34.359 57.122 34.4376 55.9608 34.4206C54.9776 34.4056 54.4028 34.5009 54.4248 34.6743C54.5256 35.4696 54.3936 35.6703 53.77 35.6703H53.14L53.2348 36.2783C53.3592 37.0768 54.5888 37.5665 54.66 36.8458C54.6712 36.7343 54.6888 36.5324 54.7 36.3975C54.7112 36.2621 54.972 36.0298 55.28 35.8806C55.588 35.7319 55.84 35.5539 55.84 35.4854C55.84 35.4169 56.1092 35.3095 56.4388 35.2467C56.768 35.1843 57.3548 34.9621 57.7424 34.753C58.1304 34.5442 58.5988 34.3675 58.784 34.3602C58.9688 34.3533 59.0376 34.3132 58.9368 34.2714C58.684 34.1665 58.864 33.5625 59.148 33.5625C59.2752 33.5625 59.3344 33.4895 59.28 33.4004C59.1484 33.1843 59.4108 33.1924 59.6264 33.4109C60.3248 34.1186 61.772 33.4449 61.7328 32.4304L61.7076 31.779L60.6536 31.7855C60.074 31.7887 59.3684 31.8937 59.0856 32.0181ZM91.84 32.4235C91.84 33.1093 92.348 33.5625 93.1176 33.5625C93.3276 33.5625 93.5708 33.7684 93.776 34.1206C94.0544 34.5994 94.2308 34.7056 95.0104 34.8653C95.5108 34.9682 96.0852 35.1182 96.2876 35.1989C97.196 35.5625 97.92 35.286 97.92 34.5758C97.92 34.2832 97.864 34.2268 97.6776 34.3322C97.3188 34.5357 96.3236 34.3768 96.3 34.1121C96.2888 33.9881 96.2712 33.7226 96.26 33.522C96.2444 33.2342 96.1304 33.1466 95.7204 33.1065C95.42 33.0769 95.1348 32.931 95.0448 32.7607C94.9588 32.5986 94.7688 32.419 94.622 32.3619C94.3964 32.2743 94.3868 32.297 94.56 32.5086C94.7328 32.7198 94.7236 32.7429 94.5008 32.6565C94.2952 32.5763 94.2604 32.6205 94.3436 32.8552C94.4028 33.0214 94.4012 33.1122 94.3404 33.0574C94.2796 33.0027 94.1972 32.7838 94.1568 32.571C94.0488 31.9995 93.6404 31.779 92.6896 31.779H91.84V32.4235ZM118.182 31.9776C118.226 32.0493 118.347 32.057 118.451 31.9938C118.592 31.9079 118.592 31.9395 118.448 32.1195C118.292 32.3144 118.312 32.3639 118.55 32.3821C118.762 32.3983 118.822 32.3209 118.766 32.1032C118.723 31.9346 118.559 31.8114 118.395 31.824C118.234 31.8361 118.138 31.9054 118.182 31.9776ZM59.52 32.2265C59.52 32.2942 59.376 32.4405 59.2 32.552C59.024 32.6634 58.88 32.8592 58.88 32.9869C58.88 33.3209 58.6144 33.4405 58.6076 33.1093C58.6044 32.9573 58.7488 32.6687 58.9288 32.4681C59.256 32.1028 59.52 31.995 59.52 32.2265ZM118.253 33.1357C117.75 33.9597 117.814 34.4826 118.463 34.8709C118.761 35.0493 119.042 35.3351 119.086 35.5057C119.13 35.6764 119.397 35.9585 119.679 36.1324C119.961 36.3063 120.328 36.6747 120.494 36.9512C120.675 37.2531 120.94 37.4635 121.158 37.4785C121.357 37.4919 121.628 37.5101 121.76 37.519C121.892 37.5276 122.069 37.772 122.153 38.0618C122.237 38.3516 122.363 38.5888 122.433 38.5888C122.503 38.5888 122.56 38.7655 122.56 38.9815C122.56 39.7193 123.308 40.3958 124.061 40.3398C124.953 40.2738 125.03 39.6998 124.16 39.5993C123.473 39.5198 123.546 39.622 123.499 38.6658C123.458 37.83 122.77 36.8166 122.402 37.0472C122.263 37.1344 122.164 36.4039 122.198 35.5438C122.206 35.3225 121.337 34.3683 121.151 34.3955C121.09 34.4044 120.734 34.4028 120.36 34.3922L119.68 34.3732V33.5815C119.68 32.916 119.627 32.7757 119.347 32.7015C119.104 32.6371 119.038 32.6756 119.102 32.8446C119.153 32.9788 119.094 33.0761 118.96 33.0761C118.821 33.0761 118.767 32.9796 118.822 32.8329C118.997 32.372 118.585 32.5909 118.253 33.1357ZM35.2 33.1896C35.2 33.4036 35.1572 33.4218 35.0084 33.271C34.7608 33.0201 33.846 33.8426 34.0672 34.117C34.1572 34.2285 34.0544 34.4072 33.7844 34.6087C33.3632 34.9232 33.362 34.9232 33.5932 34.6087C33.7212 34.4348 33.5772 34.526 33.2732 34.8118C32.8164 35.2414 32.7116 35.4648 32.6716 36.0975C32.6144 37.0047 32.548 37.1457 32.2348 37.0241C32.1056 36.9739 32 37.0225 32 37.1319C32 37.2803 31.9452 37.2852 31.7852 37.1506C31.6672 37.0513 31.524 37.0176 31.4668 37.0756C31.4096 37.1336 31.4428 37.2787 31.5408 37.3983C31.6736 37.5604 31.6688 37.6159 31.5224 37.6159C31.4144 37.6159 31.3616 37.7108 31.4056 37.8267C31.5552 38.2215 31.1288 38.8117 30.898 38.5296C30.7216 38.3143 30.666 38.3176 30.4144 38.5592C30.1532 38.8101 30.1508 38.8571 30.3852 39.1433C30.6128 39.4213 30.6132 39.4444 30.39 39.3626C30.1936 39.2904 30.1376 39.3974 30.1292 39.8619L30.1184 40.4533L30.8204 40.3962C31.6988 40.3252 32.2288 39.7484 32.1072 38.9961C31.9828 38.2235 31.9108 37.9576 31.7928 37.8381C31.5892 37.6317 32.0224 37.2706 32.2468 37.4595C32.39 37.5799 32.4828 37.5803 32.5556 37.4611C32.6128 37.367 32.8352 37.335 33.05 37.3897C33.7348 37.564 34.2 37.3383 34.3956 36.7371C34.5216 36.3509 34.7196 36.132 35.048 36.016C35.3552 35.9074 35.52 35.738 35.52 35.53C35.52 34.9974 35.704 34.68 36.102 34.5268C36.5828 34.3416 36.6012 33.2382 36.1232 33.2382C36.0276 33.2382 36.0428 33.3545 36.1604 33.522C36.27 33.678 36.1844 33.6233 35.97 33.4004C35.4916 32.9034 35.2 32.8235 35.2 33.1896ZM100 35.8421C100 35.9366 99.9356 35.9735 99.8568 35.924C99.674 35.8093 99.5184 36.2126 99.5932 36.6066C99.6672 36.997 101.145 38.4639 101.853 38.8506C102.154 39.0148 102.4 39.2016 102.4 39.2661C102.4 39.5121 103.373 40.8299 103.729 41.0666C104.513 41.5867 105.601 41.4894 105.598 40.8992C105.594 40.0245 105.43 39.7363 104.877 39.6313C104.436 39.5474 104.334 39.4436 104.25 38.9941C104.166 38.5373 104.062 38.4351 103.557 38.3143C103.072 38.198 102.963 38.0995 102.962 37.7724C102.96 37.2576 102.738 37.0099 102.32 37.0566C101.856 37.108 101.52 36.7983 101.52 36.3188C101.52 35.9832 101.444 35.9147 101.08 35.92C100.838 35.9232 100.64 35.8685 100.64 35.7984C100.64 35.7278 100.496 35.6703 100.32 35.6703C100.144 35.6703 100 35.7477 100 35.8421ZM113.236 35.9435C113.268 36.0379 113.155 36.1518 112.987 36.1964C112.748 36.26 112.698 36.2098 112.761 35.9674C112.843 35.6496 113.135 35.635 113.236 35.9435ZM42.1608 36.318C42.0012 36.4968 41.9448 36.6431 42.0356 36.6431C42.2368 36.6431 42.636 36.1798 42.5284 36.0708C42.486 36.0278 42.3208 36.1389 42.1608 36.318ZM69.206 36.4741C69.0336 36.6674 68.8536 37.1615 68.8064 37.5726C68.6988 38.504 68.408 38.6248 68.0588 37.883C67.2128 36.0849 64.9636 35.9869 64.9604 37.7481C64.9588 38.8498 64.3692 38.8526 63.0152 37.757C62.0468 36.9735 61.3056 37.4201 61.1344 38.8907C60.988 40.1514 60.954 40.1765 60.0144 39.7306C58.2512 38.8936 57.1404 39.6187 57.3872 41.4448C57.5168 42.403 57.1288 42.5773 56.4764 41.8538C55.3616 40.6167 54.1716 41.9799 54.552 44.0589C54.7252 45.0037 54.4468 45.2295 53.7948 44.6738C53.1896 44.1578 52.844 44.1574 52.1544 44.673C51.1728 45.407 50.9436 46.1934 51.5864 46.6206C52.5216 47.2412 52.2164 47.8079 51.0024 47.7058C49.6556 47.5927 49.1756 48.9599 49.838 51.0223C49.9392 51.3368 49.882 51.3879 49.336 51.475C47.1992 51.8147 46.6668 52.4787 47.6952 53.5208C47.8748 53.7028 48.1232 54.143 48.2472 54.4993L48.4728 55.1463L47.922 55.3797C46.8232 55.8451 46.6372 57.5435 47.6 58.3221C48.348 58.9269 48.3072 59.1121 47.3768 59.3383C45.4228 59.8134 45.5596 61.8628 47.59 62.5316C48.2412 62.746 48.2824 63.0452 47.6896 63.2548C46.2864 63.7501 46.42 66.0338 47.8736 66.3994C48.638 66.5915 48.6884 66.8518 48.0764 67.4529C46.9924 68.5177 47.3324 69.812 48.8 70.2072C49.9924 70.5282 50.1324 70.6426 49.8436 71.0601C49.3872 71.7208 49.58 73.591 50.144 73.9729C50.5344 74.2367 51.1936 74.0957 51.4548 73.6916C51.8312 73.1091 52 73.1901 52 73.9538C52 74.4645 51.8872 74.7519 51.52 75.1755C50.9448 75.8395 50.9392 75.893 51.4 76.3186C51.9384 76.8159 52.872 77.0656 53.7144 76.9375C54.5968 76.8034 54.7344 76.9586 54.5344 77.8609C54.3484 78.7008 54.474 79.1049 55.086 79.6311L55.582 80.0579L56.1848 79.7397C57.1232 79.244 57.4996 79.4478 57.3944 80.3943C57.2048 82.0968 58.934 82.8572 60.3776 81.7064C60.8528 81.3274 60.9144 81.4032 61.136 82.6403C61.4288 84.2759 62.0828 84.766 62.858 83.9301C63.1548 83.6095 63.894 83.2755 64.56 83.1604C64.648 83.145 64.7976 83.4125 64.892 83.7542C65.2812 85.1591 66.8588 85.3071 67.9388 84.0404C68.524 83.3541 68.7196 83.4133 68.8628 84.3189C69.0616 85.5799 69.7676 85.9171 71.0676 85.3715C71.3464 85.2548 71.84 84.3489 71.84 83.9549C71.84 83.6294 72.1612 83.3493 72.4196 83.4498C72.5408 83.4968 72.64 83.6273 72.64 83.7396C72.64 83.8519 72.7892 84.1357 72.9716 84.3708C73.6228 85.2094 75.84 84.8422 75.84 83.8957C75.84 83.072 76.1516 82.9683 76.8596 83.5564C77.4768 84.0688 78.0116 84.2333 78.8424 84.1661C79.0856 84.1462 79.4672 83.3136 79.5936 82.5281C79.746 81.5787 79.8996 81.4519 80.406 81.8552C81.5904 82.7996 83.5372 81.691 82.9188 80.4243L82.5984 79.7681L83.0192 79.6752C83.2508 79.6242 83.5328 79.5532 83.646 79.518C83.7592 79.4823 84.1472 79.5561 84.5084 79.6821C85.6328 80.0749 86.1416 79.5232 86.0616 77.9979C86.0056 76.9238 86.2212 76.6797 87.0404 76.8901C88.3792 77.2347 89.2776 76.4544 88.882 75.2906C88.698 74.7495 88.7068 73.2862 88.8936 73.2862C88.9224 73.2862 89.1256 73.4686 89.3456 73.6916C90.1436 74.5006 91.0136 74.0385 91.1596 72.7281C91.2544 71.8744 90.9784 71.0698 90.5428 70.9295C90.0192 70.7613 90.2116 70.5538 91 70.4379C91.9056 70.3041 92.564 69.992 92.7008 69.6308C93.03 68.7609 92.62 67.2433 92.0016 67.0443C91.4832 66.8777 91.6256 66.714 92.4816 66.4918C94.0312 66.0893 94.3372 64.0363 92.9552 63.3123C92.3404 62.9901 92.3552 62.7837 93.0128 62.5053C93.6768 62.224 93.8056 62.0562 94.1328 61.0448L94.3948 60.2341L93.9148 59.7882C93.6508 59.543 93.3008 59.3424 93.1372 59.3424C92.506 59.3424 92.43 58.9192 92.9616 58.3675C94.1888 57.0955 94.0408 55.6975 92.64 55.3331C92.332 55.2529 92.1044 55.139 92.134 55.0798C92.1636 55.0206 92.2308 54.807 92.2828 54.6055C92.3348 54.4037 92.5816 53.8451 92.8312 53.3648C93.4252 52.2201 93.0672 51.7612 91.36 51.4791C90.3748 51.3166 90.322 51.2594 90.7408 50.8078C91.8484 49.6133 91.2316 47.5854 89.7976 47.7058C88.6988 47.7982 88.5412 47.6174 88.8064 46.5696C89.2104 44.9717 88.1112 43.6843 87.106 44.5785C86.2864 45.3081 86.1724 45.1878 86.0784 43.4958C85.9608 41.3731 85.3052 40.7626 84.3064 41.8461C83.7628 42.4359 82.2528 42.4456 82.7772 41.8558C83.296 41.2725 83.2636 40.7687 82.6648 40.097C81.7092 39.0253 81.3988 38.9361 80.722 39.5381C79.8656 40.3001 79.52 40.0768 79.52 38.7614C79.52 37.2957 77.7576 36.8705 76.782 38.1007C76.2316 38.7947 75.84 38.7635 75.84 38.0253C75.84 36.1547 73.3632 35.9005 72.7456 37.7079C72.4312 38.6285 71.9752 38.5847 71.792 37.6159C71.5444 36.3059 69.9752 35.6131 69.206 36.4741ZM51.9108 37.6378L51.92 38.3083L50.6584 38.3269L49.3964 38.3455L49.3364 38.9013C49.262 39.5912 49.2312 39.6216 48.596 39.6333C48.122 39.6418 48.0792 39.6864 48.0704 40.1814C48.0608 40.718 47.7872 41.0492 47.4544 40.9264C47.0632 40.7821 46.8064 41.1805 46.7808 41.9726C46.7664 42.416 46.7176 42.8392 46.6728 42.913C46.604 43.0256 47.196 43.0589 47.9404 42.9847C48.158 42.9628 48.4496 42.2559 48.5136 41.5948C48.548 41.2385 48.6608 41.0909 48.9512 41.022C49.2232 40.9576 49.3828 40.7707 49.4756 40.4075C49.5896 39.9629 49.6816 39.8859 50.0992 39.8859C50.3688 39.8859 50.7724 39.7399 50.9964 39.5616C51.22 39.3832 51.5292 39.2373 51.6832 39.2373C52.1092 39.2373 52.48 38.5231 52.48 37.7027C52.48 37.1015 52.4272 36.9674 52.1908 36.9674C51.9568 36.9674 51.9032 37.0959 51.9108 37.6378ZM71.8904 38.9041C72.4652 39.1222 72.8208 38.9357 73.2564 38.1875C73.8828 37.1117 75.1204 37.4469 75.4436 38.7797C75.6756 39.7371 76.094 39.8546 76.7968 39.1595C77.4624 38.5008 78.2752 38.4627 78.558 39.0764C79.5752 41.2831 79.7864 41.4566 80.5448 40.7115C81.3896 39.8818 82.2044 40.2661 81.9952 41.3958C81.7388 42.7792 83.052 43.4375 84.5908 42.6977C85.3924 42.3122 85.728 43.3524 85.2084 44.6118C85.0008 45.1156 86.1572 45.8286 86.774 45.5769C87.7256 45.189 87.804 45.1918 88.0836 45.6243C88.3412 46.0228 88.338 46.0751 88.0156 46.7017C87.6376 47.4366 87.688 47.6377 88.432 48.3543L88.8912 48.7973L89.5772 48.4532C90.7388 47.8711 91.0952 49.1869 90.0896 50.3437C89.314 51.2363 89.6588 52.0462 90.8144 52.0462C92.288 52.0462 92.4372 52.4564 91.516 53.9736C90.752 55.2318 90.9048 55.6858 92.1664 55.9042C93.0552 56.0579 93.2808 56.4073 92.8688 56.9922C91.744 58.5909 91.6364 59.0209 92.2516 59.4563C93.65 60.4461 93.6916 60.9836 92.454 62.0707C91.6916 62.7408 91.6824 63.0784 92.4104 63.6864C93.3124 64.44 93.1876 65.4833 92.16 65.7796C90.8576 66.155 90.6372 66.6892 91.4216 67.5705C91.9068 68.1152 91.9528 68.2466 91.8596 68.8274L91.756 69.476L90.9176 69.525C90.1772 69.5684 90.0516 69.6288 89.8396 70.0439C89.5136 70.6831 89.528 70.7597 90.0936 71.4123C90.7036 72.1168 90.5944 73.6684 89.9788 73.0446C88.864 71.9149 87.4596 73.5351 88.1064 75.2043C88.4984 76.2152 87.796 76.777 86.9504 76.1289C86.4664 75.7576 86.1536 75.8338 85.6164 76.4536C85.0392 77.12 85.0348 77.1475 85.388 77.8982C85.7848 78.7417 85.4036 79.154 84.432 78.931C82.7908 78.5541 81.8268 79.139 81.9488 80.4369C82.048 81.4883 81.4684 81.8037 80.7444 81.0927C79.9744 80.3364 79.1676 80.4961 78.9708 81.4438C78.9208 81.6833 78.8432 82.0595 78.7984 82.2792C78.6348 83.0797 77.5236 83.1632 76.7828 82.43C76.06 81.7145 75.6172 81.899 75.422 82.9962C75.2476 83.9772 75.094 84.1494 74.3944 84.1494C73.7676 84.1494 73.5852 84.0323 72.9216 83.2009C72.5044 82.6784 71.9536 82.77 71.1212 83.4997C69.9432 84.5329 69.8156 84.5686 69.5064 83.9496C68.8912 82.719 68.4732 82.5836 67.624 83.3391C66.5316 84.3112 65.4444 84.4255 65.4392 83.5694C65.4324 82.4312 64.7384 81.7076 64.124 82.1977C62.6384 83.3821 61.882 83.2488 61.6848 81.7676C61.5428 80.7032 61.0064 80.2273 60.428 80.6529C60.2368 80.7936 59.936 81.0137 59.76 81.1418C59.3044 81.4734 58.0168 81.2974 58.1712 80.9245C58.7036 79.6396 58.666 79.5123 57.5884 78.9549C57.0288 78.6655 56.9588 78.6635 56.3296 78.9136C55.3744 79.2942 54.9468 78.8881 55.1824 77.8244C55.4484 76.6258 54.8188 75.9023 53.7836 76.2168C53.2708 76.3725 53.0352 76.3705 52.6484 76.2083C52.0944 75.9757 52.0864 75.9497 52.4 75.394C53.2128 73.953 52.1752 72.086 51.0356 72.9396C50.5404 73.3105 50.4628 73.2627 50.2316 72.4459C50.1076 72.0078 50.1516 71.8683 50.5644 71.392C51.3048 70.5372 50.9956 69.8497 49.7772 69.641C48.6428 69.4468 48.3164 68.3706 49.1328 67.5169C49.8124 66.8064 49.7036 66.4853 48.6 65.9434C47.41 65.3589 47.2852 64.5624 48.24 63.6496C48.9468 62.9739 48.9412 62.8328 48.1748 62.0942C47.588 61.5288 47.04 60.6828 47.04 60.3428C47.04 60.2601 47.274 60.0987 47.56 59.9844C48.896 59.4498 48.998 59.0992 48.24 57.6509C47.538 56.3104 47.538 56.312 48.37 55.9505C49.6828 55.3801 49.682 54.3408 48.3676 52.8281C48.0704 52.486 48.6324 52.1483 49.7816 51.9789C50.9224 51.8111 51.194 51.407 50.6884 50.6299C49.5956 48.9494 50.218 47.5842 51.544 48.7536C51.7788 48.9607 51.8512 48.9271 52.2004 48.4492C52.7672 47.6725 52.8256 47.3957 52.5584 46.7479C52.078 45.583 52.5776 45.0568 53.7616 45.4804C54.7784 45.8436 55.2356 45.3977 55.1724 44.1055C55.0964 42.5502 55.508 41.8923 56.1368 42.564C57.1388 43.6345 58.956 42.5915 58.3064 41.3183C57.8392 40.4031 59.2092 39.9916 60.1248 40.7723C60.9928 41.5129 61.5608 40.9361 61.8432 39.0286C61.96 38.2393 62.0496 38.1364 62.3536 38.4445C62.7472 38.8433 64.7184 39.6974 64.8976 39.547C64.9972 39.4631 65.236 38.9576 65.428 38.4242C65.62 37.8903 65.848 37.4538 65.9348 37.4538C66.236 37.4538 67.282 38.0894 67.6568 38.5C68.2508 39.1514 69.44 38.8389 69.44 38.0318C69.44 37.9037 69.5188 37.5936 69.6148 37.3427L69.7896 36.8863L70.6148 37.8097C71.0688 38.3176 71.6428 38.8101 71.8904 38.9041ZM36.384 41.0926C36.2896 41.3098 36.0284 41.4578 35.6232 41.5234C34.4168 41.7196 34.3524 43.3901 35.5476 43.4869C35.9808 43.5218 35.9308 44.1014 35.4948 44.1014C35.3868 44.1014 35.4044 43.9936 35.5404 43.8177C35.7392 43.5611 35.7336 43.555 35.4816 43.7549C35.3288 43.8765 35.2436 44.0423 35.2932 44.1229C35.3432 44.2048 35.1244 44.2372 34.7972 44.1959C34.0224 44.0986 33.8348 44.189 33.4528 44.8456C33.2724 45.1549 33.0016 45.3985 32.8372 45.3985C32.2184 45.3985 31.9368 46.4861 32.312 47.4253C32.3956 47.6336 32.3652 47.8383 32.2272 47.9984C32.0416 48.2136 32.0684 48.2522 32.4248 48.2817C33.0436 48.3336 33.92 47.3061 33.92 46.5286C33.92 45.8396 34.0464 45.6547 34.3452 45.906C34.5044 46.0398 34.56 46.037 34.56 45.8951C34.56 45.7897 34.6284 45.7467 34.712 45.799C34.796 45.8513 34.9536 45.5923 35.0628 45.223C35.174 44.8473 35.5296 44.2855 35.8708 43.9466C36.4216 43.3994 36.48 43.2603 36.48 42.4995C36.48 41.6921 36.494 41.6653 36.8192 41.842C37.0528 41.9685 37.1252 41.9709 37.0508 41.8493C36.9816 41.7358 37.0412 41.7111 37.2196 41.7804C37.4336 41.8635 37.4716 41.825 37.3896 41.6082C37.326 41.4403 37.3476 41.3682 37.4432 41.4282C37.5408 41.4894 37.5356 41.3795 37.43 41.1444C37.2128 40.6613 36.5856 40.6301 36.384 41.0926ZM117.157 40.9965C117.111 41.1173 117.138 41.2632 117.217 41.3208C117.296 41.3787 117.36 41.5356 117.36 41.6694C117.36 41.8031 117.486 41.9024 117.64 41.8899C117.794 41.8777 117.92 41.9324 117.92 42.0115C117.92 42.0909 118.028 42.1558 118.16 42.1558C118.32 42.1558 118.4 42.3179 118.4 42.6422C118.4 42.9097 118.415 43.1833 118.432 43.2502C118.494 43.4796 119.411 44.4257 119.572 44.4257C119.661 44.4257 119.686 44.3779 119.628 44.3191C119.57 44.2603 119.61 44.0962 119.716 43.9543C119.822 43.8124 119.846 43.75 119.77 43.8165C119.692 43.8825 119.515 43.8461 119.375 43.7354C119.149 43.5571 119.145 43.5668 119.34 43.8177C119.476 43.9936 119.493 44.1014 119.385 44.1014C118.949 44.1014 118.899 43.5218 119.332 43.4869C119.842 43.4456 120.161 43.0601 120.158 42.4898C120.153 41.7225 119.925 41.5644 118.76 41.5206C118.494 41.5109 118.4 41.4091 118.4 41.1303C118.4 40.6953 117.316 40.5786 117.157 40.9965ZM29.3192 41.1692C29.3448 41.3305 29.2608 41.4095 29.0936 41.3816C28.8952 41.3487 28.8388 41.4416 28.8716 41.7464C28.9044 42.0484 28.8376 42.1611 28.618 42.176C28.454 42.1874 28.158 42.2056 27.96 42.2166C27.5736 42.2385 27.5756 42.23 27.54 43.917C27.5208 44.8302 27.5044 44.8659 27.12 44.8229C26.8616 44.7942 26.72 44.8594 26.72 45.0074C26.72 45.1334 26.622 45.2364 26.502 45.2364C26.382 45.2364 26.2828 45.4006 26.2812 45.6012C26.2688 47.3422 26.2684 47.3442 25.7796 47.3442C25.1332 47.3442 24.984 47.6073 24.9456 48.8156C24.9132 49.8196 24.8916 49.8735 24.5048 49.906C23.9788 49.9501 23.7676 50.289 24.1324 50.5038C24.4224 50.6749 24.4856 50.9594 24.28 51.1678C24.214 51.2347 24.1544 51.1131 24.1472 50.8978C24.1404 50.6822 24.0984 50.5975 24.0536 50.7094C24.0092 50.8216 23.9068 50.8719 23.8264 50.8216C23.746 50.7714 23.68 50.807 23.68 50.9015C23.68 50.9959 23.77 51.0746 23.88 51.0758C24.0292 51.0778 24.0256 51.1131 23.866 51.216C23.744 51.2943 23.6648 51.5902 23.682 51.9023C23.7272 52.7207 23.6964 52.8865 23.52 52.7758C23.432 52.7207 23.36 52.7527 23.36 52.8471C23.36 52.9416 23.252 53.019 23.12 53.019C22.988 53.019 22.88 53.1284 22.88 53.2622C22.88 53.396 22.8148 53.5054 22.7348 53.5054C22.6552 53.5054 22.6276 53.6513 22.6736 53.8297C22.7708 54.2059 22.7444 54.1981 23.2504 54.0032C23.6136 53.8633 23.6484 53.895 23.7368 54.4454C23.852 55.1661 23.7456 55.2901 22.988 55.3189L22.4 55.3416V56.6217C22.4 57.3708 22.338 57.8637 22.2512 57.809C22.1692 57.7579 22.0588 57.7867 22.006 57.8734C21.9532 57.9601 21.7968 57.9873 21.6588 57.9334C21.2236 57.7644 21.1248 58.2277 21.1224 60.4542C21.1204 62.363 21.15 62.6082 21.3732 62.5215C21.5124 62.4672 21.8344 62.423 22.0888 62.423C22.7664 62.423 23.07 61.7663 22.806 60.8725C22.6992 60.5106 22.6276 59.8904 22.6472 59.4944C22.6668 59.0988 22.6912 58.4283 22.7012 58.0047C22.72 57.2423 23.188 56.4592 23.506 56.6582C23.9628 56.9444 24.5052 55.4742 24.424 54.171C24.3792 53.4523 24.3916 52.8715 24.4512 52.88C24.7924 52.9282 24.938 52.7819 25.242 52.0867C25.4272 51.6631 25.618 51.1285 25.6656 50.8986C25.7132 50.6684 25.9204 50.4029 26.1256 50.3081C26.4952 50.1374 26.88 49.2213 26.88 48.512C26.88 48.3243 27.0928 48.0235 27.3644 47.8274C27.8184 47.4998 27.8472 47.4167 27.8204 46.5112C27.79 45.4865 27.9272 45.2113 28.5144 45.1205C29.0032 45.0447 29.0776 44.9352 29.1608 44.1651C29.2488 43.3491 29.374 43.1286 29.748 43.1286C30.6124 43.1286 31.1708 41.9726 30.6532 41.2543C30.3596 40.8473 29.2564 40.7768 29.3192 41.1692ZM124.393 41.0909C123.68 41.6305 124.213 43.1286 125.118 43.1286C125.491 43.1286 125.566 43.2713 125.654 44.1383C125.732 44.9142 125.98 45.2056 126.612 45.2676L127.12 45.3175V46.416C127.12 47.4249 127.152 47.5306 127.52 47.7175C127.846 47.8837 127.953 48.1123 128.103 48.9643C128.244 49.7608 128.386 50.0871 128.704 50.3437C128.933 50.529 129.122 50.7868 129.124 50.9173C129.126 51.0478 129.268 51.4678 129.439 51.8508C129.61 52.2343 129.768 52.8046 129.789 53.1183C129.81 53.4325 129.916 53.7397 130.024 53.8009C130.132 53.8621 130.267 54.2768 130.324 54.7223C130.468 55.8386 131.094 56.9103 131.604 56.9103C132.201 56.9103 132.463 59.1158 132.105 61.1259C131.939 62.0594 132.174 62.3942 133.04 62.4574L133.68 62.5041L133.719 60.7295C133.74 59.753 133.69 58.7072 133.608 58.4048C133.515 58.0631 133.515 57.704 133.609 57.4547C133.718 57.1616 133.709 57.085 133.574 57.1697C133.45 57.2476 133.417 57.1782 133.474 56.9561C133.544 56.689 133.498 56.6432 133.235 56.7133C133.03 56.7676 132.949 56.7356 133.015 56.6266C133.082 56.5179 133.002 56.4855 132.8 56.539C132.52 56.6132 132.48 56.5443 132.48 55.9926V55.3615L131.841 55.4231C131.098 55.4948 130.946 55.2812 131.11 54.396C131.205 53.8824 131.264 53.8297 131.752 53.8297C132.216 53.8297 132.278 53.7839 132.204 53.4961C132.155 53.3056 132.028 53.1978 131.907 53.2448C131.78 53.2942 131.728 53.2415 131.778 53.1118C131.826 52.9829 131.709 52.8589 131.485 52.8017C131.156 52.7178 131.118 52.6278 131.172 52.0519L131.234 51.3976H130.577C129.728 51.3976 129.511 50.2055 130.347 50.1354C130.907 50.0884 131.04 49.9437 130.547 49.9193C130.334 49.9088 130.119 49.9043 130.068 49.9096C130.018 49.9149 129.959 49.5424 129.938 49.0811C129.918 48.6202 129.829 48.1982 129.742 48.1435C129.655 48.0888 129.605 47.9413 129.632 47.8156C129.661 47.6754 129.572 47.6056 129.4 47.6352C129.246 47.6612 129.12 47.6064 129.12 47.5136C129.12 47.4204 129.012 47.3442 128.88 47.3442C128.641 47.3442 128.578 47.043 128.635 46.1683C128.664 45.7204 127.91 44.75 127.532 44.75C127.431 44.75 127.359 44.3973 127.358 43.8988C127.354 42.5546 127.248 42.3297 126.565 42.219C126.051 42.1355 125.974 42.0678 126.01 41.7334C126.036 41.487 125.969 41.3451 125.826 41.3451C125.702 41.3451 125.6 41.249 125.6 41.1315C125.6 40.8712 124.722 40.8417 124.393 41.0909ZM105.735 42.3585C105.639 43.1347 105.686 43.4042 105.914 43.3884C106.096 43.3763 106.162 43.5404 106.166 44.0204C106.18 45.3718 107.25 46.3442 107.947 45.6377C108.247 45.3337 108.104 44.8809 107.721 44.9202C106.956 44.9997 106.88 44.934 106.88 44.1959C106.88 43.7747 106.798 43.4464 106.68 43.3982C106.52 43.3329 106.52 43.3138 106.68 43.3037C107.093 43.277 106.861 43.0131 106.44 43.0301C106.059 43.0451 106.002 42.988 106.017 42.6017C106.034 42.1679 105.785 41.9531 105.735 42.3585ZM46.1664 43.4423C46.104 43.5445 45.8972 43.5895 45.7064 43.5421C45.516 43.4946 45.4504 43.4979 45.5608 43.5494C45.6716 43.6008 45.7088 43.7277 45.6436 43.8315C45.5784 43.9352 45.5236 44.1663 45.5224 44.3446C45.5208 44.5838 45.3944 44.6831 45.04 44.7236C44.392 44.7978 44.2052 44.9855 44.13 45.6381C44.0068 46.7086 45.4548 46.9093 45.9564 45.8914C46.1084 45.583 46.4144 45.234 46.6364 45.116C47.1032 44.8683 47.1828 44.1926 46.8052 43.6864C46.676 43.5133 46.5668 43.4448 46.5628 43.534C46.5584 43.6231 46.4932 43.5972 46.4176 43.476C46.318 43.3167 46.2488 43.3074 46.1664 43.4423ZM119.813 44.3041C119.732 44.9154 119.765 46.013 119.863 45.9518C119.926 45.9125 120.021 46.0207 120.075 46.1926C120.128 46.3641 120.428 46.7021 120.74 46.9433C121.136 47.2493 121.284 47.4743 121.229 47.6875C121.185 47.8557 121.207 47.9575 121.277 47.9137C121.422 47.8225 121.798 48.2246 121.679 48.3446C121.636 48.3879 121.76 48.4179 121.953 48.4111C122.273 48.3993 122.3 48.4666 122.26 49.1682L122.216 49.9384H122.868H123.52L123.539 51.0328C123.549 51.6348 123.546 52.2185 123.532 52.3299C123.518 52.4414 123.585 52.5326 123.682 52.5326C123.78 52.5326 123.82 52.5966 123.772 52.6753C123.724 52.7535 123.872 53.0077 124.102 53.2399C124.331 53.4726 124.582 53.623 124.659 53.5743C124.811 53.4795 124.813 53.5005 124.853 55.7267C124.882 57.3011 124.966 57.5126 125.604 57.6107C125.994 57.6707 126.258 58.4741 126.144 59.2573C126.124 59.3939 126.174 59.4648 126.254 59.4145C126.334 59.3643 126.4 59.3943 126.4 59.4814C126.4 59.5686 126.326 59.6768 126.236 59.7222C126.146 59.7676 126.164 59.7854 126.276 59.7623C126.388 59.7388 126.48 59.586 126.481 59.4226C126.481 59.2593 126.571 59.0955 126.681 59.0582C126.804 59.0169 126.845 59.0846 126.788 59.2358C126.718 59.4198 126.778 59.4591 127.027 59.3926C127.347 59.3079 127.36 59.3659 127.362 60.8231C127.364 61.6585 127.418 62.2665 127.482 62.1741C127.547 62.0821 127.852 62.0063 128.16 62.0059C128.888 62.0051 128.993 61.4011 128.28 61.318C127.767 61.258 127.537 60.663 127.81 60.1C128.272 59.1433 128.126 58.3995 127.301 57.5098C127.07 57.2601 126.88 56.9525 126.88 56.826C126.88 56.6995 126.732 56.3084 126.552 55.9573C126.321 55.5086 126.234 55.0688 126.26 54.4803C126.301 53.582 126.142 53.3502 125.48 53.3457C125.139 53.3433 125.12 53.2796 125.12 52.1248V50.9059L124.579 50.6445C124.124 50.4244 123.992 50.229 123.747 49.4078C123.586 48.8715 123.43 48.5083 123.4 48.6008C123.37 48.6932 123.204 48.7317 123.032 48.6863C122.837 48.6344 122.717 48.6867 122.711 48.8249C122.706 48.9469 122.614 48.7913 122.506 48.4792C122.3 47.8825 122.339 47.1821 122.579 47.1821C122.656 47.1821 122.72 46.9016 122.72 46.5586C122.72 45.9433 122.358 45.3985 121.95 45.3985C121.848 45.3985 121.582 45.1067 121.36 44.75C120.946 44.0848 119.883 43.7784 119.813 44.3041ZM64.8944 45.5124C64.6384 45.5538 64.2648 45.6961 64.0644 45.829C63.864 45.9624 63.3384 46.1679 62.8968 46.2858C62.4552 46.4038 61.7844 46.7544 61.4068 47.0649C61.0292 47.3754 60.4312 47.7767 60.078 47.9571C59.3216 48.3425 58.6152 49.0207 58.4628 49.5067C58.4032 49.6968 58.1568 50.109 57.9152 50.4224C57.116 51.46 56.4164 53.6238 56.638 54.3737C56.7832 54.8649 56.782 55.3141 56.6312 56.34L56.436 57.6691L57.1016 58.8239C57.4676 59.4591 57.8704 60.0375 57.9964 60.1089C58.1228 60.1806 58.446 60.712 58.7148 61.2905C59.6724 63.3516 59.9908 63.804 60.5908 63.9568C60.8208 64.0152 61.198 64.2681 61.4288 64.5186C62.0904 65.2361 64.4448 65.945 65.26 65.6722C65.8928 65.461 66.8164 65.5048 67.9024 65.7979C68.4308 65.9406 68.588 65.9191 68.9424 65.6556C69.3752 65.3338 70.9656 64.9515 71.2168 65.1088C71.4964 65.2839 71.3524 65.5048 70.7752 65.7861C70.3204 66.0079 70.148 66.2178 70 66.7326C69.8956 67.0962 69.6368 67.6317 69.4248 67.9215C69.0796 68.3949 69.04 68.6134 69.04 70.0487V71.6482L69.6192 72.1857C69.9596 72.5023 70.248 72.9538 70.3192 73.2826C70.4964 74.0997 71.768 75.5241 72.4984 75.7231C75.6216 76.5756 79.4532 75.5687 79.7788 73.8099C79.8448 73.4516 80.0928 73.0227 80.4076 72.722C81.468 71.7086 81.3676 69.4618 80.1524 67.0289C79.3544 65.431 79.3352 65.1955 80 65.1781C80.132 65.1745 80.6 64.9568 81.04 64.6945C81.48 64.4319 82.216 64.0338 82.6756 63.8105C84.8824 62.7367 85.0952 58.7956 82.9864 58.0505C82.7128 57.9541 82.2992 57.6906 82.0668 57.4648C81.0308 56.4592 78.6024 56.4267 77.8856 57.4093C77.6956 57.6699 77.4172 57.8831 77.2676 57.8831C76.8096 57.8831 76.3312 58.417 76.178 59.0992C76.048 59.6764 76.0304 59.601 76.016 58.4109C76.0044 57.4369 76.0916 56.8049 76.338 56.0842C76.722 54.9602 76.67 54.1532 76.1588 53.304C75.984 53.0133 75.8408 52.6384 75.8404 52.4706C75.8404 52.3028 75.5912 51.9278 75.2876 51.6376C74.9836 51.347 74.6884 50.9218 74.6316 50.6919C74.5748 50.4625 74.1216 49.927 73.624 49.5022C72.5504 48.5845 72.4856 48.5023 72.4824 48.0479C72.48 47.7191 71.664 46.8578 71.3548 46.8578C71.2776 46.8578 70.9488 46.6754 70.6248 46.4524C70.1876 46.1517 69.824 46.0467 69.2176 46.0455C68.768 46.0443 68.076 45.9441 67.68 45.8225C66.8052 45.5538 65.5252 45.4115 64.8944 45.5124ZM120.93 46.5221C121.056 46.9076 120.438 46.621 120.295 46.2283C120.16 45.8582 120.17 45.8521 120.508 46.0799C120.703 46.2108 120.893 46.4099 120.93 46.5221ZM42.9276 46.2623C42.8736 46.3507 42.8408 46.711 42.8544 47.0629C42.8736 47.5578 42.8272 47.6826 42.65 47.6137C42.524 47.5647 42.39 47.6117 42.3524 47.7179C42.3148 47.8245 42.2276 47.8586 42.1592 47.7941C42.0904 47.7293 42.1324 47.5469 42.2524 47.3888C42.3724 47.2303 42.2744 47.2777 42.0352 47.4942C41.5992 47.8878 41.4596 48.0997 41.76 47.9117C41.9608 47.7856 41.9604 47.8638 41.7572 48.4058C41.636 48.7284 41.5132 48.818 41.2772 48.7556C41.1028 48.7094 40.9192 48.739 40.8692 48.8213C40.8188 48.9035 40.7188 48.9339 40.6464 48.8885C40.4684 48.7771 40.328 49.6769 40.3676 50.6745C40.3984 51.454 40.3812 51.4909 40 51.4641C39.2612 51.4122 39.1268 51.7746 39.1228 53.8297L39.12 55.37L38.48 55.4511C37.8844 55.5265 37.8216 55.5962 37.896 56.0996C37.9504 56.4677 39.06 56.2666 39.4924 55.8106C40.6804 54.5577 40.9552 53.9225 40.6636 53.1045C40.2728 52.0105 40.4688 51.3976 41.2088 51.3976C41.7392 51.3976 41.7436 51.3915 41.7916 50.563C41.842 49.6956 41.908 49.6149 42.7836 49.3494C43.4972 49.133 43.6044 48.8273 43.426 47.5189C43.34 46.8878 43.326 46.3714 43.3948 46.3714C43.4636 46.3714 43.52 46.3106 43.52 46.2364C43.52 46.0467 43.0464 46.0674 42.9276 46.2623ZM107.84 46.268C107.84 46.4184 107.707 46.463 107.423 46.4078C106.704 46.2684 106.428 47.3507 107.04 47.9117C107.216 48.073 107.36 48.3012 107.36 48.4183C107.36 48.5355 107.508 48.9202 107.69 49.2732C107.998 49.8711 108.003 49.9481 107.77 50.4049C107.166 51.5898 107.729 52.1317 109.326 51.9023C109.395 51.8921 109.431 51.2173 109.406 50.4025L109.36 48.921L108.812 48.8602C108.114 48.7836 108.174 48.9157 108.134 47.3758C108.106 46.3361 107.84 45.3321 107.84 46.268ZM67.5688 46.4682C69.2528 46.7394 71.2164 47.4342 71.76 47.9506C75.1872 51.2091 76.3536 54.3769 75.286 57.5264C74.8864 58.7048 74.85 58.9626 74.9936 59.5981C75.1532 60.3039 75.1436 60.3334 74.6588 60.682C74.3844 60.879 73.9044 61.2965 73.5916 61.6099C70.618 64.5916 69.83 64.9414 66.1384 64.9171L63.2368 64.898L62.2984 64.3249C61.7824 64.0099 61.1472 63.6536 60.8872 63.5332C60.3368 63.2787 58.906 61.243 57.984 59.4024L57.3664 58.1685L57.3944 55.7466C57.4368 52.1147 58.3696 49.7292 60.156 48.6839C60.5772 48.4374 61.308 47.9749 61.7808 47.6559C63.8232 46.2765 64.9472 46.0459 67.5688 46.4682ZM31.58 48.2789C31.4812 48.3446 31.3464 48.6535 31.2808 48.9656C31.0956 49.846 30.746 50.4248 30.3996 50.4248C29.8296 50.4248 29.5352 51.1269 29.7472 51.9809C29.9808 52.9213 29.868 53.3027 29.356 53.3027C28.6496 53.3027 28.4512 53.6209 28.568 54.5674C28.6676 55.3757 28.646 55.4434 28.096 56.0603C27.7792 56.4158 27.52 56.8094 27.52 56.9354C27.52 57.0615 27.3788 57.5714 27.2068 58.0684C26.7512 59.3809 27.2392 60.8652 27.8908 60.1506C28.0404 59.9869 28.0212 59.9642 27.8 60.0432C27.5684 60.1255 27.52 60.046 27.52 59.5803C27.52 59.0469 27.5484 59.0181 28.0748 59.0181C28.5268 59.0181 28.6108 59.0684 28.5276 59.2881C28.462 59.462 28.4884 59.5183 28.6024 59.447C28.7 59.3857 28.7656 58.9755 28.7496 58.5284C28.7332 58.0842 28.7664 57.7206 28.8228 57.721C28.8796 57.721 28.9688 57.6079 29.0212 57.4693C29.0756 57.325 29.0488 57.2601 28.958 57.3169C28.8672 57.374 28.8 57.2054 28.8 56.92C28.8 56.5978 28.8844 56.4154 29.04 56.3996C29.172 56.3862 29.37 56.368 29.48 56.359C29.59 56.3501 29.6628 56.4316 29.642 56.5398C29.6208 56.648 29.6964 56.7003 29.8092 56.6566C29.9936 56.5848 30.0704 55.8528 30.134 53.5565C30.1396 53.3615 30.2028 53.2387 30.2748 53.2837C30.3464 53.3287 30.3584 53.4519 30.3012 53.5573C30.244 53.6623 30.4384 53.5127 30.7332 53.2241C31.0604 52.9039 31.2788 52.5249 31.2936 52.2513C31.3072 52.0048 31.3276 51.5979 31.3392 51.3474C31.3508 51.0892 31.4292 50.9355 31.52 50.9923C31.608 51.0474 31.68 51.0154 31.68 50.9209C31.68 50.8265 31.6088 50.7491 31.5216 50.7491C31.4348 50.7491 31.3772 50.5813 31.394 50.3766C31.4244 50.0053 32.16 49.7418 32.16 50.1021C32.16 50.1905 32.2296 50.2627 32.3148 50.2627C32.4004 50.2627 32.4284 50.1532 32.378 50.0195C32.3272 49.8857 32.3676 49.7763 32.468 49.7763C32.576 49.7763 32.6348 49.5497 32.6132 49.2197C32.5928 48.9133 32.5364 48.6668 32.488 48.6713C32.4396 48.6757 32.346 48.662 32.28 48.6401C32.214 48.6186 32.07 48.5882 31.96 48.5732C31.85 48.5578 31.778 48.4577 31.8 48.3503C31.8464 48.1245 31.8244 48.1172 31.58 48.2789ZM122.296 50.6263C122.238 50.7215 122.256 50.7592 122.335 50.7102C122.523 50.5942 122.895 51.0004 122.75 51.1633C122.69 51.2314 122.724 51.2391 122.826 51.18C122.928 51.1204 122.994 50.9509 122.972 50.8026C122.928 50.4925 122.453 50.3693 122.296 50.6263ZM64.0704 52.4483C63.8016 52.6562 63.7924 52.7105 64 52.8512C64.496 53.1876 65.24 52.9209 65.0684 52.4677C64.9452 52.1427 64.4776 52.1337 64.0704 52.4483ZM67.8916 52.4677C67.7072 52.9546 68.4564 53.1957 68.81 52.7636C68.9836 52.5516 68.98 52.4827 68.7896 52.3607C68.4316 52.1309 67.9996 52.1824 67.8916 52.4677ZM68.72 52.5326C68.7744 52.6218 68.6708 52.6947 68.4896 52.6947C68.3084 52.6947 68.16 52.6218 68.16 52.5326C68.16 52.4434 68.2636 52.3705 68.3904 52.3705C68.5172 52.3705 68.6656 52.4434 68.72 52.5326ZM109.487 52.8236C109.37 52.8994 109.252 53.6128 109.186 54.6558C109.058 56.6541 109.208 57.1669 109.868 56.9987C110.092 56.9419 110.37 56.9804 110.495 57.0854C110.686 57.2455 110.72 57.0125 110.72 55.552C110.72 54.5492 110.655 53.8297 110.565 53.8297C110.48 53.8297 110.452 53.7202 110.502 53.5865C110.553 53.4527 110.514 53.3433 110.417 53.3433C110.32 53.3433 110.24 53.2659 110.24 53.1714C110.24 53.077 110.33 53.0547 110.44 53.1216C110.576 53.2042 110.57 53.1556 110.42 52.9691C110.183 52.672 109.999 52.593 110.16 52.8569C110.214 52.946 110.183 53.019 110.09 53.019C109.996 53.019 109.92 52.946 109.92 52.8569C109.92 52.6647 109.754 52.6522 109.487 52.8236ZM63.1936 53.441C63.0892 53.7198 63.084 53.9391 63.18 54.0364C63.4084 54.2679 63.68 54.0234 63.68 53.5865C63.68 53.0194 63.3848 52.9314 63.1936 53.441ZM65.3692 53.6068C65.3092 53.8491 65.0052 54.2841 64.6936 54.5735C64.1696 55.0599 64.1356 55.1483 64.2372 55.7575C64.5424 57.5897 67.724 58.0708 68.078 56.3384C68.1232 56.1179 68.192 55.7733 68.2312 55.5727C68.274 55.3554 68.0924 54.8147 67.7824 54.235L67.262 53.2622L66.37 53.214C65.5172 53.1682 65.4736 53.1852 65.3692 53.6068ZM67.0944 53.6205C68.044 54.2152 68.3124 56.2926 67.5232 56.9403C66.0032 58.1875 63.5912 56.0121 64.9184 54.5905C65.184 54.306 65.4884 53.9018 65.5944 53.6927C65.7804 53.3263 66.5644 53.2886 67.0944 53.6205ZM69.4152 53.6975C69.1376 54.2006 69.158 57.4579 69.4408 57.8033C69.902 58.3659 70.08 57.7781 70.08 55.6943C70.08 53.5439 69.8616 52.8885 69.4152 53.6975ZM69.92 55.6943C69.92 57.935 69.6676 58.4705 69.5756 56.4243C69.5036 54.8135 69.5868 53.6676 69.776 53.6676C69.8552 53.6676 69.92 54.5796 69.92 55.6943ZM126.08 56.8386C126.08 57.2265 126.007 57.3967 125.84 57.3967C125.708 57.3967 125.6 57.2873 125.6 57.1535C125.6 57.0197 125.5 56.9103 125.379 56.9103C124.847 56.9103 125.005 56.3424 125.545 56.3112C126.054 56.282 126.08 56.308 126.08 56.8386ZM133.188 57.0031C133.479 57.2978 133.491 57.3886 133.282 57.721C132.977 58.2054 132.335 57.4052 132.599 56.8698C132.694 56.6768 132.916 56.7271 133.188 57.0031ZM29.3208 57.2767C29.306 57.4786 29.3876 57.5617 29.5672 57.5264C29.9528 57.4514 30.0212 56.9229 29.6416 56.9517C29.4748 56.9646 29.3336 57.1077 29.3208 57.2767ZM37.8464 57.0388C37.508 57.3821 37.7784 59.3079 38.176 59.3853C39.1128 59.5665 39.404 59.0505 39.2056 57.5589C39.146 57.1118 38.1504 56.7307 37.8464 57.0388ZM63.0328 57.4101C62.7988 57.8539 63.2756 58.4802 63.6244 58.1871C63.8916 57.9622 63.9028 57.5252 63.648 57.267C63.376 56.9914 63.2368 57.0238 63.0328 57.4101ZM81.3252 57.3132C83.1644 58.1742 84.0284 59.5876 83.7068 61.2114C83.2124 63.7043 80.6676 65.3394 78.9564 64.2641C77.074 63.0809 76.7592 62.5466 76.7356 60.5008L76.72 59.1462L77.52 58.4218C78.9312 57.1442 80.1836 56.7794 81.3252 57.3132ZM63.6088 57.573C63.7736 57.8434 63.4028 58.1535 63.182 57.9297C62.9972 57.7425 63.1128 57.3967 63.36 57.3967C63.4376 57.3967 63.5496 57.4762 63.6088 57.573ZM110.432 57.9156C109.79 58.5657 110.32 59.6358 111.345 59.7611L112 59.8409V58.9755C112 57.982 111.817 57.721 111.12 57.721C110.847 57.721 110.538 57.8086 110.432 57.9156ZM64.2096 58.7968C64.1112 59.0566 64.28 59.3432 64.5296 59.3399C64.644 59.3383 64.6248 59.2763 64.4812 59.1847C64.1132 58.9488 64.5228 58.629 65.0284 58.7575C65.536 58.8864 65.5648 59.1397 65.08 59.2094C64.882 59.2378 65.62 59.2613 66.72 59.2613C68.6132 59.2613 68.72 59.2439 68.72 58.937C68.72 58.5349 64.36 58.3991 64.2096 58.7968ZM68.6 58.9776C68.6736 59.2017 68.058 59.2548 67.5732 59.0659C67.3152 58.9658 67.328 58.9382 67.68 58.8373C68.2128 58.6845 68.5192 58.7311 68.6 58.9776ZM28.096 59.6403C28.0452 59.7238 28.1044 59.8766 28.2276 59.9804C28.36 60.0919 28.4892 60.1069 28.544 60.0173C28.5948 59.9338 28.5356 59.781 28.4124 59.6772C28.28 59.5657 28.1508 59.5507 28.096 59.6403ZM80.08 59.6362C80.168 59.7206 80.5056 59.8754 80.83 59.9804C81.1544 60.0858 81.4532 60.2783 81.4936 60.4088C81.542 60.5641 81.5588 60.5487 81.5424 60.3634C81.5264 60.1827 81.2304 59.9735 80.7188 59.7822C80.2796 59.6176 79.992 59.5519 80.08 59.6362ZM79.452 59.9775C79.2912 60.1575 79.204 60.4478 79.2452 60.6666L79.3164 61.0448L79.3384 60.652C79.35 60.4364 79.4792 60.1263 79.6248 59.963C79.7704 59.8 79.8536 59.6666 79.8096 59.6666C79.7656 59.6666 79.6048 59.8065 79.452 59.9775ZM37.8132 62.2049C37.828 63.1996 37.7892 64.0658 37.7268 64.1303C37.5324 64.3305 36.7712 64.258 36.6112 64.0241C36.5036 63.8664 36.4888 63.9078 36.5604 64.166C36.6332 64.4282 36.594 64.5308 36.4204 64.5308C36.2876 64.5308 36.1348 64.6029 36.0812 64.6909C36.0252 64.7829 36.0892 64.8101 36.2316 64.7549C36.422 64.6808 36.48 64.7716 36.48 65.1445C36.48 65.6386 36.134 65.9308 35.7984 65.7209C35.6856 65.6503 35.6632 65.7205 35.7332 65.9227C35.8324 66.2089 35.824 66.2117 35.6276 65.956C35.4408 65.7132 35.4108 65.7732 35.3844 66.4424C35.368 66.8623 35.3284 67.4614 35.2968 67.7735C35.2648 68.0856 35.32 68.3945 35.4192 68.4602C35.548 68.5449 35.5424 68.5802 35.4 68.5818C35.268 68.5834 35.2008 68.8465 35.2024 69.3544C35.2036 69.778 35.2584 70.0394 35.324 69.9352C35.3892 69.8307 35.694 69.7212 36.0012 69.692L36.56 69.6381L36.5728 68.3953C36.5864 67.024 36.8864 66.3143 37.452 66.3143C38.1136 66.3143 38.792 63.6082 38.414 62.4757C38.3004 62.1344 38.1128 61.5272 37.9972 61.1259C37.7952 60.4259 37.788 60.4696 37.8132 62.2049ZM76.508 62.5754C76.7156 63.7331 76.7452 63.787 77.242 63.9175C78.196 64.168 77.7744 64.2936 75.96 64.3001C74.97 64.3034 73.638 64.3613 73 64.4282C71.698 64.5652 71.4312 64.3192 72.28 63.7643C72.522 63.6062 73.224 62.9593 73.84 62.3265C74.4604 61.6889 75.1592 61.1263 75.4068 61.0651C75.6528 61.0039 75.9016 60.8288 75.96 60.6751C76.082 60.3553 76.156 60.6119 76.508 62.5754ZM111.513 60.956C111.289 61.183 110.972 61.4453 110.81 61.5381C110.57 61.6747 110.488 62.0128 110.375 63.3216C110.166 65.7314 110.053 66.2085 109.642 66.3921C109.072 66.6463 109.109 68.099 109.68 67.8773C109.79 67.8339 109.962 67.8805 110.06 67.9807C110.193 68.1152 110.24 68.1096 110.24 67.9584C110.24 67.8461 110.312 67.7995 110.4 67.855C110.508 67.9219 110.508 68.0561 110.4 68.2591C109.827 69.3442 110.551 70.8736 111.56 70.7111C111.627 70.7005 111.768 71.0199 111.874 71.4216C111.98 71.8229 112.152 72.1512 112.256 72.1512C112.46 72.1512 112.656 72.5229 112.724 73.043C112.824 73.8063 113.258 74.666 113.568 74.7142C113.796 74.7495 113.92 74.9364 113.998 75.3628C114.266 76.8176 115.84 76.8119 115.84 75.3563C115.84 74.7698 115.382 74.304 115.018 74.5197C114.81 74.6425 114.532 74.1338 114.736 74.0057C114.847 73.9364 115.02 74.0122 115.144 74.184C115.263 74.3486 115.36 74.4054 115.36 74.3097C115.36 74.0304 114.942 73.7588 114.673 73.8634C114.497 73.9319 114.438 73.8736 114.472 73.6636C114.497 73.5006 114.459 73.2509 114.387 73.1083C114.313 72.964 114.323 72.7674 114.409 72.664C114.494 72.5619 114.518 72.5096 114.464 72.5481C114.308 72.6595 113.944 72.2493 114.04 72.0702C114.088 71.981 114.036 71.9936 113.924 72.0981C113.645 72.3592 113.28 72.1857 113.28 71.7921C113.28 71.5558 113.204 71.4934 113 71.5619C112.754 71.6446 112.75 71.634 112.974 71.4755C113.393 71.1772 112.768 69.7192 112.22 69.7192C112.016 69.7192 111.929 69.3515 111.988 68.7305C112.018 68.4018 111.592 68.035 111.308 68.1456C110.883 68.3106 110.757 67.9985 110.699 66.6386L110.64 65.2604L111.312 65.2109L111.983 65.1615L112.032 62.8847C112.085 60.3638 112.088 60.3728 111.513 60.956ZM27.3868 60.9232C27.3704 61.0464 27.1132 61.1259 26.7308 61.1259C25.594 61.1259 25.6748 62.1587 26.8224 62.2941C27.4796 62.3719 27.5692 62.2426 27.4776 61.3456C27.4424 61.0019 27.4016 60.8117 27.3868 60.9232ZM81.28 60.971C81.28 61.0643 81.1032 61.3196 80.8872 61.5385C80.6712 61.7574 80.5632 61.9366 80.6472 61.9366C80.8868 61.9366 81.44 61.3144 81.44 61.0448C81.44 60.9111 81.404 60.8016 81.36 60.8016C81.316 60.8016 81.28 60.8778 81.28 60.971ZM79.37 61.4039C79.36 61.7582 79.7796 62.1084 80.1896 62.0886C80.3052 62.0829 80.2364 62.0116 80.0364 61.9301C79.836 61.8486 79.6068 61.6164 79.5264 61.4133L79.3804 61.0448L79.37 61.4039ZM21.1436 63.9155C21.1484 65.1789 21.1004 65.2993 20.6068 65.2559C19.988 65.2012 19.84 65.4655 19.8424 66.6179C19.844 67.3714 19.8912 67.6199 20 67.4493C20.0852 67.3155 20.1564 67.279 20.158 67.3682C20.1596 67.4574 20.3744 67.538 20.6356 67.5473C21.4692 67.5773 21.9984 64.4534 21.3636 63.2527C21.152 62.8522 21.1392 62.8899 21.1436 63.9155ZM133.493 63.4769C132.898 65.0233 133.308 67.3568 134.199 67.4947C134.693 67.5709 134.737 67.6434 134.876 68.6142C134.982 69.3503 135.003 69.2153 135.02 67.6876C135.038 66.0885 135.007 65.8753 134.728 65.6718C134.557 65.547 134.454 65.3848 134.498 65.3119C134.542 65.2389 134.398 65.1793 134.177 65.1793C133.792 65.1793 133.773 65.1331 133.727 64.0849C133.683 63.059 133.668 63.0209 133.493 63.4769ZM26.3036 63.8441C25.402 64.4529 25.5068 68.0978 26.4256 68.0978C26.674 68.0978 26.7156 68.2186 26.6932 68.868C26.6684 69.5737 26.6608 69.587 26.6036 69.0301C26.508 68.1071 26.2948 68.3021 26.1692 69.4265C26.0528 70.4691 25.6468 71.0864 25.1936 70.9105C25.0568 70.857 24.9388 70.968 24.8816 71.2044C24.3612 73.3511 24.634 75.7349 25.3676 75.4495C25.678 75.3287 26.0192 75.7171 26.1556 76.347C26.232 76.6984 26.3432 76.848 26.4876 76.7916C26.6492 76.7288 26.7188 76.9226 26.7608 77.5504C26.792 78.0141 26.7852 77.0802 26.746 75.4751C26.6668 72.2339 26.8692 67.6414 27.0492 68.5842C27.1416 69.0674 27.1612 69.0873 27.1788 68.7192C27.2092 68.0954 27.0352 67.6827 26.86 67.9624C26.7636 68.1169 26.724 68.1225 26.7224 67.9815C26.7212 67.8724 26.622 67.8218 26.5024 67.8684C26.2416 67.9697 26.078 67.1521 26.1984 66.3479C26.2536 65.9803 26.3596 65.8222 26.5392 65.8396C27.4604 65.93 27.5064 65.8834 27.4516 64.9175C27.3908 63.8514 26.9304 63.4209 26.3036 63.8441ZM127.514 64.2178C127.425 64.3869 127.372 64.8915 127.396 65.3386C127.442 66.1817 127.516 66.2458 128.348 66.1627C128.638 66.1335 128.762 66.583 128.665 67.3151C128.612 67.7119 128.555 67.7439 127.993 67.6917C127.512 67.6471 127.398 67.6852 127.466 67.8664C127.838 68.8469 129.134 67.7922 129.242 66.4209C129.384 64.6362 128.134 63.0432 127.514 64.2178ZM76.976 64.8757C80.0404 65.9049 81.7384 70.3154 79.9156 72.5108C79.7128 72.7544 79.5016 73.1646 79.4456 73.4216C79.0412 75.2882 73.9064 76.3425 72.1748 74.9149C71.9468 74.7272 71.5308 74.4252 71.2504 74.244C70.282 73.619 69.4156 70.6494 69.7536 69.1156C70.5084 65.6917 73.7468 63.7906 76.976 64.8757ZM73.7764 68.4521C73.9516 68.7849 73.9476 70.0033 73.7676 71.0973C73.6224 71.981 73.6644 72.1508 73.9548 71.8566C74.0612 71.7487 74.5932 71.6648 75.1688 71.6648C76.0716 71.6648 76.2316 71.6166 76.5084 71.2595C76.6816 71.0366 76.9216 70.8541 77.042 70.8541C77.5688 70.8541 77.3836 70.0856 76.6172 69.0893C76.454 68.8765 76.32 68.5777 76.32 68.4253C76.32 68.1845 76.1436 68.1501 74.9764 68.1635C73.7696 68.1773 73.6476 68.2064 73.7764 68.4521ZM75.6612 68.7309C76.318 69.1525 76.2004 71.0548 75.4996 71.3491C74.5464 71.7491 74.1676 71.4297 74.1132 70.1805C74.0516 68.7735 74.7332 68.1355 75.6612 68.7309ZM127.774 69.8728C127.624 71.4208 127.702 78.9647 127.867 78.8625C128.113 78.7097 128.496 79.3141 128.303 79.5496C128.199 79.6761 128.073 79.7373 128.022 79.6858C127.971 79.6343 128.02 79.5346 128.132 79.4649C128.295 79.3631 128.293 79.3023 128.122 79.1588C127.789 78.8783 127.4 79.186 127.67 79.5163C127.81 79.6874 127.82 79.7717 127.7 79.7717C127.486 79.7717 127.456 80.6854 127.665 80.8163C127.745 80.8661 127.775 80.7429 127.731 80.5423C127.668 80.2488 127.686 80.2249 127.824 80.4203C127.959 80.6128 127.996 80.6169 127.998 80.4409C127.999 80.2731 128.053 80.263 128.215 80.3992C128.333 80.4985 128.477 80.5317 128.535 80.473C128.593 80.4142 128.64 80.5674 128.64 80.8139C128.64 81.2403 128.61 81.2577 128 81.1864L127.36 81.1114L127.362 81.86C127.366 83.1057 127.481 83.3387 128.094 83.3387C129.082 83.3387 129.646 81.3181 128.978 80.1718C128.789 79.8467 128.62 79.4101 128.603 79.2014C128.586 78.9926 128.522 78.835 128.462 78.8508C128.322 78.8877 128.315 78.8175 128.345 77.7855L128.37 76.9343L128.48 77.745L128.59 78.5557L128.615 77.6084C128.636 76.8087 128.69 76.6473 128.96 76.576C129.136 76.5294 129.28 76.439 129.28 76.3757C129.28 76.3121 129.438 76.2659 129.631 76.2728C130.051 76.2882 130.204 75.7426 130.265 74.0158C130.331 72.129 129.754 70.294 129.386 71.219C129.342 71.3304 129.3 71.2575 129.293 71.0568C129.28 70.6782 128.975 70.538 128.94 70.8947C128.93 71.0061 128.83 70.6231 128.72 70.0435C128.61 69.4638 128.503 69.1355 128.484 69.3138C128.453 69.5935 128.43 69.5826 128.32 69.2328C128.193 68.8311 128.192 68.8315 128.153 69.3138C128.118 69.7524 128.104 69.7362 128.01 69.1517C127.918 68.5773 127.891 68.66 127.774 69.8728ZM27.2436 70.8541C27.2436 71.2554 27.2748 71.4196 27.3128 71.219C27.3512 71.0183 27.3512 70.69 27.3128 70.4893C27.2748 70.2887 27.2436 70.4529 27.2436 70.8541ZM34.0968 70.9149C33.9748 71.0637 33.9484 71.5145 34.018 72.2704C34.1376 73.576 34.0776 73.6579 33.0172 73.6364C32.4924 73.6259 32.2376 73.707 32.0344 73.9489C31.8836 74.1285 31.5532 74.4917 31.3004 74.7564C31.0476 75.0207 30.9576 75.1913 31.1004 75.1358C31.2892 75.0624 31.36 75.1281 31.36 75.3766C31.36 75.5646 31.378 75.7714 31.4 75.8362C31.422 75.9015 31.2344 75.9704 30.9836 75.9903C30.6024 76.0198 30.5404 75.9736 30.6084 75.7098C30.6536 75.5359 30.6248 75.4345 30.5452 75.4844C30.4652 75.5343 30.4 75.7211 30.4 75.8995C30.4 76.0798 30.3272 76.1783 30.236 76.1212C30.146 76.0648 30.0824 76.0786 30.0948 76.152C30.2236 76.9015 30.0692 77.1775 29.522 77.1775C28.9968 77.1775 28.958 77.2148 28.864 77.8103C28.7672 78.4227 27.8612 78.9444 27.83 78.4061C27.8244 78.31 27.752 78.4025 27.6696 78.6112C27.5868 78.82 27.5556 79.0506 27.6004 79.1236C27.7752 79.4106 27.4708 79.7713 27.0628 79.7604C26.6828 79.7502 26.6724 79.7348 26.96 79.6096C27.136 79.533 27.2036 79.4653 27.1104 79.4588C27.0176 79.4527 26.8016 79.3319 26.6304 79.1909C26.4072 79.0064 26.3916 78.957 26.5744 79.0137C27.1 79.1775 27.196 78.8824 27.2552 76.9258C27.3024 75.366 27.2856 75.1621 27.1688 75.8804C27.0888 76.3709 27.0452 77.2339 27.072 77.7985C27.1196 78.8196 27.118 78.824 26.7068 78.7628C26.256 78.6951 26.1428 79.006 26.4564 79.4474C26.5516 79.5812 26.5648 79.6347 26.4856 79.5666C26.2424 79.357 25.6032 80.9241 25.6016 81.7328C25.5996 82.7627 26.1304 83.3128 26.5376 82.7032C26.682 82.4871 27.07 82.0425 27.4 81.7145C27.73 81.3866 28 81.004 28 80.8637C28 80.3639 28.2 80.096 28.5732 80.096C28.8288 80.096 29.0296 79.944 29.1912 79.627C29.3228 79.3692 29.6484 79.0814 29.9148 78.9874C30.1812 78.8929 30.4808 78.6347 30.5804 78.413C30.68 78.1913 30.9656 77.9246 31.2148 77.8196C31.4644 77.715 31.8128 77.3818 31.9888 77.079C32.1652 76.7766 32.4084 76.529 32.53 76.529C32.8224 76.529 33.28 76.0044 33.28 75.6688C33.28 75.5217 33.4672 75.2773 33.6964 75.1249C33.9256 74.9728 34.2876 74.5882 34.5012 74.27C34.7144 73.9518 35.0672 73.4435 35.2848 73.1407C36.2212 71.8359 35.0852 69.7078 34.0968 70.9149ZM40.084 71.1703C39.59 72.1391 39.8976 73.0576 40.7504 73.1585C41.392 73.2343 41.682 73.0544 41.9064 72.4411C42.3832 71.1387 40.6996 69.9644 40.084 71.1703ZM19.9232 71.1472C19.8776 71.268 19.84 72.2307 19.84 73.2862C19.84 75.6603 19.8404 75.6611 20.6452 75.5833C21.704 75.4811 21.96 74.9891 21.894 73.1816C21.852 72.0296 21.7752 71.6255 21.5496 71.3734C21.1956 70.9778 20.048 70.8181 19.9232 71.1472ZM133.345 71.195C133.096 71.4727 133.03 71.8408 132.986 73.1824C132.92 75.2473 133.169 75.7183 134.332 75.7183H135.04V73.2862V70.8541H134.345C133.842 70.8541 133.565 70.9482 133.345 71.195ZM26.3584 74.2185C26.3264 74.7313 26.3004 74.3117 26.3004 73.2862C26.3004 72.2607 26.3264 71.8412 26.3584 72.3539C26.39 72.8667 26.39 73.7057 26.3584 74.2185ZM114.08 72.7897C114.08 73.1954 113.512 73.1747 113.482 72.7678C113.468 72.5793 113.57 72.4755 113.77 72.4755C113.97 72.4755 114.08 72.587 114.08 72.7897ZM128.629 73.9753C128.621 74.9639 128.571 75.3644 128.48 75.1508C128.245 74.5959 128.323 72.4755 128.579 72.4755C128.612 72.4755 128.635 73.1504 128.629 73.9753ZM127.955 74.3806C127.918 74.6259 127.888 74.4252 127.888 73.9348C127.888 73.4443 127.918 73.2436 127.955 73.4889C127.991 73.7341 127.991 74.1354 127.955 74.3806ZM40.872 73.7856C40.8204 73.8707 40.7192 73.9031 40.6472 73.8582C40.5752 73.8132 40.4276 73.8845 40.3192 74.017C40.2108 74.1492 39.858 74.3377 39.5348 74.4358C38.994 74.5999 38.9524 74.6555 39.0088 75.1423C39.082 75.7775 38.228 77.4325 37.7472 77.5869C37.4312 77.6887 36.96 78.4398 36.96 78.8415C36.96 78.9627 36.744 79.2241 36.48 79.4219C36.216 79.6197 36 79.9241 36 80.0988C36 80.3064 35.8116 80.4957 35.4556 80.6464C35.156 80.7733 34.8648 81.0238 34.8088 81.203C34.746 81.4028 34.448 81.612 34.0368 81.7445C33.6384 81.873 33.2936 82.111 33.1856 82.3315C33.086 82.5354 32.8504 82.8685 32.6624 83.0716C32.4132 83.3404 32.32 83.6472 32.32 84.2005C32.32 85.0015 32.514 85.1774 32.8 84.6358C32.894 84.4575 33.0496 84.3116 33.1452 84.3116C33.264 84.3116 33.26 84.3837 33.132 84.5402C33.0036 84.6966 32.9976 84.8024 33.1124 84.8742C33.2828 84.9812 33.3044 84.9544 33.34 84.5953C33.3508 84.4838 33.45 84.3926 33.56 84.3926C33.67 84.3926 33.76 84.3379 33.76 84.271C33.76 84.2042 33.76 84.104 33.76 84.0485C33.76 83.993 33.652 84.0384 33.52 84.1494C33.3628 84.282 33.28 84.2905 33.28 84.175C33.28 83.9038 33.8376 83.663 34.4644 83.663C34.9132 83.663 35.0756 83.5747 35.2512 83.2346C35.3928 82.9606 35.5136 82.873 35.586 82.9914C35.648 83.0931 35.6108 83.1766 35.5028 83.1766C35.3948 83.1766 35.3544 83.2248 35.4124 83.2836C35.5428 83.4158 36.1608 82.8689 36.1576 82.6245C36.1564 82.5268 36.0932 82.5459 36.0176 82.6671C35.93 82.8069 35.8428 82.8264 35.7784 82.7206C35.722 82.6282 35.9272 82.4705 36.24 82.3659C36.576 82.2536 36.7596 82.1065 36.6952 82.0011C36.628 81.8913 36.6808 81.8605 36.8344 81.9204C37.1524 82.0441 37.4424 81.7502 37.3204 81.428C37.2624 81.2751 37.292 81.2192 37.3956 81.2845C37.56 81.387 37.7992 80.8025 37.8268 80.231C37.8456 79.8439 38.046 79.6907 38.5332 79.6907C38.9556 79.6907 38.9596 79.6797 38.9224 78.6368C38.862 76.9501 38.9328 76.7945 39.7004 76.9189L40.3452 77.0235L40.2936 76.4179C40.2408 75.7969 40.8844 75.4122 41.546 75.6696C41.6636 75.7154 41.7652 75.6903 41.772 75.6141C41.7784 75.5375 41.816 75.2983 41.8552 75.0823C42.016 74.195 41.2436 73.1764 40.872 73.7856ZM32.2744 74.2128C32.1276 74.3612 31.9664 74.4414 31.916 74.3904C31.866 74.3393 31.9448 74.1759 32.0916 74.0276C32.238 73.8788 32.3992 73.799 32.4496 73.8496C32.5 73.9007 32.4208 74.0641 32.2744 74.2128ZM41.618 77.1568C41.6216 77.8293 41.6932 78.5107 41.7776 78.6704C41.8844 78.8718 41.8744 78.961 41.746 78.961C41.6092 78.961 41.6072 79.0178 41.7392 79.1787C41.8372 79.2983 41.882 79.4442 41.8388 79.503C41.7952 79.5617 41.8072 79.5739 41.8652 79.5297C41.9232 79.4859 42.0672 79.5313 42.1852 79.6307C42.338 79.7596 42.4 79.7604 42.4 79.6347C42.4 79.537 42.508 79.4997 42.64 79.5508C42.7956 79.6112 42.88 79.8629 42.88 80.2646C42.88 80.8674 43.2688 81.2451 43.6464 81.0088C43.9916 80.7928 44.144 81.2451 44.1728 82.5726C44.1916 83.4449 44.2688 83.9873 44.3736 83.9873C44.482 83.9873 44.474 84.0582 44.352 84.1819C44.0448 84.4932 44.126 84.5848 44.64 84.5082C44.9056 84.4688 45.12 84.5106 45.12 84.6022C45.12 84.6934 44.976 84.7295 44.8 84.6829C44.6212 84.6354 44.48 84.678 44.48 84.7789C44.48 84.8786 44.696 84.9601 44.96 84.9601H45.44L45.46 86.014C45.4908 87.6463 45.4024 87.4862 46.302 87.5341C46.66 87.5531 46.688 87.6257 46.7476 88.6986C46.8148 89.9037 46.9616 90.1412 47.64 90.1461C47.974 90.1485 48.1276 90.626 48.0188 91.324C48.0084 91.3909 48.0776 91.4456 48.1724 91.4456C48.606 91.4456 49.302 92.4221 49.3272 93.0658C49.3412 93.4229 49.4172 93.7156 49.496 93.7156C49.5748 93.7156 49.5496 93.825 49.44 93.9588C49.2884 94.1436 49.2852 94.2559 49.426 94.4281C49.528 94.5526 49.5908 94.7532 49.5656 94.874C49.5392 95.0021 49.632 95.0751 49.788 95.0487C49.9352 95.0244 50.1016 95.0791 50.1572 95.1703C50.4052 95.5769 50.5392 95.2413 50.6456 93.9466C50.7692 92.4444 50.7096 92.2786 50.0272 92.2215C49.52 92.1789 49.3108 91.669 49.5864 91.1473C49.9676 90.425 49.5972 89.5 48.9268 89.5C48.5012 89.5 48.2928 89.0821 48.408 88.4595C48.5768 87.5487 48.3972 87.119 47.76 86.9058C47.2164 86.7242 47.2 86.6938 47.1976 85.8798C47.1948 84.9354 47.0856 84.6885 46.5504 84.4182C46.2848 84.284 46.0924 83.9378 45.8828 83.2167C45.7024 82.5953 45.5016 82.2038 45.3632 82.2038C44.9892 82.2038 44.64 81.5248 44.64 80.7972C44.64 79.8467 44.3544 79.3044 43.7108 79.0316C43.2512 78.837 43.18 78.7405 43.2696 78.4345C43.7256 76.8788 43.364 75.9749 42.2744 75.9493L41.6116 75.9339L41.618 77.1568ZM128.115 78.1098C128.078 78.355 128.048 78.1544 128.048 77.6639C128.048 77.1735 128.078 76.9728 128.115 77.218C128.151 77.4633 128.151 77.8646 128.115 78.1098ZM116.829 77.4073C116.302 78.1434 116.705 78.8877 117.691 78.9999C118.317 79.0709 118.342 79.0563 118.342 78.612C118.342 78.3583 118.283 78.1503 118.211 78.1503C118.139 78.1503 118.08 78.0044 118.08 77.8261C118.08 77.61 117.973 77.5018 117.76 77.5018C117.584 77.5018 117.44 77.441 117.44 77.3668C117.44 77.1702 116.977 77.201 116.829 77.4073ZM134.914 77.94C134.862 79.2233 134.557 79.7279 133.89 79.6323C133.765 79.6144 133.214 81.0538 133.048 81.8313C132.974 82.1823 133.026 82.5378 133.208 82.9285C133.612 83.7907 133.828 83.8381 133.702 83.0364C133.538 81.9962 133.703 81.5552 134.257 81.5552C134.55 81.5552 134.72 81.4709 134.72 81.3254C134.72 81.1993 134.794 81.0708 134.886 81.04C134.991 81.0044 135.032 80.2796 135 79.0401C134.972 77.9712 134.933 77.4763 134.914 77.94ZM19.8612 80.8256C19.8608 81.8556 19.9028 82.1774 20.0048 81.92C20.4472 80.8049 21.3764 81.6926 21.1896 83.0522L21.0948 83.7441L21.4204 83.3387C22.0624 82.539 21.5568 79.4049 20.8312 79.687C20.7036 79.7369 20.5004 79.6943 20.3796 79.5926C20.2068 79.4474 20.1576 79.4726 20.1488 79.7113C20.1384 79.9938 20.128 79.9922 20 79.6907C19.9096 79.4778 19.862 79.8674 19.8612 80.8256ZM38.0676 79.8394C38.0612 79.8467 38.0312 79.9805 38.002 80.1365C37.9312 80.5098 38.186 80.5009 38.3856 80.1232C38.5088 79.8901 38.2396 79.6497 38.0676 79.8394ZM118.88 79.9116C118.88 80.0076 118.784 80.0486 118.666 80.0028C118.526 79.948 118.306 80.2439 118.029 80.8588C117.796 81.3757 117.605 81.7409 117.603 81.6703C117.601 81.6002 117.452 81.6821 117.272 81.8528C117.021 82.0891 116.952 82.3335 116.98 82.8823L117.017 83.6014L117.668 83.573C118.702 83.528 118.813 83.5057 118.64 83.3768C118.389 83.19 118.408 82.2577 118.662 82.2577C118.782 82.2577 118.88 82.3185 118.88 82.3931C118.88 82.4673 118.956 82.5281 119.05 82.5281C119.143 82.5281 119.178 82.46 119.127 82.3773C119.076 82.2942 119.103 82.1835 119.186 82.1312C119.27 82.0789 119.39 82.1219 119.454 82.2261C119.526 82.344 119.5 82.3728 119.386 82.3015C119.266 82.2257 119.238 82.2784 119.306 82.4563C119.4 82.7056 119.419 82.7052 119.56 82.449C119.656 82.2767 119.657 82.1154 119.563 82.0202C119.48 81.9363 119.46 81.5516 119.518 81.1649C119.608 80.5625 119.57 80.4105 119.252 80.1C119.047 79.9006 118.88 79.8159 118.88 79.9116ZM33.0668 83.8791C33.0668 83.9982 32.9708 84.0955 32.8532 84.0955C32.6236 84.0955 32.5744 83.9455 32.7468 83.7712C32.9188 83.5965 33.0668 83.6464 33.0668 83.8791ZM45.44 83.9873C45.44 84.3667 45.0416 84.4174 44.7084 84.0801C44.3752 83.7425 44.4232 83.663 44.96 83.663C45.3332 83.663 45.44 83.7352 45.44 83.9873ZM127.579 83.9468C127.646 84.0607 127.621 84.1494 127.521 84.1494C127.408 84.1494 127.36 84.4324 127.391 84.9196L127.44 85.6897H128.075C128.843 85.6897 129.214 85.1839 128.922 84.5349C128.754 84.16 128.223 83.8689 128.043 84.0521C127.991 84.104 127.839 84.0562 127.704 83.9455C127.508 83.7846 127.483 83.785 127.579 83.9468ZM114.042 84.5953C113.906 84.7514 113.767 85.1891 113.733 85.5681L113.672 86.2572H114.676C115.228 86.2572 115.68 86.196 115.68 86.121C115.68 86.0464 115.899 85.9982 116.166 86.0144C116.434 86.0306 116.699 85.967 116.756 85.8738C116.929 85.5904 116.948 84.9715 116.786 84.8705C116.703 84.8183 116.676 84.708 116.726 84.6253C116.783 84.5333 116.666 84.5333 116.426 84.6261C116.144 84.7343 115.949 84.7129 115.736 84.5495C115.314 84.2248 114.342 84.2512 114.042 84.5953ZM21.12 85.3598V86.2264L21.76 86.164C22.2428 86.117 22.4 86.1595 22.4 86.3383C22.4 86.5065 22.2596 86.5584 21.9168 86.5183C21.6508 86.4866 21.3828 86.543 21.3212 86.6431C21.1144 86.9783 21.1116 87.4489 21.3152 87.5766C21.476 87.6771 21.4768 87.744 21.3188 87.9041C20.8272 88.4023 21.0756 88.9001 21.76 88.789L22.4 88.6856L22.4052 89.4574C22.4108 90.2288 22.4108 90.2292 22.7052 89.8721C23.0168 89.4935 22.9704 88.6277 22.6024 87.9613C22.462 87.7067 22.5052 87.5555 22.8312 87.1628C23.6352 86.1944 22.994 84.5803 21.7832 84.524L21.12 84.4932V85.3598ZM132.36 84.6764C131.61 85.6285 131.517 86.5223 132.095 87.2187L132.51 87.7189L132.175 88.2945C131.991 88.6111 131.839 89.0298 131.838 89.2256C131.834 89.6735 131.602 90.0569 131.408 89.9353C130.86 89.592 130.23 91.6791 130.641 92.4776C131.017 93.2081 130.656 94.2449 130.19 93.7727C130.035 93.6158 129.466 94.703 129.355 95.3673C129.276 95.8375 129.136 96.0528 128.785 96.2364C128.383 96.4472 128.32 96.5732 128.319 97.165C128.318 98.1752 128.026 99.0896 127.675 99.1824C127.314 99.2781 126.998 99.743 126.73 100.572C126.621 100.909 126.358 101.301 126.146 101.441C125.829 101.651 125.76 101.833 125.76 102.454C125.76 103.302 125.418 103.93 124.956 103.93C123.998 103.93 124.283 105.62 125.249 105.663C125.976 105.696 126.273 105.376 126.149 104.696C126.12 104.537 126.16 104.447 126.237 104.496C126.315 104.544 126.421 104.513 126.474 104.426C126.527 104.34 126.688 104.314 126.831 104.37C126.994 104.434 127.053 104.407 126.987 104.299C126.929 104.204 126.994 104.083 127.131 104.029C127.325 103.954 127.374 103.706 127.352 102.918C127.312 101.494 127.31 101.498 127.808 101.498C128.054 101.498 128.349 101.589 128.462 101.701C128.628 101.864 128.662 101.841 128.636 101.579C128.618 101.401 128.612 100.756 128.622 100.147L128.64 99.0397L129.192 99.1151C129.797 99.1978 129.952 98.906 129.952 97.6831C129.952 97.0702 130.408 96.54 130.802 96.6936C130.942 96.7479 131.016 96.7252 130.966 96.6434C130.916 96.5615 130.945 96.4504 131.03 96.3969C131.116 96.343 131.178 96.101 131.168 95.8586C131.094 94.0852 131.242 93.2964 131.655 93.2616C132.393 93.2 132.484 92.6211 131.756 92.6211C131.244 92.6211 131.241 92.6183 131.175 91.932L131.12 91.3646H131.8H132.48V90.6657C132.48 90.2758 132.546 90.0083 132.629 90.0606C132.711 90.1116 132.825 90.076 132.883 89.9811C132.956 89.8619 133.061 89.8697 133.223 90.0058C133.412 90.1643 133.448 90.1579 133.409 89.9734C133.382 89.8441 133.46 89.7651 133.587 89.793C133.764 89.8315 133.774 89.7926 133.628 89.6159C133.526 89.4911 133.496 89.3354 133.561 89.2697C133.626 89.2041 133.694 88.543 133.713 87.8012L133.747 86.4522L133.114 86.5381C132.586 86.6099 132.48 86.577 132.48 86.3419C132.48 86.1153 132.589 86.0724 133.036 86.1255C133.668 86.2001 133.76 86.0704 133.76 85.1089C133.76 84.4356 132.786 84.1348 132.36 84.6764ZM30.08 85.2747C30.08 85.4478 30.1512 85.6342 30.238 85.6885C30.3308 85.7469 30.3544 85.6768 30.2948 85.5195C30.2372 85.3679 30.29 85.1895 30.4168 85.1085C30.5956 84.9938 30.584 84.9646 30.36 84.9626C30.1888 84.9609 30.08 85.0821 30.08 85.2747ZM111.687 86.0055C111.356 86.41 111.818 87.1465 112.41 87.1595C112.677 87.1652 112.981 87.2244 113.087 87.2909C113.224 87.376 113.28 87.245 113.28 86.8434C113.28 85.9658 112.19 85.3922 111.687 86.0055ZM28.59 86.9244C28.2532 87.7931 28.5356 88.6625 29.1436 88.6289C29.6288 88.6021 29.8984 88.3573 29.8324 88.0034C29.8032 87.8494 29.8508 87.6788 29.9376 87.6245C30.0364 87.5624 30.0176 87.4279 29.8876 87.2657C29.7124 87.046 29.7176 87.027 29.92 87.1429C30.052 87.2183 29.9484 87.0501 29.69 86.7688C29.074 86.0983 28.9004 86.1231 28.59 86.9244ZM127.392 87.0274L127.44 87.7975H126.786C126.058 87.7975 126.093 87.7209 126.084 89.3455C126.078 90.4858 125.753 90.748 125.064 90.1692C124.827 89.9694 124.8 90.0062 124.8 90.534C124.8 90.8603 124.88 91.1214 124.98 91.1214C125.104 91.1214 125.109 91.1842 124.996 91.324C124.906 91.4355 124.826 92.0626 124.817 92.7172C124.799 94.0406 124.74 94.2308 124.389 94.0941C124.114 93.9875 123.52 94.4667 123.52 94.7946C123.52 95.0175 123.599 95.0487 124.16 95.0487C124.336 95.0487 124.552 95.0406 124.639 95.0305C124.727 95.0208 124.951 94.6835 125.138 94.2814C125.361 93.799 125.607 93.5169 125.86 93.4529C126.343 93.3301 126.502 92.7379 126.262 91.9551C126.048 91.2551 126.551 90.0245 127.164 89.7464C127.893 89.4161 128.314 87.0849 127.748 86.5122C127.375 86.1336 127.34 86.1847 127.392 87.0274ZM113.194 87.6832C113.225 87.7148 113.189 87.9593 113.114 88.226C112.848 89.1635 113.588 89.984 114.136 89.3609C114.474 88.9771 114.545 88.1234 114.24 88.1226C114.108 88.1222 114 88.0189 114 87.8928C114 87.757 113.825 87.6561 113.568 87.6447C113.331 87.6342 113.162 87.6516 113.194 87.6832ZM28.5544 89.5125C28.3236 90.031 28.3156 90.1943 28.4956 90.6986C28.6608 91.1619 28.6644 91.3954 28.512 91.8218C28.176 92.7642 28.4112 93.5534 29.028 93.5534C29.5808 93.5534 29.9372 93.8667 29.762 94.1979C29.3508 94.9766 29.662 96.0459 30.4472 96.553C30.8092 96.7868 31.0092 97.0921 31.164 97.6474C31.3432 98.2899 31.442 98.4175 31.76 98.4175C32.2688 98.4175 32.3548 98.6016 32.342 99.6668C32.3328 100.471 32.5 101.1 32.786 101.336C32.8992 101.43 33.5268 102.739 33.66 103.16C33.7428 103.422 34.4304 103.555 35.172 103.453C35.2884 103.437 35.4768 103.502 35.5908 103.598C35.7404 103.724 35.8464 103.712 35.9756 103.555C36.1132 103.387 36.0452 103.257 35.6768 102.981C35.4144 102.784 35.2 102.479 35.2 102.304C35.2 102.128 35.146 101.98 35.08 101.973C33.8624 101.86 33.9544 101.973 33.8968 100.525C33.8508 99.3584 33.8244 99.2854 33.2444 98.7139C32.7752 98.2518 32.64 97.9936 32.64 97.5582C32.64 96.902 32.4084 96.6746 31.8 96.7337C31.3248 96.7804 31.3408 96.8622 31.3184 94.2522C31.3164 94.0573 31.0624 93.656 30.7536 93.3605C30.4448 93.0654 30.24 92.9101 30.2984 93.0151C30.3572 93.1205 30.3464 93.2437 30.2748 93.2887C30.2028 93.3337 30.1384 93.2109 30.1316 93.0159C30.1248 92.821 30.1004 92.095 30.0776 91.4018C30.0376 90.1826 30.0168 90.1226 29.4292 89.5271L28.8216 88.9118L28.5544 89.5125ZM29.28 89.1558C29.28 89.3601 29.7496 89.7266 29.8636 89.611C30.0276 89.4453 29.7828 89.0136 29.5252 89.0136C29.3904 89.0136 29.28 89.0776 29.28 89.1558ZM133.074 89.3865C132.88 89.5916 132.69 89.7379 132.654 89.712C132.561 89.6439 133.143 89.0136 133.299 89.0136C133.37 89.0136 133.269 89.1814 133.074 89.3865ZM22.6084 90.277C22.3208 90.4623 22.368 92.7427 22.6592 92.7427C22.7808 92.7427 22.88 92.8157 22.88 92.9049C22.88 92.994 22.808 93.067 22.72 93.067C22.632 93.067 22.56 93.2348 22.56 93.4399C22.56 93.7703 22.6236 93.8051 23.12 93.7464L23.68 93.6799V94.4857C23.68 95.7731 23.8564 96.7795 24.0676 96.6973C24.2716 96.6182 24.9912 97.3097 24.9484 97.544C24.8344 98.1687 24.9816 99.2501 25.16 99.1001C25.4068 98.8934 26.2364 99.0361 26.2492 99.2878C26.2544 99.3888 26.2612 99.9639 26.264 100.566C26.2672 101.168 26.3348 101.66 26.4148 101.66C26.4948 101.66 26.56 101.597 26.56 101.52C26.56 101.364 27.3288 101.413 27.4928 101.579C27.5504 101.637 27.5988 102.257 27.6 102.957C27.6028 104.364 27.6432 104.456 28.27 104.49C28.6252 104.509 28.7088 104.595 28.728 104.959C28.7604 105.579 28.98 105.744 29.6896 105.684C30.768 105.593 30.8328 104.088 29.7684 103.851C29.2612 103.738 29.204 103.626 29.0424 102.421C28.9848 101.992 28.8384 101.603 28.7176 101.556C28.5964 101.509 28.3112 100.976 28.0836 100.373C27.7956 99.6088 27.5528 99.2217 27.2848 99.0977C26.8712 98.9068 26.5624 98.0823 26.5608 97.165C26.56 96.7487 26.4624 96.5911 26.08 96.3908C25.816 96.2526 25.5948 96.0499 25.588 95.9409C25.5244 94.8773 25.1792 94.2105 24.5556 93.9466C24.244 93.8145 23.9096 93.5299 23.8128 93.3143C23.7156 93.0982 23.484 92.8915 23.298 92.8542L22.96 92.7869L23.2952 92.7646C24.1184 92.7107 24.526 91.5174 24.0084 90.6755C23.6836 90.1465 23.078 89.9742 22.6084 90.277ZM113.936 91.1619C113.922 91.4168 113.741 91.5194 113.4 91.4647C113.334 91.4541 113.298 91.5348 113.32 91.6438C113.346 91.7719 113.106 91.8571 112.64 91.885C111.204 91.9701 110.889 93.7156 112.31 93.7156C112.868 93.7156 113.08 93.9758 113.036 94.6073C113.017 94.8748 112.992 95.2234 112.981 95.3815C112.968 95.5655 112.783 95.705 112.469 95.7686C111.312 96.0033 111.227 97.9311 112.374 97.9311C113.031 97.9311 113.28 97.6823 113.28 97.0272C113.28 96.5858 113.348 96.4986 113.756 96.416C114.283 96.3093 114.346 96.1472 114.444 94.6555C114.479 94.1217 114.443 93.7695 114.359 93.8226C114.278 93.8728 114.237 93.7054 114.266 93.4501C114.316 93.0248 114.282 92.9904 113.862 93.0407C113.552 93.0771 113.44 93.0358 113.516 92.9118C113.577 92.8108 113.558 92.6406 113.472 92.5328C113.158 92.1367 113.547 91.5798 114.078 91.6645C114.502 91.7322 114.56 91.6941 114.56 91.3504C114.56 90.8563 114.246 90.8315 114.224 91.324C114.209 91.6738 114.203 91.6722 114.08 91.2835C113.994 91.0131 113.946 90.9726 113.936 91.1619ZM48.17 91.7853C48.158 92.097 48.6564 92.5846 48.9724 92.5705C49.0976 92.5648 49.0364 92.4934 48.8364 92.412C48.636 92.3305 48.4068 92.0982 48.3264 91.8952C48.2324 91.658 48.1768 91.6187 48.17 91.7853ZM113.76 92.2421C113.76 92.6276 114.276 92.5919 114.332 92.2024C114.358 92.0305 114.26 91.932 114.066 91.932C113.871 91.932 113.76 92.0447 113.76 92.2421ZM131.594 93.5644C131.424 93.8424 131.576 93.8696 131.911 93.6211C132.17 93.429 132.178 93.3913 131.96 93.3913C131.816 93.3913 131.652 93.4691 131.594 93.5644ZM123.562 95.9652C123.649 96.7297 123.592 96.7974 122.828 96.8262C122.303 96.8464 122.281 96.8728 122.289 97.4593C122.296 97.9498 122.197 98.1606 121.789 98.5237C121.509 98.7726 121.28 99.0693 121.28 99.1832C121.28 99.2971 121.208 99.3904 121.12 99.3904C121.032 99.3904 120.959 99.6275 120.958 99.9173C120.954 100.596 120.813 100.788 120.32 100.782C119.986 100.779 119.923 100.85 119.938 101.219C119.948 101.462 119.91 101.66 119.853 101.66C119.796 101.66 119.735 101.861 119.718 102.106C119.698 102.377 119.491 102.72 119.19 102.98C118.557 103.527 118.707 103.598 120.04 103.386L121.12 103.215L121.145 102.478C121.159 102.073 121.17 101.666 121.169 101.574C121.168 101.481 121.394 101.434 121.676 101.467C122.42 101.555 122.792 100.932 122.664 99.8123C122.556 98.8732 122.666 98.5902 123.122 98.632C123.352 98.6526 123.532 98.4666 123.77 97.964C123.952 97.5805 124.33 97.1257 124.61 96.953C125.198 96.5911 125.17 96.6673 124.944 96.0098C124.844 95.7167 124.656 95.4983 124.504 95.497C124.359 95.4958 124.07 95.4484 123.862 95.3921C123.502 95.2944 123.488 95.3203 123.562 95.9652ZM50.5932 96.7702L50.64 97.8501L51.1992 97.8533C51.6912 97.8566 51.7688 97.9149 51.8496 98.3397C51.9392 98.8128 51.9432 98.8091 52.0444 98.1743C52.1012 97.8176 52.1912 97.2704 52.2444 96.9583C52.372 96.2084 52.0936 95.8829 51.2332 95.7759L50.546 95.69L50.5932 96.7702ZM24 97.0754C24 97.2793 24.4572 97.6839 24.5648 97.5748C24.6072 97.5319 24.4976 97.3645 24.3208 97.2023C24.1444 97.0406 24 96.9834 24 97.0754ZM130.481 97.2818C130.321 97.4605 130.265 97.6069 130.356 97.6069C130.557 97.6069 130.956 97.1435 130.848 97.0345C130.806 96.9915 130.641 97.1026 130.481 97.2818ZM50.9732 98.2339C50.926 98.3109 51.0228 98.4982 51.188 98.6498C51.4276 98.8695 51.5128 98.8821 51.6096 98.7118C51.6768 98.5947 51.676 98.5489 51.6088 98.6105C51.4608 98.7451 51.0428 98.388 51.1464 98.2149C51.186 98.148 51.1828 98.0933 51.1388 98.0933C51.0948 98.0933 51.0204 98.1565 50.9732 98.2339ZM52.2 99.664C51.846 99.7361 51.84 99.7783 51.84 102.133V104.528L52.52 104.513C53.3844 104.494 53.5788 104.019 53.5888 101.904C53.598 99.8602 53.3336 99.4342 52.2 99.664ZM111.785 100.924C111.732 101.062 111.436 101.297 111.125 101.447C110.391 101.802 110.41 102.096 111.233 103.084L111.905 103.893L112.113 103.488C112.35 103.024 112.383 102.737 112.185 102.861C112.111 102.907 112.034 102.457 112.015 101.861C111.978 100.702 111.935 100.527 111.785 100.924ZM112.251 102.453C112.142 102.631 112.55 102.995 112.695 102.848C112.753 102.789 112.8 102.831 112.8 102.94C112.8 103.049 112.872 103.094 112.96 103.038C113.146 102.922 113.177 102.624 113 102.652C112.638 102.71 112.314 102.612 112.4 102.471C112.454 102.382 112.463 102.309 112.419 102.309C112.375 102.309 112.3 102.374 112.251 102.453ZM36.348 104.629C36.3344 104.735 36.296 105.004 36.2628 105.227C36.2296 105.45 36.2948 105.864 36.4076 106.146C36.5204 106.429 36.5812 106.692 36.5424 106.731C36.504 106.77 36.582 106.895 36.716 107.008C36.8504 107.12 36.96 107.451 36.96 107.742C36.96 108.578 37.4296 109.033 38.3044 109.042L39.04 109.051V108.021C39.04 107.136 39.0004 106.995 38.76 107.019C37.8544 107.113 37.8116 107.068 37.7064 105.928C37.6516 105.332 37.5512 104.795 37.4832 104.733C37.2368 104.51 36.374 104.431 36.348 104.629ZM117.346 104.654C117.159 104.869 117.105 105.265 117.118 106.322C117.128 107.203 116.589 107.543 116.049 106.995C115.922 106.867 115.88 107.079 115.897 107.762C115.934 109.263 117.403 109.532 117.761 108.104C117.856 107.725 117.995 107.27 118.07 107.092C118.768 105.443 118.737 104.501 117.986 104.492C117.714 104.489 117.426 104.562 117.346 104.654ZM28.2056 104.798C28.2904 105.057 28.5868 105.1 28.5868 104.854C28.5868 104.732 28.4888 104.633 28.3688 104.633C28.2492 104.633 28.1756 104.707 28.2056 104.798ZM0.6 104.872L0 104.923V106.291V107.659L0.44 107.678L0.88 107.698L0.4 107.822C-0.0552 107.939 -0.0592 107.947 0.32 107.981L0.72 108.016L0.32 108.151C0.0308 108.248 0.1864 108.277 0.88 108.256L1.84 108.227L1.866 106.502C1.8948 104.568 2.0376 104.752 0.6 104.872ZM51.5684 105.028C51.3748 105.182 51.138 105.527 51.0424 105.795L50.8684 106.281L51.2344 105.873C51.4356 105.648 51.546 105.535 51.48 105.621C51.414 105.708 51.362 105.855 51.3648 105.949C51.37 106.129 51.6852 105.647 51.702 105.433C51.7072 105.365 51.7788 105.181 51.8616 105.025C52.0464 104.674 52.012 104.675 51.5684 105.028ZM110.171 105.327C109.437 106.157 109.264 106.381 108.96 106.895C108.79 107.182 108.378 107.563 108.046 107.741C107.627 107.965 107.426 108.192 107.395 108.471C107.281 109.505 107.214 109.624 106.854 109.429C105.63 108.765 104.266 109.101 104.347 110.047C104.376 110.395 104.307 110.649 104.157 110.746C103.999 110.847 104.366 110.898 105.262 110.9C106.349 110.902 106.648 110.848 106.834 110.618C106.96 110.462 107.023 110.418 106.974 110.519C106.924 110.62 107.03 110.742 107.21 110.789C107.472 110.859 107.526 110.807 107.488 110.524C107.45 110.245 107.512 110.183 107.787 110.221C108.064 110.26 108.117 110.205 108.051 109.948C107.979 109.667 108.059 109.619 108.664 109.575C109.342 109.525 109.361 109.509 109.41 108.916C109.458 108.325 109.477 108.308 110.09 108.308C110.704 108.308 110.72 108.294 110.72 107.735C110.72 107.143 111.106 106.826 111.692 106.934C111.897 106.973 111.949 106.79 111.972 105.942L112 104.903H111.273C110.691 104.903 110.471 104.988 110.171 105.327ZM51.8452 106.403C51.84 107.187 51.2812 107.514 50.792 107.019C50.696 106.922 50.6232 107.116 50.594 107.546C50.5264 108.548 50.462 108.88 50.3448 108.835C50.2872 108.813 50.1952 108.794 50.1404 108.794C50.0856 108.794 50.1396 108.667 50.2604 108.511C50.4632 108.248 50.4556 108.245 50.16 108.463C49.4932 108.955 49.318 109.3 49.4448 109.87C49.5144 110.182 49.5048 110.375 49.4228 110.324C49.3444 110.275 49.28 110.38 49.28 110.559C49.28 111.059 49.5324 111.101 49.742 110.634C49.9204 110.238 49.948 110.229 50.2252 110.483C50.5008 110.736 50.5244 110.733 50.602 110.433C50.6556 110.225 50.9136 110.051 51.342 109.934C51.9628 109.765 52 109.721 51.9992 109.153C51.9988 108.822 52.1172 108.215 52.2624 107.805C52.5404 107.018 52.492 106.493 52.092 105.957C51.8652 105.653 51.85 105.68 51.8452 106.403ZM30.1136 107.036C30.0752 107.929 30.2896 108.364 30.7024 108.234C31.1912 108.081 31.4388 108.422 31.4624 109.283C31.4868 110.173 31.83 110.74 32.3448 110.74C32.5072 110.74 32.64 110.849 32.64 110.983C32.64 111.213 32.7204 111.252 33.2668 111.292C33.3916 111.301 33.506 111.479 33.5212 111.688C33.5364 111.896 33.6448 112.127 33.7624 112.201C33.88 112.275 34.0016 112.503 34.0328 112.71C34.1068 113.201 34.2448 113.325 34.7672 113.369C35.0052 113.389 35.2 113.455 35.2 113.516C35.2 113.577 35.478 113.59 35.818 113.544C36.4836 113.453 36.7832 113.926 36.4468 114.535C36.3252 114.755 36.4128 114.793 37.032 114.793H37.76V115.896C37.76 117.227 37.8908 117.388 38.9748 117.388C39.8668 117.388 40 117.265 40 116.441C40 116.027 38.0084 113.821 37.6348 113.821C37.5604 113.821 37.378 113.563 37.2296 113.247C37.0372 112.838 36.758 112.586 36.2576 112.369C35.8712 112.201 35.5072 111.985 35.448 111.888C35.3892 111.792 35.0992 111.713 34.8036 111.713C34.0108 111.713 33.7088 111.565 33.9356 111.288C34.0744 111.119 34.0728 111.064 33.93 111.064C33.826 111.064 33.7856 110.991 33.84 110.902C33.8944 110.813 33.8316 110.74 33.7004 110.74C33.3708 110.74 33.2144 110.174 33.2524 109.119C33.2908 108.041 33.2048 107.89 32.3924 107.607C31.996 107.47 31.682 107.226 31.5512 106.956C31.4008 106.645 31.22 106.524 30.9032 106.524C30.6616 106.524 30.3932 106.453 30.3068 106.365C30.2036 106.261 30.1372 106.492 30.1136 107.036ZM123.52 106.642C123.52 106.986 122.905 107.497 122.492 107.497C121.998 107.497 121.44 108.199 121.44 108.821C121.44 109.092 121.337 109.331 121.196 109.386C121.015 109.456 120.96 109.703 120.981 110.357C121.01 111.227 121.012 111.231 121.314 110.902C121.576 110.618 121.92 110.582 121.92 110.84C121.92 110.885 121.849 110.877 121.762 110.822C121.671 110.766 121.644 110.83 121.699 110.975C121.751 111.113 121.863 111.226 121.946 111.226C122.03 111.226 122.062 111.166 122.018 111.093C121.973 111.02 122.078 110.838 122.25 110.688C122.621 110.366 122.784 110.335 122.624 110.618C122.56 110.73 122.7 110.644 122.934 110.428C123.364 110.031 123.495 109.826 123.2 110.01C122.957 110.162 123.009 109.938 123.28 109.663C123.412 109.529 123.52 109.21 123.52 108.954C123.52 108.416 123.617 108.33 124.286 108.279C124.703 108.246 124.753 108.198 124.622 107.95C124.521 107.757 124.525 107.659 124.634 107.659C125.224 107.659 124.774 106.556 124.16 106.496C123.716 106.454 123.52 106.498 123.52 106.642ZM123.846 108.706C123.539 109.081 123.816 109.353 124.172 109.027C124.337 108.875 124.434 108.688 124.387 108.611C124.261 108.404 124.065 108.439 123.846 108.706ZM97.6 108.902C97.0372 109.129 96.8 109.504 96.8 110.169V110.844L99.0056 110.88L101.211 110.915L101.178 110.463C101.161 110.214 101.14 109.888 101.133 109.74C101.11 109.273 98.3224 108.612 97.6 108.902ZM93.5496 109.286C93.3132 109.475 93.12 109.729 93.12 109.852C93.12 109.975 92.8616 110.275 92.546 110.519C92.0624 110.892 91.986 111.034 92.062 111.419C92.1116 111.669 92.082 111.875 91.996 111.875C91.9104 111.875 91.84 111.937 91.84 112.012C91.84 112.088 92.128 112.149 92.48 112.149C93.1068 112.149 93.2388 111.989 93.1388 111.348C93.1284 111.281 93.174 111.235 93.24 111.245C93.6364 111.309 94.084 111.202 94 111.064C93.9376 110.962 94.3124 110.902 95.0132 110.902C96.5428 110.902 96.948 109.723 95.5568 109.319C94.2276 108.934 93.996 108.93 93.5496 109.286ZM113.34 110.442C113.356 110.731 113.249 110.829 112.819 110.919C111.904 111.11 111.649 112.072 112.434 112.374C113.314 112.714 113.6 112.472 113.6 111.385C113.6 110.852 113.605 110.363 113.612 110.298C113.619 110.233 113.556 110.158 113.472 110.13C113.389 110.101 113.33 110.242 113.34 110.442ZM41.1224 111.51C41.1264 112.505 41.388 112.677 43.38 112.992C44.08 113.102 44.12 113.089 44.12 112.734C44.12 112.424 44.0128 112.342 43.5044 112.259C42.8484 112.153 42.6164 111.813 42.8 111.226C42.8932 110.928 42.8288 110.902 42.0108 110.902H41.12L41.1224 111.51ZM49.4896 111.192C49.3848 111.259 49.3056 111.539 49.3132 111.813C49.324 112.189 49.164 112.482 48.6636 113.005C48.1512 113.54 48 113.823 48 114.245C48 114.547 47.928 114.793 47.84 114.793C47.752 114.793 47.68 115.078 47.68 115.425C47.68 116.072 47.5028 116.253 46.8668 116.253C46.5852 116.253 46.4096 115.318 46.5496 114.565C46.5644 114.484 46.4832 114.358 46.3684 114.284C46.2 114.176 46.1996 114.149 46.3664 114.147C46.5348 114.145 46.5348 114.104 46.3664 113.92C46.2168 113.757 46.1276 113.745 46.0424 113.879C45.9604 114.008 45.924 113.997 45.9224 113.844C45.9212 113.715 45.8204 113.663 45.68 113.717C45.548 113.768 45.44 113.74 45.44 113.653C45.44 113.427 44.1004 113.459 43.872 113.691C43.7664 113.798 43.68 114.162 43.68 114.498C43.68 115.161 43.7796 115.225 44.96 115.317C45.4372 115.354 45.5276 115.426 45.57 115.801C45.7196 117.114 47.6376 117.489 48.256 116.325C48.4384 115.981 48.7072 115.742 48.9768 115.682C49.8056 115.497 50.3208 114.162 49.776 113.61C49.5032 113.333 49.5628 113.217 50.0384 113.096C50.5764 112.959 50.7144 112.754 50.7176 112.089C50.7212 111.297 50.068 110.819 49.4896 111.192ZM118.972 112.106C118.588 112.226 118.14 112.55 117.817 112.94C117.527 113.29 117.234 113.627 117.165 113.687C117.096 113.748 116.525 114.295 115.895 114.903L114.75 116.009L114.663 117.046C114.596 117.855 114.24 118.903 114.24 118.292C114.24 118.219 114.136 118.247 114.008 118.354C113.828 118.505 113.572 118.506 112.871 118.358C111.91 118.157 111.79 118.2 111.462 118.861C111.362 119.062 111.057 119.352 110.784 119.506C110.511 119.66 110.106 119.958 109.883 120.168C109.661 120.377 109.29 120.68 109.06 120.841C108.746 121.058 108.64 121.27 108.64 121.682C108.64 122.403 108.494 122.469 107.75 122.084C106.85 121.619 106.306 121.861 106.008 122.86C105.89 123.251 105.881 123.255 104.815 123.305C104.249 123.332 104.028 123.437 103.695 123.833C103.375 124.214 103.096 124.353 102.48 124.441C101.383 124.595 101.158 124.751 100.962 125.486C100.797 126.108 100.776 126.123 99.888 126.235C99.1652 126.327 98.9044 126.443 98.5968 126.814C98.268 127.21 98.0904 127.28 97.3856 127.291C96.3388 127.306 95.2864 127.624 95.2584 127.932C95.2468 128.063 95.2228 128.316 95.206 128.494C95.188 128.678 95.1396 128.73 95.0936 128.615C95.0492 128.503 94.9472 128.452 94.8676 128.502C94.3232 128.843 92.8368 128.883 92.2372 128.574C91.1896 128.032 90.4 128.503 90.4 129.668V130.386L92.68 130.34C94.7848 130.297 95.4528 130.165 95.2528 129.83C94.9588 129.338 95.4004 129.062 96.4812 129.062C97.0864 129.062 97.6276 128.985 97.6848 128.892C97.7556 128.775 97.86 128.781 98.0144 128.912C98.1868 129.057 98.24 129.056 98.24 128.909C98.24 128.803 98.366 128.73 98.52 128.746C98.9904 128.794 99.0224 128.754 98.8876 128.278L98.7576 127.818L99.6588 127.782C100.402 127.752 101.326 127.44 100.672 127.44C100.566 127.44 100.48 127.366 100.48 127.274C100.48 127.183 100.664 127.23 100.888 127.379C101.184 127.576 101.344 127.602 101.472 127.473C101.6 127.343 101.574 127.181 101.38 126.881C101.233 126.653 101.186 126.467 101.276 126.467C101.366 126.467 101.44 126.555 101.44 126.662C101.44 126.813 101.483 126.813 101.632 126.662C101.738 126.555 102.046 126.467 102.318 126.467C102.775 126.467 102.814 126.424 102.828 125.892C102.848 125.126 102.867 125.114 104.06 125.151C104.624 125.169 104.66 125.195 104.462 125.454C104.287 125.684 104.314 125.679 104.604 125.428C104.801 125.257 105.013 125.17 105.075 125.233C105.257 125.417 104.883 125.884 104.477 125.982C104.272 126.031 104.086 126.162 104.064 126.273C104.042 126.384 104.06 126.401 104.105 126.309C104.15 126.218 104.314 126.143 104.468 126.143C104.779 126.143 105.28 125.66 105.28 125.36C105.28 125.256 105.388 125.17 105.52 125.17C105.652 125.17 105.76 125.083 105.76 124.976C105.76 124.836 105.809 124.831 105.934 124.957C106.029 125.054 106.238 125.098 106.399 125.056C106.743 124.964 106.913 124.458 106.678 124.22C106.566 124.106 106.66 124.022 106.977 123.953C107.232 123.899 107.574 123.78 107.737 123.689C107.968 123.561 108.006 123.573 107.912 123.739C107.845 123.858 108.078 123.644 108.43 123.265C108.878 122.783 109.201 122.576 109.505 122.576C109.754 122.576 109.897 122.507 109.84 122.414C109.786 122.325 109.832 122.252 109.942 122.252C110.087 122.252 110.095 122.202 109.97 122.076C109.444 121.542 110.749 120.861 111.509 121.273C111.854 121.461 112 121.221 112 120.465C112 120.046 112.058 119.996 112.6 119.951C112.996 119.918 113.185 119.827 113.156 119.686C113.125 119.535 113.214 119.504 113.456 119.582C113.686 119.656 113.764 119.634 113.692 119.514C113.624 119.403 113.676 119.373 113.831 119.433C113.967 119.486 114.029 119.613 113.968 119.715C113.908 119.817 113.98 119.801 114.129 119.678C114.413 119.445 114.504 119.249 114.257 119.404C114.178 119.453 114.071 119.381 114.018 119.243C113.959 119.086 113.989 119.033 114.099 119.102C114.218 119.176 114.237 119.093 114.16 118.847C114.087 118.614 114.105 118.519 114.209 118.584C114.299 118.641 114.409 118.595 114.454 118.483C114.518 118.321 114.537 118.321 114.547 118.482C114.554 118.594 114.619 118.685 114.692 118.685C114.764 118.685 114.808 118.409 114.79 118.072C114.756 117.445 115.094 117.264 115.648 117.611C115.788 117.698 115.84 117.507 115.84 116.911C115.84 116.004 115.875 115.986 117.451 116.079C118.256 116.127 118.418 115.85 118.365 114.528L118.32 113.415L119.332 113.384C120.522 113.348 120.8 113.165 120.8 112.423C120.8 111.798 120.255 111.704 118.972 112.106ZM91.2112 113.294C91.2048 113.408 90.9928 113.496 90.728 113.496C90.3676 113.496 90.1528 113.64 89.818 114.104C89.5768 114.439 89.1356 114.976 88.8376 115.299C88.3236 115.856 88.2996 115.935 88.3684 116.84C88.4504 117.915 88.294 118.36 87.8344 118.36C87.608 118.36 87.52 118.471 87.52 118.754C87.52 119.257 87.974 119.749 88.2136 119.506C88.4624 119.254 88.64 119.295 88.64 119.604C88.64 120.018 88.8468 119.715 88.8984 119.226C88.9232 118.988 89.0656 118.678 89.2144 118.537C89.4364 118.326 89.4624 118.323 89.3592 118.523C89.2576 118.718 89.2744 118.727 89.4448 118.567C89.5912 118.429 89.7172 118.419 89.854 118.534C89.9816 118.642 90.0856 118.644 90.1484 118.542C90.2016 118.455 90.1684 118.335 90.0748 118.276C89.9584 118.203 89.97 118.087 90.1124 117.91C90.2876 117.69 90.2828 117.672 90.08 117.793C89.8824 117.911 89.8744 117.893 90.0348 117.692C90.2156 117.466 90.2752 116.494 90.1936 115.118C90.1572 114.5 91.0624 114.151 91.3808 114.66C91.5612 114.948 91.5428 113.846 91.36 113.415C91.2844 113.237 91.2176 113.182 91.2112 113.294ZM108.44 113.854C108.286 114.014 108.214 114.145 108.28 114.144C108.431 114.144 108.334 115.965 108.173 116.136C108.108 116.205 107.644 116.213 107.141 116.153L106.227 116.044L106.59 115.653C106.85 115.372 106.877 115.291 106.686 115.365C106.539 115.423 106.302 115.651 106.158 115.874C106.014 116.096 105.802 116.242 105.688 116.197C105.573 116.152 105.236 116.376 104.939 116.695C104.643 117.014 104.485 117.226 104.589 117.166C104.693 117.107 104.817 117.123 104.865 117.202C104.914 117.28 104.828 117.339 104.676 117.331C103.755 117.285 103.213 117.559 103.108 118.123C103.006 118.677 102.993 118.685 102.182 118.687C100.913 118.69 100.662 118.805 100.546 119.432C100.447 119.967 100.423 119.982 99.6728 119.982C98.5704 119.982 98.13 120.193 98.002 120.783C97.912 121.198 97.8184 121.279 97.4272 121.279C96.99 121.279 96.96 121.32 96.96 121.918C96.96 122.87 95.6072 123.089 95.4892 122.156L95.44 121.769L95.2548 122.173C95.1532 122.395 95.1352 122.536 95.2148 122.486C95.2948 122.436 95.36 122.504 95.36 122.636C95.36 123.773 98.1476 123.502 98.636 122.318C98.866 121.759 98.8872 121.749 99.728 121.784C100.748 121.825 100.922 121.736 101.218 121.016C101.428 120.508 101.496 120.468 102.173 120.468C103.026 120.468 103.519 120.244 103.522 119.855C103.528 119.277 103.815 119.091 104.833 119.009C105.729 118.937 105.86 118.881 106.043 118.492C106.156 118.252 106.408 118.006 106.604 117.947C106.8 117.887 107.145 117.662 107.372 117.448C107.598 117.233 108.101 116.895 108.49 116.696C109.018 116.425 109.232 116.201 109.341 115.807C109.471 115.335 109.548 115.28 110.072 115.28C111.03 115.28 111.304 114.972 111.065 114.164C110.851 113.442 110.22 113.266 109.221 113.65C109.001 113.735 108.798 113.75 108.771 113.684C108.743 113.618 108.594 113.695 108.44 113.854ZM35.2108 114.072C35.1968 114.497 35.4928 114.797 35.912 114.783C36.234 114.772 36.2336 114.768 35.8968 114.603C35.7084 114.511 35.4792 114.278 35.3876 114.087C35.2248 113.746 35.2216 113.746 35.2108 114.072ZM118.152 115.337C118.093 115.573 117.999 115.767 117.943 115.768C117.886 115.77 117.678 115.815 117.48 115.868C117.156 115.956 117.12 115.909 117.12 115.391C117.12 114.885 117.173 114.808 117.56 114.758C118.141 114.684 118.28 114.819 118.152 115.337ZM36.64 115.127C36.64 115.222 36.7168 115.251 36.8108 115.192C36.9132 115.128 36.9612 115.205 36.9308 115.385C36.8944 115.6 36.9636 115.671 37.176 115.634C37.3536 115.603 37.43 115.652 37.3668 115.755C37.3084 115.851 37.3372 115.928 37.4304 115.928C37.6976 115.928 37.6292 115.634 37.28 115.28C36.9308 114.926 36.64 114.857 36.64 115.127ZM39.0092 116.66C38.9908 117.152 38.4872 117.35 38.1424 117C37.7976 116.651 37.9928 116.14 38.4784 116.122C39.008 116.101 39.0292 116.123 39.0092 116.66ZM115.04 118.184C115.04 118.57 115.556 118.534 115.612 118.144C115.638 117.973 115.54 117.874 115.346 117.874C115.151 117.874 115.04 117.987 115.04 118.184ZM41.7068 118.543C41.5456 118.638 41.1496 118.677 40.8268 118.631C40.504 118.584 40.3656 118.583 40.5196 118.627C40.7472 118.693 40.7664 118.769 40.6236 119.04C40.3732 119.514 40.7824 119.928 41.2508 119.673C41.6736 119.444 41.7692 119.449 41.72 119.698C41.6948 119.825 41.9048 119.92 42.28 119.951C42.6604 119.983 42.8872 120.087 42.9 120.235C42.9112 120.363 42.938 120.541 42.96 120.63C42.982 120.72 43.0088 120.902 43.02 121.036C43.0428 121.313 43.68 121.374 43.68 121.099C43.68 121.001 43.584 120.958 43.4668 121.003C43.3492 121.049 43.2532 120.98 43.2532 120.851C43.2532 120.722 43.3372 120.649 43.44 120.689C43.5428 120.729 43.6268 120.663 43.6268 120.543C43.6268 120.422 43.5488 120.338 43.4532 120.356C43.3484 120.375 43.278 120.067 43.2744 119.577C43.2668 118.384 42.6576 117.983 41.7068 118.543ZM40.8472 119.28C40.7656 119.496 40.8076 119.527 41.0524 119.433C41.2992 119.338 41.3204 119.354 41.16 119.518C40.9228 119.761 40.5356 119.474 40.7112 119.185C40.876 118.915 40.9624 118.976 40.8472 119.28ZM87.398 120.894C87.2552 121.197 86.8992 121.589 86.6068 121.764C85.9768 122.14 85.76 122.639 85.76 123.71C85.76 124.468 85.5492 124.89 85.0944 125.044C84.6808 125.184 85.1612 125.493 85.6892 125.426C85.9996 125.387 86.4556 125.466 86.7356 125.608C87.0932 125.788 87.4392 125.827 87.9756 125.745C88.3852 125.683 89.3076 125.615 90.0256 125.595C91.37 125.557 91.84 125.366 91.84 124.859C91.84 124.37 92.2008 124.197 93.2216 124.197C94.6916 124.197 95.0592 124.014 95.012 123.302C94.9636 122.575 94.7652 122.519 92.6064 122.625C90.5992 122.724 90.4 122.795 90.4 123.404C90.4 123.729 90.32 123.873 90.1404 123.873C89.9172 123.873 89.9112 123.833 90.0976 123.589C90.2732 123.36 90.2464 123.365 89.9564 123.615C89.7592 123.786 89.5536 123.88 89.4992 123.825C89.3244 123.648 89.5824 123.221 89.9564 123.069C90.1908 122.974 90.2292 122.917 90.0648 122.91C89.7796 122.899 89.28 123.391 89.28 123.683C89.28 123.792 89.0412 123.873 88.72 123.873C88.1468 123.873 88.0668 124.012 88.1484 124.867C88.182 125.22 87.8548 125.325 87.0596 125.217L86.4 125.128V124.402V123.677L87.04 123.739L87.68 123.801V123.098C87.68 122.711 87.744 122.435 87.822 122.484C88.1616 122.696 88.3132 122.144 88.0068 121.81C87.8376 121.626 87.7384 121.436 87.7868 121.387C87.8348 121.338 88.0224 121.439 88.204 121.61C88.6252 122.007 88.9112 121.791 88.8648 121.111C88.7988 120.145 87.8188 120 87.398 120.894ZM44.0648 120.983C43.8972 121.176 43.85 121.281 43.96 121.216C44.0932 121.138 44.16 121.209 44.16 121.431C44.16 121.615 44.2352 121.765 44.3272 121.765C44.4188 121.765 44.4728 121.893 44.4472 122.049C44.4148 122.242 44.4892 122.318 44.68 122.285C44.834 122.259 44.96 122.314 44.96 122.407C44.96 122.5 45.14 122.576 45.36 122.576C45.5884 122.576 45.76 122.67 45.76 122.794C45.76 123.082 46.2788 123.549 46.5992 123.549C46.7392 123.549 46.8772 123.619 46.9068 123.705C46.936 123.791 47.464 123.882 48.08 123.909C49.1492 123.954 49.2008 123.975 49.2172 124.36C49.2584 125.317 49.2708 125.348 49.56 125.215C49.894 125.062 52.006 125.198 52.0024 125.373C51.9792 126.529 51.9672 126.507 52.56 126.437C52.868 126.4 53.1252 126.41 53.132 126.459C53.2012 126.979 53.312 127.375 53.418 127.483C53.6428 127.711 55.04 127.82 55.04 127.61C55.04 127.506 55.112 127.466 55.2 127.521C55.2952 127.581 55.36 127.39 55.36 127.05C55.36 126.344 55.0436 126.143 53.9304 126.143C53.1464 126.143 53.12 126.128 53.12 125.682C53.12 125.144 52.7908 124.799 51.93 124.434C51.5896 124.29 51.1848 124.014 51.0304 123.82C50.852 123.597 50.4364 123.407 49.8952 123.302C49.202 123.168 49.0016 123.053 48.8304 122.691C48.4112 121.805 47.2932 121.574 46.8596 122.285C46.6424 122.641 46.24 122.27 46.24 121.715C46.24 120.672 44.7636 120.175 44.0648 120.983ZM109.083 123.026C109.032 123.224 108.821 123.454 108.615 123.538C108.381 123.633 108.336 123.694 108.495 123.701C108.82 123.714 109.334 123.146 109.244 122.873C109.206 122.756 109.136 122.822 109.083 123.026ZM48.8 124.205C48.8 124.309 48.7076 124.358 48.5944 124.314C48.4772 124.269 48.3884 124.351 48.3884 124.506C48.3884 124.655 48.512 124.777 48.6624 124.777C48.8132 124.777 48.8964 124.711 48.8476 124.631C48.7988 124.551 48.848 124.43 48.9564 124.362C49.0972 124.274 49.1032 124.206 48.9772 124.127C48.8796 124.066 48.8 124.101 48.8 124.205ZM56.2 127.451C55.914 127.54 55.68 127.687 55.68 127.779C55.68 127.871 55.59 127.893 55.48 127.827C55.37 127.762 55.4008 127.849 55.5484 128.02C55.6964 128.192 55.8176 128.368 55.8184 128.413C55.8252 128.929 56.0472 129.001 57.712 129.025C59.448 129.049 59.7556 129.16 59.6264 129.715C59.5032 130.242 59.9152 130.318 62.972 130.337C64.6372 130.347 66.0616 130.356 66.1368 130.357C66.212 130.358 66.246 130.651 66.2124 131.007L66.1516 131.656H66.7428C67.65 131.656 67.84 131.527 67.84 130.911C67.84 130.073 65.8004 129.424 64.76 129.932C64.5204 130.049 64.48 129.986 64.48 129.493C64.48 128.575 63.4408 128.098 62.5236 128.595C62.3392 128.695 61.5304 128.791 60.726 128.809L59.2636 128.84L59.2264 128.343C59.1568 127.421 57.694 126.99 56.2 127.451ZM87.7696 130.001C86.3888 130.484 86.554 131.648 88.0044 131.653L88.7284 131.656L88.6676 131.007C88.6012 130.305 88.5988 130.306 89.64 130.355C90.2868 130.386 90.4308 130.149 89.9304 129.878C89.4856 129.637 88.6792 129.683 87.7696 130.001ZM69.2556 130.086C69.0228 130.266 68.8916 130.839 68.9432 131.453C68.976 131.848 72.16 131.728 72.16 131.331C72.16 131.153 72.2296 131.007 72.3148 131.007C72.6836 131.007 72.1644 130.28 71.6652 130.097C70.95 129.835 69.5896 129.829 69.2556 130.086ZM83.2164 130.082C82.7164 130.262 82.1916 131.007 82.5652 131.007C82.6504 131.007 82.72 131.158 82.72 131.342C82.72 131.662 82.7952 131.676 84.3944 131.636C85.7452 131.602 86.0356 131.554 85.8964 131.384C85.8016 131.268 85.7668 131.002 85.8188 130.792C85.9816 130.135 84.326 129.683 83.2164 130.082ZM40.988 141.435C40.5784 141.877 40.5504 142.017 40.8816 141.968C41.3072 141.904 41.8396 141.06 41.4536 141.06C41.3888 141.06 41.1792 141.229 40.988 141.435ZM33.1408 156.843C32.8684 157.175 33.1692 157.405 33.4676 157.092C33.6812 156.869 33.6916 156.795 33.5192 156.728C33.4004 156.682 33.2304 156.734 33.1408 156.843ZM130.432 156.82C130.078 157.178 130.523 157.682 130.893 157.343C131.184 157.075 131.216 157.075 131.507 157.343C131.8 157.611 131.822 157.61 131.98 157.312C132.204 156.888 131.909 156.576 131.496 156.8C131.301 156.906 131.099 156.906 130.904 156.8C130.703 156.691 130.552 156.698 130.432 156.82ZM130.858 157.219C130.71 157.4 130.641 157.407 130.545 157.248C130.376 156.972 130.518 156.781 130.809 156.894C130.997 156.967 131.008 157.037 130.858 157.219ZM131.894 157.202C131.822 157.392 131.754 157.403 131.574 157.252C131.395 157.101 131.388 157.032 131.545 156.934C131.818 156.763 132.006 156.907 131.894 157.202Z\" fill=\"url(#paint2_linear)\"/>\r\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M69.8331 15.2004C69.7663 15.3565 69.6975 15.6556 69.6799 15.8652C69.6283 16.4732 68.5347 16.8623 66.8763 16.8623C66.1635 16.8623 66.0647 16.9085 65.8415 17.3459C65.2895 18.4278 64.1387 18.5031 63.5351 17.4971C63.2463 17.0163 63.2207 17.0062 63.0603 17.3098C62.8175 17.7699 61.7707 18.0082 61.1519 17.7447C60.6035 17.5109 60.4799 17.6426 60.4799 18.4618C60.4799 19.1922 59.7403 19.5287 58.8259 19.2141C57.9603 18.9162 57.4255 19.0698 57.0187 19.733C56.4023 20.7374 54.7935 21.2019 54.4679 20.4699C54.3723 20.2546 54.3199 20.339 54.2507 20.8197C54.1635 21.4269 54.1151 21.4719 53.0831 21.8947C52.4911 22.1371 51.7503 22.5635 51.4375 22.8415C50.7975 23.4115 50.0571 23.5079 49.4787 23.0977C49.1359 22.8545 49.1231 22.8651 49.0263 23.4779C48.9503 23.9599 48.8083 24.178 48.4235 24.4037C48.1463 24.5659 47.6603 24.9789 47.3435 25.3214L46.7667 25.9445L46.1011 25.7065C45.4551 25.4755 45.4403 25.4779 45.6031 25.7864C45.9347 26.4138 46.9583 26.2193 47.7683 25.3745C48.1531 24.9733 48.5403 24.6449 48.6283 24.6449C48.7167 24.6449 49.0251 24.4362 49.3143 24.1808C49.6519 23.8829 50.1067 23.677 50.5867 23.6056C50.9975 23.544 51.4295 23.3758 51.5467 23.2311C51.9083 22.7852 53.1619 22.0507 53.5619 22.0507C54.0283 22.0507 54.5743 21.769 54.8391 21.3908C54.9487 21.2348 55.3411 21.0548 55.7115 20.9916C56.6259 20.8347 57.5327 20.3321 57.9363 19.7573C58.2043 19.3759 58.3163 19.3187 58.4967 19.4707C59.1179 19.9932 60.7999 19.3049 60.7999 18.5279C60.7999 18.159 60.8155 18.1521 61.0727 18.4128C61.2507 18.5931 61.3667 18.6248 61.4063 18.5044C61.4399 18.4026 61.5351 18.3621 61.6179 18.414C61.8003 18.5283 63.1991 17.6584 63.2003 17.4298C63.2007 17.3406 63.3415 17.5007 63.5127 17.7857C64.0795 18.7273 65.0991 18.6766 66.1675 17.654C66.5699 17.2681 66.8691 17.1594 67.8855 17.0289C69.2363 16.8554 70.4391 16.3435 70.3083 15.9981C70.2635 15.8798 70.2999 15.5883 70.3895 15.35C70.5823 14.8356 70.0499 14.6921 69.8331 15.2004ZM71.7531 15.2924C71.4615 16.4695 72.0055 16.7634 74.1599 16.5928C76.1079 16.4387 77.8155 16.4464 79.8807 16.6191C81.7491 16.7748 82.0927 16.6045 82.0515 15.5421C82.0099 14.4675 81.4399 14.8246 81.4399 15.9248V16.4201L80.6927 16.3163C79.8335 16.1967 79.6727 16.0958 80.0047 15.883C80.1963 15.7602 80.1807 15.7294 79.9199 15.7172C79.7171 15.7075 79.6799 15.6694 79.8179 15.6139C80.0023 15.5397 80.0023 15.504 79.8179 15.3861C79.6727 15.2928 79.8007 15.245 80.1999 15.2434C80.5299 15.2422 80.7999 15.168 80.7999 15.0788C80.7999 14.9746 79.4379 14.9227 76.9999 14.9337C73.6239 14.9487 73.2711 14.9746 73.8399 15.1643C74.1919 15.2819 74.3719 15.3848 74.2399 15.3929C74.0267 15.4063 74.0267 15.4254 74.2399 15.5652C74.4531 15.7051 74.4531 15.7229 74.2399 15.7274C74.0327 15.7318 74.0315 15.7525 74.2315 15.881C74.4175 16.0001 74.3803 16.0678 74.0419 16.2239C73.5307 16.4598 73.0483 16.3123 73.1815 15.9608C73.2355 15.8177 73.2087 15.7529 73.1179 15.8096C73.0311 15.864 72.9599 15.795 72.9599 15.656C72.9599 15.517 73.0463 15.4031 73.1519 15.4031C73.5459 15.4031 73.0271 15.1015 72.4471 14.9937C71.9063 14.8932 71.8455 14.9191 71.7531 15.2924ZM83.5599 15.0285C83.8199 15.0974 83.9139 15.3147 84.0351 16.1286C84.1075 16.6147 85.2963 17.005 86.7343 17.0155C87.9275 17.0245 87.9603 17.0358 88.5899 17.6608C89.5171 18.5822 91.1115 18.7249 91.4187 17.9138C91.5067 17.6811 92.1599 17.7711 92.1599 18.0163C92.1599 18.095 92.2679 18.1594 92.3999 18.1594C92.5319 18.1594 92.6399 18.2324 92.6399 18.3216C92.6399 18.4107 92.8423 18.4837 93.0895 18.4837C93.3811 18.4837 93.7263 18.6689 94.0711 19.0106C94.5663 19.5011 94.6787 19.5376 95.6959 19.5376C96.6863 19.5376 96.8079 19.5741 96.9943 19.9275C97.2143 20.3446 97.8479 20.6705 99.0979 21.0094C99.5259 21.1253 99.9767 21.3657 100.1 21.5432C100.236 21.7402 100.654 21.9356 101.171 22.0446C101.696 22.1549 102.206 22.3957 102.507 22.6745C102.895 23.0333 103.17 23.1338 103.852 23.1654C104.801 23.2092 105.076 23.3616 105.15 23.8837C105.184 24.1184 105.465 24.3685 106.003 24.6421C106.444 24.8666 107.033 25.2874 107.31 25.5772C107.859 26.1496 108.989 26.323 109.426 25.9015C109.597 25.7365 109.617 25.7625 109.534 26.0409C109.354 26.6473 110.347 27.7268 111.821 28.5261C112.008 28.6274 112.267 28.9679 112.397 29.2833C112.568 29.6979 112.802 29.9241 113.244 30.0996C113.579 30.2334 113.923 30.4965 114.007 30.6845C114.091 30.8726 114.388 31.1049 114.667 31.2001C114.946 31.2954 115.329 31.5743 115.519 31.8195C115.786 32.1661 115.998 32.2654 116.469 32.2654C117.033 32.2654 117.07 32.2946 116.997 32.6784C116.948 32.9423 117.012 33.162 117.176 33.2865C117.317 33.3939 117.491 33.7725 117.563 34.1284C117.659 34.6067 117.837 34.873 118.247 35.1523C118.551 35.3594 118.894 35.7104 119.009 35.9313C119.124 36.1526 119.395 36.4019 119.612 36.4854C119.828 36.5689 120.072 36.8138 120.153 37.029C120.334 37.5126 120.913 37.9402 121.386 37.9402C121.817 37.9402 121.89 38.0484 122.006 38.8535C122.105 39.545 123.356 40.9572 123.738 40.8084C123.894 40.748 123.927 40.9296 123.876 41.564C123.801 42.4922 124.229 43.2908 124.802 43.2908C125.186 43.2908 125.31 43.506 125.4 44.3272C125.479 45.0524 125.768 45.4727 126.419 45.814C126.801 46.0143 126.829 46.0921 126.724 46.6725C126.587 47.4301 126.731 47.7447 127.368 48.0779C127.743 48.2745 127.84 48.4329 127.84 48.8492C127.84 49.6465 128.103 50.4074 128.488 50.7231C128.929 51.0847 129.285 52.0332 129.422 53.2099C129.481 53.717 129.653 54.2691 129.805 54.4389C129.956 54.6084 130.08 54.8297 130.08 54.9306C130.08 55.3895 130.801 56.9999 131.193 57.4154C131.773 58.0307 132.109 59.7895 131.839 60.8045C131.529 61.9706 131.967 62.9094 132.821 62.9094C133.24 62.9094 133.261 62.9394 133.115 63.3285C133.028 63.5588 132.986 63.7959 133.021 63.8555C133.056 63.9147 133.03 64.3253 132.963 64.7675C132.782 65.9568 133.59 68.2806 134.049 67.8939C134.181 67.7833 134.33 67.7164 134.38 67.7452C134.431 67.7744 134.493 67.735 134.518 67.658C134.543 67.5814 134.408 67.5068 134.218 67.4922C133.29 67.4213 132.857 64.6131 133.57 63.2848C133.901 62.6674 133.805 62.5065 133.08 62.4647C132.172 62.4125 131.934 62.0849 132.105 61.1259C132.463 59.1158 132.201 56.9103 131.603 56.9103C131.094 56.9103 130.467 55.8386 130.324 54.7223C130.267 54.2768 130.132 53.8621 130.023 53.8009C129.915 53.7397 129.809 53.4325 129.789 53.1183C129.768 52.8046 129.61 52.2343 129.439 51.8508C129.267 51.4678 129.125 51.0478 129.123 50.9173C129.121 50.7868 128.933 50.529 128.703 50.3437C128.386 50.0872 128.244 49.7609 128.103 48.9644C127.953 48.1123 127.846 47.8837 127.52 47.7175C127.152 47.5307 127.12 47.4249 127.12 46.416V45.3175L126.612 45.2676C125.979 45.2056 125.732 44.9142 125.654 44.1383C125.566 43.2713 125.491 43.1286 125.118 43.1286C124.183 43.1286 123.685 41.6256 124.432 41.0618C125.004 40.6297 124.844 40.2851 124.099 40.3455C123.317 40.4083 122.56 39.7379 122.56 38.9815C122.56 38.7655 122.503 38.5888 122.433 38.5888C122.363 38.5888 122.237 38.3516 122.153 38.0618C122.069 37.772 121.892 37.5276 121.76 37.5191C121.628 37.5101 121.357 37.4919 121.158 37.4785C120.94 37.4635 120.675 37.2532 120.493 36.9512C120.327 36.6747 119.961 36.3063 119.679 36.1324C119.397 35.9585 119.129 35.6764 119.085 35.5057C119.041 35.3351 118.761 35.0493 118.463 34.8709C117.814 34.4826 117.75 33.9597 118.253 33.1357C118.585 32.5909 118.997 32.372 118.822 32.8329C118.767 32.9796 118.821 33.0761 118.96 33.0761C119.099 33.0761 119.154 32.9796 119.097 32.8308C119.031 32.6557 119.077 32.6144 119.262 32.6861C119.569 32.8057 119.615 32.4263 119.328 32.1357C119.059 31.8629 118.666 31.8896 118.773 32.1734C118.832 32.3286 118.761 32.3983 118.559 32.3829C118.331 32.3655 118.298 32.3084 118.427 32.1503C118.522 32.0352 118.572 31.9354 118.539 31.9286C118.171 31.8515 117.487 31.8876 117.545 31.9817C117.585 32.0485 117.514 32.1033 117.386 32.1033C117.097 32.1033 116.989 31.8288 117.05 31.252C117.082 30.9549 117.023 30.8062 116.874 30.8062C116.748 30.8062 116.687 30.9051 116.736 31.0331C116.783 31.1576 116.733 31.3149 116.626 31.3821C116.489 31.4681 116.471 31.4365 116.566 31.2772C116.677 31.0903 116.657 31.0858 116.456 31.2508C116.321 31.3615 116.159 31.4 116.097 31.3367C116.034 31.2731 116.03 31.3469 116.089 31.5001C116.147 31.6533 116.122 31.779 116.034 31.779C115.946 31.779 115.83 31.5974 115.775 31.3753C115.696 31.0563 115.542 30.9496 115.043 30.869C114.636 30.8029 114.326 30.6343 114.171 30.3955C114.039 30.1912 113.684 29.942 113.382 29.8406C112.996 29.7117 112.772 29.5022 112.629 29.1374C112.373 28.4872 111.479 27.593 110.64 27.1487C110.051 26.837 109.996 26.7511 109.951 26.0648C109.925 25.6546 109.802 25.2339 109.678 25.1297C109.494 24.9749 109.465 25.0061 109.521 25.3012C109.559 25.4994 109.554 25.6246 109.509 25.5796C109.465 25.5347 109.162 25.5906 108.836 25.7041C108.142 25.9461 107.456 25.6927 107.28 25.1305C107.223 24.9497 106.89 24.6534 106.54 24.4727C105.88 24.1314 105.802 24.0256 105.707 23.3478C105.655 22.9794 105.563 22.9348 104.705 22.859C104.113 22.8063 103.366 22.5837 102.705 22.2627C102.124 21.981 101.389 21.7009 101.07 21.6405C100.705 21.5708 100.456 21.4168 100.395 21.2234C100.342 21.0548 100.142 20.887 99.9491 20.8505C98.5039 20.5781 98.3155 20.495 98.0023 19.9904C97.5219 19.2153 96.8039 18.9028 96.2171 19.2129C95.1847 19.7585 94.3999 19.3345 94.3999 18.2312C94.3999 17.4302 94.3787 17.4184 93.4955 17.7342C92.1899 18.2008 91.1755 17.2065 92.1463 16.4116C92.3671 16.2312 92.3479 16.2101 91.9999 16.2494C91.6579 16.2883 91.5863 16.3978 91.5059 17.007C91.3091 18.5044 89.5831 18.7269 88.8783 17.3459C88.6155 16.8307 88.6327 16.8352 86.7999 16.7991C85.3067 16.7695 84.4799 16.4023 84.4799 15.7679C84.4799 15.1899 84.2147 14.911 83.6879 14.9353C83.4171 14.9479 83.3739 14.9791 83.5599 15.0285ZM60.5179 16.808C60.4071 16.8534 60.2351 17.0484 60.1363 17.2413C59.9679 17.5696 59.9835 17.5668 60.3783 17.1988C60.6103 16.9827 60.7999 16.7821 60.7999 16.7529C60.7999 16.6937 60.7971 16.6941 60.5179 16.808ZM73.1703 19.2802C72.1699 19.4067 71.3747 19.7848 71.3423 20.1493C71.2291 21.4346 71.2215 21.4022 71.6327 21.4022C72.0023 21.4022 72.0211 21.3616 71.9247 20.7816C71.7835 19.9348 71.9939 19.797 73.8759 19.5056C75.7139 19.2206 80.4899 19.3094 81.9199 19.6551L82.7999 19.8679L82.8487 20.6349C82.8895 21.2777 82.9495 21.4022 83.2175 21.4022C83.8899 21.4022 83.5667 19.9247 82.8123 19.5514C82.1191 19.2084 75.2639 19.0159 73.1703 19.2802ZM67.9403 20.7058C67.8783 20.7686 67.1463 20.8027 66.3139 20.7812C64.2747 20.7285 63.8467 20.9567 63.8423 22.101C63.8395 22.8436 64.1043 22.7585 64.2503 21.9697C64.4103 21.1059 65.2155 20.7897 66.5079 21.084C66.9335 21.1809 67.3563 21.159 67.8379 21.0151C68.5283 20.8083 70.3259 20.996 70.9231 21.3373C71.0691 21.4208 71.0739 21.3993 70.9427 21.2542C70.6339 20.9141 68.1779 20.4654 67.9403 20.7058ZM86.0715 20.6478C86.0319 20.6843 85.6107 20.7552 85.1351 20.8055C84.6595 20.8558 84.1627 21.0053 84.0315 21.1383C83.8199 21.3527 83.8635 21.3547 84.4163 21.1553C85.1647 20.885 86.7751 20.8473 87.2219 21.0901C87.4535 21.2153 87.7515 21.2104 88.2915 21.071C89.4579 20.7706 90.3539 21.0702 90.4903 21.8063C90.6575 22.7106 91.0787 22.9299 90.9935 22.0682C90.8783 20.8983 89.9559 20.4423 88.3623 20.767C87.9015 20.861 87.4599 20.8971 87.3807 20.8477C87.1815 20.7228 86.1587 20.5668 86.0715 20.6478ZM48.8807 22.3742C48.7211 22.5529 48.6647 22.6993 48.7555 22.6993C48.9567 22.6993 49.3559 22.236 49.2483 22.1269C49.2059 22.084 49.0407 22.195 48.8807 22.3742ZM61.4499 22.3649C61.1051 22.7143 61.0191 23.9964 61.3399 23.9964C61.4571 23.9964 61.5023 23.7414 61.4659 23.2805C61.3963 22.3924 61.7855 22.0771 62.5971 22.3641C63.2107 22.5805 63.4067 22.4467 62.8115 22.2173C62.1743 21.9717 61.7975 22.0126 61.4499 22.3649ZM91.9999 22.311C91.7763 22.45 91.7299 22.5185 91.8947 22.4666C92.7459 22.1983 92.9031 22.2048 93.1851 22.5205C93.3879 22.7479 93.4563 23.0215 93.4103 23.4216C93.3415 24.0199 93.5115 24.2092 93.6683 23.709C94.0239 22.5736 92.9819 21.7005 91.9999 22.311ZM95.3599 23.5367C95.3599 23.7305 95.2263 23.8999 95.0335 23.951C94.7251 24.0329 94.7219 24.0543 94.9783 24.3413C95.3315 24.7365 95.5791 24.7292 95.4751 24.3267C95.3791 23.9554 95.5883 23.7422 96.2019 23.5862C96.7887 23.437 97.4023 23.8496 97.4691 24.4386C97.5195 24.8841 97.5303 24.8881 98.7447 24.9072C100.344 24.9319 100.8 25.0535 100.8 25.4548C100.8 25.9696 101.491 26.319 102.28 26.2039C103.03 26.0944 103.222 26.1739 103.498 26.7057C103.6 26.9027 103.994 27.2026 104.373 27.3729C104.846 27.5845 105.128 27.8398 105.268 28.1832C105.417 28.5464 105.667 28.7592 106.176 28.9566C106.66 29.1438 106.88 29.3234 106.88 29.5309C106.88 29.7725 107.001 29.8333 107.484 29.8333C108.228 29.8333 108.728 30.1681 108.873 30.762C108.934 31.0092 109.157 31.3574 109.37 31.5358C109.608 31.7352 109.77 32.0583 109.792 32.3756C109.811 32.6594 109.866 32.888 109.913 32.8835C110.545 32.8252 111.146 33.008 111.808 33.4599C112.249 33.7603 112.795 34.053 113.022 34.1109C113.284 34.1778 113.472 34.3651 113.536 34.6245C113.601 34.8851 113.833 35.1158 114.176 35.2613C114.565 35.4259 114.787 35.6731 114.975 36.1474C115.118 36.5093 115.293 36.8052 115.364 36.8052C115.436 36.8052 115.641 37.0468 115.821 37.3423C116.001 37.6378 116.329 37.9775 116.55 38.0971C117.206 38.453 117.609 40.3865 117.096 40.714C116.965 40.7975 117.18 40.8299 117.64 40.7963C118.348 40.744 118.4 40.7667 118.4 41.1238C118.4 41.4091 118.492 41.5109 118.76 41.5206C119.577 41.5514 119.877 41.6292 120.012 41.8461C120.205 42.1546 120.196 42.7565 119.994 43.1392C119.81 43.4878 119.99 43.5603 120.288 43.2583C120.571 42.9713 120.521 42.0812 120.199 41.6791C119.945 41.3601 119.642 41.23 119.076 41.1955C118.965 41.1886 118.791 41.0006 118.691 40.7776C118.591 40.5547 118.423 40.3723 118.319 40.3723C117.898 40.3723 117.6 39.7764 117.6 38.9353C117.6 38.1429 117.566 38.0711 117.04 37.7566C116.732 37.5726 116.48 37.3529 116.48 37.2686C116.48 37.1842 116.228 36.8446 115.92 36.5142C115.613 36.1839 114.911 35.4307 114.36 34.841C113.81 34.2508 113.211 33.7214 113.029 33.6638C112.847 33.6063 112.539 33.3412 112.344 33.0745C112.147 32.8041 111.842 32.5897 111.655 32.5897C111.47 32.5897 111.047 32.3525 110.715 32.0627C110.383 31.7729 109.924 31.404 109.694 31.2435C109.465 31.0826 109.177 30.7077 109.054 30.4097C108.889 30.0088 108.672 29.8159 108.215 29.6643C107.877 29.5516 107.505 29.3234 107.389 29.1576C107.273 28.9914 106.916 28.7442 106.594 28.608C106.272 28.4718 105.81 28.1167 105.568 27.8184C105.325 27.52 104.929 27.2257 104.688 27.1641C104.446 27.1029 103.992 26.771 103.679 26.4272C103.151 25.8476 103.06 25.8083 102.443 25.8918C101.794 25.9801 101.28 25.7317 101.28 25.3304C101.28 25.0146 100.67 24.6449 100.148 24.6437C98.6891 24.6397 97.8975 24.4439 97.7499 24.0503C97.4919 23.3636 95.3599 22.9052 95.3599 23.5367ZM57.5707 23.6263C57.3343 23.7746 57.0523 24.0649 56.9435 24.2704C56.7615 24.6149 56.6407 24.6449 55.4283 24.6449H54.1111L53.6487 25.2286C53.2559 25.7252 53.0923 25.8111 52.5535 25.8054C51.6355 25.7957 51.4187 25.895 51.0771 26.4823C50.8675 26.8423 50.5559 27.0798 50.0903 27.2359C49.6807 27.3725 49.2507 27.6745 49.0103 27.9935C48.7911 28.2849 48.4559 28.5711 48.2655 28.629C48.0755 28.6874 47.7399 28.9002 47.5199 29.1021C47.2999 29.3044 46.8411 29.6007 46.5003 29.7604C46.1023 29.9472 45.8059 30.2318 45.6723 30.5561C45.5339 30.8921 45.2203 31.1843 44.7323 31.4312C44.3295 31.6351 43.9999 31.8799 43.9999 31.9752C43.9999 32.2399 43.4839 32.5787 43.0723 32.5844C42.8391 32.5876 42.6091 32.7595 42.4415 33.055C42.2967 33.3108 41.9515 33.603 41.6743 33.7048C41.3971 33.8061 41.0875 34.0728 40.9871 34.2966C40.8863 34.5207 40.6267 34.772 40.4103 34.8555C40.1939 34.939 39.8927 35.211 39.7411 35.4603C39.4067 36.01 38.1575 37.3788 37.4075 38.0172C37.1947 38.1984 37.1523 38.4274 37.2135 39.0602C37.2883 39.8348 37.2695 39.883 36.7991 40.1295C36.5279 40.2718 36.2391 40.5668 36.1571 40.7853C36.0519 41.065 35.8859 41.183 35.5967 41.183C34.7207 41.183 34.2571 42.0946 34.5539 43.2328C34.5571 43.2458 34.6695 43.2989 34.8035 43.3507C35.0003 43.4274 35.0155 43.3856 34.8835 43.1355C34.4595 42.3321 34.7643 41.6637 35.6195 41.523C35.9995 41.4602 36.2947 41.2993 36.3963 41.0999C36.5455 40.806 37.2551 40.6013 37.2983 40.8392C37.4599 41.7306 37.4251 41.8234 36.9499 41.7675C36.6323 41.7298 36.4799 41.7837 36.4799 41.9337C36.4799 42.2389 37.1975 42.2162 37.5083 41.9008C37.6467 41.761 37.7599 41.4752 37.7599 41.2661C37.7599 41.0569 37.8499 40.8437 37.9599 40.7926C38.0699 40.7415 37.9887 40.7432 37.7799 40.7967C37.4863 40.8713 37.4307 40.8433 37.5363 40.6734C37.6111 40.5522 37.6743 39.9471 37.6763 39.3285L37.6799 38.2041L38.2051 38.0663C38.6179 37.9576 38.7511 37.8223 38.8279 37.4339C38.8851 37.1429 39.0723 36.8717 39.2823 36.7748C39.4939 36.6768 39.7147 36.3545 39.8251 35.9812C39.9739 35.4773 40.1111 35.3261 40.5167 35.2195C40.8279 35.1377 41.1223 34.9046 41.2819 34.6127C41.4535 34.2986 41.7159 34.1028 42.0595 34.0315C42.3443 33.9723 42.6707 33.7952 42.7847 33.6375C42.8983 33.4798 43.0743 33.4028 43.1755 33.466C43.2771 33.5297 43.3599 33.511 43.3599 33.4251C43.3599 33.3391 43.5151 33.3096 43.7051 33.3598C43.9235 33.4178 44.0119 33.389 43.9459 33.2812C43.8871 33.1847 44.0323 33.0623 44.2803 32.9995C44.9019 32.841 45.1003 32.6294 44.9979 32.2326C44.9339 31.9849 45.0307 31.7883 45.3399 31.5386C45.5775 31.3469 45.8947 30.9395 46.0455 30.6331C46.2655 30.1868 46.4599 30.0425 47.0251 29.9043C47.5123 29.7851 47.7707 29.6221 47.8603 29.3773C47.9339 29.1759 48.1267 29.0226 48.3071 29.0226C48.8855 29.0226 49.4583 28.6436 49.6751 28.1179C49.8251 27.7539 50.0575 27.5423 50.4539 27.4098C50.8159 27.289 51.1355 27.0206 51.3439 26.6627C51.6491 26.139 51.7215 26.1042 52.5147 26.1017C53.4679 26.0989 53.7071 25.9903 53.9783 25.437C54.1547 25.0774 54.2807 25.0446 55.7587 24.9692L57.3491 24.8881L57.4927 24.379C57.8283 23.1885 59.4879 23.4451 59.2963 24.6575C59.2279 25.0908 59.2487 25.2821 59.3563 25.2148C59.4463 25.1585 59.5199 24.715 59.5199 24.2299V23.3478L58.7599 23.3523C58.3367 23.3547 57.8095 23.4759 57.5707 23.6263ZM44.9599 24.2935C44.9599 24.3977 44.9059 24.4645 44.8399 24.4423C44.7739 24.42 44.7079 24.4666 44.6935 24.5456C44.6791 24.6251 44.5711 24.7515 44.4535 24.8269C44.3343 24.9035 44.3175 24.9651 44.4151 24.9668C44.6563 24.97 45.1959 24.3438 45.0655 24.2116C45.0075 24.1528 44.9599 24.1897 44.9599 24.2935ZM44.9599 26.0965C44.9599 26.6072 44.8743 26.7969 44.5387 27.0288C44.3067 27.1893 43.8631 27.5938 43.5523 27.9282C43.2415 28.2626 42.8927 28.5362 42.7775 28.5362C42.6619 28.5362 42.4447 28.7369 42.2947 28.9821C41.9215 29.593 41.6047 29.8333 41.1731 29.8333C40.9651 29.8333 40.7003 29.9987 40.5591 30.2168C40.2803 30.6485 38.6531 30.9655 38.3407 30.6489C38.2499 30.5569 38.1003 30.4831 38.0079 30.4843C37.9155 30.4855 37.9479 30.5577 38.0799 30.644C38.2851 30.7782 38.2791 30.8017 38.0399 30.8037C37.8859 30.8049 37.7599 30.8836 37.7599 30.978C37.7599 31.0725 37.8223 31.1106 37.8983 31.0627C37.9747 31.0149 38.0119 31.1933 37.9815 31.4588C37.9475 31.7563 38.0015 31.9484 38.1231 31.9606C38.9747 32.0437 39.1283 32.0023 39.2799 31.6464C39.3699 31.4348 39.6267 31.2322 39.8667 31.1827C40.1011 31.1345 40.4927 30.8844 40.7367 30.6266C40.9803 30.3684 41.2807 30.1576 41.4043 30.1576C41.5279 30.1576 41.9783 29.811 42.4059 29.3874C42.8331 28.9639 43.5147 28.3254 43.9207 27.9687C45.4451 26.6299 45.3891 26.7065 45.3143 26.0588C45.2219 25.257 44.9599 25.285 44.9599 26.0965ZM113.118 26.8314C113.22 26.9558 113.418 27.0134 113.558 26.9586C113.725 26.8934 113.773 26.9238 113.698 27.0474C113.621 27.1743 113.673 27.2006 113.859 27.1281C114.073 27.045 114.112 27.0835 114.03 27.3003C113.958 27.4892 113.984 27.5423 114.109 27.4641C114.233 27.3867 114.26 27.4377 114.192 27.6177C114.136 27.7661 114.16 27.8877 114.245 27.8877C114.802 27.8877 114.162 26.9607 113.466 26.7596C113.017 26.6299 112.962 26.6412 113.118 26.8314ZM50.7111 29.7762L50.1599 30.3672L50.6723 29.9947C50.9539 29.7896 51.2215 29.5236 51.2671 29.4033C51.3903 29.0778 51.3163 29.1276 50.7111 29.7762ZM70.6399 29.3469C70.6943 29.4361 71.0247 29.5091 71.3743 29.5091C71.7919 29.5091 72.0415 29.5926 72.1019 29.7523C72.1527 29.886 72.3123 29.9975 72.4571 30.0003C72.9615 30.0101 72.2231 30.3193 70.8643 30.6675C69.9227 30.9087 69.5187 30.9509 69.3915 30.822C69.2947 30.7239 69.1043 30.646 68.9679 30.6489C68.8027 30.6521 68.8927 30.8126 69.2379 31.1308L69.7555 31.6083L70.2931 31.2873C70.5883 31.1106 71.4651 30.8329 72.2411 30.6704C73.5915 30.3874 73.6367 30.3643 73.2979 30.1236L72.9439 29.8726L73.3655 29.7652C73.5975 29.7065 73.9431 29.7117 74.1335 29.7774C74.4543 29.8876 74.4443 29.9047 73.9999 30.008C73.5391 30.1146 73.5455 30.1207 74.1599 30.1548C74.7263 30.186 74.7539 30.2046 74.3999 30.3197C74.0211 30.4426 74.0271 30.4503 74.5199 30.4657C75.7343 30.5034 74.9783 29.6971 73.6511 29.539L72.7199 29.428L74.0799 29.3368C75.2223 29.2598 75.0479 29.2403 72.9903 29.2152C71.3907 29.1953 70.5755 29.2411 70.6399 29.3469ZM79.1483 29.3688C80.2267 29.4523 81.0839 29.4474 81.3083 29.3562C81.5631 29.2529 81.0023 29.2091 79.5199 29.218L77.3599 29.2306L79.1483 29.3688ZM78.7743 29.8122C78.3119 30.2034 78.4711 30.3724 79.5199 30.6043C80.0039 30.7109 80.8747 30.9338 81.4551 31.0992C82.0359 31.2646 82.6119 31.3797 82.7351 31.355C82.8587 31.3299 83.1759 31.2666 83.4399 31.2143C84.1831 31.0664 84.9471 30.7964 85.0363 30.6497C85.0811 30.5767 84.8279 30.5828 84.4739 30.6635C82.5815 31.0944 78.3535 30.3931 79.8795 29.9014C80.2283 29.7891 80.2295 29.7814 79.9199 29.6586C79.4191 29.46 79.1475 29.4965 78.7743 29.8122ZM48.1567 30.7291C47.8475 31.1065 48.0683 31.1779 48.3991 30.807C48.5587 30.6282 48.6151 30.4819 48.5243 30.4819C48.4335 30.4819 48.2679 30.5929 48.1567 30.7291ZM66.6727 31.1053C66.8347 32.3278 63.7983 33.0854 63.4315 31.914C63.3603 31.6874 63.2859 31.6375 63.2083 31.7652C63.1223 31.9059 63.0391 31.8921 62.8919 31.7125C62.6819 31.4559 62.7807 31.1304 63.0691 31.1304C63.1703 31.1304 63.1503 31.2451 63.0195 31.4142C62.8203 31.6712 62.8263 31.6772 63.0799 31.4754C63.2339 31.353 63.3543 31.0976 63.3471 30.9079C63.3403 30.7182 63.2995 30.6501 63.2571 30.7567C63.2143 30.8629 63.0875 30.9144 62.9751 30.8706C62.7215 30.7721 62.3355 31.2176 62.4755 31.4474C62.5323 31.5406 62.5091 31.6168 62.4235 31.6168C62.3379 31.6168 62.2923 31.7445 62.3219 31.9006C62.3511 32.0566 62.3811 32.2435 62.3875 32.3157C62.3943 32.3878 62.4715 32.4016 62.5595 32.3469C62.6643 32.2812 62.6671 32.3846 62.5683 32.6488C62.3387 33.2597 63.2947 33.5937 63.7027 33.0453C63.9263 32.7449 64.1843 32.6643 65.1851 32.5812C66.6967 32.4559 67.0771 32.1742 67.0075 31.2326C66.9815 30.8783 66.8763 30.5601 66.7739 30.5261C66.6447 30.4831 66.6139 30.6598 66.6727 31.1053ZM85.3867 30.5901C85.0715 30.9091 85.3303 32.0323 85.7743 32.2731C87.0079 32.9423 89.6171 32.5532 88.8835 31.8098C88.8375 31.7632 88.7999 31.8138 88.7999 31.9225C88.7999 32.3866 87.7123 32.6221 86.8043 32.3546C85.8991 32.0883 85.7599 31.9123 85.7599 31.036C85.7599 30.5115 85.6243 30.3493 85.3867 30.5901ZM106.184 30.7295C106.235 30.8657 106.431 31.0583 106.619 31.1568C106.933 31.3222 106.929 31.3023 106.572 30.9091C106.126 30.4178 106.053 30.3838 106.184 30.7295ZM89.1459 31.0173C89.0099 31.1835 89.0907 31.2322 89.5263 31.2447C90.1019 31.261 90.2659 31.0753 89.8267 30.9047C89.4587 30.7616 89.3395 30.781 89.1459 31.0173ZM90.8007 31.1312C90.9607 31.3104 91.1259 31.4215 91.1683 31.3785C91.2759 31.2695 90.8767 30.8062 90.6755 30.8062C90.5847 30.8062 90.6411 30.9525 90.8007 31.1312ZM89.3319 31.3992C89.3899 31.4579 89.3623 31.5974 89.2707 31.7093C89.1555 31.8499 89.1559 31.9448 89.2727 32.0177C89.3655 32.0757 89.3959 32.3051 89.3411 32.5277C89.1275 33.3894 90.0647 33.9435 90.8951 33.4466C91.4311 33.1255 91.6023 31.9411 91.1127 31.9411C90.9771 31.9411 90.8775 32.0323 90.8919 32.1438C90.9643 32.7105 90.8467 33.0826 90.5427 33.2475C90.0875 33.4944 89.9523 33.3047 89.9019 32.3465C89.8783 31.9006 89.7827 31.4823 89.6895 31.4166C89.4783 31.2682 89.1887 31.2541 89.3319 31.3992ZM36.1599 31.9087C35.6003 31.9975 35.3599 32.2382 35.3599 32.7105C35.3599 33.055 35.3963 33.085 35.6035 32.9107C35.8043 32.7421 35.8315 32.7478 35.7579 32.9419C35.7083 33.0732 35.8295 33.3169 36.0315 33.4916C36.3175 33.7392 36.3483 33.7457 36.1775 33.522C36.0583 33.3659 36.0339 33.2382 36.1231 33.2382C36.6011 33.2382 36.5827 34.3416 36.1019 34.5268C35.7039 34.68 35.5199 34.9974 35.5199 35.53C35.5199 35.738 35.3551 35.9074 35.0479 36.016C34.7231 36.1308 34.5215 36.3509 34.4003 36.723C34.1511 37.4883 33.3855 37.7051 32.6859 37.209C32.4319 37.0282 32.3107 37.0136 32.2255 37.153C32.1491 37.2783 32.1807 37.2977 32.3199 37.2106C32.4675 37.1182 32.4911 37.1421 32.3999 37.2917C32.3087 37.4412 32.3323 37.4651 32.4799 37.3727C32.6215 37.284 32.6507 37.3046 32.5703 37.4368C32.4855 37.5758 32.3927 37.5823 32.2467 37.4595C32.0223 37.2706 31.5891 37.6317 31.7927 37.8381C32.5995 38.656 31.9799 40.3723 30.8779 40.3723C30.5375 40.3723 30.2143 40.4452 30.1599 40.5344C30.0999 40.6329 30.3351 40.6966 30.7607 40.6966C31.6195 40.6966 32.1995 40.1583 32.7039 38.894C33.0531 38.0193 33.2199 37.8616 33.9643 37.7023C34.2639 37.6382 34.4931 37.4287 34.6671 37.0594C34.8087 36.7578 35.0935 36.4198 35.2999 36.3079C35.5059 36.1964 35.7203 35.9589 35.7763 35.7805C35.8319 35.6026 36.1191 35.2309 36.4139 34.9553C36.9531 34.4514 37.2771 33.3558 36.9475 33.1494C36.8663 33.0984 36.7999 32.9841 36.7999 32.8949C36.7999 32.8057 36.8671 32.7745 36.9487 32.826C37.0307 32.8771 37.1431 32.845 37.1983 32.7546C37.2535 32.6638 37.2227 32.5897 37.1295 32.5897C37.0363 32.5897 36.9599 32.4891 36.9599 32.3663C36.9599 32.0352 36.6127 31.8365 36.1599 31.9087ZM61.8151 31.9817C61.7471 32.0931 61.7123 32.3825 61.7375 32.6253C61.8215 33.4372 60.2347 34.0274 59.6263 33.4109C59.4107 33.1924 59.1483 33.1843 59.2799 33.4004C59.3343 33.4895 59.2751 33.5625 59.1479 33.5625C58.8639 33.5625 58.6839 34.1665 58.9367 34.2714C59.0375 34.3132 58.9687 34.3533 58.7839 34.3602C58.5987 34.3675 58.1303 34.5442 57.7423 34.753C57.3547 34.9621 56.7679 35.1843 56.4387 35.2467C56.1091 35.3095 55.8399 35.4169 55.8399 35.4854C55.8399 35.5539 55.5879 35.7319 55.2799 35.8807C54.9719 36.0298 54.7111 36.2621 54.6999 36.3975C54.6887 36.5324 54.6699 36.7343 54.6571 36.8458C54.6427 36.9747 54.3891 37.0436 53.9595 37.0347C53.2183 37.0193 53.2503 37.3298 54.0099 37.5227C54.5675 37.6646 55.0099 37.3735 55.1663 36.7615C55.2447 36.4558 55.4619 36.1583 55.6899 36.0444C57.3139 35.2349 58.3543 34.8596 58.9743 34.8596C59.5419 34.8596 59.7215 34.7842 59.9335 34.4559C60.0803 34.2289 60.4563 33.9804 60.7919 33.8888C61.5719 33.676 61.8883 33.2998 61.9923 32.4624C62.0795 31.7595 62.0311 31.6278 61.8151 31.9817ZM93.9135 32.0141C94.0115 32.1341 94.1231 32.3955 94.1611 32.5949C94.1987 32.7948 94.2795 33.0027 94.3403 33.0574C94.4011 33.1122 94.4027 33.0214 94.3435 32.8552C94.2619 32.6257 94.2963 32.5767 94.4863 32.6509C94.6503 32.7145 94.6971 32.6833 94.6219 32.5601C94.5455 32.4348 94.5959 32.4069 94.7735 32.4758C95.2959 32.6793 95.0283 32.4296 94.3875 32.1154C93.9919 31.9221 93.8051 31.8819 93.9135 32.0141ZM91.7411 32.5897C91.7591 33.2816 91.7951 33.3363 92.4407 33.6509C92.8151 33.8329 93.3191 34.2127 93.5607 34.4948C93.9091 34.9018 94.1963 35.0424 94.9495 35.177C95.5159 35.2779 96.0463 35.4859 96.2627 35.6922C96.5687 35.9836 96.7475 36.0221 97.3931 35.9378C98.3099 35.8174 98.4487 35.8924 98.7743 36.6849C98.9255 37.0533 99.1867 37.3561 99.4351 37.4518C99.6607 37.5389 99.9159 37.7975 100.002 38.0261C100.093 38.2681 100.391 38.5409 100.715 38.6783C101.028 38.8105 101.381 39.1279 101.52 39.3999C101.657 39.6674 101.861 39.8859 101.975 39.8859C102.088 39.8859 102.338 40.1692 102.53 40.5154C103.056 41.4639 104.903 42.1161 105.461 41.5506C105.589 41.4209 105.44 41.3723 104.913 41.3723C103.939 41.3723 102.4 40.0821 102.4 39.2661C102.4 39.2016 102.154 39.0148 101.853 38.8506C101.145 38.4639 99.6671 36.997 99.5931 36.6066C99.5183 36.2126 99.6739 35.8093 99.8567 35.924C100.168 36.119 99.9583 35.7189 99.4331 35.1162C99.1291 34.7672 98.8799 34.5742 98.8799 34.6877C98.8799 34.8012 98.7807 34.8555 98.6595 34.8085C98.5383 34.7615 98.3623 34.8004 98.2683 34.8957C98.1475 35.0181 98.1239 34.967 98.1875 34.721C98.2395 34.5187 98.2023 34.3732 98.0987 34.3732C98.0003 34.3732 97.9199 34.5045 97.9199 34.665C97.9199 35.2872 97.1435 35.5414 96.2875 35.1989C96.0851 35.1182 95.5107 34.9682 95.0103 34.8653C94.2307 34.7056 94.0543 34.5994 93.7759 34.1207C93.5707 33.7684 93.3275 33.5625 93.1175 33.5625C92.4083 33.5625 91.8631 33.113 91.7911 32.4689C91.7323 31.9456 91.7251 31.9626 91.7411 32.5897ZM58.9287 32.4681C58.6127 32.8203 58.4719 33.4745 58.7491 33.301C58.8239 33.254 58.8439 33.1482 58.7935 33.0655C58.7431 32.9829 58.8963 32.7328 59.1343 32.5094C59.3719 32.2861 59.4967 32.1033 59.4111 32.1033C59.3255 32.1033 59.1083 32.2674 58.9287 32.4681ZM65.3775 36.3509C65.0587 36.6342 64.9395 36.9196 64.8835 37.5349C64.8211 38.2223 64.8291 38.2552 64.9375 37.7513C65.3243 35.952 67.1871 36.0302 68.0587 37.8831C68.4079 38.6248 68.6987 38.504 68.8063 37.5726C69.0303 35.6297 71.4843 35.6156 71.7715 37.5555C71.8295 37.9475 71.9271 38.3002 71.9887 38.3383C72.1167 38.4189 71.9415 37.0176 71.7739 36.6245C71.6087 36.237 70.9639 35.9946 70.0971 35.9946C69.1231 35.9946 68.7811 36.3452 68.6763 37.4522C68.5907 38.3545 68.3983 38.5097 68.2447 37.8008C68.1895 37.5458 67.9499 37.1591 67.7123 36.9414C66.6495 35.9686 65.9939 35.8028 65.3775 36.3509ZM73.1283 36.4725C72.8343 36.7704 72.3835 38.059 72.5239 38.2008C72.5595 38.2369 72.6715 37.986 72.7727 37.6435C73.1727 36.2917 74.7263 35.9982 75.4951 37.1295L75.8807 37.697L75.7679 37.2106C75.5195 36.1405 73.9023 35.6881 73.1283 36.4725ZM31.7199 37.1701C31.7419 37.2815 31.6699 37.3545 31.5599 37.3322C31.4499 37.3099 31.3599 37.3646 31.3599 37.4538C31.3599 37.6735 31.5743 37.6581 31.8079 37.4214C32.0415 37.1846 32.0567 36.9674 31.8399 36.9674C31.7519 36.9674 31.6979 37.0586 31.7199 37.1701ZM123.04 37.2106C123.04 37.3444 123.157 37.4538 123.299 37.4538C123.512 37.4538 123.523 37.4096 123.36 37.2106C123.25 37.0768 123.133 36.9674 123.1 36.9674C123.067 36.9674 123.04 37.0768 123.04 37.2106ZM52.4799 37.774C52.4799 38.532 52.0959 39.2373 51.6831 39.2373C51.5291 39.2373 51.2199 39.3832 50.9963 39.5616C50.7723 39.7399 50.3687 39.8859 50.0991 39.8859C49.6815 39.8859 49.5895 39.9629 49.4755 40.4075C49.3827 40.7703 49.2231 40.9576 48.9511 41.0224C48.6859 41.0853 48.5455 41.2438 48.5151 41.5137C48.3731 42.7788 48.0819 43.1469 47.3187 43.0253C46.9055 42.9596 46.7567 43.0147 46.5879 43.2956C46.4715 43.4902 46.4499 43.6029 46.5399 43.5465C46.7507 43.4144 47.0399 43.9608 47.0399 44.491C47.0399 44.7654 46.9059 44.9729 46.6363 45.116C46.4143 45.234 46.1083 45.583 45.9563 45.8914C45.6239 46.5663 45.0167 46.7029 44.2375 46.2777C43.4247 45.8339 43.2363 46.1286 43.4291 47.542C43.6043 48.8257 43.4939 49.1338 42.7835 49.3494C41.9079 49.6149 41.8419 49.6956 41.7915 50.563C41.7435 51.3916 41.7391 51.3976 41.2087 51.3976C40.4687 51.3976 40.2727 52.0105 40.6635 53.1045C40.9551 53.9225 40.6803 54.5577 39.4923 55.8106C39.0331 56.2946 38.0211 56.4494 37.8659 56.0591C37.8215 55.9476 37.7795 56.1211 37.7727 56.4446C37.7607 57.0007 37.7859 57.0307 38.2363 56.9918C39.0331 56.9229 39.2551 57.2172 39.2203 58.297C39.1835 59.432 39.1947 59.4174 38.3715 59.3841L37.7171 59.3578L37.8143 60.19C37.8679 60.6476 38.0731 61.4777 38.2703 62.0351C38.7987 63.528 38.2655 66.3143 37.4519 66.3143C36.8863 66.3143 36.5863 67.0241 36.5727 68.3953L36.5599 69.6381L36.0011 69.692C35.4671 69.7431 35.2079 69.9361 35.2023 70.2867C35.1983 70.5384 36.8419 70.3702 37.1567 70.0864C37.3091 69.949 37.4755 69.5733 37.5267 69.251C37.5779 68.9288 37.7595 68.3653 37.9299 67.9989C38.1003 67.6325 38.2423 67.2312 38.2451 67.1072C38.2479 66.9831 38.3559 66.7403 38.4851 66.5672C38.8067 66.136 38.8167 62.5341 38.4979 61.9147C38.2363 61.4064 38.3147 61.256 38.9863 60.9812C39.8723 60.618 40.3011 57.8912 39.6343 56.8596L39.3483 56.4174L40.0363 56.1187C41.1907 55.6173 41.5999 54.4333 41.0663 53.139C40.7947 52.4807 40.9875 52.2083 41.7247 52.2083C42.4339 52.2083 42.7303 51.274 42.3871 50.1176C42.3443 49.9733 42.5075 49.8399 42.8391 49.7483C43.4139 49.5898 43.7535 49.1472 43.8931 48.3738C44.0163 47.6924 44.6407 47.0386 45.3595 46.8371C45.7951 46.7155 46.0007 46.5392 46.1607 46.1509C46.2795 45.8635 46.5583 45.5295 46.7803 45.4091C47.1607 45.2028 47.5899 44.3884 47.4131 44.2093C47.3687 44.1643 47.5283 43.9973 47.7679 43.838C48.2023 43.5494 48.6131 42.7743 48.7423 41.9981C48.7799 41.7727 48.9687 41.4789 49.1619 41.3451C49.3551 41.2113 49.6255 40.9892 49.7631 40.8518C49.9011 40.714 50.2475 40.5036 50.5331 40.3836C52.1387 39.7095 53.4579 37.7229 52.6399 37.2106C52.5431 37.1502 52.4799 37.3731 52.4799 37.774ZM61.7323 37.3261C61.2455 37.4927 60.9599 38.1449 60.9599 39.0898C60.9599 39.915 60.7647 39.9868 60.1083 39.4031C59.1711 38.5693 57.9627 38.7335 57.4159 39.7695C57.1871 40.202 57.1055 42.3459 57.3227 42.2101C57.4079 42.1566 57.4359 41.8048 57.3847 41.4266C57.1403 39.6196 58.2595 38.8976 60.0143 39.7306C60.9539 40.1765 60.9879 40.1514 61.1343 38.8907C61.3031 37.4392 61.9883 37.0027 62.9747 37.7173C63.8319 38.3383 64.5483 38.727 64.6819 38.6435C64.7575 38.5961 64.6055 38.4368 64.3443 38.2892C64.0831 38.1421 63.6915 37.8912 63.4743 37.7319C62.9063 37.316 62.2251 37.1571 61.7323 37.3261ZM76.6867 37.8591C76.1635 38.5235 76.0467 38.5559 75.9527 38.0618C75.8863 37.7124 75.8827 37.7116 75.8615 38.042C75.8163 38.7627 76.2355 38.7894 76.7819 38.1007C77.7575 36.8705 79.5199 37.2957 79.5199 38.7614C79.5199 40.0768 79.8655 40.3001 80.7219 39.5381C81.9023 38.4878 83.8343 40.6666 82.7771 41.8558C82.2527 42.4456 83.7627 42.4359 84.3063 41.8461C85.3051 40.7626 85.9607 41.3731 86.0783 43.4959C86.1723 45.1878 86.2863 45.3082 87.1059 44.5785C88.1155 43.6803 89.2103 44.9721 88.8035 46.5809C88.5355 47.6405 88.7259 47.8391 89.8399 47.6604L90.6399 47.5319L89.7599 47.5594C88.7431 47.5919 88.5175 47.2372 89.1131 46.5416C89.5211 46.0645 89.5199 45.9778 89.0939 45.2555C88.2431 43.8124 87.5051 43.536 86.8799 44.4257C86.3615 45.1634 86.2835 45.0418 86.2119 43.3811C86.1167 41.1773 85.2655 40.47 84.1559 41.6734C83.6391 42.2344 83.6027 42.2052 83.4451 41.1055C83.1907 39.3318 81.4303 38.2617 80.5303 39.3338C79.8975 40.0881 79.6863 39.9333 79.6823 38.7104C79.6775 37.1765 77.6727 36.607 76.6867 37.8591ZM38.4735 40.3832C38.4155 40.4781 38.4063 40.5948 38.4531 40.6426C38.5679 40.7586 38.8799 40.5539 38.8799 40.3625C38.8799 40.1554 38.6035 40.1692 38.4735 40.3832ZM30.6307 41.219C31.1619 41.9872 30.6339 43.1286 29.7479 43.1286C29.3739 43.1286 29.2487 43.3491 29.1607 44.1651C29.0775 44.9352 29.0031 45.0447 28.5143 45.1205C27.9271 45.2113 27.7899 45.4865 27.8203 46.5112C27.8471 47.4168 27.8183 47.4998 27.3643 47.8274C27.0927 48.0236 26.8799 48.3243 26.8799 48.512C26.8799 49.2213 26.4951 50.1374 26.1255 50.3081C25.9203 50.4029 25.7131 50.6684 25.6655 50.8987C25.6179 51.1285 25.4271 51.6631 25.2419 52.0867C24.9379 52.7819 24.7923 52.9282 24.4511 52.88C24.3915 52.8715 24.3791 53.4523 24.4239 54.171C24.5051 55.4742 23.9627 56.9444 23.5059 56.6582C23.1879 56.4592 22.7199 57.2423 22.7011 58.0047C22.6911 58.4283 22.6667 59.0988 22.6471 59.4944C22.6275 59.8904 22.6991 60.5106 22.8059 60.8726C23.0791 61.7971 22.7691 62.4218 22.0359 62.4254C21.2103 62.4295 21.0431 62.6131 21.3387 63.1923C21.9915 64.4716 21.4899 67.5782 20.6355 67.5474C20.3743 67.538 20.1595 67.4574 20.1579 67.3682C20.1547 67.1975 19.8467 67.6167 19.8423 67.7971C19.8355 68.0844 21.0967 68.0107 21.2799 67.7131C21.8559 66.7784 22.1107 63.7777 21.6743 63.0626C21.6231 62.9783 21.7959 62.9094 22.0587 62.9094C22.9963 62.9094 23.3799 61.9897 23.0215 60.6014C22.7475 59.5398 23.0127 57.6878 23.4675 57.4851C23.9163 57.2857 24.4607 56.246 24.6523 55.2237C24.7347 54.7814 24.9023 54.3052 25.0239 54.1653C25.1455 54.0255 25.2943 53.5824 25.3543 53.1811C25.5243 52.047 25.9323 51.0361 26.4239 50.5306C26.7423 50.2031 26.9035 49.8354 26.9783 49.2655C27.0643 48.6068 27.1803 48.3871 27.6215 48.0458C28.1247 47.6571 28.1599 47.5679 28.1599 46.6794C28.1599 45.8083 28.1923 45.7208 28.5483 45.6304C29.1495 45.4772 29.4147 45.0629 29.4695 44.191C29.5167 43.4424 29.5531 43.3824 30.0327 43.2571C31.0303 42.9965 31.5483 40.8587 30.6139 40.8587C30.4163 40.8587 30.4187 40.9122 30.6307 41.219ZM54.8291 41.4744C54.6155 41.7136 54.3183 42.5121 53.9951 43.7147C53.9683 43.8141 53.5735 43.9316 53.1175 43.9762C51.4255 44.1408 50.4271 45.8193 51.4435 46.7905C52.1631 47.4784 52.0755 47.6348 51.0047 47.5736L50.1599 47.5254L50.9599 47.6571C52.1779 47.8578 52.5423 47.255 51.5863 46.6207C50.9435 46.1934 51.1727 45.4071 52.1543 44.673C52.7787 44.206 53.3067 44.1489 53.6071 44.5157C53.9967 44.9912 54.3495 45.0893 54.5831 44.7873C54.7743 44.54 54.7699 44.5307 54.5451 44.7082C54.2355 44.9527 54.0799 44.8221 54.0799 44.3175C54.0799 43.8769 54.3471 43.8068 54.4395 44.223C54.4739 44.3791 54.5063 44.0074 54.5111 43.397C54.5259 41.5072 55.4835 40.7663 56.4955 41.8615L56.9923 42.399L56.7423 41.8915C56.3647 41.127 55.3391 40.9033 54.8291 41.4744ZM46.2763 42.4955C45.8627 42.6536 45.5475 43.3122 45.8059 43.4784C46.0343 43.626 46.5035 43.3021 46.7023 42.8595C46.9003 42.4193 46.7683 42.307 46.2763 42.4955ZM105.982 42.6827C105.999 43.039 106.72 43.2875 106.72 42.9373C106.72 42.8562 106.594 42.8116 106.44 42.8376C106.249 42.8704 106.175 42.795 106.207 42.6017C106.233 42.4456 106.189 42.3179 106.109 42.3179C106.029 42.3179 105.972 42.4821 105.982 42.6827ZM105.547 43.0747C105.125 43.5019 105.455 44.8793 106.08 45.2984C106.791 45.7751 106.827 45.9089 106.477 46.7589C106.203 47.424 106.312 47.7548 107.235 49.0669C107.695 49.7207 107.7 49.7511 107.474 50.4293C107.212 51.2164 107.262 51.5821 107.688 51.9724C108.075 52.3271 109.44 52.4487 109.44 52.1285C109.44 51.9598 109.278 51.9217 108.805 51.9797C107.729 52.111 107.262 51.4005 107.77 50.4049C108.003 49.9481 107.998 49.8711 107.69 49.2732C107.508 48.9202 107.36 48.5355 107.36 48.4184C107.36 48.3012 107.216 48.073 107.04 47.9117C106.428 47.3507 106.704 46.2684 107.423 46.4079C107.707 46.463 107.84 46.4184 107.84 46.268C107.84 46.1464 107.912 46.0471 108 46.0471C108.088 46.0471 108.16 45.9377 108.16 45.8039C108.16 45.4991 107.903 45.4849 107.79 45.784C107.48 46.6012 106.177 45.1865 106.166 44.0204C106.161 43.5165 106.1 43.3763 105.893 43.3921C105.727 43.4047 105.658 43.3276 105.709 43.1894C105.8 42.9515 105.722 42.8968 105.547 43.0747ZM33.4783 44.204C33.2371 44.5923 32.8815 44.9543 32.6883 45.0078C32.2663 45.1245 31.9227 45.6195 31.7679 46.3345C31.7051 46.6239 31.5159 46.9352 31.3467 47.0268C31.0975 47.1622 31.0399 47.373 31.0399 48.152C31.0399 49.0924 30.6095 49.9384 30.1311 49.9384C29.7479 49.9384 29.3047 51.1447 29.4315 51.8419C29.5639 52.5719 29.4575 52.7734 28.8811 52.882C28.3779 52.9765 28.0979 53.7381 28.2879 54.4957C28.4447 55.1219 28.4359 55.1418 27.7435 55.7166C27.1951 56.1718 27.0399 56.4085 27.0399 56.7895C27.0399 57.0583 26.9559 57.7413 26.8527 58.3071C26.7083 59.1032 26.7095 59.4336 26.8587 59.7656C27.1171 60.3399 27.2319 60.1831 27.0427 59.5143C26.9255 59.0996 26.9623 58.7725 27.2055 58.0716C27.3783 57.5727 27.5199 57.0615 27.5199 56.9355C27.5199 56.8094 27.7791 56.4158 28.0959 56.0603C28.6459 55.4434 28.6675 55.3757 28.5679 54.5674C28.4511 53.6209 28.6495 53.3028 29.3559 53.3028C29.8679 53.3028 29.9807 52.9213 29.7471 51.9809C29.5351 51.1269 29.8295 50.4248 30.3995 50.4248C30.7559 50.4248 31.1191 49.8099 31.2819 48.9307C31.3423 48.6056 31.4915 48.3004 31.6139 48.253C31.7359 48.2056 31.8191 48.2185 31.7979 48.2822C31.7771 48.3458 31.8319 48.4216 31.9199 48.4504C32.0079 48.4788 32.1903 48.6036 32.3255 48.7276C32.5387 48.923 32.5715 48.9104 32.5715 48.6348C32.5715 48.3332 32.4319 48.24 32.0843 48.3097C31.9987 48.3272 32.0443 48.208 32.1851 48.0454C32.3587 47.8452 32.3995 47.6446 32.3119 47.4253C31.9367 46.4861 32.2183 45.3985 32.8371 45.3985C33.0015 45.3985 33.2723 45.1549 33.4527 44.8457C33.8151 44.2235 34.0195 44.1055 34.6215 44.1724C35.3095 44.249 35.0719 43.7143 34.3583 43.5802C33.9739 43.508 33.8595 43.5895 33.4783 44.204ZM119.983 43.7918C119.799 43.9539 119.686 44.1809 119.731 44.2964C119.795 44.4565 119.817 44.4586 119.827 44.3041C119.861 43.7707 120.947 44.0869 121.36 44.75C121.582 45.1067 121.86 45.3985 121.977 45.3985C122.358 45.3985 122.72 45.9774 122.72 46.5866C122.72 46.9141 122.656 47.1821 122.579 47.1821C122.339 47.1821 122.299 47.8825 122.506 48.4792C122.614 48.7913 122.706 48.9469 122.711 48.8249C122.717 48.6867 122.837 48.6344 123.032 48.6863C123.204 48.7317 123.369 48.6932 123.4 48.6008C123.43 48.5083 123.586 48.8715 123.747 49.4078C123.992 50.229 124.124 50.4244 124.579 50.6445L125.12 50.906V52.1248C125.12 53.2796 125.139 53.3433 125.48 53.3457C126.142 53.3502 126.301 53.582 126.26 54.4803C126.234 55.0688 126.321 55.5086 126.551 55.9574C126.732 56.3084 126.88 56.6995 126.88 56.826C126.88 56.9525 127.069 57.2601 127.301 57.5098C128.126 58.3996 128.272 59.1434 127.809 60.1C127.537 60.663 127.767 61.258 128.28 61.318C128.993 61.4011 128.887 62.0051 128.16 62.0059C127.567 62.0063 127.247 62.2499 127.568 62.4566C128.424 63.0079 129.579 62.0173 129.044 61.1908C128.899 60.967 128.66 60.7445 128.511 60.6962C128.362 60.648 128.146 60.5795 128.03 60.5442C127.864 60.4932 127.872 60.4048 128.07 60.1182C128.604 59.3452 127.946 56.8447 126.939 55.8248C126.602 55.4835 126.415 55.1596 126.469 55.0149C126.898 53.8824 126.695 53.2801 125.719 52.7847C125.403 52.6246 125.366 52.501 125.415 51.7466C125.469 50.9254 125.444 50.8658 124.823 50.285C124.057 49.5683 123.84 49.0604 123.84 47.9903C123.84 47.4038 123.767 47.1573 123.56 47.041C123.406 46.9547 123.169 46.568 123.035 46.1817C122.88 45.739 122.606 45.36 122.292 45.1553C122.018 44.977 121.629 44.5635 121.427 44.236C120.997 43.5376 120.46 43.3726 119.983 43.7918ZM26.3999 44.9932C26.2367 45.1922 26.2479 45.2364 26.4603 45.2364C26.6031 45.2364 26.7199 45.127 26.7199 44.9932C26.7199 44.8594 26.6927 44.75 26.6595 44.75C26.6263 44.75 26.5095 44.8594 26.3999 44.9932ZM127.944 44.9977C128.061 45.3082 128.64 45.6462 128.64 45.4042C128.64 45.3118 128.532 45.2364 128.4 45.2364C128.268 45.2364 128.16 45.127 128.16 44.9932C128.16 44.8594 128.09 44.75 128.005 44.75C127.919 44.75 127.892 44.8615 127.944 44.9977ZM49.5895 48.0126C49.4727 48.2335 49.4403 48.8278 49.4987 49.6745C49.6143 51.3494 49.6227 51.3976 49.8051 51.3976C49.8907 51.3976 49.9063 51.2379 49.8407 51.0328C49.5523 50.1309 49.5563 48.3105 49.8467 47.985C50.0023 47.8107 50.0487 47.6685 49.9503 47.6685C49.8519 47.6685 49.6895 47.8233 49.5895 48.0126ZM91.2479 49.1277C91.2479 49.6182 91.2779 49.8188 91.3147 49.5736C91.3511 49.3284 91.3511 48.9271 91.3147 48.6818C91.2779 48.4366 91.2479 48.6372 91.2479 49.1277ZM24.5679 49.6052C24.2979 49.9076 24.2987 49.9198 24.5911 49.8975C24.7607 49.8845 24.9063 49.7442 24.9183 49.5821C24.9455 49.2149 24.9143 49.2169 24.5679 49.6052ZM129.961 49.5821C129.973 49.7442 130.119 49.8845 130.289 49.8975C130.581 49.9198 130.582 49.9076 130.312 49.6052C129.965 49.2169 129.934 49.2149 129.961 49.5821ZM91.0399 50.2915C91.0399 50.4264 90.8975 50.6672 90.7235 50.8265C90.5499 50.9862 90.4459 51.18 90.4931 51.257C90.5979 51.4288 91.0503 51.4455 91.0135 51.276C90.9991 51.2092 91.0439 50.9505 91.1127 50.7009C91.1819 50.4516 91.1935 50.2023 91.1391 50.1471C91.0847 50.0916 91.0399 50.1569 91.0399 50.2915ZM47.9495 51.5626C46.8527 51.8962 46.7367 52.6692 47.5999 53.8994C48.2971 54.8933 48.2979 55.064 47.6055 55.357C47.0247 55.6031 46.9711 55.7227 46.8115 57.1268C46.7303 57.8386 46.7647 57.95 47.1831 58.3428C48.0167 59.1243 48.1599 59.2183 48.1599 58.9841C48.1599 58.8689 47.9079 58.571 47.5999 58.3221C46.6383 57.5443 46.8227 55.8451 47.9195 55.3806L48.4679 55.1483L48.2187 54.4081C48.0819 54.0008 47.9063 53.6676 47.8291 53.6676C47.6539 53.6676 47.1999 52.7985 47.1999 52.4633C47.1999 52.1029 47.8671 51.717 48.7499 51.5667C49.4059 51.4552 49.4371 51.4349 48.9599 51.4305C48.6519 51.4276 48.1971 51.4872 47.9495 51.5626ZM91.7599 51.548C93.1579 51.8901 93.3895 52.2809 92.8423 53.3741C91.9951 55.0664 91.9419 55.2893 92.3867 55.2885C92.4819 55.2885 92.5803 54.9853 92.6055 54.6144C92.6375 54.1422 92.7935 53.7762 93.1255 53.3932C93.9583 52.4321 93.1395 51.3441 91.6367 51.4143C91.3587 51.4272 91.3859 51.4568 91.7599 51.548ZM109.048 53.8702C108.729 56.2691 108.821 57.1012 109.485 57.8406C109.665 58.04 109.837 58.4372 109.868 58.7234C109.972 59.6813 110.304 59.9909 111.23 59.9909C112.164 59.9909 112.195 59.873 111.292 59.7558C110.249 59.6204 109.835 58.6051 110.513 57.8458C110.903 57.4097 110.6 56.978 109.943 57.0319C109.19 57.0935 109.056 56.6825 109.184 54.6911C109.298 52.893 109.231 52.4896 109.048 53.8702ZM92.9599 55.4041C94.0479 55.8094 94.0487 57.2411 92.9615 58.3675C92.4299 58.9192 92.5059 59.3424 93.1371 59.3424C93.3007 59.3424 93.6507 59.543 93.9147 59.7883L94.3947 60.2341L94.1327 61.0448C93.8055 62.0562 93.6767 62.224 93.0127 62.5053C92.3551 62.7838 92.3403 62.9901 92.9551 63.3123C94.3371 64.0363 94.0311 66.0893 92.4815 66.4918C91.6255 66.714 91.4831 66.8777 92.0015 67.0443C93.0327 67.3759 93.0887 69.6215 92.0799 70.1805C91.8171 70.3264 91.8075 70.3588 92.0275 70.3629C93.2567 70.3856 93.7047 68.474 92.7179 67.4189C92.1123 66.7711 92.1107 66.7756 93.0099 66.4817C94.3255 66.052 94.2183 63.0716 92.8871 63.0716C92.4543 63.0716 92.6215 62.7773 93.1167 62.667C93.6439 62.5495 94.5111 61.4141 94.6635 60.6407C94.7731 60.087 94.1051 59.3922 93.3199 59.2431C92.6023 59.1065 92.5535 58.9403 93.1123 58.537C94.2235 57.7356 94.1367 55.2496 92.9999 55.3019C92.7783 55.312 92.7699 55.3331 92.9599 55.4041ZM46.4551 59.4153C45.1287 60.0003 45.6923 62.1891 47.2807 62.6196C48.1103 62.8446 48.1899 63.0034 47.5447 63.1469C45.8447 63.5255 45.9119 66.0626 47.6335 66.502C48.4639 66.714 48.4715 66.7675 47.7599 67.4055C46.5659 68.4768 47.0271 70.0577 48.6235 70.3645C49.7155 70.5745 49.7779 70.6227 49.5939 71.1136C49.2607 72.0017 49.4871 73.8205 49.9699 74.1318C50.2707 74.3255 51.4363 74.2789 51.6479 74.0645C51.7971 73.9133 51.8399 73.9465 51.8399 74.2141C51.8399 74.4034 51.6239 74.7771 51.3599 75.0446C50.5679 75.8472 50.9523 76.7462 52.1675 76.9335L52.7199 77.0186L52.2399 76.8342C51.0579 76.3802 50.8639 75.9327 51.5199 75.1755C51.8871 74.7519 51.9999 74.4646 51.9999 73.9538C51.9999 73.1902 51.8311 73.1091 51.4547 73.6916C51.1935 74.0957 50.5343 74.2368 50.1439 73.9729C49.5799 73.591 49.3871 71.7208 49.8435 71.0601C50.1323 70.6426 49.9923 70.5283 48.7999 70.2072C47.3323 69.812 46.9923 68.5178 48.0763 67.4529C48.6883 66.8518 48.6379 66.5916 47.8735 66.3994C46.4199 66.0338 46.2863 63.7501 47.6895 63.2548C48.2823 63.0452 48.2411 62.7461 47.5899 62.5316C45.6811 61.9029 45.4123 59.8474 47.1767 59.3712C47.6359 59.2471 47.6747 59.2115 47.3599 59.2034C47.1399 59.1977 46.7327 59.2929 46.4551 59.4153ZM25.8491 60.9998C25.5251 61.468 25.5343 61.8211 25.8799 62.2386C26.1823 62.6034 27.3675 62.7959 27.4679 62.4968C27.4991 62.4031 27.2559 62.3095 26.9223 62.2872C25.7203 62.2065 25.5263 61.1259 26.7135 61.1259C27.1099 61.1259 27.3583 61.0404 27.4179 60.8827C27.5819 60.4486 26.1563 60.5552 25.8491 60.9998ZM111.12 60.7562C110.277 60.9642 109.948 61.9188 109.905 64.2876C109.882 65.5287 109.858 65.6098 109.334 66.1655C108.652 66.8907 108.701 67.8352 109.46 68.5567C109.782 68.8631 109.963 69.249 110.08 69.8757C110.266 70.8736 110.302 70.9271 111.057 71.309C111.559 71.5627 111.604 71.6486 111.648 72.437C111.688 73.1383 111.768 73.3373 112.097 73.5554C112.316 73.7013 112.601 74.026 112.729 74.2765C112.857 74.527 113.141 74.9141 113.361 75.1366C113.58 75.3592 113.76 75.6794 113.76 75.848C113.76 76.3012 114.245 76.666 114.944 76.7385C115.614 76.8083 115.983 77.2444 115.994 77.9769C116.006 78.8001 117.563 79.7681 118.16 79.3234C118.405 79.1406 118.446 78.7507 118.204 78.9027C117.247 79.5018 116.055 78.0332 116.913 77.3117C117.182 77.0855 117.177 76.8533 116.905 76.8533C116.786 76.8533 116.561 76.709 116.403 76.5326C116.246 76.3567 116.037 76.261 115.939 76.3206C115.84 76.3802 115.859 76.3056 115.979 76.1548C116.1 76.0041 116.127 75.8804 116.039 75.8804C115.951 75.8804 115.79 75.9899 115.68 76.1236C115.14 76.7823 114.18 76.3478 113.998 75.3628C113.92 74.9364 113.796 74.7495 113.568 74.7143C113.258 74.666 112.824 73.8063 112.723 73.043C112.656 72.523 112.46 72.1513 112.256 72.1513C112.152 72.1513 111.979 71.8229 111.873 71.4216C111.768 71.0199 111.627 70.7005 111.56 70.7111C110.551 70.8736 109.827 69.3442 110.4 68.2591C110.508 68.0561 110.508 67.9219 110.4 67.855C110.312 67.7995 110.24 67.8461 110.24 67.9584C110.24 68.1096 110.193 68.1152 110.06 67.9807C109.962 67.8806 109.79 67.8339 109.68 67.8773C109.109 68.099 109.072 66.6463 109.642 66.3921C110.053 66.2085 110.166 65.7314 110.375 63.3216C110.486 62.0391 110.573 61.6723 110.8 61.5381C111.822 60.9342 111.982 60.543 111.12 60.7562ZM26.3759 63.3549C25.5603 63.5353 25.0951 67.0074 25.7923 67.7136C26.0403 67.9653 26.0435 67.9409 25.8363 67.3516C25.4211 66.1708 25.7823 63.9998 26.4287 63.7918C26.8799 63.6467 27.3327 63.8608 27.4079 64.2547C27.4699 64.579 27.4779 64.5746 27.4931 64.2065C27.5215 63.5117 27.1047 63.194 26.3759 63.3549ZM127.445 63.6852C127.266 64.1571 127.337 64.4599 127.56 64.1733C128.543 62.9078 129.772 65.6127 129.032 67.414C128.794 67.9941 128.796 68.0058 129.072 67.7269C129.524 67.2717 129.473 65.0071 128.99 64.08C128.612 63.3541 127.662 63.1113 127.445 63.6852ZM35.2403 67.0439C35.2419 67.4006 35.2747 67.5275 35.3131 67.3256C35.3515 67.1242 35.3499 66.8323 35.3099 66.6771C35.2699 66.5222 35.2383 66.6872 35.2403 67.0439ZM39.9415 68.7869C39.7263 69.1351 39.3599 71.2169 39.3599 72.0929C39.3599 72.3487 39.5523 72.6896 39.8619 72.9826C40.4555 73.5444 40.4119 73.6214 39.4371 73.7329C38.5015 73.8399 38.1591 74.2899 38.2855 75.2457C38.3647 75.8452 38.3123 75.9696 37.6683 76.7041C37.2815 77.1459 36.9167 77.7065 36.8583 77.9505C36.7999 78.1941 36.4927 78.6615 36.1759 78.9886C35.8591 79.3161 35.4723 79.7174 35.3167 79.8804C34.3727 80.869 33.7359 81.3931 33.4787 81.3931C32.4591 81.3931 31.1015 84.0266 31.7715 84.7052C32.1851 85.1247 32.3199 85.0011 32.3199 84.2005C32.3199 83.6472 32.4131 83.3404 32.6623 83.0716C32.8503 82.8686 33.0859 82.5354 33.1855 82.3315C33.2935 82.111 33.6383 81.873 34.0367 81.7445C34.4479 81.612 34.7459 81.4028 34.8087 81.203C34.8647 81.0238 35.1559 80.7733 35.4555 80.6465C35.8115 80.4957 35.9999 80.3064 35.9999 80.0988C35.9999 79.9241 36.2159 79.6197 36.4799 79.4219C36.7439 79.2241 36.9599 78.9627 36.9599 78.8415C36.9599 78.4398 37.4311 77.6887 37.7471 77.5869C38.2311 77.4313 39.0819 75.7775 39.0079 75.1358C38.9547 74.6745 39.0019 74.5878 39.3531 74.5002C39.5767 74.4447 39.9399 74.2785 40.1599 74.1306C40.3799 73.983 40.6139 73.8513 40.6799 73.8375C40.7459 73.8241 40.8179 73.7949 40.8399 73.7722C40.8619 73.7495 41.0395 73.7143 41.2347 73.6932C41.8415 73.6283 42.1487 75.3746 41.5919 75.7232C41.3471 75.8764 41.9943 76.0369 42.4903 75.9457C43.2943 75.7981 43.6807 77.0324 43.2695 78.4345C43.1799 78.7405 43.2511 78.837 43.7107 79.0316C44.3543 79.3044 44.6399 79.8467 44.6399 80.7973C44.6399 81.5248 44.9891 82.2038 45.3631 82.2038C45.5015 82.2038 45.7023 82.5954 45.8827 83.2168C46.0923 83.9379 46.2847 84.284 46.5503 84.4182C47.0855 84.6886 47.1947 84.9354 47.1975 85.8799C47.1999 86.6938 47.2163 86.7242 47.7599 86.9058C48.3971 87.119 48.5767 87.5487 48.4079 88.4595C48.2903 89.0959 48.5023 89.5 48.9547 89.5C49.5995 89.5 49.9599 90.44 49.5863 91.1473C49.3155 91.6597 49.5199 92.1789 50.0083 92.2198C50.7319 92.2806 50.7675 92.3714 50.6519 93.8595C50.5511 95.159 50.5611 95.2312 50.7963 94.898C50.9395 94.6949 51.1487 94.5789 51.2803 94.63C51.8003 94.8323 52.0707 94.2247 51.6403 93.8206C51.4179 93.6118 51.1987 93.1728 51.1367 92.8129C50.9715 91.8534 50.7259 91.3228 50.4079 91.2385C50.2099 91.1862 50.0891 90.9373 50.0135 90.4258C49.9051 89.6937 49.7139 89.425 49.0703 89.0999C48.7851 88.956 48.7411 88.8056 48.7779 88.1036C48.8203 87.2961 48.2423 86.4194 47.6675 86.4194C47.5863 86.4194 47.5199 86.0797 47.5199 85.665C47.5199 84.9978 47.4483 84.8426 46.9027 84.3274C46.4427 83.8929 46.2347 83.5268 46.0863 82.8917C45.9567 82.3359 45.7475 81.9278 45.4855 81.719C45.1759 81.4722 45.0335 81.1288 44.8651 80.2204C44.7015 79.3384 44.5455 78.9529 44.2463 78.6878C43.9759 78.4483 43.8195 78.107 43.7635 77.6339C43.6039 76.2902 43.0303 75.0381 42.1931 74.2064L41.4051 73.424L41.7523 73.0965C42.5347 72.358 42.4743 70.9409 41.6299 70.2145C41.3647 69.9867 40.9963 69.4902 40.8107 69.1112C40.4279 68.3289 40.2631 68.2677 39.9415 68.7869ZM127.623 69.0301C127.397 70.4119 127.507 79.1629 127.748 79.0693C127.874 79.0202 128.063 79.0855 128.168 79.214C128.303 79.3794 128.307 79.4475 128.179 79.4475C128.081 79.4475 128 79.5293 128 79.6295C128 79.7584 128.067 79.7551 128.23 79.6177C128.357 79.5111 128.424 79.3271 128.38 79.2087C128.335 79.0908 128.36 78.9554 128.435 78.9079C128.51 78.8609 128.586 78.9931 128.603 79.2014C128.62 79.4102 128.789 79.8467 128.978 80.1718C129.371 80.8463 129.331 81.9675 128.884 82.8434C128.585 83.4308 127.605 83.5771 127.47 83.055C127.41 82.8215 127.394 82.8301 127.378 83.1037C127.368 83.2865 127.449 83.5264 127.559 83.6375C127.717 83.7976 127.709 83.8706 127.519 83.9946C127.35 84.1049 127.445 84.1267 127.84 84.0696C128.729 83.9407 129.267 84.5609 128.903 85.2945C128.742 85.6192 128.587 85.6898 128.034 85.6898C127.271 85.6898 127.134 85.9893 127.68 86.4628C128.321 87.0189 127.948 89.391 127.164 89.7464C126.551 90.0245 126.048 91.2551 126.262 91.9552C126.501 92.7375 126.343 93.3301 125.86 93.4525C125.624 93.5129 125.371 93.7825 125.197 94.1598C124.863 94.8878 124.372 95.414 124.282 95.1412C124.249 95.039 124.134 95.0098 124.028 95.0763C123.746 95.2526 123.959 95.4991 124.394 95.4991C124.67 95.4991 124.815 95.6329 124.944 96.0098C125.17 96.6673 125.197 96.5911 124.61 96.9531C124.33 97.1257 123.952 97.5805 123.77 97.964C123.532 98.4666 123.351 98.6527 123.122 98.632C122.666 98.5902 122.556 98.8732 122.663 99.8123C122.792 100.932 122.42 101.555 121.676 101.467C121.394 101.434 121.168 101.481 121.169 101.574C121.169 101.666 121.159 102.079 121.145 102.49L121.12 103.24L120.12 103.374C119.57 103.448 118.994 103.494 118.84 103.478C118.631 103.455 118.564 103.56 118.576 103.892L118.592 104.336L118.72 103.93C118.79 103.707 118.855 103.625 118.864 103.747C118.875 103.9 118.942 103.921 119.08 103.813C119.19 103.727 119.633 103.682 120.066 103.713C120.957 103.778 121.347 103.535 121.493 102.828C121.547 102.565 121.779 102.279 122.073 102.113C122.582 101.825 122.845 101.329 122.998 100.363C123.048 100.051 123.257 99.6227 123.462 99.4111C123.667 99.1991 123.907 98.7613 123.994 98.4382C124.092 98.0722 124.405 97.6304 124.82 97.2692C125.533 96.6486 125.595 96.1655 125.032 95.5952C124.71 95.2693 124.906 94.887 125.737 94.2206C126.602 93.5259 126.817 92.9442 126.556 92.0006L126.352 91.2624L127.087 90.5028C127.951 89.609 128.114 89.2268 128.257 87.7586C128.333 86.9812 128.455 86.5738 128.679 86.3565C129.431 85.6261 129.5 84.6817 128.855 83.9593C128.637 83.7153 128.645 83.6411 128.933 83.2293C129.639 82.2224 129.663 80.2934 128.976 79.8629C128.585 79.6177 128.761 78.0028 129.172 78.0782C130.035 78.2367 130.578 76.7742 130.618 74.1853C130.669 70.7865 130.14 69.0325 129.176 69.4042C128.939 69.4954 128.795 69.4764 128.743 69.3463C128.7 69.2393 128.663 69.2976 128.662 69.476C128.657 69.8708 128.915 71.1796 128.941 70.8947C128.974 70.5372 129.279 70.6782 129.293 71.0568C129.299 71.2575 129.341 71.3304 129.386 71.219C129.754 70.294 130.331 72.129 130.265 74.0158C130.204 75.7426 130.051 76.2882 129.631 76.2728C129.438 76.2659 129.28 76.3121 129.28 76.3758C129.28 76.439 129.136 76.5294 128.96 76.576C128.688 76.6481 128.64 76.7973 128.64 77.5679C128.64 78.0665 128.568 78.4746 128.48 78.4746C128.392 78.4746 128.32 78.5796 128.32 78.7077C128.32 78.8358 128.191 78.931 128.034 78.9189C127.765 78.8986 127.748 78.5772 127.754 73.6595C127.757 70.7792 127.751 68.4221 127.741 68.4221C127.73 68.4221 127.677 68.6957 127.623 69.0301ZM26.5971 69.0706C26.5971 69.3828 26.6299 69.5104 26.6703 69.3544C26.7103 69.1983 26.7103 68.943 26.6703 68.7869C26.6299 68.6308 26.5971 68.7585 26.5971 69.0706ZM26.9487 72.6377C26.9487 74.7333 26.9715 75.5906 26.9995 74.5428C27.0271 73.495 27.0271 71.7804 26.9995 70.7326C26.9715 69.6847 26.9487 70.542 26.9487 72.6377ZM25.7047 69.4164C25.5427 69.5121 25.2907 69.6073 25.1447 69.628C24.0143 69.7885 23.9119 76.4163 25.0399 76.4191C25.1279 76.4191 25.4335 76.4726 25.7187 76.5379C26.2179 76.6518 26.2335 76.6404 26.1315 76.2294C25.9971 75.6859 25.6559 75.3377 25.3675 75.4495C24.6339 75.7349 24.3611 73.3511 24.8815 71.2044C24.9387 70.9681 25.0567 70.857 25.1935 70.9105C25.5455 71.0471 26.0203 70.5011 26.1243 69.8408C26.2259 69.1947 26.1727 69.1408 25.7047 69.4164ZM90.5999 70.4821C90.1611 70.568 90.1315 70.7974 90.5427 70.9296C90.9783 71.0698 91.2543 71.8744 91.1595 72.7281C91.0135 74.0385 90.1435 74.5006 89.3455 73.6916C88.8419 73.1816 88.7971 73.1849 88.8127 73.7321C88.8195 73.9773 88.8611 74.0876 88.9055 73.9769C88.9663 73.8241 89.0435 73.8343 89.2243 74.0175C89.5663 74.364 90.6095 74.3271 90.9399 73.9571C91.4855 73.3462 91.4015 70.8542 90.8355 70.8542C90.5203 70.8542 90.9351 70.5619 91.3599 70.4845L91.7599 70.4119H91.3599C91.1399 70.4119 90.7979 70.4435 90.5999 70.4821ZM41.4335 70.8509C42.3299 71.3369 41.9155 73.4577 40.9267 73.4459C40.7799 73.4443 40.7895 73.3977 40.9599 73.2862C41.1435 73.1658 41.0835 73.1285 40.7055 73.1265C39.9127 73.1225 39.5963 72.1265 40.0839 71.1703C40.3427 70.6637 40.8619 70.5408 41.4335 70.8509ZM20.6631 70.9713C22.4647 71.1647 22.4763 75.409 20.6755 75.6003L20.0799 75.664L20.7483 75.6911C21.8619 75.7365 22.1203 75.2396 22.0535 73.1825C21.9887 71.1942 21.7847 70.8379 20.7351 70.8813L20.0799 70.9085L20.6631 70.9713ZM35.5143 71.1679C35.8019 71.7127 35.7039 72.5566 35.2847 73.1407C35.0671 73.4435 34.7143 73.9518 34.5011 74.27C34.2875 74.5882 33.9255 74.9729 33.6963 75.1249C33.4671 75.2773 33.2799 75.5343 33.2799 75.6968C33.2799 76.0219 32.8059 76.529 32.5019 76.529C32.3959 76.529 32.1651 76.7766 31.9887 77.079C31.8127 77.3818 31.4643 77.715 31.2147 77.8196C30.9655 77.9246 30.6799 78.1913 30.5803 78.413C30.4807 78.6347 30.1811 78.8929 29.9147 78.9874C29.6483 79.0814 29.3227 79.3692 29.1911 79.627C29.0295 79.944 28.8287 80.096 28.5731 80.096C28.1999 80.096 27.9999 80.3639 27.9999 80.8637C27.9999 81.004 27.7299 81.3866 27.3999 81.7145C27.0699 82.0425 26.6819 82.4871 26.5375 82.7032C25.8135 83.7871 25.2579 81.6708 25.9155 80.3331C26.2247 79.704 26.2247 79.6984 25.9195 80.0684C25.0979 81.064 25.1075 83.1612 25.9367 83.9216C26.2975 84.2524 28.3303 82.3408 28.5739 81.4422C28.6271 81.2464 28.8431 80.9711 29.0543 80.8309C29.2655 80.6906 29.5431 80.3222 29.6711 80.0117C29.7987 79.7012 30.0179 79.4475 30.1579 79.4475C30.2979 79.4475 30.6947 79.1556 31.0399 78.7989C31.3851 78.4422 31.7599 78.15 31.8735 78.1495C32.1571 78.1483 33.9199 76.407 33.9199 76.1277C33.9199 76.0037 34.0691 75.8541 34.2519 75.7957C34.4399 75.7349 34.7123 75.3851 34.8799 74.9887C35.0479 74.5918 35.3199 74.2424 35.5083 74.1816C36.2379 73.9469 36.5667 72.0264 36.0019 71.2988C35.6015 70.7832 35.2631 70.692 35.5143 71.1679ZM133.19 71.0844C132.572 71.542 132.663 75.2217 133.301 75.5679C133.619 75.7402 133.619 75.7309 133.279 75.2655C132.801 74.6105 132.847 71.7512 133.345 71.1951C133.698 70.8003 133.635 70.7548 133.19 71.0844ZM114.453 73.7094C114.453 73.8667 114.559 73.9076 114.787 73.8391C115.109 73.7422 115.11 73.7467 114.816 73.9745C114.487 74.2282 114.65 74.4439 115.24 74.5371C115.834 74.6308 115.381 73.8099 114.707 73.5696C114.553 73.5148 114.453 73.5696 114.453 73.7094ZM88.8347 75.1508C88.8835 75.3292 88.9711 75.5914 89.0291 75.7337C89.0971 75.8995 88.9659 76.1751 88.6631 76.5038C88.0355 77.1844 88.3295 77.1593 89.0735 76.4686L89.6623 75.9214L89.2043 75.3742C88.8855 74.9931 88.7731 74.925 88.8347 75.1508ZM116.32 76.1415C116.32 76.334 116.652 76.6911 116.832 76.6911C117.014 76.6911 116.991 76.2432 116.802 76.1248C116.709 76.0669 116.681 76.1471 116.735 76.3178C116.816 76.5788 116.799 76.5764 116.573 76.2955C116.434 76.122 116.32 76.0527 116.32 76.1415ZM86.1239 77.0762C85.8491 77.4041 85.8495 77.4074 86.1423 77.1767C86.3083 77.0454 86.6143 76.9607 86.8223 76.9882C87.3235 77.0551 87.3087 76.912 86.8039 76.8143C86.5335 76.7621 86.3179 76.8451 86.1239 77.0762ZM128.048 77.6639C128.048 78.1544 128.078 78.3551 128.115 78.1098C128.151 77.8646 128.151 77.4633 128.115 77.2181C128.078 76.9728 128.048 77.1735 128.048 77.6639ZM54.3999 77.6866C54.3999 77.7884 54.2767 77.9627 54.1263 78.0742C53.7831 78.3287 53.9503 78.7422 54.7955 79.7312C55.4803 80.5322 55.6667 80.5674 56.2615 80.0089C56.8971 79.4118 57.1963 79.5423 57.2159 80.4243C57.2415 81.6035 57.2651 81.7024 57.5999 82.0417C57.8291 82.2739 58.1127 82.3599 58.5999 82.344C58.9935 82.3311 59.1115 82.295 58.8799 82.2581C57.9443 82.1085 57.7539 82.0141 57.5383 81.5913C57.3915 81.3035 57.3403 80.8787 57.3943 80.3943C57.4995 79.4479 57.1231 79.244 56.1847 79.7397L55.5819 80.0579L55.0311 79.6019C54.5259 79.1836 54.4819 79.0774 54.5039 78.3238C54.5175 77.8719 54.4995 77.5018 54.4639 77.5018C54.4287 77.5018 54.3999 77.5849 54.3999 77.6866ZM86.1087 78.2412C86.0627 79.5549 85.5207 80.036 84.4919 79.6769C84.1111 79.5435 83.7667 79.4673 83.7275 79.5074C83.6879 79.5472 83.8175 79.6319 84.0155 79.6955C84.2135 79.7592 84.5147 79.9432 84.6851 80.1041C85.3275 80.7105 86.2971 79.4961 86.1983 78.2087L86.1375 77.4207L86.1087 78.2412ZM20.4399 78.9302C19.8275 78.9817 19.7535 79.1094 19.9999 79.6907C20.1279 79.9922 20.1383 79.9939 20.1487 79.7113C20.1575 79.4726 20.2067 79.4475 20.3795 79.5926C20.5003 79.6943 20.7071 79.7357 20.8387 79.6842C21.4187 79.4588 22.0843 82.5042 21.5875 83.1105C21.4811 83.2403 21.4303 83.3829 21.4743 83.4275C22.0203 83.9812 22.1203 81.7575 21.6175 80.2383C21.1743 78.8998 21.1479 78.8711 20.4399 78.9302ZM133.659 79.0822C133.609 79.2387 133.386 79.8406 133.163 80.4203C132.657 81.7372 132.609 82.6939 133.025 83.1604C133.433 83.6176 133.497 83.5058 133.188 82.8771C133.018 82.5321 132.972 82.1904 133.047 81.8378C133.214 81.0551 133.764 79.6141 133.89 79.6323C134.278 79.6878 134.529 79.563 134.672 79.2448C134.823 78.9083 134.794 78.8767 134.293 78.839C133.894 78.809 133.726 78.8735 133.659 79.0822ZM26.6455 79.1321C26.6919 79.2087 26.8387 79.229 26.9715 79.1771C27.2903 79.0535 27.2035 79.49 26.8799 79.6388C26.7191 79.7126 26.7795 79.7527 27.0627 79.7604C27.4571 79.7709 27.8127 79.366 27.5991 79.1495C27.4515 78.9995 26.5547 78.9837 26.6455 79.1321ZM82.7827 79.7093C82.6647 79.7588 82.7111 79.9991 82.9223 80.432C83.5375 81.6918 81.5855 82.7956 80.4059 81.8552C79.8995 81.4519 79.7459 81.5788 79.5935 82.5281C79.4671 83.3136 79.0855 84.1462 78.8423 84.1661C78.0127 84.2334 77.4767 84.0688 76.8627 83.5589C76.4547 83.22 76.1475 83.066 76.0847 83.1689C76.0275 83.2621 76.0547 83.3388 76.1451 83.3388C76.2355 83.3388 76.5611 83.5941 76.8691 83.9062C78.0511 85.104 79.4067 84.635 79.6799 82.9338C79.8647 81.7822 79.8387 81.807 80.5219 82.1369C81.9295 82.8171 83.4551 81.9671 83.3231 80.5755C83.2763 80.083 83.3147 79.7547 83.4239 79.7089C83.5207 79.6684 83.4559 79.6351 83.2799 79.6351C83.1039 79.6351 82.8803 79.6684 82.7827 79.7093ZM38.5231 80.0591C38.4719 80.2573 38.2611 80.488 38.0551 80.5719C37.8211 80.6667 37.7759 80.7279 37.9351 80.7344C38.2603 80.7474 38.7743 80.1799 38.6843 79.9067C38.6455 79.7892 38.5759 79.8552 38.5231 80.0591ZM118.16 79.9732C117.984 80.079 117.768 80.1718 117.68 80.1803C117.038 80.2415 116.716 80.8621 116.567 82.3213C116.479 83.1876 116.329 83.5009 116 83.5009C115.843 83.5009 115.673 83.6103 115.622 83.7441C115.572 83.8779 115.352 83.9873 115.135 83.9873C114.106 83.9873 113.447 84.5528 113.475 85.4129C113.499 86.1774 113.76 86.2398 113.76 85.4814C113.76 84.4433 114.899 83.9062 115.736 84.5495C115.946 84.7104 116.145 84.734 116.415 84.6302C116.676 84.5293 116.785 84.539 116.758 84.6606C116.737 84.7587 116.8 84.8685 116.898 84.9054C117.023 84.9524 117.057 84.5536 117.012 83.5653C116.955 82.3104 116.983 82.1252 117.274 81.8503C117.453 81.6813 117.601 81.6002 117.603 81.6704C117.605 81.7409 117.796 81.3757 118.029 80.8589C118.306 80.244 118.526 79.9481 118.666 80.0028C118.784 80.0486 118.88 80.0153 118.88 79.9286C118.88 79.7182 118.552 79.7385 118.16 79.9732ZM60.4851 81.6302C60.3719 81.7681 60.0547 81.9468 59.7799 82.0279C59.3199 82.1629 59.3123 82.1758 59.6843 82.1892C59.9067 82.1973 60.2415 82.0956 60.4279 81.963C60.8371 81.6724 60.8811 81.7506 61.0423 83.0579C61.2319 84.5974 62.1779 85.0724 63.0935 84.0882C63.4651 83.689 64.4255 83.2857 64.6583 83.4312C64.8127 83.5281 64.8555 83.2869 64.7099 83.1397C64.5615 82.9889 63.3095 83.5305 62.8711 83.9346C62.0111 84.7275 61.4307 84.2881 61.1315 82.6168C60.9339 81.5131 60.7771 81.2735 60.4851 81.6302ZM36.1123 82.6359C36.1803 82.8159 36.1527 82.8669 36.0291 82.7895C35.9039 82.7113 35.8779 82.7644 35.9495 82.9533C36.0315 83.1701 35.9935 83.2086 35.7795 83.1255C35.5931 83.053 35.5407 83.0793 35.6179 83.2062C35.6931 83.3294 35.6455 83.3602 35.4795 83.2954C35.3371 83.2403 35.1899 83.2938 35.1427 83.4182C35.0127 83.7607 35.9687 83.3769 36.1631 83.008C36.3627 82.6306 36.3635 82.3659 36.1651 82.3659C36.0795 82.3659 36.0559 82.4875 36.1123 82.6359ZM72.0319 83.5333C71.9263 83.6403 71.8399 83.83 71.8399 83.9549C71.8399 84.3489 71.3463 85.2548 71.0675 85.3716C69.7675 85.9172 69.0615 85.5799 68.8627 84.3189C68.8051 83.9545 68.7063 83.6233 68.6431 83.584C68.3823 83.4206 68.8711 85.2333 69.1823 85.5836C69.8851 86.3748 71.5415 85.7615 71.8483 84.5961C71.9483 84.2167 72.0959 83.7786 72.1763 83.6225C72.3475 83.2905 72.3003 83.2613 72.0319 83.5333ZM72.5663 83.9062C72.8207 85.2252 75.8399 85.5759 75.8399 84.2865C75.8399 84.2111 75.6959 84.2954 75.5199 84.4737C74.7631 85.2406 73.0895 84.8612 72.6447 83.8219C72.4807 83.4385 72.4767 83.4425 72.5663 83.9062ZM64.8159 83.9492C64.8067 84.1576 65.0359 84.5771 65.3455 84.9196L65.8911 85.5228L66.5271 85.1604C66.8771 84.9609 67.2687 84.798 67.3967 84.798C67.6695 84.798 68.0647 84.3696 68.2195 83.9062C68.2899 83.6963 68.1859 83.7623 67.9251 84.0923C67.0527 85.1977 65.2579 85.1259 64.9395 83.9727C64.8331 83.5872 64.8315 83.5868 64.8159 83.9492ZM21.1199 84.2447C21.1199 84.3708 21.2459 84.481 21.3999 84.4895C21.5539 84.4985 21.8515 84.5167 22.0615 84.5301C23.0035 84.5909 23.5147 86.3395 22.8311 87.1628C22.5051 87.5556 22.4619 87.7067 22.6023 87.9613C22.9723 88.6313 23.0155 89.4878 22.6995 89.8944L22.4007 90.2799L23.0307 90.1939C24.4707 89.9986 24.7339 92.5093 23.3031 92.7926C22.9651 92.8595 22.9651 92.8611 23.2943 92.883C23.4811 92.8951 23.7079 93.0816 23.8087 93.3058C23.9079 93.5263 24.2439 93.8145 24.5555 93.9466C25.1791 94.2105 25.5243 94.8773 25.5879 95.9409C25.5947 96.0499 25.8159 96.2526 26.0799 96.3908C26.4623 96.5911 26.5599 96.7488 26.5607 97.1651C26.5623 98.0823 26.8711 98.9068 27.2847 99.0977C27.5527 99.2218 27.7955 99.6089 28.0835 100.373C28.3111 100.976 28.5963 101.509 28.7175 101.556C28.8383 101.603 28.9847 101.992 29.0423 102.421C29.2039 103.626 29.2611 103.738 29.7683 103.851C30.5571 104.027 30.7043 104.638 30.2059 105.668C29.9755 106.143 30.2807 106.524 30.8907 106.524C31.2211 106.524 31.3987 106.64 31.5511 106.956C31.6819 107.227 31.9959 107.47 32.3923 107.608C33.2047 107.89 33.2907 108.041 33.2523 109.119C33.2143 110.174 33.3707 110.74 33.7003 110.74C33.8315 110.74 33.8943 110.813 33.8399 110.902C33.7855 110.991 33.8531 111.064 33.9903 111.064C34.1275 111.064 34.2491 110.973 34.2607 110.862C34.3523 109.961 34.2987 109.67 33.9675 109.271C33.7655 109.028 33.5999 108.751 33.5999 108.657C33.5999 108.156 33.1499 107.591 32.5403 107.327C32.0091 107.096 31.8471 106.927 31.7571 106.512C31.6947 106.224 31.4751 105.83 31.2691 105.637C31.0631 105.443 30.8515 105.038 30.7991 104.736C30.6859 104.084 30.5035 103.836 29.9395 103.563C29.5819 103.39 29.5127 103.24 29.4707 102.551C29.4319 101.916 29.3203 101.636 28.9519 101.249C28.6939 100.978 28.3755 100.391 28.2447 99.9441C28.0879 99.4082 27.8151 98.9599 27.4435 98.6263C26.9391 98.174 26.8799 98.0349 26.8799 97.3033C26.8799 96.5631 26.8267 96.4427 26.3199 96.0329C26.0091 95.7816 25.7599 95.433 25.7599 95.2494C25.7599 94.6288 25.2711 92.9868 24.9551 92.5466C24.7819 92.305 24.6395 91.8672 24.6391 91.5737C24.6383 91.2803 24.5407 90.851 24.4215 90.62C24.3023 90.3885 24.1523 89.9155 24.0879 89.5681C24.0067 89.1283 23.7763 88.7546 23.3275 88.335L22.6839 87.7327L23.0219 87.2973C23.7575 86.3497 23.1935 84.1604 22.2079 84.1369C21.9175 84.1304 21.5539 84.1 21.3999 84.0704C21.2403 84.0392 21.1199 84.1142 21.1199 84.2447ZM132.149 84.3606C131.478 85.0911 131.333 86.6208 131.869 87.3123L132.219 87.7623L131.829 88.0553C131.034 88.6532 130.88 88.8632 130.88 89.3443C130.88 89.6155 130.736 90.1234 130.56 90.4728C130.384 90.8222 130.24 91.3204 130.24 91.5794C130.24 91.8384 130.096 92.2361 129.92 92.4626C129.744 92.6896 129.6 93.1112 129.6 93.4002C129.6 94.0877 128.972 95.8234 128.723 95.8234C128.298 95.8234 128 96.4164 128 97.2615C128 98.0309 127.945 98.1602 127.38 98.7078C126.969 99.1075 126.695 99.5614 126.565 100.061C126.435 100.557 126.211 100.93 125.904 101.16C125.499 101.464 125.44 101.612 125.44 102.321C125.44 103.055 125.393 103.162 124.961 103.411C124.495 103.679 124 104.469 124 104.942C124 105.07 123.825 105.256 123.611 105.355C123.329 105.485 123.185 105.726 123.086 106.232C122.97 106.831 122.861 106.972 122.32 107.232C121.595 107.578 121.292 107.921 121.285 108.401C121.282 108.586 121.107 108.903 120.896 109.104C120.425 109.552 120.255 110.68 120.636 110.828C120.988 110.965 121.024 110.896 120.979 110.153C120.949 109.67 121.007 109.459 121.189 109.389C121.337 109.331 121.44 109.098 121.44 108.821C121.44 108.199 121.997 107.497 122.492 107.497C122.905 107.497 123.52 106.986 123.52 106.642C123.52 106.498 123.714 106.454 124.151 106.496C124.793 106.558 125.009 106.157 124.619 105.625C124.223 105.085 124.456 103.93 124.96 103.93C125.418 103.93 125.76 103.299 125.76 102.454C125.76 101.833 125.829 101.651 126.146 101.441C126.358 101.301 126.621 100.909 126.73 100.572C126.998 99.743 127.314 99.2781 127.675 99.1824C128.025 99.0896 128.317 98.1752 128.319 97.1651C128.32 96.5732 128.383 96.4472 128.785 96.2364C129.135 96.0528 129.276 95.8375 129.355 95.3673C129.465 94.703 130.035 93.6159 130.189 93.7727C130.655 94.2449 131.017 93.2081 130.641 92.4776C130.23 91.6791 130.859 89.592 131.408 89.9353C131.602 90.0569 131.834 89.6735 131.837 89.2256C131.839 89.0298 131.991 88.6111 132.175 88.2945L132.51 87.7189L132.095 87.2187C131.278 86.2345 131.875 84.5941 133.084 84.5049C133.976 84.4393 133.997 84.0562 133.11 84.0364C132.645 84.0262 132.372 84.1178 132.149 84.3606ZM29.7967 84.2581C29.6847 84.3035 29.4855 84.552 29.3539 84.8098C29.2223 85.068 28.9047 85.389 28.6487 85.5232C28.3923 85.6573 28.1331 85.9257 28.0723 86.119C28.0119 86.3128 27.7127 86.7027 27.4079 86.9856C26.8655 87.4891 26.8571 87.5154 27.0351 88.1846C27.1359 88.5649 27.1699 89.1871 27.1111 89.5843C27.0083 90.2783 27.0211 90.307 27.5543 90.5644C28.3555 90.9519 28.5251 91.3042 28.2135 91.9369C27.8331 92.7095 28.1367 93.6292 28.8507 93.868C29.3331 94.0293 29.3699 94.0897 29.3091 94.6175C29.1967 95.5931 29.5787 96.6324 30.1827 96.9936C30.7099 97.3085 31.0371 98.0224 31.0391 98.8622C31.0395 99.0621 31.1891 99.3174 31.3715 99.4297C31.7583 99.6676 32.0779 100.364 32.2363 101.314C32.3019 101.708 32.4679 102.053 32.6351 102.144C32.7927 102.229 33.0319 102.579 33.1671 102.921C33.5579 103.911 35.2447 104.5 35.6875 103.801C35.8379 103.563 35.8515 103.576 35.7859 103.89C35.7439 104.09 35.7415 104.255 35.7799 104.255C35.8187 104.255 35.9215 104.09 36.0083 103.89C36.1575 103.546 36.1631 103.55 36.1063 103.966C36.0731 104.208 36.1079 104.368 36.1831 104.321C36.6519 104.028 36.3019 103.488 35.6399 103.484C33.9283 103.475 33.7503 103.445 33.6599 103.16C33.5267 102.739 32.8991 101.43 32.7859 101.336C32.4999 101.1 32.3327 100.471 32.3419 99.6668C32.3547 98.6016 32.2687 98.4176 31.7599 98.4176C31.4419 98.4176 31.3431 98.2899 31.1639 97.6474C31.0091 97.0921 30.8091 96.7869 30.4471 96.553C29.6619 96.0459 29.3507 94.9766 29.7619 94.1979C29.9371 93.8668 29.5807 93.5534 29.0279 93.5534C28.4111 93.5534 28.1759 92.7642 28.5119 91.8218C28.6643 91.3954 28.6607 91.1619 28.4955 90.6986C28.2811 90.0979 28.6491 88.7379 28.9711 88.9394C29.0407 88.9832 29.1431 88.9447 29.1983 88.8543C29.2535 88.7635 29.1827 88.6893 29.0411 88.6893C28.5499 88.6893 28.2939 87.6877 28.5899 86.9244C28.7319 86.5576 28.9331 86.2572 29.0363 86.2572C29.2459 86.2572 30.0151 87.0331 29.9731 87.2025C29.9587 87.2625 29.9615 87.3261 29.9799 87.3448C29.9979 87.363 30.0303 87.1482 30.0515 86.8669C30.0991 86.2321 30.0823 86.2471 30.7815 86.2082L31.3603 86.1762L31.2547 85.3655C31.1187 84.3221 30.6019 83.9297 29.7967 84.2581ZM30.4167 85.1085C30.2899 85.1896 30.2371 85.3679 30.2947 85.5195C30.3543 85.6768 30.3307 85.7469 30.2379 85.6885C29.9643 85.5171 30.0575 84.9601 30.3599 84.9626C30.5839 84.9646 30.5955 84.9938 30.4167 85.1085ZM111.564 85.6492C111.224 86.0955 111.233 86.4352 111.608 87.149C111.824 87.5596 112 88.0744 112 88.2925C112 88.5109 112.073 88.6893 112.163 88.6893C112.252 88.6893 112.565 88.9386 112.857 89.2438C113.432 89.8433 113.646 89.9228 114.2 89.742C114.447 89.6609 114.56 89.4963 114.56 89.2158V88.8077L114.24 89.2199C113.642 89.9905 112.814 89.2864 113.105 88.2544C113.309 87.53 113.099 87.1676 112.47 87.1579C112.036 87.1506 111.882 87.057 111.71 86.6946C111.324 85.8803 112.121 85.453 112.941 86.0351C113.299 86.2893 113.307 86.2868 113.141 85.9731C112.86 85.4409 111.878 85.239 111.564 85.6492ZM113.44 90.6248C113.44 90.8194 113.378 90.9398 113.303 90.8928C113.228 90.8457 113.086 90.9872 112.987 91.2077C112.853 91.5044 112.682 91.6078 112.324 91.6078C111.268 91.6078 110.856 92.7906 111.6 93.686C112.104 94.2932 112.105 94.7958 111.602 95.7541C111.187 96.5449 111.191 97.1379 111.614 97.5947C111.792 97.7881 111.798 97.7301 111.649 97.2388C111.424 96.4962 111.749 95.915 112.469 95.7686C112.783 95.705 112.967 95.5656 112.981 95.3815C112.992 95.2234 113.017 94.8749 113.035 94.6073C113.08 93.9758 112.868 93.7156 112.309 93.7156C110.889 93.7156 111.204 91.9702 112.64 91.885C113.106 91.8571 113.346 91.7719 113.32 91.6439C113.298 91.5348 113.334 91.4542 113.4 91.4647C113.95 91.5527 114.144 90.8636 113.68 90.4728C113.479 90.3038 113.44 90.3285 113.44 90.6248ZM48.3299 91.6232C48.3179 91.9349 48.8163 92.4225 49.1323 92.4083C49.2575 92.4027 49.1963 92.3313 48.9963 92.2498C48.7959 92.1684 48.5667 91.9361 48.4863 91.733C48.3923 91.4959 48.3367 91.4566 48.3299 91.6232ZM113.8 91.6216C113.602 91.6974 113.44 91.8713 113.44 92.0079C113.44 92.1445 113.435 92.3094 113.428 92.3739C113.421 92.4387 113.505 92.5214 113.614 92.5583C113.735 92.5993 113.775 92.5303 113.718 92.3792C113.602 92.0727 113.885 91.7667 114.18 91.881C114.301 91.928 114.4 91.8903 114.4 91.7967C114.4 91.532 114.192 91.4712 113.8 91.6216ZM22.3999 92.9049C22.3999 92.9941 22.5079 93.067 22.6399 93.067C22.7719 93.067 22.8799 92.9941 22.8799 92.9049C22.8799 92.8157 22.7719 92.7427 22.6399 92.7427C22.5079 92.7427 22.3999 92.8157 22.3999 92.9049ZM50.6163 95.6101C50.6767 95.6714 51.0287 95.7626 51.3991 95.8128C52.2091 95.9231 52.5103 96.4735 52.2067 97.2883C51.9759 97.9085 52.0819 97.906 52.3991 97.2838C52.8867 96.3288 52.3003 95.4991 51.1375 95.4991C50.7907 95.4991 50.5559 95.5489 50.6163 95.6101ZM24.1599 96.829C24.1599 97.1326 24.5611 97.4982 24.8039 97.4164C24.9003 97.3839 24.7947 97.1817 24.5695 96.9672C24.2579 96.6709 24.1599 96.6377 24.1599 96.829ZM130.228 97.0613C129.871 97.4545 129.867 97.4743 130.181 97.3089C130.369 97.2104 130.564 97.0179 130.616 96.8817C130.747 96.536 130.674 96.57 130.228 97.0613ZM51.8399 99.2124C51.8399 99.7078 51.8567 99.7195 52.5107 99.677C53.4187 99.6182 53.5971 99.9875 53.5887 101.904C53.5799 103.828 53.3591 104.491 52.7183 104.516C52.4551 104.527 52.1651 104.545 52.0739 104.557C51.7767 104.596 51.8279 105.524 52.1575 106.071C52.5419 106.711 52.5595 107.102 52.2399 107.877C52.1079 108.198 51.9999 108.751 51.9999 109.107C51.9999 109.728 51.9731 109.762 51.3419 109.934C50.9135 110.051 50.6555 110.225 50.6019 110.433C50.5243 110.733 50.5007 110.736 50.2251 110.483C49.9479 110.229 49.9203 110.238 49.7419 110.634C49.6383 110.865 49.4915 111.016 49.4167 110.969C49.3415 110.922 49.2799 110.959 49.2799 111.051C49.2799 111.148 49.4695 111.18 49.7339 111.126C50.8787 110.894 51.1747 112.807 50.0383 113.096C49.5627 113.217 49.5031 113.333 49.7759 113.61C50.3207 114.162 49.8055 115.497 48.9767 115.682C48.7071 115.742 48.4383 115.981 48.2559 116.325C47.6375 117.489 45.7195 117.114 45.5699 115.801C45.5275 115.426 45.4371 115.354 44.9599 115.317C43.7715 115.224 43.6799 115.164 43.6799 114.476C43.6799 114.126 43.7531 113.794 43.8427 113.738C43.9319 113.682 43.9635 113.568 43.9131 113.485C43.8623 113.402 43.9115 113.334 44.0223 113.334C44.4731 113.334 43.8831 113.038 43.2799 112.962C42.2655 112.834 41.4047 112.565 41.2591 112.333C41.0363 111.977 41.0923 110.902 41.3331 110.902C41.4635 110.902 41.5467 110.713 41.5467 110.416C41.5467 109.899 41.4619 109.83 41.1519 110.091C41.0123 110.209 41.0035 110.201 41.1199 110.059C41.3795 109.744 41.3099 109.67 40.7599 109.678C40.2767 109.686 40.2403 109.649 40.2475 109.159C40.2555 108.602 40.1831 108.531 39.8719 108.794C39.7323 108.912 39.7235 108.903 39.8399 108.762C40.1047 108.44 40.0235 108.327 39.5631 108.377C39.2963 108.406 39.0939 108.544 39.0431 108.731C38.7795 109.703 36.9599 108.839 36.9599 107.743C36.9599 107.451 36.8503 107.12 36.7159 107.008C36.5819 106.895 36.5075 106.767 36.5503 106.723C36.5935 106.68 36.5627 106.519 36.4819 106.366C36.2351 105.899 36.1643 105.198 36.3319 104.88C36.4555 104.646 36.4351 104.579 36.2403 104.579C36.0075 104.579 35.6531 105.195 35.7691 105.399C35.7975 105.448 35.8623 105.841 35.9131 106.271C35.9715 106.762 36.1531 107.229 36.4027 107.531C36.6211 107.794 36.7999 108.116 36.7999 108.247C36.7999 108.631 37.5503 109.281 37.9943 109.281C38.2191 109.281 38.5263 109.427 38.6771 109.605C38.8279 109.783 39.1007 109.929 39.2835 109.929C39.7167 109.929 39.9999 110.227 39.9999 110.683C39.9999 110.884 40.1187 111.115 40.2639 111.198C40.4087 111.28 40.6787 111.666 40.8639 112.056C41.1327 112.623 41.3347 112.813 41.8747 113.009C42.8659 113.368 43.3599 113.872 43.3599 114.524C43.3599 115.138 43.6875 115.504 44.3867 115.673C44.6439 115.735 45.1119 116.075 45.4267 116.427C45.8919 116.948 46.1623 117.099 46.8619 117.228C48.0815 117.454 48.0611 117.461 48.4351 116.681C48.6955 116.138 48.8859 115.952 49.2599 115.876C49.7703 115.772 50.2399 115.105 50.2399 114.483C50.2399 114.304 50.3927 114.013 50.5795 113.837C51.0691 113.375 51.2263 112.29 50.9315 111.409C50.6899 110.688 50.7715 110.453 51.2799 110.406C52.1751 110.323 52.3919 110.031 52.4191 108.875C52.4295 108.43 52.4935 107.713 52.5611 107.284C52.6655 106.62 52.6327 106.432 52.3419 106.034C51.8203 105.318 51.9631 105.065 52.8891 105.065C53.5839 105.065 53.8163 104.427 53.8907 102.314C53.9691 100.088 53.6359 98.906 52.9287 98.9019C52.7259 98.9007 52.3979 98.8557 52.1999 98.8018C51.8827 98.7155 51.8399 98.7641 51.8399 99.2124ZM111.2 100.967C110.45 101.104 110.072 101.628 110.184 102.375C110.314 103.236 110.665 103.93 110.97 103.93C111.102 103.93 111.389 104.048 111.606 104.192C112.258 104.625 112.098 104.109 111.28 103.137C110.434 102.133 110.38 101.775 111.035 101.5C111.488 101.31 112.032 100.826 111.74 100.872C111.663 100.884 111.42 100.927 111.2 100.967ZM35.1999 102.365C35.1999 102.39 35.4259 102.625 35.7019 102.886C36.2019 103.361 36.2027 103.361 35.9323 102.931C35.7115 102.579 35.1999 102.184 35.1999 102.365ZM119.343 102.512C119.211 102.623 119.002 102.86 118.878 103.038C118.754 103.217 118.883 103.148 119.166 102.886C119.449 102.625 119.68 102.388 119.68 102.36C119.68 102.264 119.581 102.309 119.343 102.512ZM27.8499 104.594C27.8379 104.906 28.3363 105.394 28.6523 105.379C28.7775 105.374 28.7163 105.302 28.5163 105.221C28.3159 105.139 28.0867 104.907 28.0063 104.704C27.9123 104.467 27.8567 104.428 27.8499 104.594ZM118.535 105.09C118.589 105.662 118.483 106.115 118.07 107.092C117.995 107.27 117.855 107.725 117.761 108.104C117.565 108.885 117.073 109.132 116.301 108.837C115.781 108.638 115.604 108.74 115.916 109.057C116.493 109.641 118.08 109.014 118.08 108.203C118.08 108.047 118.264 107.651 118.489 107.323C118.795 106.874 118.895 106.528 118.888 105.935C118.875 104.779 118.846 104.6 118.651 104.524C118.536 104.48 118.496 104.675 118.535 105.09ZM109.645 105.511C109.176 106.024 108.747 106.614 108.694 106.823C108.631 107.073 108.361 107.306 107.906 107.503C107.36 107.741 107.184 107.917 107.075 108.34C106.938 108.868 106.924 108.875 106.121 108.821C104.767 108.731 103.801 109.258 103.876 110.047C103.915 110.446 104.016 110.659 104.167 110.659C104.336 110.659 104.385 110.5 104.35 110.079C104.266 109.1 105.606 108.752 106.854 109.429C107.214 109.624 107.281 109.505 107.395 108.471C107.426 108.192 107.627 107.965 108.046 107.741C108.378 107.563 108.789 107.182 108.959 106.895C109.129 106.609 109.397 106.224 109.554 106.04C110.525 104.906 110.53 104.903 111.273 104.903C111.673 104.903 112 104.83 112 104.741C112 104.107 110.474 104.606 109.645 105.511ZM110.877 107.258C110.567 107.635 110.788 107.707 111.119 107.336C111.279 107.157 111.335 107.011 111.244 107.011C111.153 107.011 110.988 107.122 110.877 107.258ZM97.3291 108.826C97.1363 108.92 96.9351 109.112 96.8823 109.252C96.8103 109.443 96.8723 109.427 97.1311 109.191C97.5663 108.793 99.1203 108.796 100.313 109.197C101.127 109.471 101.212 109.601 101.131 110.442C101.091 110.854 101.457 110.992 101.658 110.641C101.955 110.124 101.883 109.588 101.481 109.321C100.619 108.749 98.1007 108.448 97.3291 108.826ZM93.0383 109.353C92.7311 109.682 92.4799 110.02 92.4799 110.103C92.4799 110.186 92.4011 110.254 92.3047 110.254C91.9179 110.254 91.1999 110.935 91.1999 111.303C91.1999 111.606 91.0811 111.709 90.5999 111.825C90.0183 111.965 89.9995 111.992 89.9847 112.711C89.9687 113.509 89.4955 114.318 88.5643 115.14C88.1387 115.517 88.0783 115.677 88.0675 116.466C88.0567 117.232 87.9811 117.448 87.5475 117.948C86.9407 118.648 86.9279 118.797 87.4139 119.522L87.7875 120.08L87.2095 120.761C86.8915 121.135 86.5555 121.441 86.4635 121.441C85.9935 121.441 85.5999 122.201 85.5999 123.108C85.5999 123.939 85.5479 124.077 85.0399 124.592L84.4799 125.159L84.7495 125.732C85.0303 126.329 85.4727 126.473 86.0567 126.156C86.2083 126.073 87.5175 125.958 88.9663 125.899C91.7635 125.786 92.1427 125.667 92.4079 124.82C92.4855 124.573 92.6711 124.521 93.4907 124.52C94.2143 124.519 94.7163 124.407 95.3599 124.103C95.8439 123.875 96.5999 123.62 97.0399 123.537C98.2439 123.309 98.6727 123.083 98.8855 122.562C99.0579 122.141 99.1555 122.09 99.7871 122.09C100.657 122.09 101.317 121.763 101.566 121.21C101.719 120.868 101.863 120.793 102.361 120.793C103.078 120.793 103.588 120.471 103.929 119.802C104.158 119.353 104.234 119.321 104.978 119.355C105.721 119.39 105.825 119.345 106.396 118.755C107.165 117.959 107.864 117.412 108.837 116.846C109.253 116.603 109.663 116.274 109.747 116.114C109.832 115.954 110.192 115.735 110.548 115.627C111.483 115.343 111.859 114.35 111.261 113.744C110.903 113.38 110.859 113.492 111.077 114.212C111.306 114.965 111.01 115.28 110.072 115.28C109.548 115.28 109.471 115.335 109.341 115.807C109.232 116.201 109.018 116.425 108.49 116.696C108.101 116.895 107.598 117.233 107.371 117.448C107.145 117.662 106.8 117.887 106.604 117.947C106.408 118.006 106.156 118.252 106.043 118.492C105.859 118.881 105.729 118.937 104.833 119.009C103.815 119.091 103.528 119.277 103.522 119.855C103.519 120.244 103.026 120.468 102.173 120.468C101.496 120.468 101.428 120.508 101.218 121.016C100.922 121.736 100.748 121.825 99.7279 121.784C98.8871 121.749 98.8659 121.759 98.6359 122.318C98.2307 123.3 96.1415 123.741 95.4899 122.981C95.2987 122.758 95.0291 122.577 94.8911 122.579C94.7423 122.58 94.7063 122.63 94.8035 122.7C94.8931 122.766 94.9887 123.056 95.0155 123.345C95.0759 124.004 94.6683 124.197 93.2215 124.197C92.2007 124.197 91.8399 124.37 91.8399 124.859C91.8399 125.366 91.3699 125.557 90.0255 125.595C89.3075 125.615 88.3851 125.683 87.9755 125.745C87.4391 125.827 87.0931 125.788 86.7355 125.608C86.4555 125.466 85.9995 125.387 85.6891 125.426C85.1611 125.493 84.6807 125.184 85.0943 125.044C85.5491 124.89 85.7599 124.468 85.7599 123.71C85.7599 122.639 85.9767 122.14 86.6067 121.764C86.8991 121.589 87.2611 121.185 87.4115 120.866C87.6275 120.406 87.7503 120.307 88.0023 120.388C88.2395 120.464 88.3203 120.416 88.3211 120.195C88.3219 119.975 88.4015 120.022 88.6399 120.387L88.9579 120.874L88.9587 120.256C88.9595 119.885 88.8959 119.679 88.7999 119.739C88.7119 119.794 88.6399 119.725 88.6399 119.586C88.6399 119.293 88.4575 119.259 88.2135 119.506C87.9739 119.749 87.5199 119.257 87.5199 118.754C87.5199 118.471 87.6079 118.36 87.8343 118.36C88.2939 118.36 88.4503 117.915 88.3683 116.84C88.2995 115.935 88.3235 115.856 88.8375 115.299C89.1355 114.976 89.5767 114.439 89.8179 114.104C90.1527 113.64 90.3675 113.496 90.7279 113.496C90.9875 113.496 91.1999 113.419 91.1999 113.324C91.1999 113.23 91.2607 113.191 91.3351 113.237C91.4091 113.284 91.4535 113.07 91.4331 112.761C91.4127 112.452 91.4647 112.199 91.5491 112.199C91.8619 112.199 92.1239 111.758 92.0487 111.358C91.9871 111.033 92.0779 110.868 92.4763 110.58C92.7547 110.38 93.0459 110.046 93.1239 109.838C93.4779 108.894 95.5463 108.823 96.2743 109.729C96.4455 109.943 96.4859 109.952 96.4411 109.767C96.2131 108.823 93.8043 108.529 93.0383 109.353ZM113.347 109.789C113.286 109.89 113.335 110.029 113.458 110.098C113.622 110.19 113.666 110.504 113.626 111.293C113.567 112.481 113.313 112.713 112.442 112.377C112.104 112.247 112.032 112.258 112.098 112.431C112.354 113.109 113.714 112.796 113.866 112.024C113.919 111.755 114.164 111.397 114.421 111.211C114.889 110.873 115.006 110.382 114.724 109.931C114.529 109.618 114.031 109.617 113.891 109.929C113.802 110.128 113.78 110.121 113.771 109.889C113.758 109.569 113.516 109.511 113.347 109.789ZM96.2727 110.308C96.0939 110.778 96.1375 110.902 96.4799 110.902C96.7275 110.902 96.7951 110.801 96.7783 110.456C96.7567 110.014 96.7555 110.014 96.6735 110.416L96.5911 110.821L96.4883 110.416C96.3979 110.061 96.3711 110.047 96.2727 110.308ZM107.456 110.228C107.332 110.43 107.631 110.79 107.822 110.67C107.92 110.609 108 110.498 108 110.423C108 110.239 107.548 110.076 107.456 110.228ZM121.48 110.694C121.37 110.734 121.28 110.823 121.28 110.891C121.28 111.066 122.039 111.003 122.192 110.815C122.263 110.729 122.255 110.713 122.175 110.779C122.095 110.845 121.951 110.837 121.855 110.76C121.759 110.684 121.59 110.654 121.48 110.694ZM120.16 111.03C119.94 111.065 119.651 111.192 119.518 111.312C119.386 111.432 119.074 111.568 118.825 111.613C118.238 111.721 117.989 111.941 117.501 112.785C117.281 113.165 116.896 113.609 116.646 113.77C115.742 114.352 114.197 115.991 114.053 116.519C113.969 116.827 113.773 117.089 113.579 117.151C113.397 117.21 113.111 117.396 112.944 117.566C112.777 117.735 112.474 117.874 112.27 117.874C111.835 117.874 111.519 118.113 111.145 118.725C110.995 118.971 110.771 119.171 110.648 119.171C110.13 119.171 108.32 121.192 108.315 121.777C108.311 122.225 108.279 122.279 108.151 122.056C107.71 121.289 106.232 121.568 105.852 122.489C105.632 123.024 105.568 123.062 104.901 123.062C103.957 123.062 103.715 123.173 103.43 123.73C103.217 124.148 103.109 124.197 102.418 124.197C101.489 124.197 100.867 124.619 100.672 125.381C100.549 125.861 100.488 125.899 99.7503 125.945C98.8407 126.002 98.1375 126.238 97.6799 126.637C97.3075 126.962 97.0083 127.058 95.9375 127.194C95.0595 127.306 94.2583 127.671 93.9623 128.096C93.6583 128.533 92.8627 128.766 92.6335 128.486C92.1359 127.878 90.6839 128.077 90.0967 128.833C89.7427 129.29 89.2743 129.498 88.3147 129.624C87.5055 129.73 86.5331 130.255 86.5723 130.563C86.6355 131.061 86.5459 131.504 86.3999 131.413C86.3119 131.357 86.2399 131.389 86.2399 131.484C86.2399 131.816 86.8791 131.668 86.8999 131.332C86.9111 131.153 86.9287 130.843 86.9399 130.642C86.9811 129.89 89.4631 129.409 90.0799 130.034L90.3999 130.359V129.654C90.3999 128.503 91.1951 128.035 92.2371 128.574C92.8367 128.883 94.3231 128.843 94.8675 128.502C94.9471 128.452 95.0491 128.503 95.0935 128.615C95.1395 128.73 95.1879 128.678 95.2059 128.494C95.2227 128.316 95.2467 128.063 95.2583 127.932C95.2863 127.624 96.3387 127.306 97.3855 127.291C98.0903 127.28 98.2679 127.21 98.5967 126.814C98.9043 126.443 99.1651 126.327 99.8879 126.235C100.776 126.123 100.797 126.108 100.962 125.486C101.158 124.751 101.383 124.595 102.48 124.441C103.096 124.354 103.375 124.214 103.695 123.833C104.028 123.437 104.249 123.332 104.815 123.305C105.881 123.255 105.89 123.251 106.008 122.86C106.306 121.861 106.85 121.619 107.75 122.084C108.493 122.469 108.64 122.403 108.64 121.682C108.64 121.27 108.745 121.058 109.059 120.841C109.29 120.68 109.661 120.377 109.883 120.168C110.106 119.958 110.511 119.66 110.784 119.506C111.057 119.352 111.361 119.062 111.462 118.861C111.789 118.201 111.911 118.157 112.851 118.354C113.553 118.502 113.813 118.497 114.108 118.329C114.312 118.213 114.502 118.107 114.529 118.095C114.556 118.082 114.617 117.608 114.664 117.041L114.749 116.01L115.895 114.906C117.181 113.666 117.345 113.496 117.943 112.781C118.363 112.28 119.387 111.875 120.233 111.875C120.446 111.875 120.666 111.801 120.721 111.71C120.777 111.62 120.877 111.58 120.944 111.622C121.011 111.664 121.067 111.592 121.067 111.462C121.067 111.333 121.031 111.262 120.989 111.305C120.946 111.348 120.832 111.29 120.736 111.175C120.639 111.06 120.38 110.995 120.16 111.03ZM34.0207 111.248C33.6143 111.491 33.9559 111.707 34.7503 111.71C35.0751 111.712 35.3891 111.792 35.4479 111.888C35.5071 111.985 35.8711 112.201 36.2575 112.369C36.7579 112.586 37.0371 112.838 37.2295 113.247C37.3779 113.563 37.5603 113.821 37.6347 113.821C38.0083 113.821 39.9999 116.027 39.9999 116.441C39.9999 117.03 39.8479 117.388 39.5979 117.388C39.4655 117.388 39.4187 117.52 39.4687 117.752C39.5323 118.046 39.5139 118.069 39.3763 117.874C39.2247 117.659 39.2047 117.66 39.2023 117.882C39.1991 118.205 39.5135 118.523 39.8319 118.52C40.0503 118.518 40.0515 118.499 39.8399 118.36C39.4495 118.105 39.9075 118.176 40.4655 118.459C40.7923 118.624 41.1367 118.678 41.4099 118.608C43.0539 118.183 43.2659 118.293 43.2743 119.577C43.2779 120.067 43.3483 120.375 43.4531 120.356C43.5487 120.338 43.6267 120.422 43.6267 120.543C43.6267 120.673 43.5231 120.725 43.3731 120.671C43.1871 120.605 43.2051 120.669 43.4399 120.911C43.7539 121.235 43.7663 121.235 44.0903 120.936C44.8915 120.195 46.2399 120.701 46.2399 121.743C46.2399 122.273 46.6487 122.631 46.8595 122.285C47.2931 121.574 48.4111 121.805 48.8303 122.691C49.0015 123.053 49.2019 123.168 49.8951 123.302C50.4363 123.407 50.8519 123.597 51.0303 123.82C51.1847 124.014 51.5895 124.29 51.9299 124.434C52.7907 124.799 53.1199 125.144 53.1199 125.682C53.1199 126.128 53.1463 126.143 53.9303 126.143C55.0435 126.143 55.3599 126.344 55.3599 127.05C55.3599 127.364 55.2943 127.58 55.2139 127.53C55.0015 127.397 55.0979 127.85 55.3467 128.154C55.4635 128.296 55.6335 128.413 55.7243 128.413C55.8151 128.413 55.7523 128.255 55.5847 128.061C55.4171 127.867 55.3699 127.762 55.4799 127.827C55.5899 127.893 55.6799 127.871 55.6799 127.78C55.6799 127.511 56.9719 127.239 57.8867 127.316C58.8591 127.398 59.1731 127.638 59.2263 128.343L59.2635 128.84L60.7259 128.809C61.5303 128.791 62.3391 128.695 62.5235 128.595C63.4407 128.098 64.4799 128.575 64.4799 129.493C64.4799 129.986 64.5203 130.049 64.7599 129.932C65.8787 129.386 67.8399 130.075 67.8399 131.015C67.8399 132.021 68.8955 131.962 68.9347 130.953C68.9747 129.919 70.1627 129.546 71.6651 130.097C72.1643 130.28 72.6835 131.007 72.3147 131.007C72.2295 131.007 72.1599 131.153 72.1599 131.332C72.1599 131.624 72.2659 131.655 73.2399 131.653C73.8339 131.652 74.2463 131.597 74.1563 131.532C74.0667 131.466 73.9695 131.157 73.9411 130.845C73.8767 130.139 74.0515 130.248 72.3851 129.874C69.7143 129.276 68.6399 129.55 68.6399 130.83C68.6399 131.272 68.5719 131.44 68.3919 131.44C68.2391 131.44 68.1539 131.31 68.1695 131.102C68.2291 130.319 68.1547 130.218 67.2739 129.884C66.7867 129.699 66.1415 129.548 65.8403 129.548C65.4083 129.548 65.1699 129.413 64.7087 128.908C63.9915 128.123 63.4623 127.985 62.5631 128.349C61.8103 128.655 61.0515 128.507 60.3999 127.927C60.0247 127.594 58.3767 126.954 57.8927 126.954C57.7083 126.954 57.3279 126.81 57.0467 126.634C56.7659 126.458 55.9503 126.172 55.2343 125.999C53.7951 125.651 53.6003 125.565 53.5987 125.282C53.5979 125.078 52.8447 124.562 52.1403 124.283C51.9091 124.191 51.5247 123.879 51.2859 123.589C50.9043 123.127 50.7559 123.062 50.0691 123.062C49.3211 123.062 49.2723 123.035 48.9699 122.434C48.5375 121.574 47.6735 121.317 46.9483 121.832C46.6559 122.04 46.6235 122.029 46.5999 121.714C46.5415 120.926 45.7327 120.144 44.9751 120.144C44.7907 120.144 44.6399 120.079 44.6399 119.999C44.6399 119.92 44.4623 119.81 44.2455 119.754C43.9563 119.681 43.8071 119.487 43.6843 119.026C43.4827 118.267 43.2215 118.025 42.5487 117.973C42.2679 117.951 41.9471 117.807 41.8355 117.652C41.7235 117.497 41.3911 117.303 41.0963 117.22C40.6395 117.092 40.5547 116.991 40.5247 116.54C40.4895 116.003 38.3271 113.659 37.8667 113.658C37.7639 113.658 37.4999 113.313 37.2799 112.891C37.0463 112.444 36.6799 112.024 36.3999 111.882C36.1359 111.748 35.7399 111.53 35.5199 111.397C35.0011 111.084 34.3967 111.023 34.0207 111.248ZM32.8051 111.336C32.7987 111.577 33.2439 112.037 33.4835 112.037C33.5939 112.037 33.5767 111.958 33.4391 111.834C33.3155 111.723 33.1235 111.522 33.0123 111.389C32.8843 111.235 32.8083 111.215 32.8051 111.336ZM121.56 111.564C121.406 111.735 121.28 111.914 121.28 111.962C121.28 112.138 121.885 111.714 121.976 111.474C122.102 111.141 121.903 111.184 121.56 111.564ZM114.764 117.71C114.754 117.846 114.722 118.058 114.693 118.18C114.663 118.301 114.742 118.438 114.866 118.484C115.016 118.539 115.06 118.486 114.998 118.321C114.947 118.186 114.98 118 115.072 117.907C115.164 117.813 115.348 117.78 115.481 117.832C115.637 117.892 115.698 117.849 115.653 117.711C115.551 117.402 114.787 117.401 114.764 117.71ZM114.175 118.894C114.24 119.102 114.214 119.174 114.099 119.102C113.985 119.031 113.961 119.091 114.03 119.272C114.112 119.489 114.073 119.527 113.859 119.444C113.68 119.375 113.622 119.399 113.692 119.514C113.763 119.631 113.692 119.658 113.487 119.592C113.274 119.523 113.173 119.566 113.173 119.726C113.173 119.924 113.25 119.929 113.658 119.76C114.203 119.535 114.729 118.577 114.307 118.577C114.15 118.577 114.107 118.679 114.175 118.894ZM40.4799 118.857C40.4799 119.229 40.8139 119.631 41.2499 119.785C41.6111 119.913 41.7067 119.898 41.7067 119.718C41.7067 119.566 41.6027 119.524 41.3931 119.592C41.1879 119.658 41.1171 119.631 41.1883 119.514C41.2583 119.399 41.1995 119.375 41.0203 119.444C40.8063 119.527 40.7683 119.489 40.8503 119.272C40.9219 119.083 40.8959 119.03 40.7707 119.108C40.6471 119.186 40.6195 119.135 40.6875 118.955C40.7439 118.806 40.7203 118.685 40.6347 118.685C40.5495 118.685 40.4799 118.763 40.4799 118.857ZM108.923 122.863C108.872 123.062 108.661 123.292 108.455 123.376C108.221 123.471 108.176 123.532 108.335 123.539C108.66 123.552 109.174 122.984 109.084 122.711C109.046 122.593 108.976 122.66 108.923 122.863ZM82.3295 129.888C81.6311 130.062 81.0315 130.232 80.9975 130.266C80.8567 130.409 80.8515 130.94 80.9895 131.116C81.0879 131.242 81.0407 131.363 80.8487 131.476C80.6259 131.607 80.8071 131.647 81.6399 131.651C82.6471 131.655 83.2383 131.233 82.5795 130.98C82.2367 130.848 82.7359 130.207 83.3051 130.048C84.7007 129.657 85.8915 130.122 85.8275 131.032C85.7895 131.575 85.8183 131.646 86.0111 131.484C86.3131 131.23 86.3035 130.446 85.9947 130.133C85.3787 129.509 84.1743 129.428 82.3295 129.888ZM105.502 136.115C105.502 137.274 105.528 137.727 105.559 137.121C105.59 136.515 105.59 135.567 105.558 135.013C105.527 134.46 105.502 134.955 105.502 136.115ZM143.068 142.528C142.863 142.791 142.76 143.005 142.84 143.005C143.004 143.005 143.68 142.312 143.68 142.144C143.68 141.909 143.425 142.069 143.068 142.528ZM105.502 149.248C105.502 150.407 105.528 150.86 105.559 150.254C105.59 149.649 105.59 148.7 105.558 148.146C105.527 147.593 105.502 148.088 105.502 149.248ZM30.1171 162.624C30.1171 162.936 30.1499 163.064 30.1903 162.908C30.2303 162.752 30.2303 162.496 30.1903 162.34C30.1499 162.184 30.1171 162.312 30.1171 162.624ZM13.6399 169.226C13.8819 169.263 14.2779 169.263 14.5199 169.226C14.7619 169.189 14.5639 169.158 14.0799 169.158C13.5959 169.158 13.3979 169.189 13.6399 169.226ZM92.9999 169.226C93.2419 169.263 93.6379 169.263 93.8799 169.226C94.1219 169.189 93.9239 169.158 93.4399 169.158C92.9559 169.158 92.7579 169.189 92.9999 169.226ZM148.04 169.226C148.282 169.263 148.678 169.263 148.92 169.226C149.162 169.189 148.964 169.158 148.48 169.158C147.996 169.158 147.798 169.189 148.04 169.226Z\" fill=\"url(#paint3_linear)\"/>\r\n<defs>\r\n<linearGradient id=\"paint0_linear\" x1=\"70.5659\" y1=\"46.3311\" x2=\"70.5659\" y2=\"75.5777\" gradientUnits=\"userSpaceOnUse\">\r\n<stop stop-color=\"#E78C57\"/>\r\n<stop offset=\"1\" stop-color=\"#DB723E\"/>\r\n</linearGradient>\r\n<linearGradient id=\"paint1_linear\" x1=\"77.1281\" y1=\"14.8544\" x2=\"77.1281\" y2=\"169.272\" gradientUnits=\"userSpaceOnUse\">\r\n<stop stop-color=\"#E78C57\"/>\r\n<stop offset=\"1\" stop-color=\"#DB723E\"/>\r\n</linearGradient>\r\n<linearGradient id=\"paint2_linear\" x1=\"67.52\" y1=\"14.9167\" x2=\"67.52\" y2=\"157.54\" gradientUnits=\"userSpaceOnUse\">\r\n<stop stop-color=\"#E78C57\"/>\r\n<stop offset=\"1\" stop-color=\"#DB723E\"/>\r\n</linearGradient>\r\n<linearGradient id=\"paint3_linear\" x1=\"81.2799\" y1=\"14.8839\" x2=\"81.2799\" y2=\"169.254\" gradientUnits=\"userSpaceOnUse\">\r\n<stop stop-color=\"#E78C57\"/>\r\n<stop offset=\"1\" stop-color=\"#DB723E\"/>\r\n</linearGradient>\r\n</defs>\r\n</svg>\r\n","import React from 'react';\r\nconst Corona=()=>{\r\n    return (<svg className=\"linkimg\" width=\"162\" height=\"172\" viewBox=\"0 0 162 172\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M75.3109 10.8905C75.4834 10.9913 74.997 11.0585 74.5045 11.0017C74.2332 10.9704 74.0748 10.979 74.0748 11.0241C74.0748 11.1279 73.537 11.2066 73.4236 11.1197C73.3025 11.0275 72.9919 11.0461 73.0105 11.145C73.019 11.1902 72.8764 11.2126 72.6492 11.2017C72.3981 11.1898 72.2353 11.2193 72.1576 11.2913C72.0243 11.4141 71.7732 11.4339 71.7015 11.3271C71.6752 11.2879 71.5837 11.2555 71.4978 11.2555C71.4124 11.2555 71.3642 11.2879 71.3909 11.3279C71.4549 11.4234 71.1021 11.5473 71.0053 11.4633C70.8899 11.363 70.6724 11.3876 70.623 11.5066C70.5728 11.6275 70.297 11.6521 70.2233 11.5424C70.15 11.4331 69.9499 11.4566 69.9965 11.5689C70.0216 11.629 69.9681 11.6839 69.858 11.7104C69.7596 11.7342 69.6668 11.7223 69.6526 11.6839C69.6089 11.5659 69.3286 11.6051 69.3286 11.7294C69.3286 11.8182 69.2683 11.8384 69.0682 11.8167C68.92 11.801 68.7681 11.8283 68.7151 11.8805C68.6045 11.9895 68.3947 12.0029 68.3947 11.9007C68.3947 11.8615 68.3161 11.8298 68.2197 11.8301C68.0808 11.8313 68.0683 11.8451 68.1594 11.8981C68.253 11.9529 68.2388 11.9775 68.0816 12.0324C67.9537 12.0768 67.8536 12.0731 67.7844 12.0216C67.7058 11.963 67.6608 11.9742 67.6054 12.0656C67.5256 12.197 67.3053 12.2339 67.3053 12.116C67.3053 12.0764 67.251 12.0443 67.1842 12.0443C67.1173 12.0443 67.0833 12.0749 67.1084 12.1122C67.1335 12.1499 67.0833 12.2152 66.9962 12.2581C66.8901 12.3108 66.8387 12.3119 66.8387 12.2619C66.8387 12.2208 66.786 12.1876 66.7216 12.1876C66.6577 12.1876 66.605 12.2361 66.605 12.2951C66.605 12.4149 66.33 12.4432 66.2551 12.3309C66.1826 12.2231 66.0595 12.2451 66.1065 12.3574C66.1287 12.4115 66.0846 12.4779 66.008 12.5052C65.9315 12.532 65.8566 12.5201 65.8416 12.4783C65.7991 12.3615 65.6715 12.3888 65.6715 12.5149C65.6715 12.5951 65.6103 12.6209 65.4572 12.6044C65.337 12.5918 65.1989 12.6291 65.1413 12.6895C65.0636 12.7712 65.0296 12.7753 64.9988 12.7074C64.9765 12.6582 64.9064 12.6179 64.8433 12.6179C64.7801 12.6179 64.7489 12.6485 64.774 12.6858C64.7991 12.7231 64.7489 12.7888 64.6622 12.8317C64.5557 12.8843 64.5043 12.8854 64.5043 12.8354C64.5043 12.7944 64.469 12.7612 64.4265 12.7612C64.3836 12.7612 64.3488 12.8097 64.3488 12.8686C64.3488 12.928 64.2961 12.9761 64.2321 12.9761C64.1677 12.9761 64.1151 12.9377 64.1151 12.891C64.1151 12.844 64.0438 12.8765 63.9567 12.9627C63.7737 13.1436 63.719 13.1533 63.5748 13.0298C63.491 12.9582 63.4808 12.9582 63.525 13.0306C63.6064 13.163 63.3581 13.2246 63.2046 13.1097C63.0916 13.025 63.0811 13.028 63.1232 13.1317C63.1828 13.2787 62.9499 13.3806 62.8584 13.2474C62.8122 13.1806 62.7944 13.191 62.7936 13.2858C62.7927 13.3802 62.7437 13.4097 62.6174 13.3929C62.521 13.3799 62.3962 13.4179 62.34 13.4776C62.2626 13.5593 62.2282 13.5638 62.1974 13.4959C62.1419 13.3731 62.0143 13.3828 62.0143 13.5097C62.0143 13.6515 61.8544 13.731 61.7831 13.6246C61.7401 13.5608 61.7122 13.5679 61.6774 13.6511C61.6211 13.7866 61.421 13.8019 61.3655 13.675C61.3424 13.6224 61.3238 13.6377 61.3202 13.7127C61.3137 13.8474 60.9306 14.025 60.8536 13.9288C60.773 13.828 60.6183 13.8351 60.6608 13.9377C60.6835 13.9922 60.658 14.0624 60.6041 14.0929C60.5486 14.1247 60.4932 14.1124 60.4757 14.0642C60.4267 13.9288 60.3243 13.9668 60.2757 14.1381C60.251 14.225 60.2064 14.2736 60.1764 14.2463C60.1469 14.2187 60.0695 14.2362 60.0051 14.2851C59.912 14.356 59.8816 14.356 59.8553 14.2844C59.8042 14.1444 59.7026 14.1791 59.6532 14.353C59.6285 14.44 59.5839 14.4889 59.554 14.4613C59.5244 14.4336 59.447 14.4512 59.3826 14.5004C59.2895 14.5713 59.2591 14.571 59.2328 14.4997C59.1822 14.3612 59.0574 14.3937 59.0574 14.5456C59.0574 14.6848 58.7318 14.8128 58.5872 14.7307C58.5463 14.7075 58.5127 14.7202 58.5127 14.759C58.5127 14.7978 58.4078 14.8781 58.2794 14.937C58.1255 15.0076 58.0461 15.0169 58.0461 14.9643C58.0461 14.9202 57.9943 14.9471 57.9307 15.0236C57.8311 15.1441 57.8052 15.1482 57.7375 15.0553C57.6707 14.9635 57.6594 14.9661 57.6582 15.0755C57.6573 15.1456 57.5958 15.2229 57.5209 15.2471C57.4459 15.2717 57.2309 15.3542 57.0434 15.4307C56.7651 15.5438 56.6898 15.552 56.6359 15.4736C56.5853 15.4001 56.5699 15.4068 56.5687 15.5027C56.5679 15.5848 56.3873 15.7106 56.0426 15.8692C55.7166 16.0188 55.5266 16.1483 55.542 16.2102C55.5615 16.2871 55.5461 16.2905 55.4736 16.2248C55.3407 16.105 55.005 16.3106 55.0625 16.4767C55.0965 16.5755 55.0901 16.5785 55.0244 16.4931C54.9556 16.4039 54.9001 16.4091 54.6288 16.5289C54.2995 16.6744 54.2136 16.7759 54.4473 16.7435C54.5222 16.7334 54.5409 16.7386 54.4882 16.755C54.4206 16.7767 54.4032 16.9345 54.4283 17.3006C54.4473 17.5838 54.4643 17.9122 54.4659 18.0305C54.468 18.1745 54.4906 18.2141 54.5344 18.1506C54.5704 18.0984 54.5858 17.9383 54.5684 17.7946C54.5514 17.6514 54.5635 17.5581 54.5955 17.5875C54.6275 17.617 54.6656 17.8417 54.6798 18.0868C54.7158 18.6995 54.7179 18.71 54.7912 18.6682C54.8515 18.6339 54.8888 18.7425 54.8632 18.8783C54.8572 18.9107 54.8831 18.9193 54.9212 18.8977C54.9592 18.876 54.9807 18.7772 54.969 18.6779C54.9572 18.5783 54.9734 18.4824 55.0046 18.4645C55.0362 18.4465 55.0702 18.632 55.0803 18.8764C55.105 19.4802 55.1079 19.4981 55.1678 19.4638C55.1966 19.4473 55.2107 19.2955 55.199 19.1264C55.1856 18.9335 55.2018 18.8589 55.2427 18.9264C55.2784 18.9858 55.3108 19.1794 55.3148 19.3567C55.3254 19.8212 55.342 19.9276 55.3995 19.8951C55.4274 19.8791 55.4412 19.7112 55.4307 19.522C55.4173 19.2858 55.4331 19.2141 55.4817 19.2936C55.5206 19.3574 55.5522 19.5992 55.5513 19.8313C55.5505 20.3847 55.5688 20.5052 55.6469 20.4605C55.7089 20.4254 55.7453 20.5381 55.7166 20.6773C55.7089 20.7135 55.7567 20.7023 55.8219 20.6523C55.9248 20.5735 55.9414 20.594 55.9438 20.8011C55.9478 21.1739 55.9669 21.2885 56.0199 21.2583C56.0471 21.243 56.0629 21.0456 56.0556 20.8198C56.0458 20.5362 56.0641 20.4459 56.1135 20.5276C56.1532 20.5926 56.1795 20.7993 56.1726 20.987C56.1548 21.4504 56.1823 21.7777 56.2301 21.6687C56.2937 21.5232 56.3905 21.5661 56.3921 21.7404C56.3946 22.0747 56.4136 22.1751 56.4654 22.1273C56.4946 22.1005 56.5165 21.9255 56.5136 21.7393C56.5108 21.5527 56.5242 21.4885 56.5432 21.5971C56.5622 21.7057 56.6145 21.7941 56.659 21.7941C56.7036 21.7941 56.719 21.8445 56.6934 21.9057C56.6671 21.9695 56.6801 21.9982 56.7242 21.9729C56.77 21.9467 56.8012 22.0452 56.8012 22.2158C56.8012 22.3736 56.8356 22.5225 56.8781 22.5464C56.9235 22.5721 56.9344 22.5412 56.9049 22.4703C56.8615 22.3658 56.8769 22.3677 57.0227 22.4826C57.1146 22.5553 57.19 22.621 57.19 22.6285C57.19 22.6647 56.8117 22.5975 56.7157 22.5442C56.6262 22.4945 56.6238 22.5035 56.7032 22.5938C56.7562 22.6542 56.7753 22.7263 56.7449 22.7539C56.7149 22.7819 56.8384 22.7826 57.0195 22.7561C57.3188 22.7121 57.3439 22.7199 57.2977 22.8423C57.2487 22.9725 57.2511 22.9722 57.3625 22.8404C57.4378 22.7516 57.5354 22.7177 57.6415 22.7434C57.7315 22.7651 57.8214 22.7457 57.8416 22.7009C57.8667 22.6442 57.8801 22.6468 57.8841 22.7083C57.8914 22.8132 58.1713 22.8296 58.2385 22.7292C58.2636 22.6915 58.3361 22.6792 58.3997 22.7016C58.4629 22.724 58.5682 22.7016 58.6334 22.6516C58.6986 22.602 58.8642 22.5654 59.0019 22.5703C59.1396 22.5755 59.5321 22.5341 59.8747 22.4785C62.2428 22.0941 66.9618 21.9807 69.4842 22.2479C71.403 22.4509 74.2915 22.9438 74.3859 23.0841C74.4179 23.1322 74.5232 23.1453 74.6463 23.1169C74.8059 23.08 74.8528 23.0953 74.8528 23.1845C74.8528 23.3158 74.9808 23.3412 75.025 23.2184C75.0428 23.1692 75.1222 23.1572 75.2271 23.1878C75.3222 23.2158 75.3801 23.2677 75.3558 23.3039C75.3307 23.3412 75.4138 23.3505 75.5494 23.3255C75.7361 23.2912 75.7868 23.3069 75.7868 23.3983C75.7868 23.5282 75.9062 23.5547 75.982 23.442C76.0524 23.3371 76.1942 23.4386 76.1444 23.558C76.0942 23.6785 76.1885 23.6894 76.3104 23.577C76.4145 23.4811 76.6745 23.5528 76.6041 23.6576C76.5773 23.6976 76.5927 23.73 76.6381 23.73C76.6834 23.73 76.7203 23.6965 76.7203 23.6558C76.7203 23.6058 76.7717 23.6069 76.8782 23.6591C76.9649 23.7021 77.018 23.764 76.9957 23.7972C76.9738 23.83 77.0224 23.8733 77.1046 23.8927C77.2087 23.9181 77.2411 23.8991 77.212 23.8293C77.1893 23.7748 77.2103 23.73 77.2593 23.73C77.3079 23.73 77.3683 23.7793 77.3934 23.8397C77.4222 23.9088 77.493 23.9334 77.5854 23.9065C77.6862 23.8771 77.732 23.8987 77.732 23.9759C77.732 24.108 77.964 24.1304 77.9677 23.9987C77.9693 23.9375 78.0005 23.9442 78.0649 24.0192C78.1171 24.0801 78.2212 24.1177 78.2961 24.1036C78.3861 24.0868 78.4326 24.1222 78.4334 24.2084C78.4342 24.3107 78.4492 24.3178 78.5027 24.2405C78.5869 24.1174 78.7692 24.2095 78.7125 24.3465C78.6647 24.4607 78.787 24.4842 78.8603 24.3752C78.9373 24.2603 79.0547 24.2924 79.0559 24.429C79.0567 24.5282 79.0713 24.5338 79.1252 24.4555C79.2046 24.3398 79.3657 24.4088 79.3657 24.5584C79.3657 24.6853 79.4937 24.695 79.5484 24.5722C79.5747 24.5122 79.6403 24.5416 79.7477 24.6618C79.8351 24.7603 79.908 24.7988 79.9089 24.7473C79.9097 24.6958 79.9461 24.6737 79.9899 24.6984C80.0332 24.7234 80.0486 24.7734 80.0239 24.8103C79.9992 24.8469 80.0162 24.8771 80.0615 24.8771C80.1069 24.8771 80.1442 24.8446 80.1442 24.8055C80.1442 24.7659 80.179 24.7334 80.2219 24.7334C80.2644 24.7334 80.2997 24.779 80.2997 24.8346C80.2997 24.8999 80.354 24.9223 80.4552 24.8976C80.5654 24.8711 80.6107 24.8954 80.6107 24.9809C80.6107 25.0689 80.6528 25.0894 80.7666 25.0562C80.8821 25.0223 80.9238 25.0443 80.9282 25.1409C80.9319 25.2163 80.9509 25.2335 80.9736 25.1816C81.0319 25.0488 81.1554 25.073 81.1567 25.2174C81.1575 25.3025 81.1769 25.3152 81.217 25.257C81.2526 25.2055 81.3183 25.195 81.3814 25.2312C81.4394 25.2641 81.4649 25.3238 81.4381 25.3633C81.4118 25.4029 81.4422 25.454 81.5062 25.4768C81.5807 25.5029 81.624 25.4734 81.6273 25.3947C81.6309 25.3096 81.6576 25.3268 81.7139 25.4507C81.7621 25.5563 81.8107 25.5932 81.8322 25.5402C81.8848 25.4111 82.0116 25.4298 82.0116 25.5667C82.0116 25.6622 82.0327 25.6671 82.1283 25.5939C82.2234 25.5208 82.2449 25.5253 82.2449 25.6186C82.2449 25.6906 82.2878 25.7175 82.3615 25.6913C82.4377 25.6645 82.4782 25.6936 82.4782 25.7742C82.4782 25.8764 82.4988 25.8824 82.5952 25.8089C82.6912 25.7354 82.7119 25.7417 82.7119 25.8436C82.7119 25.9205 82.7532 25.9529 82.8208 25.929C82.8876 25.9055 82.948 25.9511 82.9763 26.047C83.0148 26.1757 83.0359 26.1846 83.0966 26.0977C83.1594 26.0078 83.1784 26.0115 83.2242 26.1216C83.2659 26.2216 83.2926 26.2298 83.3412 26.1574C83.3874 26.0884 83.4247 26.1104 83.481 26.241C83.5231 26.3384 83.5599 26.3779 83.5628 26.3287C83.5697 26.2018 83.7231 26.2167 83.7231 26.3444C83.7231 26.4085 83.7689 26.4335 83.8398 26.4085C83.9042 26.3858 83.9568 26.4063 83.9568 26.4541C83.9568 26.5022 84.0091 26.5227 84.0735 26.5C84.1415 26.4757 84.1901 26.4988 84.1901 26.5552C84.1901 26.6082 84.2436 26.6925 84.3088 26.7425C84.4084 26.8186 84.4189 26.813 84.3748 26.7071C84.3286 26.5966 84.3436 26.5914 84.4918 26.6645C84.585 26.7104 84.6376 26.7839 84.6081 26.8272C84.5757 26.8757 84.5907 26.8862 84.647 26.8545C84.6984 26.825 85.173 27.0131 85.7287 27.2832C87.8533 28.3157 89.8305 29.3143 91.5822 30.2393C95.1356 32.1167 98.2959 33.4418 100.219 33.8616C101.319 34.1015 101.646 34.1302 103.2 34.1224C104.083 34.1179 104.841 34.1347 104.885 34.1597C104.929 34.1847 104.965 34.1761 104.965 34.1407C104.965 34.1048 105.266 34.0216 105.633 33.9548C107.99 33.5283 110.207 32.2521 111.8 30.4039C112.018 30.1517 112.18 29.921 112.16 29.8919C112.141 29.8625 112.17 29.8225 112.226 29.8031C112.333 29.7651 112.868 28.8919 112.784 28.8919C112.757 28.8919 112.788 28.8434 112.852 28.784C113.011 28.6381 113.308 27.8888 113.257 27.7653C113.233 27.7105 113.25 27.6851 113.292 27.7094C113.372 27.7549 113.403 27.5739 113.377 27.2071C113.366 27.0343 113.38 27.0131 113.449 27.0992C113.516 27.1832 113.528 27.1493 113.507 26.9433C113.491 26.7981 113.507 26.6951 113.541 26.7145C113.617 26.7578 113.623 26.5686 113.547 26.4992C113.457 26.416 113.432 25.145 113.519 25.095C113.564 25.0697 113.578 24.9357 113.551 24.7857C113.525 24.6405 113.471 24.5402 113.431 24.5637C113.389 24.5872 113.364 24.5155 113.374 24.4006C113.409 23.9987 113.375 23.8263 113.284 23.945C113.22 24.0278 113.211 24.0073 113.247 23.8554C113.273 23.7468 113.262 23.6584 113.223 23.6584C113.184 23.6584 113.154 23.6181 113.156 23.5685C113.166 23.3214 113.129 23.2233 113.044 23.2714C112.983 23.3061 112.969 23.2841 113.003 23.2039C113.03 23.1382 113.019 23.0849 112.978 23.0849C112.936 23.0849 112.906 23.0606 112.911 23.0311C112.939 22.8688 112.892 22.7236 112.824 22.7621C112.781 22.7863 112.743 22.7804 112.74 22.7483C112.736 22.7166 112.724 22.6128 112.713 22.5184C112.702 22.4236 112.628 22.3027 112.549 22.2497C112.47 22.1964 112.436 22.1527 112.474 22.1527C112.512 22.1527 112.475 22.102 112.391 22.04C112.308 21.9777 112.293 21.9482 112.357 21.9743C112.421 22.0005 112.395 21.962 112.298 21.8893C112.201 21.8161 112.106 21.6788 112.086 21.5837C112.066 21.4885 112.009 21.3758 111.959 21.3336C111.891 21.2765 111.884 21.2844 111.933 21.3642C111.989 21.4557 111.979 21.4575 111.871 21.3769C111.801 21.3247 111.762 21.2396 111.783 21.1881C111.805 21.1366 111.728 21.0262 111.612 20.9426C111.497 20.859 111.434 20.79 111.471 20.7892C111.509 20.7885 111.365 20.6392 111.151 20.4582C110.937 20.2769 110.832 20.1724 110.918 20.2254C111.071 20.3209 111.072 20.3202 110.927 20.1638C110.846 20.0765 110.741 20.0257 110.693 20.0511C110.646 20.0761 110.633 20.0701 110.664 20.038C110.743 19.9578 110.57 19.7772 110.469 19.8347C110.424 19.8601 110.409 19.8489 110.436 19.8097C110.507 19.7037 109.902 19.1854 109.784 19.2522C109.727 19.2846 109.708 19.2779 109.736 19.235C109.763 19.1951 109.698 19.0876 109.593 18.9962C109.487 18.9048 109.401 18.8589 109.401 18.8943C109.401 18.9294 109.345 18.8861 109.279 18.7981C109.211 18.7096 109.123 18.6566 109.082 18.6798C109.041 18.7033 109.017 18.6906 109.029 18.6522C109.041 18.6141 109.022 18.5805 108.988 18.5783C108.953 18.5764 108.858 18.5003 108.776 18.41C108.695 18.3197 108.627 18.2768 108.625 18.3152C108.624 18.3536 108.567 18.3126 108.5 18.2245C108.433 18.1361 108.35 18.0805 108.314 18.1006C108.279 18.1208 108.229 18.0887 108.205 18.0294C108.18 17.97 108.132 17.9256 108.099 17.9308C107.946 17.954 107.839 17.9167 107.881 17.8547C107.938 17.77 107.654 17.6222 107.57 17.6924C107.536 17.7208 107.534 17.7032 107.564 17.654C107.615 17.5722 107.523 17.5304 107.352 17.5577C107.317 17.5633 107.307 17.5394 107.331 17.5047C107.354 17.47 107.243 17.3804 107.084 17.3058C106.924 17.2312 106.768 17.1379 106.737 17.0983C106.699 17.0506 106.679 17.0506 106.677 17.0983C106.676 17.1401 106.651 17.1371 106.618 17.0912C106.51 16.9424 105.893 16.6274 105.806 16.6767C105.754 16.7069 105.741 16.6938 105.775 16.6435C105.824 16.5707 105.78 16.5491 105.619 16.5655C105.594 16.5681 105.533 16.5214 105.483 16.4621C105.434 16.4024 105.342 16.3438 105.278 16.3319C105.215 16.3196 105.116 16.2692 105.058 16.2196C105 16.1699 104.92 16.1475 104.881 16.1699C104.842 16.1923 104.81 16.1748 104.81 16.1307C104.81 16.0867 104.778 16.0688 104.739 16.0908C104.699 16.1132 104.656 16.1031 104.641 16.0681C104.606 15.9822 103.487 15.4695 103.486 15.5382C103.485 15.5684 103.459 15.558 103.428 15.515C103.26 15.2867 100.025 14.0855 97.5345 13.3265C95.9675 12.8492 93.3314 12.1757 92.2524 11.9775C92.0763 11.9451 91.5644 11.8503 91.1152 11.7667C89.5628 11.4786 89.4454 11.4607 87.4589 11.2122C86.9668 11.1506 86.5468 11.0786 86.5249 11.0525C86.5035 11.0264 86.2228 11.0036 85.902 11.0025C85.5809 11.0014 84.8474 10.9611 84.2719 10.9129C83.127 10.8174 77.5639 10.7999 76.5259 10.889C76.1837 10.9185 75.8917 10.9159 75.8775 10.8838C75.8633 10.8517 75.7058 10.826 75.5272 10.8267C75.3113 10.8271 75.2392 10.8487 75.3109 10.8905ZM54.1027 16.8655C54.1326 16.9435 54.1124 16.9909 54.0492 16.9909C53.9937 16.9909 53.9479 17.0386 53.9479 17.0972C53.9479 17.1834 53.9706 17.1868 54.0666 17.1151C54.161 17.045 54.1735 17.045 54.127 17.1162C54.095 17.1655 54.0998 17.2062 54.1379 17.2062C54.1764 17.2062 54.2112 17.2465 54.2157 17.2957C54.2424 17.5894 54.2719 17.6943 54.3205 17.6667C54.3505 17.6495 54.3611 17.5469 54.3436 17.4387C54.3262 17.3304 54.3007 17.1689 54.2873 17.0797C54.2736 16.9905 54.2157 16.8774 54.1586 16.8285C54.0743 16.7569 54.0638 16.7636 54.1027 16.8655ZM110.145 19.5179L110.373 19.7511L110.12 19.5406C109.885 19.3444 109.831 19.285 109.892 19.285C109.905 19.285 110.019 19.3899 110.145 19.5179ZM55.945 20.3287C55.945 20.425 55.9167 20.5037 55.8814 20.5037C55.8466 20.5037 55.8178 20.4086 55.8178 20.2925C55.8178 20.1765 55.8466 20.0978 55.8814 20.1175C55.9167 20.1377 55.945 20.2325 55.945 20.3287ZM56.4108 21.3463C56.4128 21.6184 56.2897 21.5247 56.2816 21.2478C56.2767 21.0747 56.2969 21.0209 56.3419 21.0862C56.3792 21.1407 56.4103 21.2575 56.4108 21.3463ZM56.5894 22.2229C56.5829 22.3012 56.606 22.3811 56.6408 22.4009C56.6752 22.4206 56.704 22.3568 56.704 22.2591C56.704 22.0482 56.606 22.0176 56.5894 22.2229ZM68.7645 37.3315C68.9034 37.3476 69.131 37.3476 69.2699 37.3315C69.4092 37.3155 69.2954 37.3024 69.0172 37.3024C68.739 37.3024 68.6252 37.3155 68.7645 37.3315ZM68.0055 37.4976C59.2324 38.0551 50.486 47.2447 46.9248 59.6473C46.7948 60.1007 46.6746 60.5686 46.6584 60.6869C46.6417 60.8052 46.6089 60.9503 46.585 61.0097C46.5397 61.1231 46.3838 61.8149 46.1898 62.7661C46.0828 63.2896 46.0071 63.7471 45.7507 65.4185C45.7026 65.7342 45.6523 66.3308 45.6398 66.7447C45.613 67.6078 45.5179 68.3653 45.449 68.2623C45.4231 68.2239 45.402 69.059 45.402 70.1184C45.402 71.1777 45.4259 71.9894 45.4547 71.9218C45.4867 71.8476 45.5098 71.9196 45.513 72.1039C45.5163 72.2767 45.5559 72.4084 45.6054 72.4084C45.6637 72.4084 45.6843 72.6006 45.6689 72.9999C45.6313 73.9738 45.6641 74.4682 45.7584 74.3443C45.8232 74.2589 45.8305 74.2682 45.7937 74.3902C45.7447 74.5511 45.8893 75.8343 45.9699 75.9552C46.016 76.025 46.0217 76.0691 46.0488 76.5889C46.0569 76.7389 46.0934 76.8448 46.1298 76.8239C46.1667 76.803 46.18 76.8657 46.1598 76.9631C46.1395 77.0609 46.1598 77.14 46.2052 77.14C46.2501 77.14 46.2829 77.2128 46.2777 77.3016C46.2562 77.6673 46.2979 77.8647 46.3858 77.8147C46.4482 77.7792 46.4603 77.8184 46.4263 77.9434C46.3996 78.0419 46.3992 78.1423 46.4255 78.1669C46.4518 78.1912 46.4854 78.3326 46.4996 78.4815C46.5142 78.6304 46.5624 78.7629 46.6065 78.7767C46.6507 78.7901 46.6677 78.8297 46.6446 78.8644C46.5761 78.9662 46.9398 80.148 47.0249 80.0995C47.0686 80.0745 47.0816 80.1036 47.0548 80.1674C46.9933 80.3152 47.18 80.8891 47.2659 80.8171C47.3027 80.7857 47.3124 80.8141 47.2869 80.8794C47.2318 81.0216 47.3829 81.5134 47.4817 81.5134C47.5198 81.5134 47.5315 81.5421 47.5076 81.5776C47.4671 81.638 47.9896 83.0131 48.0823 83.0907C48.1058 83.1101 48.1358 83.1747 48.1483 83.234C48.1909 83.4321 48.5035 84.0941 48.5546 84.0941C48.5825 84.0941 48.6052 84.1415 48.6052 84.1993C48.6052 84.3516 48.8761 84.883 48.9543 84.883C48.9903 84.883 49.013 84.9068 49.0045 84.9367C48.9741 85.0427 49.1102 85.3128 49.1941 85.3128C49.241 85.3128 49.2576 85.333 49.2313 85.3572C49.1645 85.4188 49.7809 86.5316 49.8813 86.5316C49.9263 86.5316 49.9429 86.5614 49.9186 86.5976C49.8943 86.6338 49.9287 86.7133 49.9947 86.7741C50.0608 86.8353 50.1146 86.9103 50.1146 86.9413C50.1134 87.0752 50.8505 88.166 50.9165 88.1283C50.9566 88.1055 50.9684 88.1182 50.9428 88.1563C50.8914 88.2328 51.3037 88.8489 51.3669 88.7903C51.3888 88.7705 51.4062 88.7966 51.4062 88.8485C51.4062 88.9656 51.748 89.3992 51.8403 89.3992C51.8776 89.3992 51.8901 89.4261 51.8683 89.459C51.8464 89.4914 51.9379 89.6284 52.0716 89.7635C52.2056 89.8985 52.3138 90.025 52.3126 90.0444C52.3053 90.1478 52.5499 90.3952 52.62 90.3556C52.6645 90.3299 52.6799 90.3411 52.6536 90.3803C52.6276 90.4191 52.7998 90.6661 53.0367 90.9288C53.4336 91.3695 53.6248 91.5352 53.4846 91.3173C53.453 91.268 53.5353 91.3322 53.6669 91.4606C54.0877 91.8692 54.5101 91.7233 54.4943 91.1747C54.489 90.9904 54.5101 90.924 54.553 90.987C54.5919 91.0434 54.6162 90.6642 54.6109 90.0803C54.6053 89.4507 54.5806 89.1701 54.5445 89.3276L54.4874 89.5787L54.4769 89.3149C54.4712 89.1645 54.517 89.0048 54.5834 88.9436C54.6478 88.8843 54.6996 88.7936 54.6988 88.7414C54.698 88.6649 54.6859 88.6641 54.634 88.7391C54.5943 88.797 54.5336 88.6414 54.472 88.3238C54.3732 87.8148 54.4036 87.4637 54.5461 87.4637C54.5883 87.4637 54.6223 87.4324 54.6223 87.3943C54.6223 87.3562 54.57 87.3435 54.5056 87.3659C54.4088 87.4003 54.3886 87.323 54.3878 86.9159C54.387 86.6178 54.3606 86.4622 54.3205 86.5204C54.2825 86.5756 54.2582 86.2368 54.2634 85.7207C54.2683 85.2281 54.246 84.8397 54.214 84.858C54.1816 84.8762 54.1557 84.7139 54.1557 84.4971C54.1557 84.2799 54.1253 84.0855 54.0885 84.0646C54.0516 84.0434 54.0253 83.5284 54.0302 82.9202C54.035 82.3116 54.0192 81.825 53.9953 81.8384C53.9714 81.8522 53.9099 81.4697 53.858 80.9891C53.7673 80.1443 53.8005 79.4009 53.9261 79.4722C53.9597 79.4916 53.9832 79.1924 53.9783 78.8076C53.9722 78.3173 53.9613 78.2427 53.9423 78.558C53.8912 79.3924 53.7665 78.9427 53.7665 77.9244C53.7665 76.9769 53.8763 76.5456 53.9431 77.2296C53.9625 77.4307 53.9775 77.3572 53.9864 77.0146C53.9945 76.7075 53.9682 76.4948 53.922 76.4948C53.7495 76.4948 53.8483 74.916 54.1646 72.6237C55.2974 64.4072 60.4571 57.9838 66.0688 57.8028C70.7275 57.6528 74.7435 60.8238 79.2195 68.1873C87.9866 82.6093 95.5354 86.2536 103.425 79.8715C104.712 78.8304 106.9 76.5818 106.788 76.4153C106.753 76.3627 106.764 76.3482 106.815 76.3773C106.914 76.4336 107.624 75.6149 107.593 75.4802C107.581 75.4306 107.625 75.388 107.689 75.3851C107.753 75.3824 107.801 75.3257 107.795 75.2593C107.789 75.1929 107.813 75.1451 107.848 75.1533C107.939 75.1753 108.314 74.6932 108.264 74.6186C108.241 74.5839 108.268 74.5645 108.325 74.5753C108.382 74.5861 108.423 74.5395 108.417 74.4705C108.412 74.4018 108.433 74.3608 108.465 74.3794C108.552 74.4283 109.186 73.5693 109.127 73.4823C109.1 73.4417 109.124 73.4174 109.181 73.4282C109.237 73.4391 109.279 73.3928 109.273 73.3253C109.268 73.2581 109.289 73.2096 109.321 73.2178C109.378 73.2327 110.334 71.964 110.334 71.8733C110.334 71.8476 110.294 71.8494 110.245 71.8778C110.188 71.9095 110.176 71.8972 110.211 71.8449C110.242 71.7987 110.296 71.777 110.33 71.7968C110.365 71.8166 110.585 71.5509 110.819 71.2065C111.339 70.4415 111.364 70.4012 111.318 70.4012C111.298 70.4012 111.083 70.6915 110.84 71.0464C110.597 71.4013 110.38 71.6916 110.357 71.6916C110.335 71.6916 110.371 71.6151 110.437 71.5218C110.503 71.4281 110.967 70.7266 111.468 69.9624C111.969 69.1982 112.446 68.4843 112.529 68.3757C112.611 68.2675 112.654 68.1787 112.623 68.1787C112.592 68.1787 112.619 68.1224 112.683 68.0533C112.846 67.8783 112.909 67.6895 112.821 67.6391C112.752 67.5999 112.708 67.7626 112.743 67.9257C112.751 67.9641 112.691 67.9399 112.61 67.872C112.528 67.8037 112.44 67.7675 112.415 67.7914C112.389 67.8149 112.389 67.7615 112.414 67.6727C112.445 67.5608 112.432 67.5268 112.37 67.5623C112.319 67.5906 112.276 67.572 112.27 67.5197C112.266 67.4682 112.253 67.3936 112.243 67.3544C112.234 67.3148 112.22 67.2111 112.214 67.1234C112.206 67.0204 112.164 66.9779 112.095 67.0021C112.028 67.0257 111.988 66.991 111.989 66.9104C111.992 66.4913 111.958 66.3491 111.89 66.4939C111.82 66.6454 111.808 66.6238 111.775 66.279C111.727 65.7707 111.724 65.7625 111.657 65.9562L111.595 66.1353L111.587 65.9342C111.583 65.8196 111.546 65.7517 111.501 65.7771C111.459 65.8013 111.419 65.7872 111.414 65.7454C111.409 65.7036 111.395 65.6371 111.385 65.598C111.374 65.5584 111.358 65.405 111.35 65.2573C111.338 65.0379 111.323 65.0147 111.268 65.1319C111.231 65.2106 111.194 65.2349 111.186 65.1856C111.178 65.1364 111.162 65.0636 111.151 65.0244C111.14 64.9849 111.124 64.864 111.114 64.7554L111.097 64.5584L111.034 64.7375C110.989 64.8685 110.967 64.883 110.955 64.7912C110.909 64.4625 110.897 64.3651 110.881 64.1818L110.863 63.9848L110.801 64.1639C110.748 64.318 110.701 64.2419 110.73 64.0464C110.733 64.0214 110.69 63.974 110.633 63.9415C110.528 63.8818 110.517 63.8535 110.5 63.5863C110.494 63.5049 110.455 63.4587 110.412 63.4829C110.369 63.5072 110.33 63.477 110.324 63.4154C110.319 63.3538 110.306 63.2713 110.295 63.2318C110.285 63.1926 110.269 63.0878 110.261 62.9989C110.246 62.8441 110.243 62.8433 110.179 62.981C110.119 63.1094 110.11 63.1042 110.096 62.9273C110.088 62.8187 110.072 62.6978 110.062 62.6583C110.051 62.6191 110.038 62.5556 110.033 62.5172C110.027 62.4791 109.979 62.4635 109.926 62.4821C109.859 62.5056 109.831 62.4429 109.838 62.2829C109.849 62.0078 109.65 61.6534 109.512 61.7022C109.459 61.7209 109.418 61.6936 109.42 61.6418C109.437 61.2869 109.387 61.0518 109.323 61.1888C109.252 61.3403 109.241 61.3186 109.208 60.9738C109.177 60.6511 109.173 60.6395 109.098 60.682C109.06 60.7037 109.004 60.6029 108.975 60.4581C108.935 60.2633 108.903 60.2216 108.851 60.2977C108.802 60.3697 108.78 60.3208 108.779 60.1335C108.778 59.9346 108.75 59.8768 108.669 59.9055C108.609 59.9268 108.562 59.9018 108.565 59.8495C108.582 59.4861 108.528 59.2562 108.467 59.4323C108.403 59.6144 108.386 59.5771 108.348 59.1816C108.337 59.0629 108.322 58.9017 108.314 58.823L108.3 58.6797L108.239 58.823C108.189 58.9394 108.167 58.9088 108.121 58.6614C108.09 58.4935 108.032 58.3744 107.993 58.3968C107.954 58.4188 107.922 58.3688 107.922 58.2853C107.922 58.2017 107.887 58.1532 107.844 58.1778C107.802 58.202 107.762 58.1718 107.757 58.1103C107.751 58.0487 107.738 57.9662 107.727 57.9267C107.717 57.8875 107.7 57.7662 107.691 57.658L107.673 57.461L107.611 57.6401C107.565 57.7711 107.544 57.7856 107.531 57.6938C107.507 57.5222 107.477 57.2971 107.465 57.2057C107.46 57.1639 107.42 57.1498 107.378 57.174C107.335 57.1983 107.295 57.168 107.29 57.1065C107.284 57.0453 107.271 56.9624 107.261 56.9232C107.25 56.8837 107.237 56.7848 107.231 56.7038C107.226 56.6225 107.187 56.5762 107.144 56.6005C107.101 56.6247 107.066 56.5796 107.066 56.4993C107.066 56.4061 107.028 56.3676 106.96 56.3919C106.885 56.4184 106.859 56.3781 106.874 56.2564C106.896 56.0732 106.823 55.915 106.707 55.8952C106.669 55.8889 106.648 55.856 106.66 55.8224C106.709 55.6892 106.585 55.4664 106.518 55.5661C106.483 55.6187 106.474 55.6922 106.5 55.7299C106.525 55.7676 106.514 55.7799 106.474 55.7575C106.435 55.7355 106.336 55.7627 106.253 55.8183C106.146 55.8904 106.135 55.9198 106.215 55.9206C106.366 55.9221 106.143 56.0601 105.987 56.0616C105.896 56.0628 105.896 56.0437 105.987 55.9374C106.085 55.8224 106.082 55.8206 105.95 55.9157C105.82 56.0105 105.818 56.0269 105.933 56.1042C106.048 56.1818 106.048 56.193 105.935 56.2329C105.867 56.2572 105.833 56.3094 105.86 56.349C105.886 56.3889 105.854 56.4214 105.787 56.4214C105.72 56.4214 105.666 56.4646 105.666 56.5176C105.666 56.6173 105.425 56.8516 105.323 56.8516C105.292 56.8516 105.333 56.7628 105.414 56.6542C105.586 56.4258 105.71 56.2258 105.648 56.2781C105.491 56.409 104.594 57.5684 104.65 57.5684C104.688 57.5684 104.737 57.5281 104.758 57.4789C104.782 57.4251 104.8 57.4397 104.803 57.5147C104.807 57.5837 104.773 57.6401 104.727 57.6401C104.682 57.6401 104.664 57.6688 104.688 57.7043C104.711 57.7393 104.675 57.7882 104.606 57.8125C104.515 57.8446 104.494 57.8259 104.528 57.7446C104.591 57.5934 104.443 57.683 104.341 57.8576C104.281 57.961 104.286 57.9897 104.36 57.9729C104.415 57.9602 104.433 57.964 104.401 57.9804C104.369 57.9968 104.343 58.0644 104.342 58.13C104.34 58.2315 104.33 58.2334 104.268 58.1438C104.228 58.086 104.183 58.0535 104.167 58.0722C103.541 58.8032 103.41 58.9943 103.453 59.1166C103.491 59.2241 103.485 59.2312 103.422 59.1495C103.326 59.0241 103 59.3308 103.06 59.4898C103.08 59.5413 103.064 59.5652 103.026 59.5432C102.931 59.4887 102.39 60.0794 102.451 60.1708C102.477 60.2104 102.463 60.2223 102.418 60.1969C102.33 60.1466 102.145 60.3122 102.181 60.4104C102.193 60.4443 102.168 60.4805 102.125 60.491C101.969 60.5298 100.617 61.8257 100.663 61.8937C100.69 61.934 100.669 61.9407 100.614 61.9093C100.559 61.8776 100.448 61.9149 100.349 61.9981C99.0617 63.087 96.9739 63.5508 95.3981 63.0986C92.9223 62.3877 91.289 60.6731 88.6621 56.0269C84.6619 48.9512 82.9536 46.3301 79.8939 42.5736C77.0386 39.0686 72.6662 37.2017 68.0055 37.4976ZM107.207 54.3959C107.07 54.5429 106.967 54.7007 107.008 54.7007C107.024 54.7007 107.115 54.6037 107.209 54.4854C107.397 54.2518 107.395 54.1936 107.207 54.3959ZM106.684 55.0149L106.496 55.2385L106.719 55.0433C106.841 54.9362 106.926 54.8354 106.907 54.8198C106.888 54.8041 106.787 54.8918 106.684 55.0149ZM106.739 55.3683C106.718 55.4691 106.734 55.5941 106.774 55.6459C106.829 55.7165 106.837 55.7098 106.806 55.6194C106.783 55.553 106.802 55.4866 106.849 55.472C106.909 55.4538 106.911 55.4064 106.856 55.3153C106.784 55.197 106.773 55.2019 106.739 55.3683ZM105.149 57.1893C105.004 57.3311 104.869 57.4315 104.848 57.4128C104.828 57.3942 104.874 57.3166 104.951 57.2404C105.027 57.1647 105.113 57.0464 105.142 56.9781C105.17 56.9087 105.242 56.871 105.303 56.8927C105.385 56.9218 105.346 56.9975 105.149 57.1893ZM109.954 72.3189C109.912 72.3879 109.82 72.5088 109.748 72.5875C109.612 72.7375 109.629 72.7017 109.897 72.283C109.986 72.1442 110.038 72.1774 109.954 72.3189ZM57.5245 132.539C57.9012 132.553 58.4965 132.553 58.8472 132.539C59.1984 132.526 58.8902 132.515 58.1628 132.515C57.4354 132.515 57.1483 132.526 57.5245 132.539ZM80.8667 132.539C81.1141 132.553 81.4993 132.553 81.7224 132.539C81.9456 132.524 81.7431 132.513 81.2721 132.513C80.8015 132.513 80.6188 132.525 80.8667 132.539ZM56.6039 136.465C56.6039 138.634 56.6137 139.531 56.6258 138.459C56.638 137.388 56.638 135.613 56.6258 134.516C56.6141 133.42 56.6039 134.296 56.6039 136.465ZM80.322 132.88C80.3224 133.077 80.3377 133.15 80.3556 133.041C80.3734 132.932 80.373 132.77 80.3544 132.682C80.3361 132.594 80.3211 132.683 80.322 132.88ZM80.3191 133.74C80.3199 133.898 80.3361 133.954 80.3548 133.865C80.3734 133.776 80.3726 133.647 80.3531 133.579C80.3337 133.51 80.3183 133.583 80.3191 133.74ZM58.863 133.992C58.8894 134.031 59.0141 134.063 59.14 134.063C59.266 134.063 59.3689 134.031 59.3689 133.992C59.3689 133.952 59.2441 133.92 59.0919 133.92C58.927 133.92 58.8343 133.949 58.863 133.992ZM80.3191 134.529C80.3199 134.687 80.3361 134.743 80.3548 134.654C80.3734 134.565 80.3726 134.436 80.3531 134.367C80.3337 134.299 80.3183 134.371 80.3191 134.529ZM133.589 134.719C133.919 135.044 133.923 135.052 133.724 135.042C133.591 135.035 133.534 134.998 133.559 134.938C133.58 134.886 133.563 134.864 133.521 134.888C133.478 134.912 133.444 134.98 133.444 135.039C133.444 135.099 133.409 135.127 133.366 135.103C133.323 135.078 133.288 135.105 133.288 135.163C133.288 135.22 133.236 135.285 133.171 135.308C133.107 135.33 133.055 135.392 133.055 135.445C133.055 135.498 132.95 135.635 132.821 135.748C132.693 135.861 132.588 135.998 132.588 136.053C132.588 136.107 132.553 136.131 132.51 136.106C132.467 136.082 132.432 136.112 132.432 136.174C132.432 136.235 132.401 136.286 132.364 136.286C132.326 136.286 132.275 136.353 132.252 136.436C132.228 136.522 132.172 136.566 132.124 136.538C132.078 136.512 132.044 136.517 132.05 136.549C132.072 136.674 131.944 136.927 131.879 136.89C131.841 136.868 131.81 136.899 131.81 136.957C131.81 137.016 131.729 137.123 131.631 137.194C131.532 137.266 131.427 137.384 131.398 137.455C131.368 137.527 131.308 137.565 131.264 137.54C131.22 137.514 131.188 137.521 131.194 137.553C131.215 137.678 131.088 137.931 131.023 137.894C130.985 137.872 130.953 137.897 130.953 137.948C130.952 138 130.847 138.155 130.72 138.293C130.593 138.431 130.453 138.583 130.41 138.631C130.367 138.678 130.331 138.755 130.331 138.8C130.331 138.848 130.265 138.867 130.176 138.846C130.022 138.809 130.014 138.895 130.139 139.274C130.154 139.321 130.137 139.369 130.1 139.382C130.062 139.394 130.076 139.582 130.13 139.799C130.183 140.015 130.242 140.152 130.26 140.103C130.278 140.054 130.292 140.188 130.292 140.401C130.292 140.614 130.261 140.771 130.223 140.749C130.184 140.727 130.178 140.826 130.209 140.978C130.245 141.157 130.237 141.231 130.183 141.201C130.083 141.143 129.984 141.477 130.064 141.605C130.096 141.656 130.095 141.676 130.062 141.648C129.985 141.584 129.307 142.815 129.355 142.931C129.374 142.979 129.348 143.005 129.297 142.989C129.195 142.958 128.574 143.794 128.591 143.938C128.597 143.987 128.575 144.011 128.542 143.993C128.435 143.932 128.072 144.438 128.121 144.579C128.153 144.669 128.146 144.681 128.097 144.619C128.002 144.498 127.642 144.838 127.728 144.966C127.765 145.021 127.756 145.036 127.703 145.006C127.576 144.934 127.349 145.259 127.473 145.336C127.537 145.377 127.518 145.39 127.413 145.375C127.306 145.361 127.261 145.393 127.268 145.479C127.274 145.548 127.247 145.586 127.208 145.563C127.111 145.508 126.826 145.834 126.87 145.95C126.89 146.001 126.875 146.026 126.838 146.004C126.733 145.944 126.588 146.147 126.642 146.278C126.67 146.344 126.652 146.394 126.6 146.394C126.549 146.394 126.534 146.355 126.566 146.305C126.596 146.255 126.528 146.293 126.414 146.389C126.3 146.485 126.216 146.613 126.227 146.674C126.238 146.735 126.202 146.786 126.149 146.787C125.972 146.79 125.32 147.622 125.44 147.692C125.541 147.751 125.449 147.79 125.262 147.767C125.206 147.76 124.807 148.221 124.807 148.293C124.807 148.318 124.842 148.318 124.885 148.294C124.927 148.27 124.962 148.287 124.962 148.333C124.962 148.379 124.912 148.399 124.851 148.377C124.692 148.321 124.171 148.924 124.23 149.095C124.264 149.191 124.257 149.201 124.202 149.13C124.103 149.002 123.786 149.362 123.846 149.535C123.877 149.625 123.869 149.632 123.815 149.563C123.712 149.43 123.311 149.919 123.375 150.099C123.407 150.189 123.399 150.202 123.35 150.139C123.256 150.019 122.896 150.358 122.982 150.487C123.018 150.539 123.009 150.556 122.96 150.528C122.853 150.467 122.448 150.96 122.519 151.066C122.55 151.112 122.54 151.129 122.496 151.103C122.383 151.039 122.054 151.383 122.126 151.49C122.162 151.543 122.153 151.56 122.104 151.532C122.004 151.475 121.59 151.96 121.655 152.057C121.683 152.099 121.649 152.109 121.573 152.082C121.466 152.044 121.453 152.067 121.496 152.208C121.53 152.319 121.524 152.347 121.479 152.287C121.387 152.165 121.186 152.368 121.272 152.496C121.306 152.547 121.297 152.563 121.248 152.535C121.129 152.468 120.984 152.664 121.039 152.819C121.071 152.911 121.064 152.925 121.016 152.864C120.909 152.728 120.585 153.067 120.649 153.247C120.683 153.343 120.676 153.356 120.625 153.291C120.53 153.17 120.329 153.37 120.416 153.5C120.45 153.55 120.44 153.567 120.393 153.539C120.273 153.471 120.128 153.668 120.183 153.823C120.219 153.923 120.211 153.932 120.156 153.861C120.044 153.718 119.266 154.615 119.327 154.816C119.36 154.929 119.353 154.938 119.293 154.858C119.199 154.732 118.873 155.04 118.933 155.198C118.953 155.249 118.94 155.274 118.903 155.254C118.866 155.233 118.772 155.281 118.693 155.362C118.57 155.487 118.566 155.517 118.663 155.574C118.743 155.621 118.748 155.643 118.68 155.65C118.371 155.682 118.255 155.772 118.312 155.935C118.339 156.015 118.322 156.073 118.272 156.073C118.223 156.073 118.206 156.04 118.232 156.001C118.258 155.961 118.262 155.929 118.241 155.929C118.158 155.929 117.456 156.829 117.476 156.909C117.487 156.956 117.456 157.017 117.405 157.046C117.347 157.079 117.334 157.067 117.369 157.016C117.494 156.829 117.334 156.952 117.104 157.22L116.857 157.506H127.48H138.103L137.668 157.13C136.281 155.931 135.496 154.882 134.767 153.256L134.516 152.698L133.01 152.706C132.181 152.711 131.467 152.694 131.423 152.669C131.379 152.643 131.343 152.657 131.343 152.699C131.343 152.75 130.784 152.775 129.631 152.775C128.689 152.775 127.919 152.755 127.919 152.731C127.919 152.685 128.242 152.348 130.526 150.001C134.078 146.352 135.381 144.411 135.979 141.877C136.141 141.191 136.164 139.153 136.016 138.58C135.732 137.486 135.231 136.378 135.063 136.473C135.009 136.504 134.998 136.49 135.034 136.436C135.067 136.386 135.005 136.227 134.89 136.066C134.673 135.766 134.585 135.704 134.664 135.909C134.692 135.978 134.686 136.011 134.651 135.983C134.618 135.955 134.586 135.861 134.581 135.775C134.576 135.687 134.515 135.61 134.44 135.601C134.274 135.578 133.819 135.155 133.908 135.104C133.944 135.084 134.08 135.188 134.212 135.336C134.343 135.483 134.451 135.572 134.453 135.531C134.454 135.491 134.184 135.216 133.853 134.922C133.522 134.627 133.403 134.536 133.589 134.719ZM80.3191 135.318C80.3199 135.476 80.3361 135.532 80.3548 135.442C80.3734 135.353 80.3726 135.224 80.3531 135.156C80.3337 135.087 80.3183 135.16 80.3191 135.318ZM73.115 136.13C73.1296 136.183 73.1413 136.239 73.1413 136.256C73.1413 136.272 73.1761 136.286 73.2191 136.286C73.2616 136.286 73.2964 136.213 73.2956 136.124C73.2948 136.006 73.2766 135.989 73.2272 136.061C73.1903 136.114 73.1441 136.131 73.1243 136.097C73.1049 136.063 73.1004 136.078 73.115 136.13ZM80.2997 136.322C80.2997 136.42 80.2559 136.501 80.2025 136.502C80.1316 136.503 80.1296 136.517 80.1944 136.556C80.2438 136.585 80.3001 136.689 80.3199 136.788C80.3402 136.886 80.3608 136.781 80.3669 136.554C80.3726 136.328 80.36 136.142 80.3386 136.142C80.3171 136.142 80.2997 136.223 80.2997 136.322ZM70.9822 136.537C70.9831 136.694 70.9989 136.75 71.0175 136.661C71.0361 136.572 71.0353 136.443 71.0159 136.375C70.9964 136.306 70.981 136.379 70.9822 136.537ZM76.5413 136.965C76.44 137.539 76.4996 140.515 76.6122 140.515C76.7021 140.515 76.7203 140.191 76.7203 138.616C76.7203 136.887 76.6575 136.306 76.5413 136.965ZM73.1105 136.901C73.0473 137.052 73.0465 137.05 73.1802 137.05C73.2442 137.05 73.2968 136.991 73.2968 136.919C73.2968 136.758 73.1749 136.746 73.1105 136.901ZM86.5399 139.422C86.9121 139.435 87.5423 139.435 87.9404 139.422C88.3385 139.409 88.034 139.398 87.2637 139.398C86.4933 139.398 86.1677 139.409 86.5399 139.422ZM45.3032 139.87C45.3032 140.008 45.3194 140.065 45.3389 139.996C45.3583 139.927 45.3583 139.814 45.3389 139.745C45.3194 139.676 45.3032 139.732 45.3032 139.87ZM151.076 144.715C150.999 144.9 151.022 145.593 151.107 145.641C151.156 145.669 151.184 145.487 151.184 145.144C151.184 144.597 151.162 144.509 151.076 144.715ZM156.497 145.104C156.497 145.281 156.512 145.354 156.53 145.265C156.549 145.176 156.549 145.031 156.53 144.943C156.512 144.854 156.497 144.926 156.497 145.104ZM72.3435 147.162C72.4398 147.179 72.5974 147.179 72.6938 147.162C72.7902 147.145 72.7112 147.131 72.5188 147.131C72.326 147.131 72.2475 147.145 72.3435 147.162ZM49.4111 152.458C49.4075 156.038 49.431 157.717 49.4853 157.687C49.5906 157.626 49.5962 147.183 49.4909 147.183C49.4448 147.183 49.4148 149.174 49.4111 152.458ZM58.4621 147.828C58.4621 148.163 58.4759 148.3 58.492 148.133C58.5082 147.965 58.5082 147.691 58.492 147.523C58.4759 147.356 58.4621 147.493 58.4621 147.828ZM108.856 148.474L106.638 148.513L108.798 148.541C109.985 148.556 111.009 148.571 111.074 148.575C111.138 148.578 111.193 148.549 111.196 148.511C111.203 148.425 111.469 148.429 108.856 148.474ZM55.0354 148.527C55.6267 148.539 56.5719 148.539 57.1365 148.527C57.7011 148.514 57.2175 148.505 56.062 148.505C54.9066 148.505 54.4445 148.515 55.0354 148.527ZM47.749 149.883C47.7207 149.91 47.6996 149.998 47.7024 150.08C47.7069 150.217 47.7134 150.216 47.7818 150.058C47.858 149.882 47.8422 149.798 47.749 149.883ZM47.7336 154.065C47.7336 156.056 47.7433 156.871 47.7555 155.875C47.7676 154.88 47.7676 153.25 47.7555 152.255C47.7433 151.259 47.7336 152.074 47.7336 154.065ZM53.8831 151.701C54.1152 151.79 57.9485 151.787 58.0081 151.698C58.0413 151.649 57.3487 151.627 55.8924 151.633C54.6607 151.638 53.7949 151.668 53.8831 151.701ZM106.487 151.693C106.461 151.732 107.329 151.762 108.622 151.768C110.085 151.774 110.801 151.752 110.801 151.702C110.801 151.607 106.551 151.598 106.487 151.693ZM56.7048 153.04C56.8016 153.058 56.9417 153.057 57.0158 153.039C57.0903 153.021 57.011 153.007 56.8401 153.008C56.6687 153.009 56.608 153.023 56.7048 153.04ZM57.5998 153.041C57.7181 153.058 57.8931 153.057 57.9886 153.04C58.0846 153.023 57.9878 153.01 57.7736 153.01C57.5597 153.011 57.4816 153.025 57.5998 153.041ZM106.619 153.042C106.779 153.058 107.042 153.058 107.202 153.042C107.363 153.027 107.231 153.014 106.911 153.014C106.589 153.014 106.458 153.027 106.619 153.042ZM53.4867 156.144L53.4944 156.323L55.9256 156.325L58.3572 156.326L55.9503 156.306L53.5434 156.286L53.5114 156.125C53.4838 155.988 53.4802 155.99 53.4867 156.144ZM107.786 156.341C108.374 156.353 109.337 156.353 109.926 156.341C110.514 156.329 110.033 156.319 108.856 156.319C107.679 156.319 107.197 156.329 107.786 156.341ZM58.5378 156.933C58.5378 157.189 58.552 157.294 58.569 157.166C58.5864 157.038 58.5864 156.828 58.569 156.7C58.552 156.572 58.5378 156.676 58.5378 156.933Z\" fill=\"url(#paint0_linear)\" />\r\n        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M74.678 10.8748C74.4484 10.9301 74.5269 11.0405 74.7947 11.0394C75.0028 11.0387 75.375 10.9163 75.2422 10.8924C75.0385 10.8558 74.7898 10.848 74.678 10.8748ZM75.8918 10.8745C75.9465 10.9249 76.8124 10.9081 76.8695 10.8554C76.8877 10.839 76.6629 10.8256 76.3705 10.8256C76.0781 10.8256 75.8626 10.8472 75.8918 10.8745ZM84.268 10.8998C86.0257 11.0398 86.5052 11.0502 86.2055 10.9416C86.0063 10.8696 85.5887 10.8413 84.7658 10.8439C83.7091 10.8469 83.665 10.8517 84.268 10.8998ZM73.5327 11.0375C73.4695 11.0745 73.4363 11.1211 73.459 11.142C73.527 11.2047 74.075 11.0984 74.03 11.0312C73.9749 10.9495 73.6777 10.9532 73.5327 11.0375ZM86.5247 11.0305C86.5247 11.0752 86.5518 11.1122 86.585 11.1122C87.0597 11.1122 89.4524 11.4577 91.1153 11.7667C91.5645 11.8503 92.0764 11.9451 92.2526 11.9775C93.3315 12.1757 95.9677 12.8492 97.5346 13.3265C106.907 16.1815 112.403 20.003 113.458 24.398C114.441 28.487 110.717 33.0346 105.633 33.9548C105.266 34.0216 104.966 34.1063 104.966 34.1433C104.966 34.216 105.845 34.1451 106.052 34.0559C106.118 34.0272 106.469 33.9138 106.833 33.8033C107.976 33.4567 108.992 32.9648 109.932 32.3025C110.611 31.8234 112.279 30.2595 112.279 30.102C112.279 30.0729 112.324 30.0065 112.377 29.9542C112.473 29.8621 113.187 28.5683 113.3 28.2825C113.888 26.8011 113.943 25.4249 113.475 23.8733C113.24 23.0912 113.071 22.7292 112.616 22.0284C112.431 21.7433 112.279 21.4773 112.279 21.437C112.279 21.3971 112.254 21.362 112.221 21.3597C112.189 21.3575 112.005 21.1564 111.813 20.9127C111.419 20.4149 109.974 19.0757 109.244 18.5324C108.979 18.335 108.713 18.1312 108.653 18.079C108.594 18.0271 108.545 18.0051 108.545 18.0301C108.545 18.0771 107.844 17.5771 107.758 17.4689C107.732 17.4356 107.679 17.4114 107.641 17.4144C107.603 17.4177 107.397 17.3174 107.183 17.192C106.969 17.0662 106.671 16.9013 106.522 16.8248C106.372 16.7487 106.232 16.6658 106.211 16.6412C106.171 16.5961 106.001 16.5091 105.16 16.1042C104.903 15.9807 104.682 15.8553 104.667 15.8259C104.653 15.7964 104.61 15.7721 104.571 15.7721C104.442 15.7721 103.876 15.5244 103.876 15.4684C103.876 15.4382 103.838 15.4135 103.791 15.4135C103.745 15.4135 103.48 15.3169 103.203 15.1986C102.925 15.0803 102.679 14.9837 102.656 14.9837C102.634 14.9837 102.382 14.8844 102.098 14.7635C101.813 14.6422 101.511 14.5135 101.425 14.4773C101.34 14.4411 101.024 14.328 100.725 14.2258C100.425 14.1239 100.075 13.9967 99.9468 13.9429C99.8184 13.8896 99.2757 13.7108 98.7407 13.5463C98.2057 13.3813 97.6456 13.2045 97.4957 13.153C97.3459 13.1015 96.9607 12.9903 96.64 12.9063C96.3188 12.8223 96.0025 12.7268 95.9365 12.6944C95.8709 12.6619 95.6607 12.6115 95.4695 12.5824C95.2787 12.5533 95.0876 12.5096 95.0447 12.485C95.0021 12.4608 94.9495 12.4391 94.928 12.4372C94.8179 12.4272 93.7782 12.1648 93.6442 12.113C93.5587 12.0801 93.2785 12.0171 93.0217 11.9727C92.7649 11.9283 92.3097 11.8443 92.01 11.7861C91.7107 11.7275 91.377 11.6667 91.2688 11.6503C91.1607 11.6338 90.8646 11.5708 90.6107 11.5096C90.3568 11.4488 90.049 11.3991 89.9267 11.3991C89.8044 11.3991 89.6428 11.3685 89.567 11.3312C89.4917 11.2939 89.1398 11.2446 88.7858 11.2219C88.4314 11.1991 88.0783 11.1491 88.0005 11.1111C87.9227 11.0726 87.7777 11.0443 87.6781 11.0484C87.5785 11.0521 87.2784 11.0312 87.0107 11.0021C86.6644 10.9637 86.5247 10.9719 86.5247 11.0305ZM72.6745 11.1099C72.5113 11.1555 72.5011 11.1726 72.6117 11.2159C72.7782 11.2816 73.0159 11.2417 73.0054 11.1499C72.9944 11.0558 72.9065 11.045 72.6745 11.1099ZM71.7405 11.2913C71.7405 11.407 71.8118 11.4241 72.0066 11.3555C72.1962 11.2883 72.1524 11.1838 71.9354 11.1838C71.8143 11.1838 71.7405 11.2245 71.7405 11.2913ZM70.9625 11.3991C70.9625 11.4383 71.05 11.4708 71.1569 11.4708C71.2643 11.4708 71.3518 11.4383 71.3518 11.3991C71.3518 11.3596 71.2643 11.3271 71.1569 11.3271C71.05 11.3271 70.9625 11.3596 70.9625 11.3991ZM70.2979 11.4753C70.27 11.5174 70.2663 11.57 70.2902 11.5917C70.3542 11.6506 70.5737 11.5588 70.5737 11.473C70.5737 11.3756 70.3635 11.3775 70.2979 11.4753ZM69.7759 11.52C69.5896 11.5648 69.6038 11.6857 69.7953 11.6857C69.882 11.6857 69.9513 11.6379 69.9513 11.5782C69.9513 11.5189 69.9424 11.4745 69.9318 11.479C69.9209 11.4835 69.8508 11.5021 69.7759 11.52ZM68.9752 11.7223C68.8294 11.8275 68.8331 11.8316 69.0562 11.813C69.1846 11.8021 69.2834 11.7618 69.2761 11.7234C69.2534 11.6066 69.136 11.6062 68.9752 11.7223ZM68.4487 11.8033C68.4216 11.8286 68.4167 11.8756 68.4386 11.9077C68.4868 11.9801 68.7063 11.9092 68.7063 11.8215C68.7063 11.748 68.5228 11.735 68.4487 11.8033ZM67.8813 11.9368C67.7383 12.0361 67.7392 12.0398 67.904 12.0421C68.0858 12.0443 68.2085 11.9361 68.0964 11.8723C68.0591 11.851 67.9623 11.8801 67.8813 11.9368ZM67.3414 12.0488C67.2499 12.185 67.3832 12.2186 67.5184 12.0936C67.6399 11.982 67.6399 11.9727 67.5213 11.9727C67.4504 11.9727 67.3694 12.007 67.3414 12.0488ZM66.8388 12.1876C66.8388 12.2272 66.8911 12.2593 66.9555 12.2593C67.0195 12.2593 67.0721 12.2272 67.0721 12.1876C67.0721 12.1481 67.0195 12.116 66.9555 12.116C66.8911 12.116 66.8388 12.1481 66.8388 12.1876ZM66.3362 12.2544C66.2787 12.3402 66.4249 12.4249 66.5286 12.366C66.6157 12.3163 66.5586 12.1876 66.4496 12.1876C66.412 12.1876 66.3609 12.2175 66.3362 12.2544ZM65.3958 12.479C65.3679 12.5212 65.3642 12.5734 65.3881 12.5955C65.4521 12.6544 65.6716 12.5623 65.6716 12.4764C65.6716 12.3794 65.4618 12.3813 65.3958 12.479ZM64.9714 12.6179C64.9714 12.657 65.0236 12.6895 65.088 12.6895C65.152 12.6895 65.2047 12.657 65.2047 12.6179C65.2047 12.5783 65.152 12.5462 65.088 12.5462C65.0236 12.5462 64.9714 12.5783 64.9714 12.6179ZM64.5542 12.6675C64.4663 12.7481 64.5008 12.8328 64.6211 12.8328C64.6854 12.8328 64.7377 12.8026 64.7377 12.7652C64.7377 12.6749 64.6162 12.61 64.5542 12.6675ZM64.1508 12.8376C64.1229 12.8794 64.1185 12.9313 64.1411 12.9522C64.197 13.0037 64.3489 12.913 64.3489 12.8287C64.3489 12.7369 64.2144 12.7432 64.1508 12.8376ZM63.7256 12.941C63.6474 13.0279 63.6523 13.0477 63.7511 13.0477C63.8965 13.0477 63.9913 12.9309 63.8921 12.8742C63.8532 12.8522 63.7787 12.8824 63.7256 12.941ZM63.3113 13.0238C63.2218 13.1063 63.2546 13.1914 63.3761 13.1914C63.4405 13.1914 63.4927 13.1429 63.4927 13.0835C63.4927 12.9716 63.4008 12.9414 63.3113 13.0238ZM62.17 13.4481C62.17 13.5746 62.3377 13.5526 62.3859 13.4198C62.4025 13.3731 62.3612 13.3347 62.2931 13.3347C62.2255 13.3347 62.17 13.3858 62.17 13.4481ZM61.8784 13.4537C61.7427 13.5041 61.7565 13.6213 61.8978 13.6213C61.9618 13.6213 62.0145 13.5731 62.0145 13.5138C62.0145 13.4548 62.0056 13.4089 61.995 13.4119C61.9845 13.4153 61.9319 13.4339 61.8784 13.4537ZM61.1587 13.7291C61.0793 13.8172 61.0846 13.8366 61.1879 13.8366C61.2575 13.8366 61.3142 13.7881 61.3142 13.7291C61.3142 13.6698 61.3009 13.6213 61.2847 13.6213C61.2685 13.6213 61.2118 13.6698 61.1587 13.7291ZM60.1191 14.0873C60.0915 14.153 60.1187 14.1948 60.1883 14.1948C60.2511 14.1948 60.3025 14.1467 60.3025 14.0873C60.3025 14.0284 60.2714 13.9799 60.2333 13.9799C60.1948 13.9799 60.1434 14.0284 60.1191 14.0873ZM59.5006 14.2407C59.4387 14.2982 59.5087 14.4101 59.6072 14.4101C59.6472 14.4101 59.6801 14.3616 59.6801 14.3026C59.6801 14.1914 59.5885 14.1601 59.5006 14.2407ZM58.902 14.5176C58.902 14.5765 58.9373 14.6251 58.9798 14.6251C59.0227 14.6251 59.0576 14.5765 59.0576 14.5176C59.0576 14.4583 59.0227 14.4101 58.9798 14.4101C58.9373 14.4101 58.902 14.4583 58.902 14.5176ZM58.3363 14.6683C58.3051 14.6971 58.2796 14.7702 58.2796 14.8307C58.2796 14.9113 58.3026 14.9195 58.3662 14.8609C58.4136 14.8169 58.4391 14.7441 58.4229 14.6986C58.4063 14.653 58.3674 14.6396 58.3363 14.6683ZM58.0463 14.8762C58.0463 14.9351 58.0811 14.9837 58.124 14.9837C58.167 14.9837 58.2018 14.9351 58.2018 14.8762C58.2018 14.8169 58.167 14.7683 58.124 14.7683C58.0811 14.7683 58.0463 14.8169 58.0463 14.8762ZM56.4121 15.4855C56.4121 15.5247 56.3619 15.5572 56.2999 15.5572C56.1792 15.5572 56.0598 15.6867 56.1254 15.7468C56.1877 15.8042 56.4664 15.6453 56.5174 15.5232C56.5425 15.4632 56.5292 15.4135 56.4874 15.4135C56.4461 15.4135 56.4121 15.446 56.4121 15.4855ZM55.8277 15.7732C55.801 15.8135 55.7487 15.8288 55.7119 15.808C55.6333 15.7632 55.5195 15.9057 55.5855 15.9665C55.6102 15.9889 55.675 15.9736 55.7293 15.9318C55.7839 15.89 55.8629 15.8557 55.9046 15.8553C55.9464 15.855 55.9929 15.8199 56.0083 15.7774C56.0436 15.6796 55.8929 15.6762 55.8277 15.7732ZM55.3227 16.0229C55.3227 16.0822 55.3579 16.1307 55.4008 16.1307C55.4433 16.1307 55.4786 16.0822 55.4786 16.0229C55.4786 15.9639 55.4433 15.9154 55.4008 15.9154C55.3579 15.9154 55.3227 15.9639 55.3227 16.0229ZM54.8561 16.2382C54.8561 16.2972 54.8909 16.3457 54.9339 16.3457C54.9764 16.3457 55.0116 16.2972 55.0116 16.2382C55.0116 16.1789 54.9764 16.1307 54.9339 16.1307C54.8909 16.1307 54.8561 16.1789 54.8561 16.2382ZM54.253 16.4479C54.0676 16.5274 54.0327 16.5983 54.1473 16.6636C54.1858 16.6856 54.2381 16.6531 54.2636 16.5916C54.2891 16.5304 54.343 16.4987 54.3831 16.5214C54.4232 16.5446 54.4766 16.5326 54.5017 16.4953C54.5726 16.3893 54.4458 16.3651 54.253 16.4479ZM53.8545 16.6849C53.8124 16.7546 53.7488 16.808 53.7136 16.8035C53.6079 16.7897 53.2997 16.9379 53.2997 17.0024C53.2997 17.0894 53.3398 17.0797 53.667 16.9125C54.042 16.7211 54.1105 16.6595 54.0117 16.6031C53.9679 16.5781 53.8971 16.6147 53.8545 16.6849ZM52.2937 17.4509C52.1705 17.5875 52.2074 17.6547 52.3585 17.5689C52.416 17.536 52.4484 17.47 52.431 17.4215C52.4083 17.3592 52.369 17.3674 52.2937 17.4509ZM51.8992 17.6719C51.8992 17.7312 51.934 17.7793 51.9769 17.7793C52.0199 17.7793 52.0547 17.7312 52.0547 17.6719C52.0547 17.6129 52.0199 17.5644 51.9769 17.5644C51.934 17.5644 51.8992 17.6129 51.8992 17.6719ZM51.6659 17.8155C51.6659 17.8745 51.7007 17.923 51.7437 17.923C51.7862 17.923 51.8214 17.8745 51.8214 17.8155C51.8214 17.7562 51.7862 17.7077 51.7437 17.7077C51.7007 17.7077 51.6659 17.7562 51.6659 17.8155ZM51.444 17.8987C51.3861 17.9566 51.3605 18.0241 51.3869 18.0484C51.4521 18.1084 51.6124 17.9532 51.5772 17.8644C51.5618 17.8256 51.5019 17.8409 51.444 17.8987ZM50.8154 18.2394C50.7575 18.304 50.7328 18.3779 50.7611 18.4036C50.8336 18.4708 50.9892 18.3114 50.9519 18.2081C50.9304 18.1487 50.8883 18.1585 50.8154 18.2394ZM50.1974 18.5622C50.1387 18.5958 50.1038 18.6581 50.1196 18.701C50.137 18.7477 50.1909 18.7544 50.2553 18.7174C50.314 18.6839 50.3489 18.6215 50.3331 18.5786C50.3156 18.532 50.2618 18.5253 50.1974 18.5622ZM49.7628 18.8499C49.7098 18.929 49.8325 19.0148 49.9042 18.9484C49.9783 18.8805 49.9645 18.7831 49.8807 18.7831C49.8406 18.7831 49.7875 18.8133 49.7628 18.8499ZM49.4611 18.9745C49.3444 19.0816 49.404 19.235 49.5259 19.1417C49.5903 19.0925 49.6425 19.0242 49.6425 18.9895C49.6425 18.9152 49.5352 18.9063 49.4611 18.9745ZM47.9666 19.935C47.9383 19.9772 47.9338 20.0287 47.9569 20.0496C48.0124 20.1011 48.1643 20.0108 48.1643 19.9261C48.1643 19.8343 48.0298 19.8406 47.9666 19.935ZM47.6196 20.1813C47.5645 20.2421 47.5373 20.3082 47.5584 20.328C47.5799 20.3477 47.6426 20.3138 47.6973 20.253C47.7524 20.1918 47.7799 20.1257 47.7585 20.1059C47.737 20.0862 47.6746 20.1201 47.6196 20.1813ZM47.2308 20.4321C47.0765 20.5433 47.0639 20.5728 47.1696 20.5739C47.2429 20.5746 47.3405 20.5108 47.3863 20.4321C47.4887 20.256 47.475 20.256 47.2308 20.4321ZM46.7832 20.6989C46.7298 20.7164 46.686 20.7836 46.686 20.8478C46.686 20.9541 46.6978 20.9537 46.8177 20.8433C46.9582 20.7138 46.942 20.6466 46.7832 20.6989ZM46.2191 21.1131C46.1652 21.1732 46.1567 21.2206 46.2 21.2206C46.243 21.2206 46.3215 21.1724 46.3746 21.1131C46.4289 21.053 46.4374 21.0056 46.3936 21.0056C46.3511 21.0056 46.2725 21.0541 46.2191 21.1131ZM45.7521 21.4359C45.6905 21.4709 45.6658 21.5236 45.6974 21.5527C45.729 21.5818 45.7958 21.568 45.8457 21.5217C45.9631 21.4135 45.8975 21.353 45.7521 21.4359ZM45.2471 21.7937C45.1179 21.9251 45.1171 21.9378 45.2369 21.9378C45.309 21.9378 45.3888 21.8878 45.4143 21.8269C45.4864 21.653 45.4018 21.6362 45.2471 21.7937ZM44.7323 22.1449C44.6298 22.2214 44.5735 22.309 44.6068 22.3396C44.64 22.3706 44.7432 22.3258 44.836 22.2404C45.0547 22.0385 44.9741 21.9643 44.7323 22.1449ZM44.0839 22.6501C43.9592 22.7703 43.8721 22.8818 43.8903 22.8983C43.9527 22.955 44.3706 22.5997 44.3403 22.5158C44.3229 22.4676 44.2147 22.5244 44.0839 22.6501ZM43.3282 23.2169C43.1848 23.3348 43.0908 23.4524 43.1188 23.4781C43.1467 23.5039 43.2869 23.4285 43.4298 23.311C43.5732 23.1931 43.6672 23.0755 43.6392 23.0498C43.6113 23.024 43.4711 23.099 43.3282 23.2169ZM72.6935 23.1322C72.6396 23.1524 72.6153 23.1983 72.6396 23.2341C72.7077 23.3352 73.3128 23.3069 73.5302 23.1923C73.7299 23.0871 72.9628 23.0322 72.6935 23.1322ZM74.6736 23.1304C74.6116 23.1878 74.6817 23.2998 74.7801 23.2998C74.8202 23.2998 74.853 23.2513 74.853 23.1923C74.853 23.0815 74.7614 23.0498 74.6736 23.1304ZM71.7211 23.2087C71.5607 23.224 71.4295 23.2669 71.4295 23.3043C71.4295 23.3789 71.9163 23.3934 72.1873 23.3266C72.3829 23.2781 72.3484 23.1498 72.1447 23.1684C72.0722 23.1751 71.8819 23.193 71.7211 23.2087ZM75.0089 23.2203C75.0089 23.2998 75.2483 23.3897 75.3094 23.3334C75.3341 23.3106 75.3029 23.2621 75.2397 23.2251C75.0944 23.1404 75.0089 23.1386 75.0089 23.2203ZM70.515 23.3472C70.4616 23.3669 70.4178 23.4128 70.4178 23.449C70.4178 23.5505 70.9006 23.5218 71.1181 23.4072C71.3198 23.3013 70.7831 23.2475 70.515 23.3472ZM75.5143 23.3714C75.5411 23.411 75.6152 23.4431 75.6792 23.4431C75.7436 23.4431 75.7743 23.411 75.748 23.3714C75.7213 23.3319 75.6472 23.2998 75.5832 23.2998C75.5188 23.2998 75.488 23.3319 75.5143 23.3714ZM69.8148 23.4233C69.6759 23.4393 69.562 23.4763 69.562 23.5061C69.562 23.5356 69.3992 23.5576 69.2 23.555C68.9566 23.552 68.8262 23.5834 68.8007 23.6509C68.7703 23.7326 68.8403 23.7412 69.1822 23.6976C69.4126 23.6681 69.7087 23.6364 69.8407 23.627C69.9723 23.6177 70.1209 23.5867 70.1712 23.5584C70.2923 23.4893 70.2878 23.3684 70.1651 23.383C70.1116 23.3893 69.9541 23.4072 69.8148 23.4233ZM76.3494 23.5998C76.3972 23.733 76.5649 23.755 76.5649 23.6285C76.5649 23.5658 76.5094 23.5147 76.4418 23.5147C76.3737 23.5147 76.3324 23.5531 76.3494 23.5998ZM42.3327 24.0177C42.0994 24.2144 41.9593 24.3748 42.0212 24.3745C42.1468 24.3733 42.7956 23.8289 42.7956 23.7244C42.7956 23.6278 42.7944 23.6285 42.3327 24.0177ZM68.0838 23.7707C68.0838 23.8502 68.1441 23.8763 68.2916 23.8603C68.5945 23.827 68.6212 23.6584 68.3236 23.6584C68.1575 23.6584 68.0838 23.6927 68.0838 23.7707ZM76.7204 23.6852C76.7204 23.7002 76.7731 23.7524 76.8371 23.8017C76.9326 23.8748 76.9541 23.87 76.9541 23.7744C76.9541 23.7106 76.9015 23.6584 76.8371 23.6584C76.7731 23.6584 76.7204 23.6703 76.7204 23.6852ZM67.4808 23.7774C67.3155 23.8386 67.373 23.945 67.5715 23.945C67.8262 23.945 68.0141 23.8722 67.9619 23.7942C67.9161 23.7263 67.644 23.7166 67.4808 23.7774ZM66.7607 23.9808C66.7607 24.0935 66.8959 24.1185 67.1045 24.045C67.3078 23.9729 67.2438 23.8733 66.9944 23.8733C66.8388 23.8733 66.7607 23.9091 66.7607 23.9808ZM66.3135 23.9923C66.2601 24.0125 66.2163 24.0603 66.2163 24.0994C66.2163 24.2002 66.5476 24.1424 66.5861 24.0345C66.6185 23.9446 66.4942 23.9252 66.3135 23.9923ZM65.6477 24.1341C65.4744 24.2939 65.8081 24.3502 66.0264 24.1983C66.1698 24.0983 66.1653 24.0927 65.9373 24.0905C65.8053 24.0894 65.6753 24.1091 65.6477 24.1341ZM78.2104 24.1565C78.244 24.2491 78.3506 24.2655 78.3603 24.1797C78.3635 24.1513 78.3242 24.1147 78.2728 24.0991C78.2214 24.0834 78.1934 24.1091 78.2104 24.1565ZM65.263 24.2136C65.1026 24.2472 65.0779 24.4468 65.2342 24.4468C65.363 24.4468 65.5493 24.2569 65.4614 24.2147C65.427 24.1987 65.3379 24.198 65.263 24.2136ZM64.6211 24.3752C64.5947 24.4144 64.47 24.4468 64.344 24.4468C64.2185 24.4468 64.1152 24.4771 64.1152 24.5144C64.1152 24.6465 64.2695 24.6663 64.4501 24.5569C64.551 24.4961 64.6543 24.4655 64.6798 24.489C64.745 24.5491 65.0491 24.4513 65.0491 24.3704C65.0491 24.2804 64.6818 24.2845 64.6211 24.3752ZM79.1326 24.4737C79.1326 24.4886 79.1853 24.5413 79.2493 24.5901C79.3448 24.6633 79.3659 24.6584 79.3659 24.5633C79.3659 24.4991 79.3136 24.4468 79.2493 24.4468C79.1853 24.4468 79.1326 24.4592 79.1326 24.4737ZM63.7458 24.5659C63.6924 24.586 63.6486 24.6338 63.6486 24.673C63.6486 24.7737 63.9799 24.7159 64.0184 24.6081C64.0508 24.5181 63.9265 24.4987 63.7458 24.5659ZM79.5218 24.626C79.5218 24.6853 79.5566 24.7334 79.5996 24.7334C79.6421 24.7334 79.6773 24.6853 79.6773 24.626C79.6773 24.567 79.6421 24.5185 79.5996 24.5185C79.5566 24.5185 79.5218 24.567 79.5218 24.626ZM63.2594 24.7693C63.2594 24.8902 63.2736 24.895 63.4478 24.8334C63.6215 24.7719 63.6005 24.6618 63.415 24.6618C63.3287 24.6618 63.2594 24.7095 63.2594 24.7693ZM62.8727 24.8025C62.8095 24.839 62.7807 24.8902 62.8083 24.9155C62.8763 24.9782 63.1817 24.8842 63.1817 24.8006C63.1817 24.7151 63.0209 24.7163 62.8727 24.8025ZM41.1906 24.9693C41.1424 25.017 40.7398 25.3816 40.2959 25.7794C39.2446 26.7212 38.4216 27.5381 38.4747 27.5869C38.5208 27.6295 41.3907 25.0178 41.3931 24.9308C41.3955 24.8506 41.2898 24.8708 41.1906 24.9693ZM62.4458 24.9439C62.4211 24.9805 62.4365 25.0308 62.4802 25.0555C62.573 25.1084 62.7147 25.0413 62.7147 24.9443C62.7147 24.8573 62.5041 24.8566 62.4458 24.9439ZM61.7034 25.1383C61.3823 25.2335 61.0672 25.3323 61.0028 25.3577C60.9388 25.3835 60.7488 25.4391 60.5808 25.4812C60.4127 25.5234 60.2592 25.6036 60.2394 25.6592C60.213 25.7339 60.2418 25.7454 60.3503 25.7033C60.4313 25.6719 60.5585 25.6488 60.6334 25.6514C60.7084 25.6544 60.7695 25.6264 60.7695 25.5894C60.7695 25.5525 60.855 25.5223 60.9594 25.5223C61.0639 25.5223 61.1713 25.4894 61.1984 25.4495C61.2251 25.4092 61.2814 25.3958 61.3231 25.4197C61.3648 25.4435 61.4527 25.4215 61.5188 25.3712C61.5844 25.3208 61.7123 25.2745 61.8031 25.2685C61.8934 25.2622 61.9804 25.2219 61.9962 25.1786C62.0116 25.1353 62.0712 25.1167 62.1283 25.1368C62.2218 25.17 62.3798 25.0431 62.3142 24.9879C62.2992 24.9752 62.0242 25.0431 61.7034 25.1383ZM81.0001 25.1995C81.0001 25.2588 81.0349 25.307 81.0778 25.307C81.1208 25.307 81.1556 25.2588 81.1556 25.1995C81.1556 25.1405 81.1208 25.092 81.0778 25.092C81.0349 25.092 81.0001 25.1405 81.0001 25.1995ZM59.9137 25.779C59.9137 25.9055 60.081 25.8835 60.1292 25.7507C60.1462 25.704 60.1045 25.6656 60.0369 25.6656C59.9692 25.6656 59.9137 25.7167 59.9137 25.779ZM59.4553 25.8592C59.2637 25.9331 59.2151 25.9824 59.2771 26.0395C59.339 26.0969 59.3917 26.0958 59.4703 26.0361C59.5294 25.9906 59.5999 25.9742 59.627 25.9992C59.6541 26.0242 59.6991 25.9902 59.727 25.9238C59.7979 25.7536 59.7558 25.7436 59.4553 25.8592ZM58.8049 26.0734C58.5635 26.1316 58.6392 26.3201 58.8826 26.2663C59.1693 26.2033 59.224 26.1701 59.171 26.0906C59.1248 26.0216 59.0373 26.0175 58.8049 26.0734ZM58.024 26.4137C57.8191 26.5096 57.6267 26.594 57.5959 26.6018C57.1488 26.7145 56.6268 26.9675 56.7009 27.0358C56.7478 27.0791 56.958 27.019 57.2744 26.872C57.5489 26.744 57.7915 26.6354 57.8126 26.6305C57.8341 26.6257 57.9394 26.5876 58.0463 26.5466C58.1532 26.5052 58.3079 26.4596 58.3897 26.4451C58.5618 26.4145 58.6558 26.2391 58.4999 26.2395C58.4432 26.2395 58.2289 26.3178 58.024 26.4137ZM84.3458 26.6548C84.3458 26.7529 84.545 26.8921 84.6058 26.8358C84.6341 26.81 84.6572 26.8246 84.6572 26.8686C84.6572 26.9127 84.8233 27.0268 85.0266 27.1224C85.9646 27.5642 86.2549 27.7086 86.291 27.7511C86.3124 27.7765 86.4068 27.819 86.5004 27.8459C86.5943 27.8728 86.9621 28.0489 87.3177 28.237C87.6732 28.425 88.139 28.6572 88.3532 28.7531C88.5671 28.849 88.7595 28.9437 88.7809 28.9631C88.8328 29.0113 89.0511 29.1228 89.8153 29.4923C90.1664 29.6621 90.6816 29.93 90.9598 30.0871C91.4564 30.3681 92.0549 30.6826 92.5936 30.9453C92.7434 31.0185 92.8836 31.0957 92.905 31.117C92.984 31.195 96.1373 32.6197 96.2313 32.6197C96.2848 32.6197 96.3285 32.6518 96.3285 32.6913C96.3285 32.7309 96.3658 32.763 96.4115 32.763C96.4848 32.763 96.657 32.8301 97.6124 33.232C98.038 33.4111 99.6499 33.9197 99.8787 33.9474C99.9699 33.9582 100.112 34.0011 100.196 34.0421C100.28 34.0836 100.604 34.1362 100.917 34.1589C101.229 34.1817 101.629 34.2295 101.805 34.2645C102.465 34.3966 105.021 34.2955 104.856 34.144C104.838 34.1276 104.098 34.1179 103.21 34.1224C101.645 34.1302 101.401 34.1089 100.18 33.8574C98.5552 33.5227 94.9835 32.0562 92.2826 30.6143C89.9757 29.3829 88.3739 28.571 85.6296 27.2421C85.2019 27.0347 84.7378 26.8026 84.5989 26.7257C84.4596 26.6488 84.3458 26.6167 84.3458 26.6548ZM56.4121 27.1354C56.4121 27.1944 56.4473 27.2429 56.4899 27.2429C56.5328 27.2429 56.5676 27.1944 56.5676 27.1354C56.5676 27.0761 56.5328 27.0276 56.4899 27.0276C56.4473 27.0276 56.4121 27.0761 56.4121 27.1354ZM56.1788 27.2071C56.1788 27.266 56.2137 27.3145 56.2566 27.3145C56.2995 27.3145 56.3343 27.266 56.3343 27.2071C56.3343 27.1477 56.2995 27.0992 56.2566 27.0992C56.2137 27.0992 56.1788 27.1477 56.1788 27.2071ZM55.9099 27.3097C55.8564 27.3888 55.9792 27.4742 56.0512 27.4082C56.125 27.3399 56.1112 27.2429 56.0278 27.2429C55.9873 27.2429 55.9342 27.2727 55.9099 27.3097ZM55.5539 27.4619C55.4482 27.5369 55.315 27.5989 55.2579 27.5996C55.2007 27.6004 55.1667 27.6358 55.1821 27.6784C55.2157 27.7709 55.2433 27.7679 55.5936 27.6328C55.8573 27.5317 55.9346 27.4328 55.807 27.3601C55.7738 27.341 55.66 27.3869 55.5539 27.4619ZM54.9703 27.7481C54.8962 27.8586 54.9974 27.9295 55.0975 27.8377C55.1534 27.7862 55.1546 27.7459 55.1015 27.7157C55.0578 27.6911 54.9991 27.7056 54.9703 27.7481ZM54.2919 28.0582C54.0461 28.1814 53.8448 28.3228 53.8448 28.3721C53.8444 28.493 53.9635 28.4848 54.1056 28.3541C54.17 28.2948 54.2599 28.2463 54.3057 28.2463C54.3515 28.2463 54.3891 28.2183 54.3891 28.1836C54.3891 28.1493 54.494 28.1015 54.6224 28.078C54.7593 28.0526 54.8561 27.99 54.8561 27.9258C54.8561 27.7843 54.8245 27.7918 54.2919 28.0582ZM37.8076 28.1575C37.4233 28.5527 37.3249 28.6784 37.3682 28.7183C37.4127 28.7594 37.8769 28.3239 37.998 28.1273C38.1142 27.9381 38.004 27.9556 37.8076 28.1575ZM53.3191 28.5739C53.0482 28.7236 52.8347 28.965 53.0486 28.8799C53.4949 28.7023 53.763 28.5523 53.7646 28.4795C53.7675 28.3515 53.6929 28.3676 53.3191 28.5739ZM52.5638 28.9986C52.437 29.0941 52.3556 29.193 52.3832 29.218C52.4557 29.2848 52.9109 29.021 52.9109 28.912C52.9109 28.7799 52.8258 28.8012 52.5638 28.9986ZM36.8154 29.2247C36.6829 29.3721 36.5914 29.5083 36.6112 29.5266C36.6594 29.571 36.9539 29.3221 37.0511 29.1553C37.1916 28.9131 37.0588 28.9523 36.8154 29.2247ZM51.6979 29.4885C51.4375 29.6531 51.1698 29.8203 51.103 29.8595C50.472 30.2319 50.1873 30.4367 50.1873 30.5173C50.1873 30.5957 50.2164 30.5968 50.3432 30.524C50.4286 30.4748 50.4987 30.408 50.4987 30.3759C50.4987 30.3434 50.5335 30.3371 50.5765 30.3613C50.6194 30.3856 50.6542 30.3737 50.6542 30.3345C50.6542 30.2957 50.7154 30.2453 50.7903 30.2233C50.8652 30.2013 51.0187 30.1102 51.1313 30.0214C51.2439 29.9322 51.5501 29.7468 51.8113 29.6087C52.0725 29.4706 52.2868 29.3173 52.2876 29.268C52.2888 29.1337 52.2155 29.1613 51.6979 29.4885ZM36.1589 29.9311C36.0394 30.0692 35.9831 30.1822 36.0337 30.1822C36.1257 30.1822 36.2706 30.0404 36.4193 29.8057C36.557 29.5871 36.3849 29.6703 36.1589 29.9311ZM35.4813 30.661C35.2193 30.9785 34.6952 31.6151 34.4113 31.9611C34.3364 32.0521 34.2226 32.1842 34.1586 32.254C34.0942 32.3241 34.0067 32.4312 33.9642 32.4921C33.726 32.8313 33.2627 33.4492 33.2234 33.4798C33.1983 33.4996 33.0938 33.6447 32.9914 33.8026C32.8889 33.9604 32.782 34.1056 32.7532 34.1254C32.7111 34.1545 32.2174 34.8373 31.8655 35.3538C31.3791 36.0669 31.1239 36.4781 31.1239 36.549C31.1239 36.596 31.0891 36.6344 31.0461 36.6344C31.0032 36.6344 30.9684 36.683 30.9684 36.7419C30.9684 36.8012 30.9388 36.8494 30.9032 36.8494C30.8671 36.8494 30.7707 36.9781 30.6889 37.1352C30.6071 37.2927 30.5168 37.4218 30.4881 37.4222C30.4597 37.4226 30.4135 37.5177 30.386 37.633C30.3585 37.7487 30.2856 37.8815 30.224 37.9285C30.1628 37.9756 30.1126 38.0558 30.1126 38.1069C30.1126 38.158 30.0847 38.2103 30.0507 38.2237C29.9664 38.2562 28.4007 41.1451 28.4007 41.2679C28.4007 41.322 28.3744 41.366 28.342 41.366C28.2853 41.366 28.1804 41.5552 28.024 41.9396C27.9499 42.1217 27.6373 42.774 27.4056 43.2299C27.3355 43.368 27.2768 43.5024 27.2752 43.5289C27.2736 43.555 27.246 43.6009 27.214 43.6303C27.182 43.6598 27.1557 43.743 27.1557 43.8154C27.1557 43.8878 27.1237 43.9468 27.0848 43.9468C27.0456 43.9468 26.9901 44.0759 26.9613 44.2337C26.9322 44.3916 26.8771 44.5203 26.8386 44.5203C26.8001 44.5203 26.7463 44.6494 26.7187 44.8073C26.6912 44.9651 26.6385 45.0939 26.6009 45.0939C26.5636 45.0939 26.5332 45.1532 26.5332 45.2256C26.5332 45.2976 26.5089 45.3793 26.479 45.4066C26.4494 45.4342 26.4178 45.4961 26.4093 45.5443C26.4012 45.5924 26.3202 45.8021 26.2303 46.0107C26.14 46.2193 26.0663 46.4529 26.0663 46.5305C26.0663 46.6077 26.0314 46.6712 25.9885 46.6712C25.9456 46.6712 25.9103 46.7275 25.9099 46.7966C25.9095 46.8996 25.5244 47.978 25.3401 48.3918C25.3138 48.4508 25.2579 48.6284 25.2154 48.7862C25.1732 48.9437 25.0935 49.2396 25.0384 49.4433C24.9833 49.6471 24.9116 49.8378 24.8796 49.8676C24.8476 49.8971 24.8213 49.9911 24.8213 50.0766C24.8213 50.162 24.797 50.2542 24.7674 50.2818C24.7095 50.3348 24.6731 50.468 24.6366 50.758C24.6241 50.8565 24.573 51.0076 24.5236 51.0931C24.4738 51.1789 24.4527 51.2964 24.4766 51.3546C24.5009 51.4125 24.4835 51.4811 24.4378 51.5073C24.392 51.5334 24.3543 51.6476 24.3543 51.7614C24.3543 51.8748 24.324 51.9853 24.2871 52.0065C24.2498 52.0274 24.1956 52.1827 24.1664 52.3513C24.1372 52.5196 24.0595 52.8025 23.9935 52.9801C23.8695 53.3141 23.7071 53.9216 23.5431 54.6649C23.4909 54.9015 23.4277 55.1433 23.4022 55.2026C23.3767 55.2616 23.3544 55.3586 23.3524 55.4175C23.3422 55.7187 23.2361 56.2523 23.1713 56.3273C23.1312 56.3743 23.1077 56.471 23.1195 56.5426C23.1316 56.6139 23.111 56.7691 23.0741 56.8874C23.0373 57.0057 23.002 57.1344 22.9964 57.174C22.9903 57.2135 22.9571 57.3986 22.9222 57.5852C22.8498 57.9733 22.9133 58.2453 23.0348 58.0681C23.0745 58.0102 23.1077 57.8658 23.1081 57.7475C23.1094 57.5389 23.2013 57.0501 23.5054 55.6325C23.8072 54.2287 23.9902 53.5275 24.4054 52.1916C24.473 51.9745 24.5617 51.652 24.6026 51.4744C24.6868 51.1095 24.7026 51.0516 24.763 50.9009C24.7869 50.8419 24.8646 50.5837 24.9363 50.3273C26.1157 46.11 28.7656 40.3302 31.1903 36.6871C31.3677 36.4199 31.5131 36.1848 31.5131 36.1643C31.5131 36.1437 31.5779 36.0393 31.6573 35.9325C31.7367 35.8258 32.2032 35.1735 32.6941 34.4836C33.7681 32.9738 34.2983 32.2898 35.3562 31.0487C35.6388 30.717 35.8705 30.4184 35.8705 30.3856C35.8705 30.2546 35.7413 30.3464 35.4813 30.661ZM49.487 30.9032C49.2088 31.1017 48.9087 31.3192 48.8196 31.3864C48.7309 31.4536 48.6045 31.5405 48.5397 31.5801C48.1262 31.8305 47.464 32.3726 47.464 32.4607C47.464 32.5503 47.4835 32.551 47.5981 32.4671C47.7901 32.3264 48.1687 32.0256 48.2862 31.9208C48.3417 31.8715 48.4223 31.8312 48.466 31.8312C48.5097 31.8312 48.5737 31.7883 48.6078 31.7357C48.6422 31.6834 48.9941 31.423 49.3898 31.1565C50.0309 30.7252 50.231 30.5393 50.0512 30.5412C50.0192 30.5416 49.7652 30.7043 49.487 30.9032ZM46.9351 32.7936C46.7346 32.9678 46.5937 33.132 46.6216 33.1578C46.65 33.1839 46.7399 33.1458 46.8217 33.0738C46.9035 33.0014 47.0639 32.8701 47.1785 32.7813C47.3668 32.6357 47.4527 32.4764 47.3429 32.4764C47.319 32.4764 47.1352 32.6189 46.9351 32.7936ZM45.7817 33.7287C45.3908 34.0623 45.0527 34.4019 45.0296 34.4836C45.0008 34.584 45.1426 34.4955 45.467 34.2101C45.731 33.978 46.083 33.6761 46.2494 33.5391C46.4163 33.4022 46.5386 33.2525 46.522 33.2063C46.505 33.16 46.1721 33.3955 45.7817 33.7287ZM44.0527 35.3866C43.6145 35.856 43.2314 36.2729 43.201 36.3128C43.1706 36.3531 42.9868 36.5628 42.7928 36.7789C42.3303 37.2946 41.1667 38.7342 40.8816 39.1435C40.758 39.3212 40.6386 39.4824 40.6159 39.5021C40.5762 39.5361 40.3595 39.8328 40.1898 40.085C40.1465 40.1492 39.9185 40.4805 39.6832 40.8212C38.6387 42.3325 37.1499 44.8621 36.4723 46.2768C35.3728 48.5735 34.5935 50.5796 33.9387 52.801C33.7382 53.4801 33.6057 54.0044 33.1513 55.9194C33.1092 56.0967 33.0517 56.4034 33.0234 56.6004C32.9946 56.7975 32.9549 57.0236 32.9347 57.1023C32.8334 57.496 32.7087 58.6155 32.7601 58.6681C32.8585 58.7692 32.9869 58.283 33.027 57.6568C33.0481 57.3311 33.0991 57.0053 33.1412 56.9333C33.1829 56.8613 33.2165 56.7411 33.2157 56.6658C33.2137 56.4348 33.3109 55.8915 33.3818 55.7403C33.4186 55.6612 33.466 55.484 33.4875 55.3459C33.5089 55.2078 33.5835 54.869 33.6535 54.5933C33.7232 54.3171 33.824 53.9137 33.8775 53.6969C33.931 53.4801 33.9962 53.2544 34.0225 53.195C34.0488 53.1361 34.1079 52.9342 34.1533 52.7469C34.3599 51.8987 34.4129 51.7211 34.4781 51.6573C34.5162 51.62 34.5478 51.5151 34.5478 51.4244C34.5478 51.3337 34.5826 51.2595 34.6255 51.2595C34.6681 51.2595 34.7033 51.1957 34.7033 51.1181C34.7033 51.0401 34.828 50.6289 34.9803 50.2038C35.261 49.4217 35.2893 49.3512 35.5125 48.8829C35.5809 48.7388 35.6368 48.5892 35.6368 48.5504C35.6368 48.5116 35.6891 48.3873 35.7531 48.2746C35.817 48.1616 35.8697 48.0127 35.8701 47.9436C35.8701 47.8746 35.9049 47.8183 35.9475 47.8183C35.9896 47.8183 36.0467 47.6891 36.0738 47.5317C36.1014 47.3738 36.1544 47.2447 36.1917 47.2447C36.2289 47.2447 36.2593 47.2149 36.2593 47.1779C36.2593 47.0619 37.512 44.5894 37.7874 44.1621C37.851 44.0636 37.9226 43.9263 37.9461 43.8572C37.97 43.7882 38.0174 43.7318 38.0518 43.7318C38.0863 43.7318 38.1377 43.6352 38.1656 43.5169C38.194 43.3986 38.2406 43.3009 38.2693 43.2997C38.2981 43.2986 38.4086 43.1214 38.5152 42.9053C38.6221 42.6896 38.7359 42.5131 38.7683 42.5131C38.8007 42.5131 38.827 42.4788 38.827 42.4366C38.827 42.3945 38.9092 42.2575 39.0093 42.1318C39.1093 42.0064 39.2361 41.7989 39.2911 41.6705C39.3458 41.5425 39.413 41.4377 39.4402 41.4377C39.4673 41.4377 39.5341 41.3448 39.5888 41.231C39.6435 41.1171 39.7569 40.9507 39.8411 40.8615C39.9254 40.772 39.9942 40.6556 39.9942 40.6022C39.9942 40.5492 40.027 40.5056 40.0667 40.5056C40.1068 40.5056 40.1635 40.4358 40.1931 40.3499C40.2226 40.2641 40.2769 40.1593 40.3138 40.1171C40.6106 39.7757 40.7864 39.5514 41.048 39.1794C41.2145 38.9428 41.3712 38.7331 41.3963 38.7133C41.4214 38.6939 41.5624 38.5166 41.7102 38.32C41.8576 38.1233 42.0135 37.9252 42.0561 37.8793C42.099 37.8338 42.2565 37.6461 42.4064 37.4621C42.5562 37.2785 42.8013 36.9908 42.9511 36.8225C43.101 36.6542 43.346 36.3773 43.4958 36.2072C43.6457 36.037 43.943 35.7146 44.1572 35.4907C44.8157 34.8015 44.9065 34.6907 44.8773 34.6105C44.8619 34.5679 44.4909 34.9172 44.0527 35.3866ZM67.5213 37.3199C67.4974 37.3419 67.2378 37.3927 66.9441 37.4326C66.6509 37.4726 66.3407 37.5151 66.2552 37.527C65.9863 37.5647 65.3282 37.7192 65.1658 37.7826C65.0803 37.8159 64.6773 37.9457 64.2711 38.0711C63.4186 38.3338 61.6524 39.123 60.9372 39.5607C60.6679 39.7257 60.4281 39.8604 60.4046 39.8604C60.3811 39.8604 60.1648 40.0044 59.9239 40.1798C59.6829 40.3555 59.258 40.6619 58.9798 40.8608C58.2577 41.3769 57.6623 41.8668 56.7049 42.7337C56.244 43.1508 55.8463 43.4736 55.8216 43.4509C55.7969 43.4277 55.7884 43.446 55.8026 43.4912C55.8168 43.5359 55.6657 43.7348 55.4668 43.9326C55.268 44.1304 55.0752 44.339 55.0387 44.3957C54.9788 44.4893 54.3369 45.1875 54.0971 45.4196C54.0437 45.4715 53.9999 45.5308 53.9999 45.5517C53.9999 45.5999 53.6196 46.1182 53.5475 46.1678C53.4584 46.2294 53.0664 46.7294 53.0664 46.7816C53.0664 46.8212 52.6768 47.3082 52.3763 47.6444C52.3382 47.6869 52.2831 47.7918 52.2536 47.8776C52.224 47.963 52.1709 48.0332 52.1357 48.0332C52.1005 48.0332 52.0494 48.1149 52.0223 48.2145C51.9952 48.3138 51.9126 48.4541 51.8388 48.5258C51.7651 48.5974 51.6392 48.7661 51.559 48.9004C51.4788 49.0347 51.3083 49.3221 51.1803 49.5389C51.0523 49.7557 50.9252 49.9493 50.898 49.9691C50.8158 50.0288 49.6425 52.2252 49.6425 52.3192C49.6425 52.367 49.6113 52.4066 49.5733 52.4066C49.5352 52.4066 49.4817 52.4887 49.4542 52.5887C49.4271 52.6887 49.2833 53.01 49.1347 53.3021C48.986 53.5947 48.8633 53.8593 48.8621 53.891C48.8605 53.9223 48.7916 54.0768 48.709 54.2346C48.6264 54.3925 48.5575 54.5556 48.5559 54.5977C48.5547 54.6395 48.4879 54.8007 48.4081 54.956C48.3283 55.1112 48.187 55.4481 48.0946 55.7045C48.0019 55.9605 47.8954 56.2348 47.8577 56.3139C47.8018 56.4314 47.5094 57.2807 46.9934 58.8267C46.9533 58.9472 46.8885 59.189 46.8492 59.3644C46.81 59.5398 46.7095 59.9092 46.6261 60.185C46.5423 60.4611 46.4155 60.9451 46.3446 61.2604C46.2733 61.5757 46.1802 61.9791 46.1377 62.1567C46.0955 62.334 46.0247 62.7049 45.9809 62.981C45.9372 63.2572 45.8489 63.8053 45.7845 64.1997C45.7201 64.5942 45.6533 65.0617 45.6363 65.2393C45.6197 65.4166 45.5808 65.6748 45.5504 65.8129C45.52 65.951 45.4856 66.1928 45.4743 66.3506C45.4629 66.5081 45.4285 66.9324 45.3977 67.2928C45.3475 67.885 45.3912 68.3921 45.4848 68.3056C45.505 68.2869 45.5561 67.7428 45.5986 67.0962C45.6411 66.4495 45.71 65.6946 45.7521 65.4185C45.7938 65.1427 45.8829 64.5617 45.9506 64.1281C47.7443 52.5816 54.997 41.9288 63.3372 38.5916C64.8458 37.9879 66.8959 37.4961 67.9149 37.4934C68.4163 37.4923 68.6767 37.399 68.3819 37.3263C68.1551 37.2703 67.5796 37.2658 67.5213 37.3199ZM69.4426 37.3558C69.3915 37.4311 69.7042 37.4927 70.1457 37.4938C73.1277 37.5013 77.5454 39.701 79.6178 42.2105C82.5229 45.7282 84.5207 48.7157 87.634 54.1988C91.556 61.1063 92.8921 62.5761 95.7838 63.1657C98.714 63.7628 100.416 62.5944 105.346 56.6004C109.79 51.1979 113.36 47.8067 116.705 45.8096C116.924 45.6786 117.104 45.5286 117.104 45.4756C117.104 45.3976 117.075 45.3961 116.948 45.4692C116.862 45.5185 116.793 45.5849 116.793 45.6174C116.793 45.6495 116.758 45.6562 116.715 45.6316C116.672 45.6073 116.637 45.6155 116.637 45.6502C116.637 45.6846 116.488 45.789 116.306 45.882C116.125 45.9749 115.818 46.1663 115.626 46.3074C115.434 46.4484 115.242 46.588 115.198 46.6174C115.012 46.7451 114.181 47.3615 114.063 47.4597C113.992 47.519 113.595 47.8414 113.181 48.1769C111.91 49.2071 109.81 51.1923 108.817 52.3032C108.646 52.4946 108.348 52.8182 108.156 53.0223C107.963 53.226 107.596 53.6428 107.339 53.9477C107.082 54.2529 106.758 54.6149 106.619 54.7522C106.48 54.8895 106.366 55.0228 106.366 55.0485C106.366 55.0739 106.287 55.1828 106.191 55.2903C106.095 55.3978 105.928 55.6011 105.821 55.7426C105.714 55.884 105.566 56.0706 105.492 56.1568C105.417 56.243 105.208 56.4911 105.027 56.7079C104.845 56.9247 104.678 57.1184 104.655 57.1382C104.633 57.1579 104.527 57.2949 104.42 57.4423C104.313 57.5901 104.2 57.711 104.168 57.7113C104.136 57.7113 104.11 57.7576 104.11 57.8139C104.11 57.8703 104.031 57.9752 103.934 58.0472C103.838 58.1188 103.715 58.2673 103.663 58.377C103.61 58.4864 103.514 58.5946 103.449 58.6173C103.384 58.6405 103.331 58.692 103.331 58.7323C103.331 58.8144 102.974 59.2267 102.534 59.6521C102.374 59.807 102.242 59.9611 102.242 59.9947C102.242 60.1167 99.9338 62.125 99.6337 62.2642C99.4636 62.3429 99.255 62.4653 99.1704 62.5358C99.0853 62.6064 98.9278 62.6832 98.8201 62.7067C98.7123 62.7306 98.5876 62.7762 98.543 62.8079C98.2539 63.0153 96.3216 63.1407 95.6671 62.9944C94.973 62.8392 94.0885 62.4608 94.0075 62.2847C93.9929 62.2537 93.9131 62.2284 93.8297 62.2284C93.7462 62.2284 93.6579 62.1799 93.6332 62.1209C93.6089 62.0616 93.547 62.0131 93.4963 62.0131C93.3918 62.0131 91.9505 60.7022 91.901 60.5622C91.8836 60.5126 91.7941 60.4074 91.7026 60.3283C91.6111 60.2495 91.4329 60.0398 91.3061 59.8626C91.1797 59.6849 91.0327 59.4972 90.9793 59.445C90.9258 59.3931 90.8821 59.3043 90.8821 59.248C90.8821 59.1916 90.8525 59.1454 90.8165 59.1454C90.7448 59.1454 90.5354 58.7838 90.5573 58.6976C90.5645 58.6677 90.5411 58.6438 90.505 58.6438C90.469 58.6438 90.3726 58.5237 90.2912 58.3767C90.2094 58.23 90.0822 58.0472 90.0085 57.9707C89.9344 57.8942 89.8331 57.7158 89.7833 57.5744C89.7331 57.433 89.6663 57.3012 89.6347 57.2815C89.5589 57.2344 88.8822 56.1142 88.8121 55.9194C88.8048 55.8997 88.7732 55.8109 88.742 55.7224C88.7109 55.6336 88.6521 55.5608 88.6116 55.5608C88.5715 55.5608 88.5614 55.5265 88.5898 55.4843C88.6181 55.4426 88.5877 55.3698 88.5225 55.3231C88.4573 55.2765 88.1844 54.8351 87.9154 54.3421C87.6465 53.8492 87.3954 53.4264 87.3578 53.4021C87.3201 53.3779 87.2881 53.3298 87.2861 53.2947C87.2812 53.2025 87.2047 53.0219 87.1528 52.9801C87.1281 52.9603 87.0265 52.7991 86.9268 52.6215C86.8268 52.4443 86.6271 52.0972 86.483 51.8509C86.3384 51.6047 86.2416 51.4028 86.2679 51.4028C86.2938 51.4028 86.263 51.3464 86.1995 51.2774C85.9945 51.0546 85.6341 50.4378 85.6551 50.3453C85.6661 50.296 85.6454 50.2557 85.6086 50.2557C85.5442 50.2557 85.1999 49.7437 85.1886 49.6303C85.1853 49.5997 85.1019 49.4859 85.0027 49.3777C84.9039 49.2691 84.7787 49.0676 84.7244 48.9295C84.6702 48.7914 84.6033 48.6784 84.5762 48.6784C84.5159 48.6784 84.3134 48.306 84.3324 48.2306C84.3397 48.2007 84.3162 48.1769 84.2802 48.1769C84.2441 48.1769 84.1481 48.0556 84.0663 47.9078C83.9849 47.76 83.8995 47.6227 83.8764 47.6033C83.7707 47.5119 83.3345 46.8287 83.3345 46.7544C83.3345 46.7089 83.298 46.6712 83.2539 46.6712C83.2097 46.6712 83.1482 46.6148 83.1174 46.5458C83.0862 46.4768 82.921 46.2305 82.7501 45.9984C82.5796 45.7663 82.4046 45.526 82.3617 45.4648C82.3187 45.4032 82.256 45.3189 82.2219 45.2771C82.0604 45.0801 81.6226 44.4308 81.6226 44.3882C81.6226 44.3617 81.5525 44.2994 81.467 44.2502C81.3812 44.2009 81.3111 44.1274 81.3111 44.0867C81.3111 44.0233 81.0389 43.6244 80.9223 43.5169C80.7639 43.3706 80.3776 42.8654 80.3776 42.8042C80.3776 42.7624 80.35 42.7281 80.3164 42.7281C80.2828 42.7281 80.1982 42.6389 80.1285 42.5299C80.0584 42.4206 79.9021 42.2318 79.781 42.1097C79.6599 41.9877 79.4388 41.7288 79.2897 41.534C78.8025 40.8981 76.8759 39.5286 75.5374 38.8667C75.2932 38.7458 75.0308 38.6148 74.9538 38.5752C74.6634 38.4256 73.7668 38.0681 73.6813 38.0681C73.6327 38.0681 73.4825 38.0237 73.3476 37.9692C72.8543 37.7696 72.3132 37.6192 71.7794 37.5326C71.694 37.5188 71.3963 37.4677 71.1181 37.4188C70.5446 37.3184 69.494 37.2785 69.4426 37.3558ZM123.873 42.8904C123.679 42.9717 123.679 42.9717 123.942 42.9986C124.272 43.0322 124.595 42.9617 124.533 42.8695C124.472 42.7773 124.116 42.7885 123.873 42.8904ZM126.019 42.862C125.957 42.9546 126.163 43.015 126.541 43.015C126.762 43.015 126.836 42.9919 126.78 42.9408C126.672 42.8408 126.075 42.7788 126.019 42.862ZM123.069 42.9911C122.879 43.1669 123.209 43.2206 123.45 43.0531C123.593 42.9531 123.589 42.9478 123.361 42.9456C123.229 42.9441 123.098 42.9646 123.069 42.9911ZM126.986 43.0135C126.986 43.093 127.359 43.1967 127.425 43.1359C127.449 43.1139 127.445 43.0617 127.417 43.0199C127.352 42.9236 126.986 42.9184 126.986 43.0135ZM122.648 43.0665C122.494 43.1173 122.534 43.2299 122.706 43.2299C122.792 43.2299 122.862 43.1997 122.862 43.1624C122.862 43.0706 122.765 43.0277 122.648 43.0665ZM127.608 43.1225C127.608 43.1822 127.677 43.2299 127.764 43.2299C127.949 43.2299 127.97 43.1199 127.796 43.0583C127.622 42.9971 127.608 43.002 127.608 43.1225ZM122.058 43.2061C121.952 43.3038 122.011 43.3826 122.175 43.3606C122.389 43.3314 122.46 43.1583 122.259 43.1583C122.177 43.1583 122.086 43.18 122.058 43.2061ZM128.075 43.2598C128.075 43.3225 128.13 43.3732 128.198 43.3732C128.266 43.3732 128.308 43.3352 128.291 43.2882C128.243 43.1553 128.075 43.1333 128.075 43.2598ZM121.744 43.2796C121.657 43.3606 121.691 43.4453 121.811 43.4453C121.876 43.4453 121.928 43.4147 121.928 43.3777C121.928 43.287 121.807 43.2225 121.744 43.2796ZM121.341 43.4497C121.313 43.4919 121.309 43.5434 121.332 43.5647C121.387 43.6158 121.539 43.5255 121.539 43.4408C121.539 43.3494 121.404 43.3553 121.341 43.4497ZM128.775 43.4811C128.775 43.54 128.843 43.5886 128.926 43.5886C129.01 43.5886 129.099 43.6214 129.126 43.6613C129.153 43.7012 129.208 43.7158 129.248 43.693C129.287 43.6703 129.32 43.6822 129.32 43.7192C129.32 43.7565 129.391 43.8039 129.477 43.8248C129.564 43.8457 129.66 43.8699 129.691 43.8785C129.722 43.8874 129.869 43.9699 130.016 44.0621C130.163 44.1543 130.303 44.2117 130.327 44.1893C130.385 44.1356 129.929 43.8027 129.855 43.8449C129.824 43.8628 129.775 43.8442 129.748 43.8035C129.721 43.7628 129.666 43.7479 129.626 43.7707C129.586 43.7934 129.553 43.7859 129.553 43.7539C129.552 43.6863 129.18 43.5169 129.032 43.5169C128.976 43.5169 128.931 43.4844 128.931 43.4453C128.931 43.4057 128.896 43.3732 128.853 43.3732C128.81 43.3732 128.775 43.4218 128.775 43.4811ZM120.952 43.5934C120.924 43.6352 120.92 43.6871 120.942 43.708C120.998 43.7595 121.15 43.6688 121.15 43.5841C121.15 43.4927 121.016 43.4986 120.952 43.5934ZM120.605 43.7072C120.541 43.727 120.436 43.7621 120.372 43.7852C120.308 43.808 120.223 43.8296 120.184 43.8333C120.084 43.8419 120.03 44.0184 120.127 44.0184C120.171 44.0184 120.229 43.986 120.256 43.9457C120.283 43.9057 120.335 43.8901 120.372 43.911C120.409 43.9322 120.461 43.9166 120.488 43.8763C120.515 43.8363 120.605 43.8035 120.688 43.8035C120.771 43.8035 120.839 43.7714 120.839 43.7318C120.839 43.6553 120.791 43.6501 120.605 43.7072ZM119.765 44.033C119.714 44.0804 119.671 44.0923 119.671 44.0598C119.671 44.0278 119.625 44.0371 119.567 44.0807C119.509 44.1248 119.262 44.2543 119.016 44.3684C118.77 44.4826 118.604 44.5961 118.647 44.6207C118.755 44.6819 119.999 44.1005 119.942 44.0154C119.884 43.9285 119.878 43.9292 119.765 44.033ZM130.457 44.2214C130.406 44.2968 131.022 44.6968 131.091 44.6334C131.116 44.6106 131.121 44.5815 131.103 44.5685C130.719 44.2897 130.492 44.1681 130.457 44.2214ZM118.358 44.7177C118.316 44.7868 118.264 44.8271 118.241 44.8073C118.177 44.7498 117.182 45.336 117.182 45.4319C117.182 45.489 117.276 45.4678 117.454 45.3711C117.604 45.2898 117.726 45.1942 117.726 45.1584C117.726 45.123 117.753 45.1013 117.785 45.1103C117.894 45.1413 118.504 44.7815 118.504 44.6864C118.504 44.5565 118.449 44.5685 118.358 44.7177ZM131.187 44.6815C131.187 44.7453 131.293 44.8662 131.421 44.9506C131.549 45.0349 131.654 45.0752 131.654 45.0405C131.654 45.0058 131.549 44.8845 131.421 44.7715C131.246 44.617 131.187 44.5946 131.187 44.6815ZM131.81 45.1439C131.81 45.1778 132.171 45.5435 132.611 45.9566C134.642 47.8586 136.099 50.2662 137.449 53.9481C137.617 54.4044 138.163 56.2769 138.264 56.7437C138.299 56.9016 138.398 57.3531 138.485 57.7475C138.571 58.142 138.687 58.7308 138.741 59.0558C138.796 59.3812 138.861 59.6473 138.885 59.6473C138.909 59.6473 138.931 59.8167 138.933 60.0238C138.94 60.7275 139.061 61.4395 139.174 61.4395C139.3 61.4395 139.308 61.2768 139.199 60.9372C139.154 60.7996 139.102 60.4771 139.082 60.2208C139.039 59.6562 139.01 59.4752 138.907 59.1323C138.864 58.9871 138.847 58.8513 138.87 58.83C138.893 58.8088 138.869 58.6983 138.818 58.5841C138.732 58.392 138.653 57.9363 138.65 57.6113C138.65 57.5367 138.6 57.3874 138.54 57.28C138.479 57.1725 138.448 57.068 138.47 57.0475C138.493 57.027 138.455 56.8214 138.386 56.5904C138.317 56.3594 138.244 56.0896 138.223 55.9911C138.157 55.6814 138.135 55.5997 138.093 55.4892C138.07 55.4302 137.975 55.1399 137.882 54.844C137.789 54.5485 137.693 54.2578 137.669 54.1988C137.645 54.1395 137.612 53.9955 137.595 53.8787C137.579 53.7619 137.531 53.6342 137.489 53.5954C137.447 53.5566 137.412 53.4648 137.412 53.3913C137.412 53.3182 137.325 53.0879 137.219 52.8805C137.112 52.673 137.002 52.4002 136.975 52.2741C136.948 52.1483 136.895 52.0278 136.857 52.0065C136.82 51.9853 136.79 51.9256 136.79 51.8737C136.79 51.8218 136.718 51.6308 136.631 51.4491C136.544 51.2673 136.477 51.0975 136.482 51.0714C136.488 51.0457 136.462 51.005 136.425 50.9807C136.387 50.9565 136.206 50.6464 136.022 50.2915C135.386 49.0702 134.354 47.5656 133.552 46.6943C132.704 45.7719 131.81 44.9763 131.81 45.1439ZM64.8543 57.8852C60.2232 58.8647 55.9225 64.1621 54.5118 70.6243C54.0534 72.7237 53.6747 76.4948 53.9222 76.4948C53.9651 76.4948 54.0019 76.3254 54.0048 76.1187C54.0088 75.7556 54.1397 73.923 54.1874 73.5555C54.2 73.457 54.2344 73.1342 54.2636 72.8386C54.2931 72.5427 54.3478 72.1718 54.3859 72.0143C54.424 71.8565 54.5123 71.4371 54.5819 71.0822C54.652 70.7273 54.7399 70.324 54.7775 70.1859C54.8152 70.0482 54.9047 69.6933 54.976 69.3974C55.1116 68.8343 55.4899 67.7298 55.6791 67.3432C55.7398 67.2193 55.7896 67.0816 55.7896 67.0376C55.7896 66.9939 55.822 66.9021 55.8613 66.8335C56.0468 66.5111 56.4121 65.742 56.4121 65.6741C56.4121 65.6319 56.4445 65.5979 56.4838 65.5979C56.5231 65.5979 56.5786 65.5009 56.6065 65.3826C56.6349 65.2644 56.6863 65.1677 56.7211 65.1677C56.756 65.1677 56.8082 65.0789 56.8378 64.9703C56.8669 64.8621 56.9674 64.6766 57.0609 64.5583C57.1541 64.4401 57.3148 64.1979 57.4173 64.0206C57.664 63.5952 58.1443 62.9157 58.2196 62.8855C58.2528 62.8724 58.2796 62.8224 58.2796 62.7747C58.2796 62.7269 58.3407 62.6138 58.4156 62.5235C58.8745 61.9705 59.2637 61.5321 59.3836 61.4324C59.4597 61.3694 59.5047 61.3018 59.484 61.2828C59.4451 61.247 60.8797 59.9559 61.2834 59.6629C61.9319 59.1924 62.897 58.6614 63.5705 58.4043C65.0038 57.8576 67.017 57.7595 68.356 58.1714C68.3989 58.1845 68.5483 58.2196 68.6885 58.2494C68.8282 58.2793 68.9614 58.3319 68.9845 58.3662C69.0076 58.4005 69.0805 58.4285 69.1461 58.4285C69.3778 58.4285 70.7204 59.0763 71.4449 59.5379C72.9738 60.5115 74.2123 61.6332 75.7177 63.4075C76.2223 64.002 76.7204 64.6464 76.7204 64.7039C76.7204 64.7255 76.7549 64.7826 76.797 64.83C77.0902 65.161 77.2874 65.4338 77.6896 66.0636C78.3267 67.0615 78.3919 67.1659 78.6199 67.5514C78.7309 67.7387 78.9123 68.0451 79.0229 68.2324C79.1338 68.4197 79.2991 68.7018 79.3902 68.8597C79.4813 69.0175 79.5959 69.1948 79.6449 69.2541C79.6939 69.3131 79.8827 69.6153 80.0645 69.9258C80.3857 70.474 80.6825 70.9206 80.8433 71.0971C80.8867 71.1445 80.9223 71.2027 80.9223 71.2259C80.9223 71.2494 81.0523 71.4524 81.2115 71.677C81.5869 72.2073 81.6821 72.3494 81.7501 72.48C81.7805 72.5394 81.887 72.6875 81.9862 72.8095C82.0859 72.9316 82.1673 73.067 82.1673 73.1107C82.1673 73.1543 82.213 73.2159 82.2689 73.2472C82.3244 73.279 82.4536 73.4338 82.5553 73.5913C82.6573 73.7491 82.8582 74.0234 83.0016 74.2007C83.1449 74.3783 83.5313 74.8623 83.8598 75.2761C84.1878 75.6903 84.4932 76.0664 84.5373 76.1123C84.5819 76.1578 84.7759 76.3817 84.9683 76.6094C85.161 76.8366 85.4332 77.134 85.5737 77.2699C85.7139 77.4057 85.8981 77.6016 85.9836 77.7049C86.1926 77.9591 88.2569 79.8644 88.3229 79.8644C88.352 79.8644 88.4581 79.9469 88.559 80.048C88.8607 80.3506 90.3548 81.3701 90.4965 81.3701C90.5374 81.3701 90.5706 81.3984 90.5706 81.4328C90.5706 81.4675 90.6788 81.5372 90.8108 81.5876C90.9428 81.638 91.0931 81.7145 91.1445 81.7574C91.296 81.8847 91.5163 81.9862 92.2903 82.2873C94.1792 83.022 95.7267 83.2198 97.4568 82.9481C97.7565 82.9011 98.0542 82.8556 98.1182 82.847C98.1826 82.8388 98.3924 82.7873 98.5852 82.7332C98.7775 82.6787 98.9529 82.631 98.974 82.6269C98.9954 82.6224 99.153 82.5608 99.3243 82.4899C99.4956 82.4186 99.7929 82.2966 99.9857 82.2186C100.178 82.1406 100.423 82.0339 100.53 81.9813C100.637 81.9283 100.847 81.8257 100.997 81.7529C101.147 81.6802 101.287 81.6029 101.308 81.5813C101.33 81.5593 101.487 81.4656 101.659 81.3723C101.83 81.2794 102.049 81.1383 102.145 81.0589C102.241 80.9798 102.32 80.9339 102.32 80.957C102.32 80.9801 102.434 80.9059 102.573 80.7921C102.712 80.6779 103.009 80.4342 103.234 80.2506C103.459 80.0666 103.643 79.9327 103.643 79.9525C103.643 79.9726 104.045 79.6189 104.537 79.1666C105.03 78.7143 105.433 78.3262 105.433 78.3039C105.433 78.268 105.767 77.918 106.636 77.0433C106.787 76.8915 106.911 76.7437 106.911 76.715C106.911 76.6866 106.998 76.5873 107.105 76.4948C107.212 76.4023 107.3 76.2952 107.3 76.2571C107.3 76.219 107.458 76.0179 107.65 75.8101C107.843 75.6026 108 75.4097 108 75.3817C108 75.3537 108.096 75.2268 108.214 75.0996C108.332 74.9727 108.481 74.7929 108.545 74.7003C108.609 74.6074 108.738 74.4581 108.83 74.3686C108.924 74.2786 109.022 74.1398 109.05 74.0596C109.077 73.9794 109.133 73.9141 109.172 73.9141C109.212 73.9141 109.245 73.8704 109.245 73.8174C109.245 73.7327 109.302 73.6547 109.623 73.2991C109.662 73.2566 109.717 73.1517 109.747 73.0663C109.776 72.9804 109.833 72.9103 109.873 72.9103C109.913 72.9103 109.945 72.8733 109.945 72.8282C109.945 72.7827 110.07 72.6054 110.223 72.4338C110.376 72.2621 110.474 72.1218 110.443 72.1218C110.411 72.1218 110.461 72.0468 110.555 71.955C110.648 71.8636 110.701 71.7666 110.672 71.7401C110.643 71.7132 110.653 71.6916 110.693 71.6916C110.733 71.6916 110.834 71.5707 110.917 71.4225C111 71.2747 111.158 71.0408 111.268 70.9031C111.378 70.765 111.536 70.5311 111.619 70.3833C111.702 70.2351 111.793 70.1142 111.821 70.1142C111.849 70.1142 111.893 70.0579 111.918 69.9889C111.963 69.8668 112.123 69.6131 112.202 69.5407C112.276 69.4724 112.433 69.2168 112.554 68.9698C112.62 68.8332 112.701 68.7041 112.733 68.6832C112.828 68.6216 113.447 67.6876 113.447 67.607C113.447 67.5663 113.478 67.5335 113.515 67.5335C113.553 67.5335 113.605 67.4772 113.63 67.4081C113.679 67.2738 113.844 67.0189 113.921 66.96C113.947 66.9402 114.058 66.7738 114.169 66.5902C114.44 66.139 114.95 65.4241 115.022 65.3946C115.054 65.3815 115.082 65.333 115.082 65.2871C115.083 65.2412 115.294 64.9132 115.55 64.5583C115.807 64.2035 116.06 63.8531 116.113 63.7796C116.166 63.7061 116.297 63.5404 116.404 63.4113C116.51 63.2822 116.651 63.1045 116.715 63.0168C116.779 62.9288 116.901 62.772 116.986 62.6679C117.071 62.5642 117.165 62.447 117.197 62.4075C117.414 62.1291 118.485 61.0473 118.718 60.8701C119.046 60.6212 119.137 60.6589 119.173 61.0589C119.186 61.2093 119.231 61.5903 119.273 61.9056C119.479 63.4549 119.311 67.0622 118.936 69.1108C118.689 70.4654 118.115 72.7827 117.853 73.4838C117.787 73.6614 117.606 74.1936 117.451 74.6667C117.165 75.5418 117.137 75.6142 116.917 76.0754C116.849 76.2194 116.793 76.387 116.793 76.4478C116.793 76.5086 116.758 76.578 116.715 76.6023C116.672 76.6269 116.637 76.7012 116.636 76.768C116.636 76.8348 116.584 76.9818 116.52 77.0945C116.456 77.2075 116.404 77.3307 116.404 77.368C116.404 77.4053 116.313 77.6195 116.202 77.8438C116.092 78.068 115.957 78.3483 115.903 78.4666C115.538 79.2625 115.421 79.492 115.298 79.6603C115.221 79.7651 115.159 79.8886 115.159 79.9349C115.159 80.0267 114.675 81.0092 114.488 81.298C114.424 81.3969 114.323 81.5768 114.264 81.6981C114.205 81.8197 114.102 81.9604 114.036 82.0111C113.969 82.0615 113.935 82.1317 113.958 82.1668C113.981 82.2015 113.967 82.2302 113.927 82.2302C113.887 82.2302 113.828 82.303 113.797 82.3914C113.766 82.4802 113.734 82.569 113.727 82.5888C113.713 82.6272 113.548 82.894 113.395 83.1265C113.343 83.2052 113.251 83.3664 113.191 83.4847C113.131 83.603 113.024 83.7437 112.954 83.7974C112.884 83.8515 112.843 83.9206 112.864 83.9516C112.884 83.9825 112.797 84.1105 112.67 84.2359C112.543 84.3613 112.444 84.4855 112.45 84.512C112.47 84.6053 112.283 84.9546 112.212 84.9546C112.173 84.9546 112.119 85.0348 112.092 85.1333C112.065 85.2315 112 85.3042 111.948 85.2945C111.895 85.2848 111.862 85.3225 111.875 85.3781C111.888 85.4337 111.871 85.4983 111.836 85.5214C111.756 85.5759 111.6 85.8058 111.503 86.0121C111.462 86.1005 111.392 86.1733 111.348 86.1733C111.304 86.1733 111.268 86.2353 111.268 86.3114C111.268 86.3875 111.188 86.5084 111.089 86.5804C110.99 86.6521 110.886 86.7674 110.858 86.8364C110.83 86.9054 110.77 86.9618 110.726 86.9618C110.682 86.9618 110.646 87.0219 110.646 87.095C110.646 87.1685 110.558 87.289 110.451 87.3633C110.344 87.4372 110.256 87.5394 110.256 87.5906C110.256 87.6417 110.204 87.7018 110.14 87.7245C110.076 87.7473 110.023 87.8245 110.023 87.8962C110.023 87.9682 109.936 88.0902 109.829 88.1678C109.721 88.2454 109.634 88.3399 109.634 88.3775C109.634 88.4152 109.529 88.5473 109.401 88.6712C109.272 88.7951 109.167 88.9261 109.167 88.9623C109.167 88.9985 109.062 89.1097 108.934 89.2093C108.805 89.3086 108.7 89.4388 108.7 89.4985C108.7 89.5582 108.577 89.6937 108.427 89.7993C108.276 89.9049 108.098 90.0922 108.031 90.2153C107.963 90.3381 107.722 90.584 107.494 90.7616C107.266 90.9389 107.09 91.1184 107.104 91.1605C107.131 91.246 104.414 93.7726 104.294 93.7726C104.252 93.7726 104.032 93.9499 103.805 94.167C103.578 94.3838 103.35 94.5611 103.297 94.5611C103.245 94.5611 103.108 94.6581 102.994 94.7764C102.879 94.8947 102.75 94.9913 102.706 94.9913C102.662 94.9913 102.519 95.104 102.388 95.2421C102.256 95.3798 102.122 95.4779 102.09 95.4596C102.058 95.4413 101.957 95.5059 101.865 95.6033C101.774 95.7003 101.654 95.7798 101.6 95.7798C101.546 95.7798 101.457 95.8455 101.402 95.9261C101.348 96.0063 101.226 96.103 101.131 96.1406C100.914 96.2272 100.715 96.3489 100.488 96.5328C100.134 96.8198 99.6746 97.0974 99.6746 97.0235C99.6746 96.9963 99.5956 97.0418 99.4993 97.125C99.4029 97.2086 99.3069 97.2717 99.2854 97.2657C99.2639 97.2597 99.1299 97.334 98.9869 97.4314C98.8444 97.5284 98.7042 97.6083 98.6759 97.6083C98.6471 97.6083 98.5187 97.6754 98.3904 97.7579C98.262 97.84 98.087 97.934 98.0016 97.9665C97.9161 97.9993 97.8282 98.0329 97.8072 98.0415C97.7857 98.0504 97.6893 98.081 97.5929 98.1098C97.4965 98.1389 97.418 98.1908 97.418 98.2255C97.418 98.3135 94.9576 99.4397 94.894 99.3807C94.8652 99.3542 94.8175 99.364 94.7875 99.4024C94.7073 99.5058 93.6693 99.9584 92.8273 100.257C92.4207 100.402 91.948 100.578 91.7767 100.649C91.6054 100.721 91.3778 100.802 91.2709 100.829C91.1639 100.857 91.0064 100.908 90.9209 100.944C90.7018 101.034 89.209 101.506 88.742 101.632C87.203 102.048 85.5903 102.438 84.7738 102.593C80.772 103.351 76.8302 103.613 72.9078 103.382C72.2018 103.341 71.3615 103.276 71.0403 103.238C70.0274 103.118 69.8387 103.094 69.6597 103.063C69.5633 103.047 69.3357 103.013 69.1538 102.987C68.8306 102.942 68.7051 102.921 67.4224 102.696C66.6586 102.562 65.7769 102.381 65.5161 102.306C65.4088 102.274 65.1812 102.213 65.0103 102.169C64.8389 102.124 64.3837 102.007 63.9986 101.907C62.6503 101.56 60.8489 100.97 59.4079 100.405C59.2795 100.355 58.9818 100.242 58.7465 100.154C58.1342 99.9244 55.1258 98.5382 55.0116 98.4326C54.9901 98.4128 54.8678 98.3486 54.7395 98.2904C54.4973 98.1803 53.9129 97.8519 53.8444 97.7878C53.8229 97.7676 53.7006 97.7034 53.5722 97.6448C53.3499 97.5437 52.9161 97.2903 52.8327 97.2135C52.8117 97.1937 52.6889 97.1295 52.5606 97.0702C52.4322 97.0112 52.2993 96.9228 52.2649 96.8731C52.2309 96.8239 52.1681 96.7836 52.1256 96.7836C52.0393 96.7836 51.6116 96.5183 51.4326 96.3533C51.3682 96.2944 51.1929 96.1847 51.0434 96.11C50.8936 96.0354 50.6967 95.8985 50.6064 95.8055C50.5157 95.7126 50.3881 95.6365 50.3229 95.6365C50.2573 95.6365 50.1832 95.5865 50.1577 95.5257C50.1326 95.4645 50.0062 95.3809 49.877 95.3395C49.7482 95.2981 49.6425 95.235 49.6425 95.1992C49.6425 95.1637 49.6032 95.1346 49.555 95.1346C49.4627 95.1346 49.0431 94.8305 48.5899 94.4357C48.4429 94.3077 48.2914 94.2029 48.2534 94.2029C48.2153 94.2029 48.0387 94.0577 47.8613 93.8801C47.6839 93.7028 47.4924 93.5573 47.4357 93.5573C47.379 93.5573 47.1194 93.348 46.859 93.0916C46.5985 92.8352 46.3531 92.6255 46.3138 92.6255C46.2195 92.6255 44.0142 90.5885 44.0179 90.5041C44.0191 90.4683 43.7814 90.2291 43.4898 89.9728C43.1978 89.7164 42.9483 89.4623 42.9353 89.4074C42.9228 89.3526 42.7656 89.1809 42.5862 89.0257C42.3918 88.8578 42.2772 88.7022 42.3027 88.6414C42.3262 88.585 42.312 88.5391 42.2711 88.5391C42.1606 88.5391 41.875 88.2943 41.8471 88.176C41.8337 88.1193 41.709 87.9801 41.5701 87.8667C41.4307 87.7533 41.3169 87.6309 41.3169 87.5947C41.3169 87.5585 41.2295 87.4484 41.1225 87.3495C41.0156 87.251 40.9281 87.1312 40.9281 87.0834C40.9281 87.0357 40.8581 86.9562 40.7722 86.9069C40.6868 86.8577 40.6167 86.7707 40.6167 86.714C40.6167 86.6569 40.562 86.5823 40.4952 86.548C40.4284 86.5133 40.3644 86.4286 40.3534 86.3591C40.3425 86.2901 40.3008 86.2118 40.2607 86.1853C40.1388 86.105 39.7609 85.614 39.7609 85.5363C39.7609 85.4964 39.7172 85.4378 39.6637 85.4061C39.5252 85.3244 39.2486 84.9468 39.1785 84.7434C39.1202 84.574 39.0611 84.4915 38.8238 84.2471C38.6484 84.0672 38.3604 83.5068 38.407 83.437C38.4293 83.4041 38.4001 83.3773 38.3422 83.3773C38.2847 83.3773 38.1527 83.1996 38.049 82.9828C37.9453 82.766 37.8348 82.5888 37.8032 82.5888C37.7448 82.5888 36.3302 79.979 36.3059 79.8263C36.2986 79.7801 36.2301 79.6543 36.1536 79.5468C36.0766 79.439 35.9948 79.2405 35.9709 79.1058C35.9475 78.9711 35.9041 78.8606 35.8754 78.8606C35.847 78.8606 35.7587 78.6912 35.6797 78.4845C35.6008 78.2774 35.5125 78.0759 35.4833 78.0363C35.4542 77.9968 35.3687 77.8031 35.2938 77.6061C35.2185 77.409 35.1366 77.1993 35.1119 77.14C35.0872 77.081 35.0633 77.0165 35.0593 76.9967C35.0552 76.9769 34.9949 76.8157 34.9248 76.6381C34.8548 76.4608 34.7191 76.0735 34.6239 75.778C34.5283 75.4821 34.4226 75.1757 34.3894 75.097C34.2363 74.7376 34.1861 74.5667 33.8406 73.2331C33.8001 73.0752 33.7556 72.914 33.7422 72.8745C33.5276 72.2416 33.3255 71.3781 33.1817 70.4807C33.1602 70.3471 33.1234 70.2086 33.0995 70.1732C33.076 70.1377 33.0416 69.8922 33.0234 69.6276C33.0051 69.3631 32.9703 69.0657 32.946 68.9672C32.8933 68.7548 32.7536 67.6973 32.7212 67.2652C32.6528 66.3569 32.4483 65.717 32.4458 66.4043C32.441 67.9373 33.3506 72.6756 34.0387 74.7025C34.9993 77.5325 35.8146 79.4763 36.8117 81.3171C36.945 81.563 37.0171 81.732 36.9721 81.6925C36.9267 81.6529 36.7311 81.3223 36.5371 80.9577C36.3431 80.5928 36.1641 80.2946 36.1394 80.2946C36.1147 80.2946 36.1082 80.3189 36.1248 80.3484C36.1419 80.3779 36.2188 80.5312 36.2962 80.6887C36.3735 80.8465 36.5898 81.2645 36.7761 81.6175C37.1179 82.2645 37.192 82.4974 37.0256 82.4026C36.9697 82.3709 36.9567 82.3828 36.9911 82.4343C37.0235 82.4828 36.9984 82.5171 36.93 82.5171C36.866 82.5171 36.7919 82.5489 36.7656 82.5877C36.7125 82.6675 36.9438 82.6056 37.0912 82.5007C37.2702 82.3735 37.4293 82.8149 37.2584 82.9649C37.1256 83.0814 37.0806 83.069 37.1082 82.9239C37.1143 82.8914 37.0835 82.8851 37.0393 82.9101C36.9956 82.9351 36.9555 83.0261 36.9506 83.1127C36.9438 83.234 36.9336 83.2411 36.9061 83.1444C36.8551 82.9646 36.7275 82.9892 36.721 83.1802C36.7157 83.334 36.7121 83.3347 36.6485 83.1982L36.5817 83.0545L36.5707 83.1982L36.5598 83.3414L36.4958 83.1982C36.4371 83.0668 36.427 83.0653 36.3763 83.1799C36.346 83.2485 36.2889 83.2866 36.25 83.2642C36.2111 83.2422 36.2026 83.1888 36.2314 83.1463C36.2625 83.0993 36.2472 83.0888 36.1925 83.1202C36.1423 83.1489 36.1212 83.2019 36.1455 83.2385C36.1702 83.2747 36.154 83.3612 36.1103 83.4306C36.037 83.5467 36.0305 83.5456 36.026 83.4131C36.0216 83.2791 36.0143 83.278 35.9187 83.3941C35.862 83.4623 35.7931 83.4974 35.7656 83.4717C35.7377 83.4459 35.7121 83.503 35.7085 83.5982C35.7053 83.6937 35.6846 83.7314 35.6631 83.6821C35.5992 83.5351 35.4817 83.5803 35.476 83.7538C35.4708 83.9068 35.4671 83.9075 35.4076 83.7717C35.3732 83.6926 35.3638 83.5959 35.3869 83.5564C35.41 83.5168 35.3971 83.5112 35.3578 83.5444C35.2853 83.6056 35.2808 83.6194 35.2484 83.8971C35.2338 84.0232 35.2221 84.031 35.1942 83.9329C35.1431 83.753 35.0155 83.778 35.0091 83.9687C35.005 84.0851 34.9888 84.1001 34.9507 84.0225C34.8783 83.8754 34.7086 83.8542 34.6539 83.9855C34.6292 84.0448 34.5773 84.0751 34.5381 84.053C34.4992 84.0307 34.4907 83.9777 34.5194 83.9348C34.551 83.8881 34.5352 83.8777 34.4805 83.909C34.4303 83.9374 34.4093 83.9904 34.434 84.0269C34.4583 84.0631 34.4425 84.1497 34.3987 84.2191C34.325 84.3355 34.3185 84.334 34.3141 84.2016C34.3096 84.068 34.3023 84.0665 34.2068 84.1825C34.1505 84.2512 34.0816 84.2859 34.0537 84.2605C34.0257 84.2348 34.0002 84.2915 33.997 84.387C33.9933 84.4822 33.9731 84.5199 33.9512 84.4706C33.8872 84.3243 33.7702 84.3684 33.7605 84.5423C33.7536 84.665 33.743 84.6732 33.7155 84.5773C33.6685 84.4102 33.5373 84.4904 33.5312 84.69C33.5264 84.8393 33.5219 84.8382 33.4413 84.6676L33.3563 84.4885L33.3 84.7035C33.2688 84.8217 33.2392 84.865 33.234 84.7994C33.223 84.6587 33.0092 84.6695 32.9087 84.8161C32.8439 84.9106 32.8018 84.8579 32.8285 84.7161C32.8346 84.6837 32.803 84.6777 32.7585 84.7031C32.7139 84.7285 32.6977 84.7792 32.722 84.8154C32.7463 84.852 32.7305 84.9385 32.6868 85.0076C32.6131 85.124 32.6066 85.1225 32.6022 84.9904C32.5977 84.8564 32.5904 84.8553 32.4948 84.9714C32.4385 85.0397 32.3697 85.0748 32.3417 85.049C32.3138 85.0233 32.2911 85.04 32.2911 85.0859C32.2911 85.1318 32.2385 85.1695 32.1745 85.1695C32.1081 85.1695 32.0538 85.2389 32.0485 85.3307C32.0416 85.4535 32.0311 85.4621 32.004 85.3658C31.957 85.2001 31.8241 85.2789 31.8241 85.4725C31.8241 85.5557 31.8015 85.6024 31.7735 85.5766C31.7456 85.5513 31.7245 85.4248 31.7265 85.296C31.7314 85.0154 31.6095 85.224 31.5909 85.5281C31.5832 85.6531 31.5637 85.6748 31.5269 85.5998C31.4548 85.4528 31.2851 85.4315 31.2304 85.5628C31.2057 85.6222 31.1535 85.6524 31.1146 85.63C31.0757 85.608 31.0672 85.5546 31.096 85.5121C31.1271 85.4651 31.1118 85.455 31.0571 85.486C31.0069 85.5147 30.9858 85.5677 31.0101 85.6043C31.0348 85.6404 31.0186 85.727 30.9749 85.7964C30.9016 85.9125 30.8951 85.9114 30.8906 85.7789C30.8858 85.6449 30.8789 85.6438 30.7833 85.7599C30.7266 85.8281 30.6577 85.8632 30.6298 85.8375C30.6023 85.8117 30.5792 85.8285 30.5792 85.8744C30.5792 85.9207 30.5269 85.958 30.4625 85.958C30.3961 85.958 30.3418 86.0274 30.337 86.1196C30.3301 86.2409 30.3192 86.2498 30.2924 86.1554C30.2374 85.9614 30.1126 86.0073 30.1126 86.2211C30.1126 86.3263 30.0895 86.3912 30.0616 86.3655C30.0336 86.3397 30.0126 86.2132 30.015 86.0845C30.0195 85.8043 29.8976 86.0125 29.8789 86.3166C29.8712 86.4416 29.8522 86.4632 29.8153 86.3883C29.7429 86.2412 29.5732 86.22 29.5185 86.3513C29.4938 86.4106 29.4419 86.4409 29.4027 86.4188C29.3638 86.3965 29.3553 86.3435 29.384 86.3006C29.4156 86.2539 29.3998 86.2435 29.3451 86.2748C29.2949 86.3032 29.2739 86.3562 29.2986 86.3927C29.3229 86.4289 29.3071 86.5155 29.2629 86.5849C29.1896 86.7013 29.1831 86.6998 29.1787 86.5674L29.1738 86.4241L29.0564 86.5674C28.9916 86.6465 28.9227 86.7028 28.9029 86.6931C28.781 86.6315 28.6028 86.6819 28.7117 86.7468C28.802 86.8002 28.8045 86.8166 28.7231 86.8174C28.6615 86.8181 28.636 86.8633 28.6623 86.926C28.753 87.1439 28.5129 87.0256 28.4076 86.8006C28.3476 86.6722 28.235 86.4834 28.1573 86.38C28.0795 86.277 28.0386 86.1722 28.0657 86.1472C28.0929 86.1222 28.0783 86.1017 28.0329 86.1017C27.9876 86.1017 27.9264 86.0132 27.8973 85.905C27.8677 85.7972 27.8203 85.6923 27.7916 85.6722C27.7341 85.6319 27.5073 85.2061 27.4384 85.0094C27.4145 84.9412 27.3497 84.9009 27.2946 84.9195C27.163 84.965 26.9216 84.4348 26.9799 84.2284C27.0107 84.1202 26.9965 84.0878 26.9338 84.1236C26.8123 84.1926 26.5146 83.55 26.5753 83.3493C26.6045 83.253 26.5968 83.2302 26.5535 83.287C26.468 83.3997 26.2639 82.9153 26.3457 82.7929C26.3785 82.744 26.3676 82.7291 26.3194 82.7567C26.2153 82.816 26.0561 82.41 26.1217 82.2522C26.1525 82.1787 26.1396 82.1526 26.0873 82.1824C25.978 82.2447 25.833 81.8593 25.8844 81.6436C25.9132 81.5234 25.9035 81.5044 25.8492 81.5753C25.7564 81.6955 25.1672 80.1301 25.2555 79.9984C25.2891 79.9487 25.2789 79.9331 25.2312 79.9599C25.1866 79.9853 25.1327 79.9502 25.1113 79.8816C25.0894 79.8129 24.9136 79.2569 24.7204 78.6457C24.4216 77.7001 24.1709 76.8015 23.81 75.3836C23.7699 75.2261 23.6824 74.8387 23.6156 74.5234C23.5488 74.2077 23.4597 73.7887 23.4172 73.5913C23.3321 73.1943 23.2167 72.5446 23.1061 71.8349C23.066 71.5785 22.9984 71.1591 22.9563 70.9031C22.9137 70.6467 22.8781 70.2919 22.8765 70.1142C22.8736 69.7803 22.7716 69.5414 22.6716 69.6336C22.6144 69.6866 22.7343 70.84 22.8817 71.6557C22.9247 71.8923 22.9729 72.1897 22.9895 72.3162C23.0061 72.4431 23.0437 72.6166 23.0729 72.7021C23.1025 72.7875 23.1369 72.9416 23.1495 73.045C23.1624 73.1484 23.2264 73.507 23.292 73.8424C23.3576 74.1775 23.4479 74.6451 23.4933 74.8817C23.5735 75.3044 23.667 75.6582 23.8197 76.1168C23.8618 76.244 23.9266 76.5023 23.9635 76.6903C24.0008 76.8788 24.0878 77.2262 24.1579 77.4628C24.2276 77.6993 24.3199 78.0382 24.3632 78.2154C24.4062 78.393 24.4722 78.6028 24.5103 78.6815C24.5479 78.7602 24.6026 78.9379 24.6313 79.0759C24.6601 79.2136 24.7091 79.3591 24.7399 79.3983C24.7707 79.4379 24.8581 79.6636 24.9343 79.9002C25.1028 80.4238 25.5094 81.5671 25.5973 81.7641C25.6325 81.8432 25.7176 82.0253 25.786 82.1694C25.8544 82.3134 25.9107 82.4809 25.9107 82.5414C25.9107 82.6022 25.9444 82.6709 25.9853 82.6944C26.0262 82.7175 26.0399 82.784 26.0156 82.8418C25.9917 82.8996 26.0067 82.947 26.0497 82.947C26.0922 82.947 26.1497 83.0358 26.1772 83.1444C26.2044 83.2526 26.3004 83.4866 26.3899 83.6638C26.5932 84.0661 26.8119 84.543 26.8831 84.7393C26.8904 84.7591 26.9374 84.8661 26.9872 84.977C27.037 85.0882 27.078 85.2225 27.078 85.2759C27.078 85.3292 27.1051 85.3833 27.1387 85.3964C27.2201 85.4285 27.7004 86.3677 27.7004 86.495C27.7004 86.5498 27.7316 86.6125 27.7697 86.6342C27.8078 86.6562 27.8628 86.7625 27.8924 86.8707C27.922 86.9793 27.9698 87.0846 27.9981 87.1043C28.0653 87.1517 28.7895 88.4943 28.7895 88.572C28.7895 88.6044 28.8385 88.6667 28.8984 88.7104C28.958 88.7541 29.2087 89.1447 29.4557 89.5787C30.064 90.6478 30.0519 90.628 30.2386 90.8702C30.3289 90.9878 30.4297 91.1624 30.4617 91.2579C30.5245 91.443 30.5468 91.474 30.8445 91.7889C30.9502 91.9005 31.0583 92.083 31.085 92.1949C31.1118 92.3069 31.1838 92.4162 31.2454 92.4378C31.307 92.4598 31.3576 92.5121 31.3576 92.5546C31.3576 92.5968 31.392 92.6707 31.4341 92.7181C31.8035 93.1356 31.8991 93.27 31.9444 93.4368C31.9732 93.5427 32.0254 93.6293 32.0611 93.6293C32.0963 93.6293 32.1461 93.6905 32.172 93.7651C32.1976 93.8398 32.3401 94.0196 32.4883 94.1644C32.6366 94.3092 32.7783 94.504 32.8038 94.5969C32.829 94.6898 32.899 94.7835 32.9594 94.8047C33.0197 94.826 33.0691 94.8783 33.0691 94.9208C33.0691 94.963 33.1566 95.0786 33.2639 95.1772C33.3708 95.2757 33.4583 95.3999 33.4583 95.4529C33.4583 95.5059 33.511 95.5682 33.575 95.5906C33.6394 95.6134 33.6916 95.6697 33.6916 95.7156C33.6916 95.7615 33.7645 95.857 33.8536 95.9283C33.9423 95.9992 34.0229 96.1063 34.0326 96.166C34.0419 96.2257 34.1448 96.3433 34.2606 96.4272C34.3765 96.5112 34.4518 96.6093 34.4279 96.6448C34.4036 96.6806 34.5085 96.8105 34.66 96.9332C34.8118 97.056 34.9192 97.1817 34.8981 97.2131C34.8774 97.2441 34.9827 97.3553 35.1318 97.4605C35.2812 97.5653 35.4035 97.7001 35.4035 97.7598C35.4035 97.8195 35.5084 97.9497 35.6368 98.0493C35.7652 98.1486 35.8705 98.2919 35.8705 98.3672C35.8705 98.4426 35.9049 98.5042 35.9475 98.5042C36.0374 98.5042 36.493 98.9288 36.493 99.0124C36.493 99.0438 36.6854 99.2374 36.9207 99.4427C37.1564 99.6476 37.3488 99.8558 37.3488 99.9054C37.3488 99.955 37.5549 100.16 37.8068 100.361C38.0587 100.562 38.3199 100.832 38.3872 100.96C38.5143 101.201 41.1537 103.666 41.2854 103.666C41.3263 103.666 41.6207 103.908 41.9394 104.204C42.2582 104.499 42.5425 104.741 42.5708 104.741C42.5992 104.741 42.7818 104.878 42.9766 105.046C43.6732 105.645 44.2576 106.104 44.3241 106.104C44.3613 106.104 44.5043 106.217 44.6416 106.354C44.7789 106.492 44.921 106.605 44.9571 106.605C44.9931 106.605 45.1235 106.702 45.2467 106.82C45.3694 106.939 45.5018 107.036 45.5403 107.036C45.5792 107.036 45.795 107.181 46.0206 107.358C46.2458 107.536 46.4568 107.681 46.4896 107.681C46.522 107.681 46.6621 107.769 46.8006 107.878C47.3288 108.291 47.4268 108.359 47.4742 108.345C47.5013 108.338 47.5855 108.395 47.6613 108.472C47.7374 108.55 47.8342 108.613 47.8767 108.613C47.9188 108.613 48.1141 108.733 48.3101 108.882C48.5065 109.029 48.6936 109.142 48.7264 109.133C48.7588 109.123 48.8273 109.176 48.8779 109.251C48.9285 109.326 49.0144 109.371 49.0682 109.352C49.1221 109.333 49.212 109.385 49.2675 109.467C49.3234 109.549 49.4141 109.616 49.4692 109.616C49.5247 109.616 49.5891 109.663 49.6126 109.719C49.6365 109.776 49.7527 109.843 49.8714 109.866C50.082 109.909 50.297 110.032 50.5781 110.272C50.6542 110.338 50.7903 110.412 50.8798 110.438C50.9697 110.465 51.0434 110.516 51.0434 110.553C51.0434 110.59 51.0815 110.62 51.1285 110.62C51.1755 110.62 51.3241 110.693 51.459 110.781C51.5938 110.869 51.7481 110.932 51.8016 110.921C51.8554 110.91 51.8992 110.934 51.8992 110.975C51.8992 111.016 51.9506 111.05 52.013 111.05C52.0758 111.05 52.1645 111.115 52.2098 111.193C52.2556 111.271 52.318 111.33 52.3487 111.323C52.4516 111.3 52.9481 111.528 53.0559 111.648C53.1142 111.712 53.1928 111.748 53.2308 111.726C53.2689 111.705 53.2997 111.721 53.2997 111.763C53.2997 111.805 53.3463 111.839 53.4025 111.839C53.5301 111.839 54.4183 112.274 54.4539 112.354C54.4681 112.386 54.5297 112.412 54.59 112.412C54.6508 112.412 54.7002 112.44 54.7002 112.473C54.7002 112.506 54.8492 112.574 55.0311 112.624C55.2129 112.674 55.3794 112.738 55.4008 112.766C55.4579 112.84 56.907 113.482 56.9819 113.465C57.0168 113.458 57.0804 113.509 57.1229 113.579C57.165 113.649 57.2306 113.688 57.2679 113.667C57.3408 113.626 58.3788 114.061 58.4221 114.151C58.4367 114.18 58.5157 114.205 58.5979 114.205C58.6801 114.205 58.9138 114.28 59.1167 114.373C59.7671 114.67 60.0255 114.772 60.245 114.82C60.3633 114.845 60.4791 114.894 60.5026 114.929C60.5261 114.964 60.5978 114.993 60.6622 114.993C60.727 114.993 60.9611 115.069 61.183 115.163C61.4049 115.256 61.6739 115.354 61.7812 115.382C61.8881 115.41 62.0457 115.461 62.1311 115.495C62.217 115.53 62.5321 115.628 62.8314 115.713C63.1311 115.798 63.4461 115.894 63.5316 115.925C64.0237 116.106 64.5846 116.264 65.9438 116.605C66.158 116.659 66.6635 116.786 67.0673 116.887C67.8805 117.092 68.2891 117.175 70.2234 117.534C74.7845 118.38 81.0803 118.712 85.2408 118.327C85.4976 118.303 86.0577 118.253 86.4858 118.216C88.9352 118.003 90.473 117.79 92.7106 117.354C94.3517 117.034 94.7672 116.949 95.1224 116.86C95.2937 116.816 95.4885 116.769 95.5554 116.754C96.237 116.603 97.9262 116.157 98.5463 115.966C98.974 115.834 99.556 115.66 99.8394 115.581C100.494 115.398 102.083 114.87 102.261 114.777C102.335 114.738 102.434 114.707 102.481 114.707C102.578 114.707 104.61 113.938 105.315 113.634C105.572 113.523 106.045 113.329 106.366 113.202C106.999 112.952 109.456 111.831 110.119 111.49C110.344 111.374 110.751 111.163 111.023 111.021C111.294 110.88 111.535 110.763 111.557 110.763C111.595 110.763 113.103 109.909 113.836 109.473C114.001 109.375 114.306 109.2 114.512 109.085C114.718 108.97 114.912 108.836 114.944 108.788C114.976 108.738 115.169 108.61 115.372 108.501C115.576 108.392 115.908 108.188 116.11 108.046C116.313 107.904 116.691 107.643 116.952 107.466C117.212 107.288 117.683 106.941 117.998 106.695C118.312 106.449 118.601 106.247 118.638 106.247C118.676 106.247 118.843 106.118 119.01 105.96C119.177 105.802 119.334 105.673 119.358 105.673C119.422 105.673 120.214 105.021 121.036 104.293C121.425 103.948 121.776 103.666 121.816 103.666C121.856 103.665 122.272 103.31 122.739 102.877C123.207 102.444 123.619 102.089 123.654 102.089C123.689 102.089 123.718 102.034 123.718 101.967C123.718 101.901 124.059 101.519 124.476 101.118C124.894 100.718 125.41 100.202 125.624 99.9729C125.838 99.7431 126.144 99.4199 126.305 99.2546C126.465 99.0893 126.597 98.9214 126.597 98.8811C126.597 98.8412 126.737 98.6953 126.908 98.5568C127.079 98.4188 127.219 98.2751 127.219 98.2381C127.219 98.2012 127.307 98.0948 127.413 98.0023C127.521 97.9098 127.608 97.7941 127.608 97.7452C127.608 97.6967 127.713 97.5751 127.842 97.4758C127.97 97.3762 128.075 97.2661 128.075 97.231C128.075 97.1959 128.162 97.0922 128.267 97.0008C128.373 96.9093 128.443 96.8097 128.423 96.7799C128.402 96.7496 128.491 96.6433 128.62 96.5436C128.748 96.4444 128.853 96.3157 128.853 96.2582C128.853 96.2007 128.911 96.1332 128.981 96.1086C129.051 96.0835 129.087 96.0432 129.061 96.019C129.034 95.9944 129.118 95.8582 129.247 95.716C129.376 95.5734 129.524 95.4096 129.575 95.351C129.628 95.2928 129.663 95.2242 129.654 95.1984C129.645 95.1727 129.706 95.0947 129.79 95.0245C129.874 94.9548 129.942 94.854 129.942 94.801C129.942 94.748 129.977 94.7044 130.019 94.7044C130.061 94.7044 130.117 94.6238 130.144 94.5253C130.171 94.4267 130.225 94.3461 130.264 94.3461C130.303 94.3461 130.369 94.2655 130.409 94.167C130.45 94.0681 130.519 93.9875 130.563 93.9875C130.607 93.9875 130.643 93.9249 130.643 93.8476C130.643 93.7707 130.689 93.6823 130.745 93.6506C130.8 93.6192 130.892 93.4886 130.948 93.3603C131.005 93.2323 131.08 93.1274 131.115 93.1274C131.178 93.1274 131.333 92.8968 131.5 92.5539C131.548 92.4554 131.661 92.302 131.751 92.2132C131.841 92.1244 131.889 92.052 131.857 92.052C131.825 92.052 131.866 91.9632 131.947 91.855C132.029 91.7464 132.118 91.6012 132.145 91.5322C132.172 91.4632 132.23 91.4068 132.274 91.4068C132.318 91.4068 132.354 91.3422 132.354 91.2635C132.354 91.1844 132.39 91.1199 132.432 91.1199C132.475 91.1199 132.504 91.0956 132.497 91.0661C132.475 90.9728 132.825 90.3053 133.017 90.0724C133.119 89.9496 133.225 89.7642 133.254 89.6601C133.282 89.556 133.336 89.4709 133.375 89.4709C133.413 89.4709 133.444 89.4227 133.444 89.3634C133.444 89.3045 133.483 89.2559 133.53 89.2559C133.578 89.2559 133.596 89.2074 133.572 89.1485C133.547 89.0891 133.552 89.0406 133.582 89.0403C133.64 89.0399 133.833 88.6984 133.833 88.597C133.833 88.5447 134.39 87.4219 134.655 86.9383C134.716 86.8263 134.767 86.7054 134.767 86.6689C134.767 86.6327 134.848 86.448 134.947 86.2588C135.046 86.0696 135.173 85.7621 135.23 85.5759C135.286 85.3901 135.363 85.2203 135.4 85.1994C135.512 85.1356 135.475 85.0262 135.341 85.0262C135.244 85.0262 135.226 84.9811 135.264 84.8288C138.166 72.9323 135.446 63.1269 128.329 59.8294C125.432 58.4867 123.012 58.617 119.289 60.3148C118.067 60.8723 116.365 62.9508 113.056 67.9279C109.31 73.5626 107.784 75.5914 105.507 77.9647C96.9275 86.9081 88.5942 83.7642 79.0949 67.9996C75.5188 62.0646 72.3294 59.101 68.3171 57.9837C67.648 57.7975 65.5522 57.7378 64.8543 57.8852ZM22.7991 58.3558C22.7538 58.4338 22.7206 58.6192 22.7254 58.7677C22.7307 58.9162 22.7088 59.2398 22.6776 59.4861C22.6375 59.804 22.6468 59.9342 22.7096 59.9342C22.7586 59.9342 22.7999 59.926 22.8024 59.9163C22.8044 59.9062 22.8489 59.5193 22.9012 59.0558C22.9935 58.2364 22.9684 58.064 22.7991 58.3558ZM32.6026 59.2674C32.6026 59.8607 32.7642 59.7984 32.8192 59.1838C32.8492 58.8521 32.8342 58.7871 32.7285 58.7871C32.6248 58.7871 32.6026 58.8718 32.6026 59.2674ZM32.524 59.9879C32.5236 60.0962 32.5013 60.4029 32.4738 60.669C32.4061 61.3291 32.5584 61.3041 32.656 60.6391C32.7346 60.1047 32.7111 59.7909 32.5932 59.7909C32.5556 59.7909 32.5244 59.8794 32.524 59.9879ZM22.5804 60.2924C22.4755 60.6264 22.48 61.2242 22.5869 61.2246C22.6975 61.2246 22.7283 61.0376 22.7048 60.501L22.6817 59.97L22.5804 60.2924ZM32.4159 61.41C32.3118 61.6604 32.3648 65.8517 32.4738 65.9894C32.5625 66.101 32.5787 65.7547 32.5774 63.7415C32.5766 61.5559 32.545 61.1003 32.4159 61.41ZM22.4577 61.5921C22.3852 61.9272 22.3994 63.3038 22.4755 63.3038C22.5444 63.3038 22.6416 62.397 22.6424 61.7444C22.6428 61.3298 22.5343 61.2402 22.4577 61.5921ZM139.125 61.8877C139.126 62.3243 139.21 62.7336 139.29 62.6885C139.428 62.6097 139.337 61.5832 139.192 61.5832C139.154 61.5832 139.124 61.7201 139.125 61.8877ZM139.286 63.7382C139.281 64.3643 139.308 64.6005 139.394 64.7057C139.497 64.8304 139.506 64.7669 139.478 64.0923C139.432 62.9467 139.295 62.6937 139.286 63.7382ZM22.4367 64.7375C22.4367 65.0725 22.45 65.2099 22.4662 65.0423C22.4828 64.8744 22.4828 64.6005 22.4662 64.433C22.45 64.265 22.4367 64.4024 22.4367 64.7375ZM139.357 66.3864C139.357 66.5443 139.393 66.673 139.435 66.673C139.478 66.673 139.513 66.5443 139.513 66.3864C139.513 66.2286 139.478 66.0995 139.435 66.0995C139.393 66.0995 139.357 66.2286 139.357 66.3864ZM22.4103 66.9062C22.4111 67.7152 22.4711 68.1787 22.5752 68.1787C22.6549 68.1787 22.663 67.4906 22.5926 66.7197C22.5201 65.9312 22.4091 66.0442 22.4103 66.9062ZM139.36 68.1738C139.316 68.2503 139.284 68.6936 139.289 69.1597L139.298 70.0068L139.404 69.5407C139.494 69.1418 139.54 68.0354 139.465 68.0354C139.452 68.0354 139.404 68.0977 139.36 68.1738ZM22.5363 68.307C22.4735 68.4003 22.5428 69.2 22.6306 69.3974C22.6946 69.5407 22.7116 69.4515 22.7157 68.9537C22.7202 68.397 22.6485 68.1395 22.5363 68.307ZM45.3337 69.5228C45.3082 69.9862 45.3167 70.6396 45.3528 70.9747C45.4099 71.5046 45.42 71.3949 45.4297 70.1321C45.4423 68.5048 45.4038 68.2593 45.3337 69.5228ZM139.173 70.4101C139.102 70.7359 139.113 71.2468 139.192 71.2915C139.271 71.3367 139.355 70.9273 139.357 70.4907C139.358 70.1355 139.243 70.0851 139.173 70.4101ZM139.097 71.4583C139.062 71.5106 139.021 72.1397 139.041 72.3009C139.061 72.4502 139.189 72.1442 139.241 71.8255C139.29 71.524 139.203 71.3012 139.097 71.4583ZM45.3973 72.083C45.3682 72.2278 45.3694 72.6103 45.4002 72.933C45.4309 73.2555 45.469 73.6898 45.4844 73.898C45.4998 74.1059 45.5342 74.3089 45.5609 74.3488C45.5877 74.3887 45.6095 74.5734 45.6095 74.7589C45.6095 74.9447 45.6367 75.1291 45.6703 75.1686C45.7035 75.2078 45.7521 75.45 45.7784 75.7063C45.8047 75.9627 45.8461 76.253 45.8708 76.3515C45.8955 76.45 45.9485 76.7243 45.9886 76.9609C46.0283 77.1975 46.0818 77.4717 46.1073 77.5702C46.1328 77.6687 46.1988 77.9591 46.2543 78.2154C46.3479 78.6468 46.6062 79.5405 46.8869 80.4021C46.9509 80.5991 47.0364 80.8734 47.076 81.0115C47.1161 81.1495 47.2413 81.4884 47.3547 81.7641C47.4681 82.0403 47.609 82.3951 47.6686 82.553C47.7277 82.7104 47.8111 82.8955 47.8536 82.9642C47.8962 83.0325 47.931 83.1231 47.931 83.1657C47.931 83.2082 48.0136 83.4105 48.1149 83.615C48.2161 83.8195 48.3773 84.1478 48.4729 84.3452C49.3845 86.2244 50.4793 87.9708 51.9312 89.8623C53.9651 92.5125 55.0865 92.4072 54.7597 89.5966C54.6418 88.5824 54.5835 88.7361 54.5835 90.0623C54.5835 92.0751 54.1639 92.2162 52.8019 90.6605C49.3521 86.7215 46.8205 81.2839 45.9566 75.9571C45.7108 74.4432 45.6723 74.1309 45.5942 73.0215C45.5083 71.7987 45.4816 71.671 45.3973 72.083ZM138.918 72.5909C138.892 72.6521 138.889 72.8442 138.91 73.0181C138.931 73.1924 138.923 73.3439 138.892 73.3555C138.805 73.3883 138.723 73.9857 138.807 73.9857C138.922 73.9857 138.952 73.8708 139.088 72.8924C139.144 72.4924 139.037 72.3039 138.918 72.5909ZM138.71 74.104C138.681 74.1309 138.657 74.2622 138.657 74.3962C138.657 74.5298 138.618 74.7835 138.569 74.9604C138.521 75.1369 138.504 75.3018 138.53 75.3268C138.611 75.4007 138.662 75.3097 138.703 75.016C138.725 74.8634 138.782 74.6163 138.83 74.4675C138.913 74.2074 138.84 73.9842 138.71 74.104ZM138.47 75.5045C138.452 75.5563 138.396 75.8086 138.345 76.0646C138.294 76.3209 138.205 76.7083 138.148 76.925C138.09 77.1419 137.95 77.6904 137.835 78.1438C137.415 79.8073 136.581 82.1802 135.824 83.868C135.623 84.315 135.473 84.7344 135.49 84.7997C135.511 84.8788 135.566 84.8225 135.653 84.6318C135.726 84.474 135.823 84.2646 135.87 84.1657C136.021 83.8467 136.081 83.709 136.308 83.1623C136.431 82.8664 136.56 82.5601 136.595 82.4809C136.629 82.4022 136.667 82.3056 136.678 82.266C136.69 82.2265 136.792 81.9361 136.907 81.6208C137.021 81.3055 137.127 80.9906 137.142 80.9215C137.157 80.8525 137.197 80.7555 137.231 80.7066C137.264 80.6573 137.298 80.5779 137.306 80.5297C137.319 80.4495 137.484 79.917 137.766 79.0498C137.828 78.8576 137.879 78.6259 137.879 78.5341C137.879 78.4423 137.912 78.3486 137.952 78.3259C137.992 78.3031 138.02 78.2285 138.016 78.1602C138.01 78.0919 138.07 77.8501 138.148 77.6225C138.227 77.3949 138.269 77.1889 138.243 77.165C138.217 77.1407 138.232 77.059 138.276 76.9825C138.363 76.8336 138.386 76.7448 138.495 76.1366C138.535 75.9194 138.589 75.6888 138.617 75.6239C138.645 75.5589 138.63 75.4843 138.584 75.4582C138.538 75.4317 138.487 75.453 138.47 75.5045ZM53.7666 77.9199C53.7666 78.6289 53.7946 78.936 53.8638 78.9882C53.9574 79.0591 53.9918 78.2498 53.9384 77.2295C53.8983 76.4668 53.7666 76.9963 53.7666 77.9199ZM53.8444 80.1002C53.8444 81.0719 53.9295 81.8936 54.0214 81.8089C54.1153 81.7223 54.0145 79.5226 53.9141 79.4655C53.8752 79.4431 53.8444 79.7218 53.8444 80.1002ZM35.8729 79.7308C35.8717 79.7558 35.9215 79.8849 35.9839 80.0174C36.0467 80.1502 36.0977 80.2103 36.0981 80.151C36.0981 80.048 35.8786 79.6375 35.8729 79.7308ZM37.224 82.069C37.2949 82.197 37.3354 82.3018 37.3139 82.3018C37.269 82.3018 37.0377 81.9044 37.0377 81.8276C37.0377 81.7525 37.0798 81.8074 37.224 82.069ZM54.0084 82.4093C53.9987 82.9123 54.1656 84.9505 54.3114 86.1095C54.3543 86.4494 54.3891 86.8793 54.3891 87.0655C54.3891 87.3043 54.4179 87.395 54.4863 87.3741C54.6013 87.3387 54.6228 87.0133 54.5297 86.711C54.4932 86.5927 54.4616 86.3185 54.4592 86.1017C54.4564 85.8849 54.424 85.5774 54.3863 85.4188C54.349 85.2598 54.2996 84.7923 54.2761 84.3792C54.2053 83.1153 54.1631 82.6395 54.089 82.266L54.0186 81.9074L54.0084 82.4093ZM37.8149 83.0743C37.8149 83.103 37.7448 83.0295 37.6602 82.9112C37.5751 82.7929 37.5055 82.6638 37.5051 82.6246C37.5051 82.5851 37.5747 82.6586 37.6602 82.7877C37.7457 82.9168 37.8153 83.0455 37.8149 83.0743ZM27.6364 85.6442C27.7073 85.8263 27.7365 85.9472 27.7012 85.9128C27.5992 85.8143 27.391 85.3128 27.4522 85.3128C27.4821 85.3128 27.5652 85.4621 27.6364 85.6442ZM28.5793 86.4203C28.5052 86.498 28.5092 86.5274 28.5987 86.5588C28.6741 86.5856 28.7117 86.5517 28.7117 86.4577C28.7117 86.2927 28.7032 86.2901 28.5793 86.4203ZM28.8409 87.2849C28.9572 87.5167 28.845 87.5163 28.6801 87.2846C28.5866 87.1532 28.5793 87.1055 28.6518 87.1058C28.7061 87.1062 28.7911 87.1868 28.8409 87.2849ZM54.4762 87.9477C54.4811 88.2137 54.5094 88.5283 54.5386 88.6466C54.6366 89.0406 54.7233 88.5846 54.6629 87.9928C54.5957 87.3301 54.4636 87.2984 54.4762 87.9477ZM29.0531 87.6607C29.0795 87.7297 29.1228 87.8305 29.1495 87.885C29.1799 87.9469 29.1601 87.9715 29.0953 87.9518C29.039 87.9346 28.9677 87.8339 28.9369 87.7279C28.8757 87.5167 28.9758 87.4588 29.0531 87.6607ZM13.1407 102.855C13.1358 102.887 13.1366 102.94 13.1431 102.974C13.1541 103.03 12.8017 103.436 12.4461 103.776C12.3627 103.856 12.2938 103.959 12.2938 104.004C12.2938 104.049 12.2112 104.146 12.11 104.219C12.0087 104.293 11.9014 104.424 11.8714 104.511C11.841 104.598 11.7839 104.67 11.7442 104.67C11.7042 104.67 11.6713 104.716 11.6713 104.772C11.6713 104.828 11.5887 104.934 11.4875 105.008C11.3862 105.081 11.2789 105.212 11.2489 105.3C11.219 105.387 11.1643 105.458 11.1278 105.458C11.0914 105.458 11.0379 105.557 11.0092 105.678C10.98 105.799 10.9104 105.914 10.8545 105.934C10.7982 105.954 10.707 106.073 10.6524 106.198C10.5977 106.324 10.4758 106.523 10.3818 106.641C10.2879 106.759 10.185 106.937 10.153 107.036C10.121 107.134 10.0347 107.295 9.96144 107.394C9.78972 107.624 9.25957 108.649 9.25957 108.751C9.25957 108.793 9.22434 108.828 9.18181 108.828C9.13888 108.828 9.10365 108.89 9.10365 108.965C9.10365 109.041 9.04533 109.21 8.97364 109.342C8.90196 109.473 8.79706 109.666 8.73996 109.771C8.68326 109.875 8.63709 110.027 8.63709 110.107C8.63709 110.187 8.6059 110.271 8.56783 110.293C8.53017 110.314 8.47509 110.449 8.44593 110.592C8.41677 110.735 8.36452 110.905 8.32929 110.969C8.17903 111.246 8.10006 111.463 8.05186 111.731C8.02351 111.889 7.97329 112.05 7.94049 112.09C7.90728 112.129 7.85746 112.348 7.82952 112.576C7.80198 112.804 7.74811 113.046 7.71045 113.114C7.52739 113.441 7.37187 115.182 7.3743 116.875C7.37713 118.958 7.49985 119.929 7.99233 121.768C8.09803 122.163 8.20374 122.566 8.22682 122.664C8.24991 122.763 8.2977 122.877 8.33293 122.919C8.36776 122.96 8.42001 123.129 8.44876 123.295C8.47752 123.461 8.52774 123.596 8.56014 123.596C8.59254 123.596 8.64276 123.741 8.67192 123.919C8.70067 124.096 8.75575 124.241 8.79382 124.241C8.83189 124.241 8.88738 124.362 8.91654 124.51C8.9457 124.658 9.0348 124.865 9.11458 124.969C9.19437 125.074 9.25957 125.2 9.25957 125.249C9.25957 125.339 9.40942 125.646 10.0667 126.899C10.2648 127.277 10.4264 127.623 10.4264 127.67C10.4264 127.716 10.4616 127.754 10.5045 127.754C10.5475 127.754 10.6435 127.883 10.7176 128.041C10.7917 128.199 10.8792 128.328 10.912 128.328C10.9444 128.328 10.9711 128.376 10.9711 128.435C10.9711 128.495 11.0035 128.543 11.0432 128.543C11.0825 128.543 11.1574 128.664 11.2096 128.812C11.2619 128.96 11.3522 129.107 11.4101 129.138C11.4684 129.17 11.5158 129.242 11.5158 129.299C11.5158 129.357 11.5511 129.403 11.5936 129.403C11.6365 129.403 11.6713 129.468 11.6713 129.547C11.6713 129.626 11.7074 129.69 11.7511 129.69C11.7953 129.69 11.8649 129.763 11.9067 129.851C12.0201 130.092 12.1654 130.292 12.2744 130.357C12.3279 130.388 12.372 130.46 12.372 130.516C12.372 130.571 12.4417 130.651 12.5275 130.694C12.613 130.736 12.683 130.83 12.683 130.904C12.683 130.977 12.7324 131.054 12.7932 131.076C12.8965 131.112 13.0402 131.314 13.2201 131.675C13.263 131.761 13.3699 131.868 13.4574 131.91C13.5449 131.954 13.617 132.038 13.617 132.099C13.617 132.159 13.7219 132.29 13.8502 132.39C13.9786 132.489 14.0839 132.624 14.0843 132.69C14.0843 132.755 14.2071 132.885 14.3565 132.979C14.5059 133.073 14.6283 133.194 14.6283 133.248C14.6283 133.302 14.768 133.463 14.9389 133.605C15.1098 133.748 15.2333 133.888 15.2135 133.917C15.1936 133.947 15.4925 134.247 15.8777 134.585C16.2624 134.923 16.5678 135.228 16.5561 135.262C16.5322 135.333 18.7953 137.433 18.8949 137.433C18.9302 137.433 19.2303 137.69 19.562 138.004C19.8941 138.318 20.2788 138.64 20.4169 138.719C20.5554 138.797 20.7328 138.927 20.8114 139.007C20.89 139.087 20.6599 138.975 20.3007 138.759C19.9414 138.542 19.6045 138.365 19.5526 138.365C19.5004 138.365 19.4206 138.3 19.3749 138.221C19.3291 138.143 19.2404 138.078 19.178 138.078C19.1157 138.078 19.0209 138.013 18.9674 137.935C18.914 137.856 18.8127 137.791 18.7426 137.791C18.6722 137.791 18.5572 137.71 18.4871 137.612C18.417 137.513 18.3146 137.433 18.2591 137.433C18.204 137.433 18.0582 137.336 17.9351 137.217C17.8124 137.099 17.6743 137.003 17.6289 137.003C17.5362 137.003 17.4965 136.969 15.4646 135.135C14.6623 134.41 14.0058 133.79 14.0058 133.756C14.0058 133.722 13.8393 133.533 13.6364 133.335C13.4331 133.137 13.2338 132.922 13.1937 132.856C13.1536 132.791 13.0398 132.678 12.9406 132.606C12.8418 132.534 12.7608 132.441 12.7608 132.4C12.7608 132.358 12.6543 132.208 12.5239 132.065C11.9881 131.478 11.5134 130.909 11.5588 130.909C11.6065 130.909 11.3186 130.555 11.0877 130.329C11.0238 130.267 10.9711 130.183 10.9711 130.143C10.9711 130.103 10.901 130.012 10.8156 129.941C10.7301 129.87 10.6601 129.768 10.6601 129.715C10.6601 129.662 10.624 129.618 10.5803 129.618C10.5365 129.618 10.4665 129.546 10.4248 129.457C10.3381 129.273 10.2271 129.104 9.98371 128.786C9.88935 128.663 9.78931 128.477 9.76096 128.373C9.73261 128.27 9.67794 128.185 9.63987 128.185C9.60139 128.185 9.50946 128.055 9.43534 127.898C9.36123 127.74 9.27456 127.611 9.24297 127.611C9.17979 127.611 8.87037 127.019 8.87037 126.898C8.87037 126.856 8.83554 126.823 8.79261 126.823C8.74968 126.823 8.72011 126.798 8.727 126.768C8.74198 126.705 8.62858 126.443 8.56378 126.392C8.48886 126.333 7.78092 124.989 7.78092 124.905C7.78092 124.863 7.68939 124.656 7.5772 124.445C7.46502 124.235 7.33866 123.982 7.29573 123.883C7.2532 123.784 7.19043 123.653 7.15681 123.59C7.06366 123.418 6.60723 121.91 6.46629 121.309C6.29254 120.569 5.95801 120.529 5.80978 121.23C5.76078 121.461 5.71542 121.638 5.57286 122.151C5.50887 122.381 5.43516 122.741 5.40924 122.95C5.38332 123.159 5.32864 123.388 5.28774 123.459C5.24683 123.529 5.21727 124.065 5.22253 124.649C5.23144 125.666 5.33917 125.821 5.35983 124.846C5.38291 123.74 6.09774 120.464 6.20304 120.979C7.32003 126.448 12.355 133.492 18.091 137.613C18.5187 137.921 18.8593 138.202 18.8475 138.238C18.8358 138.274 18.8605 138.284 18.903 138.26C18.9998 138.205 19.6223 138.614 19.547 138.684C19.5166 138.712 19.532 138.724 19.5818 138.711C19.7122 138.677 21.3156 139.603 21.2626 139.683C21.2383 139.719 21.2585 139.726 21.3079 139.698C21.4051 139.643 21.7368 139.821 21.6631 139.889C21.638 139.912 21.6996 139.97 21.7996 140.02C21.9697 140.103 21.9741 140.1 21.8652 139.979C21.7648 139.867 21.7931 139.87 22.0794 140.005C22.2609 140.09 22.4091 140.177 22.4091 140.199C22.4091 140.22 22.3743 140.217 22.3314 140.193C22.2888 140.168 22.2536 140.181 22.2536 140.221C22.2536 140.262 22.3597 140.288 22.4889 140.28C22.8502 140.256 22.7534 140.127 21.9426 139.553C21.4104 139.175 21.2095 138.991 21.2261 138.894C21.2419 138.798 21.2289 138.785 21.1812 138.851C21.0815 138.986 20.6895 138.69 20.7474 138.524C20.7798 138.43 20.7721 138.424 20.715 138.497C20.6162 138.625 18.6017 136.94 17.0506 135.432C5.82801 124.525 4.48989 113.014 13.2994 103.164L13.4598 102.985L13.4116 103.236C13.3853 103.374 13.2634 103.858 13.1407 104.311C12.9232 105.117 12.5603 107.073 12.3623 108.505C12.2294 109.465 12.2307 112.596 12.3639 113.524C13.2638 119.778 15.6622 124.69 20.146 129.459C20.4631 129.796 20.6806 130.087 20.6498 130.133C20.6198 130.178 20.6299 130.194 20.6725 130.17C20.7745 130.112 21.508 130.803 21.4444 130.897C21.4173 130.937 21.4833 131.058 21.591 131.165C21.8296 131.403 21.853 131.313 21.6194 131.057C21.527 130.956 21.7429 131.147 22.0985 131.482C22.4545 131.818 23.0138 132.334 23.3414 132.629C23.9339 133.164 23.6387 132.937 22.7736 132.194C22.5245 131.98 22.288 131.794 22.2483 131.781C22.2082 131.768 22.1758 131.719 22.1758 131.672C22.1758 131.624 22.1058 131.531 22.0203 131.463C21.5598 131.1 22.1463 131.816 22.7521 132.357C22.8765 132.468 22.9567 132.579 22.9299 132.604C22.9032 132.628 22.9482 132.727 23.0304 132.823C23.1328 132.943 23.1616 133.046 23.1215 133.154C23.0899 133.24 23.068 136.093 23.0733 139.494C23.081 144.515 23.0636 145.677 22.9818 145.677C22.9218 145.677 22.9 145.723 22.9283 145.791C22.9615 145.871 22.9923 145.88 23.0316 145.821C23.0709 145.762 23.1029 145.773 23.1377 145.857C23.1652 145.923 23.1669 146.008 23.1409 146.047C23.115 146.086 23.1588 146.162 23.2377 146.216C23.3734 146.309 23.3714 146.313 23.207 146.275C23.1102 146.252 23.0316 146.179 23.0316 146.111C23.0316 146.043 22.9441 145.95 22.8372 145.905C22.595 145.804 22.5825 145.906 22.8178 146.064C22.9141 146.129 22.8088 146.1 22.5845 146C22.3597 145.9 22.1758 145.802 22.1758 145.781C22.1758 145.76 22.2487 145.78 22.3382 145.824C22.4273 145.868 22.5193 145.887 22.5424 145.865C22.5849 145.826 21.7725 145.46 21.6558 145.465C21.621 145.467 21.7149 145.53 21.8648 145.606C22.2722 145.811 22.0855 145.777 21.5983 145.557C21.3642 145.451 21.1937 145.333 21.2192 145.295C21.2451 145.256 21.2285 145.246 21.1824 145.273C21.0418 145.353 20.7049 145.172 20.7498 145.041C20.7826 144.945 20.7757 144.943 20.7114 145.026C20.647 145.11 20.476 145.048 19.7507 144.675C11.0877 140.223 5.48457 133.425 5.35902 127.217C5.35456 126.98 5.32297 126.69 5.28895 126.571C5.21443 126.309 5.24562 128.456 5.32257 128.866C5.35213 129.023 5.44852 129.41 5.53722 129.726C5.62591 130.041 5.69638 130.388 5.69436 130.497C5.69233 130.605 5.71947 130.694 5.7547 130.694C5.81788 130.694 5.95437 131.175 5.92399 131.293C5.91508 131.326 5.93817 131.391 5.97543 131.436C6.01228 131.481 6.10341 131.68 6.17833 131.877C6.25326 132.074 6.37759 132.348 6.45454 132.486C6.5319 132.624 6.63679 132.857 6.68742 133.004C6.73845 133.15 6.86359 133.409 6.96565 133.577C7.06771 133.746 7.2123 133.997 7.28722 134.135C7.36174 134.273 7.44477 134.402 7.4715 134.422C7.49823 134.441 7.5444 134.506 7.57437 134.565C7.60393 134.624 7.71369 134.802 7.81737 134.959C7.92145 135.117 8.04255 135.319 8.08629 135.407C8.13043 135.496 8.20293 135.569 8.24788 135.569C8.29284 135.569 8.36533 135.641 8.40867 135.73C8.5816 136.082 8.95137 136.586 9.12187 136.702C9.19761 136.753 9.25957 136.836 9.25957 136.886C9.25957 136.935 9.36325 137.067 9.49002 137.179C9.61678 137.291 9.70386 137.408 9.6832 137.439C9.66255 137.47 9.76866 137.582 9.91932 137.687C10.07 137.793 10.1931 137.918 10.1931 137.963C10.1931 138.158 14.3022 141.734 14.5262 141.734C14.5663 141.734 14.6999 141.831 14.8227 141.949C14.9458 142.067 15.0798 142.164 15.1203 142.164C15.1608 142.164 15.269 142.239 15.3601 142.33C15.4516 142.42 15.5784 142.519 15.6416 142.548C15.8821 142.657 16.085 142.782 16.4212 143.025C16.8387 143.327 17.036 143.445 17.2101 143.5C17.2822 143.522 17.3596 143.586 17.3827 143.641C17.4057 143.696 17.4628 143.742 17.5098 143.742C17.5568 143.742 17.7071 143.814 17.8431 143.903C18.1955 144.133 18.3486 144.214 18.8107 144.416C19.0351 144.514 19.2189 144.625 19.2189 144.662C19.2189 144.699 19.3506 144.782 19.5109 144.847C19.7677 144.95 20.1302 145.125 20.9697 145.551C21.0981 145.616 21.3359 145.724 21.4979 145.79C21.9073 145.958 21.7984 146.005 21.344 145.856C20.9167 145.716 20.8916 145.708 19.9973 145.393C18.9917 145.038 16.23 143.767 15.8732 143.494C15.8092 143.445 15.7039 143.383 15.6399 143.357C15.486 143.295 15.2232 143.137 14.5505 142.702C14.2455 142.505 13.9369 142.311 13.8652 142.272C13.7931 142.232 13.5019 142.015 13.2176 141.788C12.9337 141.561 12.666 141.376 12.6235 141.376C12.5806 141.376 12.419 141.247 12.2643 141.089C12.1096 140.931 11.9476 140.802 11.9038 140.802C11.809 140.802 9.57061 138.735 9.57061 138.648C9.57061 138.615 9.41307 138.452 9.22069 138.285C9.02791 138.119 8.87037 137.946 8.87037 137.9C8.87037 137.854 8.78289 137.74 8.67597 137.648C8.56905 137.555 8.48116 137.439 8.48116 137.389C8.48116 137.34 8.37627 137.23 8.24788 137.146C8.1195 137.062 8.0146 136.952 8.0146 136.903C8.0146 136.853 7.92793 136.738 7.82223 136.646C7.71652 136.555 7.64524 136.457 7.66347 136.43C7.72017 136.346 7.25442 136.07 7.05556 136.07C6.60237 136.07 6.69633 139.905 7.17463 140.946C7.21999 141.044 7.28439 141.189 7.3176 141.268C7.35121 141.347 7.48648 141.624 7.61851 141.883C7.75095 142.143 7.85868 142.393 7.85868 142.439C7.85868 142.485 7.89108 142.523 7.93036 142.523C7.97005 142.523 8.02513 142.62 8.05348 142.738C8.08143 142.856 8.13286 142.953 8.16729 142.953C8.20171 142.953 8.25031 143.009 8.27542 143.078C8.34063 143.257 8.50384 143.481 8.61765 143.548C8.67111 143.579 8.71485 143.647 8.71485 143.697C8.71485 143.747 8.80233 143.864 8.90925 143.957C9.01617 144.049 9.10365 144.149 9.10365 144.179C9.10365 144.328 11.6414 146.537 11.8131 146.537C11.8528 146.537 11.9897 146.65 12.1177 146.789C12.2456 146.927 12.3833 147.039 12.4238 147.039C12.4639 147.039 12.6158 147.152 12.7608 147.29C12.9062 147.428 13.056 147.541 13.0945 147.541C13.1326 147.541 13.3448 147.681 13.5655 147.852C13.7863 148.024 14.0195 148.186 14.0835 148.214C14.2338 148.278 14.4557 148.401 14.7469 148.581C15.1604 148.836 15.2706 148.89 16.6512 149.517C18.1505 150.198 18.9079 150.534 20.425 151.19C20.9815 151.431 21.5242 151.677 21.6311 151.738C21.738 151.798 22.1932 152.025 22.6428 152.241C23.0919 152.459 23.5824 152.704 23.7322 152.786C23.8817 152.869 24.4244 153.166 24.9379 153.447C26.1262 154.096 28.7312 155.698 28.813 155.829C28.8474 155.884 28.9256 155.929 28.9875 155.929C29.0491 155.929 29.1435 155.994 29.1969 156.073C29.2504 156.151 29.3314 156.216 29.3767 156.216C29.4221 156.216 29.5768 156.327 29.7206 156.464C29.8639 156.601 30.0069 156.698 30.0377 156.68C30.0685 156.663 30.2536 156.812 30.4484 157.013C30.6432 157.213 30.8355 157.359 30.8752 157.336C30.9153 157.313 31.0291 157.392 31.1284 157.511C31.3438 157.771 31.7233 157.792 31.686 157.542C31.6743 157.463 31.631 154.576 31.5892 151.126C31.5479 147.676 31.4941 144.74 31.4694 144.602C31.4451 144.464 31.3726 144.003 31.3086 143.578C31.2442 143.153 31.128 142.621 31.0498 142.395C30.9716 142.17 30.8311 141.743 30.7375 141.448C30.5415 140.827 30.5379 140.82 29.8056 139.44C28.8012 137.548 28.5522 137.2 27.3011 135.94C27.0925 135.73 26.9224 135.535 26.9224 135.505C26.9224 135.433 24.2187 132.959 24.0992 132.922C23.9708 132.883 21.7866 130.866 21.7866 130.787C21.7866 130.752 21.608 130.564 21.3897 130.368C21.1714 130.173 20.8005 129.793 20.5656 129.524C20.3307 129.256 19.9317 128.832 19.679 128.583C19.4259 128.334 19.2189 128.095 19.2189 128.051C19.2189 128.007 19.1489 127.93 19.0634 127.881C18.978 127.832 18.9079 127.739 18.9079 127.674C18.9079 127.609 18.8204 127.503 18.7135 127.438C18.6062 127.374 18.5187 127.279 18.5187 127.227C18.5187 127.176 18.4312 127.058 18.3243 126.966C18.2174 126.873 18.1299 126.755 18.1299 126.702C18.1299 126.65 18.0938 126.607 18.0501 126.607C18.006 126.607 17.9355 126.535 17.8934 126.446C17.8508 126.357 17.7472 126.188 17.6625 126.069C17.5783 125.951 17.4847 125.806 17.4556 125.747C17.426 125.688 17.3818 125.623 17.3571 125.603C17.2806 125.542 17.1158 125.287 17.068 125.156C17.0429 125.087 16.993 125.03 16.957 125.03C16.9214 125.03 16.8306 124.909 16.7553 124.761C16.68 124.613 16.5804 124.456 16.5342 124.412C16.488 124.368 16.3831 124.183 16.3013 124C16.2195 123.818 16.1259 123.668 16.0935 123.668C16.0263 123.668 15.484 122.657 15.484 122.531C15.484 122.486 15.4492 122.449 15.4063 122.449C15.3637 122.449 15.3285 122.401 15.3285 122.342C15.3285 122.282 15.2937 122.234 15.2507 122.234C15.2078 122.234 15.1726 122.177 15.1726 122.108C15.1722 122.04 15.1025 121.886 15.0175 121.768C14.9324 121.65 14.8623 121.505 14.8623 121.446C14.8619 121.388 14.7684 121.162 14.6546 120.945C14.3403 120.345 14.3407 120.346 14.282 120.099C14.2516 119.972 14.1985 119.868 14.1641 119.868C14.1297 119.868 14.0779 119.724 14.0491 119.548C14.0203 119.371 13.9677 119.21 13.9325 119.19C13.8968 119.17 13.8434 119.031 13.813 118.883C13.783 118.735 13.7308 118.581 13.6972 118.542C13.6635 118.503 13.574 118.228 13.4987 117.932C13.4234 117.637 13.3327 117.33 13.2974 117.251C13.2326 117.107 13.169 116.825 12.9507 115.71C12.6523 114.187 12.5291 113.335 12.5271 112.771C12.5259 112.436 12.4992 112.124 12.468 112.079C12.3765 111.947 12.5105 108.949 12.6519 107.967C12.7227 107.474 12.7867 107.007 12.794 106.928C12.8009 106.849 12.8292 106.704 12.8564 106.605C12.8835 106.507 12.9811 106.039 13.0735 105.566C13.1654 105.093 13.2699 104.641 13.3059 104.562C13.3416 104.483 13.3914 104.259 13.4165 104.064C13.4416 103.869 13.4963 103.69 13.538 103.666C13.5797 103.643 13.623 103.447 13.6348 103.232L13.6558 102.841L13.4027 102.819C13.2638 102.807 13.146 102.823 13.1407 102.855ZM74.5047 132.042C74.4573 132.086 74.4488 140.764 74.4962 140.808C74.514 140.825 75.0101 140.822 75.5986 140.802C77.008 140.755 77.0748 140.623 75.6897 140.623H74.6586L74.6383 136.469C74.6262 133.887 74.6468 132.289 74.693 132.246C74.7408 132.202 74.9733 132.358 75.3357 132.676C76.3337 133.552 79.9475 136.675 80.1269 136.816C80.2994 136.953 80.2998 136.953 80.2998 136.763C80.2998 136.658 80.2646 136.572 80.2217 136.572C80.1787 136.572 80.0171 136.443 79.8624 136.286C79.7081 136.128 79.5413 135.999 79.4922 135.999C79.4428 135.999 78.9487 135.579 78.3935 135.067C77.8382 134.554 77.3449 134.135 77.2971 134.135C77.2494 134.135 76.7994 133.731 76.2972 133.239C75.795 132.746 75.3398 132.343 75.2863 132.343C75.2325 132.343 75.1284 132.281 75.0551 132.207C74.9226 132.072 74.5828 131.97 74.5047 132.042ZM42.0954 132.118C42.0954 132.152 42.0063 132.163 41.8973 132.144C41.5932 132.091 40.3057 132.479 40.3057 132.624C40.3057 132.657 40.2441 132.705 40.1692 132.73C39.7836 132.858 38.9048 133.569 38.9048 133.752C38.9048 133.801 38.8602 133.867 38.8051 133.898C38.6691 133.977 38.2045 134.87 38.2045 135.054C38.2045 135.135 38.1673 135.223 38.1215 135.249C38.0757 135.275 38.0474 135.454 38.0583 135.646C38.0697 135.838 38.0543 136.018 38.0251 136.045C37.9409 136.122 37.9619 136.989 38.049 137.038C38.098 137.066 38.1268 136.909 38.1268 136.617C38.1268 133.317 41.6341 131.241 44.7898 132.674C45.1264 132.827 45.4285 132.963 45.4605 132.976C45.4925 132.989 45.5172 132.941 45.5148 132.868C45.5111 132.736 44.8907 132.424 44.3905 132.303C44.1086 132.235 44.1139 132.237 43.9397 132.166C43.8632 132.135 43.6793 132.128 43.5311 132.15C43.3833 132.172 43.2622 132.16 43.2622 132.123C43.2622 132.086 42.9997 132.056 42.6786 132.056C42.3578 132.056 42.0954 132.084 42.0954 132.118ZM50.5765 132.128C50.5765 132.167 50.6992 132.199 50.8486 132.199C50.9985 132.199 51.1212 132.167 51.1212 132.128C51.1212 132.088 50.9985 132.056 50.8486 132.056C50.6992 132.056 50.5765 132.088 50.5765 132.128ZM68.3948 132.128C68.3948 132.167 68.5176 132.199 68.6674 132.199C68.8169 132.199 68.9396 132.167 68.9396 132.128C68.9396 132.088 68.8169 132.056 68.6674 132.056C68.5176 132.056 68.3948 132.088 68.3948 132.128ZM98.3515 132.106C97.5281 132.19 96.6047 133.015 96.5201 133.742C96.4188 134.613 96.6873 135.605 97.1053 135.904C97.207 135.976 97.196 135.998 97.0287 136.057C96.9218 136.095 96.7675 136.194 96.6861 136.278C96.6047 136.361 96.4986 136.429 96.4504 136.429C96.3079 136.429 96.0397 136.77 95.7733 137.289C95.6825 137.467 95.5776 137.668 95.5404 137.737C95.3257 138.131 95.5683 139.659 95.8777 139.859C95.96 139.913 96.0592 140.034 96.0989 140.13C96.1382 140.225 96.2495 140.334 96.3467 140.373C96.5776 140.465 96.8218 140.607 96.8838 140.686C97.2074 141.096 99.8034 141.198 100.411 140.825C100.496 140.773 100.628 140.73 100.706 140.73C100.784 140.73 100.941 140.674 101.055 140.605C101.17 140.536 101.239 140.516 101.209 140.561C101.074 140.763 101.385 140.816 102.687 140.812L103.993 140.808L104.017 140.595C104.035 140.431 103.995 140.353 103.845 140.262C103.737 140.197 103.627 140.081 103.601 140.005C103.574 139.928 103.407 139.74 103.229 139.587C102.919 139.32 102.911 139.304 103.041 139.172C103.115 139.096 103.176 138.998 103.176 138.954C103.176 138.91 103.22 138.848 103.274 138.816C103.457 138.71 103.951 137.637 103.953 137.343C103.954 137.313 103.902 137.289 103.837 137.289C103.767 137.289 103.721 137.356 103.721 137.454C103.721 137.669 103.181 138.694 102.915 138.984C102.802 139.108 102.709 139.234 102.709 139.263C102.709 139.316 103.406 140.121 103.71 140.418C103.94 140.644 103.876 140.659 102.692 140.659C101.648 140.659 101.606 140.653 101.436 140.484L101.261 140.309L100.565 140.571C98.6471 141.29 96.5071 140.767 95.8526 139.419C95.3176 138.318 95.9668 136.723 97.1652 136.196C97.3981 136.094 97.3876 136.017 97.0749 135.539C96.0458 133.964 96.9482 132.358 98.9395 132.219C99.2554 132.197 99.4956 132.151 99.4729 132.117C99.4324 132.057 98.8893 132.052 98.3515 132.106ZM49.2537 132.28C49.0184 132.355 48.7645 132.436 48.6896 132.46C48.6146 132.483 48.5535 132.527 48.5535 132.558C48.5535 132.588 48.4919 132.633 48.4174 132.658C47.9213 132.823 47.1137 133.574 46.8468 134.117C46.8031 134.206 46.7403 134.278 46.7067 134.278C46.6346 134.278 46.4827 134.587 46.4074 134.888C46.3774 135.006 46.3142 135.148 46.2669 135.203C46.1466 135.343 46.1482 137.733 46.2685 137.87C46.3171 137.925 46.3827 138.083 46.4143 138.221C46.4459 138.359 46.5374 138.558 46.618 138.662C46.6982 138.767 46.7638 138.888 46.7638 138.931C46.7638 138.975 46.7966 139.01 46.8363 139.01C46.8764 139.01 46.9339 139.083 46.9643 139.171C46.9946 139.26 47.0845 139.375 47.1639 139.426C47.2433 139.478 47.3085 139.576 47.3085 139.645C47.3085 139.715 47.4604 139.859 47.6532 139.971C47.8431 140.081 48.0169 140.217 48.0399 140.272C48.063 140.327 48.1529 140.372 48.2396 140.372C48.3267 140.372 48.3976 140.403 48.3976 140.44C48.3976 140.478 48.5292 140.561 48.6896 140.625C48.8499 140.689 49.0938 140.792 49.2306 140.853C49.3845 140.922 49.5708 140.948 49.717 140.921C49.8475 140.897 49.954 140.906 49.954 140.942C49.954 141.133 52.0458 141.061 52.1766 140.867C52.2001 140.831 52.288 140.802 52.3718 140.802C52.4557 140.802 52.7185 140.698 52.9558 140.569C53.1932 140.441 53.4479 140.304 53.5212 140.265C53.7205 140.158 54.5446 139.383 54.5446 139.302C54.5446 139.263 54.5888 139.206 54.6427 139.175C54.6969 139.143 54.8338 138.94 54.9476 138.723C55.7171 137.257 55.5762 135.028 54.6455 133.943C54.5046 133.779 54.3891 133.616 54.3891 133.581C54.3891 133.493 53.8946 133.059 53.7946 133.059C53.7496 133.059 53.6464 132.992 53.5645 132.908C53.2576 132.595 52.047 132.13 51.5343 132.128C51.0989 132.127 51.1892 132.244 51.6886 132.329C55.1728 132.92 56.4992 137.272 53.923 139.659C50.702 142.643 45.484 139.816 46.422 135.594C46.7954 133.914 48.2842 132.535 49.9734 132.305C50.1767 132.277 50.3432 132.226 50.3432 132.191C50.3432 132.083 49.7041 132.135 49.2537 132.28ZM67.3832 132.193C67.3192 132.227 67.1442 132.278 66.9944 132.306C66.8445 132.335 66.6104 132.436 66.4743 132.53C66.3378 132.624 66.1929 132.701 66.152 132.701C66.1106 132.701 66.0572 132.749 66.0325 132.809C66.0078 132.868 65.9377 132.916 65.877 132.916C65.7571 132.916 64.892 133.679 64.9507 133.733C64.9702 133.752 64.9131 133.809 64.8232 133.86C64.7336 133.912 64.6587 133.987 64.6575 134.027C64.6559 134.067 64.587 134.228 64.5044 134.386C64.4218 134.543 64.3529 134.727 64.3513 134.794C64.3501 134.861 64.3177 134.933 64.28 134.954C64.1792 135.011 64.014 135.889 64.0723 136.058C64.0994 136.137 64.0852 136.223 64.0407 136.248C63.9961 136.273 63.9597 136.419 63.9597 136.572C63.9597 136.725 63.9961 136.872 64.0407 136.897C64.0852 136.922 64.1002 137.006 64.0739 137.082C64.0172 137.246 64.1999 138.221 64.2869 138.221C64.3197 138.221 64.3691 138.35 64.3967 138.508C64.4242 138.666 64.4753 138.795 64.5105 138.795C64.5461 138.795 64.6332 138.908 64.7045 139.047C64.8511 139.331 65.894 140.298 66.1742 140.409C66.2751 140.449 66.4221 140.532 66.5011 140.593C66.6797 140.734 67.5723 140.98 67.6796 140.918C67.7234 140.893 67.7736 140.914 67.7918 140.963C67.8319 141.074 69.46 141.092 69.5454 140.982C69.5758 140.942 69.6884 140.905 69.7953 140.899C70.1246 140.88 70.6855 140.717 70.7771 140.613C70.8244 140.559 70.969 140.481 71.0982 140.439C71.3619 140.355 72.519 139.324 72.519 139.174C72.519 139.121 72.5712 139.059 72.6356 139.036C72.6996 139.013 72.7522 138.95 72.7522 138.895C72.7522 138.84 72.7867 138.795 72.8292 138.795C72.8713 138.795 72.9284 138.666 72.956 138.508C72.9831 138.35 73.0293 138.221 73.0584 138.221C73.1329 138.221 73.3172 137.162 73.2577 137.073C73.1718 136.946 73.0633 137.074 73.0633 137.304C73.0633 139.636 69.7795 141.497 67.1721 140.644C62.9921 139.275 63.3004 133.31 67.6002 132.364C67.8874 132.301 68.1559 132.222 68.1964 132.188C68.2936 132.109 67.5358 132.113 67.3832 132.193ZM69.0951 132.187C69.0951 132.219 69.3142 132.283 69.5815 132.328C71.1626 132.598 72.6708 133.961 72.9863 135.406C73.0361 135.633 73.0941 135.9 73.1151 135.998C73.1487 136.154 73.1625 136.161 73.2285 136.052C73.3047 135.927 73.1977 135.176 73.069 134.933C73.0349 134.868 72.9061 134.622 72.7826 134.386C72.5315 133.905 72.5501 133.93 72.0131 133.35C71.7989 133.118 71.5664 132.926 71.4963 132.922C71.4259 132.919 71.3481 132.868 71.3234 132.809C71.2987 132.749 71.2201 132.701 71.1488 132.701C71.0772 132.701 70.98 132.657 70.9322 132.603C70.7046 132.343 69.0951 131.978 69.0951 132.187ZM86.3971 133.687C85.9322 134.545 85.5255 135.257 85.4935 135.27C85.4615 135.283 85.4352 135.325 85.4352 135.364C85.4352 135.472 85.1213 136.084 84.9537 136.303C84.8706 136.411 84.8249 136.532 84.8512 136.572C84.8779 136.611 84.8625 136.644 84.8172 136.644C84.7718 136.644 84.735 136.692 84.735 136.752C84.735 136.811 84.6997 136.859 84.6572 136.859C84.6143 136.859 84.5782 136.9 84.5766 136.949C84.5754 136.998 84.5066 137.167 84.4235 137.325C84.3409 137.483 84.2721 137.639 84.2708 137.671C84.2672 137.749 83.0012 140.11 82.938 140.157C82.8546 140.219 82.6796 140.725 82.727 140.768C82.7614 140.8 84.3101 140.823 85.1906 140.804C85.2522 140.803 85.2777 140.757 85.2514 140.695C85.2266 140.636 85.2368 140.587 85.2736 140.587C85.3105 140.587 85.3635 140.498 85.3915 140.39C85.4194 140.281 85.502 140.056 85.5749 139.889L85.7074 139.584L87.3574 139.584L89.0073 139.583L89.1365 139.852C89.2078 140 89.3427 140.266 89.4362 140.444L89.6067 140.766L90.7958 140.802C92.2433 140.846 92.2672 140.834 91.9079 140.232C91.7714 140.003 91.6601 139.766 91.6601 139.705C91.6601 139.592 91.1976 138.718 91.102 138.651C91.0732 138.631 91.0258 138.526 90.9963 138.418C90.9671 138.31 90.9116 138.221 90.8736 138.221C90.8355 138.221 90.8039 138.184 90.8039 138.137C90.8039 138.091 90.65 137.761 90.4617 137.403C90.0178 136.559 89.8704 136.246 89.8704 136.149C89.8704 136.106 89.8355 136.07 89.7926 136.07C89.7497 136.07 89.7144 136.03 89.7136 135.981C89.7132 135.932 89.6039 135.698 89.4706 135.461C88.8396 134.339 88.3921 133.503 88.3917 133.446C88.3917 133.411 88.2868 133.189 88.1584 132.952C88.0305 132.715 87.9256 132.481 87.9256 132.432C87.9252 132.383 87.8899 132.343 87.8474 132.343C87.8045 132.343 87.7696 132.294 87.7696 132.235C87.7696 132.176 87.717 132.128 87.653 132.128C87.5886 132.128 87.536 132.156 87.536 132.19C87.536 132.255 88.1949 133.528 91.0307 138.938C91.4952 139.825 91.8508 140.577 91.82 140.607C91.7893 140.638 91.313 140.654 90.7618 140.643C89.6241 140.62 89.755 140.694 89.3637 139.852L89.1721 139.44H87.3853H85.5984L85.2882 140.049L84.9784 140.659H84.0056C83.4702 140.659 83.017 140.634 82.9983 140.605C82.9797 140.576 83.541 139.471 84.2461 138.15C86.7519 133.456 87.3804 132.262 87.3804 132.195C87.3804 131.951 87.1415 132.313 86.3971 133.687ZM99.5965 132.193C99.5965 132.23 99.7103 132.282 99.8496 132.31C101.711 132.679 102.069 134.848 100.457 135.98C100.245 136.128 100.07 136.275 100.068 136.306C100.058 136.429 101.598 138.063 101.679 138.016C101.779 137.96 102.242 137.081 102.242 136.949C102.242 136.818 102.439 136.837 103.207 137.042C103.584 137.143 103.911 137.21 103.932 137.191C104.003 137.124 103.867 137.003 103.721 137.003C103.64 137.003 103.555 136.975 103.533 136.941C103.497 136.887 103.258 136.836 102.691 136.76C102.617 136.751 102.532 136.72 102.503 136.693C102.366 136.567 101.99 136.642 102.031 136.787C102.054 136.866 102.04 136.949 102.001 136.971C101.962 136.993 101.931 137.074 101.931 137.15C101.931 137.227 101.866 137.402 101.785 137.54L101.64 137.79L101.436 137.615C101.323 137.518 101.231 137.395 101.231 137.341C101.231 137.286 101.09 137.138 100.919 137.011C100.748 136.884 100.608 136.744 100.608 136.7C100.608 136.656 100.549 136.559 100.477 136.486C100.352 136.359 100.368 136.331 100.815 135.907C101.583 135.177 101.655 135.024 101.657 134.105C101.657 133.543 101.631 133.314 101.561 133.292C101.508 133.276 101.464 133.235 101.464 133.201C101.464 133.042 100.649 132.374 100.312 132.255C99.9148 132.116 99.5965 132.089 99.5965 132.193ZM145.17 132.173C145.14 132.2 145.115 132.251 145.115 132.286C145.115 132.373 146.59 132.323 146.614 132.235C146.635 132.153 145.256 132.094 145.17 132.173ZM125.315 132.343C123.942 132.584 122.036 133.239 121.827 133.543C121.792 133.592 121.714 133.633 121.652 133.633C121.59 133.633 121.539 133.665 121.539 133.703C121.539 133.742 121.456 133.793 121.355 133.816C121.253 133.84 121.095 133.953 121.002 134.068C120.91 134.184 120.79 134.278 120.736 134.278C120.62 134.278 119.827 135.003 119.827 135.11C119.827 135.151 119.705 135.274 119.555 135.384C119.406 135.494 119.299 135.607 119.318 135.635C119.337 135.663 119.266 135.771 119.162 135.875C119.057 135.979 118.971 136.097 118.971 136.136C118.971 136.176 118.898 136.245 118.809 136.289C118.72 136.333 118.663 136.384 118.683 136.403C118.704 136.422 118.567 136.716 118.379 137.058C118.191 137.4 118.038 137.718 118.038 137.765C118.038 137.812 118.005 137.862 117.966 137.875C117.836 137.919 117.772 138.436 117.898 138.436C117.988 138.436 120.5 139.537 121.017 139.803C121.611 140.109 122.05 140.313 122.544 140.513C123.207 140.781 123.143 140.815 123.487 140.014C123.919 139.008 124.569 138.319 125.429 137.956C126.273 137.599 128.167 137.698 128.546 138.118C128.597 138.175 128.678 138.222 128.726 138.222C128.836 138.222 129.476 138.816 129.476 138.918C129.476 138.959 129.526 139.031 129.587 139.078C129.649 139.125 129.723 139.266 129.752 139.391C129.781 139.516 129.843 139.662 129.888 139.715C130.001 139.843 130.005 140.968 129.894 141.096C129.846 141.151 129.784 141.314 129.756 141.457C129.698 141.754 129.263 142.595 129.167 142.595C129.132 142.595 129.081 142.675 129.055 142.774C129.028 142.872 128.972 142.953 128.929 142.953C128.887 142.953 128.853 142.986 128.853 143.028C128.853 143.122 128.535 143.544 128.406 143.62C128.352 143.651 128.309 143.721 128.309 143.775C128.309 143.828 128.203 143.954 128.075 144.053C127.946 144.153 127.842 144.284 127.842 144.345C127.842 144.406 127.754 144.508 127.647 144.573C127.54 144.637 127.452 144.729 127.452 144.776C127.452 144.823 127.347 144.954 127.219 145.068C127.091 145.181 126.986 145.313 126.986 145.362C126.986 145.41 126.88 145.531 126.752 145.63C126.624 145.73 126.519 145.84 126.519 145.876C126.519 145.911 126.415 146.034 126.288 146.149C126.16 146.264 126.055 146.394 126.054 146.439C126.053 146.483 125.93 146.616 125.78 146.734C125.63 146.852 125.507 146.98 125.507 147.018C125.507 147.057 125.437 147.147 125.352 147.218C125.266 147.29 125.196 147.389 125.196 147.437C125.196 147.486 125.073 147.626 124.924 147.747C124.774 147.868 124.651 148.014 124.651 148.072C124.651 148.13 124.546 148.246 124.418 148.33C124.29 148.414 124.184 148.526 124.184 148.579C124.184 148.632 124.071 148.764 123.932 148.872C123.792 148.98 123.688 149.108 123.7 149.157C123.711 149.205 123.6 149.342 123.452 149.462C123.305 149.581 123.205 149.697 123.229 149.72C123.254 149.743 123.182 149.829 123.068 149.911C122.954 149.994 122.862 150.104 122.862 150.157C122.862 150.21 122.761 150.331 122.638 150.426C122.514 150.522 122.39 150.669 122.361 150.754C122.332 150.838 122.205 150.975 122.079 151.057C121.953 151.14 121.85 151.247 121.85 151.297C121.85 151.345 121.745 151.478 121.617 151.592C121.488 151.705 121.383 151.834 121.383 151.878C121.383 151.923 121.278 152.031 121.15 152.118C121.021 152.206 120.916 152.325 120.916 152.383C120.916 152.441 120.829 152.559 120.722 152.645C120.615 152.73 120.527 152.84 120.527 152.889C120.527 152.937 120.422 153.058 120.294 153.158C120.166 153.258 120.061 153.385 120.061 153.442C120.061 153.499 119.938 153.622 119.789 153.715C119.639 153.809 119.517 153.94 119.516 154.005C119.516 154.071 119.411 154.205 119.282 154.305C119.154 154.405 119.049 154.52 119.049 154.562C119.049 154.604 118.944 154.724 118.816 154.829C118.687 154.934 118.582 155.061 118.582 155.111C118.582 155.161 118.495 155.265 118.388 155.343C118.281 155.42 118.193 155.535 118.193 155.597C118.193 155.659 118.088 155.781 117.96 155.869C117.831 155.956 117.726 156.064 117.726 156.108C117.726 156.153 117.621 156.282 117.493 156.395C117.365 156.508 117.259 156.642 117.259 156.692C117.259 156.741 117.137 156.868 116.987 156.973C116.72 157.161 116.607 157.469 116.822 157.422C116.881 157.409 117.744 156.447 118.741 155.284C119.737 154.121 120.816 152.862 121.139 152.488C121.714 151.82 122.562 150.834 123.727 149.477C124.049 149.102 124.783 148.247 125.36 147.577C129.078 143.251 129.17 143.135 129.721 142.05C130.754 140.02 129.914 138.114 127.762 137.606C125.804 137.144 123.953 138.136 123.239 140.031C123.139 140.298 123.031 140.508 123.001 140.498C122.605 140.371 118.043 138.235 118.041 138.176C118.029 137.9 118.993 136.366 119.679 135.569C123.794 130.785 132.674 131.538 135.43 136.905C136.534 139.055 136.366 141.953 134.99 144.478C133.937 146.411 133.099 147.402 128.873 151.718C128.348 152.253 127.919 152.71 127.919 152.733C127.919 152.756 128.52 152.775 129.255 152.775C130.865 152.775 130.923 152.709 129.372 152.643L128.244 152.596L128.66 152.273C128.89 152.096 129.079 151.901 129.082 151.84C129.085 151.779 129.332 151.513 129.631 151.248C129.931 150.984 130.176 150.731 130.176 150.686C130.176 150.6 131.107 149.768 131.207 149.765C131.239 149.764 131.265 149.704 131.265 149.63C131.265 149.557 131.458 149.33 131.693 149.125C131.928 148.92 132.121 148.717 132.121 148.673C132.121 148.63 132.261 148.484 132.432 148.349C132.604 148.214 132.744 148.061 132.744 148.009C132.744 147.957 132.864 147.817 133.01 147.699C133.157 147.58 133.254 147.462 133.225 147.436C133.197 147.409 133.254 147.332 133.352 147.264C133.526 147.143 133.667 146.955 133.827 146.627C133.871 146.539 133.939 146.466 133.978 146.466C134.017 146.466 134.071 146.385 134.098 146.287C134.125 146.188 134.181 146.108 134.224 146.108C134.265 146.108 134.3 146.069 134.3 146.024C134.3 145.977 134.352 145.887 134.414 145.823C134.539 145.696 135.049 144.859 135.126 144.656C135.153 144.587 135.205 144.53 135.243 144.53C135.28 144.53 135.311 144.463 135.311 144.38C135.311 144.242 135.52 143.826 135.631 143.742C135.657 143.722 135.703 143.577 135.735 143.419C135.767 143.261 135.818 143.1 135.85 143.06C135.998 142.878 136.333 141.296 136.328 140.802C136.327 140.664 136.346 140.397 136.371 140.209C136.398 140.009 136.382 139.829 136.334 139.775C136.289 139.725 136.272 139.609 136.298 139.518C136.349 139.338 136.193 138.181 136.093 138.004C136.059 137.943 136.006 137.782 135.974 137.646C135.942 137.509 135.889 137.365 135.856 137.325C135.823 137.286 135.772 137.148 135.742 137.02C135.712 136.892 135.664 136.788 135.635 136.788C135.579 136.788 135.311 136.26 135.311 136.15C135.311 136.114 135.259 136.067 135.195 136.045C135.13 136.022 135.078 135.96 135.078 135.906C135.078 135.853 134.99 135.733 134.883 135.641C134.776 135.548 134.689 135.452 134.689 135.429C134.689 135.373 133.191 133.984 133.003 133.865C132.925 133.816 132.808 133.754 132.744 133.728C132.679 133.702 132.504 133.593 132.354 133.486C132.059 133.275 131.295 132.916 131.14 132.916C131.088 132.916 130.945 132.871 130.824 132.815C129.925 132.403 129.115 132.266 127.375 132.232C126.352 132.212 125.933 132.234 125.315 132.343ZM143.831 132.311C143.532 132.358 143.269 132.406 143.248 132.417C143.227 132.427 143.173 132.44 143.129 132.444C142.856 132.472 141.387 132.969 141.03 133.153C140.945 133.198 140.717 133.308 140.525 133.399C140.332 133.49 140.028 133.677 139.848 133.814C139.669 133.951 139.496 134.063 139.464 134.063C139.367 134.063 138.112 135.239 138.112 135.33C138.112 135.377 138.025 135.478 137.918 135.556C137.675 135.732 137.66 136.069 137.878 136.464C137.964 136.617 138.055 136.85 138.082 136.981C138.108 137.111 138.161 137.217 138.199 137.217C138.237 137.217 138.268 137.275 138.268 137.346C138.268 137.416 138.325 137.666 138.393 137.901C138.762 139.155 138.8 140.949 138.49 142.451C138.315 143.3 138.267 143.496 138.197 143.634C138.158 143.713 138.063 143.947 137.987 144.154C137.911 144.361 137.823 144.53 137.792 144.53C137.761 144.53 137.711 144.635 137.68 144.763C137.608 145.067 137.272 145.72 137.132 145.827C137.072 145.872 137.023 145.954 137.023 146.009C137.023 146.063 136.992 146.108 136.954 146.108C136.916 146.108 136.863 146.164 136.836 146.233C136.739 146.477 136.547 146.753 136.474 146.753C136.434 146.753 136.401 146.818 136.401 146.898C136.401 146.978 136.348 147.062 136.284 147.085C136.22 147.108 136.167 147.165 136.167 147.213C136.167 147.261 136.062 147.392 135.934 147.505C135.805 147.619 135.7 147.744 135.7 147.784C135.7 147.824 135.588 147.963 135.452 148.093C135.272 148.265 135.238 148.33 135.329 148.33C135.633 148.33 136.848 146.793 137.514 145.567C139.126 142.595 139.337 139.509 138.131 136.525C137.852 135.833 137.844 135.854 138.687 135.017C140.166 133.552 142.436 132.553 144.643 132.397C144.789 132.387 144.922 132.342 144.938 132.297C144.975 132.192 144.54 132.197 143.831 132.311ZM146.799 132.249C146.7 132.34 146.852 132.414 147.14 132.414C148.679 132.414 151.107 133.423 152.569 134.67C157.503 138.88 157.891 149.528 153.297 154.639C151.624 156.5 148.947 157.791 146.759 157.793C146.54 157.793 146.512 157.81 146.589 157.896C146.694 158.012 147.402 157.991 147.565 157.866C147.616 157.827 147.676 157.81 147.697 157.829C147.785 157.911 149.258 157.588 149.589 157.414C149.675 157.369 150.043 157.195 150.407 157.026C151.188 156.664 151.358 156.569 151.441 156.449C151.475 156.4 151.548 156.359 151.603 156.359C151.657 156.359 151.784 156.279 151.884 156.18C151.985 156.082 152.085 156.018 152.108 156.039C152.164 156.091 153.285 155.057 153.285 154.952C153.285 154.907 153.417 154.762 153.577 154.633C153.865 154.4 153.98 154.257 154.136 153.94C154.18 153.851 154.248 153.778 154.289 153.778C154.329 153.778 154.385 153.684 154.412 153.569C154.44 153.454 154.548 153.275 154.652 153.171C154.756 153.067 154.842 152.936 154.842 152.878C154.842 152.821 154.877 152.775 154.919 152.775C154.962 152.775 154.997 152.717 154.997 152.647C154.997 152.577 155.045 152.456 155.102 152.378C155.16 152.301 155.233 152.142 155.263 152.026C155.294 151.91 155.382 151.733 155.46 151.632C155.537 151.531 155.626 151.335 155.658 151.197C155.689 151.059 155.742 150.914 155.774 150.875C155.806 150.835 155.858 150.674 155.889 150.516C155.92 150.359 155.972 150.197 156.006 150.158C156.064 150.09 156.213 149.449 156.299 148.903C156.321 148.766 156.372 148.614 156.413 148.567C156.454 148.519 156.478 148.357 156.467 148.206C156.455 148.055 156.478 147.884 156.519 147.826C156.621 147.679 156.652 143.125 156.554 142.611C156.512 142.385 156.462 142.055 156.445 141.877C156.412 141.545 156.352 141.269 156.126 140.408C155.766 139.042 155.765 139.038 155.577 138.699C155.515 138.588 155.464 138.435 155.464 138.359C155.464 138.283 155.429 138.221 155.386 138.221C155.343 138.221 155.308 138.185 155.308 138.14C155.308 138.058 154.61 136.712 154.532 136.644C154.475 136.594 154.306 136.342 154.244 136.214C154.215 136.155 154.16 136.087 154.122 136.063C154.084 136.04 154.045 135.971 154.035 135.91C154.026 135.849 153.906 135.713 153.768 135.606C153.631 135.499 153.519 135.374 153.519 135.328C153.519 135.219 152.339 134.135 152.221 134.135C152.172 134.135 152.048 134.046 151.945 133.938C151.731 133.711 151.588 133.622 151.126 133.424C150.944 133.346 150.795 133.249 150.795 133.207C150.795 133.165 150.757 133.131 150.71 133.131C150.619 133.131 150.198 132.974 149.836 132.804C149.715 132.747 149.572 132.701 149.518 132.701C149.464 132.701 149.131 132.617 148.778 132.515C148.424 132.412 148.052 132.343 147.951 132.361C147.849 132.379 147.756 132.365 147.743 132.33C147.717 132.258 146.868 132.185 146.799 132.249ZM56.6454 132.361C56.6454 132.37 56.643 134.266 56.6401 136.572L56.6353 140.766L57.8077 140.786L58.9798 140.806L58.9847 139.209C58.9879 138.274 59.0171 137.671 59.0551 137.755C59.0912 137.834 59.1941 137.955 59.2836 138.024C59.3735 138.092 59.4468 138.197 59.4468 138.256C59.4468 138.316 59.4828 138.365 59.5266 138.365C59.5703 138.365 59.6396 138.445 59.6801 138.544C59.721 138.643 59.7902 138.723 59.834 138.723C59.8777 138.723 59.9137 138.784 59.9137 138.859C59.9137 138.934 59.966 139.013 60.0304 139.036C60.0944 139.059 60.147 139.139 60.147 139.215C60.147 139.291 60.1997 139.372 60.2637 139.394C60.3281 139.417 60.3803 139.484 60.3803 139.543C60.3803 139.602 60.4504 139.685 60.5362 139.727C60.6217 139.769 60.6917 139.867 60.6917 139.945C60.6917 140.022 60.725 140.085 60.7654 140.085C60.8355 140.085 60.9801 140.293 61.1526 140.641C61.2312 140.799 61.2575 140.802 62.5961 140.802H63.9597V140.612C63.9597 140.507 63.8633 140.306 63.7458 140.165C63.5276 139.903 63.3878 139.704 63.287 139.512C63.2562 139.453 63.1651 139.361 63.0845 139.308C63.0043 139.254 62.9055 139.141 62.8658 139.056C62.8006 138.918 62.7082 138.773 62.5426 138.548C62.5118 138.506 62.3806 138.355 62.2506 138.212C62.1206 138.069 62.0145 137.915 62.0145 137.871C62.0145 137.827 61.9817 137.791 61.942 137.791C61.9019 137.791 61.8444 137.719 61.814 137.63C61.7836 137.541 61.6949 137.427 61.6168 137.376C61.4722 137.283 61.6463 137.003 61.8488 137.003C61.9059 137.003 62.4369 136.488 62.6256 136.25C62.9233 135.874 63.0598 134.258 62.8172 133.98C62.7714 133.927 62.7099 133.812 62.6803 133.723C62.6042 133.495 61.8768 132.875 61.5086 132.724C61.3377 132.655 61.179 132.574 61.1563 132.545C61.134 132.517 60.985 132.481 60.8258 132.466C60.6666 132.451 60.5131 132.417 60.4844 132.391C60.4374 132.347 56.6458 132.318 56.6454 132.361ZM80.2132 132.396C80.1702 132.655 80.197 136.501 80.2415 136.501C80.3168 136.501 80.3189 136.437 80.3124 134.333C80.3063 132.261 80.1808 132.467 81.4282 132.501L82.2062 132.522V136.806C82.2062 139.161 82.2252 141.089 82.2491 141.089C82.4645 141.089 82.4783 140.826 82.4783 136.743C82.4783 134.448 82.4573 132.518 82.4313 132.456C82.3807 132.335 80.2326 132.277 80.2132 132.396ZM60.8084 132.665C63.0411 133.209 63.5203 135.855 61.5759 136.904C61.1227 137.149 61.0696 137.037 62.513 138.902C63.2149 139.809 63.7633 140.576 63.7321 140.607C63.7009 140.638 63.1744 140.654 62.562 140.643L61.4487 140.623L60.2957 139.046C59.354 137.758 59.1094 137.469 58.9636 137.469H58.7854L58.7643 139.064L58.7433 140.659H57.7725H56.8013V136.62C56.8013 134.399 56.8276 132.556 56.8596 132.525C56.9653 132.422 60.2961 132.54 60.8084 132.665ZM45.2823 134.063C45.2272 134.576 45.1725 134.995 45.1604 134.995C45.1482 134.995 45.0053 134.881 44.8425 134.742C42.9584 133.132 40.2749 134.188 40.283 136.536C40.2907 138.853 42.5935 139.802 44.8882 138.435C45.1495 138.28 45.3633 138.107 45.3633 138.05C45.3633 137.916 45.0802 137.982 44.9522 138.146C44.9 138.213 44.5772 138.387 44.235 138.532C43.8927 138.678 43.5651 138.821 43.5068 138.851C43.3399 138.937 42.1585 138.822 41.9005 138.696C41.7722 138.632 41.632 138.58 41.5895 138.58C41.4263 138.579 40.8062 137.915 40.6515 137.576C40.6248 137.517 40.5628 137.393 40.5146 137.3C40.3782 137.039 40.4142 135.875 40.5628 135.738C40.5924 135.711 40.6167 135.628 40.6167 135.554C40.6167 135.481 40.6693 135.402 40.7333 135.38C40.7977 135.357 40.8504 135.282 40.8504 135.213C40.8504 134.802 42.0634 134.135 42.8122 134.135C43.1824 134.135 44.0572 134.399 44.1414 134.536C44.1758 134.591 44.2504 134.637 44.3075 134.637C44.3646 134.637 44.5379 134.766 44.6926 134.923C45.2175 135.459 45.3617 135.349 45.4431 134.35C45.5654 132.851 45.4374 132.622 45.2823 134.063ZM98.7233 133.53C98.2693 133.756 98.2235 134.229 98.6046 134.754C98.9671 135.252 99.3198 135.198 99.771 134.573C100.256 133.903 99.494 133.144 98.7233 133.53ZM99.5454 133.797C99.7815 133.984 99.7994 134.098 99.6374 134.396C99.3531 134.922 99.0068 135.033 98.7848 134.671C98.7391 134.596 98.6581 134.491 98.6046 134.437C98.1745 134.005 99.0533 133.407 99.5454 133.797ZM24.865 133.938L25.0939 134.171L24.8407 133.96C24.7018 133.844 24.588 133.739 24.588 133.727C24.588 133.672 24.652 133.721 24.865 133.938ZM50.4209 134.056C48.417 134.442 47.7496 137.054 49.2914 138.479C50.5226 139.617 52.4561 139.064 52.9988 137.418C53.5965 135.605 52.1527 133.723 50.4209 134.056ZM58.7465 135.058C58.7465 136.346 58.7388 136.335 59.5788 136.212C61.2531 135.965 61.36 134.004 59.6995 133.993C59.322 133.991 59.3945 134.111 59.8044 134.168C61.2247 134.364 60.9137 135.929 59.4298 136.053L58.9843 136.09L58.9628 135.065C58.947 134.323 58.9142 134.031 58.8437 134.009C58.7688 133.986 58.7465 134.227 58.7465 135.058ZM68.1575 134.086C65.4853 134.774 65.8122 138.884 68.5536 139.065C70.5462 139.197 71.7434 136.631 70.4794 134.938C69.9529 134.232 68.978 133.875 68.1575 134.086ZM51.4322 134.336C52.1612 134.662 52.4103 134.873 52.5707 135.3C52.5966 135.369 52.6444 135.425 52.6772 135.425C52.7456 135.425 52.9153 135.986 52.9591 136.357C53.0028 136.725 52.7537 137.722 52.5857 137.855C52.5075 137.916 52.4439 137.998 52.4439 138.037C52.4439 138.129 51.968 138.58 51.8704 138.58C51.8287 138.58 51.7303 138.634 51.6513 138.699C51.4225 138.89 50.3395 138.924 50.0435 138.75C48.7374 137.982 48.2392 136.559 48.8917 135.461C48.9617 135.343 49.0196 135.214 49.02 135.174C49.0213 135.062 49.6729 134.517 49.8778 134.457C49.9791 134.427 50.1666 134.349 50.2938 134.284C50.6008 134.126 51.0033 134.144 51.4322 134.336ZM69.0562 134.237C69.6937 134.464 70.3401 134.869 70.3401 135.042C70.3401 135.101 70.3927 135.197 70.4567 135.256C70.5207 135.315 70.5932 135.45 70.6171 135.556C70.641 135.661 70.6875 135.797 70.7204 135.855C70.8925 136.166 70.6896 137.791 70.4786 137.791C70.4454 137.791 70.4178 137.83 70.4178 137.878C70.4178 137.992 69.7127 138.652 69.5908 138.652C69.5394 138.652 69.4827 138.692 69.4649 138.741C69.4114 138.888 68.1049 138.858 67.7938 138.703C67.5022 138.558 66.9215 138.012 66.9186 137.881C66.9174 137.831 66.8899 137.791 66.8579 137.791C66.5565 137.791 66.4387 135.993 66.706 135.479C66.7829 135.331 66.8793 135.21 66.9202 135.21C66.9607 135.21 66.9944 135.164 66.9944 135.107C66.9944 134.634 68.4483 134.021 69.0562 134.237ZM87.1062 136.053C86.9856 136.319 86.8094 136.698 86.715 136.895C86.3047 137.752 86.2132 137.956 86.2132 138.015C86.2132 138.05 86.7211 138.078 87.3416 138.078C88.1435 138.078 88.4699 138.054 88.4699 137.995C88.4699 137.871 87.4303 135.569 87.3744 135.569C87.3476 135.569 87.2269 135.786 87.1062 136.053ZM87.6919 136.626C87.6919 136.7 87.7433 136.823 87.8061 136.899C87.8689 136.976 87.9215 137.087 87.9231 137.146C87.9248 137.205 87.9782 137.346 88.0422 137.459C88.2617 137.847 88.2338 137.863 87.3416 137.863C86.7227 137.863 86.5247 137.84 86.5247 137.77C86.5247 137.644 86.7061 137.291 86.7713 137.29C86.8001 137.29 86.8466 137.192 86.8746 137.074C86.9029 136.956 87.0107 136.712 87.1143 136.533C87.218 136.353 87.3027 136.152 87.3027 136.086C87.3027 136.011 87.3768 136.066 87.4971 136.229C87.604 136.375 87.6919 136.553 87.6919 136.626ZM7.86556 137.092C11.2761 141.242 16.569 144.81 21.1423 146.04C21.3249 146.09 21.4489 146.161 21.4221 146.201C21.3938 146.243 21.4128 146.25 21.4671 146.219C21.621 146.132 21.8502 146.24 21.7068 146.332C21.6218 146.387 21.6566 146.396 21.8413 146.367C22.1556 146.317 22.5695 146.443 22.516 146.572C22.4942 146.624 22.5104 146.686 22.5513 146.709C22.5926 146.733 22.6464 146.703 22.6711 146.644C22.742 146.474 22.9745 146.509 22.915 146.681C22.8668 146.822 22.9603 146.864 23.2458 146.83C23.2993 146.823 23.343 146.855 23.343 146.901C23.343 146.948 23.2774 146.969 23.1932 146.948C23.0883 146.923 23.0559 146.942 23.0847 147.012C23.1077 147.066 23.1576 147.111 23.1956 147.111C23.2341 147.111 23.2653 147.145 23.2653 147.187C23.2653 147.229 23.2337 147.245 23.1956 147.223C23.0725 147.153 23.0636 147.324 23.0725 149.558L23.081 151.754L23.3013 151.941C23.565 152.167 23.5196 152.178 23.13 151.986C22.7546 151.801 22.5671 151.799 22.8093 151.982C22.9101 152.059 22.6165 151.944 22.1564 151.728C21.6963 151.511 21.3201 151.318 21.3201 151.297C21.3201 151.277 21.3606 151.284 21.4096 151.312C21.4642 151.343 21.4784 151.332 21.446 151.284C21.4169 151.24 21.3452 151.22 21.2873 151.241C21.2293 151.262 20.7664 151.088 20.259 150.855C19.7511 150.623 18.8455 150.228 18.2465 149.978C15.369 148.776 14.5517 148.307 11.9342 146.361C9.14172 144.284 7.67359 142.276 7.16248 139.837C6.96282 138.883 6.93285 136.214 7.12198 136.214C7.13413 136.214 7.46866 136.609 7.86556 137.092ZM76.5649 136.413C76.5649 136.557 76.8233 136.788 76.9845 136.788C77.0432 136.788 77.4843 137.174 77.965 137.647C78.4453 138.12 78.8641 138.492 78.8953 138.474C78.9269 138.456 79.3659 138.828 79.8717 139.299C80.3772 139.771 80.8328 140.157 80.8838 140.157C80.9349 140.157 81.192 140.367 81.4553 140.623C81.7185 140.879 81.9688 141.089 82.0113 141.089C82.13 141.089 82.1045 140.889 81.9781 140.824C81.9166 140.792 81.6104 140.54 81.2973 140.263C80.783 139.809 77.6236 137.084 76.9541 136.517C76.6431 136.254 76.5649 136.233 76.5649 136.413ZM145.225 136.931C143.829 137.119 142.711 137.908 141.856 139.306C140.09 142.196 140.077 147.583 141.828 150.643C144.079 154.576 149.042 154.099 150.516 149.807C150.902 148.684 151.329 145.858 151.139 145.683C151.033 145.586 150.958 145.865 150.917 146.502C150.864 147.341 150.733 148.392 150.671 148.485C150.647 148.521 150.594 148.764 150.554 149.026C150.514 149.288 150.451 149.536 150.414 149.579C150.377 149.621 150.321 149.765 150.29 149.899C150.221 150.194 149.633 151.269 149.539 151.269C149.503 151.269 149.473 151.313 149.473 151.366C149.473 151.498 148.483 152.416 148.341 152.416C148.279 152.416 148.228 152.448 148.228 152.486C148.228 152.902 145.11 153.301 144.715 152.936C144.661 152.887 144.559 152.846 144.488 152.846C144.417 152.846 144.232 152.767 144.076 152.669C143.92 152.572 143.792 152.511 143.792 152.534C143.792 152.557 143.731 152.506 143.656 152.421C143.581 152.337 143.433 152.228 143.327 152.179C143.221 152.131 143.094 152.017 143.045 151.926C142.996 151.836 142.864 151.673 142.752 151.565C142.639 151.457 142.548 151.334 142.548 151.291C142.548 151.248 142.494 151.194 142.43 151.171C142.365 151.148 142.276 151.056 142.232 150.966C142.188 150.876 142.049 150.626 141.923 150.409C141.797 150.192 141.694 149.974 141.693 149.924C141.692 149.831 141.534 149.541 141.45 149.477C141.424 149.457 141.378 149.316 141.348 149.163C141.317 149.011 141.261 148.833 141.223 148.769C141.185 148.705 141.121 148.475 141.08 148.258C141.039 148.041 140.984 147.783 140.957 147.684C140.649 146.545 140.685 142.963 141.012 142.164C141.036 142.105 141.077 141.899 141.102 141.705C141.127 141.512 141.181 141.317 141.222 141.272C141.262 141.227 141.32 141.054 141.348 140.888C141.377 140.723 141.431 140.587 141.468 140.587C141.505 140.587 141.536 140.525 141.536 140.449C141.536 140.315 141.757 139.87 141.861 139.798C141.889 139.778 141.937 139.673 141.966 139.565C141.996 139.457 142.051 139.368 142.089 139.368C142.128 139.368 142.159 139.303 142.159 139.223C142.159 139.143 142.211 139.059 142.275 139.036C142.339 139.013 142.392 138.959 142.392 138.916C142.392 138.874 142.484 138.75 142.597 138.642C142.709 138.534 142.843 138.371 142.895 138.279C142.946 138.188 143.024 138.12 143.068 138.128C143.111 138.136 143.264 138.031 143.407 137.895C143.55 137.759 143.696 137.648 143.73 137.648C143.765 137.648 143.861 137.585 143.944 137.508C144.027 137.431 144.246 137.333 144.43 137.29C144.615 137.246 144.818 137.191 144.882 137.167C144.946 137.143 145.086 137.112 145.193 137.097C145.3 137.082 145.44 137.051 145.504 137.028C145.675 136.967 146.159 136.957 146.205 137.013C146.227 137.039 146.366 137.075 146.516 137.092C146.965 137.142 147.816 137.498 148.045 137.731C148.116 137.804 148.211 137.863 148.256 137.863C148.367 137.863 149.006 138.445 149.006 138.546C149.006 138.59 149.094 138.702 149.2 138.795C149.307 138.887 149.395 139.003 149.395 139.052C149.395 139.101 149.425 139.152 149.462 139.165C149.52 139.186 149.782 139.667 150.201 140.526C150.271 140.67 150.329 140.838 150.329 140.898C150.329 140.959 150.364 141.029 150.407 141.053C150.449 141.077 150.484 141.17 150.484 141.257C150.484 141.345 150.536 141.601 150.599 141.824C150.741 142.326 150.858 143.08 150.918 143.885C150.959 144.427 151.039 144.689 151.137 144.597C151.155 144.58 151.14 144.186 151.102 143.722C150.737 139.241 148.37 136.506 145.225 136.931ZM38.0486 137.343C38.0478 137.568 38.2956 138.526 38.3685 138.58C38.3953 138.6 38.4443 138.696 38.4775 138.795C38.5111 138.893 38.603 139.016 38.6828 139.068C38.7622 139.119 38.827 139.195 38.827 139.236C38.827 139.464 39.9821 140.348 40.656 140.635C41.6171 141.045 43.6514 141.259 43.6514 140.95C43.6514 140.919 43.7393 140.909 43.8466 140.928C44.0709 140.968 44.348 140.883 45.0324 140.566L45.5188 140.341V139.711C45.5188 139.339 45.4868 139.082 45.4411 139.082C45.3969 139.082 45.3633 139.286 45.3633 139.552C45.3633 140.161 45.3106 140.238 44.7323 140.477C41.9888 141.612 38.8509 140.211 38.2726 137.594C38.1705 137.132 38.0494 136.996 38.0486 137.343ZM98.1405 137.368C96.712 138.211 97.8918 139.779 99.5956 139.302C100.259 139.116 100.281 139.213 99.3235 138.115C98.473 137.14 98.4993 137.156 98.1405 137.368ZM98.5074 137.522C98.5074 137.572 98.6297 137.702 98.7796 137.812C98.9294 137.922 99.0521 138.053 99.0521 138.103C99.0521 138.153 99.157 138.287 99.2854 138.4C99.4138 138.514 99.5187 138.648 99.5187 138.698C99.5187 138.749 99.5888 138.824 99.6746 138.866C99.9055 138.981 99.8646 139.066 99.5381 139.15C98.7561 139.35 97.8072 139.053 97.8072 138.609C97.8072 138.519 97.7731 138.426 97.7318 138.402C97.6334 138.346 97.8582 137.887 98.1101 137.63C98.3126 137.423 98.5074 137.37 98.5074 137.522ZM45.4435 138.49C45.4459 139.1 45.5678 139.085 45.5986 138.472C45.6221 138.003 45.612 137.935 45.5188 137.935C45.4735 137.935 45.4419 138.166 45.4435 138.49ZM21.3978 139.066C21.3978 139.095 21.4764 139.164 21.5728 139.219C21.6692 139.275 21.9867 139.495 22.2783 139.709C22.5703 139.924 22.8238 140.086 22.8417 140.069C22.8984 140.017 22.6072 139.771 22.2293 139.551C22.0288 139.435 21.8648 139.314 21.8648 139.283C21.8648 139.251 21.8121 139.225 21.7477 139.225C21.6838 139.225 21.6311 139.196 21.6311 139.161C21.6311 139.126 21.5785 139.078 21.5145 139.056C21.4501 139.033 21.3978 139.038 21.3978 139.066ZM22.0981 146.484C22.0981 146.536 22.1681 146.578 22.2536 146.578C22.3395 146.578 22.4091 146.57 22.4091 146.561C22.4091 146.551 22.3395 146.508 22.2536 146.466C22.1345 146.407 22.0981 146.411 22.0981 146.484ZM24.3086 146.659C24.2247 146.685 23.6541 146.488 23.6541 146.433C23.6541 146.417 23.8197 146.455 24.0222 146.518C24.2247 146.582 24.3535 146.645 24.3086 146.659ZM97.3791 146.881C97.2507 146.892 97.0931 146.921 97.0287 146.945C96.9648 146.969 96.8595 146.993 96.7955 146.998C96.235 147.045 94.9385 147.443 94.7725 147.618C94.751 147.641 94.681 147.682 94.617 147.711C94.3185 147.842 94.1423 147.974 93.566 148.501C92.9945 149.024 92.8504 149.186 92.6997 149.477C92.6689 149.536 92.624 149.601 92.5993 149.62C92.5106 149.691 92.2048 150.32 92.2048 150.431C92.2048 150.493 92.1744 150.561 92.1372 150.582C92.0999 150.603 92.0436 150.791 92.0116 150.999C91.9796 151.207 91.9343 151.506 91.9108 151.663C91.7921 152.454 91.9306 153.895 92.1736 154.399C92.2336 154.523 92.2826 154.674 92.2826 154.735C92.2826 154.796 92.315 154.864 92.3542 154.886C92.3939 154.909 92.449 155.023 92.4774 155.141C92.5053 155.259 92.5758 155.355 92.6337 155.355C92.6916 155.355 92.7637 155.428 92.7941 155.517C92.8244 155.605 92.9144 155.72 92.9937 155.772C93.0735 155.823 93.1383 155.911 93.1383 155.967C93.1383 156.085 93.7843 156.656 94.0034 156.733C94.084 156.761 94.15 156.814 94.15 156.849C94.15 157.028 96.1268 157.781 96.3706 157.694C96.4277 157.674 96.4856 157.689 96.4994 157.728C96.5334 157.822 97.1713 157.848 97.2005 157.757C97.213 157.718 97.1183 157.677 96.9899 157.666C91.8136 157.228 90.1903 150.749 94.5631 147.98C96.452 146.785 98.8691 146.731 101.873 147.819L102.086 147.896V148.728C102.086 149.362 102.11 149.553 102.184 149.53C102.385 149.469 102.314 147.805 102.106 147.721C102.01 147.683 101.931 147.626 101.931 147.596C101.931 147.566 101.874 147.541 101.805 147.541C101.735 147.541 101.306 147.428 100.852 147.291C100.397 147.153 99.8812 147.029 99.7054 147.015C99.53 147.001 99.3454 146.966 99.2951 146.937C99.2008 146.884 97.795 146.842 97.3791 146.881ZM51.7364 147.083C51.6939 147.13 51.6728 149.305 51.6845 152.46L51.7048 157.757L55.1477 157.776C57.8762 157.791 58.591 157.776 58.591 157.704C58.591 157.633 57.896 157.618 55.2449 157.634L51.8992 157.654V152.418V147.183H55.0894H58.2796V147.906C58.2796 148.407 58.3063 148.62 58.3666 148.602C58.4521 148.576 58.4991 147.146 58.4169 147.07C58.3318 146.992 51.8073 147.004 51.7364 147.083ZM60.0701 147.027C59.9717 147.057 59.9603 157.695 60.0587 157.751C60.1069 157.779 67.9927 157.818 68.9165 157.795C68.9683 157.794 69.0331 157.672 69.0611 157.524C69.0886 157.376 69.1955 157.135 69.298 156.988C69.4005 156.841 69.4843 156.662 69.4843 156.589C69.4843 156.517 69.5357 156.396 69.5985 156.319C69.6613 156.243 69.7139 156.123 69.7151 156.054C69.7164 155.985 69.7876 155.808 69.8731 155.661C69.959 155.514 70.029 155.35 70.029 155.296C70.029 155.242 70.0979 155.109 70.1821 155C70.2663 154.891 70.3133 154.781 70.2858 154.756C70.2587 154.731 71.2926 154.71 72.5838 154.71C74.8449 154.71 74.9307 154.715 74.9307 154.848C74.9307 154.923 74.9571 154.996 74.9895 155.009C75.0858 155.049 75.3199 155.501 75.3199 155.648C75.3199 155.724 75.3548 155.786 75.3977 155.786C75.4406 155.786 75.4759 155.842 75.4763 155.911C75.4763 155.98 75.5463 156.133 75.6314 156.252C75.716 156.37 75.7861 156.519 75.7861 156.582C75.7865 156.645 75.8796 156.854 75.9935 157.048C76.1069 157.241 76.2494 157.488 76.3102 157.596L76.4207 157.793H77.3486C77.9156 157.793 78.2768 157.765 78.2768 157.722C78.2768 157.678 77.9391 157.65 77.4191 157.65H76.5617L76.332 157.202C76.2057 156.955 75.8598 156.254 75.5633 155.642L75.0243 154.531L72.6627 154.514C71.3639 154.504 70.2639 154.52 70.2186 154.549C70.1736 154.579 69.897 155.135 69.6046 155.786C69.3122 156.436 68.9987 157.114 68.908 157.291L68.7431 157.614L67.9465 157.634C67.5083 157.645 67.1499 157.638 67.1499 157.619C67.1499 157.561 67.7861 156.166 69.9432 151.494C71.0602 149.075 71.9742 147.068 71.9742 147.034C71.9742 146.883 71.745 147.072 71.7005 147.261C71.6729 147.376 71.6211 147.47 71.585 147.47C71.549 147.47 71.4951 147.572 71.4656 147.696C71.436 147.821 71.3279 148.068 71.2258 148.245C71.1237 148.421 71.0403 148.613 71.0403 148.67C71.0403 148.788 70.7977 149.214 70.7098 149.25C70.6774 149.263 70.6515 149.345 70.6515 149.431C70.6515 149.517 70.6037 149.652 70.545 149.73C70.4867 149.808 70.4138 149.952 70.383 150.05C70.3283 150.226 70.1108 150.675 69.7455 151.365C69.6447 151.556 69.562 151.768 69.562 151.835C69.562 151.903 69.5106 152.021 69.4478 152.098C69.3851 152.174 69.3324 152.302 69.3312 152.382C69.3296 152.461 69.2409 152.645 69.134 152.79C69.0271 152.935 68.9392 153.112 68.9392 153.183C68.9388 153.254 68.8691 153.409 68.784 153.527C68.699 153.646 68.6289 153.796 68.6289 153.861C68.6285 153.927 68.5406 154.145 68.4337 154.345C68.3268 154.546 68.1518 154.875 68.0449 155.076C67.9376 155.276 67.8501 155.486 67.8501 155.542C67.8501 155.597 67.7801 155.763 67.6946 155.91C67.6091 156.058 67.5383 156.227 67.5371 156.286C67.5362 156.346 67.467 156.476 67.3832 156.574C67.2997 156.673 67.2244 156.802 67.2163 156.861C67.2082 156.92 67.1811 156.781 67.1563 156.552L67.111 156.136L64.5631 156.142L62.0157 156.148L61.9954 151.585L61.9756 147.022L61.0619 147.013C60.5597 147.008 60.113 147.014 60.0701 147.027ZM72.5578 147.039L72.0131 147.086L72.5578 147.099L73.1026 147.112L75.456 152.004C76.7504 154.695 77.871 157.034 77.946 157.201C78.0209 157.368 78.1258 157.505 78.1796 157.506C78.323 157.507 78.2975 157.233 78.1335 157.016C77.9573 156.782 77.7321 156.362 77.7321 156.267C77.7321 156.229 77.6305 156 77.5061 155.759C77.3822 155.517 77.2538 155.255 77.2214 155.176C77.1886 155.098 77.1542 155.017 77.1449 154.997C77.1351 154.977 77.1019 154.889 77.0708 154.8C77.0392 154.711 76.9853 154.639 76.9509 154.639C76.9169 154.639 76.865 154.541 76.8367 154.421C76.8083 154.302 76.6836 154.02 76.5592 153.794C76.4349 153.569 76.3328 153.343 76.3324 153.293C76.3316 153.206 76.1802 152.92 76.0959 152.846C76.0412 152.799 75.8096 152.282 75.742 152.058C75.7124 151.959 75.6666 151.862 75.6403 151.843C75.5597 151.782 75.3199 151.271 75.3199 151.159C75.3199 151.101 75.2851 151.054 75.2422 151.054C75.1992 151.054 75.1644 151.013 75.1644 150.963C75.1644 150.913 75.0944 150.752 75.0089 150.605C74.923 150.458 74.853 150.273 74.853 150.194C74.853 150.115 74.8181 150.05 74.7752 150.05C74.7323 150.05 74.6975 149.988 74.6975 149.911C74.6975 149.835 74.6646 149.753 74.6245 149.73C74.5294 149.676 74.3083 149.267 74.3083 149.145C74.3083 149.093 74.209 148.88 74.0875 148.672C73.966 148.464 73.8409 148.199 73.8101 148.083C73.7789 147.967 73.6886 147.789 73.6096 147.686C73.5302 147.584 73.4343 147.389 73.3958 147.252C73.3176 146.974 73.3144 146.973 72.5578 147.039ZM79.3643 147.027C79.3157 147.043 79.2881 148.986 79.2881 152.418V157.784L80.1844 157.807C80.6777 157.819 81.1066 157.821 81.1378 157.811C81.1689 157.801 81.1847 156.067 81.1726 153.958C81.1604 151.848 81.1722 150.122 81.1985 150.122C81.2738 150.122 81.7781 150.619 81.7781 150.693C81.7781 150.729 81.9708 150.927 82.2062 151.132C82.4415 151.337 82.6342 151.547 82.6342 151.598C82.6342 151.65 82.8092 151.83 83.023 152C83.2369 152.17 83.4122 152.351 83.4122 152.403C83.4122 152.454 83.5698 152.628 83.7622 152.79C83.9549 152.952 84.1125 153.121 84.1125 153.168C84.1125 153.214 84.3049 153.422 84.5406 153.628C84.7759 153.836 84.9687 154.043 84.9691 154.089C84.9695 154.135 85.127 154.301 85.319 154.457C85.5114 154.614 85.6685 154.781 85.6685 154.83C85.6685 154.878 85.8613 155.085 86.0966 155.29C86.3319 155.495 86.5247 155.704 86.5247 155.753C86.5247 155.802 86.6842 155.967 86.8791 156.119C87.0739 156.271 87.2411 156.444 87.2504 156.504C87.2601 156.564 87.4331 156.754 87.6352 156.926C87.8377 157.097 88.0029 157.272 88.0029 157.314C88.0029 157.64 88.4059 157.793 89.2625 157.793H90.1037V152.421V147.048L89.2285 147.026C88.7469 147.013 88.3269 147.013 88.2949 147.025C88.2625 147.038 88.2362 148.792 88.2362 150.924C88.2362 154.361 88.2232 154.789 88.1196 154.71C88.0556 154.661 88.0029 154.591 88.0029 154.553C88.0029 154.516 87.819 154.313 87.5943 154.101C86.9681 153.511 86.4469 152.949 86.4469 152.864C86.4469 152.822 86.2667 152.639 86.0468 152.457C85.8269 152.275 85.6653 152.109 85.6871 152.088C85.7094 152.068 85.5219 151.871 85.27 151.649C85.0185 151.428 84.8127 151.209 84.8127 151.162C84.8127 151.116 84.6552 150.941 84.4624 150.775C84.27 150.609 84.1125 150.443 84.1125 150.406C84.1125 150.37 83.9197 150.172 83.6844 149.966C83.4491 149.76 83.2567 149.557 83.2567 149.514C83.2567 149.47 83.0992 149.292 82.9064 149.118C82.714 148.944 82.5561 148.768 82.5561 148.727C82.5561 148.686 82.3637 148.483 82.1284 148.277C81.8931 148.071 81.7003 147.871 81.7003 147.832C81.7003 147.794 81.5213 147.608 81.3026 147.419L80.9049 147.075L80.1727 147.039C79.7697 147.02 79.406 147.014 79.3643 147.027ZM104.499 152.39V157.829H108.002H111.506L111.484 156.98L111.463 156.132L108.992 156.141L106.522 156.149V154.677V153.205H108.817C110.293 153.205 111.113 153.179 111.116 153.133C111.117 153.094 111.119 152.755 111.119 152.38C111.119 152.006 111.117 151.669 111.116 151.632C111.114 151.591 110.248 151.569 108.914 151.576L106.716 151.588L108.775 151.609C110.3 151.625 110.848 151.653 110.894 151.718C110.999 151.872 110.97 152.988 110.859 153.002C110.806 153.008 110.027 153.021 109.128 153.031C108.229 153.04 107.222 153.051 106.89 153.055L106.285 153.062L106.306 154.656L106.327 156.252L108.798 156.271L111.268 156.289V156.97V157.65H108H104.732V152.416V147.183H108C110.127 147.183 111.268 147.158 111.268 147.111C111.268 147.064 110.145 147.039 108.059 147.039C106.293 147.038 104.77 147.018 104.674 146.994L104.499 146.951V152.39ZM38.9048 147.111C38.7804 147.148 39.0238 147.171 39.5791 147.175L40.4478 147.183L40.8629 147.665C41.0914 147.931 41.3246 148.197 41.3813 148.257C41.438 148.317 41.6575 148.57 41.8694 148.82C42.0808 149.07 42.297 149.317 42.3497 149.368C42.4023 149.419 42.5854 149.63 42.7567 149.837C42.9276 150.044 43.246 150.41 43.4638 150.651C43.6817 150.893 43.9017 151.163 43.9527 151.251C44.0819 151.475 44.2325 151.453 44.4415 151.179C44.5395 151.051 44.6849 150.882 44.7643 150.803C44.8437 150.724 45.0964 150.434 45.326 150.158C45.7691 149.625 46.9221 148.295 47.0975 148.115C47.155 148.056 47.3571 147.822 47.5462 147.595L47.8901 147.183L48.7471 147.178C49.2983 147.174 49.5482 147.151 49.4481 147.111C49.2707 147.041 48.2096 147.021 47.9581 147.083C47.8176 147.117 47.4867 147.453 46.8415 148.214C46.7776 148.29 46.6176 148.468 46.4864 148.61C46.2725 148.84 45.9882 149.171 45.2467 150.05C45.0166 150.323 44.2718 151.203 44.2196 151.265C44.1888 151.3 44.056 151.157 43.2257 150.194C42.9029 149.819 42.4287 149.271 42.1719 148.975C41.9151 148.679 41.4567 148.147 41.1533 147.792C40.85 147.437 40.5264 147.126 40.4344 147.1C40.1983 147.035 39.1384 147.042 38.9048 147.111ZM61.7812 151.735V156.288H64.3489H66.9166V156.969V157.65H63.5705H60.2248V152.416V147.183H61.0028H61.7812V151.735ZM81.8558 148.307C82.4338 148.923 83.622 150.189 84.4964 151.119C85.3712 152.05 86.6024 153.364 87.233 154.041C87.8632 154.718 88.3994 155.253 88.4245 155.23C88.4492 155.207 88.4699 153.387 88.4699 151.185V147.183H89.209H89.9481V152.416V157.65H89.2572C88.6675 157.65 88.5509 157.63 88.4598 157.513C88.401 157.438 87.828 156.819 87.186 156.137C86.5441 155.455 85.7738 154.636 85.4741 154.317C85.1744 153.997 84.0542 152.804 82.9842 151.664L81.0389 149.592L81.0187 153.621L80.9988 157.65H80.2601H79.5218V152.416V147.183L80.1637 147.184L80.8057 147.185L81.8558 148.307ZM97.3791 148.38C95.5076 148.608 93.8811 150.167 93.7057 151.9C93.6673 152.28 93.6786 152.358 93.7681 152.331C93.8414 152.308 93.8965 152.123 93.935 151.774C93.9665 151.486 94.0237 151.214 94.0621 151.17C94.1006 151.126 94.1569 150.983 94.1873 150.852C94.2177 150.721 94.2918 150.597 94.3517 150.576C94.412 150.554 94.4611 150.479 94.4611 150.409C94.4611 150.338 94.5145 150.262 94.5797 150.239C94.6449 150.216 94.7239 150.136 94.7547 150.061C94.8409 149.855 95.3796 149.333 95.5072 149.333C95.5687 149.333 95.6651 149.277 95.721 149.208C95.996 148.868 97.2969 148.473 98.1441 148.473C98.4244 148.473 98.6755 148.441 98.7018 148.402C98.7492 148.331 97.8926 148.317 97.3791 148.38ZM98.8184 148.462C98.8184 148.495 99.0197 148.563 99.266 148.613C99.9419 148.75 101.027 149.094 101.546 149.335C101.888 149.495 102.009 149.524 102.009 149.449C102.009 149.347 101.305 149.01 100.569 148.758C99.735 148.473 98.8184 148.318 98.8184 148.462ZM53.5204 148.544C53.4552 148.722 53.5447 151.701 53.614 151.662C53.7108 151.607 53.714 148.568 53.6176 148.513C53.5783 148.49 53.5346 148.504 53.5204 148.544ZM106.326 148.559C106.231 148.786 106.326 151.663 106.428 151.663C106.557 151.663 106.577 148.526 106.447 148.486C106.402 148.473 106.348 148.505 106.326 148.559ZM135.284 148.76C135.304 148.879 135.371 149.064 135.432 149.172C135.494 149.281 135.544 149.454 135.544 149.558C135.545 149.662 135.597 149.84 135.661 149.953C135.725 150.066 135.778 150.245 135.778 150.351C135.778 150.457 135.81 150.562 135.849 150.584C135.888 150.607 135.945 150.762 135.976 150.929C136.006 151.096 136.096 151.319 136.177 151.423C136.257 151.528 136.323 151.654 136.323 151.702C136.323 151.795 137.024 153.143 137.105 153.205C137.13 153.225 137.175 153.289 137.204 153.348C137.263 153.471 137.432 153.725 137.49 153.778C137.603 153.883 137.879 154.284 137.879 154.344C137.879 154.383 137.984 154.483 138.112 154.567C138.241 154.651 138.346 154.765 138.346 154.821C138.346 154.942 139.504 156.001 139.636 156.001C139.687 156.001 139.786 156.082 139.856 156.18C139.926 156.279 140.019 156.359 140.063 156.359C140.13 156.359 140.564 156.611 140.68 156.718C140.774 156.804 142.375 157.5 142.586 157.547C142.715 157.575 142.862 157.628 142.913 157.665C142.965 157.703 143.105 157.726 143.225 157.717C143.345 157.708 143.543 157.738 143.665 157.784C143.788 157.83 143.928 157.862 143.976 157.855C144.025 157.848 144.131 157.869 144.213 157.901C144.452 157.996 145.058 157.984 145.095 157.883C145.117 157.824 145.048 157.793 144.897 157.793C144.769 157.793 144.304 157.726 143.862 157.645C139.881 156.909 137.138 154.173 135.728 149.53C135.461 148.653 135.183 148.17 135.284 148.76ZM71.6486 151.32C71.1914 152.334 70.8317 153.184 70.8491 153.21C70.8917 153.273 73.6817 153.297 74.0312 153.237C74.3585 153.18 74.3666 153.129 74.1256 152.663C74.0247 152.468 73.6343 151.672 73.2573 150.893C72.8806 150.114 72.5518 149.477 72.5262 149.477C72.5007 149.478 72.1059 150.307 71.6486 151.32ZM40.4612 153.635C40.4612 156.311 40.4879 157.722 40.5389 157.722C40.6029 157.722 40.6815 150.167 40.6203 149.871C40.6021 149.781 40.6629 149.843 41.0095 150.266C41.1549 150.443 41.2947 150.604 41.3198 150.624C41.3445 150.644 41.6555 150.998 42.0107 151.413C42.3659 151.826 42.7664 152.29 42.9009 152.443C43.0354 152.595 43.1735 152.765 43.2079 152.819C43.2767 152.929 43.4181 152.953 43.4181 152.855C43.4181 152.821 43.3043 152.676 43.165 152.533C43.026 152.39 42.7223 152.047 42.4902 151.771C42.2582 151.495 42.0391 151.269 42.0038 151.269C41.9686 151.269 41.9394 151.233 41.9394 151.188C41.9394 151.144 41.8256 150.988 41.6867 150.842C41.5474 150.697 41.2412 150.346 41.0059 150.064C40.7706 149.781 40.5515 149.549 40.5195 149.549C40.4875 149.549 40.4612 151.387 40.4612 153.635ZM47.4215 149.922C46.7893 150.689 44.5699 153.255 44.3868 153.43C44.2196 153.591 44.007 153.523 43.7672 153.233C43.5262 152.942 43.3557 152.906 43.5517 153.187C43.932 153.733 44.2394 153.824 44.5237 153.474C44.6217 153.353 44.776 153.181 44.8672 153.092C44.9583 153.003 45.1146 152.822 45.2147 152.691C45.3151 152.559 45.433 152.417 45.4775 152.374C45.5942 152.261 46.0356 151.757 46.4046 151.315C47.151 150.422 47.7147 149.801 47.7629 149.82C47.7913 149.832 47.8253 149.775 47.8391 149.695C47.88 149.455 47.7475 149.527 47.4215 149.922ZM72.7502 150.266C72.7514 150.325 72.8575 150.567 72.9855 150.803C73.1139 151.04 73.2188 151.269 73.2188 151.312C73.2192 151.403 73.5853 152.059 73.6922 152.162C73.7315 152.199 73.7639 152.297 73.7639 152.379C73.7639 152.461 73.8105 152.591 73.8676 152.669C74.1641 153.073 74.2009 153.062 72.5983 153.062H71.1262L71.2108 152.828C71.257 152.7 71.3254 152.565 71.3623 152.527C71.3991 152.49 71.4295 152.409 71.4295 152.347C71.4295 152.285 71.4996 152.115 71.585 151.967C71.6705 151.82 71.7405 151.648 71.7405 151.585C71.7405 151.522 71.8066 151.385 71.8868 151.28C71.9669 151.176 72.0573 150.985 72.0872 150.857C72.1176 150.729 72.1727 150.624 72.2104 150.624C72.2476 150.624 72.3019 150.503 72.331 150.355C72.4205 149.897 72.7389 149.829 72.7502 150.266ZM47.7726 150.104C47.7358 151.88 47.7528 157.721 47.7949 157.721C47.8269 157.721 47.8532 155.979 47.8532 153.85C47.8532 151.721 47.8354 149.979 47.8144 149.979C47.7929 149.979 47.7743 150.035 47.7726 150.104ZM21.8988 151.523C22.0661 151.639 22.2086 151.663 22.1426 151.565C22.1195 151.53 22.0211 151.483 21.9243 151.46C21.7542 151.421 21.7534 151.423 21.8988 151.523ZM22.2536 151.632C22.2536 151.691 22.5027 151.843 22.5987 151.843C22.7133 151.843 22.6209 151.726 22.4476 151.652C22.3411 151.607 22.2536 151.597 22.2536 151.632ZM54.7978 151.61C55.3862 151.622 56.3489 151.622 56.9374 151.61C57.5259 151.597 57.0443 151.587 55.8674 151.587C54.6904 151.587 54.2093 151.597 54.7978 151.61ZM58.124 152.297V153.05L55.8285 153.038C54.5661 153.031 53.5245 153.05 53.5139 153.079C53.503 153.108 53.5042 153.842 53.5168 154.71L53.539 156.288L55.8897 156.289C57.1828 156.289 58.3197 156.309 58.4156 156.333C58.5444 156.364 58.591 156.345 58.591 156.26C58.591 156.156 58.3452 156.144 56.1399 156.144H53.6889V154.674V153.205H56.0257H58.3626L58.3403 152.404C58.3099 151.293 58.124 151.201 58.124 152.297ZM98.3859 152.366C98.3636 152.419 98.3559 152.798 98.3681 153.21L98.3904 153.958L99.5017 153.977L100.613 153.997L100.591 154.943L100.569 155.889L99.9857 156.047C99.6645 156.134 99.2591 156.208 99.0845 156.211C98.9096 156.214 98.7431 156.238 98.7144 156.264C98.6852 156.291 98.4519 156.305 98.1956 156.295C97.7995 156.28 97.729 156.296 97.729 156.4C97.729 156.628 100.416 156.275 100.707 156.009C100.741 155.979 100.758 155.473 100.747 154.884L100.725 153.814L99.6548 153.794L98.5852 153.774V153.131V152.488H100.537C102.064 152.488 102.482 152.468 102.456 152.398C102.407 152.263 98.4418 152.231 98.3859 152.366ZM93.683 152.699C93.683 154.471 95.6704 156.431 97.4674 156.431C97.742 156.431 97.6606 156.257 97.373 156.23C96.8939 156.185 95.8741 155.824 95.7607 155.66C95.7263 155.611 95.6554 155.571 95.6027 155.571C95.4991 155.571 94.617 154.779 94.617 154.686C94.617 154.655 94.5295 154.524 94.423 154.395C94.3165 154.266 94.2059 154.05 94.1771 153.916C94.1488 153.781 94.097 153.653 94.0625 153.632C94.0277 153.611 93.9787 153.401 93.9532 153.166C93.8685 152.39 93.683 152.069 93.683 152.699ZM132.996 152.543C132.035 152.555 131.421 152.59 131.421 152.633C131.421 152.676 132.01 152.703 132.967 152.703H134.514L134.89 153.505C135.648 155.12 137.563 157.435 138.142 157.435C138.387 157.435 137.956 156.945 137.545 156.757C137.451 156.713 137.331 156.596 137.278 156.495C137.226 156.395 137.007 156.163 136.792 155.981C136.577 155.798 136.401 155.599 136.401 155.538C136.401 155.477 136.368 155.427 136.327 155.427C136.257 155.427 136.112 155.22 135.94 154.872C135.896 154.783 135.831 154.71 135.795 154.71C135.759 154.71 135.681 154.598 135.622 154.459C135.564 154.321 135.487 154.208 135.452 154.208C135.417 154.208 135.389 154.168 135.389 154.118C135.389 154.068 135.319 153.907 135.234 153.76C135.148 153.612 135.078 153.449 135.078 153.395C135.078 153.341 134.993 153.151 134.889 152.971C134.786 152.791 134.717 152.629 134.737 152.611C134.817 152.537 134.505 152.525 132.996 152.543ZM58.4351 156.98C58.4351 157.283 58.4561 157.511 58.4817 157.487C58.5505 157.424 58.5618 156.431 58.4934 156.431C58.4614 156.431 58.4351 156.678 58.4351 156.98ZM101.775 157.12C101.118 157.354 99.8662 157.648 99.5187 157.65C99.1578 157.653 98.9711 157.757 99.2206 157.817C99.4365 157.869 99.9857 157.798 99.9857 157.719C99.9857 157.688 100.057 157.68 100.144 157.701C100.28 157.734 101.04 157.584 101.386 157.455C101.451 157.431 101.711 157.342 101.965 157.257C102.219 157.172 102.441 157.064 102.458 157.017C102.503 156.894 102.343 156.918 101.775 157.12ZM116.715 157.614C116.715 157.709 117.964 157.722 127.491 157.722C137.019 157.722 138.268 157.709 138.268 157.614C138.268 157.519 137.019 157.506 127.491 157.506C117.964 157.506 116.715 157.519 116.715 157.614ZM97.3596 157.811C97.3827 157.875 97.6144 157.901 98.1571 157.901C98.7002 157.901 98.9318 157.875 98.9545 157.811C98.9792 157.743 98.7865 157.722 98.1571 157.722C97.5277 157.722 97.3349 157.743 97.3596 157.811ZM145.193 157.937C145.193 157.978 145.438 158.008 145.772 158.008C146.09 158.008 146.373 157.976 146.399 157.937C146.43 157.891 146.218 157.865 145.82 157.865C145.454 157.865 145.193 157.895 145.193 157.937Z\" fill=\"url(#paint1_linear)\" />\r\n        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M109.868 19.3074C109.868 19.3197 109.981 19.4246 110.12 19.5406L110.373 19.7511L110.145 19.5179C109.932 19.3007 109.868 19.2522 109.868 19.3074ZM113.466 25.7701C113.501 26.6895 113.603 26.7272 113.603 25.8208C113.603 25.3622 113.572 25.092 113.521 25.092C113.469 25.092 113.449 25.3312 113.466 25.7701ZM45.6164 67.1391C45.6173 67.2969 45.6331 67.3529 45.6517 67.2637C45.6703 67.1745 45.6695 67.0454 45.6501 66.9771C45.6306 66.9085 45.6152 66.9812 45.6164 67.1391ZM45.6217 72.8386C45.6217 73.095 45.6355 73.1999 45.6529 73.0715C45.6703 72.9435 45.6703 72.7338 45.6529 72.6058C45.6355 72.4774 45.6217 72.5823 45.6217 72.8386ZM53.7889 80.1872C53.7893 80.3842 53.8047 80.4562 53.8226 80.3473C53.8404 80.2383 53.84 80.0771 53.8213 79.989C53.8031 79.9006 53.7881 79.9898 53.7889 80.1872ZM54.4086 87.8581C54.4098 88.0156 54.4256 88.0719 54.4442 87.9827C54.4629 87.8936 54.462 87.7645 54.4426 87.6958C54.4232 87.6271 54.4078 87.7003 54.4086 87.8581ZM54.4868 89.2918C54.4876 89.4496 54.5034 89.5056 54.522 89.4164C54.5406 89.3272 54.5398 89.1981 54.5204 89.1298C54.5009 89.0612 54.4855 89.1339 54.4868 89.2918ZM50.421 132.182C50.421 132.217 50.2197 132.281 49.9734 132.323C46.3827 132.946 45.0543 137.205 47.686 139.655C49.8548 141.674 53.4277 141.114 54.7747 138.544C56.1136 135.989 54.5418 132.81 51.7048 132.335C51.448 132.292 51.2119 132.22 51.1807 132.174C51.1378 132.112 51.1232 132.112 51.1224 132.174C51.1212 132.259 50.6542 132.252 50.5012 132.165C50.457 132.14 50.421 132.147 50.421 132.182ZM68.2713 132.189C68.294 132.223 68.0773 132.286 67.7898 132.33C63.7232 132.951 62.8739 138.607 66.5792 140.389C69.3361 141.714 73.0633 139.897 73.0633 137.228C73.0633 137.069 73.1151 136.893 73.1803 136.834C73.2443 136.775 73.297 136.641 73.297 136.536C73.297 136.432 73.2443 136.299 73.1803 136.239C73.1159 136.18 73.0633 136.034 73.0633 135.914C73.0633 134.371 71.3627 132.641 69.5426 132.335C69.2539 132.286 69.0173 132.218 69.0173 132.183C69.0173 132.148 68.9752 132.143 68.9242 132.172C68.7958 132.245 68.4698 132.253 68.4236 132.184C68.4026 132.153 68.3507 132.128 68.3078 132.128C68.2653 132.128 68.2487 132.155 68.2713 132.189ZM41.8617 132.302C36.4549 133.351 37.2005 140.874 42.7114 140.874C44.1536 140.874 45.241 140.426 45.3115 139.802C45.4702 138.402 45.4715 137.962 45.3163 138.129C44.073 139.469 41.3858 139.314 40.5754 137.855C39.0818 135.166 42.472 132.697 44.8469 134.744C45.0122 134.886 45.156 134.993 45.1665 134.981C45.2649 134.87 45.3621 132.959 45.2726 132.901C44.4658 132.38 42.8863 132.103 41.8617 132.302ZM74.659 132.43C74.6339 132.559 74.6234 134.456 74.6359 136.644L74.6586 140.623L75.3588 140.645C76.119 140.669 76.8484 140.6 76.6277 140.524C76.4491 140.464 76.4531 136.823 76.6322 136.722C76.7095 136.678 76.7132 136.654 76.6447 136.633C76.5925 136.617 76.5629 136.516 76.5775 136.404L76.6038 136.204L76.7982 136.368C76.9055 136.458 78.0509 137.447 79.344 138.565C80.6368 139.683 81.7838 140.663 81.8923 140.741C82.0008 140.82 82.0928 140.939 82.0972 141.005C82.1021 141.078 82.1292 141.055 82.1673 140.946C82.2293 140.767 82.2738 132.608 82.2131 132.552C82.1952 132.535 81.7752 132.532 81.2791 132.544L80.3776 132.566V134.749C80.3776 136.2 80.3509 136.931 80.2974 136.931C80.2533 136.931 79.0188 135.889 77.5547 134.616C74.4869 131.949 74.7193 132.124 74.659 132.43ZM87.3351 132.422C87.2517 132.556 86.6664 133.633 86.0346 134.816C85.4032 135.999 84.4551 137.773 83.9274 138.759C82.8125 140.842 82.7934 140.675 84.1437 140.643L85.0039 140.623L85.2781 140.039C85.6086 139.333 85.5195 139.36 87.5194 139.372C89.1908 139.382 89.1616 139.372 89.4403 139.989C89.5626 140.259 89.6958 140.52 89.7371 140.569C89.8129 140.66 91.7391 140.706 91.833 140.619C91.8569 140.597 91.3162 139.508 90.631 138.199C89.9461 136.891 89.2354 135.529 89.0515 135.174C88.8676 134.82 88.4407 134 88.1022 133.354L87.487 132.178L87.3351 132.422ZM98.3904 132.296C96.7226 132.694 96.1175 134.384 97.1802 135.679C97.4779 136.041 97.4897 136.001 96.9895 136.319C95.4152 137.318 95.1901 139.129 96.5083 140.193C97.4921 140.986 99.2364 141.113 100.707 140.498L101.235 140.277L101.456 140.473C101.668 140.659 103.798 140.769 103.798 140.593C103.798 140.568 103.553 140.275 103.254 139.942C102.632 139.25 102.643 139.282 102.908 138.991C103.34 138.519 103.897 137.242 103.698 137.182C103.442 137.106 102.417 136.859 102.353 136.859C102.312 136.859 102.216 137.022 102.139 137.22C101.975 137.647 101.701 138.093 101.622 138.063C101.522 138.026 100.066 136.396 100.067 136.322C100.067 136.282 100.211 136.153 100.387 136.035C102.624 134.528 101.089 131.652 98.3904 132.296ZM144.726 132.386C142.326 132.584 140.06 133.608 138.544 135.178C137.883 135.862 137.881 135.869 138.158 136.546C139.608 140.092 138.907 144.209 136.317 147.361C135.562 148.28 135.417 148.426 135.32 148.371C135.271 148.342 135.234 148.37 135.234 148.433C135.234 148.495 135.28 148.545 135.336 148.545C135.401 148.545 135.547 148.902 135.738 149.53C137.057 153.875 139.626 156.622 143.196 157.503C149.309 159.013 154.661 155.449 156.111 148.903C156.635 146.539 156.573 142.893 155.968 140.587C154.484 134.919 150.373 131.92 144.726 132.386ZM56.82 136.585L56.8402 140.623H57.7737H58.7077L58.7283 139.036C58.7579 136.801 58.668 136.793 60.4184 139.189C60.9659 139.938 61.4528 140.575 61.5001 140.604C61.6014 140.666 63.5037 140.678 63.6734 140.618C63.7592 140.588 63.4607 140.152 62.5126 138.922C61.0737 137.056 61.1186 137.151 61.5759 136.904C63.2898 135.979 63.1696 133.73 61.3604 132.88L60.7505 132.593L58.7753 132.57L56.8001 132.547L56.82 136.585ZM99.6042 133.541C100.136 133.831 100.012 134.539 99.3506 134.987L99.0222 135.21L98.8351 135.049C97.8967 134.242 98.5479 132.966 99.6042 133.541ZM59.3751 134.009C59.3792 134.066 59.3941 134.07 59.4164 134.021C59.5205 133.789 60.58 134.167 60.7776 134.507C61.26 135.338 60.5196 136.213 59.3127 136.239L58.7854 136.25L58.764 135.177C58.7518 134.588 58.7595 134.064 58.781 134.012C58.8312 133.892 59.367 133.889 59.3751 134.009ZM51.414 134.114C53.1446 134.617 53.727 136.935 52.4763 138.341C51.6044 139.321 50.1253 139.344 49.1796 138.391C47.3912 136.588 49.0427 133.426 51.414 134.114ZM69.6135 134.245C71.5174 135.103 71.4599 138.069 69.5232 138.911C68.4139 139.393 66.9952 138.806 66.5262 137.671C65.6226 135.485 67.5699 133.324 69.6135 134.245ZM87.7296 136.232C87.8912 136.597 88.1374 137.143 88.2771 137.446C88.4173 137.749 88.5116 138.015 88.4877 138.038C88.4185 138.101 86.2132 138.085 86.2132 138.02C86.2132 137.988 86.4348 137.481 86.7049 136.891C86.9755 136.302 87.2197 135.763 87.2472 135.694C87.3412 135.461 87.4351 135.566 87.7296 136.232ZM52.9287 136.572C52.9287 136.71 52.9449 136.767 52.9644 136.698C52.9838 136.629 52.9838 136.516 52.9644 136.447C52.9449 136.378 52.9287 136.434 52.9287 136.572ZM146.638 136.937C149.682 137.453 151.473 141.269 151.119 146.485C150.81 151.046 149.119 153.277 145.971 153.277C142.627 153.277 140.57 150.11 140.569 144.96C140.569 139.559 143.016 136.324 146.638 136.937ZM99.3194 138.094C100.238 139.144 100.237 139.14 99.6353 139.315C97.9347 139.81 96.7104 138.251 98.1146 137.379C98.4924 137.144 98.4831 137.139 99.3194 138.094ZM97.9441 146.875C98.0409 146.892 98.181 146.892 98.2555 146.874C98.3296 146.856 98.2506 146.842 98.0793 146.842C97.908 146.843 97.8473 146.858 97.9441 146.875ZM72.3837 147.019C72.502 147.036 72.6769 147.035 72.7729 147.018C72.8685 147.001 72.7717 146.988 72.5579 146.988C72.3436 146.989 72.2654 147.003 72.3837 147.019ZM96.8344 147.148C93.8989 147.649 92.0914 149.687 92.0979 152.488C92.1072 156.768 96.6618 158.927 101.814 157.095C102.114 156.989 102.385 156.909 102.417 156.917C102.449 156.926 102.476 155.933 102.476 154.71V152.488H100.53H98.5852V153.131V153.774L99.6548 153.794L100.725 153.814L100.746 154.909L100.768 156.003L100.569 156.073C97.5059 157.145 94.508 156.011 93.8054 153.511C93.6571 152.985 93.645 152.442 93.7803 152.392C93.858 152.363 93.858 152.355 93.7803 152.35C93.5543 152.337 93.7539 151.198 94.0889 150.594C94.6275 149.621 95.5331 148.887 96.6331 148.532C97.1122 148.378 98.8804 148.251 98.7958 148.377C98.7682 148.418 98.8359 148.436 98.9602 148.418C99.5146 148.344 101.875 149.129 102.012 149.433C102.054 149.529 102.073 149.267 102.064 148.729L102.048 147.874L101.064 147.562C99.4539 147.052 98.1478 146.924 96.8344 147.148ZM71.9743 147.218C71.9111 147.289 71.3339 148.506 70.4616 150.409C70.2178 150.941 69.9711 151.473 69.914 151.592C69.8565 151.71 69.4527 152.581 69.0165 153.527C68.5799 154.474 67.9846 155.764 67.693 156.394C67.4014 157.024 67.1799 157.564 67.2001 157.595C67.2649 157.691 68.6901 157.66 68.7586 157.56C68.7926 157.511 69.1235 156.809 69.4936 156.001L70.1671 154.531H72.5996H75.032L75.7829 156.073L76.5341 157.614L77.2356 157.634C77.7909 157.65 78.6624 157.536 78.1991 157.508C78.1217 157.504 77.2413 155.754 75.5921 152.329L73.1026 147.157L72.5704 147.152C72.278 147.149 72.0099 147.179 71.9743 147.218ZM38.7493 152.452V157.722H39.6054H40.4612V153.635C40.4612 151.387 40.4904 149.548 40.5256 149.548C40.5612 149.548 40.7974 149.795 41.0509 150.095C41.3044 150.396 41.5494 150.679 41.596 150.723C41.6422 150.768 41.8876 151.049 42.1407 151.347C44.2411 153.821 44.1139 153.742 44.7821 152.974C45.03 152.69 45.2629 152.424 45.2997 152.383C45.3366 152.342 45.5322 152.113 45.7347 151.873C46.857 150.543 47.7374 149.548 47.7917 149.548C47.8253 149.548 47.8533 151.387 47.8533 153.635V157.722H48.6313H49.4093V152.45V147.178L48.6527 147.198L47.8962 147.218L47.3988 147.792C47.1255 148.108 46.7869 148.495 46.6464 148.652C46.5058 148.81 45.9931 149.405 45.5075 149.974C45.0215 150.543 44.5189 151.118 44.3905 151.251L44.1572 151.493L43.5347 150.763C43.1921 150.361 42.8742 149.995 42.8276 149.951C42.7814 149.906 42.5364 149.624 42.2833 149.324C42.0302 149.025 41.5077 148.42 41.1226 147.982L40.4223 147.183L39.586 147.183L38.7493 147.183V152.452ZM51.9348 147.273C51.9146 147.322 51.9069 149.669 51.9178 152.488L51.9381 157.614H55.1672H58.3962L58.4189 156.988L58.4412 156.361L55.9788 156.342L53.516 156.323L53.5131 154.674L53.5099 153.025L55.8168 153.007L58.1241 152.988V152.272C58.1241 151.842 58.0929 151.556 58.0463 151.556C58.0034 151.556 57.977 151.596 57.988 151.646C58.0167 151.779 53.8331 151.776 53.7845 151.642C53.7598 151.573 53.7229 151.582 53.6444 151.678C53.5792 151.757 53.5358 151.772 53.5318 151.717C53.5253 151.622 53.5229 148.677 53.5293 148.53C53.5326 148.464 53.554 148.464 53.6265 148.53C53.695 148.593 54.3284 148.617 55.9901 148.617H58.2605L58.2739 147.9L58.2873 147.183H55.1299C52.6752 147.183 51.964 147.203 51.9348 147.273ZM60.2438 152.398L60.2637 157.614L63.5899 157.632L66.9166 157.651V156.969V156.288H64.3489H61.7812V151.735V147.183H61.0024H60.224L60.2438 152.398ZM79.5218 152.419V157.655L80.2415 157.635L80.9612 157.614L80.9814 153.617C80.9924 151.419 81.0272 149.623 81.0592 149.625C81.0908 149.628 81.642 150.197 82.2839 150.889C83.7367 152.457 87.5412 156.514 88.1718 157.169L88.6408 157.655L89.275 157.635L89.9093 157.614L89.9291 152.398L89.9494 147.183H89.2094H88.4699V151.233C88.4699 153.461 88.4436 155.282 88.4116 155.28C88.3792 155.278 88.2131 155.118 88.0418 154.926C87.8705 154.733 86.1723 152.912 84.268 150.881L80.8057 147.187L80.1638 147.185L79.5218 147.183V152.419ZM104.732 152.416V157.65H108H111.268V157.004C111.268 156.438 111.252 156.359 111.132 156.358C111.057 156.357 109.98 156.356 108.739 156.356C107.498 156.355 106.439 156.329 106.384 156.298C106.308 156.254 106.29 155.873 106.306 154.634L106.327 153.025L108.647 153.007L110.967 152.988L110.948 152.264C110.932 151.678 110.911 151.563 110.834 151.659C110.722 151.8 106.569 151.824 106.385 151.684C106.217 151.556 106.249 148.554 106.42 148.494C106.493 148.468 106.565 148.485 106.582 148.532C106.605 148.595 107.176 148.613 108.804 148.6L110.996 148.584L108.817 148.545L106.639 148.506L108.856 148.478C110.076 148.463 111.118 148.452 111.171 148.454C111.241 148.457 111.268 148.284 111.268 147.82V147.183H108H104.732V152.416ZM57.1367 148.527C56.5721 148.539 55.6268 148.539 55.0355 148.527C54.4446 148.515 54.9067 148.505 56.0622 148.505C57.2177 148.505 57.7012 148.514 57.1367 148.527ZM73.0694 150.482C73.3241 151.013 73.5659 151.513 73.6072 151.592C73.9754 152.297 74.3686 153.173 74.3374 153.219C74.286 153.296 70.9051 153.293 70.8532 153.216C70.8309 153.183 71.1116 152.497 71.4765 151.693C71.8418 150.888 72.2112 150.058 72.2978 149.85C72.5076 149.343 72.5336 149.364 73.0694 150.482ZM40.6532 153.814C40.6532 155.943 40.6629 156.804 40.675 155.727C40.6872 154.65 40.6872 152.908 40.675 151.856C40.6629 150.804 40.6532 151.685 40.6532 153.814ZM111.14 152.38C111.14 152.735 111.153 152.89 111.169 152.723C111.186 152.557 111.186 152.266 111.17 152.078C111.154 151.89 111.14 152.025 111.14 152.38ZM63.24 156.126C63.9354 156.138 65.0735 156.138 65.7688 156.126C66.4642 156.114 65.8952 156.105 64.5044 156.105C63.1137 156.105 62.5446 156.114 63.24 156.126Z\" fill=\"url(#paint2_linear)\" />\r\n        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M64.8544 22.1325C56.4276 22.3467 47.469 25.2447 41.1226 29.8091C37.8267 32.1794 34.0108 35.9337 31.5986 39.1794C31.452 39.3768 31.3074 39.554 31.2771 39.5738C31.2463 39.5936 31.1471 39.7227 31.0563 39.8604C30.9656 39.9984 30.8911 40.0816 30.8911 40.0451C30.8907 40.0089 30.6513 40.2738 30.3585 40.6339L29.8264 41.2884L29.8223 41.0224C29.8191 40.7959 29.8272 40.7832 29.8766 40.9358L29.9345 41.1153L29.9928 40.9186C30.0252 40.8104 30.0827 40.7395 30.1208 40.7615C30.1589 40.7832 30.1896 40.7265 30.1892 40.6354C30.188 40.5022 30.173 40.491 30.1127 40.5776C30.0523 40.6634 30.0349 40.6488 30.0268 40.5056C30.0021 40.0604 29.9535 39.9107 29.7936 39.7828C29.6992 39.707 29.6623 39.6454 29.7117 39.6454C29.7607 39.6454 29.8012 39.5648 29.8012 39.4663C29.8012 39.3678 29.8324 39.2868 29.8705 39.2868C29.909 39.2868 29.9641 39.1984 29.9936 39.0906C30.0228 38.9823 30.0706 38.8775 30.0993 38.8577C30.1281 38.8376 30.2362 38.6596 30.3399 38.4625C30.4432 38.2655 30.5533 38.0879 30.5841 38.0681C30.6149 38.0483 30.5914 37.9909 30.5319 37.9401C30.4416 37.8625 30.4237 37.8804 30.4225 38.0476C30.4217 38.1898 30.4019 38.2189 30.3533 38.1483C30.2775 38.0383 30.1418 38.3051 30.1803 38.4875C30.1917 38.5409 30.1666 38.5648 30.1244 38.5409C30.0827 38.5174 30.0572 38.5532 30.0681 38.6208C30.09 38.7577 29.9507 38.9316 29.8596 38.8808C29.7996 38.8476 29.7717 38.9611 29.7972 39.1327C29.8053 39.1861 29.7749 39.2085 29.7296 39.1827C29.6797 39.1544 29.6656 39.1797 29.6935 39.2469C29.7207 39.3118 29.6883 39.3756 29.6154 39.4014C29.5469 39.4256 29.5105 39.4742 29.5339 39.5096C29.5578 39.5447 29.5437 39.5738 29.5028 39.5738C29.4623 39.5738 29.408 39.6238 29.3825 39.685C29.3521 39.7581 29.3691 39.7809 29.4327 39.7514C29.4858 39.7268 29.4732 39.7492 29.4056 39.8014C29.3375 39.8537 29.2982 39.9413 29.3181 39.9958C29.3404 40.0563 29.3201 40.0761 29.2666 40.0455C29.1881 40.0007 29.1439 40.088 29.1694 40.2369C29.1747 40.2664 29.1447 40.2906 29.1034 40.2906C29.0621 40.2906 29.0504 40.3443 29.0779 40.41C29.1111 40.4903 29.0978 40.5123 29.0366 40.4776C28.9548 40.4309 28.9102 40.5156 28.9362 40.6671C28.9414 40.6966 28.9082 40.7209 28.8629 40.7209C28.8175 40.7209 28.8053 40.7578 28.8361 40.8033C28.8665 40.8489 28.8394 40.9212 28.7754 40.9645C28.6178 41.0716 28.4785 41.325 28.4785 41.5049C28.4785 41.5862 28.4469 41.6526 28.4084 41.6526C28.3157 41.6526 28.165 42.0556 28.2319 42.1243C28.2606 42.1534 28.2404 42.1545 28.1869 42.1262C28.0998 42.0799 28.0488 42.2045 28.0804 42.3877C28.0853 42.4172 28.0525 42.4415 28.0071 42.4415C27.9617 42.4415 27.9463 42.4736 27.9727 42.5131C27.9994 42.5527 27.9885 42.5848 27.9492 42.5848C27.9095 42.5848 27.8176 42.7381 27.7447 42.9255C27.6722 43.1128 27.5656 43.3464 27.5085 43.4453C27.451 43.5438 27.3919 43.6889 27.3773 43.7677C27.3623 43.8464 27.3287 43.9274 27.3024 43.9468C27.0967 44.1009 25.4463 48.5448 24.9331 50.3273C24.8193 50.7225 24.723 50.9292 24.6598 50.9147C24.5844 50.8979 24.5824 50.9162 24.6521 50.9931C24.7015 51.0483 24.725 51.1091 24.7043 51.1285C24.6833 51.1479 24.6351 51.3061 24.597 51.4804C24.5593 51.6547 24.4731 51.9745 24.4054 52.1916C23.9903 53.5275 23.8072 54.2287 23.5055 55.6325C23.2058 57.0292 23.1094 57.5374 23.1094 57.7236C23.1098 57.9744 23.0333 58.1509 22.9458 58.1013C22.9077 58.0796 22.8762 58.0957 22.8762 58.1375C22.8762 58.1793 22.9033 58.2136 22.9361 58.2136C23.0175 58.2136 22.8324 59.8879 22.7482 59.9137C22.7117 59.9245 22.6935 60.1984 22.7077 60.5219C22.7295 61.0261 22.7129 61.1242 22.591 61.2063C22.474 61.285 22.4683 61.3126 22.5578 61.3638C22.6753 61.4309 22.619 63.2243 22.4967 63.3019C22.4169 63.3527 22.4213 66.1252 22.5011 66.1756C22.6089 66.2431 22.6818 68.1787 22.5769 68.1787C22.5274 68.1787 22.4874 68.2108 22.4874 68.2503C22.4874 68.2899 22.5311 68.3141 22.5846 68.3041C22.6566 68.291 22.6818 68.4533 22.6818 68.9313C22.6818 69.3493 22.7158 69.6101 22.779 69.6713C22.8324 69.7235 22.877 69.9172 22.8778 70.1016C22.8786 70.2859 22.9138 70.6467 22.9563 70.9031C22.9985 71.1591 23.0661 71.5785 23.1062 71.8349C23.2168 72.5446 23.3322 73.1943 23.4172 73.5913C23.4598 73.7887 23.5489 74.2077 23.6157 74.5234C23.6825 74.8387 23.77 75.2261 23.8101 75.3836C24.1709 76.8015 24.4216 77.7001 24.7205 78.6457C24.9137 79.2569 25.0895 79.8129 25.1113 79.8816C25.1328 79.9502 25.1867 79.9853 25.2312 79.9599C25.279 79.9331 25.2891 79.9487 25.2555 79.9984C25.1672 80.1301 25.7565 81.6955 25.8493 81.5753C25.9035 81.5044 25.9132 81.5234 25.8845 81.6436C25.8331 81.8593 25.978 82.2447 26.0874 82.1824C26.1396 82.1526 26.1526 82.1787 26.1218 82.2522C26.0562 82.41 26.2154 82.816 26.3195 82.7567C26.3677 82.7291 26.3786 82.744 26.3458 82.7929C26.264 82.9153 26.4681 83.3997 26.5536 83.287C26.5969 83.2302 26.6046 83.253 26.5754 83.3493C26.5147 83.55 26.8123 84.1926 26.9338 84.1236C26.9966 84.0878 27.0108 84.1202 26.98 84.2284C26.9217 84.4348 27.1631 84.965 27.2947 84.9195C27.3498 84.9009 27.4146 84.9412 27.4385 85.0094C27.5073 85.2061 27.7341 85.6319 27.7916 85.6722C27.8204 85.6923 27.8678 85.7972 27.8973 85.905C27.9265 86.0132 27.9877 86.1017 28.033 86.1017C28.0784 86.1017 28.093 86.1222 28.0658 86.1472C28.0387 86.1722 28.0796 86.2771 28.1574 86.38C28.2351 86.4834 28.3477 86.6722 28.4076 86.8006C28.5129 87.0256 28.7531 87.1439 28.6624 86.926C28.6361 86.8633 28.6616 86.8181 28.7231 86.8174C28.8045 86.8166 28.8021 86.8002 28.7118 86.7469C28.6122 86.6875 28.615 86.6771 28.7312 86.6763C28.9443 86.6745 28.9779 86.661 29.0791 86.5386C29.1634 86.4368 29.1743 86.4397 29.1788 86.5674C29.1832 86.6998 29.1897 86.7013 29.263 86.5849C29.3071 86.5155 29.3229 86.4289 29.2986 86.3927C29.2739 86.3562 29.295 86.3032 29.3452 86.2748C29.3999 86.2435 29.4157 86.2539 29.3841 86.3006C29.3553 86.3435 29.3638 86.3965 29.4027 86.4188C29.442 86.4409 29.4939 86.4106 29.5186 86.3513C29.5732 86.22 29.7429 86.2412 29.8154 86.3882C29.8523 86.4633 29.8713 86.4416 29.879 86.3166C29.8976 86.0125 30.0195 85.8043 30.0151 86.0845C30.0127 86.2132 30.0337 86.3397 30.0617 86.3655C30.0896 86.3912 30.1127 86.3263 30.1127 86.2211C30.1127 86.0073 30.2374 85.9614 30.2925 86.1554C30.3192 86.2498 30.3302 86.2409 30.3371 86.1196C30.3419 86.0274 30.3962 85.958 30.4626 85.958C30.527 85.958 30.5793 85.9207 30.5793 85.8744C30.5793 85.8285 30.6023 85.8117 30.6299 85.8375C30.6578 85.8632 30.7267 85.8281 30.7834 85.7599C30.879 85.6438 30.8858 85.6449 30.8907 85.7789C30.8952 85.9114 30.9016 85.9125 30.9749 85.7964C31.0187 85.727 31.0349 85.6404 31.0102 85.6043C30.9859 85.5677 31.0069 85.5147 31.0571 85.486C31.1118 85.455 31.1272 85.4651 31.096 85.5121C31.0673 85.5546 31.0758 85.608 31.1147 85.63C31.1535 85.6524 31.2058 85.6222 31.2305 85.5628C31.2852 85.4315 31.4549 85.4528 31.527 85.5998C31.5638 85.6748 31.5832 85.6531 31.5909 85.5281C31.6096 85.224 31.7315 85.0154 31.7266 85.296C31.7246 85.4248 31.7457 85.5513 31.7736 85.5766C31.8015 85.6024 31.8242 85.5557 31.8242 85.4725C31.8242 85.2789 31.9571 85.2001 32.004 85.3658C32.0312 85.4621 32.0417 85.4535 32.0486 85.3307C32.0539 85.2389 32.1081 85.1695 32.1745 85.1695C32.2385 85.1695 32.2912 85.1318 32.2912 85.0859C32.2912 85.04 32.3139 85.0233 32.3418 85.049C32.3698 85.0747 32.4386 85.0397 32.4949 84.9714C32.5905 84.8553 32.5978 84.8564 32.6022 84.9904C32.6067 85.1225 32.6132 85.124 32.6869 85.0076C32.7306 84.9385 32.7464 84.852 32.7221 84.8154C32.6978 84.7792 32.714 84.7285 32.7586 84.7031C32.8031 84.6777 32.8347 84.6837 32.8286 84.7161C32.8019 84.8579 32.844 84.9106 32.9088 84.8162C33.0092 84.6695 33.2231 84.6587 33.234 84.7994C33.2393 84.865 33.2689 84.8217 33.3 84.7035L33.3563 84.4885L33.4414 84.6676C33.522 84.8382 33.5264 84.8393 33.5313 84.69C33.5374 84.4904 33.6686 84.4102 33.7156 84.5773C33.7431 84.6732 33.7536 84.665 33.7605 84.5423C33.7702 84.3684 33.8873 84.3243 33.9513 84.4706C33.9732 84.5199 33.9934 84.4822 33.997 84.387C34.0003 84.2915 34.0258 84.2348 34.0537 84.2605C34.0817 84.2859 34.1505 84.2512 34.2068 84.1825C34.3024 84.0665 34.3097 84.068 34.3142 84.2016C34.3186 84.334 34.3251 84.3355 34.3988 84.2191C34.4425 84.1497 34.4583 84.0631 34.434 84.0269C34.4093 83.9904 34.4304 83.9374 34.4806 83.909C34.5353 83.8777 34.5511 83.8881 34.5195 83.9348C34.4907 83.9777 34.4992 84.0307 34.5381 84.0531C34.5774 84.0751 34.6293 84.0448 34.654 83.9855C34.7086 83.8542 34.8783 83.8754 34.9508 84.0225C34.9889 84.1001 35.0051 84.0851 35.0091 83.9687C35.0156 83.778 35.1432 83.753 35.1942 83.9329C35.2222 84.031 35.2339 84.0232 35.2485 83.8971C35.2809 83.6194 35.2854 83.6056 35.3578 83.5444C35.3971 83.5112 35.4101 83.5168 35.387 83.5564C35.3639 83.5959 35.3732 83.6926 35.4077 83.7717C35.4672 83.9075 35.4708 83.9068 35.4761 83.7538C35.4818 83.5803 35.5992 83.5351 35.6632 83.6821C35.6847 83.7314 35.7053 83.6937 35.7086 83.5982C35.7122 83.503 35.7377 83.4459 35.7657 83.4717C35.7932 83.4974 35.8621 83.4623 35.9188 83.3941C36.0144 83.278 36.0216 83.2791 36.0261 83.4131C36.0306 83.5456 36.037 83.5467 36.1103 83.4306C36.1541 83.3612 36.1703 83.2747 36.1456 83.2385C36.1213 83.2019 36.1423 83.1489 36.1926 83.1202C36.2472 83.0888 36.2626 83.0993 36.2314 83.1463C36.2027 83.1888 36.2112 83.2422 36.2501 83.2642C36.2889 83.2866 36.346 83.2485 36.3764 83.1799C36.427 83.0653 36.4372 83.0668 36.4959 83.1982L36.5599 83.3414L36.5708 83.1982L36.5818 83.0545L36.6486 83.1982C36.7122 83.3347 36.7158 83.334 36.7211 83.1802C36.7276 82.9892 36.8551 82.9646 36.9062 83.1444C36.9337 83.2411 36.9438 83.234 36.9507 83.1127C36.9556 83.0261 36.9957 82.9351 37.0394 82.9101C37.0836 82.8851 37.1143 82.8914 37.1083 82.9239C37.0807 83.069 37.1257 83.0814 37.2585 82.9649C37.4294 82.8149 37.2703 82.3735 37.0912 82.5007C36.9438 82.6056 36.7126 82.6675 36.7656 82.5877C36.792 82.5489 36.8661 82.5171 36.9301 82.5171C36.9985 82.5171 37.0236 82.4828 36.9912 82.4343C36.9568 82.3828 36.9697 82.3709 37.0256 82.4026C37.1921 82.4974 37.118 82.2645 36.7762 81.6175C36.5899 81.2645 36.3736 80.8465 36.2962 80.6887C36.2189 80.5312 36.1419 80.3779 36.1249 80.3484C36.1083 80.3189 36.1148 80.2946 36.1395 80.2946C36.1642 80.2946 36.3432 80.5928 36.5372 80.9577C36.7312 81.3223 36.9268 81.6529 36.9722 81.6925C37.0171 81.732 36.945 81.563 36.8118 81.3171C35.8147 79.4763 34.9994 77.5326 34.0388 74.7025C33.5787 73.348 32.9671 70.6449 32.7249 68.8955C32.441 66.8454 32.3924 66.1711 32.5289 66.1711C32.5751 66.1711 32.5581 66.1013 32.49 66.0118C32.2766 65.7312 32.3179 61.2145 32.533 61.3369C32.571 61.3585 32.6026 61.3287 32.6026 61.2705C32.6026 61.2123 32.5642 61.1529 32.5176 61.1388C32.4589 61.1208 32.4499 60.9085 32.4884 60.4518C32.5427 59.8163 32.6306 59.6126 32.7043 59.9521C32.7266 60.0544 32.7371 60.0301 32.7326 59.8853C32.729 59.7599 32.6982 59.673 32.6642 59.6924C32.6302 59.7118 32.6026 59.5159 32.6026 59.2573C32.6026 58.8715 32.6249 58.7871 32.7286 58.7871C32.8185 58.7871 32.8331 58.761 32.7788 58.6976C32.7205 58.6289 32.8148 57.4986 32.9076 57.152C32.9108 57.1397 32.9574 57.1523 33.0109 57.1803C33.0813 57.2169 33.0854 57.2079 33.025 57.1471C32.9392 57.0609 32.9959 56.6396 33.2482 55.4892C33.9327 52.3704 34.9593 49.4374 36.4724 46.2768C37.15 44.8621 38.6388 42.3325 39.6832 40.8212C39.9186 40.4805 40.1466 40.1492 40.1899 40.085C40.3596 39.8328 40.5763 39.5361 40.616 39.5021C40.6386 39.4824 40.7581 39.3212 40.8816 39.1435C41.1668 38.7342 42.3303 37.2946 42.7928 36.7789C42.9868 36.5628 43.1707 36.3531 43.2011 36.3128C43.487 35.9359 44.8466 34.5631 44.9025 34.5944C44.9422 34.6172 45.0066 34.5582 45.0454 34.4638C45.1507 34.2086 46.4731 33.1081 46.5464 33.2149C46.5877 33.2746 46.6063 33.2652 46.6071 33.1843C46.6087 32.9966 47.311 32.4365 47.394 32.557C47.4451 32.6312 47.4621 32.6186 47.4629 32.5059C47.4641 32.3753 48.055 31.8685 48.5426 31.5801C48.609 31.5405 48.7038 31.4752 48.7528 31.4345C49.3227 30.9614 50.0504 30.524 50.114 30.6162C50.1703 30.6983 50.1853 30.6886 50.1861 30.5707C50.1873 30.4375 50.4882 30.2054 51.1087 29.8591C51.1796 29.8195 51.4623 29.6483 51.7365 29.4785C52.1159 29.2438 52.25 29.1926 52.2994 29.2639C52.3492 29.3367 52.3642 29.3326 52.365 29.2456C52.3666 29.0691 52.8344 28.7784 52.9186 28.9012C52.9721 28.9788 52.9863 28.9736 52.9875 28.8769C52.9891 28.6952 53.6817 28.3355 53.7732 28.4687C53.8267 28.5467 53.8424 28.537 53.8441 28.4258C53.8461 28.2534 54.776 27.7687 54.861 27.8955C54.8898 27.9385 54.9323 27.9015 54.9578 27.8105C54.9971 27.6731 55.0218 27.6631 55.1263 27.7429C55.23 27.8224 55.2413 27.8187 55.1996 27.719C55.1692 27.6455 55.1907 27.6008 55.2563 27.5996C55.3142 27.5989 55.4487 27.5366 55.5548 27.4612C55.6994 27.3589 55.7743 27.3444 55.8513 27.4034C55.929 27.4627 55.9484 27.4571 55.9302 27.3802C55.9165 27.3205 55.9622 27.2828 56.0428 27.2884C56.1173 27.294 56.1789 27.2537 56.1789 27.1989C56.1789 27.075 56.3077 27.0679 56.3607 27.1892C56.3842 27.2425 56.4025 27.228 56.4061 27.1533C56.4126 27.0209 56.5677 26.9731 56.5677 27.1037C56.5677 27.1455 56.6033 27.1593 56.6471 27.1347C56.6904 27.1097 56.7066 27.0608 56.6831 27.0257C56.6596 26.9906 56.8079 26.8947 57.0128 26.813C57.2173 26.7313 57.4417 26.6354 57.5109 26.6003C57.5915 26.5593 57.6733 26.5667 57.7365 26.6205C57.8127 26.6858 57.8236 26.685 57.7827 26.6182C57.7191 26.5141 58.3947 26.2093 58.5595 26.2678C58.6202 26.2891 58.6688 26.263 58.6688 26.2089C58.6688 26.0943 58.99 26.0048 59.1714 26.0686C59.2476 26.0958 59.2885 26.0801 59.2751 26.0294C59.2626 25.9831 59.3662 25.8999 59.5052 25.8447C59.6441 25.7895 59.7579 25.7749 59.7579 25.8126C59.7579 25.8499 59.7931 25.8805 59.836 25.8805C59.8786 25.8805 59.9138 25.8286 59.9138 25.7648C59.9138 25.6853 59.9612 25.6603 60.0645 25.685C60.1479 25.7051 60.2321 25.6801 60.2536 25.6286C60.2747 25.5775 60.4083 25.5148 60.5505 25.4891C60.6922 25.4633 60.8785 25.4126 60.964 25.376C61.3426 25.2152 62.2891 24.9715 62.3126 25.029C62.3531 25.1267 62.4839 25.1036 62.4621 25.0025C62.4511 24.9532 62.5127 24.9129 62.5981 24.9129C62.6836 24.9129 62.7998 24.8726 62.8565 24.8234C62.9132 24.7737 63.0064 24.7334 63.0639 24.7334C63.1218 24.7334 63.1862 24.7737 63.2081 24.8234C63.2299 24.8737 63.2498 24.8543 63.2534 24.779C63.2579 24.679 63.3049 24.6532 63.4385 24.6767C63.5373 24.6943 63.6613 24.6655 63.7139 24.6133C63.8269 24.5021 64.0375 24.4868 64.0375 24.5901C64.0375 24.6297 64.0715 24.6618 64.1128 24.6618C64.1546 24.6618 64.1663 24.6095 64.1396 24.5454C64.0991 24.448 64.1371 24.4334 64.37 24.4584C64.5336 24.476 64.6434 24.4584 64.6353 24.4155C64.6134 24.3036 64.984 24.2782 65.0585 24.3868C65.1104 24.4618 65.1249 24.4573 65.1258 24.3655C65.127 24.2368 65.4121 24.1349 65.4817 24.2386C65.5465 24.3353 65.6745 24.317 65.6523 24.214C65.6397 24.1558 65.7288 24.1241 65.905 24.1241C66.0548 24.1241 66.2237 24.0838 66.28 24.0345C66.4031 23.9274 66.6052 23.9162 66.6052 24.0166C66.6052 24.0562 66.6404 24.0882 66.683 24.0882C66.7259 24.0882 66.7607 24.0356 66.7607 23.9715C66.7607 23.8774 66.8186 23.8617 67.0531 23.8905C67.2528 23.9151 67.38 23.8931 67.4533 23.8207C67.5258 23.7491 67.6465 23.727 67.8222 23.7535C67.983 23.7774 68.0839 23.7629 68.0839 23.7158C68.0839 23.6658 68.205 23.6539 68.4265 23.6819C68.6978 23.7162 68.7793 23.7017 68.8169 23.611C68.8542 23.5214 68.9408 23.5043 69.2134 23.5326C69.405 23.5528 69.5621 23.5449 69.5621 23.5155C69.5621 23.4248 70.2154 23.3729 70.2733 23.4595C70.3085 23.5121 70.3713 23.4964 70.4641 23.411C70.5718 23.3117 70.6917 23.2912 71.0136 23.3154C71.24 23.333 71.4352 23.3214 71.447 23.2897C71.4766 23.2113 72.2809 23.1916 72.5117 23.264C72.6438 23.305 72.6826 23.2987 72.6446 23.2416C72.5591 23.1143 72.9423 23.0602 73.5574 23.1132C74.5501 23.1979 74.0058 22.9766 72.6357 22.7382C70.0858 22.2941 67.2346 22.0721 64.8544 22.1325ZM30.6598 37.4905C30.5643 37.655 30.6971 37.7733 30.8352 37.6461C30.8988 37.5875 30.8968 37.5662 30.8283 37.5662C30.7769 37.5662 30.7352 37.5323 30.7352 37.4905C30.7352 37.4487 30.7753 37.4375 30.8247 37.4658C30.8806 37.4976 30.8935 37.4852 30.8591 37.4341C30.783 37.3207 30.7534 37.3293 30.6598 37.4905ZM29.6903 39.9279C29.6903 40.0044 29.6275 40.082 29.5514 40.1003C29.4748 40.119 29.412 40.1048 29.412 40.069C29.412 40.0331 29.4473 40.004 29.4902 40.004C29.5327 40.004 29.568 39.9555 29.568 39.8962C29.568 39.8372 29.5955 39.7887 29.6291 39.7887C29.6627 39.7887 29.6903 39.8514 29.6903 39.9279ZM139.282 64.6658C139.282 64.7248 139.316 64.8218 139.357 64.8807C139.425 64.9763 139.433 64.9763 139.433 64.8807C139.433 64.8218 139.399 64.7248 139.357 64.6658C139.291 64.5703 139.282 64.5703 139.282 64.6658ZM139.319 68.0354C139.289 68.1201 139.283 68.2056 139.304 68.2253C139.326 68.2451 139.367 68.1917 139.396 68.107C139.425 68.0223 139.432 67.9365 139.41 67.9171C139.389 67.8973 139.348 67.9503 139.319 68.0354ZM36.0982 80.151C36.0978 80.2103 36.0468 80.1502 35.984 80.0174C35.9216 79.8849 35.8718 79.7558 35.873 79.7308C35.8787 79.6375 36.0982 80.048 36.0982 80.151ZM37.0378 81.8276C37.0378 81.9044 37.269 82.3018 37.314 82.3018C37.3355 82.3018 37.295 82.197 37.2241 82.069C37.0799 81.8074 37.0378 81.7526 37.0378 81.8276ZM37.5052 82.6246C37.5056 82.6638 37.5752 82.7929 37.6603 82.9112C37.8616 83.1914 37.862 83.0918 37.6603 82.7877C37.5748 82.6586 37.5052 82.5851 37.5052 82.6246ZM27.517 85.5819C27.6948 85.9796 27.786 86.0274 27.6365 85.6442C27.5652 85.4621 27.4822 85.3128 27.4522 85.3128C27.4219 85.3128 27.451 85.4341 27.517 85.5819ZM28.7118 86.4577C28.7118 86.5517 28.6741 86.5857 28.5988 86.5588C28.5093 86.5274 28.5052 86.498 28.5794 86.4203C28.7033 86.2901 28.7118 86.2927 28.7118 86.4577ZM28.6802 87.2846C28.845 87.5163 28.9572 87.5167 28.841 87.2849C28.7912 87.1868 28.7061 87.1062 28.6519 87.1058C28.5794 87.1055 28.5867 87.1532 28.6802 87.2846ZM28.937 87.7279C28.9678 87.8339 29.039 87.9346 29.0953 87.9518C29.1601 87.9715 29.18 87.9469 29.1496 87.885C29.1229 87.8305 29.0795 87.7297 29.0532 87.6607C28.9759 87.4588 28.8758 87.5167 28.937 87.7279ZM7.34278 116.75C7.34278 117.144 7.35574 117.296 7.37154 117.088C7.38733 116.879 7.38733 116.557 7.37154 116.371C7.35534 116.185 7.34238 116.356 7.34278 116.75Z\" fill=\"url(#paint3_linear)\" />\r\n        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M59.3073 14.4486C59.2522 14.5064 59.2413 14.5534 59.2834 14.5534C59.3251 14.5534 59.3814 14.5206 59.4086 14.4806C59.4353 14.4403 59.4952 14.4291 59.5418 14.4556C59.592 14.4844 59.6038 14.4706 59.5706 14.4209C59.4985 14.3131 59.4304 14.3202 59.3073 14.4486ZM58.5346 14.643C58.4058 14.7963 58.3349 14.9598 58.4564 14.8232C58.5172 14.7549 58.584 14.7146 58.605 14.7336C58.6257 14.7527 58.6427 14.7202 58.6427 14.6609C58.6427 14.5303 58.631 14.5284 58.5346 14.643ZM58.7464 14.6542C58.7464 14.721 58.8011 14.7418 58.9084 14.7161C59.0319 14.6862 59.0457 14.6624 58.9667 14.6161C58.8156 14.528 58.7464 14.54 58.7464 14.6542ZM57.9186 14.9475C57.8943 15.006 57.8428 15.0366 57.8044 15.0146C57.7663 14.993 57.7347 15.0094 57.7347 15.0508C57.7347 15.1777 57.8797 15.1359 57.9684 14.9837C58.0142 14.9045 58.0316 14.84 58.0073 14.84C57.9834 14.84 57.9433 14.8885 57.9186 14.9475ZM57.5792 15.0866C57.5792 15.1672 57.5387 15.1997 57.469 15.1751C57.4083 15.1534 57.341 15.1788 57.3192 15.2311C57.2916 15.2967 57.3277 15.3143 57.4358 15.2881C57.599 15.249 57.7116 15.0818 57.6278 15.0042C57.6011 14.9799 57.5792 15.0169 57.5792 15.0866ZM57.0332 15.3199C57.0324 15.4184 57.0162 15.4266 56.9664 15.3538C56.9134 15.277 56.8915 15.2803 56.8534 15.3717C56.7939 15.5147 56.9806 15.524 57.1066 15.384C57.1689 15.315 57.1718 15.2684 57.1163 15.2367C57.0709 15.2109 57.0341 15.2478 57.0332 15.3199ZM55.7291 15.8565C55.7409 15.9087 55.6923 15.9475 55.621 15.9423C55.4793 15.9326 55.3707 16.177 55.4874 16.2434C55.5275 16.2662 55.5505 16.2542 55.5388 16.2169C55.5266 16.18 55.6016 16.086 55.7048 16.008C55.8357 15.9098 55.8644 15.8509 55.8004 15.8139C55.7445 15.7826 55.7166 15.7994 55.7291 15.8565ZM55.2448 16.1263C55.2448 16.1781 55.1941 16.1998 55.1281 16.1763C55.0573 16.1513 55.0115 16.1763 55.0115 16.2404C55.0115 16.3688 54.8839 16.38 54.8296 16.2561C54.807 16.2042 54.7875 16.2214 54.7843 16.2968C54.7794 16.3942 54.7381 16.4154 54.6203 16.3811C54.5121 16.3494 54.4696 16.3647 54.4842 16.43C54.4959 16.4822 54.4611 16.5166 54.4064 16.5065C54.3517 16.496 54.2861 16.5371 54.261 16.5979C54.2246 16.6849 54.1918 16.6901 54.1031 16.6222C54.0144 16.5543 53.9962 16.5576 54.0152 16.6382C54.029 16.6976 53.9832 16.736 53.9058 16.7304C53.8325 16.7252 53.7754 16.7416 53.7787 16.7662C53.805 16.9576 53.758 17.0897 53.696 16.9998C53.6588 16.9453 53.5887 16.9233 53.5405 16.9509C53.4923 16.9782 53.4749 17.0341 53.5025 17.0748C53.5336 17.1215 53.4931 17.1196 53.3919 17.0696C53.1801 16.9651 53.144 16.97 53.144 17.1028C53.144 17.164 53.1088 17.1942 53.0659 17.17C53.0225 17.1453 52.9654 17.1774 52.9391 17.2412C52.9124 17.3054 52.8455 17.3416 52.7905 17.3222C52.735 17.3028 52.6678 17.3401 52.6406 17.4058C52.5977 17.508 52.5811 17.5099 52.5187 17.4189C52.4567 17.3289 52.4458 17.3308 52.445 17.4312C52.4434 17.5674 52.2129 17.676 52.2052 17.5442C52.202 17.4961 52.1611 17.5308 52.1137 17.6211C52.0663 17.7122 51.9821 17.7693 51.9246 17.7487C51.8675 17.7286 51.8213 17.7596 51.8213 17.8178C51.8213 17.9461 51.6937 17.9569 51.6395 17.8334C51.6034 17.751 51.5556 17.954 51.5799 18.0872C51.5856 18.1185 51.5192 18.1092 51.4321 18.0663C51.3065 18.0043 51.2644 18.0118 51.2264 18.1032C51.2 18.1663 51.1308 18.201 51.0721 18.1801C50.9777 18.1469 50.9254 18.2648 50.9562 18.4428C50.9708 18.5271 50.9092 18.5062 50.7719 18.3794C50.6545 18.2715 50.6415 18.2745 50.6002 18.4193C50.5735 18.5141 50.5136 18.5615 50.4492 18.5387C50.3836 18.5152 50.3431 18.5503 50.3431 18.6301C50.3431 18.701 50.2904 18.7592 50.226 18.7592C50.162 18.7592 50.1094 18.7335 50.1094 18.7018C50.1094 18.67 50.0612 18.6615 50.002 18.6824C49.9433 18.7033 49.8996 18.7745 49.9048 18.8413C49.9105 18.9096 49.868 18.9533 49.8076 18.9413C49.7489 18.9301 49.6481 18.9898 49.5841 19.0742C49.4917 19.1958 49.4529 19.2078 49.4002 19.1309C49.3472 19.0536 49.3334 19.0529 49.3326 19.1279C49.3318 19.1794 49.2953 19.2014 49.2516 19.1764C49.2078 19.1514 49.1815 19.1738 49.1933 19.226C49.205 19.2783 49.1487 19.3212 49.0677 19.3212C48.9831 19.3216 48.8907 19.3962 48.8498 19.4988C48.796 19.6328 48.7627 19.6522 48.7133 19.5787C48.6631 19.5033 48.6182 19.5231 48.5169 19.6656C48.4448 19.7671 48.3407 19.8339 48.2852 19.8145C48.2277 19.794 48.1658 19.8459 48.1403 19.9354C48.1115 20.0369 48.0548 20.078 47.9803 20.0515C47.9102 20.0268 47.815 20.0802 47.7385 20.1877C47.6692 20.2851 47.581 20.347 47.5421 20.325C47.5036 20.3026 47.4327 20.3522 47.3849 20.4343C47.3363 20.5175 47.2395 20.5731 47.167 20.5593C47.0881 20.5448 46.9791 20.6187 46.8929 20.7463C46.7912 20.8967 46.7325 20.9317 46.6895 20.8676C46.6462 20.803 46.5798 20.8407 46.4575 20.9989C46.3631 21.1209 46.2177 21.2206 46.1339 21.2206C46.0424 21.2206 45.9516 21.2933 45.9063 21.403C45.8593 21.5176 45.7811 21.5777 45.6973 21.5646C45.6147 21.5515 45.5231 21.6198 45.4571 21.7445C45.3915 21.8684 45.3004 21.937 45.2206 21.9225C45.1449 21.909 45.023 21.99 44.929 22.1158C44.8217 22.2594 44.7115 22.3262 44.5997 22.315C44.4803 22.3031 44.4183 22.3467 44.3859 22.4669C44.3369 22.646 43.8845 23.0035 43.8845 22.8628C43.8845 22.8035 43.8517 22.8053 43.7679 22.8695C43.7039 22.9188 43.6512 22.9971 43.6512 23.0442C43.6512 23.1501 43.2325 23.527 43.1373 23.5069C43.0109 23.48 42.7955 23.6002 42.7955 23.6979C42.7955 23.8192 42.1155 24.4107 41.9749 24.4118C41.8478 24.4129 41.3946 24.8013 41.3946 24.9092C41.3946 25.0114 38.5778 27.6011 38.466 27.6011C38.3607 27.6011 38.1785 27.794 38.157 27.9276C38.1307 28.0926 37.473 28.7482 37.3336 28.7482C37.1806 28.7482 37.0757 28.8676 37.1964 28.9046C37.3045 28.9378 36.7452 29.5371 36.6059 29.5371C36.5463 29.5371 36.5155 29.58 36.5374 29.6326C36.5593 29.6852 36.4358 29.8628 36.2628 30.027C36.0895 30.1912 35.9481 30.3423 35.9481 30.3625C35.9481 30.3946 35.4966 30.9289 35.0997 31.3666C35.0276 31.4465 34.8575 31.6562 34.7214 31.8327C34.5857 32.0092 34.3342 32.3312 34.1625 32.548C33.862 32.9279 32.0699 35.3862 31.7957 35.7941C31.7224 35.9034 31.6867 36.0326 31.7167 36.0807C31.7467 36.1288 31.7426 36.1445 31.7074 36.115C31.6264 36.0475 31.4263 36.3042 31.4611 36.4315C31.4757 36.4841 31.4721 36.5005 31.453 36.468C31.3903 36.3613 31.2007 36.6919 31.2481 36.8259C31.285 36.9307 31.2781 36.9363 31.2145 36.8531C31.1489 36.7684 31.1165 36.7856 31.0363 36.9479C30.9545 37.1132 30.9569 37.1584 31.0505 37.2177C31.1323 37.2699 31.1124 37.2759 30.9764 37.2405C30.8144 37.1979 30.7957 37.2117 30.833 37.3431C30.8565 37.4267 30.8492 37.4796 30.8164 37.461C30.7836 37.4423 30.6908 37.5405 30.6098 37.6785C30.4814 37.8987 30.4774 37.9386 30.5795 37.998C30.6434 38.0356 30.6588 38.0666 30.6135 38.067C30.5681 38.0677 30.4458 38.2454 30.3413 38.4618C30.2368 38.6782 30.1279 38.8558 30.0991 38.8562C30.0704 38.8566 30.0238 38.9536 29.9954 39.0719C29.9675 39.1902 29.912 39.2868 29.8727 39.2868C29.8334 39.2868 29.801 39.3678 29.801 39.4663C29.801 39.5648 29.7605 39.6454 29.7115 39.6454C29.6621 39.6454 29.699 39.707 29.7934 39.7828C29.9533 39.9107 30.0019 40.0604 30.0266 40.5056C30.0347 40.6488 30.0521 40.6634 30.1125 40.5776C30.1728 40.491 30.1878 40.5022 30.189 40.6354C30.1894 40.7265 30.1587 40.7832 30.1206 40.7615C30.0825 40.7395 30.025 40.8104 29.9926 40.9186L29.9343 41.1153L29.8764 40.9358C29.827 40.7832 29.8189 40.7959 29.8221 41.0224L29.8262 41.2884L30.3583 40.6339C30.6511 40.2738 30.8905 40.0089 30.8909 40.0451C30.8909 40.0816 30.9654 39.9984 31.0561 39.8604C31.1469 39.7227 31.2461 39.5936 31.2769 39.5738C31.3072 39.554 31.4518 39.3768 31.5984 39.1794C35.595 33.8022 41.3917 28.9631 46.8532 26.4462C50.1802 24.9129 56.35 22.9318 58.0073 22.8647C58.1203 22.8602 58.1308 22.8471 58.0462 22.8173C57.9818 22.7949 57.9036 22.7408 57.872 22.6975C57.8315 22.6412 57.8145 22.6426 57.8137 22.7016C57.8133 22.7509 57.7448 22.768 57.6452 22.7441C57.535 22.7177 57.4386 22.7505 57.3625 22.8404C57.2511 22.9721 57.2487 22.9725 57.2977 22.8423C57.3439 22.7199 57.3188 22.7121 57.0195 22.7561C56.8384 22.7826 56.7149 22.7818 56.7449 22.7538C56.7753 22.7262 56.7562 22.6542 56.7032 22.5938C56.6238 22.5035 56.6262 22.4945 56.7157 22.5441C56.8117 22.5975 57.19 22.6647 57.19 22.6285C57.19 22.621 57.1147 22.5553 57.0227 22.4826C56.8769 22.3676 56.8615 22.3658 56.9049 22.4703C56.9344 22.5412 56.9235 22.5721 56.8781 22.5464C56.8356 22.5225 56.8012 22.3736 56.8012 22.2158C56.8012 22.0452 56.77 21.9467 56.7242 21.9728C56.6801 21.9982 56.6671 21.9695 56.6935 21.9057C56.719 21.8445 56.7036 21.7941 56.659 21.7941C56.6145 21.7941 56.5622 21.7057 56.5432 21.5971C56.5242 21.4885 56.5108 21.5527 56.5136 21.7392C56.5165 21.9254 56.4946 22.1005 56.4654 22.1273C56.4136 22.1751 56.3946 22.0747 56.3921 21.7404C56.3905 21.5661 56.2937 21.5232 56.2301 21.6687C56.1823 21.7777 56.1548 21.4504 56.1726 20.987C56.1795 20.7993 56.1532 20.5925 56.1135 20.5276C56.0641 20.4459 56.0459 20.5362 56.0556 20.8198C56.0629 21.0455 56.0471 21.2429 56.0199 21.2582C55.9669 21.2885 55.9478 21.1739 55.9438 20.8011C55.9414 20.594 55.9248 20.5735 55.8219 20.6522C55.7567 20.7022 55.7089 20.7134 55.7166 20.6772C55.7453 20.5381 55.7089 20.4254 55.6469 20.4604C55.5688 20.5052 55.5505 20.3847 55.5514 19.8313C55.5522 19.5992 55.5206 19.3574 55.4817 19.2936C55.4331 19.2141 55.4173 19.2858 55.4307 19.522C55.4412 19.7111 55.4274 19.8791 55.3995 19.8951C55.342 19.9276 55.3254 19.8212 55.3148 19.3567C55.3108 19.1794 55.2784 18.9857 55.2427 18.9264C55.2018 18.8589 55.1856 18.9335 55.199 19.1264C55.2108 19.2955 55.1966 19.4473 55.1678 19.4637C55.1079 19.4981 55.105 19.4802 55.0803 18.8764C55.0702 18.632 55.0362 18.4465 55.0046 18.4644C54.9734 18.4823 54.9572 18.5783 54.969 18.6779C54.9807 18.7771 54.9592 18.876 54.9212 18.8977C54.8831 18.9193 54.8572 18.9107 54.8633 18.8783C54.8888 18.7424 54.8515 18.6339 54.7912 18.6682C54.7179 18.71 54.7158 18.6995 54.6798 18.0868C54.6656 17.8416 54.6275 17.617 54.5956 17.5875C54.5636 17.558 54.5514 17.6513 54.5684 17.7946C54.5858 17.9383 54.5704 18.0984 54.5344 18.1506C54.4907 18.2141 54.468 18.1745 54.466 18.0305C54.4643 17.9122 54.4473 17.5838 54.4283 17.3006C54.4032 16.9345 54.4206 16.7767 54.4882 16.755C54.5409 16.7386 54.5222 16.7334 54.4473 16.7434C54.2136 16.7759 54.2995 16.6744 54.6288 16.5289C54.8997 16.4091 54.9552 16.4043 55.02 16.4931C55.0828 16.5789 55.0917 16.5755 55.073 16.4752C55.0605 16.4084 55.1204 16.3061 55.2059 16.2479C55.2913 16.1901 55.3351 16.118 55.3031 16.0886C55.2711 16.0591 55.2448 16.0762 55.2448 16.1263ZM54.2873 17.0797C54.3007 17.1688 54.3262 17.3304 54.3436 17.4386C54.3611 17.5469 54.3505 17.6495 54.3206 17.6666C54.272 17.6942 54.2424 17.5894 54.2157 17.2957C54.2112 17.2465 54.1764 17.2062 54.1379 17.2062C54.0998 17.2062 54.095 17.1655 54.127 17.1162C54.1735 17.045 54.161 17.045 54.0666 17.1151C53.9706 17.1868 53.948 17.1834 53.948 17.0972C53.948 17.0386 53.9937 16.9909 54.0492 16.9909C54.1124 16.9909 54.1326 16.9435 54.1027 16.8655C54.0638 16.7636 54.0743 16.7569 54.1586 16.8285C54.2157 16.8774 54.2736 16.9905 54.2873 17.0797ZM55.8178 20.2925C55.8178 20.4086 55.8466 20.5037 55.8814 20.5037C55.9167 20.5037 55.945 20.425 55.945 20.3287C55.945 20.2324 55.9167 20.1377 55.8814 20.1175C55.8466 20.0977 55.8178 20.1765 55.8178 20.2925ZM56.2816 21.2478C56.286 21.3907 56.3168 21.5075 56.3508 21.5075C56.433 21.5075 56.427 21.2097 56.3419 21.0862C56.297 21.0209 56.2767 21.0747 56.2816 21.2478ZM56.704 22.259C56.704 22.3568 56.6752 22.4206 56.6408 22.4008C56.5667 22.3587 56.5768 22.0811 56.6521 22.0811C56.6805 22.0811 56.704 22.1609 56.704 22.259ZM64.1345 22.134C64.3808 22.1482 64.7833 22.1482 65.0296 22.134C65.2754 22.1199 65.0741 22.1083 64.582 22.1083C64.09 22.1083 63.8887 22.1199 64.1345 22.134ZM66.2357 22.134C66.4815 22.1482 66.8841 22.1482 67.1303 22.134C67.3765 22.1199 67.1753 22.1083 66.6828 22.1083C66.1907 22.1083 65.9894 22.1199 66.2357 22.134ZM62.6935 22.2046C62.8316 22.2202 63.0767 22.2206 63.2382 22.2049C63.3994 22.1896 63.2864 22.1766 62.9871 22.1762C62.6875 22.1758 62.5554 22.1885 62.6935 22.2046ZM68.0642 22.2046C68.2031 22.2206 68.4308 22.2206 68.5697 22.2046C68.709 22.1885 68.5952 22.1755 68.317 22.1755C68.0387 22.1755 67.9249 22.1885 68.0642 22.2046ZM61.9171 22.2751C62.0135 22.2919 62.1711 22.2919 62.2671 22.2751C62.3634 22.2579 62.2849 22.2437 62.0921 22.2437C61.8997 22.2437 61.8208 22.2579 61.9171 22.2751ZM69.1144 22.274C69.1893 22.2919 69.312 22.2919 69.387 22.274C69.4619 22.2557 69.4003 22.2411 69.2505 22.2411C69.101 22.2411 69.0395 22.2557 69.1144 22.274ZM60.5474 22.3732C60.2757 22.4057 60.0132 22.4475 59.9638 22.4661C59.7974 22.5288 60.2607 22.5009 60.9249 22.4076C61.649 22.3061 61.3428 22.2785 60.5474 22.3732ZM70.4772 22.4184C70.574 22.4355 70.7137 22.4348 70.7883 22.4169C70.8628 22.399 70.7834 22.3852 70.6125 22.3859C70.4412 22.3867 70.3804 22.4012 70.4772 22.4184ZM58.7351 22.6046C58.4706 22.7001 58.6496 22.7352 59.0574 22.6677C59.3944 22.6117 59.3984 22.6083 59.1631 22.574C59.0287 22.5542 58.8359 22.568 58.7351 22.6046ZM74.0359 22.9938C74.1214 23.0136 74.2158 23.0651 74.2457 23.1087C74.2753 23.1524 74.3271 23.1632 74.3604 23.1326C74.4401 23.0587 74.2316 22.9415 74.0359 22.9509L73.8804 22.958L74.0359 22.9938ZM68.4255 37.3345C68.5235 37.3554 68.5425 37.3834 68.4822 37.4177C68.432 37.4461 68.6705 37.4673 69.0123 37.4647C69.7276 37.4591 69.621 37.3875 68.8228 37.3375C68.5231 37.3184 68.3445 37.3173 68.4255 37.3345ZM30.0108 38.6372C29.8505 38.8876 29.8415 38.9659 29.9878 38.8417C30.0477 38.7909 30.0829 38.7361 30.0663 38.72C30.0497 38.704 30.0756 38.6469 30.1242 38.5928C30.1724 38.539 30.1967 38.4804 30.1777 38.4629C30.1587 38.4454 30.0837 38.5237 30.0108 38.6372ZM29.5678 39.8962C29.5678 39.9555 29.5325 40.004 29.49 40.004C29.4471 40.004 29.4118 40.0331 29.4118 40.069C29.4118 40.1048 29.4746 40.119 29.5512 40.1003C29.6844 40.0682 29.7545 39.7887 29.6289 39.7887C29.5953 39.7887 29.5678 39.8372 29.5678 39.8962ZM124.571 42.8687C124.755 42.9762 124.482 43.0374 123.987 42.9997C123.753 42.9818 123.562 42.9915 123.562 43.0214C123.562 43.1146 123.066 43.1844 123.033 43.0956C123.017 43.0512 122.956 43.015 122.896 43.015C122.828 43.015 122.807 43.0583 122.838 43.1337C122.88 43.2337 122.849 43.2456 122.648 43.2087C122.477 43.177 122.397 43.1941 122.365 43.2688C122.312 43.3968 122.034 43.4072 121.979 43.2837C121.955 43.2273 121.938 43.2374 121.934 43.312C121.928 43.4356 121.694 43.5632 121.694 43.4427C121.694 43.4046 121.66 43.3732 121.617 43.3732C121.574 43.3732 121.539 43.4255 121.539 43.4893C121.539 43.5729 121.492 43.5938 121.37 43.5643C121.261 43.5382 121.164 43.5673 121.099 43.6456C121.009 43.7527 120.988 43.7546 120.919 43.6602C120.85 43.5647 120.841 43.5647 120.84 43.6606C120.839 43.7815 120.463 43.9572 120.173 43.9725C120.068 43.9781 119.983 44.0061 119.983 44.0348C119.982 44.1281 118.74 44.6603 118.621 44.6181C118.545 44.5912 118.504 44.62 118.504 44.6998C118.504 44.7812 118.464 44.8084 118.383 44.78C118.317 44.7565 118.283 44.7677 118.308 44.805C118.347 44.8621 117.966 45.0998 117.844 45.0954C117.822 45.0946 117.743 45.1454 117.668 45.2077C117.593 45.2704 117.186 45.5305 116.765 45.7857C115.622 46.4768 114.106 47.5828 113.217 48.3731C112.984 48.5806 112.765 48.7504 112.731 48.7504C112.696 48.7504 112.677 48.7743 112.688 48.8041C112.698 48.8336 112.682 48.8579 112.65 48.8579C112.545 48.8579 110.886 50.4244 110.928 50.4856C110.95 50.5188 110.922 50.5371 110.865 50.5262C110.808 50.5154 110.774 50.5546 110.788 50.6143C110.802 50.6733 110.788 50.6979 110.756 50.6688C110.675 50.5942 110.481 50.7576 110.541 50.8486C110.571 50.8919 110.554 50.9016 110.501 50.8718C110.449 50.8419 110.388 50.8751 110.358 50.9501C110.328 51.0218 110.152 51.2058 109.967 51.3591C109.782 51.5125 109.645 51.6521 109.664 51.6692C109.682 51.6864 109.456 51.9282 109.162 52.2066C108.867 52.4849 108.642 52.7364 108.661 52.7652C108.681 52.7943 108.593 52.8913 108.465 52.9812C108.337 53.0712 108.233 53.1697 108.233 53.2003C108.233 53.2309 108.128 53.3525 108 53.4708C107.872 53.5891 107.766 53.7369 107.766 53.7992C107.766 53.8611 107.724 53.904 107.673 53.894C107.621 53.8843 107.578 53.913 107.576 53.9578C107.574 54.0025 107.484 54.11 107.378 54.1962C107.271 54.2824 107.231 54.3298 107.291 54.3014C107.35 54.2731 107.317 54.3514 107.218 54.4753C107.043 54.6925 106.92 54.7884 107.035 54.6179C107.069 54.5668 107.056 54.5544 107.001 54.5862C106.951 54.6145 106.911 54.6981 106.911 54.7724C106.911 54.8466 106.87 54.9302 106.821 54.9586C106.761 54.9922 106.752 54.978 106.794 54.9157C106.836 54.8533 106.826 54.8392 106.766 54.8739C106.716 54.9022 106.693 54.9534 106.716 54.9873C106.739 55.0216 106.678 55.1004 106.581 55.1631C106.484 55.2257 106.414 55.2925 106.424 55.3116C106.477 55.4056 106.429 55.4761 106.288 55.5101C106.184 55.5351 106.148 55.5858 106.18 55.662C106.21 55.7359 106.185 55.7762 106.107 55.7762C106.04 55.7762 105.961 55.8131 105.931 55.8586C105.894 55.9131 105.912 55.9235 105.984 55.8896C106.044 55.8609 106.001 55.9124 105.889 56.0038C105.776 56.0956 105.66 56.2433 105.63 56.3325C105.601 56.4221 105.543 56.4762 105.502 56.4527C105.462 56.4295 105.433 56.437 105.44 56.4698C105.466 56.6113 105.427 56.7131 105.36 56.6751C105.32 56.6527 105.267 56.6646 105.242 56.702C105.217 56.7393 105.234 56.7915 105.28 56.8176C105.381 56.8751 105.666 56.6538 105.666 56.5176C105.666 56.4646 105.72 56.4213 105.787 56.4213C105.854 56.4213 105.888 56.3911 105.863 56.3538C105.838 56.3169 105.88 56.2534 105.956 56.2127C106.064 56.1545 106.069 56.1377 105.977 56.1333C105.913 56.1303 105.965 56.0836 106.094 56.0295C106.222 55.9754 106.276 55.9284 106.215 55.9254C106.133 55.9209 106.143 55.8922 106.253 55.8183C106.336 55.7627 106.435 55.7355 106.474 55.7575C106.514 55.7799 106.525 55.7676 106.5 55.7299C106.474 55.6922 106.483 55.6187 106.518 55.5661C106.585 55.4664 106.709 55.6892 106.66 55.8224C106.648 55.856 106.669 55.8888 106.707 55.8952C106.823 55.915 106.896 56.0732 106.874 56.2564C106.859 56.3781 106.885 56.4184 106.96 56.3919C107.028 56.3676 107.066 56.406 107.066 56.4993C107.066 56.5796 107.101 56.6247 107.144 56.6005C107.187 56.5762 107.226 56.6225 107.231 56.7038C107.237 56.7848 107.25 56.8837 107.261 56.9232C107.271 56.9624 107.284 57.0453 107.29 57.1064C107.295 57.168 107.335 57.1982 107.378 57.174C107.42 57.1497 107.46 57.1639 107.465 57.2057C107.477 57.2971 107.507 57.5221 107.531 57.6938C107.544 57.7856 107.565 57.771 107.611 57.6401L107.673 57.4609L107.691 57.658C107.7 57.7662 107.717 57.8875 107.727 57.9266C107.738 57.9662 107.751 58.0487 107.757 58.1102C107.762 58.1718 107.802 58.202 107.844 58.1778C107.887 58.1531 107.922 58.2017 107.922 58.2852C107.922 58.3688 107.954 58.4188 107.993 58.3968C108.032 58.3744 108.09 58.4935 108.121 58.6614C108.167 58.9088 108.189 58.9394 108.239 58.823L108.3 58.6797L108.314 58.823C108.322 58.9017 108.337 59.0629 108.348 59.1816C108.386 59.5771 108.403 59.6144 108.467 59.4323C108.528 59.2562 108.582 59.4861 108.565 59.8495C108.562 59.9017 108.609 59.9267 108.669 59.9055C108.75 59.8767 108.778 59.9346 108.779 60.1335C108.78 60.3208 108.802 60.3697 108.851 60.2977C108.903 60.2215 108.935 60.2633 108.975 60.4581C109.004 60.6029 109.06 60.7037 109.098 60.682C109.173 60.6395 109.177 60.651 109.208 60.9738C109.241 61.3186 109.252 61.3403 109.323 61.1888C109.387 61.0518 109.437 61.2869 109.42 61.6418C109.418 61.6936 109.459 61.7209 109.512 61.7022C109.65 61.6533 109.849 62.0078 109.838 62.2828C109.831 62.4429 109.859 62.5056 109.926 62.4821C109.979 62.4634 110.027 62.4791 110.033 62.5172C110.038 62.5556 110.051 62.6191 110.062 62.6582C110.072 62.6978 110.088 62.8187 110.096 62.9273C110.11 63.1042 110.119 63.1094 110.179 62.981C110.243 62.8433 110.246 62.8441 110.261 62.9989C110.269 63.0877 110.285 63.1926 110.295 63.2318C110.306 63.2713 110.319 63.3538 110.324 63.4154C110.33 63.4769 110.369 63.5072 110.412 63.4829C110.455 63.4587 110.494 63.5049 110.5 63.5863C110.517 63.8535 110.528 63.8818 110.633 63.9415C110.69 63.974 110.733 64.0214 110.73 64.0464C110.701 64.2419 110.748 64.318 110.801 64.1639L110.863 63.9848L110.881 64.1818C110.897 64.365 110.909 64.4624 110.955 64.7912C110.968 64.883 110.989 64.8684 111.034 64.7375L111.097 64.5583L111.114 64.7554C111.124 64.864 111.14 64.9849 111.151 65.0244C111.162 65.0636 111.178 65.1364 111.186 65.1856C111.194 65.2349 111.231 65.2106 111.268 65.1319C111.323 65.0147 111.338 65.0378 111.35 65.2573C111.358 65.405 111.374 65.5584 111.385 65.5979C111.395 65.6371 111.409 65.7036 111.414 65.7453C111.419 65.7871 111.459 65.8013 111.501 65.7771C111.546 65.7517 111.583 65.8196 111.587 65.9342L111.595 66.1353L111.657 65.9562C111.724 65.7625 111.727 65.7707 111.775 66.279C111.808 66.6237 111.82 66.6454 111.891 66.4939C111.958 66.3491 111.992 66.4913 111.989 66.9103C111.988 66.9909 112.028 67.0256 112.095 67.0021C112.164 66.9779 112.206 67.0204 112.214 67.1234C112.22 67.2111 112.234 67.3148 112.243 67.3544C112.253 67.3936 112.266 67.4682 112.27 67.5197C112.276 67.5719 112.319 67.5906 112.37 67.5622C112.432 67.5268 112.445 67.5607 112.414 67.6727C112.389 67.7615 112.389 67.8149 112.415 67.7914C112.44 67.7675 112.528 67.8037 112.61 67.8719C112.691 67.9399 112.751 67.9641 112.743 67.9257C112.708 67.7626 112.752 67.5999 112.821 67.6391C112.909 67.6895 112.846 67.8783 112.683 68.0533C112.619 68.1223 112.592 68.1787 112.623 68.1787C112.654 68.1787 112.611 68.2675 112.529 68.3757C112.446 68.4843 111.969 69.1981 111.468 69.9624C110.968 70.7266 110.507 71.4229 110.445 71.5098C110.353 71.6404 110.352 71.6677 110.44 71.6677C110.498 71.6677 110.542 71.6166 110.537 71.5542C110.533 71.4916 110.571 71.4483 110.623 71.4576C110.679 71.4677 110.699 71.4296 110.672 71.3651C110.643 71.2956 110.665 71.2632 110.733 71.2762C110.799 71.2893 110.831 71.2471 110.815 71.1647C110.802 71.0915 110.824 71.0509 110.865 71.0744C110.906 71.0975 110.934 71.0602 110.929 70.9919C110.923 70.9232 110.957 70.874 111.006 70.8822C111.054 70.8904 111.089 70.8423 111.084 70.7747C111.078 70.7072 111.116 70.6598 111.168 70.6691C111.226 70.6796 111.243 70.6408 111.213 70.5676C111.181 70.4907 111.194 70.4665 111.251 70.499C111.299 70.5266 111.377 70.4803 111.428 70.3945C111.5 70.2698 111.497 70.2501 111.412 70.2911C111.354 70.3191 111.394 70.2717 111.501 70.1859C111.608 70.1004 111.643 70.0515 111.579 70.0777C111.515 70.1038 111.53 70.0743 111.613 70.012C111.696 69.95 111.734 69.8993 111.696 69.8993C111.658 69.8993 111.695 69.8485 111.778 69.7862C111.861 69.7243 111.877 69.6944 111.813 69.7202C111.748 69.7456 111.766 69.7142 111.852 69.6504C111.937 69.587 111.998 69.5198 111.988 69.5019C111.933 69.4105 111.979 69.3235 112.058 69.3683C112.114 69.4 112.127 69.3881 112.092 69.337C112.062 69.2914 112.076 69.2541 112.124 69.2541C112.172 69.2541 112.191 69.2239 112.166 69.1866C112.141 69.1496 112.183 69.0862 112.258 69.0455C112.334 69.0048 112.363 68.9705 112.323 68.9694C112.283 68.9683 112.318 68.9164 112.401 68.8545C112.484 68.7925 112.499 68.7623 112.435 68.788C112.357 68.819 112.363 68.8007 112.453 68.7324C112.528 68.6765 112.566 68.6101 112.539 68.5854C112.513 68.5608 112.548 68.5201 112.618 68.4955C112.688 68.4705 112.726 68.4212 112.702 68.3858C112.678 68.35 112.713 68.3018 112.78 68.2783C112.847 68.2544 112.882 68.2063 112.858 68.1712C112.834 68.1358 112.852 68.107 112.897 68.107C112.943 68.107 112.975 68.0828 112.971 68.0533C112.947 67.9141 112.987 67.8156 113.052 67.8529C113.128 67.8962 113.26 67.6208 113.222 67.4977C113.21 67.4581 113.226 67.4499 113.258 67.4794C113.341 67.5555 113.545 67.263 113.478 67.1637C113.444 67.1126 113.457 67.1006 113.513 67.1324C113.57 67.1648 113.602 67.1283 113.602 67.0316C113.602 66.948 113.63 66.8954 113.663 66.9141C113.696 66.9331 113.783 66.8529 113.856 66.7357C113.933 66.6122 113.948 66.545 113.892 66.5756C113.84 66.6047 113.881 66.5465 113.984 66.4465C114.087 66.3465 114.171 66.2357 114.171 66.1998C114.171 66.1644 114.22 66.1025 114.28 66.0618C114.34 66.0211 114.397 65.939 114.406 65.8786C114.416 65.8185 114.5 65.6935 114.594 65.6009C114.687 65.5084 114.748 65.4088 114.728 65.3793C114.708 65.3502 114.747 65.3069 114.814 65.283C114.88 65.2595 114.913 65.208 114.886 65.1681C114.86 65.1285 114.877 65.0961 114.925 65.0961C114.973 65.0961 114.993 65.067 114.969 65.0319C114.945 64.9964 114.98 64.9483 115.047 64.9248C115.114 64.9013 115.147 64.8494 115.12 64.8098C115.093 64.7699 115.104 64.7375 115.143 64.7375C115.23 64.7375 115.653 64.1643 115.568 64.1628C115.535 64.1621 115.548 64.1382 115.597 64.1091C115.646 64.08 115.973 63.687 116.323 63.2355C117.623 61.5612 118.594 60.6305 119.443 60.2439C123.019 58.6155 125.475 58.4961 128.347 59.8107C135.419 63.0474 138.159 72.9595 135.263 84.8288C135.233 84.9512 135.248 85.0262 135.301 85.0262C135.381 85.0262 135.434 84.8915 135.484 84.5602C135.496 84.4814 135.529 84.4005 135.558 84.3803C135.637 84.3247 136.276 82.8552 136.554 82.0869C136.69 81.7122 136.832 81.3413 136.87 81.2622C137.083 80.8226 137.849 78.1949 138.145 76.8892C138.217 76.5739 138.309 76.1989 138.35 76.0564C138.39 75.9138 138.424 75.7086 138.424 75.6007C138.424 75.4556 138.454 75.4149 138.54 75.4455C138.604 75.4683 138.657 75.4582 138.657 75.4231C138.657 75.3884 138.615 75.347 138.564 75.3309C138.492 75.3089 138.49 75.2123 138.558 74.913C138.606 74.6988 138.689 74.2574 138.743 73.932C138.797 73.6066 138.861 73.3405 138.886 73.3405C138.91 73.3405 138.93 73.1387 138.93 72.8924C138.93 72.5718 138.957 72.4494 139.027 72.4621C139.132 72.4815 139.161 72.3666 139.066 72.3121C138.949 72.2464 139.051 71.3912 139.17 71.4333C139.23 71.4546 139.279 71.4408 139.279 71.4024C139.279 71.3643 139.245 71.333 139.202 71.333C139.085 71.333 139.103 70.2814 139.221 70.1799C139.292 70.1191 139.311 69.8441 139.292 69.1657C139.265 68.1768 139.313 67.7839 139.439 67.9675C139.485 68.0343 139.511 67.8234 139.512 67.3723C139.512 66.9532 139.482 66.673 139.435 66.673C139.392 66.673 139.357 66.5443 139.357 66.3864C139.357 66.2286 139.392 66.0995 139.435 66.0995C139.482 66.0995 139.512 65.8315 139.512 65.4364C139.511 65.0069 139.486 64.8098 139.439 64.877C139.315 65.0584 139.268 64.6852 139.294 63.7117C139.307 63.2109 139.287 62.7918 139.248 62.7803C139.209 62.7683 139.15 62.3892 139.117 61.9377C139.083 61.4865 139.014 60.8861 138.963 60.6037C138.912 60.3212 138.886 59.9921 138.905 59.8726C138.925 59.7529 138.916 59.6689 138.886 59.6861C138.856 59.7029 138.79 59.4514 138.739 59.1267C138.645 58.5248 138.605 58.3285 138.375 57.3173C137.204 52.1763 135.035 48.0388 132.23 45.5958C131.935 45.3394 131.637 45.0976 131.568 45.058C131.232 44.8674 130.447 44.2923 130.438 44.2311C130.416 44.0699 130.403 44.0591 130.343 44.1468C130.28 44.2378 129.634 43.9968 129.566 43.8572C129.552 43.8277 129.491 43.8035 129.43 43.8035C129.369 43.8035 129.32 43.7695 129.32 43.7277C129.32 43.6859 129.29 43.6688 129.253 43.6897C129.145 43.7513 128.777 43.5624 128.775 43.4453C128.773 43.3621 128.758 43.3587 128.709 43.4296C128.627 43.5494 128.364 43.458 128.418 43.3285C128.44 43.2744 128.428 43.23 128.39 43.23C128.352 43.23 128.308 43.268 128.291 43.3147C128.273 43.3632 128.202 43.3788 128.124 43.3509C128.04 43.3214 128.01 43.268 128.046 43.2124C128.093 43.1415 128.08 43.1408 127.988 43.2091C127.839 43.3206 127.507 43.2456 127.562 43.1132C127.585 43.059 127.572 43.015 127.534 43.015C127.496 43.015 127.452 43.0512 127.436 43.0956C127.417 43.1475 127.318 43.1583 127.157 43.1255C127.019 43.0979 126.924 43.0493 126.944 43.018C126.965 42.9867 126.828 42.9773 126.639 42.9967C126.241 43.0382 125.869 42.9706 125.936 42.8695C125.965 42.8262 125.694 42.8005 125.22 42.8008C124.718 42.8016 124.496 42.8251 124.571 42.8687ZM106.849 55.472C106.802 55.4866 106.783 55.553 106.806 55.6194C106.837 55.7097 106.829 55.7164 106.774 55.6459C106.734 55.5941 106.718 55.469 106.739 55.3683C106.773 55.2019 106.784 55.197 106.856 55.3153C106.911 55.4064 106.909 55.4537 106.849 55.472ZM105.142 56.9781C105.081 57.1251 104.878 57.3251 104.815 57.2994C104.791 57.2897 104.767 57.3139 104.761 57.3531C104.756 57.3927 104.747 57.4572 104.742 57.4968C104.736 57.5359 104.687 57.5684 104.632 57.5684C104.577 57.5684 104.526 57.6311 104.52 57.7076C104.513 57.8013 104.545 57.8341 104.62 57.8076C104.681 57.786 104.711 57.7393 104.688 57.7042C104.664 57.6688 104.682 57.6401 104.727 57.6401C104.773 57.6401 104.81 57.6076 104.81 57.5684C104.81 57.5289 104.947 57.3699 105.115 57.2154C105.344 57.0046 105.392 56.924 105.306 56.8941C105.241 56.871 105.171 56.9064 105.142 56.9781ZM104.224 57.9293C104.2 57.9666 104.215 58.0539 104.259 58.1233C104.33 58.2367 104.338 58.2375 104.34 58.13C104.342 58.0643 104.385 57.9975 104.436 57.9819C104.495 57.9636 104.482 57.9363 104.4 57.9072C104.328 57.8819 104.249 57.8919 104.224 57.9293ZM104.007 58.1927C103.983 58.2278 103.993 58.2983 104.027 58.3502C104.075 58.4214 104.104 58.4233 104.147 58.3584C104.179 58.3114 104.17 58.2405 104.127 58.2009C104.083 58.161 104.03 58.1572 104.007 58.1927ZM103.767 58.489C103.74 58.5293 103.756 58.5838 103.802 58.6099C103.922 58.6782 103.999 58.5849 103.899 58.4927C103.843 58.4412 103.8 58.4401 103.767 58.489ZM101.925 60.5611L101.736 60.7574L101.919 60.6148C102.02 60.5361 102.117 60.4798 102.134 60.4898C102.175 60.5141 102.185 60.4316 102.145 60.3943C102.128 60.3783 102.028 60.4533 101.925 60.5611ZM109.794 72.4353C109.712 72.555 109.662 72.6793 109.684 72.711C109.749 72.8092 109.863 72.6976 109.816 72.5823C109.787 72.5144 109.81 72.4819 109.877 72.495C109.944 72.508 109.975 72.4659 109.959 72.3834C109.946 72.3091 109.969 72.27 110.013 72.295C110.055 72.3192 110.108 72.3117 110.131 72.2782C110.153 72.2446 110.121 72.2173 110.058 72.2173C109.995 72.2173 109.877 72.3155 109.794 72.4353ZM13.2969 103.151C13.2374 103.225 12.887 103.653 12.5185 104.103C4.56793 113.801 6.16727 124.855 17.0504 135.432C18.6016 136.94 20.6161 138.625 20.7149 138.497C20.772 138.424 20.7797 138.43 20.7473 138.524C20.6894 138.69 21.0814 138.985 21.181 138.851C21.2288 138.785 21.2418 138.798 21.226 138.894C21.2094 138.991 21.4103 139.175 21.9424 139.553C22.7532 140.127 22.85 140.256 22.4888 140.28C22.3596 140.288 22.2535 140.262 22.2535 140.221C22.2535 140.181 22.2887 140.168 22.3312 140.193C22.3742 140.217 22.409 140.22 22.409 140.2C22.409 140.179 22.3349 140.125 22.2442 140.081C22.1283 140.024 22.0947 140.023 22.132 140.078C22.1611 140.121 22.1478 140.157 22.1024 140.157C22.057 140.157 22.0202 140.112 22.0202 140.057C22.0202 140.002 21.9627 139.937 21.8922 139.912C21.7808 139.872 21.7784 139.882 21.8728 139.988C21.972 140.099 21.9655 140.101 21.7995 140.02C21.6994 139.97 21.6379 139.912 21.663 139.889C21.7367 139.821 21.405 139.643 21.3078 139.698C21.2584 139.726 21.2381 139.719 21.2624 139.683C21.3155 139.603 19.7121 138.677 19.5817 138.711C19.5319 138.724 19.5165 138.712 19.5469 138.684C19.6222 138.614 18.9997 138.205 18.9029 138.26C18.8604 138.284 18.8357 138.274 18.8474 138.238C18.8592 138.202 18.5186 137.921 18.0909 137.613C13.2422 134.13 8.53166 128.104 6.80231 123.172C6.69742 122.873 6.58969 122.58 6.56336 122.521C6.53704 122.462 6.50423 122.349 6.49087 122.27C6.36167 121.511 6.0806 120.631 6.14419 121.185C6.15269 121.258 6.12556 121.298 6.08384 121.274C6.00932 121.232 5.77928 121.98 5.7323 122.417C5.71934 122.536 5.68573 122.669 5.65778 122.711C5.62943 122.753 5.59055 122.985 5.57111 123.226C5.55127 123.468 5.51401 123.697 5.48809 123.735C5.22484 124.128 5.24792 127.615 5.51968 128.464C5.56261 128.597 5.58043 128.732 5.55937 128.764C5.53871 128.795 5.55815 128.96 5.60311 129.13C5.64806 129.3 5.70233 129.551 5.7242 129.689C6.30619 133.358 10.0747 138.298 14.9019 141.72C17.21 143.355 20.8898 145.439 21.1794 145.274C21.2272 145.247 21.245 145.256 21.2191 145.295C21.1936 145.333 21.3641 145.451 21.5982 145.557C22.0854 145.777 22.2721 145.811 21.8647 145.606C21.7148 145.53 21.6209 145.467 21.6557 145.465C21.7723 145.46 22.5848 145.826 22.5422 145.865C22.5191 145.887 22.4272 145.868 22.3381 145.824C22.2486 145.78 22.1757 145.76 22.1757 145.781C22.1757 145.802 22.3596 145.9 22.5844 146C22.8087 146.1 22.914 146.129 22.8176 146.064C22.5823 145.906 22.5949 145.804 22.8371 145.905C22.944 145.95 23.0315 146.043 23.0315 146.111C23.0315 146.179 23.11 146.252 23.2068 146.275C23.3713 146.313 23.3733 146.309 23.2376 146.216C23.1586 146.162 23.1149 146.086 23.1408 146.047C23.1667 146.008 23.1651 145.923 23.1376 145.857C23.1028 145.773 23.0708 145.762 23.0315 145.821C22.9922 145.88 22.9614 145.871 22.9282 145.791C22.9003 145.723 22.9217 145.677 22.9813 145.677C23.1258 145.677 23.1185 132.92 22.974 132.759C22.9209 132.7 22.9003 132.631 22.9278 132.605C22.9557 132.58 22.8764 132.468 22.752 132.357C22.377 132.022 21.8647 131.472 21.8647 131.404C21.8647 131.319 22.1733 131.566 22.1842 131.659C22.1887 131.7 22.39 131.894 22.6313 132.09C23.0262 132.411 23.0432 132.418 22.7982 132.164C22.4681 131.821 21.375 130.797 21.616 131.057C21.8525 131.312 21.8311 131.404 21.5909 131.165C21.4832 131.058 21.4171 130.937 21.4443 130.897C21.5079 130.803 20.7744 130.112 20.6723 130.17C20.6298 130.194 20.6197 130.178 20.6497 130.133C20.6804 130.087 20.463 129.796 20.1458 129.459C15.6621 124.69 13.2637 119.778 12.3638 113.524C12.2297 112.59 12.2293 109.462 12.3634 108.505C12.5902 106.887 12.7842 105.801 13.0102 104.885C13.5071 102.867 13.5026 102.896 13.2969 103.151ZM23.1161 132.468C23.1198 132.497 23.2684 132.633 23.4466 132.769L23.771 133.017L23.4632 132.716C23.1469 132.406 23.1048 132.375 23.1161 132.468ZM125.351 132.53C123.991 132.756 121.911 133.505 122.054 133.718C122.086 133.767 122.073 133.778 122.019 133.748C121.876 133.667 121.57 133.847 121.703 133.934C121.788 133.99 121.783 133.997 121.68 133.967C121.492 133.911 121.101 134.203 121.24 134.295C121.316 134.345 121.305 134.352 121.198 134.32C121.029 134.269 120.816 134.402 120.89 134.512C120.921 134.558 120.902 134.565 120.843 134.532C120.719 134.461 120.12 134.991 120.175 135.123C120.197 135.175 120.184 135.2 120.146 135.179C120.046 135.122 119.882 135.333 119.949 135.433C119.983 135.485 119.974 135.501 119.925 135.473C119.79 135.396 119.072 136.192 119.168 136.312C119.188 136.337 119.181 136.341 119.153 136.322C119.071 136.265 118.879 136.564 118.94 136.655C118.971 136.702 118.961 136.719 118.917 136.693C118.819 136.638 118.639 136.985 118.71 137.091C118.741 137.137 118.725 137.147 118.671 137.117C118.613 137.084 118.524 137.188 118.421 137.41C118.333 137.6 118.21 137.85 118.148 137.966C118.086 138.081 118.062 138.199 118.095 138.228C118.184 138.304 123.03 140.529 123.05 140.502C123.06 140.49 123.148 140.27 123.246 140.014C124.088 137.81 126.673 136.816 128.644 137.937C128.85 138.054 129.039 138.15 129.064 138.15C129.136 138.15 129.646 138.651 129.576 138.654C129.542 138.655 129.576 138.689 129.652 138.73C129.728 138.771 129.77 138.834 129.745 138.871C129.72 138.908 129.739 138.938 129.787 138.938C129.834 138.938 129.854 138.967 129.831 139.002C129.807 139.038 129.843 139.086 129.912 139.11C129.983 139.135 130.017 139.2 129.992 139.261C129.965 139.326 129.992 139.368 130.059 139.368C130.12 139.368 130.157 139.328 130.141 139.279C130.014 138.899 130.021 138.809 130.176 138.846C130.265 138.867 130.331 138.848 130.331 138.8C130.331 138.755 130.367 138.678 130.41 138.631C130.453 138.583 130.593 138.431 130.72 138.293C130.847 138.155 130.952 138 130.953 137.948C130.953 137.897 130.985 137.872 131.023 137.894C131.088 137.931 131.215 137.678 131.194 137.553C131.188 137.52 131.22 137.514 131.264 137.54C131.308 137.565 131.368 137.527 131.398 137.455C131.427 137.384 131.532 137.266 131.631 137.194C131.729 137.123 131.81 137.016 131.81 136.957C131.81 136.899 131.841 136.868 131.879 136.89C131.944 136.927 132.072 136.674 132.05 136.549C132.044 136.517 132.078 136.512 132.124 136.538C132.172 136.566 132.228 136.522 132.252 136.436C132.275 136.353 132.326 136.286 132.364 136.286C132.401 136.286 132.432 136.235 132.432 136.174C132.432 136.112 132.467 136.082 132.51 136.106C132.553 136.131 132.588 136.107 132.588 136.053C132.588 135.998 132.693 135.861 132.821 135.748C132.95 135.635 133.055 135.498 133.055 135.445C133.055 135.392 133.107 135.33 133.171 135.308C133.236 135.285 133.288 135.22 133.288 135.163C133.288 135.105 133.323 135.078 133.366 135.103C133.409 135.127 133.444 135.099 133.444 135.039C133.444 134.98 133.478 134.912 133.521 134.888C133.563 134.864 133.579 134.889 133.556 134.944C133.525 135.018 133.577 135.041 133.754 135.031C133.902 135.023 133.967 135.043 133.923 135.084C133.832 135.168 134.243 135.567 134.46 135.605C134.546 135.621 134.594 135.602 134.569 135.564C134.543 135.526 134.494 135.511 134.459 135.531C134.381 135.575 134.216 135.401 134.191 135.249C134.168 135.105 133.671 134.632 133.591 134.677C133.557 134.696 133.452 134.616 133.358 134.498C133.263 134.38 133.155 134.301 133.118 134.322C133.081 134.343 133.06 134.319 133.072 134.269C133.084 134.218 133.05 134.172 132.996 134.165C132.943 134.158 132.862 134.149 132.817 134.144C132.771 134.139 132.756 134.103 132.782 134.063C132.809 134.024 132.795 133.992 132.752 133.992C132.709 133.992 132.578 133.91 132.462 133.811C132.345 133.711 132.168 133.611 132.069 133.588C131.969 133.565 131.887 133.519 131.887 133.487C131.887 133.43 131.569 133.308 131.507 133.342C131.49 133.351 131.454 133.325 131.427 133.284C131.032 132.695 127.212 132.221 125.351 132.53ZM24.5879 133.727C24.5879 133.739 24.7017 133.844 24.8406 133.96L25.0937 134.171L24.8649 133.938C24.6519 133.721 24.5879 133.672 24.5879 133.727ZM134.583 135.768C134.561 135.8 134.571 135.868 134.605 135.919C134.654 135.991 134.677 135.986 134.713 135.9C134.762 135.782 134.649 135.669 134.583 135.768ZM7.05139 136.438C6.93353 136.982 7.00157 139.069 7.16236 139.837C7.67347 142.276 9.14159 144.284 11.9341 146.361C14.5516 148.307 15.3689 148.776 18.2464 149.978C18.8454 150.228 19.751 150.623 20.2588 150.855C20.7663 151.088 21.2292 151.262 21.2871 151.241C21.3451 151.22 21.4167 151.24 21.4459 151.284C21.4783 151.332 21.4641 151.343 21.4094 151.312C21.3604 151.284 21.3199 151.277 21.3199 151.297C21.3199 151.318 21.6962 151.511 22.1563 151.728C22.6163 151.944 22.91 152.059 22.8091 151.982C22.6091 151.831 22.6759 151.803 22.9841 151.911C23.1424 151.967 23.1716 151.96 23.1364 151.876C23.1125 151.819 23.0618 151.79 23.0234 151.812C22.9853 151.833 22.9537 151.817 22.9537 151.775C22.9537 151.734 22.9813 151.699 23.0149 151.699C23.0485 151.699 23.0748 150.624 23.0732 149.309C23.0708 147.067 23.0789 146.921 23.2068 146.952C23.2818 146.97 23.3429 146.952 23.3429 146.912C23.3429 146.872 23.2992 146.842 23.2457 146.843C22.9339 146.854 22.8666 146.821 22.9148 146.681C22.9744 146.509 22.7419 146.474 22.671 146.644C22.6463 146.703 22.5925 146.733 22.5511 146.709C22.5102 146.686 22.494 146.624 22.5159 146.572C22.5694 146.443 22.1555 146.317 21.8412 146.367C21.6565 146.396 21.6217 146.387 21.7067 146.332C21.8501 146.24 21.6209 146.132 21.467 146.219C21.4127 146.25 21.3937 146.243 21.422 146.201C21.4487 146.161 21.3248 146.09 21.1421 146.04C16.5689 144.81 11.2759 141.242 7.86544 137.092C7.04086 136.088 7.11457 136.148 7.05139 136.438ZM21.631 139.161C21.631 139.196 21.6836 139.225 21.7476 139.225C21.812 139.225 21.8647 139.251 21.8647 139.283C21.8647 139.314 22.0287 139.435 22.2292 139.551C22.607 139.771 22.8982 140.017 22.8415 140.069C22.8237 140.086 22.5702 139.924 22.2782 139.709C21.9866 139.495 21.6691 139.275 21.5727 139.219C21.3758 139.106 21.3353 138.992 21.5143 139.056C21.5783 139.078 21.631 139.126 21.631 139.161ZM130.156 139.692C130.112 139.906 130.142 139.919 130.251 139.731C130.297 139.652 130.302 139.575 130.263 139.553C130.224 139.531 130.177 139.594 130.156 139.692ZM130.098 141.045C130.098 141.104 130.133 141.172 130.176 141.196C130.218 141.221 130.254 141.192 130.254 141.133C130.254 141.074 130.218 141.006 130.176 140.981C130.133 140.957 130.098 140.986 130.098 141.045ZM128.206 144.223C128.182 144.257 128.191 144.328 128.226 144.38C128.274 144.451 128.303 144.453 128.346 144.388C128.378 144.341 128.369 144.27 128.326 144.231C128.282 144.191 128.229 144.187 128.206 144.223ZM126.487 146.24C126.46 146.28 126.476 146.334 126.523 146.361C126.642 146.429 126.72 146.335 126.62 146.243C126.564 146.192 126.52 146.191 126.487 146.24ZM22.409 146.561C22.409 146.57 22.3393 146.578 22.2535 146.578C22.168 146.578 22.0979 146.536 22.0979 146.484C22.0979 146.411 22.1344 146.407 22.2535 146.466C22.3393 146.508 22.409 146.551 22.409 146.561ZM125.236 147.683C125.174 147.774 125.302 147.829 125.42 147.761C125.498 147.717 125.494 147.695 125.399 147.662C125.333 147.638 125.26 147.648 125.236 147.683ZM124.386 148.677C124.311 148.789 124.454 148.891 124.55 148.794C124.624 148.721 124.62 148.693 124.533 148.662C124.473 148.641 124.407 148.647 124.386 148.677ZM22.1425 151.565C22.2085 151.663 22.066 151.639 21.8987 151.523C21.7533 151.423 21.7541 151.421 21.9242 151.46C22.021 151.483 22.1194 151.53 22.1425 151.565ZM22.6419 151.789C22.6427 151.862 22.5827 151.857 22.4041 151.769C22.1822 151.659 22.2207 151.556 22.4475 151.652C22.554 151.698 22.6415 151.759 22.6419 151.789ZM130.292 152.706C130.856 152.787 131.343 152.785 131.343 152.703C131.343 152.66 131.058 152.635 130.623 152.641C129.978 152.649 129.944 152.656 130.292 152.706ZM119.646 154.188C119.623 154.223 119.632 154.293 119.667 154.345C119.715 154.416 119.743 154.418 119.787 154.353C119.819 154.306 119.809 154.236 119.767 154.196C119.723 154.156 119.67 154.152 119.646 154.188ZM118.466 155.569C118.405 155.66 118.532 155.715 118.651 155.648C118.729 155.603 118.724 155.581 118.63 155.548C118.564 155.524 118.49 155.534 118.466 155.569ZM117.611 156.573C117.549 156.664 117.677 156.719 117.795 156.651C117.873 156.607 117.868 156.585 117.774 156.552C117.708 156.528 117.634 156.538 117.611 156.573ZM117.302 156.928C117.248 157.007 117.371 157.093 117.443 157.026C117.517 156.958 117.503 156.861 117.42 156.861C117.379 156.861 117.326 156.891 117.302 156.928Z\" fill=\"url(#paint4_linear)\" />\r\n        <defs>\r\n            <linearGradient id=\"paint0_linear\" x1=\"100.924\" y1=\"10.8267\" x2=\"100.924\" y2=\"157.687\" gradientUnits=\"userSpaceOnUse\">\r\n                <stop offset=\"0.0416667\" stop-color=\"#E47F40\" />\r\n                <stop offset=\"1\" stop-color=\"#CD5A2F\" />\r\n            </linearGradient>\r\n            <linearGradient id=\"paint1_linear\" x1=\"80.9179\" y1=\"10.8256\" x2=\"80.9179\" y2=\"158.008\" gradientUnits=\"userSpaceOnUse\">\r\n                <stop offset=\"0.0416667\" stop-color=\"#E47F40\" />\r\n                <stop offset=\"1\" stop-color=\"#CD5A2F\" />\r\n            </linearGradient>\r\n            <linearGradient id=\"paint2_linear\" x1=\"97.3185\" y1=\"19.2864\" x2=\"97.3185\" y2=\"157.847\" gradientUnits=\"userSpaceOnUse\">\r\n                <stop offset=\"0.0416667\" stop-color=\"#E47F40\" />\r\n                <stop offset=\"1\" stop-color=\"#CD5A2F\" />\r\n            </linearGradient>\r\n            <linearGradient id=\"paint3_linear\" x1=\"73.3877\" y1=\"22.1228\" x2=\"73.3877\" y2=\"117.181\" gradientUnits=\"userSpaceOnUse\">\r\n                <stop offset=\"0.0416667\" stop-color=\"#E47F40\" />\r\n                <stop offset=\"1\" stop-color=\"#CD5A2F\" />\r\n            </linearGradient>\r\n            <linearGradient id=\"paint4_linear\" x1=\"72.4073\" y1=\"14.3457\" x2=\"72.4073\" y2=\"157.05\" gradientUnits=\"userSpaceOnUse\">\r\n                <stop offset=\"0.0416667\" stop-color=\"#E47F40\" />\r\n                <stop offset=\"1\" stop-color=\"#CD5A2F\" />\r\n            </linearGradient>\r\n        </defs>\r\n    </svg>\r\n)\r\n}\r\nexport default Corona;\r\n","import React from 'react';\r\nconst Ieee=()=>{\r\n    return (<svg className=\"linkimg\" width=\"165\" height=\"54\" viewBox=\"0 0 165 54\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M53.7134 41.9389V7.77563H62.9989V41.9389H53.7134Z\" fill=\"url(#paint0_linear)\" />\r\n        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M67.9146 41.9389V7.77563H94.1326V14.3879H77.7463V21.5511H92.4939V28.1634H77.7463V35.3266H94.1326V41.9389H67.9146Z\" fill=\"url(#paint1_linear)\" />\r\n        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M99.0483 41.9389V7.77563H125.266V14.3879H108.88V21.5511H124.174V28.1634H108.88V35.3266H125.266V41.9389H99.0483Z\" fill=\"url(#paint2_linear)\" />\r\n        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M130.729 41.9389V7.77563H156.4V14.3879H140.014V21.5511H155.308V28.1634H140.014V35.3266H156.4V41.9389H130.729Z\" fill=\"url(#paint3_linear)\" />\r\n        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M27.4954 4.46948C29.134 6.12254 30.7726 8.32662 31.8651 9.97969L35.6885 13.8368C39.512 17.143 42.7892 19.8981 46.6127 22.6532C47.1589 23.2042 47.7051 23.7552 47.7051 24.3062C47.7051 25.4083 46.0665 25.9593 45.5203 26.5103C37.8734 32.0205 31.3188 38.6327 25.8568 46.347L25.3106 46.8981C25.3106 46.8981 24.7643 46.8981 24.2181 46.8981C23.6719 46.347 23.6719 45.796 23.1257 45.796C22.0333 43.5919 20.3947 41.9389 19.3023 40.2858C18.2098 39.7348 17.6636 38.6327 17.1174 38.0817C12.7478 33.1225 7.83189 28.7144 2.91601 25.4083C2.3698 24.8572 1.82359 24.3062 2.3698 23.7552C2.3698 23.2042 2.91601 22.6532 3.46222 22.6532C10.0167 18.245 16.025 12.1838 20.9409 6.12254L23.6719 1.71438C24.2181 1.71438 24.7643 1.16336 25.3106 1.71438C25.3106 1.71438 25.8568 1.71438 25.8568 2.2654L27.4954 4.46948ZM23.1257 7.7756C22.0333 8.87765 20.3947 9.97969 19.3023 11.0817C18.7561 11.0817 18.7561 11.6327 18.7561 11.6327C15.4788 14.3878 12.2016 17.694 10.0167 21.0001C8.9243 22.1021 8.37809 22.6532 7.83189 23.7552C7.83189 24.8572 7.83189 25.4083 8.37809 25.4083C10.5629 28.7144 13.294 32.0205 16.5712 34.7756C18.7561 36.9797 21.4871 39.7348 24.2181 40.8368C25.3106 41.3878 26.403 40.8368 26.9492 40.2858C30.7726 37.5307 34.5961 34.2246 37.8734 30.3674C38.9658 28.7144 40.6044 27.0613 41.6968 24.8572C41.6968 23.7552 41.6968 23.2042 41.1506 22.6532C38.4196 18.796 35.6885 15.4899 31.8651 12.1838C30.7726 11.0817 29.134 9.97969 28.0416 8.87765C26.9492 7.7756 24.7643 6.67356 23.1257 7.7756Z\" fill=\"url(#paint4_linear)\" />\r\n        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M28.0412 9.97959C32.4109 13.8367 36.7806 18.2449 40.0578 23.2041C40.604 23.7551 41.1502 24.8571 40.604 25.4082C39.5116 26.5102 38.4192 28.1633 37.3268 29.2653C34.5957 32.5714 31.8647 35.3265 28.5875 38.0816C26.9488 38.6327 25.8564 40.8367 23.6716 39.7347C19.3019 36.4286 14.9322 32.0204 11.1088 27.6122C10.5626 27.0612 9.47015 25.9592 9.47015 24.8571C8.92395 23.7551 10.0164 22.6531 10.5626 21.551C14.386 16.5918 19.3019 12.1837 23.6716 8.87755C25.3102 7.77551 26.9488 9.42857 28.0412 9.97959ZM24.764 11.6326L24.2178 13.2857L22.5792 19.3469C22.5792 19.3469 23.6716 19.3469 24.2178 19.3469L23.6716 26.5102C24.2178 26.5102 25.3102 26.5102 25.8564 26.5102V25.9592V19.3469H27.495C26.4026 16.5918 25.8564 14.3878 24.764 11.6326ZM17.6633 21.551C16.5709 22.102 14.9322 22.6531 14.9322 24.3061C15.4784 25.4082 16.0247 25.9592 17.1171 26.5102C20.9405 28.1633 26.4026 28.1633 31.3185 27.0612C31.8647 26.5102 33.5033 25.9592 34.0495 24.3061C34.0495 23.2041 32.4109 22.6531 31.8647 22.102C31.8647 22.102 32.4109 22.102 32.9571 22.102C31.3185 21.551 29.6799 21 28.5875 21C28.5875 21.551 29.1337 22.102 29.1337 22.6531C29.6799 22.6531 30.2261 22.6531 30.2261 22.6531C31.3185 22.6531 32.4109 23.2041 32.4109 24.3061C32.4109 24.8571 31.3185 25.4082 30.7723 25.9592C27.495 27.0612 24.2178 27.0612 20.3943 26.5102C19.8481 25.9592 18.2095 25.4082 18.2095 24.3061C18.7557 22.6531 20.3943 22.6531 22.0329 22.102C21.4867 21.551 20.3943 21 19.8481 20.449C19.3019 21 18.2095 21 17.6633 21.551ZM23.6716 28.1633C23.6716 30.3673 23.6716 33.1224 23.1254 35.3265C24.2178 35.3265 25.3102 35.3265 26.4026 35.3265L25.8564 28.7143V28.1633C25.3102 28.1633 24.764 28.1633 23.6716 28.1633Z\" fill=\"url(#paint5_linear)\" />\r\n        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M34.0498 43.0407V42.4897H34.596H35.1422C35.1422 43.0407 35.1422 43.0407 34.596 43.0407H34.0498ZM34.0498 43.5918H34.596L35.1422 44.6938H35.6884L35.1422 43.5918C35.1422 43.5918 35.6884 43.0407 35.6884 42.4897C35.6884 41.9387 35.1422 41.9387 34.596 41.9387H33.5035V44.6938H34.0498V43.5918ZM36.7808 43.0407C36.7808 41.9387 35.6884 40.8367 34.596 40.8367C33.5035 40.8367 32.4111 41.9387 32.4111 43.0407C32.4111 44.6938 33.5035 45.7958 34.596 45.7958C35.6884 45.7958 36.7808 44.6938 36.7808 43.0407ZM36.2346 43.0407C36.2346 44.1428 35.6884 45.2448 34.596 45.2448C33.5035 45.2448 32.9573 44.1428 32.9573 43.0407C32.9573 41.9387 33.5035 41.3877 34.596 41.3877C35.6884 41.3877 36.2346 41.9387 36.2346 43.0407Z\" fill=\"url(#paint6_linear)\" />\r\n        <defs>\r\n            <linearGradient id=\"paint0_linear\" x1=\"58.3562\" y1=\"7.77563\" x2=\"58.3562\" y2=\"41.9389\" gradientUnits=\"userSpaceOnUse\">\r\n                <stop stop-color=\"#E47F40\" />\r\n                <stop offset=\"1\" stop-color=\"#CD5A2F\" />\r\n            </linearGradient>\r\n            <linearGradient id=\"paint1_linear\" x1=\"81.0236\" y1=\"7.77563\" x2=\"81.0236\" y2=\"41.9389\" gradientUnits=\"userSpaceOnUse\">\r\n                <stop stop-color=\"#E47F40\" />\r\n                <stop offset=\"1\" stop-color=\"#CD5A2F\" />\r\n            </linearGradient>\r\n            <linearGradient id=\"paint2_linear\" x1=\"112.157\" y1=\"7.77563\" x2=\"112.157\" y2=\"41.9389\" gradientUnits=\"userSpaceOnUse\">\r\n                <stop stop-color=\"#E47F40\" />\r\n                <stop offset=\"1\" stop-color=\"#CD5A2F\" />\r\n            </linearGradient>\r\n            <linearGradient id=\"paint3_linear\" x1=\"143.564\" y1=\"7.77563\" x2=\"143.564\" y2=\"41.9389\" gradientUnits=\"userSpaceOnUse\">\r\n                <stop stop-color=\"#E47F40\" />\r\n                <stop offset=\"1\" stop-color=\"#CD5A2F\" />\r\n            </linearGradient>\r\n            <linearGradient id=\"paint4_linear\" x1=\"24.9243\" y1=\"1.46948\" x2=\"24.9243\" y2=\"46.8981\" gradientUnits=\"userSpaceOnUse\">\r\n                <stop stop-color=\"#E47F40\" />\r\n                <stop offset=\"1\" stop-color=\"#CD5A2F\" />\r\n            </linearGradient>\r\n            <linearGradient id=\"paint5_linear\" x1=\"25.0758\" y1=\"8.50684\" x2=\"25.0758\" y2=\"40.039\" gradientUnits=\"userSpaceOnUse\">\r\n                <stop stop-color=\"#E47F40\" />\r\n                <stop offset=\"1\" stop-color=\"#CD5A2F\" />\r\n            </linearGradient>\r\n            <linearGradient id=\"paint6_linear\" x1=\"34.596\" y1=\"40.8367\" x2=\"34.596\" y2=\"45.7958\" gradientUnits=\"userSpaceOnUse\">\r\n                <stop stop-color=\"#E47F40\" />\r\n                <stop offset=\"1\" stop-color=\"#CD5A2F\" />\r\n            </linearGradient>\r\n        </defs>\r\n    </svg>\r\n)\r\n}\r\nexport default Ieee;\r\n","module.exports = \"/_next/static/images/image 2-9d4ab144e0323a487907740965aa2f57.png\";","\r\nimport React from 'react';\r\nconst Josaa = () => {\r\n    return (<svg className=\"linkimg\" width=\"152\" height=\"131\" viewBox=\"0 0 152 131\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n        <title>josaa</title>\r\n        <g clip-path=\"url(#clip0)\">\r\n            <path d=\"M60.6495 128.792C40.6336 123.493 25.7346 111.276 16.8554 92.8775C12.1901 83.6045 11.2871 79.9247 10.8356 69.1798C9.33068 38.2697 26.0356 13.3944 55.2317 2.94382C63.2079 0.147191 66.8198 -0.294382 80.8158 0.147191C95.7148 0.735955 98.1228 1.17753 107.453 5.74045C140.562 21.6371 154.408 60.4955 138.606 93.4663C125.061 121.874 91.802 136.888 60.6495 128.792Z\" fill=\"url(#paint0_linear)\" />\r\n            <path d=\"M60.6495 128.792C40.6336 123.493 25.7346 111.276 16.8554 92.8775C12.1901 83.6045 11.2871 79.9247 10.8356 69.1798C9.33068 38.2697 26.0356 13.3944 55.2317 2.94382C63.2079 0.147191 66.8198 -0.294382 80.8158 0.147191C95.7148 0.735955 98.1228 1.17753 107.453 5.74045C140.562 21.6371 154.408 60.4955 138.606 93.4663C125.061 121.874 91.802 136.888 60.6495 128.792ZM85.9327 103.181C84.5782 102.298 84.2772 100.237 85.0297 95.8214C85.7822 90.9641 85.6317 89.7865 83.8257 89.7865C81.5683 89.7865 79.7624 94.0551 79.7624 99.7955C79.7624 105.83 76.7525 103.034 76.602 96.8517C76.4515 93.3191 76.1505 91.8472 75.699 93.4663C75.398 95.0854 74.796 97.882 74.3445 99.7955C73.2911 104.506 69.8297 103.77 67.8732 98.4708C65.6158 91.9944 65.7663 90.9641 69.2277 91.9944C74.3445 93.6135 73.1406 84.4876 66.9703 75.0674C64.1109 70.6517 61.703 66.5303 61.703 65.9416C61.703 65.3528 60.6495 64.7641 59.4455 64.7641C57.6396 64.7641 57.4891 65.5 58.3921 67.4135C60.3485 70.9461 64.5624 89.345 65.0138 96.4101C65.3148 99.6483 66.2178 102.739 66.9703 103.328C67.8732 103.917 72.8396 104.506 78.2574 104.506C84.2772 104.506 87.2871 103.917 85.9327 103.181ZM97.9723 95.527C100.38 90.6697 100.531 89.7865 98.5742 89.7865C96.7683 89.7865 90.297 99.5011 90.297 102.151C90.297 104.8 95.4138 100.237 97.9723 95.527ZM59.295 99.7955C53.4257 90.3753 49.6633 85.0764 49.6633 86.2539C49.6633 89.0506 55.5327 99.7955 57.4891 100.531C60.499 101.709 60.499 101.709 59.295 99.7955ZM96.4673 81.1023C97.3703 78.4528 99.7782 73.7427 101.885 70.9461C103.842 68.0023 105.046 64.7641 104.594 63.7337C104.293 62.5562 104.444 61.9674 105.196 62.409C105.798 62.8506 108.657 59.9067 111.216 55.7854L116.032 48.2787L112.119 41.8023C108.808 36.3562 99.9287 27.9663 97.5208 27.9663C96.0158 27.9663 98.2733 35.3258 100.23 36.9449C101.434 37.8281 102.337 40.4775 102.337 42.8326C102.337 47.1011 104.444 49.7506 105.798 47.1011C106.249 46.218 106.4 46.3652 106.249 47.3955C105.648 49.4562 104.895 49.4562 100.079 47.6899C97.2198 46.5124 97.2198 46.6596 99.7782 50.4865C102.487 54.7551 103.24 58.8764 100.982 58.8764C100.23 58.8764 98.4237 59.9067 97.0693 61.2315C95.2634 62.9978 95.1129 64.0281 96.4673 65.6472C97.6713 67.1191 97.5208 68.1494 95.7148 69.9157C92.8554 72.7124 92.5544 78.0112 95.2634 78.0112C96.3168 78.0112 96.0158 78.6 94.6614 79.4832C93.3069 80.2191 91.6515 83.3101 91.2 86.2539C90.598 89.0506 89.8455 92.5832 89.394 93.9079C88.0396 98.1764 94.6614 86.4011 96.4673 81.1023ZM58.8435 83.0157C56.8871 74.9202 54.9307 72.2708 52.5228 74.6259C50.8673 76.245 53.7267 85.3708 55.8336 85.3708C56.5861 85.3708 57.0376 85.8124 56.8871 86.5483C56.7366 87.1371 57.1881 89.1978 57.9406 91.2584C60.0475 97.5877 60.8 91.5528 58.8435 83.0157ZM81.7188 64.9112C80.6653 63.2921 76.602 68.591 77.2039 70.9461C78.4079 75.0674 77.5049 74.1843 72.2376 66.236C69.5287 62.1146 66.9703 59.1708 66.5188 59.4652C66.2178 59.9067 67.1208 61.9674 68.6257 64.1753C74.495 72.1236 76.7525 77.4225 76.903 83.8989C77.0534 89.7865 77.3544 89.0506 79.6119 78.0112C80.9663 71.0933 82.0198 65.2056 81.7188 64.9112ZM88.6416 71.8292L88.4911 64.0281L86.5346 69.1798C83.8257 76.0978 83.8257 79.4832 86.5346 79.4832C88.3406 79.4832 88.7921 77.7169 88.6416 71.8292ZM110.463 70.5045C115.279 59.7596 114.677 57.6989 109.56 66.5303C102.337 78.6 102.036 79.4832 104.293 79.4832C105.497 79.4832 108.206 75.3618 110.463 70.5045ZM117.988 71.2405C119.945 66.3832 118.891 64.0281 116.634 68.2966C113.925 73.1539 113.925 73.5955 115.731 73.5955C116.483 73.5955 117.537 72.5652 117.988 71.2405ZM50.7168 48.1315C49.5129 47.1011 47.8574 45.0405 46.9544 43.4214C45.299 40.6247 45.299 40.6247 45.1485 44.0101C45.1485 45.9236 46.3525 48.4258 47.7069 49.4562C51.0178 51.6641 53.7267 50.4865 50.7168 48.1315ZM55.6832 31.4989C57.7901 30.7629 63.5089 30.027 68.4752 30.027C79.9128 29.7326 90.1465 28.5551 91.3505 27.3775C94.6614 24.1393 80.6653 22.6674 68.7762 25.0225C57.6396 27.3775 52.9742 29.4382 48.9109 34.0011C45.901 37.5337 45.901 37.5337 48.9109 35.1787C50.5663 33.8539 53.5762 32.0876 55.6832 31.4989Z\" fill=\"url(#paint1_linear)\" />\r\n            <path d=\"M60.6495 128.792C40.6336 123.493 25.7346 111.276 16.8554 92.8775C12.1901 83.6045 11.2871 79.9247 10.8356 69.1798C9.33068 38.2697 26.0356 13.3944 55.2317 2.94382C63.2079 0.147191 66.8198 -0.294382 80.8158 0.147191C95.7148 0.735955 98.1228 1.17753 107.453 5.74045C140.562 21.6371 154.408 60.4955 138.606 93.4663C125.061 121.874 91.802 136.888 60.6495 128.792ZM90.297 103.181C92.5544 102.592 95.4138 99.7955 97.5208 95.9686C100.832 90.0809 100.982 89.7865 98.1228 89.7865C96.3168 89.7865 94.3604 91.7 92.5544 95.527C91.2 98.7652 88.6416 101.709 86.9861 102.003C84.1267 102.739 83.9762 102.298 85.0297 96.1157C85.9327 90.2281 85.6317 89.6393 83.3742 90.0809C81.4178 90.3753 80.0633 92.7303 79.1604 97.1461L77.6554 103.77L77.0534 98.618C76.903 95.8214 77.9564 86.9899 79.4614 79.1888L82.3208 64.9112L77.8059 65.7944C74.0435 66.5303 72.6891 65.9416 69.6792 62.409C67.2713 59.4652 66.2178 58.8764 66.2178 60.4955C66.2178 61.8202 67.2713 63.7337 68.6257 64.9112C72.9901 68.4438 75.2475 74.9202 75.2475 84.3405C75.2475 101.856 71.6356 108.774 67.8732 98.4708C65.6158 91.9944 65.7663 91.4056 69.2277 92.2888C74.3445 93.6135 73.1406 84.4876 66.9703 75.0674C64.1109 70.6517 61.703 66.5303 61.703 65.9416C61.703 65.3528 60.6495 64.7641 59.295 64.7641C57.4891 64.7641 57.1881 65.5 57.9406 67.4135C60.3485 72.7124 64.7129 92.2888 64.7129 97.2933C64.7129 100.237 65.1643 103.034 65.7663 103.475C66.9703 104.8 85.3307 104.506 90.297 103.181ZM57.1881 96.8517C55.5327 94.2023 53.2752 90.5225 52.3723 88.7562C51.4693 86.8427 50.1148 85.3708 49.5129 85.3708C47.5564 85.3708 54.7802 99.9427 57.1881 100.531C58.3921 100.973 59.7465 101.267 59.897 101.415C60.198 101.415 58.994 99.3539 57.1881 96.8517ZM96.4673 81.1023C97.3703 78.4528 99.7782 73.7427 101.885 70.9461C103.842 68.0023 105.046 64.7641 104.594 63.7337C104.293 62.5562 104.444 61.9674 105.196 62.409C105.798 62.8506 108.657 59.9067 111.216 55.7854L116.032 48.2787L112.119 41.8023C108.808 36.3562 99.9287 27.9663 97.5208 27.9663C96.0158 27.9663 98.2733 35.3258 100.23 36.9449C101.434 37.8281 102.337 40.4775 102.337 42.8326C102.337 45.0405 103.089 47.3955 103.842 47.8371C104.745 48.2787 105.347 47.9843 105.347 46.9539C105.347 45.9236 105.798 45.482 106.249 46.0708C106.701 46.5124 106.701 47.5427 106.099 48.4258C105.497 49.6034 103.691 49.309 100.681 47.8371C96.3168 45.6292 96.3168 45.6292 96.4673 49.6034C96.6178 52.2528 96.9188 52.8416 97.3703 51.0753C98.1228 48.4258 98.1228 48.4258 100.23 51.0753C101.283 52.5472 102.337 54.7551 102.337 56.0798C102.337 58.7292 98.4237 60.9371 96.1663 59.4652C95.4138 59.0236 94.8119 60.3483 94.8119 62.409C94.8119 64.4697 95.7148 66.236 96.7683 66.236C97.8218 66.3832 97.3703 67.2663 95.7148 68.4438C93.7584 69.9157 93.1564 71.8292 93.6079 74.9202C93.9089 77.2753 93.7584 79.0416 93.3069 78.7472C92.7049 78.3056 91.501 81.5438 90.598 85.8124C89.695 89.9337 88.6416 94.791 88.0396 96.4101C86.5346 101.12 94.5109 86.5483 96.4673 81.1023ZM108.958 90.8169C114.527 83.7517 118.891 73.5955 118.741 67.7079C118.741 62.8506 118.59 62.9978 113.473 72.8596C110.463 78.6 106.099 86.6955 103.691 90.9641C99.7782 97.7348 99.6277 98.618 102.186 97.1461C103.842 96.4101 106.851 93.4663 108.958 90.8169ZM58.2416 80.9551C56.7366 75.8034 55.5327 74.3315 52.9742 74.1843C51.1683 74.0371 49.6633 74.1843 49.6633 74.3315C49.6633 76.5393 54.6297 85.3708 55.8336 85.3708C56.5861 85.3708 57.0376 85.9596 56.4356 86.8427C55.9841 87.5787 56.4356 89.6393 57.4891 91.2584C59.4455 94.3494 59.4455 94.3494 59.897 90.9641C60.0475 89.0506 59.4455 84.6348 58.2416 80.9551ZM88.7921 71.8292C88.7921 62.9978 86.6851 63.7337 84.5782 73.3011C83.2237 78.8944 83.3742 79.4832 85.9327 79.4832C88.3406 79.4832 88.7921 78.3056 88.7921 71.8292ZM106.851 79.0416C106.851 78.8944 109.259 73.0068 112.269 66.236C118.44 51.8112 117.537 52.2528 107.905 68.1494C101.735 78.1584 101.283 79.4832 103.842 79.4832C105.497 79.4832 106.851 79.336 106.851 79.0416ZM50.7168 48.1315C49.5129 47.1011 47.8574 45.0405 46.9544 43.4214C45.299 40.6247 45.299 40.6247 45.1485 44.0101C45.1485 45.9236 46.3525 48.4258 47.7069 49.4562C51.0178 51.6641 53.7267 50.4865 50.7168 48.1315ZM55.6832 31.4989C57.7901 30.7629 63.5089 30.027 68.4752 30.027C79.9128 29.7326 90.1465 28.5551 91.3505 27.3775C94.6614 24.1393 80.6653 22.6674 68.7762 25.0225C57.6396 27.3775 52.9742 29.4382 48.9109 34.0011C45.901 37.5337 45.901 37.5337 48.9109 35.1787C50.5663 33.8539 53.5762 32.0876 55.6832 31.4989Z\" fill=\"white\" />\r\n            <path d=\"M60.6495 128.792C40.6336 123.493 25.7346 111.276 16.8554 92.8775C12.1901 83.6045 11.2871 79.9247 10.8356 69.1798C9.33068 38.2697 26.0356 13.3944 55.2317 2.94382C63.2079 0.147191 66.8198 -0.294382 80.8158 0.147191C95.7148 0.735955 98.1228 1.17753 107.453 5.74045C140.562 21.6371 154.408 60.4955 138.606 93.4663C125.061 121.874 91.802 136.888 60.6495 128.792ZM71.9366 117.753C71.9366 113.19 71.7861 113.043 70.8832 116.281C69.3782 121.433 65.3148 121.138 65.7663 115.987C65.9168 113.631 65.4653 111.865 64.5624 111.865C63.8099 111.865 63.2079 114.22 63.2079 117.017C63.2079 121.138 63.8099 122.169 66.2178 122.169C68.3247 122.169 69.2277 123.199 69.3782 125.554C69.3782 128.645 69.5287 128.645 70.7327 125.848C71.4851 124.229 71.9366 120.549 71.9366 117.753ZM81.4178 117.9C80.5148 113.19 76.7525 109.51 76.7525 113.19C76.7525 114.073 77.5049 114.809 78.2574 114.809C80.2138 114.809 80.2138 120.255 78.2574 121.433C77.3544 122.021 77.5049 123.052 78.7089 124.229C81.4178 127.173 82.7723 123.935 81.4178 117.9ZM88.7921 118.93C88.0396 110.393 90.7485 109.216 94.0594 116.722C95.4138 119.666 96.1663 120.402 96.3168 118.783C96.3168 115.103 93.6079 110.393 91.3505 110.393C87.1366 110.54 85.4812 112.896 86.5346 117.606C87.7386 122.905 89.0931 123.788 88.7921 118.93ZM57.7901 116.87C60.8 114.073 60.8 111.276 57.9406 108.921C52.8237 104.8 45.7505 112.307 50.5663 117.017C53.4257 119.813 54.9307 119.813 57.7901 116.87ZM110.313 118.194C110.614 117.458 110.012 113.779 109.109 109.657C108.055 105.683 107.152 103.328 107.002 104.506C106.701 108.038 100.982 110.982 98.4237 108.774C93.6079 104.947 96.7683 109.657 102.036 114.22C107.905 119.372 109.259 119.961 110.313 118.194ZM48.7604 104.653C48.4594 104.358 46.9544 105.094 45.4495 106.419C43.9445 107.891 41.3861 109.069 39.7307 109.069C37.1723 109.216 37.1723 109.363 39.5802 109.952C40.9346 110.246 42.1386 111.424 42.1386 112.307C42.1386 113.337 43.794 112.16 45.7505 109.657C47.7069 107.302 49.0614 104.947 48.7604 104.653ZM39.4297 103.475C40.9346 102.151 42.1386 100.531 42.1386 99.7955C42.1386 97.882 36.5703 101.12 35.5168 103.77C34.4634 106.714 35.9683 106.566 39.4297 103.475ZM90.297 103.181C92.5544 102.592 95.4138 99.7955 97.5208 95.9686C100.832 90.0809 100.982 89.7865 98.1228 89.7865C96.3168 89.7865 94.3604 91.7 92.5544 95.527C91.2 98.7652 88.6416 101.709 86.9861 102.003C84.1267 102.739 83.9762 102.298 85.0297 96.1157C85.9327 90.2281 85.6317 89.6393 83.3742 90.0809C81.4178 90.3753 80.0633 92.7303 79.1604 97.1461L77.6554 103.77L77.0534 98.618C76.903 95.8214 77.9564 86.9899 79.4614 79.1888L82.3208 64.9112L77.8059 65.7944C74.0435 66.5303 72.6891 65.9416 69.6792 62.409C67.2713 59.4652 66.2178 58.8764 66.2178 60.4955C66.2178 61.8202 67.2713 63.7337 68.6257 64.9112C72.9901 68.4438 75.2475 74.9202 75.2475 84.3405C75.2475 101.856 71.6356 108.774 67.8732 98.4708C65.6158 91.9944 65.7663 91.4056 69.2277 92.2888C74.3445 93.6135 73.1406 84.4876 66.9703 75.0674C64.1109 70.6517 61.703 66.5303 61.703 65.9416C61.703 65.3528 60.6495 64.7641 59.295 64.7641C57.4891 64.7641 57.1881 65.5 57.9406 67.4135C60.3485 72.7124 64.7129 92.2888 64.7129 97.2933C64.7129 100.237 65.1643 103.034 65.7663 103.475C66.9703 104.8 85.3307 104.506 90.297 103.181ZM35.2158 97.2933C37.4733 94.9382 37.7742 93.7607 36.4198 92.7303C35.3663 91.8472 34.9148 91.7 35.3663 92.2888C36.5703 93.7607 31.6039 98.4708 29.497 97.7348C28.594 97.4405 27.6911 98.4708 27.5406 100.09C27.3901 102.445 27.8416 102.739 29.798 101.709C31.303 100.973 33.7109 98.9124 35.2158 97.2933ZM124.008 94.0551C122.503 92.436 120.697 91.2584 119.945 91.2584C119.042 91.2584 119.493 92.436 120.848 93.9079C122.352 95.3798 123.406 97.4405 123.406 98.3236C123.406 100.826 119.644 100.531 117.386 97.882C116.333 96.7045 114.677 95.6742 113.774 95.6742C112.871 95.6742 114.075 97.4405 116.483 99.6483L120.998 103.328L123.707 100.09C126.265 96.9989 126.265 96.5573 124.008 94.0551ZM57.1881 96.8517C55.5327 94.2023 53.2752 90.5225 52.3723 88.7562C51.4693 86.8427 50.1148 85.3708 49.5129 85.3708C47.5564 85.3708 54.7802 99.9427 57.1881 100.531C58.3921 100.973 59.7465 101.267 59.897 101.415C60.198 101.415 58.994 99.3539 57.1881 96.8517ZM96.4673 81.1023C97.3703 78.4528 99.7782 73.7427 101.885 70.9461C103.842 68.0023 105.046 64.7641 104.594 63.7337C104.293 62.5562 104.444 61.9674 105.196 62.409C105.798 62.8506 108.657 59.9067 111.216 55.7854L116.032 48.2787L112.119 41.8023C108.808 36.3562 99.9287 27.9663 97.5208 27.9663C96.0158 27.9663 98.2733 35.3258 100.23 36.9449C101.434 37.8281 102.337 40.4775 102.337 42.8326C102.337 45.0405 103.089 47.3955 103.842 47.8371C104.745 48.2787 105.347 47.9843 105.347 46.9539C105.347 45.9236 105.798 45.482 106.249 46.0708C106.701 46.5124 106.701 47.5427 106.099 48.4258C105.497 49.6034 103.691 49.309 100.681 47.8371C96.3168 45.6292 96.3168 45.6292 96.4673 49.6034C96.6178 52.2528 96.9188 52.8416 97.3703 51.0753C98.1228 48.4258 98.1228 48.4258 100.23 51.0753C101.283 52.5472 102.337 54.7551 102.337 56.0798C102.337 58.7292 98.4237 60.9371 96.1663 59.4652C95.4138 59.0236 94.8119 60.3483 94.8119 62.409C94.8119 64.4697 95.7148 66.236 96.7683 66.236C97.8218 66.3832 97.3703 67.2663 95.7148 68.4438C93.7584 69.9157 93.1564 71.8292 93.6079 74.9202C93.9089 77.2753 93.7584 79.0416 93.3069 78.7472C92.7049 78.3056 91.501 81.5438 90.598 85.8124C89.695 89.9337 88.6416 94.791 88.0396 96.4101C86.5346 101.12 94.5109 86.5483 96.4673 81.1023ZM108.958 90.8169C114.527 83.7517 118.891 73.5955 118.741 67.7079C118.741 62.8506 118.59 62.9978 113.473 72.8596C110.463 78.6 106.099 86.6955 103.691 90.9641C99.7782 97.7348 99.6277 98.618 102.186 97.1461C103.842 96.4101 106.851 93.4663 108.958 90.8169ZM36.1188 84.9292C39.7307 83.6045 28.2931 84.0461 24.0792 85.3708C20.3168 86.5483 20.3168 86.5483 24.6812 86.6955C28.895 86.8427 28.895 86.9899 26.6376 89.4921C22.1228 94.3494 23.9287 94.9382 29.0455 90.2281C31.6039 87.7259 34.9148 85.3708 36.1188 84.9292ZM58.2416 80.9551C56.7366 75.8034 55.5327 74.3315 52.9742 74.1843C51.1683 74.0371 49.6633 74.1843 49.6633 74.3315C49.6633 76.5393 54.6297 85.3708 55.8336 85.3708C56.5861 85.3708 57.0376 85.9596 56.4356 86.8427C55.9841 87.5787 56.4356 89.6393 57.4891 91.2584C59.4455 94.3494 59.4455 94.3494 59.897 90.9641C60.0475 89.0506 59.4455 84.6348 58.2416 80.9551ZM131.984 87.4315C133.339 83.8989 130.479 80.2191 126.265 80.2191C122.653 80.2191 120.848 83.6045 122.503 87.7259C123.556 90.5225 130.78 90.3753 131.984 87.4315ZM88.7921 71.8292C88.7921 62.9978 86.6851 63.7337 84.5782 73.3011C83.2237 78.8944 83.3742 79.4832 85.9327 79.4832C88.3406 79.4832 88.7921 78.3056 88.7921 71.8292ZM106.851 79.0416C106.851 78.8944 109.259 73.0068 112.269 66.236C118.44 51.8112 117.537 52.2528 107.905 68.1494C101.735 78.1584 101.283 79.4832 103.842 79.4832C105.497 79.4832 106.851 79.336 106.851 79.0416ZM133.188 75.0674C131.533 74.3315 128.824 73.7427 127.168 73.7427C124.61 73.5955 124.61 73.8899 126.416 75.0674C127.62 75.8034 130.329 76.3921 132.436 76.3921C135.897 76.3921 135.897 76.245 133.188 75.0674ZM28.594 72.8596C28.594 70.2101 15.802 69.7685 14.1465 72.418C13.394 73.5955 14.7485 73.7427 19.2634 73.1539C22.8752 72.5652 25.7346 72.7124 26.3366 73.5955C27.6911 75.6562 28.594 75.3618 28.594 72.8596ZM131.081 67.7079C132.586 67.7079 133.941 68.591 134.242 69.4742C134.693 70.7989 135.596 70.6517 137.402 68.8854C139.358 67.1191 139.509 66.3832 137.853 65.7944C134.693 64.6169 125.964 66.9719 125.212 69.1798C124.61 70.9461 124.911 71.0933 126.566 69.6214C127.62 68.591 129.727 67.7079 131.081 67.7079ZM28.2931 62.5562C28.594 59.9067 28.594 59.9067 27.0891 62.2618C25.1327 65.2056 22.1228 65.5 19.7148 62.7034C17.4574 60.0539 21.0693 56.9629 24.8317 58.4348C26.7881 59.0236 27.2396 58.8764 26.4871 57.6989C23.3267 52.5472 15.3505 58.4348 18.3604 63.7337C20.3168 67.4135 27.6911 66.5303 28.2931 62.5562ZM133.038 60.9371C134.543 60.3483 135.295 58.4348 135.295 56.0798C134.994 52.6944 134.994 52.5472 134.392 55.6382C133.64 59.6124 131.533 59.9067 130.479 55.9326C130.028 54.3135 128.673 52.9888 127.319 52.9888C125.513 52.9888 124.911 54.1663 125.212 57.4045C125.513 61.8202 127.77 62.8506 133.038 60.9371ZM50.7168 48.1315C49.5129 47.1011 47.8574 45.0405 46.9544 43.4214C45.299 40.6247 45.299 40.6247 45.1485 44.0101C45.1485 45.9236 46.3525 48.4258 47.7069 49.4562C51.0178 51.6641 53.7267 50.4865 50.7168 48.1315ZM31.6039 46.9539C31.6039 46.5124 30.2495 45.6292 28.7445 45.1876C26.7881 44.7461 26.0356 45.1876 26.4871 46.218C27.2396 48.1315 31.6039 48.8674 31.6039 46.9539ZM133.038 44.8933C132.436 43.7157 131.081 42.6854 130.028 42.6854C128.222 42.6854 128.222 43.127 129.727 44.8933C132.285 47.6899 134.091 47.6899 133.038 44.8933ZM29.798 39.5944C31.4535 40.4775 33.8614 41.2135 34.9148 41.2135C35.9683 41.0663 34.9148 40.036 32.6574 38.8584C27.9921 36.3562 24.0792 36.9449 24.0792 40.036C24.0792 41.5079 24.3802 41.5079 25.4337 39.8888C26.3366 38.4169 27.3901 38.2697 29.798 39.5944ZM125.513 37.9753C127.77 34.8843 127.62 34.4427 125.061 31.9405C122.804 29.5854 121.75 29.4382 119.042 30.7629C115.58 32.6764 114.828 36.6506 117.687 39.4472C120.396 42.0966 122.954 41.6551 125.513 37.9753ZM39.8812 35.3258C40.3327 34.5899 39.7307 33.8539 38.5267 33.8539C37.3228 33.8539 35.3663 32.6764 34.3129 31.3517C31.7544 27.9663 26.7881 26.936 27.9921 30.1742C28.4436 31.3517 29.798 32.382 30.8515 32.382C31.9049 32.382 33.5604 33.4124 34.6138 34.5899C36.7208 37.0921 38.5267 37.3865 39.8812 35.3258ZM55.6832 31.4989C57.7901 30.7629 63.5089 30.027 68.4752 30.027C79.9128 29.7326 90.1465 28.5551 91.3505 27.3775C94.6614 24.1393 80.6653 22.6674 68.7762 25.0225C57.6396 27.3775 52.9742 29.4382 48.9109 34.0011C45.901 37.5337 45.901 37.5337 48.9109 35.1787C50.5663 33.8539 53.5762 32.0876 55.6832 31.4989ZM121.148 20.7539C120.095 19.8708 111.366 28.1135 111.366 30.027C111.366 30.7629 113.774 29.291 116.634 26.4944C119.493 23.8449 121.449 21.1955 121.148 20.7539ZM51.1683 25.7584C54.0277 22.373 51.7703 19.1348 46.6535 19.1348C41.8376 19.1348 40.1822 15.4551 44.396 14.2775C46.0515 13.6888 45.901 13.6888 44.095 13.836C42.5901 13.9831 41.2356 15.4551 40.9346 17.3685C40.4832 20.6067 41.5366 21.1955 47.1049 20.7539C48.4594 20.6067 49.6633 21.3427 49.6633 22.6674C49.6633 23.8449 48.4594 25.6112 47.1049 26.3472C44.697 27.6719 44.697 27.8191 46.8039 27.9663C48.1584 27.9663 50.1148 26.936 51.1683 25.7584ZM112.119 22.0787C114.376 18.8405 116.032 15.7494 115.58 15.4551C115.279 15.0135 112.721 17.6629 110.012 21.3427C107.303 25.0225 105.798 27.9663 106.55 27.9663C107.303 27.9663 109.861 25.3169 112.119 22.0787ZM104.293 10.1562C103.541 9.42023 100.681 11.1865 97.0693 14.8663C93.3069 18.6933 92.103 20.6067 93.9089 20.018C97.8218 18.6933 102.337 20.3124 102.487 23.2562C102.638 24.5809 103.39 22.5202 104.143 18.6933C105.196 14.2775 105.196 11.0393 104.293 10.1562ZM63.2079 20.6067C64.8633 19.4292 64.2614 19.282 61.101 20.018C57.4891 20.9011 56.8871 20.6067 57.6396 18.6933C58.0911 17.3685 57.7901 16.191 56.8871 15.8966C55.8336 15.4551 55.6832 14.4247 56.4356 13.2472C57.3386 11.7753 58.0911 11.9225 59.596 13.9831C60.8 15.4551 62.1544 16.191 62.7564 15.7494C63.3584 15.1607 62.6059 13.5416 61.2515 12.2169C58.8435 9.8618 58.5426 9.8618 56.2851 12.0697C54.6297 13.6888 54.1782 15.7494 54.7802 18.2517C55.8336 22.2258 59.1445 23.2562 63.2079 20.6067ZM71.1841 18.1045C68.4752 17.0742 68.7762 14.7191 71.4851 14.7191C72.6891 14.7191 73.7426 15.4551 73.7426 16.191C73.7426 17.0742 74.3445 17.6629 74.9465 17.6629C75.699 17.6629 76 15.7494 75.5485 13.2472C74.9465 9.56742 74.194 8.83146 70.8832 8.97865C67.4218 9.27304 67.2713 9.27304 70.4317 9.8618C74.495 10.5978 74.796 12.6584 70.7327 13.6888C66.9703 14.5719 66.6693 19.1348 70.4317 18.9876C71.9366 18.9876 72.2376 18.5461 71.1841 18.1045ZM83.0732 14.7191C82.6218 11.7753 83.0732 10.3034 84.2772 10.3034C85.7822 10.3034 85.7822 9.8618 84.2772 8.09551C81.5683 4.8573 80.2138 6.6236 80.6653 12.8056C80.9663 19.4292 80.9663 19.1348 82.4713 19.1348C83.2237 19.1348 83.5247 17.0742 83.0732 14.7191Z\" fill=\"url(#paint2_linear)\" />\r\n            <path d=\"M60.6495 128.792C40.6336 123.493 25.7346 111.276 16.8554 92.8775C12.1901 83.6045 11.2871 79.9247 10.8356 69.1798C9.33068 38.2697 26.0356 13.3944 55.2317 2.94382C63.2079 0.147191 66.8198 -0.294382 80.8158 0.147191C95.7148 0.735955 98.1228 1.17753 107.453 5.74045C140.562 21.6371 154.408 60.4955 138.606 93.4663C125.061 121.874 91.802 136.888 60.6495 128.792ZM72.3881 116.281L71.6356 112.601L70.7327 116.281C69.5287 121.433 65.3148 121.138 65.7663 115.987C65.9168 113.631 65.4653 111.865 64.5624 111.865C63.8099 111.865 63.2079 114.22 63.2079 117.017C63.2079 121.138 63.8099 122.169 66.2178 122.169C68.3247 122.169 69.2277 123.199 69.2277 125.554C69.3782 128.351 69.5287 128.203 71.3346 124.376C72.3881 122.021 72.8396 118.342 72.3881 116.281ZM82.0198 118.93C81.7188 114.22 79.0099 110.688 77.2039 112.601C76.4515 113.19 76.903 114.073 77.9564 114.367C80.0633 115.251 80.3643 120.108 78.2574 121.433C77.3544 122.021 77.5049 123.052 78.7089 124.229C81.1168 126.879 82.4713 124.671 82.0198 118.93ZM88.7921 118.93C88.0396 110.393 90.7485 109.216 93.9089 116.428C95.1129 119.372 96.1663 120.402 96.6178 119.078C97.5208 116.575 93.6079 110.393 91.2 110.393C87.1366 110.54 85.4812 113.043 86.5346 117.606C87.7386 122.905 89.0931 123.788 88.7921 118.93ZM57.7901 116.87C60.8 114.073 60.8 111.276 57.9406 108.921C52.8237 104.8 45.7505 112.307 50.5663 117.017C53.4257 119.813 54.9307 119.813 57.7901 116.87ZM110.614 114.22C110.614 112.012 110.162 109.805 109.56 109.51C108.958 109.069 108.206 107.302 108.206 105.536C108.055 103.622 107.754 103.181 107.453 104.506C106.4 108.333 100.982 110.835 98.4237 108.774C93.6079 104.947 96.7683 109.657 102.036 114.22C108.507 119.813 110.313 119.813 110.614 114.22ZM48.7604 104.653C48.4594 104.358 46.9544 105.094 45.4495 106.419C43.9445 107.891 41.3861 109.069 39.7307 109.069C37.1723 109.216 37.1723 109.363 39.5802 109.952C40.9346 110.246 42.1386 111.424 42.1386 112.307C42.1386 113.337 43.794 112.16 45.7505 109.657C47.7069 107.302 49.0614 104.947 48.7604 104.653ZM39.4297 103.475C40.9346 102.151 42.1386 100.531 42.1386 99.7955C42.1386 97.882 36.5703 101.12 35.5168 103.77C34.4634 106.714 35.9683 106.566 39.4297 103.475ZM91.0495 102.887C94.3604 102.003 99.9287 99.0596 103.39 96.2629C111.065 90.0809 119.343 74.773 118.59 67.8551C118.139 63.5865 117.537 64.3225 111.517 76.0978C103.24 92.1416 97.8218 100.679 96.7683 99.5011C96.3168 99.0596 97.2198 96.5573 98.8752 93.7607C101.735 89.0506 101.735 88.9034 99.0257 88.7562C97.2198 88.609 94.9624 90.3753 93.3069 93.1719C89.0931 99.7955 89.5445 96.9989 94.0594 88.4618C96.0158 84.4876 97.2198 80.9551 96.7683 80.3663C96.1663 79.9247 96.6178 79.4832 97.6713 79.4832C98.7247 79.4832 99.1762 78.8944 98.5742 78.1584C98.1228 77.4225 99.4772 74.1843 101.584 71.2405C103.691 68.1494 105.196 64.9112 104.745 63.8809C104.293 62.7034 104.895 62.2618 106.249 62.8506C107.453 63.2921 108.356 62.7034 108.356 61.3787C108.356 60.0539 109.259 58.1405 110.313 57.1101C115.881 51.0753 116.182 48.573 112.119 41.9494C108.808 36.3562 100.079 27.9663 97.5208 27.9663C96.0158 27.9663 98.2733 35.3258 100.23 36.9449C101.434 37.8281 102.337 40.4775 102.337 42.8326C102.337 45.0405 103.089 47.3955 103.842 47.8371C104.745 48.2787 105.347 47.9843 105.347 46.9539C105.347 45.9236 105.798 45.482 106.249 46.0708C106.701 46.5124 106.701 47.5427 106.099 48.4258C105.046 50.1921 99.4772 47.9843 97.5208 45.1876C97.0693 44.3045 96.1663 48.2787 95.5643 53.8719C94.2099 67.5607 87.8891 98.618 86.0832 100.384C84.7287 101.709 84.7287 98.618 86.3841 91.7C86.8356 89.345 86.3841 88.7562 84.5782 89.0506C83.2237 89.345 81.5683 89.6393 80.9663 89.6393C80.2138 89.7865 79.7624 91.2584 79.7624 93.1719C79.7624 95.8214 79.4614 95.9686 78.2574 94.2023C77.5049 93.0247 77.2039 90.8169 77.6554 89.345C78.1069 87.7259 78.8594 84.9292 79.1604 83.0157C79.4614 81.1023 80.0633 77.7169 80.5148 75.3618C80.9663 73.1539 81.4178 70.3573 81.5683 69.1798C81.5683 68.0023 82.4713 66.0888 83.3742 64.9112C84.7287 63.145 84.5782 62.9978 82.3208 64.1753C75.398 68.0023 64.8633 61.2315 66.6693 54.3135C67.1208 52.8416 66.8198 51.8112 66.0673 52.4C63.2079 54.0191 64.8633 60.0539 69.9802 67.1191C74.796 73.7427 75.2475 75.0674 75.097 84.6348C74.9465 90.2281 74.495 96.5573 73.8931 98.4708C72.6891 102.887 69.2277 104.358 69.2277 100.531C69.2277 98.9124 68.3247 96.8517 67.4218 95.9686C65.9168 94.4966 66.2178 93.9079 68.7762 93.3191C72.8396 92.2888 74.495 88.0202 72.3881 84.1933C71.4851 82.5742 71.3346 80.9551 71.7861 80.3663C72.2376 79.9247 71.9366 79.4832 71.0336 79.4832C69.9802 79.4832 69.2277 78.6 69.2277 77.5697C69.2277 76.5393 67.8732 74.6259 66.2178 73.1539C64.4119 71.682 63.5089 69.9157 63.9604 69.1798C64.4119 68.2966 64.1109 67.7079 63.2079 67.7079C62.1544 67.7079 61.703 66.6775 62.1544 65.6472C62.7564 64.1753 62.3049 63.7337 60.8 64.3225C59.596 64.7641 57.4891 64.1753 56.1346 63.145C53.8772 61.2315 53.8772 61.3787 56.1346 64.7641C58.994 69.0326 64.7129 91.2584 64.7129 98.0292C64.7129 100.531 65.1643 103.034 65.7663 103.475C67.2713 105.094 84.4277 104.653 91.0495 102.887ZM33.7109 98.7652C38.6772 94.9382 38.8277 94.3494 36.4198 92.5832C35.0653 91.5528 34.3129 91.2584 35.0653 91.9944C36.4198 93.6135 31.7544 98.618 29.497 97.7348C28.594 97.4405 27.6911 98.4708 27.5406 100.09C27.2396 103.77 27.0891 103.917 33.7109 98.7652ZM124.008 94.0551C122.503 92.436 120.697 91.2584 119.945 91.2584C119.042 91.2584 119.493 92.436 120.848 93.9079C122.352 95.3798 123.406 97.4405 123.406 98.3236C123.406 100.826 119.644 100.531 117.386 97.882C116.333 96.7045 114.677 95.6742 113.774 95.6742C112.871 95.6742 114.075 97.4405 116.483 99.6483L120.998 103.328L123.707 100.09C126.265 96.9989 126.265 96.5573 124.008 94.0551ZM59.897 98.618C58.8435 96.9989 57.4891 95.6742 56.8871 95.6742C56.1346 95.6742 55.6832 94.6438 55.6832 93.4663C55.6832 92.2888 54.9307 91.2584 54.0277 91.2584C53.2752 91.2584 52.9742 90.6697 53.4257 89.7865C53.8772 89.0506 53.5762 88.3146 52.6733 88.3146C51.7703 88.3146 51.3188 87.7259 51.7703 86.9899C52.2218 86.2539 51.3188 85.3708 49.6633 84.9292C47.1049 84.3405 46.9544 84.6348 48.3089 86.9899C49.0614 88.609 49.3624 90.6697 48.7604 91.5528C48.1584 92.436 48.3089 92.7303 49.2119 92.2888C50.1148 91.7 51.6198 93.1719 52.6733 95.6742C54.1782 99.3539 56.1346 100.679 60.6495 101.415C61.2515 101.415 60.9505 100.237 59.897 98.618ZM36.1188 84.9292C39.7307 83.6045 28.2931 84.0461 24.0792 85.3708C20.3168 86.5483 20.3168 86.5483 24.6812 86.6955C28.895 86.8427 28.895 86.9899 26.6376 89.4921C22.1228 94.3494 23.9287 94.9382 29.0455 90.2281C31.6039 87.7259 34.9148 85.3708 36.1188 84.9292ZM60.198 86.1068C59.4455 85.2236 59.1445 83.8989 59.7465 83.4573C60.198 82.8686 59.7465 81.5438 58.6931 80.2191C57.6396 79.0416 57.3386 78.0112 57.9406 78.0112C58.5426 78.0112 58.2416 77.1281 57.3386 76.0978C56.4356 74.9202 56.2851 73.5955 56.8871 72.8596C57.4891 72.2708 56.4356 72.5652 54.6297 73.4483C52.6733 74.3315 51.1683 74.773 51.1683 74.1843C51.1683 73.5955 50.8673 73.4483 50.4158 73.8899C48.9109 75.3618 54.4792 86.8427 56.1346 85.8124C57.0376 85.3708 57.1881 85.6652 56.5861 86.5483C55.9841 87.4315 56.2851 89.7865 57.3386 91.5528L59.1445 94.791L60.499 91.4056C61.2515 89.345 61.101 87.2843 60.198 86.1068ZM131.984 87.4315C133.339 83.8989 130.479 80.2191 126.265 80.2191C122.653 80.2191 120.848 83.6045 122.503 87.7259C123.556 90.5225 130.78 90.3753 131.984 87.4315ZM89.2436 75.2146C90.1465 70.6517 89.093 64.7641 87.2871 64.7641C86.6851 64.7641 85.6317 67.1191 85.1802 70.0629C84.5782 72.8596 83.6752 76.245 83.2237 77.4225C82.7723 78.7472 83.5247 79.4832 85.4812 79.4832C87.4376 79.4832 88.6416 78.1584 89.2436 75.2146ZM108.657 74.773C110.012 72.1236 111.818 68.0023 112.871 65.5C113.925 63.145 115.43 59.9067 116.182 58.4348C116.935 56.8157 117.236 55.3438 116.935 54.9023C116.483 54.6079 113.624 58.4348 110.463 63.5865C107.303 68.7382 103.842 74.3315 102.638 76.245C100.681 79.1888 100.681 79.4832 103.39 79.4832C105.347 79.4832 107.303 77.7169 108.657 74.773ZM133.188 75.0674C131.533 74.3315 128.824 73.7427 127.168 73.7427C124.61 73.5955 124.61 73.8899 126.416 75.0674C127.62 75.8034 130.329 76.3921 132.436 76.3921C135.897 76.3921 135.897 76.245 133.188 75.0674ZM28.594 72.8596C28.594 70.2101 15.802 69.7685 14.1465 72.418C13.394 73.5955 14.7485 73.7427 19.2634 73.1539C22.8752 72.5652 25.7346 72.7124 26.3366 73.5955C27.6911 75.6562 28.594 75.3618 28.594 72.8596ZM131.081 67.7079C132.586 67.7079 133.941 68.591 134.242 69.4742C134.693 70.7989 135.596 70.6517 137.402 68.8854C139.358 67.1191 139.509 66.3832 137.853 65.7944C134.693 64.6169 125.964 66.9719 125.212 69.1798C124.61 70.9461 124.911 71.0933 126.566 69.6214C127.62 68.591 129.727 67.7079 131.081 67.7079ZM28.4436 62.9978C29.497 60.4955 29.196 59.1708 27.3901 57.8461C21.9723 53.5775 15.2 57.9933 18.2099 63.5865C20.3168 67.4135 26.9386 66.9719 28.4436 62.9978ZM133.038 60.9371C134.543 60.3483 135.295 58.4348 135.295 56.0798C134.994 52.6944 134.994 52.5472 134.392 55.6382C133.64 59.318 130.931 60.0539 130.931 56.6685C130.931 55.3438 129.877 54.0191 128.673 53.5775C127.469 52.9888 126.416 50.9281 126.416 48.7202C126.265 45.7764 125.964 45.3348 124.911 47.2483C124.158 48.4258 124.158 51.8112 124.76 54.9023C125.513 57.8461 125.663 60.4955 125.212 60.9371C124.158 62.1146 130.028 62.1146 133.038 60.9371ZM77.8059 53.4303C78.1069 52.5472 76.7525 51.9584 74.6455 52.1056C71.9366 52.2528 71.3346 52.6944 72.5386 54.1663C74.3445 56.227 77.0534 55.9326 77.8059 53.4303ZM50.7168 48.1315C49.5129 47.1011 47.8574 45.0405 46.9544 43.4214C45.299 40.6247 45.299 40.6247 45.1485 44.0101C45.1485 45.9236 46.3525 48.4258 47.7069 49.4562C51.0178 51.6641 53.7267 50.4865 50.7168 48.1315ZM31.6039 47.2483C31.6039 46.8067 29.9485 45.6292 27.8416 44.7461C24.5307 43.127 24.2297 43.2742 25.5841 45.482C26.7881 47.8371 31.6039 49.1618 31.6039 47.2483ZM133.038 44.8933C132.436 43.7157 131.081 42.6854 130.028 42.6854C128.222 42.6854 128.222 43.127 129.727 44.8933C132.285 47.6899 134.091 47.6899 133.038 44.8933ZM29.798 39.5944C31.4535 40.4775 33.8614 41.2135 34.9148 41.2135C35.9683 41.0663 34.9148 40.036 32.6574 38.8584C27.9921 36.3562 24.0792 36.9449 24.0792 40.036C24.0792 41.5079 24.3802 41.5079 25.4337 39.8888C26.3366 38.4169 27.3901 38.2697 29.798 39.5944ZM125.513 37.9753C127.77 34.8843 127.62 34.4427 125.061 31.9405C122.804 29.5854 121.75 29.4382 119.042 30.7629C115.58 32.6764 114.828 36.6506 117.687 39.4472C120.396 42.0966 122.954 41.6551 125.513 37.9753ZM39.8812 35.3258C40.3327 34.5899 39.7307 33.8539 38.5267 33.8539C37.3228 33.8539 35.3663 32.6764 34.3129 31.3517C31.7544 27.9663 26.7881 26.936 27.9921 30.1742C28.4436 31.3517 29.798 32.382 30.8515 32.382C31.9049 32.382 33.5604 33.4124 34.6138 34.5899C36.7208 37.0921 38.5267 37.3865 39.8812 35.3258ZM55.6832 31.4989C57.7901 30.7629 63.5089 30.027 68.4752 30.027C79.9128 29.7326 90.1465 28.5551 91.3505 27.3775C94.6614 24.1393 80.6653 22.6674 68.7762 25.0225C57.6396 27.3775 52.9742 29.4382 48.9109 34.0011C45.901 37.5337 45.901 37.5337 48.9109 35.1787C50.5663 33.8539 53.5762 32.0876 55.6832 31.4989ZM121.148 20.7539C120.095 19.8708 111.366 28.1135 111.366 30.027C111.366 30.7629 113.774 29.291 116.634 26.4944C119.493 23.8449 121.449 21.1955 121.148 20.7539ZM51.1683 25.7584C54.0277 22.373 51.7703 19.1348 46.6535 19.1348C41.8376 19.1348 40.1822 15.4551 44.396 14.2775C46.0515 13.6888 45.901 13.6888 44.095 13.836C42.5901 13.9831 41.2356 15.4551 40.9346 17.3685C40.4832 20.6067 41.5366 21.1955 47.1049 20.7539C48.4594 20.6067 49.6633 21.3427 49.6633 22.6674C49.6633 23.8449 48.4594 25.6112 47.1049 26.3472C44.697 27.6719 44.697 27.8191 46.8039 27.9663C48.1584 27.9663 50.1148 26.936 51.1683 25.7584ZM112.119 22.0787C114.376 18.8405 116.032 15.7494 115.58 15.4551C115.279 15.0135 112.721 17.6629 110.012 21.3427C107.303 25.0225 105.798 27.9663 106.55 27.9663C107.303 27.9663 109.861 25.3169 112.119 22.0787ZM105.949 14.5719C106.55 13.2472 106.099 11.4809 104.895 10.5978C103.24 9.27304 101.584 10.1562 96.9188 15.0135C93.3069 18.6933 92.103 20.6067 93.9089 20.018C97.8218 18.6933 102.337 20.3124 102.487 23.2562C102.638 24.5809 103.24 23.8449 103.842 21.3427C104.444 18.9876 105.497 15.8966 105.949 14.5719ZM63.2079 20.6067C64.8633 19.4292 64.2614 19.282 61.101 20.018C57.4891 20.9011 56.8871 20.6067 57.6396 18.6933C58.0911 17.3685 57.7901 16.191 56.8871 15.8966C55.8336 15.4551 55.6832 14.4247 56.4356 13.2472C57.3386 11.7753 58.0911 11.9225 59.596 13.9831C60.8 15.4551 62.1544 16.191 62.7564 15.7494C63.3584 15.1607 62.6059 13.5416 61.2515 12.2169C58.8435 9.8618 58.5426 9.8618 56.2851 12.0697C54.6297 13.6888 54.1782 15.7494 54.7802 18.2517C55.8336 22.2258 59.1445 23.2562 63.2079 20.6067ZM71.1841 18.1045C68.4752 17.0742 68.7762 14.7191 71.4851 14.7191C72.6891 14.7191 73.7426 15.4551 73.7426 16.191C73.7426 17.0742 74.3445 17.6629 74.9465 17.6629C75.699 17.6629 76 15.7494 75.5485 13.2472C74.9465 9.56742 74.194 8.83146 70.8832 8.97865C67.4218 9.27304 67.2713 9.27304 70.4317 9.8618C74.495 10.5978 74.796 12.6584 70.7327 13.6888C66.9703 14.5719 66.6693 19.1348 70.4317 18.9876C71.9366 18.9876 72.2376 18.5461 71.1841 18.1045ZM83.3742 14.7191C83.2237 12.2169 83.8257 10.3034 84.5782 10.3034C85.4812 10.3034 85.3307 9.42023 84.2772 8.09551C81.5683 4.8573 80.2138 6.6236 80.6653 12.8056C80.9663 19.4292 80.9663 19.1348 82.4713 19.1348C83.2237 19.1348 83.5247 17.2213 83.3742 14.7191Z\" fill=\"url(#paint3_linear)\" />\r\n            <path d=\"M96.3169 57.8461C96.3169 56.3742 96.7684 53.7247 97.2199 51.8112C98.1228 48.7202 98.2733 48.7202 100.23 51.0753C102.939 54.6079 102.788 58.4348 99.9288 59.4652C96.4674 60.7899 96.3169 60.6427 96.3169 57.8461Z\" fill=\"url(#paint4_linear)\" />\r\n            <path d=\"M60.6495 128.792C40.6336 123.493 25.7346 111.276 16.8554 92.8775C12.1901 83.6045 11.2871 79.9247 10.8356 69.1798C9.33068 38.2697 26.0356 13.3944 55.2317 2.94382C63.2079 0.147191 66.8198 -0.294382 80.8158 0.147191C95.7148 0.735955 98.1228 1.17753 107.453 5.74045C140.562 21.6371 154.408 60.4955 138.606 93.4663C125.061 121.874 91.802 136.888 60.6495 128.792ZM72.3881 116.281L71.6356 112.601L70.7327 116.281C69.5287 121.433 65.3148 121.138 65.7663 115.987C65.9168 113.631 65.4653 111.865 64.5624 111.865C63.8099 111.865 63.2079 114.22 63.2079 117.017C63.2079 121.138 63.8099 122.169 66.2178 122.169C68.3247 122.169 69.2277 123.199 69.2277 125.554C69.3782 128.351 69.5287 128.203 71.3346 124.376C72.3881 122.021 72.8396 118.342 72.3881 116.281ZM82.0198 118.93C81.7188 114.22 79.0099 110.688 77.2039 112.601C76.4515 113.19 76.903 114.073 77.9564 114.367C80.0633 115.251 80.3643 120.108 78.2574 121.433C77.3544 122.021 77.5049 123.052 78.7089 124.229C81.1168 126.879 82.4713 124.671 82.0198 118.93ZM88.7921 118.93C88.0396 110.393 90.7485 109.216 93.9089 116.428C95.1129 119.372 96.1663 120.402 96.6178 119.078C97.5208 116.575 93.6079 110.393 91.2 110.393C87.1366 110.54 85.4812 113.043 86.5346 117.606C87.7386 122.905 89.0931 123.788 88.7921 118.93ZM57.7901 116.87C60.8 114.073 60.8 111.276 57.9406 108.921C52.8237 104.8 45.7505 112.307 50.5663 117.017C53.4257 119.813 54.9307 119.813 57.7901 116.87ZM110.614 114.22C110.614 112.012 110.162 109.805 109.56 109.51C108.958 109.069 108.206 107.302 108.206 105.536C108.055 103.622 107.754 103.181 107.453 104.506C106.4 108.333 100.982 110.835 98.4237 108.774C93.6079 104.947 96.7683 109.657 102.036 114.22C108.507 119.813 110.313 119.813 110.614 114.22ZM48.7604 104.653C48.4594 104.358 46.9544 105.094 45.4495 106.419C43.9445 107.891 41.3861 109.069 39.7307 109.069C37.1723 109.216 37.1723 109.363 39.5802 109.952C40.9346 110.246 42.1386 111.424 42.1386 112.307C42.1386 113.337 43.794 112.16 45.7505 109.657C47.7069 107.302 49.0614 104.947 48.7604 104.653ZM39.4297 103.475C40.9346 102.151 42.1386 100.531 42.1386 99.7955C42.1386 97.882 36.5703 101.12 35.5168 103.77C34.4634 106.714 35.9683 106.566 39.4297 103.475ZM94.2099 102.151C101.133 99.3539 108.958 92.2888 113.323 84.9292C116.483 79.4832 117.988 74.773 121.299 58.8764C121.75 56.8157 117.236 64.6169 111.366 76.0978C105.347 87.5787 99.4772 97.882 98.2733 98.9124C96.6178 100.237 96.7683 99.0596 99.1762 94.4966C102.337 88.3146 102.337 88.3146 99.3267 88.3146C97.5208 88.3146 95.1129 90.2281 93.3069 93.1719C91.6515 95.6742 90.297 97.4405 90.297 96.9989C90.297 95.3798 103.691 68.591 107.604 62.5562C116.483 48.7202 116.634 47.9843 113.172 42.391C111.517 39.7416 108.507 36.0618 106.55 34.4427C102.337 30.6157 93.3069 25.1697 95.8653 27.8191C96.7683 28.9966 97.2198 30.7629 96.7683 31.9405C96.3168 33.118 97.3703 35.3258 99.1762 36.9449C100.832 38.564 102.337 40.3303 102.337 40.9191C102.337 43.2742 99.6277 45.9236 98.1228 45.0405C97.0693 44.4517 96.1663 47.8371 95.5643 54.0191C94.2099 67.8551 87.8891 98.618 85.9327 100.531C85.0297 101.415 85.0297 99.9427 85.9327 96.2629C87.7386 88.3146 87.7386 88.0202 83.9762 88.609C82.0198 88.9034 80.2138 90.5225 79.4614 92.7303C78.2574 96.5573 79.1604 83.3101 80.5148 76.5393C80.9663 74.4787 81.5683 71.3876 81.8693 69.6214C82.3208 67.7079 82.9228 65.6472 83.5247 64.7641C83.9762 64.0281 83.8257 63.2921 82.9228 63.2921C82.1703 63.2921 81.1168 63.8809 80.6653 64.6169C79.1604 66.8247 72.2376 64.4697 69.3782 60.9371C67.5723 58.7292 66.8198 56.0798 67.4218 54.1663C67.8732 52.1056 67.5723 51.3697 66.5188 52.1056C63.3584 54.0191 64.5624 59.4652 70.1307 67.2663C75.5485 75.0674 75.5485 75.2146 74.9465 87.5787C74.194 101.415 71.9366 106.272 69.2277 99.5011C67.1208 94.0551 67.2713 92.7303 69.8297 93.6135C72.3881 94.4966 74.0435 89.1978 72.6891 83.8989C72.2376 81.8382 70.2812 78.1584 68.3247 75.6562C66.3683 73.1539 64.4119 69.327 63.9604 67.2663C63.2079 64.7641 62.1544 63.7337 60.8 64.3225C59.596 64.7641 57.4891 64.1753 56.1346 63.145C53.8772 61.2315 53.8772 61.3787 56.1346 64.7641C59.1445 69.327 64.7129 91.4056 64.7129 98.9124C64.7129 103.917 65.1643 104.358 69.6792 104.947C76.602 105.83 88.4911 104.506 94.2099 102.151ZM33.7109 98.7652C38.6772 94.9382 38.8277 94.3494 36.4198 92.5832C35.0653 91.5528 34.3129 91.2584 35.0653 91.9944C36.4198 93.6135 31.7544 98.618 29.497 97.7348C28.594 97.4405 27.6911 98.4708 27.5406 100.09C27.2396 103.77 27.0891 103.917 33.7109 98.7652ZM124.008 94.0551C122.503 92.436 120.697 91.2584 119.945 91.2584C119.042 91.2584 119.493 92.436 120.848 93.9079C122.352 95.3798 123.406 97.4405 123.406 98.3236C123.406 100.826 119.644 100.531 117.386 97.882C116.333 96.7045 114.677 95.6742 113.774 95.6742C112.871 95.6742 114.075 97.4405 116.483 99.6483L120.998 103.328L123.707 100.09C126.265 96.9989 126.265 96.5573 124.008 94.0551ZM56.7366 93.9079C54.0277 89.6393 51.0178 85.3708 49.8138 84.4876C48.6099 83.4573 48.1584 82.1326 48.9109 80.9551C49.8138 79.6303 49.5129 79.336 48.1584 80.2191C46.6535 81.1023 46.3525 80.8079 47.2554 78.6C47.8574 77.1281 47.8574 76.3921 47.2554 76.9809C45.901 78.1584 44.2455 75.9506 36.8713 62.5562C33.8614 56.9629 30.5505 51.6641 29.6475 50.7809C28.895 50.0449 33.1089 58.4348 39.1287 69.6214C49.5129 89.0506 51.7703 95.6742 45.299 88.1674C43.6436 86.2539 42.5901 83.7517 42.8911 82.7214C43.3426 81.691 43.0416 81.2495 42.1386 81.691C41.3861 82.1326 40.0317 79.6303 38.9782 76.245C38.0752 72.7124 36.8713 70.6517 36.5703 71.682C35.6673 74.0371 41.8376 87.5787 45.1485 90.5225C46.6535 91.8472 48.6099 92.5832 49.3624 92.1416C50.1148 91.7 51.6198 93.1719 52.6733 95.6742C54.1782 99.3539 55.9841 100.679 60.499 101.415C61.101 101.415 59.4455 98.0292 56.7366 93.9079ZM36.1188 84.9292C39.7307 83.6045 28.2931 84.0461 24.0792 85.3708C20.3168 86.5483 20.3168 86.5483 24.6812 86.6955C28.895 86.8427 28.895 86.9899 26.6376 89.4921C22.1228 94.3494 23.9287 94.9382 29.0455 90.2281C31.6039 87.7259 34.9148 85.3708 36.1188 84.9292ZM61.703 91.7C61.703 90.3753 60.6495 85.3708 59.295 80.6607C57.0376 73.1539 56.4356 72.1236 53.7267 73.0068C51.1683 73.7427 50.8673 73.4483 51.4693 70.0629C52.0713 67.2663 51.6198 66.236 49.9643 66.236C46.9544 66.236 48.4594 73.1539 54.1782 85.0764C58.3921 93.9079 61.703 96.8517 61.703 91.7ZM131.984 87.4315C133.339 83.8989 130.479 80.2191 126.265 80.2191C122.653 80.2191 120.848 83.6045 122.503 87.7259C123.556 90.5225 130.78 90.3753 131.984 87.4315ZM89.394 73.3011C91.2 58.2876 91.501 54.4607 90.4475 54.4607C89.8455 54.4607 88.1901 59.318 86.5346 65.2056C85.0297 70.9461 83.5247 76.6865 83.0732 77.7169C82.7723 78.7472 83.6752 79.4832 85.4812 79.4832C88.0396 79.4832 88.7921 78.3056 89.394 73.3011ZM112.42 67.1191C115.279 60.7899 117.236 55.1966 116.784 54.9023C116.483 54.6079 113.624 58.4348 110.463 63.5865C107.303 68.7382 103.842 74.4787 102.487 76.245C100.38 79.6303 100.531 79.7775 103.842 79.1888C106.851 78.8944 108.507 76.5393 112.42 67.1191ZM133.188 75.0674C131.533 74.3315 128.824 73.7427 127.168 73.7427C124.61 73.5955 124.61 73.8899 126.416 75.0674C127.62 75.8034 130.329 76.3921 132.436 76.3921C135.897 76.3921 135.897 76.245 133.188 75.0674ZM28.594 72.8596C28.594 70.2101 15.802 69.7685 14.1465 72.418C13.394 73.5955 14.7485 73.7427 19.2634 73.1539C22.8752 72.5652 25.7346 72.7124 26.3366 73.5955C27.6911 75.6562 28.594 75.3618 28.594 72.8596ZM131.081 67.7079C132.586 67.7079 133.941 68.591 134.242 69.4742C134.693 70.7989 135.596 70.6517 137.402 68.8854C139.358 67.1191 139.509 66.3832 137.853 65.7944C134.693 64.6169 125.964 66.9719 125.212 69.1798C124.61 70.9461 124.911 71.0933 126.566 69.6214C127.62 68.591 129.727 67.7079 131.081 67.7079ZM28.594 63.145C30.701 59.318 28.1426 55.9326 23.1762 55.9326C18.8119 55.9326 16.2535 60.0539 18.2099 63.5865C20.1663 67.2663 26.6376 66.9719 28.594 63.145ZM133.038 60.9371C134.543 60.3483 135.295 58.4348 135.295 56.0798C134.994 52.6944 134.994 52.5472 134.392 55.6382C133.64 59.1708 130.931 60.2011 130.931 56.6685C130.931 55.6382 129.727 54.0191 128.372 53.136C126.115 51.9584 126.115 51.2225 127.77 47.6899C129.275 44.4517 129.877 44.0101 130.931 45.6292C131.683 46.8067 132.586 47.3955 133.038 46.9539C134.693 45.482 131.081 42.2438 128.824 43.127C125.663 44.3045 121.6 53.4303 123.556 54.6079C124.459 55.0494 125.212 56.9629 125.362 58.582C125.513 61.8202 128.372 62.7034 133.038 60.9371ZM77.0534 51.3697C76.903 49.4562 76.1505 47.3955 75.398 46.6596C74.6455 45.9236 74.495 47.2483 74.9465 49.4562C75.5485 52.8416 75.2475 53.2832 72.9901 52.4C70.7327 51.6641 70.5822 51.8112 72.2376 53.7247C74.9465 56.9629 77.6554 55.6382 77.0534 51.3697ZM51.7703 50.1921C52.2218 49.4562 51.6198 48.1315 50.4158 47.1011C49.2119 46.0708 48.1584 44.1573 48.1584 42.8326C48.1584 41.3607 46.9544 40.3303 45.1485 40.3303C43.4931 40.3303 42.1386 40.9191 42.1386 41.5079C42.1386 42.0966 42.8911 42.6854 43.6436 42.6854C44.5465 42.6854 45.1485 43.5685 44.8475 44.5989C44.396 46.5124 48.0079 51.3697 49.9643 51.5169C50.5663 51.5169 51.3188 50.9281 51.7703 50.1921ZM31.6039 47.2483C31.6039 46.8067 29.9485 45.6292 27.8416 44.7461C24.5307 43.127 24.2297 43.2742 25.5841 45.482C26.7881 47.8371 31.6039 49.1618 31.6039 47.2483ZM29.798 39.5944C31.4535 40.4775 33.8614 41.2135 34.9148 41.2135C35.9683 41.0663 34.9148 40.036 32.6574 38.8584C27.9921 36.3562 24.0792 36.9449 24.0792 40.036C24.0792 41.5079 24.3802 41.5079 25.4337 39.8888C26.3366 38.4169 27.3901 38.2697 29.798 39.5944ZM125.513 37.9753C127.77 34.8843 127.62 34.4427 125.061 31.9405C122.804 29.5854 121.75 29.4382 119.042 30.7629C115.58 32.6764 114.828 36.6506 117.687 39.4472C120.396 42.0966 122.954 41.6551 125.513 37.9753ZM51.4693 33.118C52.2218 32.2348 52.6733 32.5292 52.6733 33.8539C52.8237 35.6202 53.1247 35.6202 54.6297 33.5596C57.0376 30.6157 63.8099 28.7022 66.5188 30.3214C68.9267 31.7933 76.903 31.0573 79.3109 29.1438C80.3643 28.4079 81.8693 28.1135 82.7723 28.7022C84.7287 29.8798 93.3069 28.1135 93.3069 26.4944C93.3069 23.9921 79.3109 22.2258 72.2376 23.8449C59.295 26.7888 53.1247 29.4382 48.7604 34.1483C46.3525 36.7978 45.7505 37.9753 47.4059 36.7978C49.0614 35.6202 50.8673 34.0011 51.4693 33.118ZM39.8812 35.3258C40.3327 34.5899 39.7307 33.8539 38.5267 33.8539C37.3228 33.8539 35.3663 32.6764 34.3129 31.3517C31.7544 27.9663 26.7881 26.936 27.9921 30.1742C28.4436 31.3517 29.798 32.382 30.8515 32.382C31.9049 32.382 33.5604 33.4124 34.6138 34.5899C36.7208 37.0921 38.5267 37.3865 39.8812 35.3258ZM121.148 20.7539C120.095 19.8708 111.366 28.1135 111.366 30.027C111.366 30.7629 113.774 29.291 116.634 26.4944C119.493 23.8449 121.449 21.1955 121.148 20.7539ZM51.1683 25.7584C54.0277 22.373 51.7703 19.1348 46.6535 19.1348C41.8376 19.1348 40.1822 15.4551 44.396 14.2775C46.0515 13.6888 45.901 13.6888 44.095 13.836C42.5901 13.9831 41.2356 15.4551 40.9346 17.3685C40.4832 20.6067 41.5366 21.1955 47.1049 20.7539C48.4594 20.6067 49.6633 21.3427 49.6633 22.6674C49.6633 23.8449 48.4594 25.6112 47.1049 26.3472C44.697 27.6719 44.697 27.8191 46.8039 27.9663C48.1584 27.9663 50.1148 26.936 51.1683 25.7584ZM112.119 22.0787C114.376 18.8405 116.032 15.7494 115.58 15.4551C115.279 15.0135 112.721 17.6629 110.012 21.3427C107.303 25.0225 105.798 27.9663 106.55 27.9663C107.303 27.9663 109.861 25.3169 112.119 22.0787ZM105.949 14.5719C106.55 13.2472 106.099 11.4809 104.895 10.5978C103.24 9.27304 101.584 10.1562 96.9188 15.0135C93.3069 18.6933 92.103 20.6067 93.9089 20.018C97.8218 18.6933 102.337 20.3124 102.487 23.2562C102.638 24.5809 103.24 23.8449 103.842 21.3427C104.444 18.9876 105.497 15.8966 105.949 14.5719ZM63.2079 20.6067C64.8633 19.4292 64.2614 19.282 61.101 20.018C57.4891 20.9011 56.8871 20.6067 57.6396 18.6933C58.0911 17.3685 57.7901 16.191 56.8871 15.8966C55.8336 15.4551 55.6832 14.4247 56.4356 13.2472C57.3386 11.7753 58.0911 11.9225 59.596 13.9831C60.8 15.4551 62.1544 16.191 62.7564 15.7494C63.3584 15.1607 62.6059 13.5416 61.2515 12.2169C58.8435 9.8618 58.5426 9.8618 56.2851 12.0697C54.6297 13.6888 54.1782 15.7494 54.7802 18.2517C55.8336 22.2258 59.1445 23.2562 63.2079 20.6067ZM71.1841 18.1045C68.4752 17.0742 68.7762 14.7191 71.4851 14.7191C72.6891 14.7191 73.7426 15.4551 73.7426 16.191C73.7426 17.0742 74.3445 17.6629 74.9465 17.6629C75.699 17.6629 76 15.7494 75.5485 13.2472C74.9465 9.56742 74.194 8.83146 70.8832 8.97865C67.4218 9.27304 67.2713 9.27304 70.4317 9.8618C74.495 10.5978 74.796 12.6584 70.7327 13.6888C66.9703 14.5719 66.6693 19.1348 70.4317 18.9876C71.9366 18.9876 72.2376 18.5461 71.1841 18.1045ZM83.3742 14.7191C83.2237 12.2169 83.8257 10.3034 84.5782 10.3034C85.4812 10.3034 85.3307 9.42023 84.2772 8.09551C81.5683 4.8573 80.2138 6.6236 80.6653 12.8056C80.9663 19.4292 80.9663 19.1348 82.4713 19.1348C83.2237 19.1348 83.5247 17.2213 83.3742 14.7191Z\" fill=\"white\" />\r\n            <path d=\"M60.6495 128.792C40.6336 123.493 25.7346 111.276 16.8554 92.8775C12.1901 83.6045 11.2871 79.9247 10.8356 69.1798C9.33068 38.2697 26.0356 13.3944 55.2317 2.94382C63.2079 0.147191 66.8198 -0.294382 80.8158 0.147191C95.7148 0.735955 98.1228 1.17753 107.453 5.74045C140.562 21.6371 154.408 60.4955 138.606 93.4663C125.061 121.874 91.802 136.888 60.6495 128.792ZM72.3881 116.281L71.6356 112.601L70.7327 116.281C69.5287 121.433 65.3148 121.138 65.7663 115.987C65.9168 113.631 65.4653 111.865 64.5624 111.865C63.8099 111.865 63.2079 114.22 63.2079 117.017C63.2079 121.138 63.8099 122.169 66.2178 122.169C68.3247 122.169 69.2277 123.199 69.2277 125.554C69.3782 128.351 69.5287 128.203 71.3346 124.376C72.3881 122.021 72.8396 118.342 72.3881 116.281ZM82.0198 118.93C81.7188 114.22 79.0099 110.688 77.2039 112.601C76.4515 113.19 76.903 114.073 77.9564 114.367C80.0633 115.251 80.3643 120.108 78.2574 121.433C77.3544 122.021 77.5049 123.052 78.7089 124.229C81.1168 126.879 82.4713 124.671 82.0198 118.93ZM88.7921 118.93C88.0396 110.393 90.7485 109.216 93.9089 116.428C95.1129 119.372 96.1663 120.402 96.6178 119.078C97.5208 116.575 93.6079 110.393 91.2 110.393C87.1366 110.54 85.4812 113.043 86.5346 117.606C87.7386 122.905 89.0931 123.788 88.7921 118.93ZM57.7901 116.87C60.8 114.073 60.8 111.276 57.9406 108.921C52.8237 104.8 45.7505 112.307 50.5663 117.017C53.4257 119.813 54.9307 119.813 57.7901 116.87ZM110.614 114.22C110.614 112.012 110.162 109.805 109.56 109.51C108.958 109.069 108.206 107.302 108.206 105.536C108.055 103.622 107.754 103.181 107.453 104.506C106.4 108.333 100.982 110.835 98.4237 108.774C93.6079 104.947 96.7683 109.657 102.036 114.22C108.507 119.813 110.313 119.813 110.614 114.22ZM48.7604 104.653C48.4594 104.358 46.9544 105.094 45.4495 106.419C43.9445 107.891 41.3861 109.069 39.7307 109.069C37.1723 109.216 37.1723 109.363 39.5802 109.952C40.9346 110.246 42.1386 111.424 42.1386 112.307C42.1386 113.337 43.794 112.16 45.7505 109.657C47.7069 107.302 49.0614 104.947 48.7604 104.653ZM39.4297 103.475C40.9346 102.151 42.1386 100.531 42.1386 99.7955C42.1386 97.882 36.5703 101.12 35.5168 103.77C34.4634 106.714 35.9683 106.566 39.4297 103.475ZM94.2099 102.151C107.002 96.8517 115.881 84.6348 119.644 66.9719C120.998 60.4955 122.352 55.0494 122.804 54.6079C123.857 53.5775 125.061 55.491 125.362 58.7292C125.814 64.6169 135.596 62.1146 135.295 56.0798C134.994 52.6944 134.994 52.5472 134.392 55.6382C133.64 59.1708 130.931 60.2011 130.931 56.6685C130.931 55.6382 129.727 54.0191 128.372 53.136C126.115 51.9584 126.115 51.2225 127.77 47.5427C128.974 45.1876 130.178 44.1573 130.479 45.3348C130.931 46.218 131.834 47.1011 132.586 47.1011C133.188 47.1011 133.489 46.218 133.038 45.0405C132.586 43.8629 130.028 42.9798 126.867 42.9798C123.857 42.9798 122.202 43.4214 123.255 44.0101C125.212 45.3348 118.139 62.8506 108.808 79.4832C103.842 88.3146 102.939 89.1978 99.1762 88.609C94.9624 88.0202 94.9624 87.873 97.0693 83.8989C98.7247 80.6607 99.9287 80.0719 103.089 80.5135C106.4 81.2495 107.303 80.5135 110.463 73.4483C116.182 60.4955 120.547 48.2787 119.042 49.1618C118.289 49.6034 116.032 47.2483 113.925 43.8629C111.818 40.3303 108.507 36.0618 106.55 34.4427C102.337 30.6157 93.3069 25.1697 95.8653 27.8191C96.7683 28.9966 97.2198 30.7629 96.7683 31.9405C96.3168 33.118 97.3703 35.3258 99.1762 36.9449C102.788 40.1832 102.939 41.0663 100.832 44.1573C99.7782 45.9236 99.0257 45.9236 97.5208 44.4517C95.4138 42.391 90.899 42.0966 89.695 44.0101C89.0931 44.7461 90.297 45.0405 91.9525 44.5989C95.2634 43.7157 95.2634 43.8629 94.2099 56.0798C92.5544 75.509 90.297 81.3966 91.3505 63.7337C91.802 55.3438 91.802 48.573 91.501 48.573C91.0495 48.573 88.7921 55.1966 86.5346 63.2921C84.1267 71.2405 81.7188 77.5697 80.9663 77.1281C80.2138 76.6865 80.3643 75.3618 81.4178 74.1843C82.3208 73.1539 82.7723 71.2405 82.3208 70.0629C81.8693 69.0326 82.3208 67.2663 83.2237 66.3832C84.1267 65.5 84.4277 64.3225 83.8257 63.7337C83.2237 63.145 82.0198 63.4393 81.1168 64.3225C76.903 68.4438 65.6158 60.4955 67.2713 54.4607C67.7228 52.8416 68.6257 51.5169 69.2277 51.5169C70.7327 51.5169 73.8931 55.3438 72.9901 56.0798C72.6891 56.5214 73.5921 56.8157 75.097 56.8157C77.3544 56.8157 77.8059 55.9326 77.3544 52.4C77.0534 49.8978 75.398 46.8067 73.7426 45.3348C72.0871 43.8629 71.4851 43.4214 72.2376 44.4517C75.2475 47.9843 74.0435 51.3697 69.6792 51.0753C65.9168 50.7809 65.4653 51.3697 65.0138 56.0798C64.7129 60.0539 65.4653 62.5562 68.4752 65.9416C73.1406 71.3876 75.2475 78.0112 75.097 86.1068L74.9465 91.9944L73.5921 85.8124C72.9901 82.2798 70.7327 77.2753 68.7762 74.773C66.6693 72.1236 64.4119 68.0023 63.5089 65.5C62.6059 63.145 61.8534 61.9674 61.8534 62.9978C61.5525 66.0888 57.6396 64.9112 53.8772 60.6427C51.0178 57.2573 49.5129 56.6685 46.9544 57.5517C42.7406 59.0236 42.5901 60.3483 46.6535 59.318C48.4594 58.8764 51.0178 59.6124 52.6733 61.0843C55.6832 63.7337 61.101 77.5697 59.7465 78.8944C59.295 79.336 58.5426 77.7169 57.9406 75.2146C57.3386 72.7124 56.2851 70.3573 55.5327 69.7685C54.7802 69.327 54.3287 69.7685 54.4792 70.7989C54.7802 71.682 54.0277 72.8596 53.1247 73.1539C51.9208 73.5955 51.1683 72.5652 51.1683 70.7989C51.1683 69.0326 52.0713 67.7079 53.1247 67.7079C54.3287 67.7079 54.1782 67.2663 52.6733 66.3832C49.2119 64.1753 47.8574 66.236 48.7604 71.9764C49.3624 74.9202 49.8138 78.7472 49.8138 80.5135C49.9643 82.427 50.5663 83.4573 51.3188 83.0157C52.0713 82.5742 52.6733 82.5742 52.6733 83.0157C52.6733 83.4573 52.0713 84.0461 51.3188 84.4876C50.1148 85.3708 47.1049 80.8079 35.3663 59.6124C33.1089 55.6382 30.701 51.6641 29.9485 50.9281C28.1426 48.8674 28.2931 46.6596 30.099 47.8371C31.002 48.2787 31.6039 48.2787 31.6039 47.5427C31.6039 45.3348 22.4238 42.2438 20.7683 43.8629C19.8653 44.7461 19.8653 45.6292 21.2198 46.3652C22.4238 47.2483 22.7247 46.9539 21.8218 45.6292C21.0693 44.4517 21.3703 44.0101 22.5742 44.4517C24.5307 45.0405 34.6138 61.2315 34.6138 63.7337C34.6138 64.4697 33.8614 64.4697 32.9584 63.8809C31.7544 63.2921 31.9049 63.8809 33.1089 66.0888C34.0119 67.8551 35.3663 68.8854 36.1188 68.4438C38.3762 67.1191 43.6436 78.6 41.8376 81.1023C40.6336 82.7214 40.4832 82.5742 41.2356 80.5135C41.8376 78.7472 41.5366 78.1584 40.3327 78.8944C39.2792 79.6303 38.9782 79.1888 39.4297 77.8641C39.8812 76.6865 39.2792 74.3315 38.0752 72.8596C35.8178 70.0629 35.8178 70.2101 36.8713 74.3315C38.2257 80.6607 44.2455 90.5225 46.3525 90.0809C47.4059 89.9337 48.0079 90.2281 48.0079 90.8169C47.8574 91.5528 47.8574 93.0247 48.0079 94.2023C48.1584 95.9686 48.4594 95.9686 49.3624 94.4966C50.2653 93.1719 51.1683 93.7607 52.5228 96.5573C54.1782 100.384 54.1782 100.384 51.6198 98.4708C49.2119 96.7045 49.2119 96.8517 51.7703 99.7955C54.6297 103.034 58.2416 104.358 56.4356 101.562C55.2317 99.6483 56.5861 99.6483 60.6495 101.856C68.7762 106.125 84.1267 106.272 94.2099 102.151ZM33.7109 98.7652C38.6772 94.9382 38.8277 94.3494 36.4198 92.5832C35.0653 91.5528 34.3129 91.2584 35.0653 91.9944C36.4198 93.6135 31.7544 98.618 29.497 97.7348C28.594 97.4405 27.6911 98.4708 27.5406 100.09C27.2396 103.77 27.0891 103.917 33.7109 98.7652ZM124.008 94.0551C122.503 92.436 120.697 91.2584 119.945 91.2584C119.042 91.2584 119.493 92.436 120.848 93.9079C122.352 95.3798 123.406 97.4405 123.406 98.3236C123.406 100.826 119.644 100.531 117.386 97.882C116.333 96.7045 114.677 95.6742 113.774 95.6742C112.871 95.6742 114.075 97.4405 116.483 99.6483L120.998 103.328L123.707 100.09C126.265 96.9989 126.265 96.5573 124.008 94.0551ZM36.1188 84.9292C39.7307 83.6045 28.2931 84.0461 24.0792 85.3708C20.3168 86.5483 20.3168 86.5483 24.6812 86.6955C28.895 86.8427 28.895 86.9899 26.6376 89.4921C22.1228 94.3494 23.9287 94.9382 29.0455 90.2281C31.6039 87.7259 34.9148 85.3708 36.1188 84.9292ZM131.984 87.4315C133.339 83.8989 130.479 80.2191 126.265 80.2191C122.653 80.2191 120.848 83.6045 122.503 87.7259C123.556 90.5225 130.78 90.3753 131.984 87.4315ZM133.188 75.0674C131.533 74.3315 128.824 73.7427 127.168 73.7427C124.61 73.5955 124.61 73.8899 126.416 75.0674C127.62 75.8034 130.329 76.3921 132.436 76.3921C135.897 76.3921 135.897 76.245 133.188 75.0674ZM28.594 72.8596C28.594 70.2101 15.802 69.7685 14.1465 72.418C13.394 73.5955 14.7485 73.7427 19.2634 73.1539C22.8752 72.5652 25.7346 72.7124 26.3366 73.5955C27.6911 75.6562 28.594 75.3618 28.594 72.8596ZM131.081 67.7079C132.586 67.7079 133.941 68.591 134.242 69.4742C134.693 70.7989 135.596 70.6517 137.402 68.8854C139.358 67.1191 139.509 66.3832 137.853 65.7944C134.693 64.6169 125.964 66.9719 125.212 69.1798C124.61 70.9461 124.911 71.0933 126.566 69.6214C127.62 68.591 129.727 67.7079 131.081 67.7079ZM28.7445 63.4393C32.0554 59.7596 29.6475 55.9326 24.0792 55.9326C18.9624 55.9326 16.103 59.7596 18.2099 63.5865C20.1663 66.9719 25.7346 66.9719 28.7445 63.4393ZM61.5525 53.4303L61.402 46.3652L60.198 52.2528C59.1445 57.6989 59.4455 60.3483 61.101 60.3483C61.402 60.3483 61.5525 57.2573 61.5525 53.4303ZM25.8851 51.9584C24.2297 49.309 19.5643 47.9843 19.5643 50.3393C19.5643 51.2225 20.4673 51.5169 21.6713 51.0753C22.8752 50.6337 24.2297 51.2225 24.6812 52.4C25.1327 53.5775 25.8851 54.4607 26.3366 54.4607C26.7881 54.4607 26.6376 53.2832 25.8851 51.9584ZM51.7703 50.1921C52.2218 49.4562 51.6198 48.1315 50.4158 47.1011C49.2119 46.0708 48.1584 44.1573 48.1584 42.8326C48.1584 41.3607 46.9544 40.3303 45.1485 40.3303C43.4931 40.3303 42.1386 40.9191 42.1386 41.5079C42.1386 42.0966 42.8911 42.6854 43.6436 42.6854C44.5465 42.6854 45.1485 43.5685 44.8475 44.5989C44.396 46.5124 48.0079 51.3697 49.9643 51.5169C50.5663 51.5169 51.3188 50.9281 51.7703 50.1921ZM29.798 39.5944C31.4535 40.4775 33.8614 41.2135 34.9148 41.2135C35.9683 41.0663 34.9148 40.036 32.6574 38.8584C27.9921 36.3562 24.0792 36.9449 24.0792 40.036C24.0792 41.5079 24.3802 41.5079 25.4337 39.8888C26.3366 38.4169 27.3901 38.2697 29.798 39.5944ZM125.513 37.9753C127.77 34.8843 127.62 34.4427 125.061 31.9405C122.804 29.5854 121.75 29.4382 119.042 30.7629C115.58 32.6764 114.828 36.6506 117.687 39.4472C120.396 42.0966 122.954 41.6551 125.513 37.9753ZM51.4693 33.118C52.2218 32.2348 52.6733 32.5292 52.6733 33.8539C52.8237 35.6202 53.1247 35.6202 54.6297 33.5596C57.0376 30.6157 63.8099 28.7022 66.5188 30.3214C68.9267 31.7933 76.903 31.0573 79.3109 29.1438C80.3643 28.4079 81.8693 28.1135 82.7723 28.7022C84.7287 29.8798 93.3069 28.1135 93.3069 26.4944C93.3069 23.9921 79.3109 22.2258 72.2376 23.8449C59.295 26.7888 53.1247 29.4382 48.7604 34.1483C46.3525 36.7978 45.7505 37.9753 47.4059 36.7978C49.0614 35.6202 50.8673 34.0011 51.4693 33.118ZM39.8812 35.3258C40.3327 34.5899 39.7307 33.8539 38.5267 33.8539C37.3228 33.8539 35.3663 32.6764 34.3129 31.3517C31.7544 27.9663 26.7881 26.936 27.9921 30.1742C28.4436 31.3517 29.798 32.382 30.8515 32.382C31.9049 32.382 33.5604 33.4124 34.6138 34.5899C36.7208 37.0921 38.5267 37.3865 39.8812 35.3258ZM121.148 20.7539C120.095 19.8708 111.366 28.1135 111.366 30.027C111.366 30.7629 113.774 29.291 116.634 26.4944C119.493 23.8449 121.449 21.1955 121.148 20.7539ZM51.1683 25.7584C54.0277 22.373 51.7703 19.1348 46.6535 19.1348C41.8376 19.1348 40.1822 15.4551 44.396 14.2775C46.0515 13.6888 45.901 13.6888 44.095 13.836C42.5901 13.9831 41.2356 15.4551 40.9346 17.3685C40.4832 20.6067 41.5366 21.1955 47.1049 20.7539C48.4594 20.6067 49.6633 21.3427 49.6633 22.6674C49.6633 23.8449 48.4594 25.6112 47.1049 26.3472C44.697 27.6719 44.697 27.8191 46.8039 27.9663C48.1584 27.9663 50.1148 26.936 51.1683 25.7584ZM112.119 22.0787C114.376 18.8405 116.032 15.7494 115.58 15.4551C115.279 15.0135 112.721 17.6629 110.012 21.3427C107.303 25.0225 105.798 27.9663 106.55 27.9663C107.303 27.9663 109.861 25.3169 112.119 22.0787ZM105.949 14.5719C106.55 13.2472 106.099 11.4809 104.895 10.5978C103.24 9.27304 101.584 10.1562 96.9188 15.0135C93.3069 18.6933 92.103 20.6067 93.9089 20.018C97.8218 18.6933 102.337 20.3124 102.487 23.2562C102.638 24.5809 103.24 23.8449 103.842 21.3427C104.444 18.9876 105.497 15.8966 105.949 14.5719ZM63.2079 20.6067C64.8633 19.4292 64.2614 19.282 61.101 20.018C57.4891 20.9011 56.8871 20.6067 57.6396 18.6933C58.0911 17.3685 57.7901 16.191 56.8871 15.8966C55.8336 15.4551 55.6832 14.4247 56.4356 13.2472C57.3386 11.7753 58.0911 11.9225 59.596 13.9831C60.8 15.4551 62.1544 16.191 62.7564 15.7494C63.3584 15.1607 62.6059 13.5416 61.2515 12.2169C58.8435 9.8618 58.5426 9.8618 56.2851 12.0697C54.6297 13.6888 54.1782 15.7494 54.7802 18.2517C55.8336 22.2258 59.1445 23.2562 63.2079 20.6067ZM71.1841 18.1045C68.4752 17.0742 68.7762 14.7191 71.4851 14.7191C72.6891 14.7191 73.7426 15.4551 73.7426 16.191C73.7426 17.0742 74.3445 17.6629 74.9465 17.6629C75.699 17.6629 76 15.7494 75.5485 13.2472C74.9465 9.56742 74.194 8.83146 70.8832 8.97865C67.4218 9.27304 67.2713 9.27304 70.4317 9.8618C74.495 10.5978 74.796 12.6584 70.7327 13.6888C66.9703 14.5719 66.6693 19.1348 70.4317 18.9876C71.9366 18.9876 72.2376 18.5461 71.1841 18.1045ZM83.3742 14.7191C83.2237 12.2169 83.8257 10.3034 84.5782 10.3034C85.4812 10.3034 85.3307 9.42023 84.2772 8.09551C81.5683 4.8573 80.2138 6.6236 80.6653 12.8056C80.9663 19.4292 80.9663 19.1348 82.4713 19.1348C83.2237 19.1348 83.5247 17.2213 83.3742 14.7191Z\" fill=\"white\" />\r\n            <path d=\"M51.1683 113.484C51.1683 109.657 53.7268 108.185 56.4357 110.393C59.1446 112.601 57.6396 116.281 54.0277 116.281C52.2218 116.281 51.1683 115.251 51.1683 113.484Z\" fill=\"white\" />\r\n            <path d=\"M104.895 113.631C102.487 111.129 102.487 110.688 104.594 109.804C107.002 108.921 109.109 111.865 108.055 114.809C107.754 115.839 106.4 115.398 104.895 113.631Z\" fill=\"white\" />\r\n            <path d=\"M125.062 86.9899C122.955 85.6652 123.707 80.955 126.115 80.955C128.372 80.955 131.232 85.0764 130.178 86.8427C128.974 88.609 127.77 88.7562 125.062 86.9899Z\" fill=\"white\" />\r\n            <path d=\"M19.7148 62.7033C17.4574 60.0539 20.9188 57.2573 25.2831 58.4348C27.9921 59.0236 28.293 59.7595 26.9386 61.9674C25.2831 65.2056 22.1227 65.6472 19.7148 62.7033Z\" fill=\"white\" />\r\n            <path d=\"M117.687 35.7674C117.988 34.2955 119.794 32.9708 121.6 32.6764C124.459 32.2348 125.061 32.8236 124.61 34.8843C124.309 36.3562 122.503 37.6809 120.697 37.9753C117.838 38.4169 117.236 37.8281 117.687 35.7674Z\" fill=\"white\" />\r\n            <path d=\"M98.8753 18.2517C97.5209 16.927 100.681 11.4809 102.337 12.5112C102.939 12.9528 103.24 14.5719 102.788 16.191C102.036 19.1348 100.531 19.8708 98.8753 18.2517Z\" fill=\"white\" />\r\n            <path d=\"M60.6495 128.792C40.6336 123.493 25.7346 111.276 16.8554 92.8775C12.1901 83.6045 11.2871 79.9247 10.8356 69.1798C9.33068 38.2697 26.0356 13.3944 55.2317 2.94382C63.2079 0.147191 66.8198 -0.294382 80.8158 0.147191C95.7148 0.735955 98.1228 1.17753 107.453 5.74045C140.562 21.6371 154.408 60.4955 138.606 93.4663C125.061 121.874 91.802 136.888 60.6495 128.792ZM72.8396 122.61C74.0435 114.662 73.8931 111.865 72.2376 111.865C71.4851 111.865 70.7327 113.043 70.7327 114.662C70.7327 116.134 69.8297 118.194 68.6257 119.078C66.8198 120.549 66.3683 119.961 65.9168 115.251C65.3148 109.952 65.3148 109.805 63.8099 113.337C61.703 117.9 62.7564 121.874 66.3683 122.905C67.8732 123.493 69.2277 124.818 69.2277 125.996C69.2277 130.411 71.9366 127.762 72.8396 122.61ZM83.2237 124.524C84.5782 121.285 81.4178 111.865 79.0099 111.865C77.8059 111.865 76.4515 112.601 76 113.337C75.5485 114.22 75.8495 114.809 76.903 114.809C77.9564 114.809 78.2574 116.281 77.8059 119.078C76.602 124.671 81.2673 129.381 83.2237 124.524ZM89.5445 117.9C88.3406 112.012 91.0495 110.835 93.1564 116.281C93.9089 118.783 95.4138 120.697 96.1663 120.697C98.2733 120.697 98.2733 119.078 96.3168 113.926C94.9624 110.54 94.2099 110.099 89.996 110.982C83.8257 112.16 83.9762 112.012 85.9327 117.458C88.0396 123.346 90.899 123.64 89.5445 117.9ZM58.6931 117.164C59.596 115.987 60.198 113.484 59.897 111.571C58.994 105.389 48.1584 106.861 48.1584 113.19C48.1584 118.636 55.0812 121.285 58.6931 117.164ZM110.764 112.454C110.313 108.774 109.259 104.653 108.507 103.328C107.303 101.12 106.851 101.415 105.497 105.094C103.992 108.48 103.24 109.069 100.079 108.333C94.6614 107.008 95.4138 109.51 101.885 114.662C110.012 121.285 111.968 120.697 110.764 112.454ZM47.2554 108.774C50.4158 103.475 49.2119 100.973 45.7505 105.83C44.095 108.038 42.4396 108.774 40.4832 108.185C36.8713 107.008 36.7208 109.657 40.3327 111.718C44.095 113.926 44.2455 113.779 47.2554 108.774ZM42.7406 98.3236C42.1386 97.5877 39.8812 98.7652 37.4733 100.973C35.2158 103.181 33.5604 105.536 34.0119 106.272C34.6138 107.008 36.8713 105.83 39.2792 103.622C41.5366 101.415 43.1921 99.0596 42.7406 98.3236ZM94.2099 102.151C101.133 99.3539 108.958 92.2888 113.323 84.9292C116.333 79.9247 121.901 60.4955 121.901 54.9023C121.901 54.3135 117.838 61.673 112.871 71.5348C103.992 88.7562 103.691 89.1978 99.3267 88.609C94.9624 88.0202 94.9624 87.873 97.0693 83.8989C98.7247 80.6607 99.9287 80.0719 103.089 80.5135C106.4 81.2495 107.303 80.5135 110.463 73.4483C116.182 60.4955 120.547 48.2787 119.042 49.1618C118.289 49.6034 116.032 47.2483 113.925 43.8629C111.818 40.3303 108.507 36.0618 106.55 34.4427C102.337 30.6157 93.3069 25.1697 95.8653 27.8191C96.7683 28.9966 97.2198 30.7629 96.7683 31.9405C96.3168 33.118 97.3703 35.3258 99.1762 36.9449C102.788 40.1832 102.939 41.0663 100.832 44.1573C99.7782 45.9236 99.0257 45.9236 97.5208 44.4517C95.4138 42.391 90.899 42.0966 89.695 44.0101C89.0931 44.7461 90.297 45.0405 91.9525 44.5989C95.2634 43.7157 95.2634 43.8629 94.2099 56.0798C92.5544 75.509 90.297 81.3966 91.3505 63.7337C91.802 55.3438 91.802 48.573 91.501 48.573C91.0495 48.573 88.7921 55.1966 86.5346 63.2921C84.1267 71.2405 81.7188 77.5697 80.9663 77.1281C80.2138 76.6865 80.3643 75.3618 81.4178 74.1843C82.3208 73.1539 82.7723 71.2405 82.3208 70.0629C81.8693 69.0326 82.3208 67.2663 83.2237 66.3832C84.1267 65.5 84.4277 64.3225 83.8257 63.7337C83.2237 63.145 82.0198 63.4393 81.1168 64.3225C76.903 68.4438 65.6158 60.4955 67.2713 54.4607C67.7228 52.8416 68.6257 51.5169 69.2277 51.5169C70.8832 51.5169 74.3445 55.9326 72.8396 55.9326C72.0871 55.9326 72.5386 56.5214 73.7426 57.2573C74.9465 58.1405 76.301 58.4348 76.903 57.9933C79.0099 56.8157 76.7525 47.9843 73.7426 45.3348C72.0871 43.8629 71.4851 43.4214 72.2376 44.4517C75.2475 47.9843 74.0435 51.3697 69.6792 51.0753C65.9168 50.7809 65.4653 51.3697 65.0138 56.0798C64.7129 60.0539 65.4653 62.5562 68.4752 65.9416C73.1406 71.3876 75.2475 78.0112 75.097 86.1068L74.9465 91.9944L73.5921 85.8124C72.9901 82.2798 70.7327 77.2753 68.7762 74.773C66.6693 72.1236 64.4119 68.0023 63.5089 65.5C62.6059 63.145 61.8534 61.9674 61.8534 62.9978C61.5525 66.0888 57.6396 64.9112 53.8772 60.6427C51.0178 57.2573 49.5129 56.6685 46.9544 57.5517C42.7406 59.0236 42.5901 60.3483 46.6535 59.318C48.4594 58.8764 51.0178 59.6124 52.6733 61.0843C55.6832 63.7337 61.101 77.5697 59.7465 78.8944C59.295 79.336 58.5426 77.7169 57.9406 75.2146C57.3386 72.7124 56.2851 70.3573 55.5327 69.7685C54.7802 69.327 54.3287 69.7685 54.4792 70.7989C54.7802 71.682 54.0277 72.8596 53.1247 73.1539C51.9208 73.5955 51.1683 72.5652 51.1683 70.7989C51.1683 69.0326 52.0713 67.7079 53.1247 67.7079C54.3287 67.7079 54.1782 67.2663 52.6733 66.3832C49.2119 64.1753 47.8574 66.236 48.7604 71.9764C49.3624 74.9202 49.8138 78.7472 49.8138 80.5135C49.9643 82.427 50.5663 83.4573 51.3188 83.0157C52.0713 82.5742 52.6733 82.5742 52.6733 83.0157C52.6733 83.4573 52.0713 84.0461 51.3188 84.4876C50.1148 85.3708 47.4059 81.2495 35.3663 59.6124C33.1089 55.6382 30.5505 51.3697 29.6475 50.4865C28.594 49.0146 29.0455 48.573 31.002 48.573C33.4099 48.4258 33.1089 47.8371 29.3465 44.8933C24.2297 40.7719 25.2832 38.4169 31.002 41.0663C35.9683 43.2742 37.9247 41.8023 34.0119 38.8584C29.9485 35.9146 24.0792 36.209 24.0792 39.1528C24.0792 40.4775 23.0257 42.391 21.5208 43.4214C19.5643 44.7461 19.5643 45.482 21.0693 46.3652C22.4238 47.2483 22.7247 46.9539 21.8218 45.6292C21.0693 44.4517 21.3703 44.0101 22.5742 44.4517C24.5307 45.0405 34.6138 61.2315 34.6138 63.7337C34.6138 64.4697 33.8614 64.4697 32.9584 63.8809C31.7544 63.2921 31.9049 63.8809 33.1089 66.0888C34.0119 67.8551 35.3663 68.8854 36.1188 68.4438C38.3762 67.1191 43.6436 78.6 41.8376 81.1023C40.6336 82.7214 40.4832 82.5742 41.2356 80.5135C41.8376 78.7472 41.5366 78.1584 40.3327 78.8944C39.2792 79.6303 38.9782 79.1888 39.4297 77.8641C39.8812 76.6865 39.2792 74.3315 38.0752 72.8596C35.8178 70.0629 35.8178 70.2101 36.8713 74.3315C38.2257 80.6607 44.2455 90.5225 46.3525 90.0809C47.4059 89.9337 48.0079 90.2281 48.0079 90.8169C47.8574 91.5528 47.8574 93.0247 48.0079 94.2023C48.1584 95.9686 48.4594 95.9686 49.3624 94.4966C50.2653 93.1719 51.1683 93.7607 52.5228 96.5573C54.1782 100.384 54.1782 100.384 51.6198 98.4708C49.2119 96.7045 49.2119 96.8517 51.7703 99.7955C54.6297 103.034 58.2416 104.358 56.4356 101.562C55.2317 99.6483 56.5861 99.6483 60.6495 101.856C68.7762 106.125 84.1267 106.272 94.2099 102.151ZM35.2158 99.0596C37.1723 96.8517 38.3762 94.2023 38.0752 93.1719C36.8713 90.2281 35.0653 90.8169 34.1624 94.3494C33.5604 96.7045 32.5069 97.2933 30.2495 96.7045C27.6911 96.1157 27.0891 96.7045 27.0891 99.5011C27.0891 104.211 30.8515 104.064 35.2158 99.0596ZM125.513 99.5011C127.77 95.9686 127.62 95.6742 123.857 92.8775C121.75 91.1112 119.343 89.7865 118.741 89.7865C116.333 89.7865 117.386 92.2888 120.697 94.4966C122.503 95.6742 123.406 97.2933 122.804 98.3236C122.051 99.6483 120.697 99.3539 117.988 97.7348C113.022 94.4966 111.517 96.2629 116.032 99.9427C120.848 103.917 122.503 103.77 125.513 99.5011ZM30.099 90.5225C32.0554 88.4618 34.4634 86.8427 35.6673 86.8427C36.7208 86.8427 37.6237 86.2539 37.6237 85.3708C37.6237 83.4573 23.0257 83.4573 21.8218 85.3708C21.2198 86.2539 22.5742 86.8427 24.9822 86.8427C28.895 86.8427 28.895 86.9899 26.6376 89.4921C21.3703 95.0854 24.8317 96.1157 30.099 90.5225ZM132.737 87.5787C133.941 84.782 133.941 83.4573 132.436 81.691C129.727 78.4528 123.857 78.8944 121.75 82.7214C120.246 85.3708 120.547 86.2539 123.406 88.609C127.921 92.2888 130.63 91.9944 132.737 87.5787ZM135.446 76.5393C135.446 74.4787 131.834 73.3011 127.62 73.8899L124.158 74.6259L127.921 76.245C132.737 78.3056 135.446 78.4528 135.446 76.5393ZM30.099 73.7427C30.099 70.7989 25.8851 69.4742 19.8653 70.2101C11.7386 71.2405 11.7386 73.3011 20.0158 74.0371C23.4772 74.3315 27.2396 74.6259 28.2931 74.773C29.196 74.9202 30.099 74.4787 30.099 73.7427ZM139.509 68.7382C141.164 66.9719 136.649 63.145 134.693 64.7641C133.79 65.5 132.586 65.7944 131.984 65.3528C130.63 63.8809 124.911 66.236 124.911 68.2966C124.911 70.2101 137.552 70.5045 139.509 68.7382ZM28.1426 64.1753C32.3564 59.6124 30.2495 55.9326 23.3267 55.9326C16.5544 55.9326 14.4475 61.0843 19.5643 65.0584C23.9287 68.4438 24.3802 68.4438 28.1426 64.1753ZM136.198 57.5517C136.198 55.6382 135.295 53.7247 134.242 53.2832C133.188 52.9888 132.737 53.5775 133.339 55.0494C134.693 58.582 131.984 57.8461 129.125 53.7247C127.62 51.8112 126.867 49.1618 127.319 47.9843C128.372 45.3348 130.931 44.7461 130.931 47.1011C130.931 47.9843 131.683 48.573 132.436 48.573C134.693 48.573 134.242 44.7461 131.834 42.8326C130.63 41.8023 128.071 41.5079 125.663 42.0966C123.105 42.6854 122.202 43.4214 123.406 44.1573C124.76 45.0405 124.76 46.0708 123.556 48.4258C122.202 50.9281 122.202 52.8416 123.707 56.8157C125.362 61.5259 125.964 61.9674 130.931 61.5259C135.446 61.0843 136.198 60.4955 136.198 57.5517ZM61.5525 53.4303L61.402 46.3652L60.198 52.2528C59.1445 57.6989 59.4455 60.3483 61.101 60.3483C61.402 60.3483 61.5525 57.2573 61.5525 53.4303ZM25.5841 51.5169C23.9287 48.573 19.5643 47.3955 19.5643 49.7506C19.5643 50.7809 24.3802 53.7247 26.7881 54.3135C26.9386 54.4607 26.4871 53.136 25.5841 51.5169ZM51.7703 50.1921C52.2218 49.4562 51.6198 48.1315 50.4158 47.1011C49.2119 46.0708 48.1584 44.1573 48.1584 42.8326C48.1584 41.3607 46.9544 40.3303 45.1485 40.3303C43.4931 40.3303 42.1386 40.9191 42.1386 41.5079C42.1386 42.0966 42.8911 42.6854 43.6436 42.6854C44.5465 42.6854 45.1485 43.5685 44.8475 44.5989C44.396 46.5124 48.0079 51.3697 49.9643 51.5169C50.5663 51.5169 51.3188 50.9281 51.7703 50.1921ZM126.115 39.4472C130.63 35.0315 126.115 28.4079 119.794 30.027C115.43 31.0573 113.774 34.5899 115.881 38.4169C117.687 41.5079 123.406 42.0966 126.115 39.4472ZM51.4693 33.118C52.2218 32.2348 52.6733 32.5292 52.6733 33.8539C52.8237 35.6202 53.1247 35.6202 54.6297 33.5596C57.0376 30.6157 63.8099 28.7022 66.5188 30.3214C68.9267 31.7933 76.903 31.0573 79.3109 29.1438C80.3643 28.4079 81.8693 28.1135 82.7723 28.7022C84.7287 29.8798 93.3069 28.1135 93.3069 26.4944C93.3069 23.9921 79.3109 22.2258 72.2376 23.8449C59.295 26.7888 53.1247 29.4382 48.7604 34.1483C46.3525 36.7978 45.7505 37.9753 47.4059 36.7978C49.0614 35.6202 50.8673 34.0011 51.4693 33.118ZM40.6336 34.5899C40.4832 33.8539 39.5802 33.2652 38.5267 33.5596C36.5703 33.8539 33.5604 31.3517 33.2594 29.1438C33.1089 28.4079 32.8079 27.9663 32.3564 27.9663C31.9049 27.9663 30.5505 27.9663 29.3465 27.9663C26.1861 27.9663 27.9921 31.3517 32.8079 34.2955C37.0218 36.9449 40.9346 37.0921 40.6336 34.5899ZM117.838 26.7888C120.998 23.6978 122.954 20.7539 122.352 20.1652C121.299 18.9876 109.861 29.1438 109.861 31.2045C109.861 33.7067 112.42 32.2348 117.838 26.7888ZM52.5228 25.1697C54.3287 21.7843 52.9742 19.1348 49.2119 19.1348C47.4059 19.1348 44.998 18.5461 43.794 17.8101C42.1386 16.7798 42.2891 16.191 44.5465 14.8663C46.9544 13.5416 46.9544 13.3944 44.998 13.2472C43.6436 13.2472 41.6871 14.2775 40.6336 15.4551C38.0752 18.3989 41.0851 22.0787 46.0515 22.0787C50.1148 22.0787 50.8673 24.5809 47.4059 25.9056C46.202 26.4944 45.4495 27.3775 45.901 28.1135C47.1049 29.7326 51.0178 28.1135 52.5228 25.1697ZM112.871 22.0787C115.58 18.6933 117.236 15.6022 116.784 15.0135C115.731 14.1303 105.497 24.7281 105.347 26.936C105.196 29.5854 108.507 27.5247 112.871 22.0787ZM105.949 17.2213C107.303 6.32921 102.186 6.03483 94.5109 16.6326C91.501 20.7539 91.501 20.9011 94.2099 20.018C97.6713 18.9876 99.9287 20.3124 101.434 24.1393C102.939 28.2607 104.745 25.3169 105.949 17.2213ZM64.2614 19.7236C64.5624 18.6933 63.3584 18.2517 60.6495 18.6933L56.4356 19.282L60.6495 16.927C64.1109 15.0135 64.5624 14.1303 63.0574 12.364C58.6931 7.21236 51.7703 12.2169 54.3287 18.8405C55.3822 21.4899 56.5861 22.2258 59.7465 21.7843C61.8534 21.4899 63.9604 20.6067 64.2614 19.7236ZM75.398 19.1348C77.6554 19.1348 76.903 10.7449 74.495 8.83146C72.6891 7.35955 71.3346 7.35955 68.7762 8.53708L65.4653 10.1562H68.9267C72.5386 10.3034 73.7426 13.2472 70.1307 13.2472C68.9267 13.2472 67.4218 13.9831 66.9703 14.7191C65.6158 16.927 69.2277 20.9011 71.7861 19.8708C72.9901 19.4292 74.6455 19.1348 75.398 19.1348ZM84.4277 17.2213C82.1703 15.0135 82.3208 13.836 85.0297 11.3337C86.8356 9.42023 86.8356 8.83146 84.5782 6.91798C82.1703 4.71011 81.7188 4.71011 80.0633 7.35955C79.0099 8.97865 78.8594 10.3034 79.6119 10.3034C80.3643 10.3034 80.6653 11.6281 80.2138 13.2472C79.3109 16.6326 82.3208 21.0483 84.5782 19.7236C85.4812 19.1348 85.4812 18.2517 84.4277 17.2213Z\" fill=\"white\" />\r\n            <path d=\"M43.6436 86.1067C42.1386 84.3404 42.1386 83.4573 43.3426 82.2798C44.3961 81.5438 44.8476 81.3966 44.3961 81.8382C44.0951 82.427 44.3961 84.0461 45.299 85.518C47.105 88.9034 46.202 89.1977 43.6436 86.1067Z\" fill=\"white\" />\r\n            <path d=\"M102.036 72.5652C102.939 72.2708 103.541 71.2404 102.939 70.5045C102.487 69.7685 102.788 69.1798 103.541 69.1798C104.895 69.1798 109.109 61.8202 108.657 60.0539C108.507 59.318 108.958 58.8764 109.56 58.8764C110.162 58.8764 111.968 56.8157 113.473 54.3135C114.978 51.8112 116.483 50.1921 116.784 50.4865C117.838 51.5168 103.39 73.5955 101.735 73.4483C100.832 73.4483 100.832 73.0067 102.036 72.5652Z\" fill=\"white\" />\r\n            <path d=\"M99.0257 55.1966C99.3267 53.1359 99.9287 51.5168 100.23 51.5168C100.531 51.5168 100.832 53.1359 100.832 55.1966C100.832 57.2573 100.23 58.8764 99.4772 58.8764C98.8752 58.8764 98.5742 57.2573 99.0257 55.1966Z\" fill=\"white\" />\r\n            <path d=\"M60.6495 128.792C40.6336 123.493 25.7346 111.276 16.8554 92.8775C12.1901 83.6045 11.2871 79.9247 10.8356 69.1798C9.33068 38.2697 26.0356 13.3944 55.2317 2.94382C63.2079 0.147191 66.8198 -0.294382 80.8158 0.147191C95.7148 0.735955 98.1228 1.17753 107.453 5.74045C140.562 21.6371 154.408 60.4955 138.606 93.4663C125.061 121.874 91.802 136.888 60.6495 128.792ZM72.8396 124.818C74.194 119.519 73.8931 111.865 72.2376 111.865C71.4851 111.865 70.7327 113.043 70.7327 114.662C70.7327 116.134 69.8297 118.194 68.6257 119.078C66.8198 120.549 66.3683 119.961 65.9168 115.251C65.3148 109.952 65.3148 109.805 63.8099 113.337C61.703 117.9 62.7564 121.874 66.3683 122.905C67.8732 123.493 69.2277 124.818 69.2277 125.996C69.2277 129.234 71.7861 128.351 72.8396 124.818ZM83.2237 124.524C84.5782 121.285 81.4178 111.865 79.0099 111.865C77.8059 111.865 76.4515 112.601 76 113.337C75.5485 114.22 75.8495 114.809 76.903 114.809C77.9564 114.809 78.2574 116.281 77.8059 119.078C76.602 124.671 81.2673 129.381 83.2237 124.524ZM89.8455 117.753C88.6416 111.865 91.0495 110.688 93.1564 116.281C93.9089 118.783 95.4138 120.697 96.1663 120.697C98.2733 120.697 98.2733 119.078 96.3168 113.926C94.9624 110.54 94.2099 110.099 89.996 110.982C83.8257 112.16 83.9762 112.012 85.9327 117.458C88.0396 123.493 91.0495 123.64 89.8455 117.753ZM59.295 115.987C60.9505 113.779 61.101 112.16 60.0475 110.099C57.3386 105.094 48.1584 107.597 48.1584 113.337C48.1584 119.372 55.6832 121.138 59.295 115.987ZM110.764 112.454C110.313 108.774 109.259 104.653 108.507 103.328C107.303 101.12 106.851 101.415 105.497 105.094C103.992 108.48 103.24 109.069 100.079 108.333C94.6614 107.008 95.4138 109.51 101.885 114.662C110.012 121.285 111.968 120.697 110.764 112.454ZM47.2554 108.774C50.4158 103.475 49.2119 100.973 45.7505 105.83C44.095 108.038 42.4396 108.774 40.4832 108.185C36.8713 107.008 36.7208 109.657 40.3327 111.718C44.095 113.926 44.2455 113.779 47.2554 108.774ZM42.7406 98.3236C42.1386 97.5877 39.8812 98.7652 37.4733 100.973C35.2158 103.181 33.5604 105.536 34.0119 106.272C34.6138 107.008 36.8713 105.83 39.2792 103.622C41.5366 101.415 43.1921 99.0596 42.7406 98.3236ZM85.7822 104.358C89.5445 103.622 93.7584 102.739 95.2634 102.445C98.8752 102.003 109.259 91.8472 113.624 84.6348C115.58 81.3966 118.289 74.4787 119.493 69.327C121.75 59.9067 124.911 54.1663 124.911 59.4652C124.911 61.5259 125.964 61.9674 130.63 61.5259C135.446 61.0843 136.198 60.6427 136.198 57.5517C136.198 55.6382 135.295 53.7247 134.242 53.2832C133.188 52.9888 132.737 53.5775 133.339 55.0494C134.844 58.7292 131.683 57.6989 129.426 53.8719C128.372 51.8112 128.071 49.1618 128.673 47.5427C129.426 45.7764 130.028 45.482 130.479 46.6596C131.382 49.1618 133.941 49.0146 133.941 46.5124C133.941 43.127 130.028 41.0663 125.663 42.0966C123.255 42.6854 122.352 43.4214 123.255 44.1573C125.212 45.3348 117.838 63.2921 108.808 79.4832C103.842 88.3146 102.939 89.1978 99.1762 88.609C94.9624 88.0202 94.9624 87.873 97.0693 83.8989C98.7247 80.6607 99.9287 80.0719 103.089 80.5135C106.4 81.2495 107.303 80.5135 110.463 73.4483C115.279 62.409 120.547 48.573 119.644 48.573C119.343 48.573 115.43 54.1663 111.216 61.0843C106.851 68.0023 103.089 73.5955 102.788 73.5955C102.036 73.5955 106.701 64.9112 111.968 56.6685C119.493 45.1876 119.493 45.0405 117.687 46.218C116.784 46.8067 114.978 45.3348 113.774 42.8326C109.56 35.0315 98.5742 27.0831 88.0396 24.2865C82.4713 22.8146 76.7525 22.0787 74.194 22.6674C71.9366 23.2562 67.4218 24.2865 64.4119 24.8753C58.5426 26.2 52.6733 29.291 46.9544 34.2955C42.4396 38.2697 42.7406 40.6247 47.4059 37.6809C49.3624 36.3562 52.6733 35.3258 54.7802 35.3258C56.8871 35.3258 58.994 34.7371 59.4455 33.8539C60.0475 32.9708 59.295 32.8236 57.6396 33.4124C55.8336 34.0011 55.3822 33.8539 56.4356 32.8236C58.8435 30.4685 66.2178 29.1438 66.2178 31.0573C66.2178 32.0876 68.0237 32.382 71.1841 31.9405C96.6178 27.5247 96.3168 27.5247 96.3168 33.118C96.3168 34.8843 97.3703 36.7978 98.5742 37.3865C99.9287 37.8281 100.832 39.8888 100.681 42.2438C100.681 44.4517 100.23 45.482 99.7782 44.5989C99.0257 42.391 90.899 41.9494 89.695 44.0101C89.0931 44.7461 90.297 45.0405 91.9525 44.5989C95.2634 43.7157 95.2634 43.8629 94.2099 56.0798C92.5544 76.245 90.297 81.2495 91.2 63.2921C91.802 46.0708 91.802 46.218 84.4277 69.1798C81.4178 78.3056 81.2673 77.5697 83.5247 66.236C84.4277 61.9674 84.2772 61.3787 82.6218 62.9978C79.1604 66.0888 72.5386 65.2056 69.8297 60.9371C66.5188 56.227 69.0772 52.6944 72.9901 56.5214C76.602 59.9067 78.7089 57.8461 77.8059 51.9584C76.903 46.5124 74.3445 42.6854 71.7861 42.6854C70.7327 42.6854 70.7327 43.2742 71.9366 44.4517C75.398 47.8371 74.0435 51.3697 69.6792 51.0753C65.9168 50.7809 65.4653 51.3697 65.0138 56.0798C64.7129 60.0539 65.4653 62.5562 68.4752 65.9416C73.1406 71.3876 75.2475 78.0112 75.097 86.1068L74.9465 91.9944L73.5921 85.8124C72.9901 82.2798 70.7327 77.2753 68.6257 74.773C66.6693 72.1236 64.4119 68.1494 63.9604 65.7944C63.0574 62.7034 62.4554 62.1146 60.9505 63.2921C59.596 64.4697 57.7901 63.4393 54.3287 59.6124C51.7703 56.6685 49.6633 55.0494 49.6633 55.9326C49.6633 56.6685 48.7604 57.4045 47.5564 57.4045C46.3525 57.4045 44.998 57.9933 44.5465 58.7292C43.9445 59.4652 44.998 59.7596 46.6535 59.318C48.4594 58.8764 51.0178 59.6124 52.6733 61.0843C55.6832 63.7337 61.101 77.5697 59.7465 78.8944C59.295 79.336 58.5426 77.7169 57.9406 75.3618C56.8871 70.2101 51.6198 64.3225 49.3624 65.6472C47.8574 66.5303 48.3089 73.1539 50.2653 78.7472C51.4693 82.427 47.5564 74.773 44.5465 67.7079C42.7406 63.5865 42.4396 63.2921 43.0416 66.6775C44.2455 72.2708 42.7406 71.682 39.1287 65.2056C37.4733 62.1146 34.6138 57.4045 32.9584 54.6079C30.8515 51.0753 30.4 49.309 31.6039 48.573C32.8079 47.8371 31.9049 46.5124 29.0455 44.4517C24.0792 40.9191 25.4337 38.564 31.002 41.0663C35.9683 43.2742 37.9247 41.8023 34.0119 38.8584C29.6475 35.7674 24.0792 36.209 24.0792 39.5944C24.0792 41.2135 23.3267 42.6854 22.4238 42.9798C21.3703 43.2742 20.4673 45.3348 20.1663 47.5427C19.8653 50.3393 20.6178 51.6641 22.7247 52.2528C26.7881 53.5775 26.3366 55.9326 21.9723 55.9326C18.8119 55.9326 16.5544 58.2876 16.5544 61.9674C16.5544 62.7034 18.2099 64.3225 20.3168 65.6472C23.7782 67.8551 24.3802 67.8551 26.7881 65.7944C30.5505 62.409 32.3564 64.3225 36.4198 75.2146C40.4832 85.8124 48.0079 96.8517 49.6633 94.2023C50.2653 93.3191 51.4693 94.3494 52.5228 96.5573C54.1782 100.384 54.1782 100.384 51.7703 98.4708C49.5129 96.7045 49.5129 96.9989 51.9208 100.384C55.0812 104.653 57.1881 105.683 57.1881 102.887C57.1881 101.856 58.2416 101.709 59.897 102.298C67.8732 105.683 76.602 106.419 85.7822 104.358ZM35.2158 99.0596C37.1723 96.8517 38.3762 94.2023 38.0752 93.1719C36.8713 90.2281 35.0653 90.8169 34.1624 94.3494C33.5604 96.7045 32.5069 97.2933 30.2495 96.7045C27.6911 96.1157 27.0891 96.7045 27.0891 99.5011C27.0891 104.211 30.8515 104.064 35.2158 99.0596ZM125.513 99.5011C127.77 95.9686 127.62 95.6742 123.857 92.8775C121.75 91.1112 119.343 89.7865 118.741 89.7865C116.333 89.7865 117.386 92.2888 120.697 94.4966C122.503 95.6742 123.406 97.2933 122.804 98.3236C122.051 99.6483 120.697 99.3539 117.988 97.7348C113.022 94.4966 111.517 96.2629 116.032 99.9427C120.848 103.917 122.503 103.77 125.513 99.5011ZM30.099 90.5225C32.0554 88.4618 34.4634 86.8427 35.6673 86.8427C36.7208 86.8427 37.6237 86.2539 37.6237 85.3708C37.6237 83.4573 23.0257 83.4573 21.8218 85.3708C21.2198 86.2539 22.5742 86.8427 24.9822 86.8427C28.895 86.8427 28.895 86.9899 26.6376 89.4921C21.3703 95.0854 24.8317 96.1157 30.099 90.5225ZM132.737 87.5787C133.941 84.782 133.941 83.4573 132.436 81.691C129.727 78.4528 123.857 78.8944 121.75 82.7214C120.246 85.3708 120.547 86.2539 123.406 88.609C127.921 92.2888 130.63 91.9944 132.737 87.5787ZM135.446 76.5393C135.446 74.4787 131.834 73.3011 127.62 73.8899L124.158 74.6259L127.921 76.245C132.737 78.3056 135.446 78.4528 135.446 76.5393ZM30.099 73.7427C30.099 70.7989 25.8851 69.4742 19.8653 70.2101C11.7386 71.2405 11.7386 73.3011 20.0158 74.0371C23.4772 74.3315 27.2396 74.6259 28.2931 74.773C29.196 74.9202 30.099 74.4787 30.099 73.7427ZM139.509 68.7382C141.164 66.9719 136.649 63.145 134.693 64.7641C133.79 65.5 132.586 65.7944 131.984 65.3528C130.63 63.8809 124.911 66.236 124.911 68.2966C124.911 70.2101 137.552 70.5045 139.509 68.7382ZM61.703 53.8719C61.703 50.3393 62.1544 46.218 62.7564 44.7461C63.3584 42.9798 63.2079 42.5382 62.0039 43.2742C60.9505 43.8629 60.198 46.5124 60.198 49.309C60.198 51.9584 59.4455 54.4607 58.5426 54.7551C57.7901 55.0494 57.4891 56.3742 57.9406 57.8461C59.897 62.409 61.703 60.4955 61.703 53.8719ZM52.0713 49.1618C51.6198 47.8371 50.7168 45.1876 50.2653 43.2742C49.3624 39.8888 48.0079 39.5944 40.6336 41.0663C40.1822 41.2135 41.0851 41.9494 42.5901 42.8326C43.9445 43.7157 44.697 45.0405 44.2455 45.9236C43.0416 47.6899 47.5564 51.5169 50.8673 51.5169C52.2218 51.5169 52.6733 50.6337 52.0713 49.1618ZM56.5861 43.2742C55.8336 41.2135 55.2317 41.0663 53.7267 42.5382C52.3723 43.8629 52.3723 44.5989 54.1782 45.6292C56.8871 47.2483 57.7901 46.5124 56.5861 43.2742ZM126.115 39.4472C130.63 35.0315 126.115 28.4079 119.794 30.027C115.43 31.0573 113.774 34.5899 115.881 38.4169C117.687 41.5079 123.406 42.0966 126.115 39.4472ZM40.6336 34.5899C40.4832 33.8539 39.5802 33.2652 38.5267 33.5596C36.5703 33.8539 33.5604 31.3517 33.2594 29.1438C33.1089 28.4079 32.8079 27.9663 32.3564 27.9663C31.9049 27.9663 30.5505 27.9663 29.3465 27.9663C26.1861 27.9663 27.9921 31.3517 32.8079 34.2955C37.0218 36.9449 40.9346 37.0921 40.6336 34.5899ZM117.838 26.7888C120.998 23.6978 122.954 20.7539 122.352 20.1652C121.299 18.9876 109.861 29.1438 109.861 31.2045C109.861 33.7067 112.42 32.2348 117.838 26.7888ZM52.5228 25.1697C54.3287 21.7843 52.9742 19.1348 49.2119 19.1348C47.4059 19.1348 44.998 18.5461 43.794 17.8101C42.1386 16.7798 42.2891 16.191 44.5465 14.8663C46.9544 13.5416 46.9544 13.3944 44.998 13.2472C43.6436 13.2472 41.6871 14.2775 40.6336 15.4551C38.0752 18.3989 41.0851 22.0787 46.0515 22.0787C50.1148 22.0787 50.8673 24.5809 47.4059 25.9056C46.202 26.4944 45.4495 27.3775 45.901 28.1135C47.1049 29.7326 51.0178 28.1135 52.5228 25.1697ZM112.871 22.0787C115.58 18.6933 117.236 15.6022 116.784 15.0135C115.731 14.1303 105.497 24.7281 105.347 26.936C105.196 29.5854 108.507 27.5247 112.871 22.0787ZM105.949 17.2213C106.851 11.6281 106.55 10.1562 104.594 9.42023C101.885 8.38989 99.0257 10.4506 94.5109 16.6326C91.501 20.7539 91.501 20.9011 94.2099 20.018C97.6713 18.9876 99.9287 20.3124 101.434 24.1393C102.939 28.2607 104.895 25.464 105.949 17.2213ZM64.2614 19.7236C64.5624 18.6933 63.3584 18.2517 60.6495 18.6933L56.4356 19.282L60.6495 16.927C64.1109 15.0135 64.5624 14.1303 63.0574 12.364C58.6931 7.21236 51.7703 12.2169 54.3287 18.8405C55.3822 21.4899 56.5861 22.2258 59.7465 21.7843C61.8534 21.4899 63.9604 20.6067 64.2614 19.7236ZM75.398 19.1348C77.6554 19.1348 76.903 10.7449 74.495 8.83146C72.6891 7.35955 71.3346 7.35955 68.7762 8.53708L65.4653 10.1562H68.9267C72.5386 10.3034 73.7426 13.2472 70.1307 13.2472C68.9267 13.2472 67.4218 13.9831 66.9703 14.7191C65.6158 16.927 69.2277 20.9011 71.7861 19.8708C72.9901 19.4292 74.6455 19.1348 75.398 19.1348ZM84.4277 17.2213C82.1703 15.0135 82.3208 13.836 85.0297 11.3337C86.8356 9.42023 86.8356 8.83146 84.5782 6.91798C82.1703 4.71011 81.7188 4.71011 80.0633 7.35955C79.0099 8.97865 78.8594 10.3034 79.6119 10.3034C80.3643 10.3034 80.6653 11.6281 80.2138 13.2472C79.3109 16.6326 82.3208 21.0483 84.5782 19.7236C85.4812 19.1348 85.4812 18.2517 84.4277 17.2213Z\" fill=\"white\" />\r\n            <path d=\"M59.4456 97.5876C57.1882 94.3494 57.1882 93.9078 59.1446 94.6438C60.4991 95.0854 61.8535 94.791 62.305 93.7607C62.606 92.7303 63.0575 94.2022 63.0575 96.8517C63.208 102.592 62.7565 102.739 59.4456 97.5876Z\" fill=\"white\" />\r\n            <path d=\"M69.5287 98.618C68.3247 95.6742 68.6257 94.791 70.5822 94.0551C73.4416 92.8775 74.495 95.9686 72.3881 99.6483C71.0336 102.003 70.7327 102.003 69.5287 98.618Z\" fill=\"white\" />\r\n            <path d=\"M83.9762 88.609C79.7624 88.1674 78.4079 84.9292 80.9663 81.691C82.3208 79.7775 90.297 79.6303 90.1465 81.691C89.5445 87.1371 87.8891 89.0506 83.9762 88.609Z\" fill=\"white\" />\r\n            <path d=\"M31.905 62.2618C26.0357 52.6944 21.6713 44.5989 22.1228 44.1573C22.5743 43.7157 24.0792 45.0404 25.4337 46.9539C29.0456 52.2528 43.7941 79.4831 43.0416 79.4831C42.5901 79.4831 37.6238 71.682 31.905 62.2618Z\" fill=\"white\" />\r\n            <path d=\"M60.6495 128.792C40.6336 123.493 25.7346 111.276 16.8554 92.8775C12.1901 83.6045 11.2871 79.9247 10.8356 69.1798C9.33068 38.2697 26.0356 13.3944 55.2317 2.94382C63.2079 0.147191 66.8198 -0.294382 80.8158 0.147191C95.7148 0.735955 98.1228 1.17753 107.453 5.74045C140.562 21.6371 154.408 60.4955 138.606 93.4663C125.061 121.874 91.802 136.888 60.6495 128.792ZM72.8396 124.818C74.194 119.519 73.8931 111.865 72.2376 111.865C71.4851 111.865 70.7327 113.043 70.7327 114.662C70.7327 116.134 69.8297 118.194 68.6257 119.078C66.8198 120.549 66.3683 119.961 65.9168 115.251C65.3148 109.952 65.3148 109.805 63.8099 113.337C61.703 117.9 62.7564 121.874 66.3683 122.905C67.8732 123.493 69.2277 124.818 69.2277 125.996C69.2277 129.234 71.7861 128.351 72.8396 124.818ZM83.2237 124.524C84.5782 121.285 81.4178 111.865 79.0099 111.865C77.8059 111.865 76.4515 112.601 76 113.337C75.5485 114.22 75.8495 114.809 76.903 114.809C77.9564 114.809 78.2574 116.281 77.8059 119.078C76.602 124.671 81.2673 129.381 83.2237 124.524ZM89.8455 117.753C88.6416 111.865 91.0495 110.688 93.1564 116.281C93.9089 118.783 95.4138 120.697 96.1663 120.697C98.2733 120.697 98.2733 119.078 96.3168 113.926C94.9624 110.54 94.2099 110.099 89.996 110.982C83.8257 112.16 83.9762 112.012 85.9327 117.458C88.0396 123.493 91.0495 123.64 89.8455 117.753ZM59.295 115.987C60.9505 113.779 61.101 112.16 60.0475 110.099C57.3386 105.094 48.1584 107.597 48.1584 113.337C48.1584 119.372 55.6832 121.138 59.295 115.987ZM110.764 112.454C110.313 108.774 109.259 104.653 108.507 103.328C107.303 101.12 106.851 101.415 105.497 105.094C103.992 108.48 103.24 109.069 100.079 108.333C94.6614 107.008 95.4138 109.51 101.885 114.662C110.012 121.285 111.968 120.697 110.764 112.454ZM47.2554 108.774C50.4158 103.475 49.2119 100.973 45.7505 105.83C44.095 108.038 42.4396 108.774 40.4832 108.185C36.8713 107.008 36.7208 109.657 40.3327 111.718C44.095 113.926 44.2455 113.779 47.2554 108.774ZM42.7406 98.3236C42.1386 97.5877 39.8812 98.7652 37.4733 100.973C35.2158 103.181 33.5604 105.536 34.0119 106.272C34.6138 107.008 36.8713 105.83 39.2792 103.622C41.5366 101.415 43.1921 99.0596 42.7406 98.3236ZM85.7822 104.358C89.5445 103.622 93.7584 102.739 95.2634 102.445C98.8752 102.003 109.259 91.8472 113.624 84.6348C115.58 81.3966 118.289 74.4787 119.493 69.327C121.75 59.9067 124.911 54.1663 124.911 59.4652C124.911 61.5259 125.964 61.9674 130.63 61.5259C135.446 61.0843 136.198 60.6427 136.198 57.5517C136.198 55.6382 135.295 53.7247 134.242 53.2832C133.188 52.9888 132.737 53.5775 133.339 55.0494C134.844 58.7292 131.683 57.6989 129.426 53.8719C127.168 49.7506 128.673 43.4214 130.931 47.1011C132.586 49.7506 134.693 47.9843 133.339 44.8933C131.834 41.0663 128.222 40.7719 121.901 43.8629L115.731 46.8067L113.624 42.6854C112.42 40.4775 108.356 35.9146 104.594 32.6764C96.9188 26.0528 81.5683 21.0483 74.194 22.6674C71.9366 23.2562 67.4218 24.2865 64.4119 24.8753C58.5426 26.2 52.6733 29.291 46.9544 34.2955C42.4396 38.2697 42.7406 40.6247 47.4059 37.6809C49.3624 36.3562 52.6733 35.3258 54.7802 35.3258C56.8871 35.3258 58.994 34.7371 59.4455 33.8539C60.0475 32.9708 59.295 32.8236 57.6396 33.4124C55.8336 34.0011 55.3822 33.8539 56.4356 32.8236C58.8435 30.4685 66.2178 29.1438 66.2178 31.0573C66.2178 32.0876 68.0237 32.382 71.1841 31.9405C96.6178 27.5247 96.3168 27.5247 96.3168 33.118C96.3168 34.8843 97.3703 36.7978 98.5742 37.3865C99.7782 37.8281 100.832 40.036 100.832 42.2438C100.832 45.0405 100.38 45.7764 99.4772 44.4517C98.8752 43.2742 96.3168 42.6854 94.0594 42.9798C90.297 43.4214 89.394 44.5989 86.6851 52.2528C82.4713 63.8809 81.8693 64.7641 76.7525 64.7641C71.4851 64.7641 66.0673 58.4348 68.9267 55.6382C70.1307 54.4607 71.1841 54.7551 73.1406 56.5214C76.602 60.0539 78.8594 57.4045 77.6554 51.0753C76.301 44.3045 73.5921 42.391 66.6693 42.9798C61.2515 43.5685 60.9505 43.8629 60.499 49.0146C60.198 51.9584 59.4455 54.4607 58.5426 54.4607C56.4356 54.4607 56.8871 56.9629 59.596 59.6124C61.2515 61.2315 61.5525 62.5562 60.6495 63.4393C59.596 64.4697 57.4891 63.145 54.3287 59.6124C51.7703 56.6685 49.6633 55.0494 49.6633 55.9326C49.6633 56.6685 48.6099 57.4045 47.4059 57.4045C44.5465 57.4045 41.9881 63.4393 43.1921 67.5607C44.396 72.418 42.4396 71.2405 39.1287 65.2056C37.4733 62.1146 34.6138 57.4045 32.9584 54.6079C30.8515 51.0753 30.4 49.309 31.6039 48.573C32.8079 47.8371 31.9049 46.5124 29.0455 44.4517C24.0792 40.9191 25.4337 38.564 31.002 41.0663C35.9683 43.2742 37.9247 41.8023 34.0119 38.8584C29.6475 35.7674 24.0792 36.209 24.0792 39.5944C24.0792 41.2135 23.3267 42.6854 22.4238 42.9798C21.3703 43.2742 20.4673 45.3348 20.1663 47.5427C19.8653 50.3393 20.6178 51.6641 22.7247 52.2528C26.7881 53.5775 26.3366 55.9326 21.9723 55.9326C18.8119 55.9326 16.5544 58.2876 16.5544 61.9674C16.5544 62.7034 18.2099 64.3225 20.3168 65.6472C23.7782 67.8551 24.3802 67.8551 26.7881 65.7944C30.5505 62.409 32.3564 64.3225 36.4198 75.2146C39.4297 83.0157 45.6 92.5832 55.2317 104.506C55.5327 104.8 56.4356 104.211 57.0376 103.181C57.9406 102.003 59.1445 101.709 60.3485 102.445C65.4653 105.536 76.602 106.419 85.7822 104.358ZM35.2158 99.0596C37.1723 96.8517 38.3762 94.2023 38.0752 93.1719C36.8713 90.2281 35.0653 90.8169 34.1624 94.3494C33.5604 96.7045 32.5069 97.2933 30.2495 96.7045C27.6911 96.1157 27.0891 96.7045 27.0891 99.5011C27.0891 104.211 30.8515 104.064 35.2158 99.0596ZM125.513 99.5011C127.77 95.9686 127.62 95.6742 123.857 92.8775C121.75 91.1112 119.343 89.7865 118.741 89.7865C116.333 89.7865 117.386 92.2888 120.697 94.4966C122.503 95.6742 123.406 97.2933 122.804 98.3236C122.051 99.6483 120.697 99.3539 117.988 97.7348C113.022 94.4966 111.517 96.2629 116.032 99.9427C120.848 103.917 122.503 103.77 125.513 99.5011ZM30.099 90.5225C32.0554 88.4618 34.4634 86.8427 35.6673 86.8427C36.7208 86.8427 37.6237 86.2539 37.6237 85.3708C37.6237 83.4573 23.0257 83.4573 21.8218 85.3708C21.2198 86.2539 22.5742 86.8427 24.9822 86.8427C28.895 86.8427 28.895 86.9899 26.6376 89.4921C21.3703 95.0854 24.8317 96.1157 30.099 90.5225ZM132.737 87.5787C133.941 84.782 133.941 83.4573 132.436 81.691C129.727 78.4528 123.857 78.8944 121.75 82.7214C120.246 85.3708 120.547 86.2539 123.406 88.609C127.921 92.2888 130.63 91.9944 132.737 87.5787ZM135.446 76.5393C135.446 74.4787 131.834 73.3011 127.62 73.8899L124.158 74.6259L127.921 76.245C132.737 78.3056 135.446 78.4528 135.446 76.5393ZM30.099 73.7427C30.099 70.7989 25.8851 69.4742 19.8653 70.2101C11.7386 71.2405 11.7386 73.3011 20.0158 74.0371C23.4772 74.3315 27.2396 74.6259 28.2931 74.773C29.196 74.9202 30.099 74.4787 30.099 73.7427ZM139.509 68.7382C141.164 66.9719 136.649 63.145 134.693 64.7641C133.79 65.5 132.586 65.7944 131.984 65.3528C130.63 63.8809 124.911 66.236 124.911 68.2966C124.911 70.2101 137.552 70.5045 139.509 68.7382ZM52.0713 49.1618C51.6198 47.8371 50.7168 45.1876 50.2653 43.2742C49.3624 39.8888 48.0079 39.5944 40.6336 41.0663C40.1822 41.2135 41.0851 41.9494 42.5901 42.8326C43.9445 43.7157 44.697 45.0405 44.2455 45.9236C43.0416 47.6899 47.5564 51.5169 50.8673 51.5169C52.2218 51.5169 52.6733 50.6337 52.0713 49.1618ZM56.5861 43.2742C55.8336 41.2135 55.2317 41.0663 53.7267 42.5382C52.3723 43.8629 52.3723 44.5989 54.1782 45.6292C56.8871 47.2483 57.7901 46.5124 56.5861 43.2742ZM126.115 39.4472C130.63 35.0315 126.115 28.4079 119.794 30.027C115.43 31.0573 113.774 34.5899 115.881 38.4169C117.687 41.5079 123.406 42.0966 126.115 39.4472ZM40.6336 34.5899C40.4832 33.8539 39.5802 33.2652 38.5267 33.5596C36.5703 33.8539 33.5604 31.3517 33.2594 29.1438C33.1089 28.4079 32.8079 27.9663 32.3564 27.9663C31.9049 27.9663 30.5505 27.9663 29.3465 27.9663C26.1861 27.9663 27.9921 31.3517 32.8079 34.2955C37.0218 36.9449 40.9346 37.0921 40.6336 34.5899ZM117.838 26.7888C120.998 23.6978 122.954 20.7539 122.352 20.1652C121.299 18.9876 109.861 29.1438 109.861 31.2045C109.861 33.7067 112.42 32.2348 117.838 26.7888ZM52.5228 25.1697C54.3287 21.7843 52.9742 19.1348 49.2119 19.1348C47.4059 19.1348 44.998 18.5461 43.794 17.8101C42.1386 16.7798 42.2891 16.191 44.5465 14.8663C46.9544 13.5416 46.9544 13.3944 44.998 13.2472C43.6436 13.2472 41.6871 14.2775 40.6336 15.4551C38.0752 18.3989 41.0851 22.0787 46.0515 22.0787C50.1148 22.0787 50.8673 24.5809 47.4059 25.9056C46.202 26.4944 45.4495 27.3775 45.901 28.1135C47.1049 29.7326 51.0178 28.1135 52.5228 25.1697ZM112.871 22.0787C115.58 18.6933 117.236 15.6022 116.784 15.0135C115.731 14.1303 105.497 24.7281 105.347 26.936C105.196 29.5854 108.507 27.5247 112.871 22.0787ZM105.949 17.2213C106.851 11.6281 106.55 10.1562 104.594 9.42023C101.885 8.38989 99.0257 10.4506 94.5109 16.6326C91.501 20.7539 91.501 20.9011 94.2099 20.018C97.6713 18.9876 99.9287 20.3124 101.434 24.1393C102.939 28.2607 104.895 25.464 105.949 17.2213ZM64.2614 19.7236C64.5624 18.6933 63.3584 18.2517 60.6495 18.6933L56.4356 19.282L60.6495 16.927C64.1109 15.0135 64.5624 14.1303 63.0574 12.364C58.6931 7.21236 51.7703 12.2169 54.3287 18.8405C55.3822 21.4899 56.5861 22.2258 59.7465 21.7843C61.8534 21.4899 63.9604 20.6067 64.2614 19.7236ZM75.398 19.1348C77.6554 19.1348 76.903 10.7449 74.495 8.83146C72.6891 7.35955 71.3346 7.35955 68.7762 8.53708L65.4653 10.1562H68.9267C72.5386 10.3034 73.7426 13.2472 70.1307 13.2472C68.9267 13.2472 67.4218 13.9831 66.9703 14.7191C65.6158 16.927 69.2277 20.9011 71.7861 19.8708C72.9901 19.4292 74.6455 19.1348 75.398 19.1348ZM84.4277 17.2213C82.1703 15.0135 82.3208 13.836 85.0297 11.3337C86.8356 9.42023 86.8356 8.83146 84.5782 6.91798C82.1703 4.71011 81.7188 4.71011 80.0633 7.35955C79.0099 8.97865 78.8594 10.3034 79.6119 10.3034C80.3643 10.3034 80.6653 11.6281 80.2138 13.2472C79.3109 16.6326 82.3208 21.0483 84.5782 19.7236C85.4812 19.1348 85.4812 18.2517 84.4277 17.2213Z\" fill=\"white\" />\r\n            <path d=\"M19.5643 61.0843C19.5643 59.4651 20.6178 58.8764 23.0257 59.1708C24.8317 59.4651 26.3366 60.3483 26.3366 61.0843C26.3366 61.9674 24.8317 62.7034 23.0257 62.9977C20.6178 63.2921 19.5643 62.7034 19.5643 61.0843Z\" fill=\"white\" />\r\n            <path d=\"M125.212 86.5483C122.353 83.7517 123.105 82.1326 126.867 82.7213C128.673 83.0157 130.178 84.046 130.178 85.2236C130.178 88.0202 127.469 88.7562 125.212 86.5483Z\" fill=\"white\" />\r\n            <path d=\"M118.289 36.9449C116.935 34.7371 121.751 31.6461 123.707 33.5595C124.459 34.2955 124.76 35.7674 124.309 36.6506C122.954 38.564 119.343 38.7112 118.289 36.9449Z\" fill=\"white\" />\r\n            <path d=\"M60.6495 128.792C40.6336 123.493 25.7346 111.276 16.8554 92.8775C12.1901 83.6045 11.2871 79.9247 10.8356 69.1798C9.33068 38.2697 26.0356 13.3944 55.2317 2.94382C63.2079 0.147191 66.8198 -0.294382 80.8158 0.147191C95.7148 0.735955 98.1228 1.17753 107.453 5.74045C140.562 21.6371 154.408 60.4955 138.606 93.4663C125.061 121.874 91.802 136.888 60.6495 128.792ZM73.4416 119.078C74.0435 113.043 73.7426 111.571 72.0871 112.16C70.8832 112.601 69.6792 114.073 69.5287 115.692C68.4752 121.285 66.2178 121.285 66.2178 115.839C66.2178 109.216 63.8099 108.627 62.4554 115.103C61.5525 118.783 62.0039 120.255 64.2614 122.021C65.7663 123.346 67.5723 125.701 68.1742 127.173C69.9802 131.736 72.5386 127.762 73.4416 119.078ZM83.2237 124.524C83.6752 123.346 83.3742 119.961 82.6218 117.164C81.5683 113.337 80.2138 111.865 78.2574 111.865C76.602 111.865 75.2475 112.601 75.2475 113.337C75.2475 114.22 76 114.809 76.7525 114.809C78.8594 114.809 78.5584 120.402 76.4515 120.991C75.097 121.433 75.2475 122.316 76.7525 124.082C79.6119 127.026 82.1703 127.173 83.2237 124.524ZM89.8455 118.489C88.7921 112.601 91.2 111.424 92.7049 117.017C93.1564 119.078 94.6614 120.697 95.8653 120.697C97.5208 120.697 97.9723 119.666 97.0693 116.722C95.7148 110.835 93.1564 109.069 88.3406 109.952C84.2772 110.688 84.1267 111.129 85.0297 116.134C85.9327 120.697 87.8891 123.493 90.1465 123.64C90.4475 123.64 90.297 121.285 89.8455 118.489ZM59.295 116.134C61.8534 112.454 61.101 109.51 56.8871 107.302C51.6198 104.506 44.8475 112.748 49.0614 116.87C52.3723 120.108 56.5861 119.813 59.295 116.134ZM111.366 115.987C111.366 110.835 108.356 101.562 106.851 101.562C105.949 101.562 105.347 102.887 105.347 104.358C105.347 107.597 102.337 109.069 97.9723 107.891C93.3069 106.714 94.0594 108.774 100.531 114.22C107.152 119.961 111.366 120.697 111.366 115.987ZM47.2554 108.774C50.5663 103.181 49.3624 101.562 44.697 105.536C42.8911 107.155 40.4832 108.185 39.5802 107.891C37.1723 107.008 37.0218 109.216 39.4297 111.571C42.2891 114.367 44.2455 113.631 47.2554 108.774ZM38.2257 104.653C41.8376 100.973 43.3426 98.618 42.2891 97.882C40.4832 96.8517 33.5604 104.211 34.3129 106.272C34.4634 107.008 33.5604 107.449 32.3564 107.449C31.1525 107.449 30.099 108.185 30.099 108.921C30.099 111.718 32.5069 110.393 38.2257 104.653ZM85.7822 104.358C89.5445 103.622 93.7584 102.739 95.2634 102.445C98.8752 102.003 109.259 91.8472 113.624 84.6348C115.58 81.3966 118.289 74.4787 119.493 69.327C121.901 59.4652 124.911 54.1663 124.911 60.0539C124.911 63.2921 126.867 63.5865 135.145 60.9371C137.703 60.2011 136.95 52.6944 134.091 51.8112C132.737 51.3697 132.436 52.1056 133.188 54.3135C134.693 59.0236 131.984 57.9933 129.727 52.9888C127.62 48.4258 128.673 43.5685 131.081 47.2483C132.737 50.0449 134.392 47.8371 133.188 44.3045C131.984 40.4775 128.673 40.3303 121.449 44.0101L115.881 46.8067L113.624 42.6854C112.42 40.4775 108.356 35.9146 104.594 32.6764C96.9188 26.0528 81.5683 21.0483 74.194 22.6674C71.9366 23.2562 67.4218 24.2865 64.4119 24.8753C58.5426 26.2 52.6733 29.291 46.9544 34.2955C42.4396 38.2697 42.7406 40.6247 47.4059 37.6809C49.3624 36.3562 52.6733 35.3258 54.7802 35.3258C56.8871 35.3258 58.994 34.7371 59.4455 33.8539C60.0475 32.9708 59.295 32.8236 57.6396 33.4124C55.8336 34.0011 55.3822 33.8539 56.4356 32.8236C58.8435 30.4685 66.2178 29.1438 66.2178 31.0573C66.2178 32.0876 68.0237 32.382 71.1841 31.9405C96.6178 27.5247 96.3168 27.5247 96.3168 33.118C96.3168 34.8843 97.3703 36.7978 98.5742 37.3865C99.7782 37.8281 100.832 40.036 100.832 42.2438C100.832 45.0405 100.38 45.7764 99.4772 44.4517C98.8752 43.2742 96.3168 42.6854 94.0594 42.9798C90.297 43.4214 89.394 44.5989 86.6851 52.2528C82.4713 63.8809 81.8693 64.7641 76.7525 64.7641C72.0871 64.7641 66.5188 58.8764 68.4752 55.9326C69.9802 53.5775 72.6891 54.1663 71.6356 56.8157C71.0336 58.582 71.6356 59.0236 74.194 58.582C76.903 58.1405 77.5049 57.2573 77.3544 52.6944C77.0534 44.8933 74.495 42.391 67.1208 42.9798C61.2515 43.4214 60.9505 43.7157 60.499 49.0146C60.198 51.9584 59.4455 54.4607 58.5426 54.4607C56.4356 54.4607 56.8871 56.9629 59.596 59.6124C61.2515 61.2315 61.5525 62.5562 60.6495 63.4393C59.596 64.4697 57.4891 63.145 54.3287 59.6124C51.7703 56.6685 49.6633 55.0494 49.6633 55.9326C49.6633 56.6685 48.6099 57.4045 47.4059 57.4045C44.5465 57.4045 41.9881 63.4393 43.1921 67.5607C44.396 72.418 42.4396 71.2405 39.1287 65.2056C37.4733 62.1146 34.6138 57.2573 32.9584 54.4607C31.002 51.2225 30.4 49.1618 31.4535 48.8674C34.3129 47.9843 33.2594 45.6292 29.3465 44.1573C27.2396 43.4214 25.5841 41.9494 25.5841 41.0663C25.5841 40.036 26.6376 39.8888 28.2931 40.4775C33.7109 42.6854 36.1188 42.9798 36.1188 41.3607C36.1188 39.0056 28.895 34.8843 26.3366 35.9146C23.9287 36.7978 20.3168 43.7157 20.9188 46.8067C21.2198 49.0146 18.6614 49.1618 17.1564 46.9539C16.5544 45.9236 15.6515 45.9236 14.7485 46.8067C12.9426 48.573 14.598 51.9584 16.5544 50.7809C17.3069 50.3393 18.2099 50.6337 18.8119 51.5169C19.2634 52.2528 21.0693 52.9888 22.7247 52.9888C24.2297 52.9888 25.5841 53.5775 25.5841 54.4607C25.5841 55.1966 24.5307 55.491 23.3267 55.0494C20.1663 53.8719 16.5544 57.1101 16.5544 60.9371C16.5544 66.9719 23.3267 70.0629 27.0891 65.6472C30.099 61.9674 32.8079 64.6169 36.1188 74.3315C38.6772 81.8382 46.6535 94.3494 55.2317 104.506C55.5327 104.8 56.4356 104.211 57.0376 103.181C57.9406 102.003 59.1445 101.709 60.3485 102.445C65.4653 105.536 76.602 106.419 85.7822 104.358ZM35.3663 99.0596C37.9247 95.9686 38.5267 94.3494 37.4733 92.2888C36.5703 90.8169 35.3663 90.0809 34.4634 90.5225C33.7109 91.1112 33.4099 91.9944 33.8614 92.7303C34.9148 94.3494 30.5505 97.5877 28.594 96.4101C27.8416 95.9686 27.0891 96.1157 27.0891 96.9989C27.0891 97.7348 26.6376 99.3539 26.1861 100.679C24.5307 104.653 31.4535 103.475 35.3663 99.0596ZM125.513 99.3539C127.921 95.6742 127.921 95.3798 124.61 92.7303C118.741 87.873 114.978 89.1978 119.945 94.4966C123.105 97.882 121.6 99.3539 117.537 96.9989C113.022 94.2023 111.517 96.8517 115.731 100.237C120.396 103.917 122.503 103.77 125.513 99.3539ZM35.8178 86.8427C36.8713 86.8427 37.6237 85.8124 37.6237 84.4876C37.6237 82.5742 36.5703 82.2798 32.9584 83.0157C30.4 83.4573 26.1861 83.8989 23.7782 83.8989C20.9188 83.8989 19.5643 84.4876 20.0158 85.8124C20.3168 86.8427 22.5742 87.4315 24.9822 87.1371C28.594 86.8427 28.895 86.9899 26.7881 88.3146C25.2832 89.1978 24.0792 91.4056 24.0792 93.0247C24.0792 95.9686 24.5307 95.8214 29.0455 91.5528C31.7544 88.9034 34.7643 86.8427 35.8178 86.8427ZM132.737 87.5787C134.091 84.4876 133.941 83.4573 131.683 80.9551C128.222 77.2753 124.008 77.1281 121.901 80.8079C119.794 84.782 119.945 86.2539 122.804 88.9034C126.265 92.436 130.78 91.8472 132.737 87.5787ZM141.164 76.8337C141.465 75.8034 140.713 75.0674 139.358 75.0674C138.004 75.0674 136.95 76.0978 136.95 77.4225C136.95 79.9247 140.261 79.4832 141.164 76.8337ZM135.446 75.9506C135.446 74.9202 133.339 73.5955 130.63 73.0068C124.61 71.8292 121.449 74.4787 126.566 76.3921C131.834 78.4528 135.446 78.3056 135.446 75.9506ZM29.196 71.682C28.2931 69.0326 21.9723 68.4438 15.3505 70.0629C9.63167 71.682 12.4911 74.3315 19.1129 73.8899C22.7247 73.5955 25.7346 74.0371 26.3366 75.0674C27.9921 77.5697 30.4 74.6259 29.196 71.682ZM137.853 70.0629C142.368 65.5 139.057 62.9978 130.78 64.6169C127.77 65.2056 125.513 66.6775 125.212 68.1494C124.76 70.2101 125.513 70.5045 129.275 69.7685C132.285 69.1798 133.941 69.4742 133.941 70.5045C133.941 72.7124 135.295 72.5652 137.853 70.0629ZM52.0713 49.1618C51.6198 47.8371 50.7168 45.1876 50.2653 43.2742C49.3624 39.8888 48.0079 39.5944 40.6336 41.0663C40.1822 41.2135 41.0851 41.9494 42.5901 42.8326C43.9445 43.7157 44.697 45.0405 44.2455 45.9236C43.0416 47.6899 47.5564 51.5169 50.8673 51.5169C52.2218 51.5169 52.6733 50.6337 52.0713 49.1618ZM56.5861 43.2742C55.8336 41.2135 55.2317 41.0663 53.7267 42.5382C52.3723 43.8629 52.3723 44.5989 54.1782 45.6292C56.8871 47.2483 57.7901 46.5124 56.5861 43.2742ZM126.416 39.0056C128.824 36.209 127.921 32.382 124.158 30.027C118.289 26.2 111.216 34.5899 116.182 39.4472C118.59 41.8023 124.158 41.6551 126.416 39.0056ZM42.1386 33.8539C42.1386 33.118 40.3327 32.382 38.0752 32.0876C35.2158 31.7933 34.0119 30.9101 34.3129 29.291C34.6138 27.5247 33.5604 26.936 30.8515 26.936C28.7445 26.936 27.0891 27.3775 27.0891 27.9663C27.0891 30.7629 29.0455 33.8539 30.8515 33.8539C31.9049 33.8539 33.5604 34.8843 34.6138 36.0618C35.9683 37.6809 37.1723 37.8281 39.2792 36.6506C40.7841 35.9146 42.1386 34.5899 42.1386 33.8539ZM117.687 26.936C123.857 21.0483 124.76 19.1348 121.299 19.1348C119.192 19.1348 109.861 28.9966 109.861 31.2045C109.861 33.5596 112.119 32.2348 117.687 26.936ZM51.1683 26.4944C55.5327 22.2258 52.8237 17.6629 46.202 17.6629C41.6871 17.5157 41.5366 17.5157 44.2455 15.4551C47.7069 12.8056 46.0515 10.4506 42.4396 12.6584C41.0851 13.5416 39.8812 15.8966 39.8812 17.8101C39.8812 20.7539 40.7841 21.4899 45.1485 22.2258C49.2119 22.8146 49.8138 23.2562 47.8574 24.1393C44.998 25.464 44.095 29.4382 46.6535 29.4382C47.5564 29.4382 49.5129 28.1135 51.1683 26.4944ZM112.57 22.8146C117.838 15.6022 118.289 14.7191 115.58 14.7191C113.172 14.8663 103.842 26.6416 104.745 28.2607C106.099 30.4685 107.604 29.4382 112.57 22.8146ZM104.293 25.464C104.745 24.7281 105.497 21.1955 105.949 17.2213C106.851 11.4809 106.55 10.1562 104.594 9.42023C101.283 8.09551 89.5445 18.9876 91.802 21.1955C93.0059 22.373 93.7584 22.2258 94.6614 20.9011C96.3168 18.2517 100.832 20.3124 100.832 23.6978C100.832 26.4944 103.089 27.5247 104.293 25.464ZM64.4119 19.282C64.8633 18.1045 63.6594 17.8101 60.6495 18.3989L56.4356 19.282L60.6495 16.927C64.1109 15.0135 64.5624 14.1303 63.0574 12.364C60.9505 9.8618 56.8871 9.71461 54.4792 12.0697C49.9643 16.4854 54.7802 24.2865 60.499 22.2258C62.3049 21.6371 64.1109 20.3124 64.4119 19.282ZM73.4416 19.7236C76.903 18.6933 77.9564 13.1 75.398 9.12584C73.8931 6.6236 67.4218 7.35955 66.5188 10.1562C66.0673 11.4809 66.8198 11.7753 69.3782 11.1865L72.9901 10.3034L69.6792 11.9225C66.3683 13.6888 65.1643 17.5157 67.2713 19.5764C68.4752 20.7539 69.0772 20.7539 73.4416 19.7236ZM85.0297 19.282C85.4812 18.5461 85.1802 17.5157 84.2772 16.927C82.1703 15.6022 82.4713 13.836 85.1802 11.1865C87.2871 9.12584 87.2871 8.53708 85.1802 6.6236C83.9762 5.44607 82.3208 4.41573 81.4178 4.41573C79.7624 4.41573 79.4614 5.29888 79.1604 11.7753C78.8594 18.2517 82.6218 23.109 85.0297 19.282Z\" fill=\"url(#paint5_linear)\" />\r\n            <path d=\"M52.3722 115.398C50.7168 113.926 52.8237 110.393 55.2316 110.393C56.4356 110.393 57.1881 111.424 56.8871 112.895C56.4356 115.545 53.8772 116.87 52.3722 115.398Z\" fill=\"url(#paint6_linear)\" />\r\n            <path d=\"M19.5643 61.0843C19.5643 59.9067 20.9188 58.8764 22.5742 58.8764C24.2297 58.8764 25.5841 59.9067 25.5841 61.0843C25.5841 62.2618 24.2297 63.2921 22.5742 63.2921C20.9188 63.2921 19.5643 62.2618 19.5643 61.0843Z\" fill=\"url(#paint7_linear)\" />\r\n            <path d=\"M124.158 85.518C123.707 84.782 124.008 83.7517 124.911 83.1629C126.717 82.1326 129.426 83.4573 129.426 85.518C129.426 87.2843 125.362 87.2843 124.158 85.518Z\" fill=\"url(#paint8_linear)\" />\r\n            <path d=\"M118.289 36.9449C117.236 35.473 121.6 31.4989 122.804 32.8236C124.158 34.0011 122.352 38.2697 120.546 38.2697C119.794 38.2697 118.741 37.6809 118.289 36.9449Z\" fill=\"url(#paint9_linear)\" />\r\n            <path d=\"M60.6495 128.792C40.6337 123.493 25.7346 111.276 16.8554 92.8775C12.1901 83.6045 11.2871 79.9247 10.8356 69.1798C9.33068 38.2697 26.0356 13.3944 55.2317 2.94382C63.2079 0.147191 66.8198 -0.294382 80.8158 0.147191C95.7148 0.735955 98.1228 1.17753 107.453 5.74045C127.018 15.1607 140.863 33.5596 144.325 54.4607C146.131 64.9112 144.927 81.3966 142.669 77.5697C142.067 76.3921 138.756 74.9202 135.446 74.3315C132.135 73.7427 129.426 72.7124 129.426 71.9764C129.426 70.2101 131.984 70.2101 135.145 71.9764C136.95 72.8596 138.756 72.5652 140.713 71.0933C143.723 69.0326 143.723 68.8854 140.111 66.0888C137.251 63.7337 136.95 62.8506 138.455 61.0843C139.96 59.318 139.81 58.1405 137.853 55.1966C135.145 51.0753 131.533 50.1921 133.038 53.8719C133.79 55.9326 133.64 56.0798 131.683 54.4607C130.479 53.4303 129.426 51.3697 129.426 49.7506C129.426 47.3955 129.877 47.2483 132.586 48.573C134.242 49.6034 136.048 49.8978 136.499 49.4562C137.703 48.2787 132.737 41.2135 130.78 41.2135C129.877 41.2135 129.576 39.8888 130.178 38.4169C131.081 35.473 127.319 30.4685 123.255 29.1438C121.45 28.5551 121.45 28.1135 123.255 26.0528C125.663 23.109 124.459 19.1348 121.149 19.1348C119.945 19.1348 118.891 18.3989 118.891 17.6629C118.891 14.2775 114.376 14.5719 111.065 18.3989L107.604 22.2258V16.7798C107.604 13.2472 106.701 10.8921 105.046 9.71461C102.939 8.38989 101.283 9.12584 96.3168 13.9831C91.0495 19.1348 90.4475 20.018 92.5545 21.4899C93.9089 22.5202 96.3168 22.9618 97.8218 22.5202C99.7782 22.0787 100.832 22.5202 100.832 23.6978C100.832 24.8753 103.992 27.8191 107.604 30.1742C111.366 32.6764 114.376 35.1787 114.376 35.9146C114.376 36.6506 115.58 38.564 116.935 40.036C118.59 41.9494 118.891 43.2742 117.838 44.3045C116.784 45.3348 115.279 44.3045 112.871 40.4775C108.808 34.1483 97.8218 25.6112 91.9525 24.2865C88.6416 23.5506 87.4376 22.373 86.6851 18.8405C86.2337 16.3382 86.3841 13.5416 87.2871 12.5112C88.9426 10.5978 84.5782 4.41573 81.5683 4.41573C79.4614 4.41573 78.1069 8.2427 79.3109 11.4809C79.9129 13.1 79.3109 12.9528 77.6554 10.7449C74.9465 7.21236 68.6257 6.18202 66.8198 8.97865C66.3683 9.8618 66.6693 11.1865 67.7228 11.7753C69.2277 12.6584 69.0772 13.1 67.5723 13.5416C66.3683 13.9831 64.5624 13.3944 63.5089 12.2169C59.1445 7.94832 51.4693 11.7753 52.9742 17.3685C53.7267 19.7236 53.2752 19.8708 50.2653 18.5461C48.4594 17.6629 47.5564 16.6326 48.3089 16.0438C49.2119 15.6022 48.7604 14.2775 47.4059 13.2472C44.2455 10.7449 40.0317 12.9528 39.4297 17.5157C38.9782 19.8708 40.1822 21.1955 43.9445 22.8146C46.6535 23.9921 48.0079 24.8753 47.1049 25.0225C44.396 25.0225 44.697 29.4382 47.4059 29.4382C50.5663 29.4382 50.2653 31.3517 46.6535 34.5899C43.9445 36.9449 43.6436 36.9449 42.7406 34.7371C42.2891 33.4124 40.6337 32.382 39.1287 32.382C37.6238 32.382 35.9683 31.2045 35.3663 29.5854C34.9148 27.9663 33.1089 26.936 30.8515 26.936C27.0891 26.936 26.0356 28.7022 28.2931 31.6461C29.9485 34.0011 37.3228 38.2697 39.5802 38.2697C41.2356 38.2697 41.0851 40.036 38.5267 46.9539C36.7208 52.2528 34.9148 55.0494 34.3129 54.0191C33.7109 52.9888 33.5604 51.2225 34.0119 49.7506C34.4634 48.2787 33.4099 46.5124 31.4535 45.0405C27.3901 42.2438 28.594 40.3303 32.8079 42.5382C36.8713 44.7461 37.6238 44.5989 37.6238 41.9494C37.6238 40.6247 35.2158 38.564 32.3564 37.2393L27.0891 34.7371L22.5742 39.4472C19.7148 42.5382 18.5109 45.0405 19.1129 46.8067C20.0158 48.8674 19.7148 49.0146 17.7584 47.3955C16.103 46.0708 15.0495 45.9236 14.297 47.1011C12.7921 49.4562 14.598 51.2225 19.7148 52.2528L24.3802 53.2832L20.9188 55.0494C15.9525 57.4045 15.9525 64.7641 20.7683 67.1191C24.0792 68.7382 23.9287 68.8854 18.0594 69.7685C9.63167 71.0933 10.9861 74.1843 20.4673 75.0674C24.5307 75.509 28.7445 76.3921 29.798 76.9809C32.5069 78.7472 32.0554 73.5955 29.3465 70.6517C27.2396 68.4438 27.2396 68.0023 29.196 67.2663C32.0554 66.236 33.7109 68.2966 36.4198 76.5393L38.6772 83.1629L29.497 83.6045C19.1129 84.0461 17.7584 84.782 21.5208 87.4315C22.8752 88.4618 24.0792 90.8169 24.0792 92.5832C24.0792 94.2023 24.8317 95.6742 25.7346 95.6742C26.7881 95.6742 27.0891 97.1461 26.4871 99.2068C25.7346 102.151 26.3366 103.034 28.895 103.917C30.8515 104.506 34.9148 107.155 38.0752 109.805C41.0851 112.601 44.396 114.809 45.1485 114.809C46.0515 114.809 48.3089 116.134 50.1148 117.753C52.0713 119.519 54.9307 120.697 57.1881 120.402C61.5525 119.961 66.6693 123.052 68.1742 127.026C69.5287 130.411 73.8931 130.264 74.796 126.584C75.699 123.052 76.301 122.905 79.3109 125.848C82.9228 129.381 85.0297 127.615 84.7287 121.285C84.5782 118.194 84.8792 116.87 85.3307 118.489C86.9861 124.671 93.7584 125.701 92.5545 119.666C92.103 117.311 92.2535 116.575 92.7049 117.753C93.7584 120.108 96.3168 122.169 98.2733 122.169C100.079 122.169 99.4772 115.545 97.5208 113.631C93.7584 109.952 98.4238 112.16 103.39 116.428C110.313 122.169 113.774 121.58 113.172 114.809C112.57 108.627 109.861 102.739 107.303 101.856C106.099 101.562 105.347 102.592 105.347 104.211C105.347 107.597 102.487 109.069 97.9723 107.891C96.1663 107.449 94.8119 107.744 94.8119 108.627C94.8119 109.363 93.9089 110.099 93.0059 109.952C86.8356 109.805 84.2772 110.688 84.2772 112.748C84.2772 114.662 83.8257 114.809 82.1703 113.484C80.9663 112.454 77.5049 112.012 73.8931 112.454C70.5822 112.896 67.4218 112.454 66.8198 111.718C66.3683 110.835 65.0139 110.54 63.9604 110.982C62.9069 111.276 60.9505 110.54 59.596 109.216C56.8871 106.125 58.5426 102.592 61.703 104.506C64.8634 106.419 90.899 106.272 92.8554 104.358C94.0594 103.181 94.8119 103.181 95.4139 104.358C96.0158 105.242 97.0693 105.978 97.8218 105.978C100.832 105.978 116.182 81.9854 119.945 71.3876C122.202 65.2056 124.309 60.7899 124.61 61.673C124.911 62.5562 127.319 63.4393 129.877 63.4393L134.693 63.5865L130.178 64.6169C127.018 65.2056 125.663 66.3832 125.663 68.4438C125.513 70.0629 125.061 72.1236 124.459 73.1539C123.857 74.1843 124.459 75.509 125.964 76.3921C128.523 77.8641 128.523 77.8641 126.115 78.0112C122.804 78.0112 119.945 83.1629 121.149 86.6955C122.051 89.7865 129.877 93.4663 132.887 92.2888C136.95 90.8169 136.95 85.2236 132.887 81.2495C130.479 78.8944 130.028 77.8641 131.683 78.6C133.038 79.0416 135.897 79.4832 137.853 79.4832C143.422 79.4832 143.723 82.8686 138.907 93.0247C124.911 121.874 91.9525 137.035 60.6495 128.792ZM36.1188 110.393C36.1188 108.627 31.9049 106.714 30.701 107.891C29.3465 109.216 31.604 111.865 34.0119 111.865C35.2158 111.865 36.1188 111.129 36.1188 110.393ZM128.222 100.679C129.877 97.2933 129.576 96.5573 125.513 93.4663C118.741 88.0202 114.677 88.7562 119.945 94.4966C123.105 97.882 121.6 99.3539 117.537 96.9989C112.57 93.9079 111.818 97.1461 116.634 100.973C122.503 105.536 126.115 105.389 128.222 100.679Z\" fill=\"url(#paint10_linear)\" />\r\n            <path d=\"M40.6336 108.185C40.6336 107.449 41.6871 105.83 43.0416 104.358C45.299 101.856 45.1485 101.267 40.7841 95.8213C35.3663 89.0506 35.2158 88.9034 38.9782 87.873C41.0851 87.4315 42.7406 88.7562 45.299 93.3191C47.2554 96.5573 50.2653 100.826 52.2218 102.592C54.0277 104.506 54.7802 105.978 53.7267 105.978C52.6732 105.978 51.0178 105.242 49.9643 104.211C48.6099 102.887 47.4059 103.328 44.396 105.978C42.2891 107.891 40.6336 108.921 40.6336 108.185Z\" fill=\"url(#paint11_linear)\" />\r\n            <path d=\"M55.6832 24.2865C55.6832 22.9618 56.5862 22.5202 57.9406 22.9618C59.1446 23.5506 59.7466 24.4337 59.2951 25.1697C58.0911 27.2303 55.6832 26.6416 55.6832 24.2865Z\" fill=\"url(#paint12_linear)\" />\r\n            <path d=\"M78.2574 20.6067C78.2574 18.8404 79.4614 18.8404 83.5248 20.6067C86.2337 21.7843 86.0832 21.9314 82.4713 21.9314C80.0634 22.0786 78.2574 21.4899 78.2574 20.6067Z\" fill=\"url(#paint13_linear)\" />\r\n        </g>\r\n        <defs>\r\n            <linearGradient id=\"paint0_linear\" x1=\"77.9382\" y1=\"-0.000549316\" x2=\"77.9382\" y2=\"130.974\" gradientUnits=\"userSpaceOnUse\">\r\n                <stop stop-color=\"#E47F40\" />\r\n                <stop offset=\"1\" stop-color=\"#CD5A2F\" />\r\n            </linearGradient>\r\n            <linearGradient id=\"paint1_linear\" x1=\"77.9382\" y1=\"-0.000549316\" x2=\"77.9382\" y2=\"130.974\" gradientUnits=\"userSpaceOnUse\">\r\n                <stop stop-color=\"#E47F40\" />\r\n                <stop offset=\"1\" stop-color=\"#CD5A2F\" />\r\n            </linearGradient>\r\n            <linearGradient id=\"paint2_linear\" x1=\"77.9382\" y1=\"-0.000549316\" x2=\"77.9382\" y2=\"130.974\" gradientUnits=\"userSpaceOnUse\">\r\n                <stop stop-color=\"#E47F40\" />\r\n                <stop offset=\"1\" stop-color=\"#CD5A2F\" />\r\n            </linearGradient>\r\n            <linearGradient id=\"paint3_linear\" x1=\"77.9382\" y1=\"-0.000549316\" x2=\"77.9382\" y2=\"130.974\" gradientUnits=\"userSpaceOnUse\">\r\n                <stop stop-color=\"#E47F40\" />\r\n                <stop offset=\"1\" stop-color=\"#CD5A2F\" />\r\n            </linearGradient>\r\n            <linearGradient id=\"paint4_linear\" x1=\"99.2439\" y1=\"49.3916\" x2=\"99.2439\" y2=\"60.2736\" gradientUnits=\"userSpaceOnUse\">\r\n                <stop stop-color=\"#E47F40\" />\r\n                <stop offset=\"1\" stop-color=\"#CD5A2F\" />\r\n            </linearGradient>\r\n            <linearGradient id=\"paint5_linear\" x1=\"77.9382\" y1=\"-0.000549316\" x2=\"77.9382\" y2=\"130.974\" gradientUnits=\"userSpaceOnUse\">\r\n                <stop stop-color=\"#E47F40\" />\r\n                <stop offset=\"1\" stop-color=\"#CD5A2F\" />\r\n            </linearGradient>\r\n            <linearGradient id=\"paint6_linear\" x1=\"54.3677\" y1=\"110.393\" x2=\"54.3677\" y2=\"116.009\" gradientUnits=\"userSpaceOnUse\">\r\n                <stop stop-color=\"#E47F40\" />\r\n                <stop offset=\"1\" stop-color=\"#CD5A2F\" />\r\n            </linearGradient>\r\n            <linearGradient id=\"paint7_linear\" x1=\"22.5742\" y1=\"58.8764\" x2=\"22.5742\" y2=\"63.2921\" gradientUnits=\"userSpaceOnUse\">\r\n                <stop stop-color=\"#E47F40\" />\r\n                <stop offset=\"1\" stop-color=\"#CD5A2F\" />\r\n            </linearGradient>\r\n            <linearGradient id=\"paint8_linear\" x1=\"126.688\" y1=\"82.8056\" x2=\"126.688\" y2=\"86.8427\" gradientUnits=\"userSpaceOnUse\">\r\n                <stop stop-color=\"#E47F40\" />\r\n                <stop offset=\"1\" stop-color=\"#CD5A2F\" />\r\n            </linearGradient>\r\n            <linearGradient id=\"paint9_linear\" x1=\"120.702\" y1=\"32.5574\" x2=\"120.702\" y2=\"38.2697\" gradientUnits=\"userSpaceOnUse\">\r\n                <stop stop-color=\"#E47F40\" />\r\n                <stop offset=\"1\" stop-color=\"#CD5A2F\" />\r\n            </linearGradient>\r\n            <linearGradient id=\"paint10_linear\" x1=\"77.9709\" y1=\"-0.000549316\" x2=\"77.9709\" y2=\"131.026\" gradientUnits=\"userSpaceOnUse\">\r\n                <stop stop-color=\"#E47F40\" />\r\n                <stop offset=\"1\" stop-color=\"#CD5A2F\" />\r\n            </linearGradient>\r\n            <linearGradient id=\"paint11_linear\" x1=\"45.3038\" y1=\"87.7929\" x2=\"45.3038\" y2=\"108.424\" gradientUnits=\"userSpaceOnUse\">\r\n                <stop stop-color=\"#E47F40\" />\r\n                <stop offset=\"1\" stop-color=\"#CD5A2F\" />\r\n            </linearGradient>\r\n            <linearGradient id=\"paint12_linear\" x1=\"57.5641\" y1=\"22.7962\" x2=\"57.5641\" y2=\"26.4295\" gradientUnits=\"userSpaceOnUse\">\r\n                <stop stop-color=\"#E47F40\" />\r\n                <stop offset=\"1\" stop-color=\"#CD5A2F\" />\r\n            </linearGradient>\r\n            <linearGradient id=\"paint13_linear\" x1=\"81.8237\" y1=\"19.282\" x2=\"81.8237\" y2=\"21.954\" gradientUnits=\"userSpaceOnUse\">\r\n                <stop stop-color=\"#E47F40\" />\r\n                <stop offset=\"1\" stop-color=\"#CD5A2F\" />\r\n            </linearGradient>\r\n            <clipPath id=\"clip0\">\r\n                <rect width=\"152\" height=\"131\" fill=\"white\" />\r\n            </clipPath>\r\n        </defs>\r\n    </svg>\r\n)\r\n}\r\nexport default Josaa;\r\n","module.exports = \"/_next/static/images/nitp-f41b797761feccab3b5e19c3c8d81fa0.png\";","import React from 'react';\r\nconst Nss = () => {\r\n    return (<svg className=\"linkimg\" width=\"188\" height=\"186\" viewBox=\"0 0 188 186\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n        <path d=\"M80.0257 185.318C39.4804 179.428 6.14174 146.32 0.689738 106.454C-0.187595 100.192 -0.187595 85.8083 0.689738 79.5463C5.76574 42.3463 35.0937 10.8503 72.6937 2.04632C82.4697 -0.247681 99.5151 -0.619681 109.98 1.11632C129.282 4.40232 146.202 13.1443 160.427 27.2803C174.088 40.7343 182.924 56.7923 186.559 74.7103C188.126 82.6463 188.126 103.354 186.559 111.29C182.924 129.208 174.088 145.266 160.427 158.72C146.327 172.732 129.282 181.598 110.419 184.822C102.774 186.062 87.1697 186.372 80.0257 185.318Z\" fill=\"url(#paint0_linear)\" />\r\n        <path d=\"M79.712 147.87C73.7586 146.32 66.2386 142.972 60.9746 139.438C56.0866 136.214 48.1906 127.782 44.8693 122.264C31.5213 100.192 34.8426 71.92 52.9533 53.63C58.5933 47.926 61.7893 45.632 68.9333 42.098C76.6413 38.254 84.3493 36.58 93.9373 36.58C103.839 36.58 110.105 38.006 118.753 42.098C130.723 47.74 139.559 56.482 145.387 68.448C150.024 77.934 150.713 80.972 150.713 93C150.713 105.028 150.024 108.066 145.387 117.552C137.929 132.804 124.393 143.778 107.912 147.932C99.5773 150.04 88.0466 149.978 79.712 147.87Z\" fill=\"url(#paint1_linear)\" />\r\n        <path d=\"M87.1067 162.998V156.054L89.9267 156.364C91.4934 156.55 93.1853 157.046 93.6867 157.48C94.752 158.348 94.94 162.192 94 162.75C93.5613 162.998 93.4987 163.432 93.8747 163.866C94.2507 164.3 94.6267 165.788 94.752 167.276C94.94 169.818 94.8773 169.942 93.3733 169.756C92.0573 169.57 91.8067 169.198 91.6187 167.276C91.3054 163.928 89.6134 164.052 89.6134 167.4C89.6134 169.446 89.4254 169.88 88.36 169.88C87.1694 169.88 87.1067 169.446 87.1067 162.998ZM91.3054 159.526C90.3027 158.534 90.24 158.596 90.24 160.58C90.24 162.564 90.3027 162.626 91.3054 161.634C92.308 160.642 92.308 160.518 91.3054 159.526Z\" fill=\"#FEFEFE\" />\r\n        <path d=\"M98.3865 165.416C97.6345 162.936 96.8199 160.084 96.4439 159.092C96.0052 157.728 96.0679 157.108 96.6319 156.736C98.3239 155.744 98.9505 156.364 99.7025 159.65C100.141 161.51 100.705 163.06 101.019 163.06C101.269 163.06 101.52 161.572 101.52 159.712C101.52 156.426 101.583 156.364 103.588 156.054C104.653 155.868 106.157 155.62 106.784 155.496C107.849 155.31 108.225 156.116 109.541 161.448C110.857 166.532 110.983 167.648 110.231 168.082C108.664 169.074 108.163 168.33 106.784 162.812C106.032 159.836 105.28 157.232 105.092 157.046C104.779 156.736 104.591 157.79 103.588 165.85C103.149 169.26 102.961 169.57 101.395 169.756C99.8279 169.942 99.6399 169.694 98.3865 165.416Z\" fill=\"#FEFEFE\" />\r\n        <path d=\"M79.2732 168.702C77.0799 168.268 77.1425 168.578 78.2079 162.13C79.3985 155.124 79.4612 154.938 81.0279 155.248C85.6652 156.178 85.8532 156.302 85.8532 157.542C85.8532 158.658 85.6025 158.844 84.0359 158.534C82.7199 158.286 82.0932 158.41 81.8425 159.092C81.2785 160.456 81.2785 160.456 83.2839 160.89C84.7252 161.2 85.0385 161.51 84.7879 162.502C84.5372 163.432 83.9732 163.68 82.7825 163.556C81.5292 163.432 81.0905 163.68 80.9652 164.734C80.8399 165.726 81.1532 166.098 82.2185 166.284C83.1585 166.408 83.7225 166.966 83.8479 167.896C84.0985 169.384 83.1585 169.508 79.2732 168.702Z\" fill=\"#FEFEFE\" />\r\n        <path d=\"M69.4346 166.098C68.6826 165.726 68.3066 164.734 68.3066 163.308C68.3066 161.386 68.4946 161.138 69.748 161.324C70.7506 161.448 71.064 161.882 70.9386 162.936C70.8133 163.866 71.064 164.3 71.6906 164.3C73.0693 164.3 72.944 162.812 71.3146 160.084C70.124 157.976 70.0613 157.542 70.876 155.93C72.192 153.264 73.6333 152.644 75.7013 153.76C76.892 154.442 77.456 155.31 77.5813 156.736C77.832 159.402 76.0146 159.278 74.9493 156.612C74.636 155.744 74.3226 155.62 73.8213 156.116C73.32 156.612 73.508 157.356 74.5106 158.906C76.0773 161.448 76.2026 163.494 74.824 165.416C73.8213 166.904 71.3146 167.214 69.4346 166.098Z\" fill=\"#FEFEFE\" />\r\n        <path d=\"M114.555 166.16C113.301 165.416 110.92 159.402 110.92 156.922C110.92 153.202 116.059 151.652 118.127 154.752C119.004 156.116 119.067 156.488 118.377 156.922C117.061 157.728 116.121 157.604 115.683 156.55C115.119 155 114.053 155.496 114.053 157.356C114.116 159.588 116.372 164.486 117.187 163.99C117.5 163.804 117.813 162.936 117.813 162.13C117.813 160.518 119.631 159.526 120.445 160.704C122.639 164.114 118.189 168.206 114.555 166.16Z\" fill=\"#FEFEFE\" />\r\n        <path d=\"M121.636 158.038C118.565 152.706 118.44 152.334 119.505 151.528C121.824 149.854 124.08 149.172 124.895 149.978C125.459 150.598 125.271 151.032 123.955 152.086C121.824 153.76 122.388 155.62 124.644 154.38C125.709 153.822 126.273 153.822 126.963 154.442C128.216 155.434 128.091 155.93 126.273 156.736C124.895 157.356 124.769 157.666 125.333 158.72C125.96 159.836 126.148 159.898 127.715 159.092C129.344 158.286 129.532 158.286 130.221 159.34C130.848 160.332 130.597 160.704 128.153 162.068C126.649 162.936 125.271 163.68 125.145 163.68C124.957 163.68 123.391 161.138 121.636 158.038Z\" fill=\"#FEFEFE\" />\r\n        <path d=\"M58.4681 161.448C56.9641 160.58 55.7734 159.774 55.7734 159.588C55.7734 159.464 57.2148 156.798 58.9694 153.76C61.7894 148.8 62.2281 148.242 63.3561 148.8C63.9828 149.172 64.5468 149.544 64.5468 149.668C64.5468 149.854 63.4188 151.962 61.9774 154.38C59.4081 158.906 59.4081 159.34 61.7268 160.146C62.1028 160.27 62.1028 160.828 61.7268 161.696L61.1001 163.06L58.4681 161.448Z\" fill=\"#FEFEFE\" />\r\n        <path d=\"M51.888 157.852C51.1986 157.356 51.0106 156.798 51.4493 156.178C52.264 154.938 52.1386 154.566 50.948 154.132C50.384 153.884 49.6946 154.008 49.5066 154.442C49.0053 155.186 46.3733 154.628 46.3733 153.822C46.3733 153.512 48.504 151.28 51.136 148.862C55.648 144.584 55.9613 144.398 57.2146 145.266C58.844 146.382 58.844 146.382 55.9613 152.83C53.392 158.72 53.2666 158.844 51.888 157.852ZM54.52 149.854C54.52 149.482 53.956 149.73 53.2666 150.35C52.5773 150.97 52.2013 151.714 52.452 152.086C52.828 152.706 54.52 150.908 54.52 149.854Z\" fill=\"#FEFEFE\" />\r\n        <path d=\"M135.673 155C134.733 154.008 134.671 153.636 135.36 152.83C135.924 152.148 136.363 152.024 136.864 152.52C137.741 153.388 139.308 153.326 138.995 152.396C138.807 151.962 137.303 151.404 135.611 151.156C130.785 150.474 128.529 146.382 131.725 144.212C133.48 142.972 134.796 142.972 136.363 144.15C137.553 145.08 137.553 145.08 136.363 146.01C135.485 146.63 134.921 146.754 134.357 146.258C133.856 145.886 133.48 145.824 133.229 146.258C132.791 146.94 134.921 148.304 136.175 148.118C140.687 147.56 143.695 152.892 140.248 155.248C138.368 156.55 137.052 156.488 135.673 155Z\" fill=\"#FEFEFE\" />\r\n        <path d=\"M42.6132 151.032C41.9866 150.226 42.1119 149.668 43.1772 147.87C44.9946 144.77 44.8066 144.522 42.4252 146.816C40.5452 148.614 40.2319 148.738 39.4799 147.87C38.7906 147.064 39.2919 146.258 42.9892 142.352C45.3706 139.872 47.6266 137.764 48.0026 137.702C48.3786 137.702 49.0679 138.012 49.4439 138.508C50.0706 139.19 49.9452 139.996 48.8172 142.104L47.5012 144.77L49.6319 142.724C51.5746 140.926 51.8879 140.802 52.6399 141.67C53.3292 142.476 52.7652 143.282 49.1306 147.064C46.8119 149.544 44.5559 151.652 44.1799 151.776C43.7412 151.9 43.0519 151.528 42.6132 151.032Z\" fill=\"#FEFEFE\" />\r\n        <path d=\"M79.712 147.87C73.7586 146.32 66.2386 142.972 60.9746 139.438C56.0866 136.214 48.1906 127.782 44.8693 122.264C31.5213 100.192 34.8426 71.92 52.9533 53.63C58.5933 47.926 61.7893 45.632 68.9333 42.098C76.6413 38.254 84.3493 36.58 93.9373 36.58C103.839 36.58 110.105 38.006 118.753 42.098C130.723 47.74 139.559 56.482 145.387 68.448C150.024 77.934 150.713 80.972 150.713 93C150.713 105.028 150.024 108.066 145.387 117.552C137.929 132.804 124.393 143.778 107.912 147.932C99.5773 150.04 88.0466 149.978 79.712 147.87ZM90.8666 135.284C90.8666 128.154 90.7413 127.162 89.6133 126.17C88.9866 125.612 88.1093 124.124 87.6706 122.946C86.9186 120.528 87.608 118.048 89.676 116.188C90.5533 115.382 90.8666 114.266 90.8666 111.6C90.8666 108.066 90.8666 108.066 88.36 106.95L85.7906 105.834L83.7226 107.818C82.0933 109.368 81.5293 110.484 81.2786 112.654C80.9026 116.374 78.772 118.42 75.012 118.854C72.4426 119.164 71.6906 119.722 66.364 125.054L60.4733 130.882L62.98 133.052C68.9333 138.074 81.2786 142.91 88.8613 143.158L90.8666 143.22V135.284ZM109.667 140.988C114.931 139.252 121.323 135.966 124.895 133.114L127.339 131.254L121.197 125.178C115.557 119.598 114.805 119.04 112.675 119.04C109.165 119.04 106.283 116.312 106.22 112.902C106.157 110.856 105.719 109.926 103.964 108.19L101.771 106.02L99.1386 107.074C96.5066 108.19 96.5066 108.19 96.5066 111.538C96.5066 114.266 96.7573 115.01 98.0106 116.002C100.329 117.8 101.144 120.9 100.016 123.628C99.5146 124.806 98.512 126.17 97.8226 126.604C96.5693 127.348 96.5066 127.968 96.5066 135.408V143.406L100.705 142.972C103.024 142.724 107.035 141.856 109.667 140.988ZM68.3066 112.344C68.3066 108.5 70.876 106.02 74.6986 106.02C77.0173 106.02 77.7693 105.648 79.524 103.912C81.6546 101.742 81.6546 101.742 80.652 99.386C79.712 97.03 79.712 97.03 75.8893 96.844C72.3173 96.658 71.816 96.844 69.8106 98.58C68.3693 99.82 66.9906 100.44 65.612 100.44C63.4813 100.44 59.5333 98.394 59.5333 97.34C59.5333 96.968 56.4626 96.72 51.3866 96.72H43.24V98.456C43.24 104.408 48.128 116.622 53.1413 123.194L56.0866 127.038L62.228 121.024C68.056 115.258 68.3066 114.948 68.3066 112.344ZM136.613 120.466C140.123 115.258 142.567 109.43 143.82 103.416C145.387 96.1 146.139 96.72 135.485 96.72H126.273L124.581 98.518C123.641 99.51 122.075 100.44 121.135 100.626C118.941 100.998 115.62 99.696 114.555 98.022C113.928 97.03 113.113 96.72 111.108 96.72C108.601 96.72 108.413 96.844 107.285 99.386L106.095 101.99L108.225 104.222C109.917 105.958 110.732 106.392 112.111 106.144C115.996 105.586 120.445 110.174 119.317 113.584C119.004 114.576 120.132 116.064 125.083 120.962C132.227 128.03 131.6 128.092 136.613 120.466ZM59.972 90.21C60.4733 88.846 63.4813 87.42 65.7373 87.42C66.928 87.42 68.432 88.102 69.748 89.28C71.628 90.892 72.38 91.14 75.6386 91.14H79.3986L80.4013 88.536L81.4666 85.932L79.5866 84.01C78.0826 82.522 77.268 82.088 75.8893 82.336C72.004 82.894 67.7426 78.492 68.62 74.834C68.9333 73.718 67.7426 72.23 62.1653 66.712L55.272 60.016L52.7653 63.302C47.8146 69.812 43.24 81.84 43.24 88.474V91.14H51.3866C58.1546 91.14 59.6586 90.954 59.972 90.21ZM115.307 89.652C116.059 88.784 117.5 87.916 118.44 87.73C120.508 87.296 124.581 88.784 125.083 90.21C125.396 91.016 126.963 91.14 135.109 91.14H144.76V88.846C144.76 85.374 142.504 76.818 140.436 72.292C138.619 68.262 134.044 61.194 132.791 60.388C132.415 60.14 129.595 62.434 126.211 65.782C121.135 70.804 120.32 71.858 120.32 73.656C120.32 76.136 118.879 79.112 117.249 79.98C116.56 80.29 114.931 80.6 113.615 80.6C111.609 80.6 110.732 81.034 108.789 83.018C106.596 85.25 106.408 85.622 107.035 87.234C107.348 88.164 107.849 89.466 108.037 90.086C108.601 91.822 113.427 91.512 115.307 89.652ZM86.7933 81.282C86.9813 80.972 87.984 80.538 88.9866 80.29C90.6786 79.918 90.8666 79.67 90.8666 77.314C90.8666 75.392 90.428 74.338 89.1746 72.974C87.796 71.61 87.42 70.618 87.42 68.51C87.42 66.402 87.796 65.41 89.1746 64.046L90.8666 62.248V52.452V42.594L87.044 43.028C77.7066 44.082 68.432 48.36 59.596 55.614C59.408 55.738 62.3533 58.9 66.1133 62.62C72.2546 68.758 73.1946 69.44 75.2 69.44C76.4533 69.44 78.0826 69.874 78.8346 70.432C80.7146 71.734 82.2813 74.896 81.8426 76.508C81.592 77.438 82.0933 78.368 83.472 79.794C85.6026 81.964 86.1666 82.212 86.7933 81.282ZM107.16 74.276C107.16 70.804 109.917 67.952 113.364 67.952C115.808 67.89 116.309 67.518 122.075 61.814L128.153 55.738L125.647 53.506C119.944 48.608 108.664 43.834 100.768 43.028L96.5066 42.594V52.328V62.124L98.3866 63.984C99.8906 65.472 100.267 66.34 100.267 68.634C100.267 70.928 99.9533 71.734 98.3866 73.16C96.9453 74.462 96.5066 75.454 96.5066 77.128C96.5066 79.05 96.7573 79.484 98.2613 79.98C99.2013 80.352 100.392 80.848 100.893 81.158C101.583 81.592 102.523 81.034 104.528 79.174C106.721 77.066 107.16 76.198 107.16 74.276Z\" fill=\"#FEFEFE\" />\r\n        <path d=\"M140.436 146.072C136.864 142.29 136.425 140.492 138.681 138.384C140.436 136.772 141.501 136.71 143.381 138.012C144.509 138.756 144.697 139.19 144.071 139.872C143.632 140.368 142.817 140.616 141.877 140.368C140.812 140.12 140.373 140.244 140.373 140.802C140.373 141.856 145.011 146.94 145.951 146.94C146.891 146.94 146.828 145.514 145.888 144.584C145.324 144.026 145.387 143.592 146.264 142.724C147.267 141.732 147.392 141.732 148.583 143.158C150.087 145.018 150.087 146.63 148.52 148.18C146.264 150.412 144.071 149.792 140.436 146.072Z\" fill=\"#FEFEFE\" />\r\n        <path d=\"M33.9654 142.414C31.3334 139.624 32.4614 137.144 38.0387 133.424C40.5454 131.688 42.8641 131.688 44.4934 133.424C46.0601 135.098 46.0601 136.4 44.4934 138.446C42.9267 140.368 37.7254 143.84 36.3467 143.84C35.7827 143.84 34.7174 143.22 33.9654 142.414ZM39.3547 138.942C42.3001 136.772 42.9894 135.904 42.1747 135.098C41.4227 134.354 34.9054 139.252 35.4067 140.12C35.9707 141.05 36.5974 140.864 39.3547 138.942Z\" fill=\"#FEFEFE\" />\r\n        <path d=\"M148.019 139.314C142.817 135.408 142.316 134.726 143.569 133.486C144.133 132.928 144.823 133.176 146.389 134.354C148.269 135.78 148.52 135.78 148.896 134.85C149.209 134.168 148.771 133.362 147.643 132.432C146.452 131.564 146.076 130.758 146.327 130.014C146.577 129.456 147.016 128.96 147.392 128.96C147.831 128.96 155.1 134.292 157.607 136.524C157.983 136.834 157.795 137.392 157.168 138.012C156.228 138.942 155.977 138.88 153.909 137.33C151.967 135.842 151.591 135.78 151.277 136.71C150.964 137.392 151.465 138.26 152.781 139.376C154.536 140.864 154.661 141.174 153.909 142.104C153.157 143.096 152.656 142.91 148.019 139.314Z\" fill=\"#FEFEFE\" />\r\n        <path d=\"M28.576 134.788C28.0747 133.424 28.2 133.3 34.216 129.642C38.6027 126.914 39.2294 126.666 39.9187 127.534C40.984 128.836 40.796 129.022 35.532 132.308C29.6414 135.904 29.0774 136.09 28.576 134.788Z\" fill=\"#FEFEFE\" />\r\n        <path d=\"M153.408 130.758L148.019 127.72L149.585 124.93C151.215 122.016 151.465 121.83 152.781 122.698C153.471 123.07 153.471 123.504 152.844 124.868C152.155 126.294 152.217 126.666 152.969 127.1C153.596 127.534 154.035 127.224 154.661 126.108C155.351 124.868 155.664 124.744 156.667 125.24C157.732 125.798 157.795 126.108 157.168 127.472C156.541 128.774 156.604 129.146 157.356 129.642C158.672 130.448 158.86 130.386 159.8 128.65C160.74 126.914 161.241 126.728 162.244 127.968C162.745 128.588 162.62 129.394 161.492 131.316C160.74 132.742 159.863 133.92 159.487 133.858C159.173 133.858 156.416 132.494 153.408 130.758Z\" fill=\"#FEFEFE\" />\r\n        <path d=\"M24.8787 128.526C23.7507 127.472 24.816 126.294 28.8894 124.248C32.524 122.45 33.276 121.83 33.0254 120.838C32.8374 120.094 33.088 119.412 33.84 119.04C34.7174 118.544 35.2187 118.978 36.5974 121.458C37.4747 123.132 38.2267 124.744 38.2267 125.116C38.2267 126.294 36.2214 126.542 35.4067 125.488C34.7174 124.496 34.2787 124.62 30.5187 126.666C26.32 129.022 25.568 129.27 24.8787 128.526Z\" fill=\"#FEFEFE\" />\r\n        <path d=\"M157.92 123.132C152.468 121.024 151.591 120.156 153.095 118.172C153.847 117.18 154.285 117.118 156.855 117.676C158.484 117.986 159.8 118.048 159.8 117.862C159.8 117.614 158.672 116.808 157.293 116.002C154.599 114.514 154.599 114.514 155.163 112.406C155.664 110.546 156.165 110.608 162.683 113.088C168.385 115.258 168.949 115.692 168.009 117.118C167.571 117.8 166.944 117.676 164.563 116.684C160.991 115.072 160.74 115.816 164.187 117.738C168.197 119.97 167.445 121.954 162.996 120.962C159.675 120.218 159.675 121.086 162.933 122.14C164.688 122.698 165.44 123.318 165.315 123.938C165.001 125.488 163.623 125.364 157.92 123.132Z\" fill=\"#FEFEFE\" />\r\n        <path d=\"M22.1212 122.388C21.8706 121.768 22.1839 121.024 22.8106 120.59C24.1892 119.598 23.4372 117.614 21.8706 118.11C21.1186 118.358 20.4919 118.048 20.0532 117.18C19.6772 116.436 19.4266 115.754 19.5519 115.692C19.6772 115.568 22.6852 115.01 26.2572 114.39C33.0252 113.274 33.7772 113.398 33.8399 115.94C33.8399 116.746 24.1266 123.38 22.9359 123.38C22.6852 123.38 22.3719 122.946 22.1212 122.388ZM28.1999 117.49C29.3279 116.87 29.4532 116.622 28.7012 116.56C27.2599 116.56 25.6932 117.242 25.6932 117.862C25.6932 118.606 26.3826 118.544 28.1999 117.49Z\" fill=\"#FEFEFE\" />\r\n        <path d=\"M18.7999 112.84C18.7999 112.53 18.6119 111.91 18.4239 111.352C18.1733 110.732 18.7373 110.112 19.9906 109.43C22.5599 108.128 22.4973 107.198 19.9279 107.942C17.6719 108.562 17.7346 108.562 17.4213 107.012C17.2333 106.02 18.0479 105.648 23.4373 104.408C26.8839 103.602 29.8919 103.106 30.2053 103.292C31.4586 104.098 30.5813 106.082 28.5133 107.074C26.0693 108.19 25.5053 109.492 27.7613 108.748C30.1426 107.942 31.5839 108.128 31.8346 109.244C32.0853 110.422 31.8346 110.484 24.3146 112.158C21.2439 112.778 18.7999 113.088 18.7999 112.84Z\" fill=\"#FEFEFE\" />\r\n        <path d=\"M163.873 110.918C161.116 110.298 158.296 109.616 157.544 109.43C156.353 109.182 156.291 108.934 156.917 106.02C157.419 103.416 157.732 102.92 158.923 102.92C160.176 102.92 160.301 103.168 159.988 105.152C159.675 107.136 159.737 107.384 160.803 107.136C161.492 107.012 162.056 106.33 162.181 105.524C162.369 104.47 162.745 104.16 163.748 104.284C164.751 104.408 165.064 104.904 165.127 106.33C165.127 108.872 166.944 109.182 167.821 106.702C168.323 105.276 168.761 104.966 169.827 105.214C170.579 105.4 171.017 105.896 170.829 106.392C170.641 106.826 170.328 108.19 170.077 109.368C169.889 110.608 169.513 111.724 169.263 111.848C169.075 111.972 166.631 111.538 163.873 110.918Z\" fill=\"#FEFEFE\" />\r\n        <path d=\"M156.98 76.384C157.231 75.454 157.419 74.71 157.481 74.648C157.544 74.648 159.424 74.09 161.555 73.47C165.503 72.354 165.565 72.292 165.189 70.432C164.939 69.378 164.563 68.324 164.249 68.014C163.936 67.704 161.743 68.324 159.236 69.378L154.787 71.238V69.688C154.787 68.386 155.413 67.89 158.86 66.34C162.871 64.542 162.933 64.48 162.244 62.806C161.367 60.512 157.419 53.444 156.729 53.072C156.479 52.886 154.348 54.002 152.092 55.552L147.893 58.28V56.544C147.893 55.056 148.52 54.374 151.34 52.452C155.539 49.724 155.601 49.91 148.52 42.656L143.507 37.51L140.185 41.044C138.368 43.028 136.739 44.64 136.488 44.64C136.3 44.64 135.987 44.02 135.799 43.276C135.485 42.284 136.112 41.106 138.243 38.688L141 35.464L139.371 34.162C138.431 33.418 137.428 32.86 137.115 32.86C136.801 32.86 135.36 34.72 133.919 36.952C131.537 40.61 131.224 40.92 130.472 39.866C130.033 39.246 129.845 38.13 130.033 37.386C130.284 36.394 130.096 35.96 129.469 35.96C128.968 35.96 127.715 35.216 126.649 34.348C125.145 33.108 124.707 32.24 124.707 30.442C124.707 28.21 124.769 28.148 126.9 28.396C129.595 28.706 129.783 27.714 127.213 26.66C125.521 25.978 124.143 23.87 124.895 23.188C125.647 22.444 138.431 29.76 142.065 32.984C142.817 33.666 143.695 34.038 144.071 33.79C144.948 33.294 144.948 31.31 144.133 29.76C143.82 29.14 143.695 28.148 143.883 27.59C144.196 26.784 144.447 26.784 145.199 27.404C145.951 28.024 146.076 29.016 145.763 31.806L145.387 35.464L150.087 40.424C157.92 48.67 163.56 57.908 167.257 68.572C169.451 74.896 169.639 76.384 168.26 77.5C167.508 78.12 167.32 77.934 166.944 76.632C166.756 75.764 166.38 75.02 166.129 75.02C165.879 75.02 163.623 75.702 161.116 76.57L156.541 78.12L156.98 76.384ZM133.48 32.302C134.357 30.628 134.357 30.504 132.289 29.512C130.597 28.644 130.472 28.644 130.159 29.76C129.908 30.69 129.281 31 127.715 31L125.647 31.062L127.151 32.24C129.093 33.852 132.603 33.914 133.48 32.302Z\" fill=\"#FEFEFE\" />\r\n        <path d=\"M18.4867 76.136C19.9907 70.804 22.372 64.108 24.1893 60.202C27.072 53.94 33.652 44.33 37.5373 40.61C39.292 38.936 40.7333 37.324 40.7333 37.138C40.7333 36.89 39.856 36.518 38.7907 36.27C37.2867 35.898 36.5347 36.146 35.532 37.138C34.2787 38.316 34.2787 38.44 35.344 39.618C36.7227 41.106 35.72 41.788 33.9653 40.548C32.2733 39.432 32.2107 37.138 33.7147 35.774C35.0307 34.596 38.1013 34.41 40.2947 35.402C41.6733 36.022 42.3 35.712 46.3107 32.736C48.7547 30.876 52.5147 28.334 54.5827 27.156C57.904 25.172 58.656 24.986 59.972 25.606L61.476 26.288L59.8467 27.156L58.2173 27.962L60.4107 31.992C61.664 34.224 62.6667 36.27 62.6667 36.58C62.6667 37.51 59.6587 37.324 59.3453 36.456C59.1573 35.836 58.7813 35.898 57.904 36.704C55.5853 38.688 53.3293 39.184 51.0107 38.068L48.88 37.076L50.1333 35.34C50.8227 34.348 51.136 33.418 50.8853 33.232C50.3213 32.922 44.4933 37.014 44.4933 37.758C44.4933 37.944 46.06 39.68 48.0653 41.664L51.5747 45.198L49.82 45.632C48.1907 46.004 47.6893 45.756 45.0573 42.904L42.112 39.742L40.3573 41.664C39.1667 42.904 38.7907 43.648 39.3547 43.834C40.3573 44.206 40.2947 46.5 39.1667 49.166C38.4147 50.964 38.4147 51.46 39.104 52.018C40.2947 53.01 43.052 50.716 43.5533 48.36C43.8667 47.058 44.3053 46.5 45.2453 46.5C46.4987 46.5 46.5613 47.43 45.4333 50.344C45.1827 50.964 45.8093 51.088 48.316 50.902C50.572 50.778 51.3867 50.902 51.136 51.398C50.8853 51.77 50.0707 52.08 49.3187 52.08C47.188 52.08 46.436 52.824 45.872 55.49C45.5587 57.164 44.9947 58.032 44.2427 58.156C43.24 58.404 43.1773 58.094 43.5533 55.18L43.992 51.894L42.5507 52.948C41.736 53.506 40.6707 53.94 40.1067 53.94C39.6053 53.94 38.6653 54.808 38.1013 55.8C37.5373 56.792 36.0333 58.094 34.8427 58.714C32.9 59.582 32.3987 59.644 30.8947 58.9C29.892 58.404 28.952 57.908 28.7013 57.784C28.4507 57.66 27.824 58.404 27.26 59.458L26.32 61.38L31.0827 63.736C35.72 66.03 35.7827 66.092 34.2787 66.898C32.9 67.642 32.2733 67.518 29.14 66.092C27.1347 65.224 25.4427 64.48 25.2547 64.48C25.004 64.48 23.1867 68.51 23.1867 69.068C23.1867 69.192 24.064 69.626 25.1293 69.998C26.1947 70.37 27.1973 71.238 27.3853 71.92C27.7613 73.408 27.8867 73.408 30.1427 72.106C32.2107 70.866 33.464 71.61 31.6467 72.974C29.14 74.772 24.5027 76.88 24.1267 76.26C23.9387 75.95 23.9387 74.958 24.1893 74.09C24.5027 72.788 24.3773 72.54 23.312 72.54C22.372 72.54 21.9333 73.098 21.62 74.4C21.3693 75.454 20.68 76.57 20.0533 76.88C18.2987 77.81 18.048 77.624 18.4867 76.136ZM36.3467 54.436C36.3467 53.382 36.2213 53.382 34.1533 54.374C31.584 55.614 31.4587 55.986 33.4013 56.854C34.968 57.598 36.3467 56.482 36.3467 54.436ZM34.3413 53.072C35.7827 52.576 36.3467 52.018 36.3467 51.026C36.3467 50.282 36.66 48.918 37.0987 48.05C37.4747 47.182 37.6 46.314 37.412 46.128C36.7853 45.446 35.156 47.058 32.3987 51.088C30.5813 53.754 30.2053 54.622 31.0827 54.25C31.7093 54.002 33.2133 53.444 34.3413 53.072ZM55.46 35.65C57.2147 33.976 57.4027 32.426 56.212 30.752C55.3973 29.636 55.272 29.636 53.7053 30.69C52.264 31.62 52.1387 31.868 52.9533 32.674C53.768 33.48 53.768 33.79 52.9533 35.402C52.076 37.014 52.076 37.2 52.9533 37.2C53.5173 37.2 54.6453 36.518 55.46 35.65Z\" fill=\"#FEFEFE\" />\r\n        <path d=\"M157.732 63.24C157.105 62.186 156.04 61.38 155.351 61.38C154.536 61.38 154.16 60.946 154.16 59.892C154.16 58.218 155.789 56.544 156.604 57.412C157.857 58.652 160.928 64.418 160.615 64.728C159.8 65.534 158.735 65.038 157.732 63.24Z\" fill=\"#FEFEFE\" />\r\n        <path d=\"M144.196 49.848C142.754 48.05 142.566 46.19 143.506 43.772C144.446 41.292 145.136 41.85 145.136 45.074C145.073 47.368 145.324 48.05 146.138 48.236C146.89 48.36 147.329 47.926 147.642 46.872C148.144 44.702 148.708 44.826 151.089 47.802C152.53 49.662 152.906 50.468 152.342 51.026C151.841 51.522 151.277 51.336 150.212 50.344C148.833 49.042 148.77 49.042 148.018 50.22C146.953 51.894 145.7 51.77 144.196 49.848Z\" fill=\"#FEFEFE\" />\r\n        <path d=\"M107.599 29.946C106.721 28.954 106.721 28.396 107.473 24.8C108.413 20.398 108.163 19.84 105.155 19.84C103.525 19.84 103.463 19.964 103.024 24.8C102.836 27.528 102.397 29.76 102.147 29.76C101.457 29.76 99.6401 27.59 99.6401 26.722C99.6401 26.226 99.3268 26.164 98.4494 26.66C96.5694 27.59 94.9401 27.404 93.1228 25.978C90.8668 24.242 91.1174 21.762 93.6241 20.522C95.1281 19.84 95.7548 19.84 97.8228 20.646C100.141 21.576 100.267 21.514 100.267 20.398C100.267 19.344 99.7654 19.22 93.9374 19.22H87.6708L88.1094 24.18C88.2974 26.908 88.2974 29.14 88.1094 29.14C86.7308 29.14 85.2268 27.652 85.2268 26.412C85.2268 25.048 85.0388 24.924 82.5948 25.234C77.6441 25.792 77.0174 26.598 80.2761 28.272C81.6548 28.954 82.0308 29.45 81.5921 29.884C81.1534 30.318 80.2134 30.132 78.5214 29.14C73.6961 26.226 72.3174 24.18 75.2628 24.18C76.0148 24.18 76.4534 23.746 76.4534 23.064C76.4534 21.39 75.9521 21.142 73.8214 21.762C71.9414 22.258 70.1868 21.638 70.1868 20.398C70.1868 20.026 75.8894 18.6 83.9108 16.988C85.3521 16.678 85.3521 16.678 84.2241 15.376C83.5348 14.694 82.4068 13.888 81.6548 13.578C80.8401 13.268 80.2134 12.648 80.2134 12.09C80.2134 10.044 83.2841 11.532 85.1641 14.446L86.4174 16.492L94.7521 16.616C105.468 16.74 113.364 18.228 114.116 20.336C114.617 21.576 114.492 21.7 112.925 21.576C111.296 21.39 111.233 21.576 110.293 25.854C109.792 28.272 109.165 30.442 108.977 30.628C108.789 30.814 108.163 30.504 107.599 29.946ZM97.5094 24.49C100.079 23.436 99.8281 22.32 96.9454 22.32C94.3761 22.32 93.0601 23.188 93.5614 24.428C94.0628 25.668 94.6894 25.668 97.5094 24.49ZM83.8481 22.816C84.2868 22.382 84.6001 21.514 84.6001 20.894C84.6001 19.84 84.2868 19.716 82.0308 20.026C78.9601 20.398 78.8974 20.46 79.3988 22.196C79.7748 23.746 82.5321 24.118 83.8481 22.816Z\" fill=\"#FEFEFE\" />\r\n        <defs>\r\n            <linearGradient id=\"paint0_linear\" x1=\"93.8829\" y1=\"0.0307312\" x2=\"93.8829\" y2=\"185.957\" gradientUnits=\"userSpaceOnUse\">\r\n                <stop stop-color=\"#E47F40\" />\r\n                <stop offset=\"1\" stop-color=\"#CD5A2F\" />\r\n            </linearGradient>\r\n            <linearGradient id=\"paint1_linear\" x1=\"93.7207\" y1=\"36.58\" x2=\"93.7207\" y2=\"149.482\" gradientUnits=\"userSpaceOnUse\">\r\n                <stop stop-color=\"#E47F40\" />\r\n                <stop offset=\"1\" stop-color=\"#CD5A2F\" />\r\n            </linearGradient>\r\n        </defs>\r\n    </svg>\r\n)\r\n}\r\nexport default Nss;\r\n","import React from 'react';\r\nconst Teqip=()=>{\r\n    return (<svg className=\"linkimg\" width=\"286\" height=\"122\" viewBox=\"0 0 286 122\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n<path d=\"M271.784 107.563C246.194 98.21 191.001 94.9567 158.554 100.853C118.748 108.377 29.6035 104.92 8.86428 95.3633C3.17773 92.72 5.51925 89.2633 11.373 91.5C21.9099 95.77 56.0292 99.8367 82.7894 99.8367C103.194 99.8367 121.257 98.4133 146.847 94.7533C166.415 91.9067 188.66 89.4667 196.186 89.4667C209.566 89.4667 247.867 95.3633 260.41 99.43C263.923 100.447 269.944 102.48 273.958 103.7C277.805 104.92 280.982 106.75 280.982 107.767C280.982 110.207 278.641 110.003 271.784 107.563Z\" fill=\"url(#paint0_linear)\"/>\r\n<path d=\"M117.745 83.7733C115.571 80.52 111.222 77.2667 106.874 75.8433C96.3368 72.3867 91.6537 65.4733 90.6502 52.0533C89.145 30.2967 96.6713 18.3 111.724 18.3C126.609 18.3 133.801 28.06 133.801 47.7833C133.801 60.39 131.961 66.2867 126.442 71.5733L122.93 75.03L127.613 80.7233C133.467 88.2467 133.299 89.4667 126.777 89.2633C122.763 89.2633 120.254 87.6367 117.745 83.7733ZM120.588 63.2367C126.275 57.7467 126.442 38.8367 120.923 32.33C116.909 27.45 108.379 26.6367 104.365 30.5C98.0093 37.0067 98.3438 60.1867 105.034 64.8633C109.55 68.1167 116.407 67.5067 120.588 63.2367Z\" fill=\"url(#paint1_linear)\"/>\r\n<path d=\"M26.7602 51.85V28.4667H20.0702C14.0491 28.4667 13.3801 28.06 13.3801 23.3833V18.3H31.7778H50.1754V23.3833C50.1754 28.06 49.5064 28.4667 42.6491 28.4667H35.1228V51.85V75.2333H30.9415H26.7602V51.85Z\" fill=\"url(#paint2_linear)\"/>\r\n<path d=\"M55.193 46.7667V18.3H69.4094C83.4585 18.3 83.6257 18.3 83.6257 23.3833C83.6257 28.2633 83.124 28.4667 73.5907 28.4667H63.5556V35.5833V42.7H72.7544C80.7825 42.7 81.9532 43.1067 81.9532 46.7667C81.9532 50.4267 80.7825 50.8333 72.7544 50.8333H63.5556V58.9667V67.1H73.5907C82.455 67.1 83.6257 67.5067 83.6257 71.1667C83.6257 74.8267 82.455 75.2333 69.4094 75.2333H55.193V46.7667Z\" fill=\"url(#paint3_linear)\"/>\r\n<path d=\"M142.164 46.7667V18.3H146.345H150.526V46.7667V75.2333H146.345H142.164V46.7667Z\" fill=\"url(#paint4_linear)\"/>\r\n<path d=\"M162.234 46.7667V18.3H171.265C187.991 18.3 194.012 23.3833 194.012 37.21C194.012 47.9867 189.496 53.2733 179.294 54.4933L170.596 55.51V65.27C170.596 74.6233 170.262 75.2333 166.415 75.2333H162.234V46.7667ZM183.809 41.6833C185.816 39.4467 185.816 37.82 184.311 33.55C182.806 29.4833 181.133 28.4667 176.45 28.4667C170.596 28.4667 170.596 28.4667 170.596 37.82V47.3767L175.949 45.9533C178.959 45.14 182.471 43.31 183.809 41.6833Z\" fill=\"url(#paint5_linear)\"/>\r\n<path d=\"M217.427 46.7667V18.3H221.608H225.79V46.7667V75.2333H221.608H217.427V46.7667Z\" fill=\"url(#paint6_linear)\"/>\r\n<path d=\"M237.497 46.7667V18.3H241.678H245.86V46.7667V75.2333H241.678H237.497V46.7667Z\" fill=\"url(#paint7_linear)\"/>\r\n<path d=\"M257.567 46.7667V18.3H261.749H265.93V46.7667V75.2333H261.749H257.567V46.7667Z\" fill=\"url(#paint8_linear)\"/>\r\n<defs>\r\n<linearGradient id=\"paint0_linear\" x1=\"143.294\" y1=\"89.4667\" x2=\"143.294\" y2=\"109.498\" gradientUnits=\"userSpaceOnUse\">\r\n<stop stop-color=\"#E47F40\"/>\r\n<stop offset=\"1\" stop-color=\"#CD5A2F\"/>\r\n</linearGradient>\r\n<linearGradient id=\"paint1_linear\" x1=\"112.131\" y1=\"18.3\" x2=\"112.131\" y2=\"89.2836\" gradientUnits=\"userSpaceOnUse\">\r\n<stop stop-color=\"#E47F40\"/>\r\n<stop offset=\"1\" stop-color=\"#CD5A2F\"/>\r\n</linearGradient>\r\n<linearGradient id=\"paint2_linear\" x1=\"31.7778\" y1=\"18.3\" x2=\"31.7778\" y2=\"75.2333\" gradientUnits=\"userSpaceOnUse\">\r\n<stop stop-color=\"#E47F40\"/>\r\n<stop offset=\"1\" stop-color=\"#CD5A2F\"/>\r\n</linearGradient>\r\n<linearGradient id=\"paint3_linear\" x1=\"69.4094\" y1=\"18.3\" x2=\"69.4094\" y2=\"75.2333\" gradientUnits=\"userSpaceOnUse\">\r\n<stop stop-color=\"#E47F40\"/>\r\n<stop offset=\"1\" stop-color=\"#CD5A2F\"/>\r\n</linearGradient>\r\n<linearGradient id=\"paint4_linear\" x1=\"146.345\" y1=\"18.3\" x2=\"146.345\" y2=\"75.2333\" gradientUnits=\"userSpaceOnUse\">\r\n<stop stop-color=\"#E47F40\"/>\r\n<stop offset=\"1\" stop-color=\"#CD5A2F\"/>\r\n</linearGradient>\r\n<linearGradient id=\"paint5_linear\" x1=\"178.123\" y1=\"18.3\" x2=\"178.123\" y2=\"75.2333\" gradientUnits=\"userSpaceOnUse\">\r\n<stop stop-color=\"#E47F40\"/>\r\n<stop offset=\"1\" stop-color=\"#CD5A2F\"/>\r\n</linearGradient>\r\n<linearGradient id=\"paint6_linear\" x1=\"221.608\" y1=\"18.3\" x2=\"221.608\" y2=\"75.2333\" gradientUnits=\"userSpaceOnUse\">\r\n<stop stop-color=\"#E47F40\"/>\r\n<stop offset=\"1\" stop-color=\"#CD5A2F\"/>\r\n</linearGradient>\r\n<linearGradient id=\"paint7_linear\" x1=\"241.678\" y1=\"18.3\" x2=\"241.678\" y2=\"75.2333\" gradientUnits=\"userSpaceOnUse\">\r\n<stop stop-color=\"#E47F40\"/>\r\n<stop offset=\"1\" stop-color=\"#CD5A2F\"/>\r\n</linearGradient>\r\n<linearGradient id=\"paint8_linear\" x1=\"261.749\" y1=\"18.3\" x2=\"261.749\" y2=\"75.2333\" gradientUnits=\"userSpaceOnUse\">\r\n<stop stop-color=\"#E47F40\"/>\r\n<stop offset=\"1\" stop-color=\"#CD5A2F\"/>\r\n</linearGradient>\r\n</defs>\r\n</svg>\r\n)\r\n}\r\nexport default Teqip;\r\n","module.exports = \"/_next/static/images/logo512-30b59b81e2369fe16cf7b346199e3a77.png\";","import React from 'react';\r\n\r\nconst Footer=()=>{\r\n    return (\r\n        <div className=\"foot-row\">\r\n            <div className=\"foot-col-4\">\r\n            <h1>Contact Us</h1>\r\n            <h3>National Institute of Technology Patna</h3>\r\n            <h3> Patna, Bihar (800005), India</h3>\r\n            <h3> Phone: +91-0612-237 1715 / 237 2715</h3>\r\n            <h3>FAX : +91-0612-2670631 , 0612-2660480</h3>\r\n            </div>\r\n            <div className=\"foot-col-8\"></div>\r\n        </div>\r\n    )\r\n}\r\nexport default Footer;","import React from 'react';\r\nimport Newscard from './home/newscard';\r\nimport nitpimg from '../assets/img/nitp.png';\r\nimport Importantlink from './home/importantlink';\r\nconst Home=()=>{\r\n    return (\r\n        <div>\r\n            <div>\r\n                <div className=\"bgimgwrap\"><img className=\"nitpbackimg\" src={nitpimg} alt=\"NATIONAL INSTITUTE OF TECHNOLOGY PATNA\" /></div>\r\n            </div>\r\n            <Importantlink/>\r\n            <div className=\"news-head\">\r\n                News\r\n                <p>view all</p>\r\n            </div>\r\n            <div className=\"news-row\">\r\n                <div className=\"news-viewbox\">\r\n                    <Newscard head=\"Workshop organised\" detail=\"IEEE organised a Workshop for the students of 1st and 2nd year on the grand..\" />\r\n                    <Newscard head=\"Workshop organised\" detail=\"IEEE organised a Workshop for the students of 1st and 2nd year on the grand..\" />\r\n                    <Newscard head=\"Workshop organised\" detail=\"IEEE organised a Workshop for the students of 1st and 2nd year on the grand..\" />\r\n                    <Newscard head=\"Workshop organised\" detail=\"IEEE organised a Workshop for the students of 1st and 2nd year on the grand..\" />\r\n                    <Newscard head=\"Workshop organised\" detail=\"IEEE organised a Workshop for the students of 1st and 2nd year on the grand..\" />\r\n                    <Newscard head=\"Workshop organised\" detail=\"IEEE organised a Workshop for the students of 1st and 2nd year on the grand..\" />\r\n                    <Newscard head=\"Workshop organised\" detail=\"IEEE organised a Workshop for the students of 1st and 2nd year on the grand..\" />\r\n                    <Newscard head=\"Workshop organised\" detail=\"IEEE organised a Workshop for the students of 1st and 2nd year on the grand..\" />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\nimport Ieee from '../../assets/img/ieee';\r\nimport Corona from '../../assets/img/corona';\r\nimport Nss from '../../assets/img/nss';\r\nimport Josaa from '../../assets/img/josaa';\r\nimport Asme from '../../assets/img/asme';\r\nimport Teqip from '../../assets/img/teqip';\r\nimport Chanakya from '../../assets/img/chanakya';\r\n\r\nconst Importantlink=()=>{\r\n    return(\r\n        <div className=\"link-row\">\r\n            <div className=\"link-col\">\r\n                <a href=\"http://exam.nitp.ac.in/\">\r\n                    <div className=\"implink\">\r\n                    <Chanakya />\r\n                        <h3>CHANAKYA</h3></div>\r\n                </a>           \r\n                <div className=\"implink\">\r\n                <Corona />\r\n\r\n                    <h3>CORONA</h3></div>\r\n                    <div className=\"implink\">\r\n                    <Nss />\r\n\r\n                    <h3>NSS</h3></div>\r\n                    <div className=\"implink\">\r\n                    <Josaa />\r\n\r\n                    <h3>JOSAA</h3></div>\r\n\r\n            </div>\r\n            <div className=\"link-col\">\r\n                <div className=\"implink\">\r\n                    <Asme />\r\n\r\n                    <h3>ASME</h3></div>\r\n                    <div className=\"implink\">\r\n                    <Teqip />\r\n\r\n                    <h3>TEQIP</h3></div>\r\n                    <div className=\"implink\">\r\n                    <Ieee />\r\n\r\n                    <h3>IEEE</h3></div>\r\n                    <div className=\"implink\">\r\n                    <Chanakya />\r\n\r\n                    <h3>CHANAKYA</h3></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Importantlink;","import React from 'react';\r\nimport newspic from '../../assets/img/image 2.png';\r\n\r\nconst Newscard=(inf)=>{\r\n    return (\r\n        <div className=\"newscard-box\">\r\n            <img src={newspic} alt=\"Hello\" className=\"card-img\"></img>\r\n            <div className=\"news-read\">2 days ago..</div>\r\n            <div className=\"newscard-head\"><h4>{inf.head}</h4>\r\n             <h6>{inf.detail}</h6>\r\n                <div className=\"newscard-readmore\">Read more..</div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default Newscard;","import React from 'react';\r\nimport logo from '../assets/logo512.png';\r\nimport { window, document } from 'ssr-window';\r\nimport 'next-images';\r\n\r\nconst Navbar=()=>{\r\n  window.onscroll = function () { scrollFunction() };\r\n  function scrollFunction() {\r\n    if (document.body.scrollTop > 80 || document.documentElement.scrollTop > 80) {\r\n      document.querySelector(\".nav-col>h2\").style.lineHeight = \"0.3rem\";\r\n      document.querySelector(\".nav-col>h4\").style.lineHeight = \"0.3rem\";\r\n      document.querySelector(\".nav-col\").style.paddingTop = \"0.5vh\";\r\n      document.querySelector(\".nav-row\").style.height = \"8vh\";\r\n      document.querySelector(\".logobadge>h4\").style.display = \"none\";\r\n      document.querySelector(\".logobadge>img\").style.maxHeight= \"8vh\";\r\n      document.querySelector(\".logobadge>img\").style.borderWidth = \"0px\";\r\n      document.querySelector(\".logobadge>img\").style.marginTop = \"4vh\";\r\n      document.querySelector(\".logobadge\").style.backgroundColor = \"transparent\";\r\n      document.querySelector(\".logobadge\").style.paddingLeft = \"4vh\";\r\n      document.querySelector(\".mobilelogo>img\").style.maxHeight = \"6vh\";\r\n      document.querySelector(\".logobadge\").style.transition = \"1s\";\r\n      document.querySelector(\".logobadge>h4\").style.transition = \"1s\";\r\n      document.querySelector(\".logobadge>img\").style.transition = \"1s\";\r\n      document.querySelector(\".mobilelogo>img\").style.transition = \"1s\";\r\n      document.querySelector(\".nav-link-row\").style.height = \"4vh\";\r\n      document.querySelector(\".nav-link-row\").style.marginTop = \"8vh\";\r\n      document.querySelector(\".nav-link-row\").style.backgroundColor = \"#F7DDB5\";\r\n      document.querySelector(\".nav-link-row\").style.opacity = \"1\";\r\n\r\n    } else {\r\n      document.querySelector(\".nav-col>h2\").style.lineHeight = \"0.6rem\";\r\n      document.querySelector(\".nav-col>h4\").style.lineHeight = \"0.6rem\";\r\n      document.querySelector(\".nav-row\").style.height = \"10vh\";\r\n      document.querySelector(\".nav-link-row\").style.height = \"7vh\";\r\n      document.querySelector(\".nav-link-row\").style.backgroundColor = \"black\";\r\n      document.querySelector(\".nav-link-row\").style.marginTop = \"10vh\";\r\n      document.querySelector(\".logobadge>h4\").style.display = \"block\";\r\n      document.querySelector(\".logobadge>img\").style.maxHeight = \"15vh\";\r\n      document.querySelector(\".logobadge>img\").style.maxHeight= \"15vh\";\r\n      document.querySelector(\".logobadge>img\").style.borderWidth = \"1.5vh\";\r\n      document.querySelector(\".logobadge\").style.backgroundColor = \"#E47F40\";\r\n      document.querySelector(\".logobadge>img\").style.marginTop = \"0px\";\r\n      document.querySelector(\".logobadge\").style.paddingLeft = \"0\";\r\n      document.querySelector(\".mobilelogo>img\").style.maxHeight = \"8vh\";\r\n      document.querySelector(\".logobadge\").style.transition = \"1s\";\r\n      document.querySelector(\".logobadge>h4\").style.transition = \"1s\";\r\n      document.querySelector(\".logobadge>img\").style.transition = \"1s\";\r\n      document.querySelector(\".mobilelogo>img\").style.transition = \"1s\";\r\n      document.querySelector(\".nav-link-row\").style.opacity = \"0.5\";\r\n      document.querySelector(\".nav-col\").style.paddingTop = \"1vh\";\r\n    }\r\n  } \r\n \r\n    return (\r\n      <>\r\n      <div className=\"nav-row\">\r\n        <div className=\"mobilelogo\">\r\n          <img src={logo} alt=\"NIT PATNA\" />\r\n        </div>\r\n        <div className=\"nav-col\">\r\n          <h2>NATIONAL INSTITUTE OF TECHNOLOGY PATNA</h2>\r\n          <h4>राष्ट्रीय प्रौद्योगिकी संस्थान, पटना</h4>\r\n        </div>\r\n          <div className=\"nav-link-row\"></div>\r\n\r\n        <div className=\"logobadge\">\r\n          <h4>श्रमोऽनवरत चेष्टाय</h4>\r\n          <img src={logo} alt=\"NIT PATNA\" />\r\n        </div>\r\n          <span className=\"nav-toggle\" onClick={function(){\r\n            var x = document.querySelector(\".nav-sidebar\");\r\n            if (x.style.display === \"none\") {\r\n              x.style.display = \"block\";\r\n            } else {\r\n              x.style.display = \"none\";\r\n            }\r\n          }}><svg width=\"62\" height=\"62\" viewBox=\"0 0 62 62\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n              <g filter=\"url(#filter0_d)\">\r\n                <rect x=\"13\" y=\"13\" width=\"36\" height=\"36\" rx=\"4\" fill=\"white\" />\r\n              </g>\r\n              <line x1=\"20\" y1=\"22.5\" x2=\"42\" y2=\"22.5\" stroke=\"#E47F40\" />\r\n              <line x1=\"20\" y1=\"30.5\" x2=\"42\" y2=\"30.5\" stroke=\"#DB713A\" />\r\n              <line x1=\"20\" y1=\"38.5\" x2=\"42\" y2=\"38.5\" stroke=\"#CE5B30\" />\r\n              <defs>\r\n                <filter id=\"filter0_d\" x=\"0\" y=\"0\" width=\"62\" height=\"62\" filterUnits=\"userSpaceOnUse\" color-interpolation-filters=\"sRGB\">\r\n                  <feFlood flood-opacity=\"0\" result=\"BackgroundImageFix\" />\r\n                  <feColorMatrix in=\"SourceAlpha\" type=\"matrix\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\" />\r\n                  <feOffset />\r\n                  <feGaussianBlur stdDeviation=\"6.5\" />\r\n                  <feColorMatrix type=\"matrix\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.25 0\" />\r\n                  <feBlend mode=\"normal\" in2=\"BackgroundImageFix\" result=\"effect1_dropShadow\" />\r\n                  <feBlend mode=\"normal\" in=\"SourceGraphic\" in2=\"effect1_dropShadow\" result=\"shape\" />\r\n                </filter>\r\n              </defs>\r\n            </svg>\r\n</span>\r\n        <div className=\"nav-sidebar\"></div>\r\n      </div>\r\n      </>\r\n    );\r\n}\r\n\r\nexport default Navbar;","'use strict';\n\nvar KEYWORDS = require('./keywords');\n\nmodule.exports = defineKeywords;\n\n\n/**\n * Defines one or several keywords in ajv instance\n * @param  {Ajv} ajv validator instance\n * @param  {String|Array<String>|undefined} keyword keyword(s) to define\n * @return {Ajv} ajv instance (for chaining)\n */\nfunction defineKeywords(ajv, keyword) {\n  if (Array.isArray(keyword)) {\n    for (var i=0; i<keyword.length; i++)\n      get(keyword[i])(ajv);\n    return ajv;\n  }\n  if (keyword) {\n    get(keyword)(ajv);\n    return ajv;\n  }\n  for (keyword in KEYWORDS) get(keyword)(ajv);\n  return ajv;\n}\n\n\ndefineKeywords.get = get;\n\nfunction get(keyword) {\n  var defFunc = KEYWORDS[keyword];\n  if (!defFunc) throw new Error('Unknown keyword ' + keyword);\n  return defFunc;\n}\n","'use strict';\n\nvar TIME = /^(\\d\\d):(\\d\\d):(\\d\\d)(\\.\\d+)?(z|[+-]\\d\\d:\\d\\d)?$/i;\nvar DATE_TIME_SEPARATOR = /t|\\s/i;\n\nvar COMPARE_FORMATS = {\n  date: compareDate,\n  time: compareTime,\n  'date-time': compareDateTime\n};\n\nvar $dataMetaSchema = {\n  type: 'object',\n  required: [ '$data' ],\n  properties: {\n    $data: {\n      type: 'string',\n      anyOf: [\n        { format: 'relative-json-pointer' },\n        { format: 'json-pointer' }\n      ]\n    }\n  },\n  additionalProperties: false\n};\n\nmodule.exports = function (minMax) {\n  var keyword = 'format' + minMax;\n  return function defFunc(ajv) {\n    defFunc.definition = {\n      type: 'string',\n      inline: require('./dotjs/_formatLimit'),\n      statements: true,\n      errors: 'full',\n      dependencies: ['format'],\n      metaSchema: {\n        anyOf: [\n          {type: 'string'},\n          $dataMetaSchema\n        ]\n      }\n    };\n\n    ajv.addKeyword(keyword, defFunc.definition);\n    ajv.addKeyword('formatExclusive' + minMax, {\n      dependencies: ['format' + minMax],\n      metaSchema: {\n        anyOf: [\n          {type: 'boolean'},\n          $dataMetaSchema\n        ]\n      }\n    });\n    extendFormats(ajv);\n    return ajv;\n  };\n};\n\n\nfunction extendFormats(ajv) {\n  var formats = ajv._formats;\n  for (var name in COMPARE_FORMATS) {\n    var format = formats[name];\n    // the last condition is needed if it's RegExp from another window\n    if (typeof format != 'object' || format instanceof RegExp || !format.validate)\n      format = formats[name] = { validate: format };\n    if (!format.compare)\n      format.compare = COMPARE_FORMATS[name];\n  }\n}\n\n\nfunction compareDate(d1, d2) {\n  if (!(d1 && d2)) return;\n  if (d1 > d2) return 1;\n  if (d1 < d2) return -1;\n  if (d1 === d2) return 0;\n}\n\n\nfunction compareTime(t1, t2) {\n  if (!(t1 && t2)) return;\n  t1 = t1.match(TIME);\n  t2 = t2.match(TIME);\n  if (!(t1 && t2)) return;\n  t1 = t1[1] + t1[2] + t1[3] + (t1[4]||'');\n  t2 = t2[1] + t2[2] + t2[3] + (t2[4]||'');\n  if (t1 > t2) return 1;\n  if (t1 < t2) return -1;\n  if (t1 === t2) return 0;\n}\n\n\nfunction compareDateTime(dt1, dt2) {\n  if (!(dt1 && dt2)) return;\n  dt1 = dt1.split(DATE_TIME_SEPARATOR);\n  dt2 = dt2.split(DATE_TIME_SEPARATOR);\n  var res = compareDate(dt1[0], dt2[0]);\n  if (res === undefined) return;\n  return res || compareTime(dt1[1], dt2[1]);\n}\n","'use strict';\n\nmodule.exports = {\n  metaSchemaRef: metaSchemaRef\n};\n\nvar META_SCHEMA_ID = 'http://json-schema.org/draft-07/schema';\n\nfunction metaSchemaRef(ajv) {\n  var defaultMeta = ajv._opts.defaultMeta;\n  if (typeof defaultMeta == 'string') return { $ref: defaultMeta };\n  if (ajv.getSchema(META_SCHEMA_ID)) return { $ref: META_SCHEMA_ID };\n  console.warn('meta schema not defined');\n  return {};\n}\n","'use strict';\n\nmodule.exports = function defFunc(ajv) {\n  defFunc.definition = {\n    type: 'object',\n    macro: function (schema, parentSchema) {\n      if (!schema) return true;\n      var properties = Object.keys(parentSchema.properties);\n      if (properties.length == 0) return true;\n      return {required: properties};\n    },\n    metaSchema: {type: 'boolean'},\n    dependencies: ['properties']\n  };\n\n  ajv.addKeyword('allRequired', defFunc.definition);\n  return ajv;\n};\n","'use strict';\n\nmodule.exports = function defFunc(ajv) {\n  defFunc.definition = {\n    type: 'object',\n    macro: function (schema) {\n      if (schema.length == 0) return true;\n      if (schema.length == 1) return {required: schema};\n      var schemas = schema.map(function (prop) {\n        return {required: [prop]};\n      });\n      return {anyOf: schemas};\n    },\n    metaSchema: {\n      type: 'array',\n      items: {\n        type: 'string'\n      }\n    }\n  };\n\n  ajv.addKeyword('anyRequired', defFunc.definition);\n  return ajv;\n};\n","'use strict';\n\nvar util = require('./_util');\n\nmodule.exports = function defFunc(ajv) {\n  defFunc.definition = {\n    type: 'object',\n    macro: function (schema) {\n      var schemas = [];\n      for (var pointer in schema)\n        schemas.push(getSchema(pointer, schema[pointer]));\n      return {'allOf': schemas};\n    },\n    metaSchema: {\n      type: 'object',\n      propertyNames: {\n        type: 'string',\n        format: 'json-pointer'\n      },\n      additionalProperties: util.metaSchemaRef(ajv)\n    }\n  };\n\n  ajv.addKeyword('deepProperties', defFunc.definition);\n  return ajv;\n};\n\n\nfunction getSchema(jsonPointer, schema) {\n  var segments = jsonPointer.split('/');\n  var rootSchema = {};\n  var pointerSchema = rootSchema;\n  for (var i=1; i<segments.length; i++) {\n    var segment = segments[i];\n    var isLast = i == segments.length - 1;\n    segment = unescapeJsonPointer(segment);\n    var properties = pointerSchema.properties = {};\n    var items = undefined;\n    if (/[0-9]+/.test(segment)) {\n      var count = +segment;\n      items = pointerSchema.items = [];\n      while (count--) items.push({});\n    }\n    pointerSchema = isLast ? schema : {};\n    properties[segment] = pointerSchema;\n    if (items) items.push(pointerSchema);\n  }\n  return rootSchema;\n}\n\n\nfunction unescapeJsonPointer(str) {\n  return str.replace(/~1/g, '/').replace(/~0/g, '~');\n}\n","'use strict';\n\nmodule.exports = function defFunc(ajv) {\n  defFunc.definition = {\n    type: 'object',\n    inline: function (it, keyword, schema) {\n      var expr = '';\n      for (var i=0; i<schema.length; i++) {\n        if (i) expr += ' && ';\n        expr += '(' + getData(schema[i], it.dataLevel) + ' !== undefined)';\n      }\n      return expr;\n    },\n    metaSchema: {\n      type: 'array',\n      items: {\n        type: 'string',\n        format: 'json-pointer'\n      }\n    }\n  };\n\n  ajv.addKeyword('deepRequired', defFunc.definition);\n  return ajv;\n};\n\n\nfunction getData(jsonPointer, lvl) {\n  var data = 'data' + (lvl || '');\n  if (!jsonPointer) return data;\n\n  var expr = data;\n  var segments = jsonPointer.split('/');\n  for (var i=1; i<segments.length; i++) {\n    var segment = segments[i];\n    data += getProperty(unescapeJsonPointer(segment));\n    expr += ' && ' + data;\n  }\n  return expr;\n}\n\n\nvar IDENTIFIER = /^[a-z$_][a-z$_0-9]*$/i;\nvar INTEGER = /^[0-9]+$/;\nvar SINGLE_QUOTE = /'|\\\\/g;\nfunction getProperty(key) {\n  return INTEGER.test(key)\n          ? '[' + key + ']'\n          : IDENTIFIER.test(key)\n            ? '.' + key\n            : \"['\" + key.replace(SINGLE_QUOTE, '\\\\$&') + \"']\";\n}\n\n\nfunction unescapeJsonPointer(str) {\n  return str.replace(/~1/g, '/').replace(/~0/g, '~');\n}\n","'use strict';\nmodule.exports = function generate__formatLimit(it, $keyword, $ruleType) {\n  var out = ' ';\n  var $lvl = it.level;\n  var $dataLvl = it.dataLevel;\n  var $schema = it.schema[$keyword];\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n  var $breakOnError = !it.opts.allErrors;\n  var $errorKeyword;\n  var $data = 'data' + ($dataLvl || '');\n  var $valid = 'valid' + $lvl;\n  out += 'var ' + ($valid) + ' = undefined;';\n  if (it.opts.format === false) {\n    out += ' ' + ($valid) + ' = true; ';\n    return out;\n  }\n  var $schemaFormat = it.schema.format,\n    $isDataFormat = it.opts.$data && $schemaFormat.$data,\n    $closingBraces = '';\n  if ($isDataFormat) {\n    var $schemaValueFormat = it.util.getData($schemaFormat.$data, $dataLvl, it.dataPathArr),\n      $format = 'format' + $lvl,\n      $compare = 'compare' + $lvl;\n    out += ' var ' + ($format) + ' = formats[' + ($schemaValueFormat) + '] , ' + ($compare) + ' = ' + ($format) + ' && ' + ($format) + '.compare;';\n  } else {\n    var $format = it.formats[$schemaFormat];\n    if (!($format && $format.compare)) {\n      out += '  ' + ($valid) + ' = true; ';\n      return out;\n    }\n    var $compare = 'formats' + it.util.getProperty($schemaFormat) + '.compare';\n  }\n  var $isMax = $keyword == 'formatMaximum',\n    $exclusiveKeyword = 'formatExclusive' + ($isMax ? 'Maximum' : 'Minimum'),\n    $schemaExcl = it.schema[$exclusiveKeyword],\n    $isDataExcl = it.opts.$data && $schemaExcl && $schemaExcl.$data,\n    $op = $isMax ? '<' : '>',\n    $result = 'result' + $lvl;\n  var $isData = it.opts.$data && $schema && $schema.$data,\n    $schemaValue;\n  if ($isData) {\n    out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';\n    $schemaValue = 'schema' + $lvl;\n  } else {\n    $schemaValue = $schema;\n  }\n  if ($isDataExcl) {\n    var $schemaValueExcl = it.util.getData($schemaExcl.$data, $dataLvl, it.dataPathArr),\n      $exclusive = 'exclusive' + $lvl,\n      $opExpr = 'op' + $lvl,\n      $opStr = '\\' + ' + $opExpr + ' + \\'';\n    out += ' var schemaExcl' + ($lvl) + ' = ' + ($schemaValueExcl) + '; ';\n    $schemaValueExcl = 'schemaExcl' + $lvl;\n    out += ' if (typeof ' + ($schemaValueExcl) + ' != \\'boolean\\' && ' + ($schemaValueExcl) + ' !== undefined) { ' + ($valid) + ' = false; ';\n    var $errorKeyword = $exclusiveKeyword;\n    var $$outStack = $$outStack || [];\n    $$outStack.push(out);\n    out = ''; /* istanbul ignore else */\n    if (it.createErrors !== false) {\n      out += ' { keyword: \\'' + ($errorKeyword || '_formatExclusiveLimit') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: {} ';\n      if (it.opts.messages !== false) {\n        out += ' , message: \\'' + ($exclusiveKeyword) + ' should be boolean\\' ';\n      }\n      if (it.opts.verbose) {\n        out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n      }\n      out += ' } ';\n    } else {\n      out += ' {} ';\n    }\n    var __err = out;\n    out = $$outStack.pop();\n    if (!it.compositeRule && $breakOnError) {\n      /* istanbul ignore if */\n      if (it.async) {\n        out += ' throw new ValidationError([' + (__err) + ']); ';\n      } else {\n        out += ' validate.errors = [' + (__err) + ']; return false; ';\n      }\n    } else {\n      out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n    }\n    out += ' }  ';\n    if ($breakOnError) {\n      $closingBraces += '}';\n      out += ' else { ';\n    }\n    if ($isData) {\n      out += ' if (' + ($schemaValue) + ' === undefined) ' + ($valid) + ' = true; else if (typeof ' + ($schemaValue) + ' != \\'string\\') ' + ($valid) + ' = false; else { ';\n      $closingBraces += '}';\n    }\n    if ($isDataFormat) {\n      out += ' if (!' + ($compare) + ') ' + ($valid) + ' = true; else { ';\n      $closingBraces += '}';\n    }\n    out += ' var ' + ($result) + ' = ' + ($compare) + '(' + ($data) + ',  ';\n    if ($isData) {\n      out += '' + ($schemaValue);\n    } else {\n      out += '' + (it.util.toQuotedString($schema));\n    }\n    out += ' ); if (' + ($result) + ' === undefined) ' + ($valid) + ' = false; var ' + ($exclusive) + ' = ' + ($schemaValueExcl) + ' === true; if (' + ($valid) + ' === undefined) { ' + ($valid) + ' = ' + ($exclusive) + ' ? ' + ($result) + ' ' + ($op) + ' 0 : ' + ($result) + ' ' + ($op) + '= 0; } if (!' + ($valid) + ') var op' + ($lvl) + ' = ' + ($exclusive) + ' ? \\'' + ($op) + '\\' : \\'' + ($op) + '=\\';';\n  } else {\n    var $exclusive = $schemaExcl === true,\n      $opStr = $op;\n    if (!$exclusive) $opStr += '=';\n    var $opExpr = '\\'' + $opStr + '\\'';\n    if ($isData) {\n      out += ' if (' + ($schemaValue) + ' === undefined) ' + ($valid) + ' = true; else if (typeof ' + ($schemaValue) + ' != \\'string\\') ' + ($valid) + ' = false; else { ';\n      $closingBraces += '}';\n    }\n    if ($isDataFormat) {\n      out += ' if (!' + ($compare) + ') ' + ($valid) + ' = true; else { ';\n      $closingBraces += '}';\n    }\n    out += ' var ' + ($result) + ' = ' + ($compare) + '(' + ($data) + ',  ';\n    if ($isData) {\n      out += '' + ($schemaValue);\n    } else {\n      out += '' + (it.util.toQuotedString($schema));\n    }\n    out += ' ); if (' + ($result) + ' === undefined) ' + ($valid) + ' = false; if (' + ($valid) + ' === undefined) ' + ($valid) + ' = ' + ($result) + ' ' + ($op);\n    if (!$exclusive) {\n      out += '=';\n    }\n    out += ' 0;';\n  }\n  out += '' + ($closingBraces) + 'if (!' + ($valid) + ') { ';\n  var $errorKeyword = $keyword;\n  var $$outStack = $$outStack || [];\n  $$outStack.push(out);\n  out = ''; /* istanbul ignore else */\n  if (it.createErrors !== false) {\n    out += ' { keyword: \\'' + ($errorKeyword || '_formatLimit') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { comparison: ' + ($opExpr) + ', limit:  ';\n    if ($isData) {\n      out += '' + ($schemaValue);\n    } else {\n      out += '' + (it.util.toQuotedString($schema));\n    }\n    out += ' , exclusive: ' + ($exclusive) + ' } ';\n    if (it.opts.messages !== false) {\n      out += ' , message: \\'should be ' + ($opStr) + ' \"';\n      if ($isData) {\n        out += '\\' + ' + ($schemaValue) + ' + \\'';\n      } else {\n        out += '' + (it.util.escapeQuotes($schema));\n      }\n      out += '\"\\' ';\n    }\n    if (it.opts.verbose) {\n      out += ' , schema:  ';\n      if ($isData) {\n        out += 'validate.schema' + ($schemaPath);\n      } else {\n        out += '' + (it.util.toQuotedString($schema));\n      }\n      out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n    }\n    out += ' } ';\n  } else {\n    out += ' {} ';\n  }\n  var __err = out;\n  out = $$outStack.pop();\n  if (!it.compositeRule && $breakOnError) {\n    /* istanbul ignore if */\n    if (it.async) {\n      out += ' throw new ValidationError([' + (__err) + ']); ';\n    } else {\n      out += ' validate.errors = [' + (__err) + ']; return false; ';\n    }\n  } else {\n    out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n  }\n  out += '}';\n  return out;\n}\n","'use strict';\nmodule.exports = function generate_patternRequired(it, $keyword, $ruleType) {\n  var out = ' ';\n  var $lvl = it.level;\n  var $dataLvl = it.dataLevel;\n  var $schema = it.schema[$keyword];\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n  var $breakOnError = !it.opts.allErrors;\n  var $data = 'data' + ($dataLvl || '');\n  var $valid = 'valid' + $lvl;\n  var $key = 'key' + $lvl,\n    $idx = 'idx' + $lvl,\n    $matched = 'patternMatched' + $lvl,\n    $dataProperties = 'dataProperties' + $lvl,\n    $closingBraces = '',\n    $ownProperties = it.opts.ownProperties;\n  out += 'var ' + ($valid) + ' = true;';\n  if ($ownProperties) {\n    out += ' var ' + ($dataProperties) + ' = undefined;';\n  }\n  var arr1 = $schema;\n  if (arr1) {\n    var $pProperty, i1 = -1,\n      l1 = arr1.length - 1;\n    while (i1 < l1) {\n      $pProperty = arr1[i1 += 1];\n      out += ' var ' + ($matched) + ' = false;  ';\n      if ($ownProperties) {\n        out += ' ' + ($dataProperties) + ' = ' + ($dataProperties) + ' || Object.keys(' + ($data) + '); for (var ' + ($idx) + '=0; ' + ($idx) + '<' + ($dataProperties) + '.length; ' + ($idx) + '++) { var ' + ($key) + ' = ' + ($dataProperties) + '[' + ($idx) + ']; ';\n      } else {\n        out += ' for (var ' + ($key) + ' in ' + ($data) + ') { ';\n      }\n      out += ' ' + ($matched) + ' = ' + (it.usePattern($pProperty)) + '.test(' + ($key) + '); if (' + ($matched) + ') break; } ';\n      var $missingPattern = it.util.escapeQuotes($pProperty);\n      out += ' if (!' + ($matched) + ') { ' + ($valid) + ' = false;  var err =   '; /* istanbul ignore else */\n      if (it.createErrors !== false) {\n        out += ' { keyword: \\'' + ('patternRequired') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { missingPattern: \\'' + ($missingPattern) + '\\' } ';\n        if (it.opts.messages !== false) {\n          out += ' , message: \\'should have property matching pattern \\\\\\'' + ($missingPattern) + '\\\\\\'\\' ';\n        }\n        if (it.opts.verbose) {\n          out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n        }\n        out += ' } ';\n      } else {\n        out += ' {} ';\n      }\n      out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; }   ';\n      if ($breakOnError) {\n        $closingBraces += '}';\n        out += ' else { ';\n      }\n    }\n  }\n  out += '' + ($closingBraces);\n  return out;\n}\n","'use strict';\nmodule.exports = function generate_switch(it, $keyword, $ruleType) {\n  var out = ' ';\n  var $lvl = it.level;\n  var $dataLvl = it.dataLevel;\n  var $schema = it.schema[$keyword];\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n  var $breakOnError = !it.opts.allErrors;\n  var $data = 'data' + ($dataLvl || '');\n  var $valid = 'valid' + $lvl;\n  var $errs = 'errs__' + $lvl;\n  var $it = it.util.copy(it);\n  var $closingBraces = '';\n  $it.level++;\n  var $nextValid = 'valid' + $it.level;\n  var $ifPassed = 'ifPassed' + it.level,\n    $currentBaseId = $it.baseId,\n    $shouldContinue;\n  out += 'var ' + ($ifPassed) + ';';\n  var arr1 = $schema;\n  if (arr1) {\n    var $sch, $caseIndex = -1,\n      l1 = arr1.length - 1;\n    while ($caseIndex < l1) {\n      $sch = arr1[$caseIndex += 1];\n      if ($caseIndex && !$shouldContinue) {\n        out += ' if (!' + ($ifPassed) + ') { ';\n        $closingBraces += '}';\n      }\n      if ($sch.if && it.util.schemaHasRules($sch.if, it.RULES.all)) {\n        out += ' var ' + ($errs) + ' = errors;   ';\n        var $wasComposite = it.compositeRule;\n        it.compositeRule = $it.compositeRule = true;\n        $it.createErrors = false;\n        $it.schema = $sch.if;\n        $it.schemaPath = $schemaPath + '[' + $caseIndex + '].if';\n        $it.errSchemaPath = $errSchemaPath + '/' + $caseIndex + '/if';\n        out += '  ' + (it.validate($it)) + ' ';\n        $it.baseId = $currentBaseId;\n        $it.createErrors = true;\n        it.compositeRule = $it.compositeRule = $wasComposite;\n        out += ' ' + ($ifPassed) + ' = ' + ($nextValid) + '; if (' + ($ifPassed) + ') {  ';\n        if (typeof $sch.then == 'boolean') {\n          if ($sch.then === false) {\n            var $$outStack = $$outStack || [];\n            $$outStack.push(out);\n            out = ''; /* istanbul ignore else */\n            if (it.createErrors !== false) {\n              out += ' { keyword: \\'' + ('switch') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { caseIndex: ' + ($caseIndex) + ' } ';\n              if (it.opts.messages !== false) {\n                out += ' , message: \\'should pass \"switch\" keyword validation\\' ';\n              }\n              if (it.opts.verbose) {\n                out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n              }\n              out += ' } ';\n            } else {\n              out += ' {} ';\n            }\n            var __err = out;\n            out = $$outStack.pop();\n            if (!it.compositeRule && $breakOnError) {\n              /* istanbul ignore if */\n              if (it.async) {\n                out += ' throw new ValidationError([' + (__err) + ']); ';\n              } else {\n                out += ' validate.errors = [' + (__err) + ']; return false; ';\n              }\n            } else {\n              out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n            }\n          }\n          out += ' var ' + ($nextValid) + ' = ' + ($sch.then) + '; ';\n        } else {\n          $it.schema = $sch.then;\n          $it.schemaPath = $schemaPath + '[' + $caseIndex + '].then';\n          $it.errSchemaPath = $errSchemaPath + '/' + $caseIndex + '/then';\n          out += '  ' + (it.validate($it)) + ' ';\n          $it.baseId = $currentBaseId;\n        }\n        out += '  } else {  errors = ' + ($errs) + '; if (vErrors !== null) { if (' + ($errs) + ') vErrors.length = ' + ($errs) + '; else vErrors = null; } } ';\n      } else {\n        out += ' ' + ($ifPassed) + ' = true;  ';\n        if (typeof $sch.then == 'boolean') {\n          if ($sch.then === false) {\n            var $$outStack = $$outStack || [];\n            $$outStack.push(out);\n            out = ''; /* istanbul ignore else */\n            if (it.createErrors !== false) {\n              out += ' { keyword: \\'' + ('switch') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { caseIndex: ' + ($caseIndex) + ' } ';\n              if (it.opts.messages !== false) {\n                out += ' , message: \\'should pass \"switch\" keyword validation\\' ';\n              }\n              if (it.opts.verbose) {\n                out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n              }\n              out += ' } ';\n            } else {\n              out += ' {} ';\n            }\n            var __err = out;\n            out = $$outStack.pop();\n            if (!it.compositeRule && $breakOnError) {\n              /* istanbul ignore if */\n              if (it.async) {\n                out += ' throw new ValidationError([' + (__err) + ']); ';\n              } else {\n                out += ' validate.errors = [' + (__err) + ']; return false; ';\n              }\n            } else {\n              out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n            }\n          }\n          out += ' var ' + ($nextValid) + ' = ' + ($sch.then) + '; ';\n        } else {\n          $it.schema = $sch.then;\n          $it.schemaPath = $schemaPath + '[' + $caseIndex + '].then';\n          $it.errSchemaPath = $errSchemaPath + '/' + $caseIndex + '/then';\n          out += '  ' + (it.validate($it)) + ' ';\n          $it.baseId = $currentBaseId;\n        }\n      }\n      $shouldContinue = $sch.continue\n    }\n  }\n  out += '' + ($closingBraces) + 'var ' + ($valid) + ' = ' + ($nextValid) + '; ';\n  out = it.util.cleanUpCode(out);\n  return out;\n}\n","'use strict';\n\nvar sequences = {};\n\nvar DEFAULTS = {\n  timestamp: function() { return Date.now(); },\n  datetime: function() { return (new Date).toISOString(); },\n  date: function() { return (new Date).toISOString().slice(0, 10); },\n  time: function() { return (new Date).toISOString().slice(11); },\n  random: function() { return Math.random(); },\n  randomint: function (args) {\n    var limit = args && args.max || 2;\n    return function() { return Math.floor(Math.random() * limit); };\n  },\n  seq: function (args) {\n    var name = args && args.name || '';\n    sequences[name] = sequences[name] || 0;\n    return function() { return sequences[name]++; };\n  }\n};\n\nmodule.exports = function defFunc(ajv) {\n  defFunc.definition = {\n    compile: function (schema, parentSchema, it) {\n      var funcs = {};\n\n      for (var key in schema) {\n        var d = schema[key];\n        var func = getDefault(typeof d == 'string' ? d : d.func);\n        funcs[key] = func.length ? func(d.args) : func;\n      }\n\n      return it.opts.useDefaults && !it.compositeRule\n              ? assignDefaults\n              : noop;\n\n      function assignDefaults(data) {\n        for (var prop in schema){\n          if (data[prop] === undefined\n            || (it.opts.useDefaults == 'empty'\n            && (data[prop] === null || data[prop] === '')))\n            data[prop] = funcs[prop]();\n        }\n        return true;\n      }\n\n      function noop() { return true; }\n    },\n    DEFAULTS: DEFAULTS,\n    metaSchema: {\n      type: 'object',\n      additionalProperties: {\n        type: ['string', 'object'],\n        additionalProperties: false,\n        required: ['func', 'args'],\n        properties: {\n          func: { type: 'string' },\n          args: { type: 'object' }\n        }\n      }\n    }\n  };\n\n  ajv.addKeyword('dynamicDefaults', defFunc.definition);\n  return ajv;\n\n  function getDefault(d) {\n    var def = DEFAULTS[d];\n    if (def) return def;\n    throw new Error('invalid \"dynamicDefaults\" keyword property value: ' + d);\n  }\n};\n","'use strict';\n\nmodule.exports = require('./_formatLimit')('Maximum');\n","'use strict';\n\nmodule.exports = require('./_formatLimit')('Minimum');\n","'use strict';\n\nmodule.exports = {\n  'instanceof': require('./instanceof'),\n  range: require('./range'),\n  regexp: require('./regexp'),\n  'typeof': require('./typeof'),\n  dynamicDefaults: require('./dynamicDefaults'),\n  allRequired: require('./allRequired'),\n  anyRequired: require('./anyRequired'),\n  oneRequired: require('./oneRequired'),\n  prohibited: require('./prohibited'),\n  uniqueItemProperties: require('./uniqueItemProperties'),\n  deepProperties: require('./deepProperties'),\n  deepRequired: require('./deepRequired'),\n  formatMinimum: require('./formatMinimum'),\n  formatMaximum: require('./formatMaximum'),\n  patternRequired: require('./patternRequired'),\n  'switch': require('./switch'),\n  select: require('./select'),\n  transform: require('./transform')\n};\n","'use strict';\n\nvar CONSTRUCTORS = {\n  Object: Object,\n  Array: Array,\n  Function: Function,\n  Number: Number,\n  String: String,\n  Date: Date,\n  RegExp: RegExp\n};\n\nmodule.exports = function defFunc(ajv) {\n  /* istanbul ignore else */\n  if (typeof Buffer != 'undefined')\n    CONSTRUCTORS.Buffer = Buffer;\n\n  /* istanbul ignore else */\n  if (typeof Promise != 'undefined')\n    CONSTRUCTORS.Promise = Promise;\n\n  defFunc.definition = {\n    compile: function (schema) {\n      if (typeof schema == 'string') {\n        var Constructor = getConstructor(schema);\n        return function (data) {\n          return data instanceof Constructor;\n        };\n      }\n\n      var constructors = schema.map(getConstructor);\n      return function (data) {\n        for (var i=0; i<constructors.length; i++)\n          if (data instanceof constructors[i]) return true;\n        return false;\n      };\n    },\n    CONSTRUCTORS: CONSTRUCTORS,\n    metaSchema: {\n      anyOf: [\n        { type: 'string' },\n        {\n          type: 'array',\n          items: { type: 'string' }\n        }\n      ]\n    }\n  };\n\n  ajv.addKeyword('instanceof', defFunc.definition);\n  return ajv;\n\n  function getConstructor(c) {\n    var Constructor = CONSTRUCTORS[c];\n    if (Constructor) return Constructor;\n    throw new Error('invalid \"instanceof\" keyword value ' + c);\n  }\n};\n","'use strict';\n\nmodule.exports = function defFunc(ajv) {\n  defFunc.definition = {\n    type: 'object',\n    macro: function (schema) {\n      if (schema.length == 0) return true;\n      if (schema.length == 1) return {required: schema};\n      var schemas = schema.map(function (prop) {\n        return {required: [prop]};\n      });\n      return {oneOf: schemas};\n    },\n    metaSchema: {\n      type: 'array',\n      items: {\n        type: 'string'\n      }\n    }\n  };\n\n  ajv.addKeyword('oneRequired', defFunc.definition);\n  return ajv;\n};\n","'use strict';\n\nmodule.exports = function defFunc(ajv) {\n  defFunc.definition = {\n    type: 'object',\n    inline: require('./dotjs/patternRequired'),\n    statements: true,\n    errors: 'full',\n    metaSchema: {\n      type: 'array',\n      items: {\n        type: 'string',\n        format: 'regex'\n      },\n      uniqueItems: true\n    }\n  };\n\n  ajv.addKeyword('patternRequired', defFunc.definition);\n  return ajv;\n};\n","'use strict';\n\nmodule.exports = function defFunc(ajv) {\n  defFunc.definition = {\n    type: 'object',\n    macro: function (schema) {\n      if (schema.length == 0) return true;\n      if (schema.length == 1) return {not: {required: schema}};\n      var schemas = schema.map(function (prop) {\n        return {required: [prop]};\n      });\n      return {not: {anyOf: schemas}};\n    },\n    metaSchema: {\n      type: 'array',\n      items: {\n        type: 'string'\n      }\n    }\n  };\n\n  ajv.addKeyword('prohibited', defFunc.definition);\n  return ajv;\n};\n","'use strict';\n\nmodule.exports = function defFunc(ajv) {\n  defFunc.definition = {\n    type: 'number',\n    macro: function (schema, parentSchema) {\n      var min = schema[0]\n        , max = schema[1]\n        , exclusive = parentSchema.exclusiveRange;\n\n      validateRangeSchema(min, max, exclusive);\n\n      return exclusive === true\n              ? {exclusiveMinimum: min, exclusiveMaximum: max}\n              : {minimum: min, maximum: max};\n    },\n    metaSchema: {\n      type: 'array',\n      minItems: 2,\n      maxItems: 2,\n      items: { type: 'number' }\n    }\n  };\n\n  ajv.addKeyword('range', defFunc.definition);\n  ajv.addKeyword('exclusiveRange');\n  return ajv;\n\n  function validateRangeSchema(min, max, exclusive) {\n    if (exclusive !== undefined && typeof exclusive != 'boolean')\n      throw new Error('Invalid schema for exclusiveRange keyword, should be boolean');\n\n    if (min > max || (exclusive && min == max))\n      throw new Error('There are no numbers in range');\n  }\n};\n","'use strict';\n\nmodule.exports = function defFunc(ajv) {\n  defFunc.definition = {\n    type: 'string',\n    inline: function (it, keyword, schema) {\n      return getRegExp() + '.test(data' + (it.dataLevel || '') + ')';\n\n      function getRegExp() {\n        try {\n          if (typeof schema == 'object')\n            return new RegExp(schema.pattern, schema.flags);\n\n          var rx = schema.match(/^\\/(.*)\\/([gimuy]*)$/);\n          if (rx) return new RegExp(rx[1], rx[2]);\n          throw new Error('cannot parse string into RegExp');\n        } catch(e) {\n          console.error('regular expression', schema, 'is invalid');\n          throw e;\n        }\n      }\n    },\n    metaSchema: {\n      type: ['string', 'object'],\n      properties: {\n        pattern: { type: 'string' },\n        flags: { type: 'string' }\n      },\n      required: ['pattern'],\n      additionalProperties: false\n    }\n  };\n\n  ajv.addKeyword('regexp', defFunc.definition);\n  return ajv;\n};\n","'use strict';\n\nvar util = require('./_util');\n\nmodule.exports = function defFunc(ajv) {\n  if (!ajv._opts.$data) {\n    console.warn('keyword select requires $data option');\n    return ajv;\n  }\n  var metaSchemaRef = util.metaSchemaRef(ajv);\n  var compiledCaseSchemas = [];\n\n  defFunc.definition = {\n    validate: function v(schema, data, parentSchema) {\n      if (parentSchema.selectCases === undefined)\n        throw new Error('keyword \"selectCases\" is absent');\n      var compiled = getCompiledSchemas(parentSchema, false);\n      var validate = compiled.cases[schema];\n      if (validate === undefined) validate = compiled.default;\n      if (typeof validate == 'boolean') return validate;\n      var valid = validate(data);\n      if (!valid) v.errors = validate.errors;\n      return valid;\n    },\n    $data: true,\n    metaSchema: { type: ['string', 'number', 'boolean', 'null'] }\n  };\n\n  ajv.addKeyword('select', defFunc.definition);\n  ajv.addKeyword('selectCases', {\n    compile: function (schemas, parentSchema) {\n      var compiled = getCompiledSchemas(parentSchema);\n      for (var value in schemas)\n        compiled.cases[value] = compileOrBoolean(schemas[value]);\n      return function() { return true; };\n    },\n    valid: true,\n    metaSchema: {\n      type: 'object',\n      additionalProperties: metaSchemaRef\n    }\n  });\n  ajv.addKeyword('selectDefault', {\n    compile: function (schema, parentSchema) {\n      var compiled = getCompiledSchemas(parentSchema);\n      compiled.default = compileOrBoolean(schema);\n      return function() { return true; };\n    },\n    valid: true,\n    metaSchema: metaSchemaRef\n  });\n  return ajv;\n\n\n  function getCompiledSchemas(parentSchema, create) {\n    var compiled;\n    compiledCaseSchemas.some(function (c) {\n      if (c.parentSchema === parentSchema) {\n        compiled = c;\n        return true;\n      }\n    });\n    if (!compiled && create !== false) {\n      compiled = {\n        parentSchema: parentSchema,\n        cases: {},\n        default: true\n      };\n      compiledCaseSchemas.push(compiled);\n    }\n    return compiled;\n  }\n\n  function compileOrBoolean(schema) {\n    return typeof schema == 'boolean'\n            ? schema\n            : ajv.compile(schema);\n  }\n};\n","'use strict';\n\nvar util = require('./_util');\n\nmodule.exports = function defFunc(ajv) {\n  if (ajv.RULES.keywords.switch && ajv.RULES.keywords.if) return;\n\n  var metaSchemaRef = util.metaSchemaRef(ajv);\n\n  defFunc.definition = {\n    inline: require('./dotjs/switch'),\n    statements: true,\n    errors: 'full',\n    metaSchema: {\n      type: 'array',\n      items: {\n        required: [ 'then' ],\n        properties: {\n          'if': metaSchemaRef,\n          'then': {\n            anyOf: [\n              { type: 'boolean' },\n              metaSchemaRef\n            ]\n          },\n          'continue': { type: 'boolean' }\n        },\n        additionalProperties: false,\n        dependencies: {\n          'continue': [ 'if' ]\n        }\n      }\n    }\n  };\n\n  ajv.addKeyword('switch', defFunc.definition);\n  return ajv;\n};\n","'use strict';\n\nmodule.exports = function defFunc (ajv) {\n  var transform = {\n    trimLeft: function (value) {\n      return value.replace(/^[\\s]+/, '');\n    },\n    trimRight: function (value) {\n      return value.replace(/[\\s]+$/, '');\n    },\n    trim: function (value) {\n      return value.trim();\n    },\n    toLowerCase: function (value) {\n      return value.toLowerCase();\n    },\n    toUpperCase: function (value) {\n      return value.toUpperCase();\n    },\n    toEnumCase: function (value, cfg) {\n      return cfg.hash[makeHashTableKey(value)] || value;\n    }\n  };\n\n  defFunc.definition = {\n    type: 'string',\n    errors: false,\n    modifying: true,\n    valid: true,\n    compile: function (schema, parentSchema) {\n      var cfg;\n\n      if (schema.indexOf('toEnumCase') !== -1) {\n        // build hash table to enum values\n        cfg = {hash: {}};\n\n        // requires `enum` in schema\n        if (!parentSchema.enum)\n          throw new Error('Missing enum. To use `transform:[\"toEnumCase\"]`, `enum:[...]` is required.');\n        for (var i = parentSchema.enum.length; i--; i) {\n          var v = parentSchema.enum[i];\n          if (typeof v !== 'string') continue;\n          var k = makeHashTableKey(v);\n          // requires all `enum` values have unique keys\n          if (cfg.hash[k])\n            throw new Error('Invalid enum uniqueness. To use `transform:[\"toEnumCase\"]`, all values must be unique when case insensitive.');\n          cfg.hash[k] = v;\n        }\n      }\n\n      return function (data, dataPath, object, key) {\n        // skip if value only\n        if (!object) return;\n\n        // apply transform in order provided\n        for (var j = 0, l = schema.length; j < l; j++)\n          data = transform[schema[j]](data, cfg);\n\n        object[key] = data;\n      };\n    },\n    metaSchema: {\n      type: 'array',\n      items: {\n        type: 'string',\n        enum: [\n          'trimLeft', 'trimRight', 'trim',\n          'toLowerCase', 'toUpperCase', 'toEnumCase'\n        ]\n      }\n    }\n  };\n\n  ajv.addKeyword('transform', defFunc.definition);\n  return ajv;\n\n  function makeHashTableKey (value) {\n    return value.toLowerCase();\n  }\n};\n","'use strict';\n\nvar KNOWN_TYPES = ['undefined', 'string', 'number', 'object', 'function', 'boolean', 'symbol'];\n\nmodule.exports = function defFunc(ajv) {\n  defFunc.definition = {\n    inline: function (it, keyword, schema) {\n      var data = 'data' + (it.dataLevel || '');\n      if (typeof schema == 'string') return 'typeof ' + data + ' == \"' + schema + '\"';\n      schema = 'validate.schema' + it.schemaPath + '.' + keyword;\n      return schema + '.indexOf(typeof ' + data + ') >= 0';\n    },\n    metaSchema: {\n      anyOf: [\n        {\n          type: 'string',\n          enum: KNOWN_TYPES\n        },\n        {\n          type: 'array',\n          items: {\n            type: 'string',\n            enum: KNOWN_TYPES\n          }\n        }\n      ]\n    }\n  };\n\n  ajv.addKeyword('typeof', defFunc.definition);\n  return ajv;\n};\n","'use strict';\n\nvar SCALAR_TYPES = ['number', 'integer', 'string', 'boolean', 'null'];\n\nmodule.exports = function defFunc(ajv) {\n  defFunc.definition = {\n    type: 'array',\n    compile: function(keys, parentSchema, it) {\n      var equal = it.util.equal;\n      var scalar = getScalarKeys(keys, parentSchema);\n\n      return function(data) {\n        if (data.length > 1) {\n          for (var k=0; k < keys.length; k++) {\n            var i, key = keys[k];\n            if (scalar[k]) {\n              var hash = {};\n              for (i = data.length; i--;) {\n                if (!data[i] || typeof data[i] != 'object') continue;\n                var prop = data[i][key];\n                if (prop && typeof prop == 'object') continue;\n                if (typeof prop == 'string') prop = '\"' + prop;\n                if (hash[prop]) return false;\n                hash[prop] = true;\n              }\n            } else {\n              for (i = data.length; i--;) {\n                if (!data[i] || typeof data[i] != 'object') continue;\n                for (var j = i; j--;) {\n                  if (data[j] && typeof data[j] == 'object' && equal(data[i][key], data[j][key]))\n                    return false;\n                }\n              }\n            }\n          }\n        }\n        return true;\n      };\n    },\n    metaSchema: {\n      type: 'array',\n      items: {type: 'string'}\n    }\n  };\n\n  ajv.addKeyword('uniqueItemProperties', defFunc.definition);\n  return ajv;\n};\n\n\nfunction getScalarKeys(keys, schema) {\n  return keys.map(function(key) {\n    var properties = schema.items && schema.items.properties;\n    var propType = properties && properties[key] && properties[key].type;\n    return Array.isArray(propType)\n            ? propType.indexOf('object') < 0 && propType.indexOf('array') < 0\n            : SCALAR_TYPES.indexOf(propType) >= 0;\n  });\n}\n","'use strict';\n\nvar compileSchema = require('./compile')\n  , resolve = require('./compile/resolve')\n  , Cache = require('./cache')\n  , SchemaObject = require('./compile/schema_obj')\n  , stableStringify = require('fast-json-stable-stringify')\n  , formats = require('./compile/formats')\n  , rules = require('./compile/rules')\n  , $dataMetaSchema = require('./data')\n  , util = require('./compile/util');\n\nmodule.exports = Ajv;\n\nAjv.prototype.validate = validate;\nAjv.prototype.compile = compile;\nAjv.prototype.addSchema = addSchema;\nAjv.prototype.addMetaSchema = addMetaSchema;\nAjv.prototype.validateSchema = validateSchema;\nAjv.prototype.getSchema = getSchema;\nAjv.prototype.removeSchema = removeSchema;\nAjv.prototype.addFormat = addFormat;\nAjv.prototype.errorsText = errorsText;\n\nAjv.prototype._addSchema = _addSchema;\nAjv.prototype._compile = _compile;\n\nAjv.prototype.compileAsync = require('./compile/async');\nvar customKeyword = require('./keyword');\nAjv.prototype.addKeyword = customKeyword.add;\nAjv.prototype.getKeyword = customKeyword.get;\nAjv.prototype.removeKeyword = customKeyword.remove;\nAjv.prototype.validateKeyword = customKeyword.validate;\n\nvar errorClasses = require('./compile/error_classes');\nAjv.ValidationError = errorClasses.Validation;\nAjv.MissingRefError = errorClasses.MissingRef;\nAjv.$dataMetaSchema = $dataMetaSchema;\n\nvar META_SCHEMA_ID = 'http://json-schema.org/draft-07/schema';\n\nvar META_IGNORE_OPTIONS = [ 'removeAdditional', 'useDefaults', 'coerceTypes', 'strictDefaults' ];\nvar META_SUPPORT_DATA = ['/properties'];\n\n/**\n * Creates validator instance.\n * Usage: `Ajv(opts)`\n * @param {Object} opts optional options\n * @return {Object} ajv instance\n */\nfunction Ajv(opts) {\n  if (!(this instanceof Ajv)) return new Ajv(opts);\n  opts = this._opts = util.copy(opts) || {};\n  setLogger(this);\n  this._schemas = {};\n  this._refs = {};\n  this._fragments = {};\n  this._formats = formats(opts.format);\n\n  this._cache = opts.cache || new Cache;\n  this._loadingSchemas = {};\n  this._compilations = [];\n  this.RULES = rules();\n  this._getId = chooseGetId(opts);\n\n  opts.loopRequired = opts.loopRequired || Infinity;\n  if (opts.errorDataPath == 'property') opts._errorDataPathProperty = true;\n  if (opts.serialize === undefined) opts.serialize = stableStringify;\n  this._metaOpts = getMetaSchemaOptions(this);\n\n  if (opts.formats) addInitialFormats(this);\n  if (opts.keywords) addInitialKeywords(this);\n  addDefaultMetaSchema(this);\n  if (typeof opts.meta == 'object') this.addMetaSchema(opts.meta);\n  if (opts.nullable) this.addKeyword('nullable', {metaSchema: {type: 'boolean'}});\n  addInitialSchemas(this);\n}\n\n\n\n/**\n * Validate data using schema\n * Schema will be compiled and cached (using serialized JSON as key. [fast-json-stable-stringify](https://github.com/epoberezkin/fast-json-stable-stringify) is used to serialize.\n * @this   Ajv\n * @param  {String|Object} schemaKeyRef key, ref or schema object\n * @param  {Any} data to be validated\n * @return {Boolean} validation result. Errors from the last validation will be available in `ajv.errors` (and also in compiled schema: `schema.errors`).\n */\nfunction validate(schemaKeyRef, data) {\n  var v;\n  if (typeof schemaKeyRef == 'string') {\n    v = this.getSchema(schemaKeyRef);\n    if (!v) throw new Error('no schema with key or ref \"' + schemaKeyRef + '\"');\n  } else {\n    var schemaObj = this._addSchema(schemaKeyRef);\n    v = schemaObj.validate || this._compile(schemaObj);\n  }\n\n  var valid = v(data);\n  if (v.$async !== true) this.errors = v.errors;\n  return valid;\n}\n\n\n/**\n * Create validating function for passed schema.\n * @this   Ajv\n * @param  {Object} schema schema object\n * @param  {Boolean} _meta true if schema is a meta-schema. Used internally to compile meta schemas of custom keywords.\n * @return {Function} validating function\n */\nfunction compile(schema, _meta) {\n  var schemaObj = this._addSchema(schema, undefined, _meta);\n  return schemaObj.validate || this._compile(schemaObj);\n}\n\n\n/**\n * Adds schema to the instance.\n * @this   Ajv\n * @param {Object|Array} schema schema or array of schemas. If array is passed, `key` and other parameters will be ignored.\n * @param {String} key Optional schema key. Can be passed to `validate` method instead of schema object or id/ref. One schema per instance can have empty `id` and `key`.\n * @param {Boolean} _skipValidation true to skip schema validation. Used internally, option validateSchema should be used instead.\n * @param {Boolean} _meta true if schema is a meta-schema. Used internally, addMetaSchema should be used instead.\n * @return {Ajv} this for method chaining\n */\nfunction addSchema(schema, key, _skipValidation, _meta) {\n  if (Array.isArray(schema)){\n    for (var i=0; i<schema.length; i++) this.addSchema(schema[i], undefined, _skipValidation, _meta);\n    return this;\n  }\n  var id = this._getId(schema);\n  if (id !== undefined && typeof id != 'string')\n    throw new Error('schema id must be string');\n  key = resolve.normalizeId(key || id);\n  checkUnique(this, key);\n  this._schemas[key] = this._addSchema(schema, _skipValidation, _meta, true);\n  return this;\n}\n\n\n/**\n * Add schema that will be used to validate other schemas\n * options in META_IGNORE_OPTIONS are alway set to false\n * @this   Ajv\n * @param {Object} schema schema object\n * @param {String} key optional schema key\n * @param {Boolean} skipValidation true to skip schema validation, can be used to override validateSchema option for meta-schema\n * @return {Ajv} this for method chaining\n */\nfunction addMetaSchema(schema, key, skipValidation) {\n  this.addSchema(schema, key, skipValidation, true);\n  return this;\n}\n\n\n/**\n * Validate schema\n * @this   Ajv\n * @param {Object} schema schema to validate\n * @param {Boolean} throwOrLogError pass true to throw (or log) an error if invalid\n * @return {Boolean} true if schema is valid\n */\nfunction validateSchema(schema, throwOrLogError) {\n  var $schema = schema.$schema;\n  if ($schema !== undefined && typeof $schema != 'string')\n    throw new Error('$schema must be a string');\n  $schema = $schema || this._opts.defaultMeta || defaultMeta(this);\n  if (!$schema) {\n    this.logger.warn('meta-schema not available');\n    this.errors = null;\n    return true;\n  }\n  var valid = this.validate($schema, schema);\n  if (!valid && throwOrLogError) {\n    var message = 'schema is invalid: ' + this.errorsText();\n    if (this._opts.validateSchema == 'log') this.logger.error(message);\n    else throw new Error(message);\n  }\n  return valid;\n}\n\n\nfunction defaultMeta(self) {\n  var meta = self._opts.meta;\n  self._opts.defaultMeta = typeof meta == 'object'\n                            ? self._getId(meta) || meta\n                            : self.getSchema(META_SCHEMA_ID)\n                              ? META_SCHEMA_ID\n                              : undefined;\n  return self._opts.defaultMeta;\n}\n\n\n/**\n * Get compiled schema from the instance by `key` or `ref`.\n * @this   Ajv\n * @param  {String} keyRef `key` that was passed to `addSchema` or full schema reference (`schema.id` or resolved id).\n * @return {Function} schema validating function (with property `schema`).\n */\nfunction getSchema(keyRef) {\n  var schemaObj = _getSchemaObj(this, keyRef);\n  switch (typeof schemaObj) {\n    case 'object': return schemaObj.validate || this._compile(schemaObj);\n    case 'string': return this.getSchema(schemaObj);\n    case 'undefined': return _getSchemaFragment(this, keyRef);\n  }\n}\n\n\nfunction _getSchemaFragment(self, ref) {\n  var res = resolve.schema.call(self, { schema: {} }, ref);\n  if (res) {\n    var schema = res.schema\n      , root = res.root\n      , baseId = res.baseId;\n    var v = compileSchema.call(self, schema, root, undefined, baseId);\n    self._fragments[ref] = new SchemaObject({\n      ref: ref,\n      fragment: true,\n      schema: schema,\n      root: root,\n      baseId: baseId,\n      validate: v\n    });\n    return v;\n  }\n}\n\n\nfunction _getSchemaObj(self, keyRef) {\n  keyRef = resolve.normalizeId(keyRef);\n  return self._schemas[keyRef] || self._refs[keyRef] || self._fragments[keyRef];\n}\n\n\n/**\n * Remove cached schema(s).\n * If no parameter is passed all schemas but meta-schemas are removed.\n * If RegExp is passed all schemas with key/id matching pattern but meta-schemas are removed.\n * Even if schema is referenced by other schemas it still can be removed as other schemas have local references.\n * @this   Ajv\n * @param  {String|Object|RegExp} schemaKeyRef key, ref, pattern to match key/ref or schema object\n * @return {Ajv} this for method chaining\n */\nfunction removeSchema(schemaKeyRef) {\n  if (schemaKeyRef instanceof RegExp) {\n    _removeAllSchemas(this, this._schemas, schemaKeyRef);\n    _removeAllSchemas(this, this._refs, schemaKeyRef);\n    return this;\n  }\n  switch (typeof schemaKeyRef) {\n    case 'undefined':\n      _removeAllSchemas(this, this._schemas);\n      _removeAllSchemas(this, this._refs);\n      this._cache.clear();\n      return this;\n    case 'string':\n      var schemaObj = _getSchemaObj(this, schemaKeyRef);\n      if (schemaObj) this._cache.del(schemaObj.cacheKey);\n      delete this._schemas[schemaKeyRef];\n      delete this._refs[schemaKeyRef];\n      return this;\n    case 'object':\n      var serialize = this._opts.serialize;\n      var cacheKey = serialize ? serialize(schemaKeyRef) : schemaKeyRef;\n      this._cache.del(cacheKey);\n      var id = this._getId(schemaKeyRef);\n      if (id) {\n        id = resolve.normalizeId(id);\n        delete this._schemas[id];\n        delete this._refs[id];\n      }\n  }\n  return this;\n}\n\n\nfunction _removeAllSchemas(self, schemas, regex) {\n  for (var keyRef in schemas) {\n    var schemaObj = schemas[keyRef];\n    if (!schemaObj.meta && (!regex || regex.test(keyRef))) {\n      self._cache.del(schemaObj.cacheKey);\n      delete schemas[keyRef];\n    }\n  }\n}\n\n\n/* @this   Ajv */\nfunction _addSchema(schema, skipValidation, meta, shouldAddSchema) {\n  if (typeof schema != 'object' && typeof schema != 'boolean')\n    throw new Error('schema should be object or boolean');\n  var serialize = this._opts.serialize;\n  var cacheKey = serialize ? serialize(schema) : schema;\n  var cached = this._cache.get(cacheKey);\n  if (cached) return cached;\n\n  shouldAddSchema = shouldAddSchema || this._opts.addUsedSchema !== false;\n\n  var id = resolve.normalizeId(this._getId(schema));\n  if (id && shouldAddSchema) checkUnique(this, id);\n\n  var willValidate = this._opts.validateSchema !== false && !skipValidation;\n  var recursiveMeta;\n  if (willValidate && !(recursiveMeta = id && id == resolve.normalizeId(schema.$schema)))\n    this.validateSchema(schema, true);\n\n  var localRefs = resolve.ids.call(this, schema);\n\n  var schemaObj = new SchemaObject({\n    id: id,\n    schema: schema,\n    localRefs: localRefs,\n    cacheKey: cacheKey,\n    meta: meta\n  });\n\n  if (id[0] != '#' && shouldAddSchema) this._refs[id] = schemaObj;\n  this._cache.put(cacheKey, schemaObj);\n\n  if (willValidate && recursiveMeta) this.validateSchema(schema, true);\n\n  return schemaObj;\n}\n\n\n/* @this   Ajv */\nfunction _compile(schemaObj, root) {\n  if (schemaObj.compiling) {\n    schemaObj.validate = callValidate;\n    callValidate.schema = schemaObj.schema;\n    callValidate.errors = null;\n    callValidate.root = root ? root : callValidate;\n    if (schemaObj.schema.$async === true)\n      callValidate.$async = true;\n    return callValidate;\n  }\n  schemaObj.compiling = true;\n\n  var currentOpts;\n  if (schemaObj.meta) {\n    currentOpts = this._opts;\n    this._opts = this._metaOpts;\n  }\n\n  var v;\n  try { v = compileSchema.call(this, schemaObj.schema, root, schemaObj.localRefs); }\n  catch(e) {\n    delete schemaObj.validate;\n    throw e;\n  }\n  finally {\n    schemaObj.compiling = false;\n    if (schemaObj.meta) this._opts = currentOpts;\n  }\n\n  schemaObj.validate = v;\n  schemaObj.refs = v.refs;\n  schemaObj.refVal = v.refVal;\n  schemaObj.root = v.root;\n  return v;\n\n\n  /* @this   {*} - custom context, see passContext option */\n  function callValidate() {\n    /* jshint validthis: true */\n    var _validate = schemaObj.validate;\n    var result = _validate.apply(this, arguments);\n    callValidate.errors = _validate.errors;\n    return result;\n  }\n}\n\n\nfunction chooseGetId(opts) {\n  switch (opts.schemaId) {\n    case 'auto': return _get$IdOrId;\n    case 'id': return _getId;\n    default: return _get$Id;\n  }\n}\n\n/* @this   Ajv */\nfunction _getId(schema) {\n  if (schema.$id) this.logger.warn('schema $id ignored', schema.$id);\n  return schema.id;\n}\n\n/* @this   Ajv */\nfunction _get$Id(schema) {\n  if (schema.id) this.logger.warn('schema id ignored', schema.id);\n  return schema.$id;\n}\n\n\nfunction _get$IdOrId(schema) {\n  if (schema.$id && schema.id && schema.$id != schema.id)\n    throw new Error('schema $id is different from id');\n  return schema.$id || schema.id;\n}\n\n\n/**\n * Convert array of error message objects to string\n * @this   Ajv\n * @param  {Array<Object>} errors optional array of validation errors, if not passed errors from the instance are used.\n * @param  {Object} options optional options with properties `separator` and `dataVar`.\n * @return {String} human readable string with all errors descriptions\n */\nfunction errorsText(errors, options) {\n  errors = errors || this.errors;\n  if (!errors) return 'No errors';\n  options = options || {};\n  var separator = options.separator === undefined ? ', ' : options.separator;\n  var dataVar = options.dataVar === undefined ? 'data' : options.dataVar;\n\n  var text = '';\n  for (var i=0; i<errors.length; i++) {\n    var e = errors[i];\n    if (e) text += dataVar + e.dataPath + ' ' + e.message + separator;\n  }\n  return text.slice(0, -separator.length);\n}\n\n\n/**\n * Add custom format\n * @this   Ajv\n * @param {String} name format name\n * @param {String|RegExp|Function} format string is converted to RegExp; function should return boolean (true when valid)\n * @return {Ajv} this for method chaining\n */\nfunction addFormat(name, format) {\n  if (typeof format == 'string') format = new RegExp(format);\n  this._formats[name] = format;\n  return this;\n}\n\n\nfunction addDefaultMetaSchema(self) {\n  var $dataSchema;\n  if (self._opts.$data) {\n    $dataSchema = require('./refs/data.json');\n    self.addMetaSchema($dataSchema, $dataSchema.$id, true);\n  }\n  if (self._opts.meta === false) return;\n  var metaSchema = require('./refs/json-schema-draft-07.json');\n  if (self._opts.$data) metaSchema = $dataMetaSchema(metaSchema, META_SUPPORT_DATA);\n  self.addMetaSchema(metaSchema, META_SCHEMA_ID, true);\n  self._refs['http://json-schema.org/schema'] = META_SCHEMA_ID;\n}\n\n\nfunction addInitialSchemas(self) {\n  var optsSchemas = self._opts.schemas;\n  if (!optsSchemas) return;\n  if (Array.isArray(optsSchemas)) self.addSchema(optsSchemas);\n  else for (var key in optsSchemas) self.addSchema(optsSchemas[key], key);\n}\n\n\nfunction addInitialFormats(self) {\n  for (var name in self._opts.formats) {\n    var format = self._opts.formats[name];\n    self.addFormat(name, format);\n  }\n}\n\n\nfunction addInitialKeywords(self) {\n  for (var name in self._opts.keywords) {\n    var keyword = self._opts.keywords[name];\n    self.addKeyword(name, keyword);\n  }\n}\n\n\nfunction checkUnique(self, id) {\n  if (self._schemas[id] || self._refs[id])\n    throw new Error('schema with key or id \"' + id + '\" already exists');\n}\n\n\nfunction getMetaSchemaOptions(self) {\n  var metaOpts = util.copy(self._opts);\n  for (var i=0; i<META_IGNORE_OPTIONS.length; i++)\n    delete metaOpts[META_IGNORE_OPTIONS[i]];\n  return metaOpts;\n}\n\n\nfunction setLogger(self) {\n  var logger = self._opts.logger;\n  if (logger === false) {\n    self.logger = {log: noop, warn: noop, error: noop};\n  } else {\n    if (logger === undefined) logger = console;\n    if (!(typeof logger == 'object' && logger.log && logger.warn && logger.error))\n      throw new Error('logger must implement log, warn and error methods');\n    self.logger = logger;\n  }\n}\n\n\nfunction noop() {}\n","'use strict';\n\n\nvar Cache = module.exports = function Cache() {\n  this._cache = {};\n};\n\n\nCache.prototype.put = function Cache_put(key, value) {\n  this._cache[key] = value;\n};\n\n\nCache.prototype.get = function Cache_get(key) {\n  return this._cache[key];\n};\n\n\nCache.prototype.del = function Cache_del(key) {\n  delete this._cache[key];\n};\n\n\nCache.prototype.clear = function Cache_clear() {\n  this._cache = {};\n};\n","'use strict';\n\nvar MissingRefError = require('./error_classes').MissingRef;\n\nmodule.exports = compileAsync;\n\n\n/**\n * Creates validating function for passed schema with asynchronous loading of missing schemas.\n * `loadSchema` option should be a function that accepts schema uri and returns promise that resolves with the schema.\n * @this  Ajv\n * @param {Object}   schema schema object\n * @param {Boolean}  meta optional true to compile meta-schema; this parameter can be skipped\n * @param {Function} callback an optional node-style callback, it is called with 2 parameters: error (or null) and validating function.\n * @return {Promise} promise that resolves with a validating function.\n */\nfunction compileAsync(schema, meta, callback) {\n  /* eslint no-shadow: 0 */\n  /* global Promise */\n  /* jshint validthis: true */\n  var self = this;\n  if (typeof this._opts.loadSchema != 'function')\n    throw new Error('options.loadSchema should be a function');\n\n  if (typeof meta == 'function') {\n    callback = meta;\n    meta = undefined;\n  }\n\n  var p = loadMetaSchemaOf(schema).then(function () {\n    var schemaObj = self._addSchema(schema, undefined, meta);\n    return schemaObj.validate || _compileAsync(schemaObj);\n  });\n\n  if (callback) {\n    p.then(\n      function(v) { callback(null, v); },\n      callback\n    );\n  }\n\n  return p;\n\n\n  function loadMetaSchemaOf(sch) {\n    var $schema = sch.$schema;\n    return $schema && !self.getSchema($schema)\n            ? compileAsync.call(self, { $ref: $schema }, true)\n            : Promise.resolve();\n  }\n\n\n  function _compileAsync(schemaObj) {\n    try { return self._compile(schemaObj); }\n    catch(e) {\n      if (e instanceof MissingRefError) return loadMissingSchema(e);\n      throw e;\n    }\n\n\n    function loadMissingSchema(e) {\n      var ref = e.missingSchema;\n      if (added(ref)) throw new Error('Schema ' + ref + ' is loaded but ' + e.missingRef + ' cannot be resolved');\n\n      var schemaPromise = self._loadingSchemas[ref];\n      if (!schemaPromise) {\n        schemaPromise = self._loadingSchemas[ref] = self._opts.loadSchema(ref);\n        schemaPromise.then(removePromise, removePromise);\n      }\n\n      return schemaPromise.then(function (sch) {\n        if (!added(ref)) {\n          return loadMetaSchemaOf(sch).then(function () {\n            if (!added(ref)) self.addSchema(sch, ref, undefined, meta);\n          });\n        }\n      }).then(function() {\n        return _compileAsync(schemaObj);\n      });\n\n      function removePromise() {\n        delete self._loadingSchemas[ref];\n      }\n\n      function added(ref) {\n        return self._refs[ref] || self._schemas[ref];\n      }\n    }\n  }\n}\n","'use strict';\n\nvar resolve = require('./resolve');\n\nmodule.exports = {\n  Validation: errorSubclass(ValidationError),\n  MissingRef: errorSubclass(MissingRefError)\n};\n\n\nfunction ValidationError(errors) {\n  this.message = 'validation failed';\n  this.errors = errors;\n  this.ajv = this.validation = true;\n}\n\n\nMissingRefError.message = function (baseId, ref) {\n  return 'can\\'t resolve reference ' + ref + ' from id ' + baseId;\n};\n\n\nfunction MissingRefError(baseId, ref, message) {\n  this.message = message || MissingRefError.message(baseId, ref);\n  this.missingRef = resolve.url(baseId, ref);\n  this.missingSchema = resolve.normalizeId(resolve.fullPath(this.missingRef));\n}\n\n\nfunction errorSubclass(Subclass) {\n  Subclass.prototype = Object.create(Error.prototype);\n  Subclass.prototype.constructor = Subclass;\n  return Subclass;\n}\n","'use strict';\n\nvar util = require('./util');\n\nvar DATE = /^(\\d\\d\\d\\d)-(\\d\\d)-(\\d\\d)$/;\nvar DAYS = [0,31,28,31,30,31,30,31,31,30,31,30,31];\nvar TIME = /^(\\d\\d):(\\d\\d):(\\d\\d)(\\.\\d+)?(z|[+-]\\d\\d(?::?\\d\\d)?)?$/i;\nvar HOSTNAME = /^(?=.{1,253}\\.?$)[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\\.[a-z0-9](?:[-0-9a-z]{0,61}[0-9a-z])?)*\\.?$/i;\nvar URI = /^(?:[a-z][a-z0-9+\\-.]*:)(?:\\/?\\/(?:(?:[a-z0-9\\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\\.[a-z0-9\\-._~!$&'()*+,;=:]+)\\]|(?:(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)|(?:[a-z0-9\\-._~!$&'()*+,;=]|%[0-9a-f]{2})*)(?::\\d*)?(?:\\/(?:[a-z0-9\\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*|\\/(?:(?:[a-z0-9\\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\\/(?:[a-z0-9\\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\\/(?:[a-z0-9\\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)(?:\\?(?:[a-z0-9\\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i;\nvar URIREF = /^(?:[a-z][a-z0-9+\\-.]*:)?(?:\\/?\\/(?:(?:[a-z0-9\\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\\.[a-z0-9\\-._~!$&'()*+,;=:]+)\\]|(?:(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)|(?:[a-z0-9\\-._~!$&'\"()*+,;=]|%[0-9a-f]{2})*)(?::\\d*)?(?:\\/(?:[a-z0-9\\-._~!$&'\"()*+,;=:@]|%[0-9a-f]{2})*)*|\\/(?:(?:[a-z0-9\\-._~!$&'\"()*+,;=:@]|%[0-9a-f]{2})+(?:\\/(?:[a-z0-9\\-._~!$&'\"()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\\-._~!$&'\"()*+,;=:@]|%[0-9a-f]{2})+(?:\\/(?:[a-z0-9\\-._~!$&'\"()*+,;=:@]|%[0-9a-f]{2})*)*)?(?:\\?(?:[a-z0-9\\-._~!$&'\"()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\\-._~!$&'\"()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i;\n// uri-template: https://tools.ietf.org/html/rfc6570\nvar URITEMPLATE = /^(?:(?:[^\\x00-\\x20\"'<>%\\\\^`{|}]|%[0-9a-f]{2})|\\{[+#./;?&=,!@|]?(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\\*)?(?:,(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\\*)?)*\\})*$/i;\n// For the source: https://gist.github.com/dperini/729294\n// For test cases: https://mathiasbynens.be/demo/url-regex\n// @todo Delete current URL in favour of the commented out URL rule when this issue is fixed https://github.com/eslint/eslint/issues/7983.\n// var URL = /^(?:(?:https?|ftp):\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!10(?:\\.\\d{1,3}){3})(?!127(?:\\.\\d{1,3}){3})(?!169\\.254(?:\\.\\d{1,3}){2})(?!192\\.168(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u{00a1}-\\u{ffff}0-9]+-?)*[a-z\\u{00a1}-\\u{ffff}0-9]+)(?:\\.(?:[a-z\\u{00a1}-\\u{ffff}0-9]+-?)*[a-z\\u{00a1}-\\u{ffff}0-9]+)*(?:\\.(?:[a-z\\u{00a1}-\\u{ffff}]{2,})))(?::\\d{2,5})?(?:\\/[^\\s]*)?$/iu;\nvar URL = /^(?:(?:http[s\\u017F]?|ftp):\\/\\/)(?:(?:[\\0-\\x08\\x0E-\\x1F!-\\x9F\\xA1-\\u167F\\u1681-\\u1FFF\\u200B-\\u2027\\u202A-\\u202E\\u2030-\\u205E\\u2060-\\u2FFF\\u3001-\\uD7FF\\uE000-\\uFEFE\\uFF00-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])+(?::(?:[\\0-\\x08\\x0E-\\x1F!-\\x9F\\xA1-\\u167F\\u1681-\\u1FFF\\u200B-\\u2027\\u202A-\\u202E\\u2030-\\u205E\\u2060-\\u2FFF\\u3001-\\uD7FF\\uE000-\\uFEFE\\uFF00-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])*)?@)?(?:(?!10(?:\\.[0-9]{1,3}){3})(?!127(?:\\.[0-9]{1,3}){3})(?!169\\.254(?:\\.[0-9]{1,3}){2})(?!192\\.168(?:\\.[0-9]{1,3}){2})(?!172\\.(?:1[6-9]|2[0-9]|3[01])(?:\\.[0-9]{1,3}){2})(?:[1-9][0-9]?|1[0-9][0-9]|2[01][0-9]|22[0-3])(?:\\.(?:1?[0-9]{1,2}|2[0-4][0-9]|25[0-5])){2}(?:\\.(?:[1-9][0-9]?|1[0-9][0-9]|2[0-4][0-9]|25[0-4]))|(?:(?:(?:[0-9KSa-z\\xA1-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])+-?)*(?:[0-9KSa-z\\xA1-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])+)(?:\\.(?:(?:[0-9KSa-z\\xA1-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])+-?)*(?:[0-9KSa-z\\xA1-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])+)*(?:\\.(?:(?:[KSa-z\\xA1-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]){2,})))(?::[0-9]{2,5})?(?:\\/(?:[\\0-\\x08\\x0E-\\x1F!-\\x9F\\xA1-\\u167F\\u1681-\\u1FFF\\u200B-\\u2027\\u202A-\\u202E\\u2030-\\u205E\\u2060-\\u2FFF\\u3001-\\uD7FF\\uE000-\\uFEFE\\uFF00-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])*)?$/i;\nvar UUID = /^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i;\nvar JSON_POINTER = /^(?:\\/(?:[^~/]|~0|~1)*)*$/;\nvar JSON_POINTER_URI_FRAGMENT = /^#(?:\\/(?:[a-z0-9_\\-.!$&'()*+,;:=@]|%[0-9a-f]{2}|~0|~1)*)*$/i;\nvar RELATIVE_JSON_POINTER = /^(?:0|[1-9][0-9]*)(?:#|(?:\\/(?:[^~/]|~0|~1)*)*)$/;\n\n\nmodule.exports = formats;\n\nfunction formats(mode) {\n  mode = mode == 'full' ? 'full' : 'fast';\n  return util.copy(formats[mode]);\n}\n\n\nformats.fast = {\n  // date: http://tools.ietf.org/html/rfc3339#section-5.6\n  date: /^\\d\\d\\d\\d-[0-1]\\d-[0-3]\\d$/,\n  // date-time: http://tools.ietf.org/html/rfc3339#section-5.6\n  time: /^(?:[0-2]\\d:[0-5]\\d:[0-5]\\d|23:59:60)(?:\\.\\d+)?(?:z|[+-]\\d\\d(?::?\\d\\d)?)?$/i,\n  'date-time': /^\\d\\d\\d\\d-[0-1]\\d-[0-3]\\d[t\\s](?:[0-2]\\d:[0-5]\\d:[0-5]\\d|23:59:60)(?:\\.\\d+)?(?:z|[+-]\\d\\d(?::?\\d\\d)?)$/i,\n  // uri: https://github.com/mafintosh/is-my-json-valid/blob/master/formats.js\n  uri: /^(?:[a-z][a-z0-9+-.]*:)(?:\\/?\\/)?[^\\s]*$/i,\n  'uri-reference': /^(?:(?:[a-z][a-z0-9+-.]*:)?\\/?\\/)?(?:[^\\\\\\s#][^\\s#]*)?(?:#[^\\\\\\s]*)?$/i,\n  'uri-template': URITEMPLATE,\n  url: URL,\n  // email (sources from jsen validator):\n  // http://stackoverflow.com/questions/201323/using-a-regular-expression-to-validate-an-email-address#answer-8829363\n  // http://www.w3.org/TR/html5/forms.html#valid-e-mail-address (search for 'willful violation')\n  email: /^[a-z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\\.[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?)*$/i,\n  hostname: HOSTNAME,\n  // optimized https://www.safaribooksonline.com/library/view/regular-expressions-cookbook/9780596802837/ch07s16.html\n  ipv4: /^(?:(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)$/,\n  // optimized http://stackoverflow.com/questions/53497/regular-expression-that-matches-valid-ipv6-addresses\n  ipv6: /^\\s*(?:(?:(?:[0-9a-f]{1,4}:){7}(?:[0-9a-f]{1,4}|:))|(?:(?:[0-9a-f]{1,4}:){6}(?::[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){5}(?:(?:(?::[0-9a-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){4}(?:(?:(?::[0-9a-f]{1,4}){1,3})|(?:(?::[0-9a-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){3}(?:(?:(?::[0-9a-f]{1,4}){1,4})|(?:(?::[0-9a-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){2}(?:(?:(?::[0-9a-f]{1,4}){1,5})|(?:(?::[0-9a-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){1}(?:(?:(?::[0-9a-f]{1,4}){1,6})|(?:(?::[0-9a-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(?::(?:(?:(?::[0-9a-f]{1,4}){1,7})|(?:(?::[0-9a-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(?:%.+)?\\s*$/i,\n  regex: regex,\n  // uuid: http://tools.ietf.org/html/rfc4122\n  uuid: UUID,\n  // JSON-pointer: https://tools.ietf.org/html/rfc6901\n  // uri fragment: https://tools.ietf.org/html/rfc3986#appendix-A\n  'json-pointer': JSON_POINTER,\n  'json-pointer-uri-fragment': JSON_POINTER_URI_FRAGMENT,\n  // relative JSON-pointer: http://tools.ietf.org/html/draft-luff-relative-json-pointer-00\n  'relative-json-pointer': RELATIVE_JSON_POINTER\n};\n\n\nformats.full = {\n  date: date,\n  time: time,\n  'date-time': date_time,\n  uri: uri,\n  'uri-reference': URIREF,\n  'uri-template': URITEMPLATE,\n  url: URL,\n  email: /^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i,\n  hostname: HOSTNAME,\n  ipv4: /^(?:(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)$/,\n  ipv6: /^\\s*(?:(?:(?:[0-9a-f]{1,4}:){7}(?:[0-9a-f]{1,4}|:))|(?:(?:[0-9a-f]{1,4}:){6}(?::[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){5}(?:(?:(?::[0-9a-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){4}(?:(?:(?::[0-9a-f]{1,4}){1,3})|(?:(?::[0-9a-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){3}(?:(?:(?::[0-9a-f]{1,4}){1,4})|(?:(?::[0-9a-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){2}(?:(?:(?::[0-9a-f]{1,4}){1,5})|(?:(?::[0-9a-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){1}(?:(?:(?::[0-9a-f]{1,4}){1,6})|(?:(?::[0-9a-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(?::(?:(?:(?::[0-9a-f]{1,4}){1,7})|(?:(?::[0-9a-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(?:%.+)?\\s*$/i,\n  regex: regex,\n  uuid: UUID,\n  'json-pointer': JSON_POINTER,\n  'json-pointer-uri-fragment': JSON_POINTER_URI_FRAGMENT,\n  'relative-json-pointer': RELATIVE_JSON_POINTER\n};\n\n\nfunction isLeapYear(year) {\n  // https://tools.ietf.org/html/rfc3339#appendix-C\n  return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);\n}\n\n\nfunction date(str) {\n  // full-date from http://tools.ietf.org/html/rfc3339#section-5.6\n  var matches = str.match(DATE);\n  if (!matches) return false;\n\n  var year = +matches[1];\n  var month = +matches[2];\n  var day = +matches[3];\n\n  return month >= 1 && month <= 12 && day >= 1 &&\n          day <= (month == 2 && isLeapYear(year) ? 29 : DAYS[month]);\n}\n\n\nfunction time(str, full) {\n  var matches = str.match(TIME);\n  if (!matches) return false;\n\n  var hour = matches[1];\n  var minute = matches[2];\n  var second = matches[3];\n  var timeZone = matches[5];\n  return ((hour <= 23 && minute <= 59 && second <= 59) ||\n          (hour == 23 && minute == 59 && second == 60)) &&\n         (!full || timeZone);\n}\n\n\nvar DATE_TIME_SEPARATOR = /t|\\s/i;\nfunction date_time(str) {\n  // http://tools.ietf.org/html/rfc3339#section-5.6\n  var dateTime = str.split(DATE_TIME_SEPARATOR);\n  return dateTime.length == 2 && date(dateTime[0]) && time(dateTime[1], true);\n}\n\n\nvar NOT_URI_FRAGMENT = /\\/|:/;\nfunction uri(str) {\n  // http://jmrware.com/articles/2009/uri_regexp/URI_regex.html + optional protocol + required \".\"\n  return NOT_URI_FRAGMENT.test(str) && URI.test(str);\n}\n\n\nvar Z_ANCHOR = /[^\\\\]\\\\Z/;\nfunction regex(str) {\n  if (Z_ANCHOR.test(str)) return false;\n  try {\n    new RegExp(str);\n    return true;\n  } catch(e) {\n    return false;\n  }\n}\n","'use strict';\n\nvar resolve = require('./resolve')\n  , util = require('./util')\n  , errorClasses = require('./error_classes')\n  , stableStringify = require('fast-json-stable-stringify');\n\nvar validateGenerator = require('../dotjs/validate');\n\n/**\n * Functions below are used inside compiled validations function\n */\n\nvar ucs2length = util.ucs2length;\nvar equal = require('fast-deep-equal');\n\n// this error is thrown by async schemas to return validation errors via exception\nvar ValidationError = errorClasses.Validation;\n\nmodule.exports = compile;\n\n\n/**\n * Compiles schema to validation function\n * @this   Ajv\n * @param  {Object} schema schema object\n * @param  {Object} root object with information about the root schema for this schema\n * @param  {Object} localRefs the hash of local references inside the schema (created by resolve.id), used for inline resolution\n * @param  {String} baseId base ID for IDs in the schema\n * @return {Function} validation function\n */\nfunction compile(schema, root, localRefs, baseId) {\n  /* jshint validthis: true, evil: true */\n  /* eslint no-shadow: 0 */\n  var self = this\n    , opts = this._opts\n    , refVal = [ undefined ]\n    , refs = {}\n    , patterns = []\n    , patternsHash = {}\n    , defaults = []\n    , defaultsHash = {}\n    , customRules = [];\n\n  root = root || { schema: schema, refVal: refVal, refs: refs };\n\n  var c = checkCompiling.call(this, schema, root, baseId);\n  var compilation = this._compilations[c.index];\n  if (c.compiling) return (compilation.callValidate = callValidate);\n\n  var formats = this._formats;\n  var RULES = this.RULES;\n\n  try {\n    var v = localCompile(schema, root, localRefs, baseId);\n    compilation.validate = v;\n    var cv = compilation.callValidate;\n    if (cv) {\n      cv.schema = v.schema;\n      cv.errors = null;\n      cv.refs = v.refs;\n      cv.refVal = v.refVal;\n      cv.root = v.root;\n      cv.$async = v.$async;\n      if (opts.sourceCode) cv.source = v.source;\n    }\n    return v;\n  } finally {\n    endCompiling.call(this, schema, root, baseId);\n  }\n\n  /* @this   {*} - custom context, see passContext option */\n  function callValidate() {\n    /* jshint validthis: true */\n    var validate = compilation.validate;\n    var result = validate.apply(this, arguments);\n    callValidate.errors = validate.errors;\n    return result;\n  }\n\n  function localCompile(_schema, _root, localRefs, baseId) {\n    var isRoot = !_root || (_root && _root.schema == _schema);\n    if (_root.schema != root.schema)\n      return compile.call(self, _schema, _root, localRefs, baseId);\n\n    var $async = _schema.$async === true;\n\n    var sourceCode = validateGenerator({\n      isTop: true,\n      schema: _schema,\n      isRoot: isRoot,\n      baseId: baseId,\n      root: _root,\n      schemaPath: '',\n      errSchemaPath: '#',\n      errorPath: '\"\"',\n      MissingRefError: errorClasses.MissingRef,\n      RULES: RULES,\n      validate: validateGenerator,\n      util: util,\n      resolve: resolve,\n      resolveRef: resolveRef,\n      usePattern: usePattern,\n      useDefault: useDefault,\n      useCustomRule: useCustomRule,\n      opts: opts,\n      formats: formats,\n      logger: self.logger,\n      self: self\n    });\n\n    sourceCode = vars(refVal, refValCode) + vars(patterns, patternCode)\n                   + vars(defaults, defaultCode) + vars(customRules, customRuleCode)\n                   + sourceCode;\n\n    if (opts.processCode) sourceCode = opts.processCode(sourceCode);\n    // console.log('\\n\\n\\n *** \\n', JSON.stringify(sourceCode));\n    var validate;\n    try {\n      var makeValidate = new Function(\n        'self',\n        'RULES',\n        'formats',\n        'root',\n        'refVal',\n        'defaults',\n        'customRules',\n        'equal',\n        'ucs2length',\n        'ValidationError',\n        sourceCode\n      );\n\n      validate = makeValidate(\n        self,\n        RULES,\n        formats,\n        root,\n        refVal,\n        defaults,\n        customRules,\n        equal,\n        ucs2length,\n        ValidationError\n      );\n\n      refVal[0] = validate;\n    } catch(e) {\n      self.logger.error('Error compiling schema, function code:', sourceCode);\n      throw e;\n    }\n\n    validate.schema = _schema;\n    validate.errors = null;\n    validate.refs = refs;\n    validate.refVal = refVal;\n    validate.root = isRoot ? validate : _root;\n    if ($async) validate.$async = true;\n    if (opts.sourceCode === true) {\n      validate.source = {\n        code: sourceCode,\n        patterns: patterns,\n        defaults: defaults\n      };\n    }\n\n    return validate;\n  }\n\n  function resolveRef(baseId, ref, isRoot) {\n    ref = resolve.url(baseId, ref);\n    var refIndex = refs[ref];\n    var _refVal, refCode;\n    if (refIndex !== undefined) {\n      _refVal = refVal[refIndex];\n      refCode = 'refVal[' + refIndex + ']';\n      return resolvedRef(_refVal, refCode);\n    }\n    if (!isRoot && root.refs) {\n      var rootRefId = root.refs[ref];\n      if (rootRefId !== undefined) {\n        _refVal = root.refVal[rootRefId];\n        refCode = addLocalRef(ref, _refVal);\n        return resolvedRef(_refVal, refCode);\n      }\n    }\n\n    refCode = addLocalRef(ref);\n    var v = resolve.call(self, localCompile, root, ref);\n    if (v === undefined) {\n      var localSchema = localRefs && localRefs[ref];\n      if (localSchema) {\n        v = resolve.inlineRef(localSchema, opts.inlineRefs)\n            ? localSchema\n            : compile.call(self, localSchema, root, localRefs, baseId);\n      }\n    }\n\n    if (v === undefined) {\n      removeLocalRef(ref);\n    } else {\n      replaceLocalRef(ref, v);\n      return resolvedRef(v, refCode);\n    }\n  }\n\n  function addLocalRef(ref, v) {\n    var refId = refVal.length;\n    refVal[refId] = v;\n    refs[ref] = refId;\n    return 'refVal' + refId;\n  }\n\n  function removeLocalRef(ref) {\n    delete refs[ref];\n  }\n\n  function replaceLocalRef(ref, v) {\n    var refId = refs[ref];\n    refVal[refId] = v;\n  }\n\n  function resolvedRef(refVal, code) {\n    return typeof refVal == 'object' || typeof refVal == 'boolean'\n            ? { code: code, schema: refVal, inline: true }\n            : { code: code, $async: refVal && !!refVal.$async };\n  }\n\n  function usePattern(regexStr) {\n    var index = patternsHash[regexStr];\n    if (index === undefined) {\n      index = patternsHash[regexStr] = patterns.length;\n      patterns[index] = regexStr;\n    }\n    return 'pattern' + index;\n  }\n\n  function useDefault(value) {\n    switch (typeof value) {\n      case 'boolean':\n      case 'number':\n        return '' + value;\n      case 'string':\n        return util.toQuotedString(value);\n      case 'object':\n        if (value === null) return 'null';\n        var valueStr = stableStringify(value);\n        var index = defaultsHash[valueStr];\n        if (index === undefined) {\n          index = defaultsHash[valueStr] = defaults.length;\n          defaults[index] = value;\n        }\n        return 'default' + index;\n    }\n  }\n\n  function useCustomRule(rule, schema, parentSchema, it) {\n    if (self._opts.validateSchema !== false) {\n      var deps = rule.definition.dependencies;\n      if (deps && !deps.every(function(keyword) {\n        return Object.prototype.hasOwnProperty.call(parentSchema, keyword);\n      }))\n        throw new Error('parent schema must have all required keywords: ' + deps.join(','));\n\n      var validateSchema = rule.definition.validateSchema;\n      if (validateSchema) {\n        var valid = validateSchema(schema);\n        if (!valid) {\n          var message = 'keyword schema is invalid: ' + self.errorsText(validateSchema.errors);\n          if (self._opts.validateSchema == 'log') self.logger.error(message);\n          else throw new Error(message);\n        }\n      }\n    }\n\n    var compile = rule.definition.compile\n      , inline = rule.definition.inline\n      , macro = rule.definition.macro;\n\n    var validate;\n    if (compile) {\n      validate = compile.call(self, schema, parentSchema, it);\n    } else if (macro) {\n      validate = macro.call(self, schema, parentSchema, it);\n      if (opts.validateSchema !== false) self.validateSchema(validate, true);\n    } else if (inline) {\n      validate = inline.call(self, it, rule.keyword, schema, parentSchema);\n    } else {\n      validate = rule.definition.validate;\n      if (!validate) return;\n    }\n\n    if (validate === undefined)\n      throw new Error('custom keyword \"' + rule.keyword + '\"failed to compile');\n\n    var index = customRules.length;\n    customRules[index] = validate;\n\n    return {\n      code: 'customRule' + index,\n      validate: validate\n    };\n  }\n}\n\n\n/**\n * Checks if the schema is currently compiled\n * @this   Ajv\n * @param  {Object} schema schema to compile\n * @param  {Object} root root object\n * @param  {String} baseId base schema ID\n * @return {Object} object with properties \"index\" (compilation index) and \"compiling\" (boolean)\n */\nfunction checkCompiling(schema, root, baseId) {\n  /* jshint validthis: true */\n  var index = compIndex.call(this, schema, root, baseId);\n  if (index >= 0) return { index: index, compiling: true };\n  index = this._compilations.length;\n  this._compilations[index] = {\n    schema: schema,\n    root: root,\n    baseId: baseId\n  };\n  return { index: index, compiling: false };\n}\n\n\n/**\n * Removes the schema from the currently compiled list\n * @this   Ajv\n * @param  {Object} schema schema to compile\n * @param  {Object} root root object\n * @param  {String} baseId base schema ID\n */\nfunction endCompiling(schema, root, baseId) {\n  /* jshint validthis: true */\n  var i = compIndex.call(this, schema, root, baseId);\n  if (i >= 0) this._compilations.splice(i, 1);\n}\n\n\n/**\n * Index of schema compilation in the currently compiled list\n * @this   Ajv\n * @param  {Object} schema schema to compile\n * @param  {Object} root root object\n * @param  {String} baseId base schema ID\n * @return {Integer} compilation index\n */\nfunction compIndex(schema, root, baseId) {\n  /* jshint validthis: true */\n  for (var i=0; i<this._compilations.length; i++) {\n    var c = this._compilations[i];\n    if (c.schema == schema && c.root == root && c.baseId == baseId) return i;\n  }\n  return -1;\n}\n\n\nfunction patternCode(i, patterns) {\n  return 'var pattern' + i + ' = new RegExp(' + util.toQuotedString(patterns[i]) + ');';\n}\n\n\nfunction defaultCode(i) {\n  return 'var default' + i + ' = defaults[' + i + '];';\n}\n\n\nfunction refValCode(i, refVal) {\n  return refVal[i] === undefined ? '' : 'var refVal' + i + ' = refVal[' + i + '];';\n}\n\n\nfunction customRuleCode(i) {\n  return 'var customRule' + i + ' = customRules[' + i + '];';\n}\n\n\nfunction vars(arr, statement) {\n  if (!arr.length) return '';\n  var code = '';\n  for (var i=0; i<arr.length; i++)\n    code += statement(i, arr);\n  return code;\n}\n","'use strict';\n\nvar URI = require('uri-js')\n  , equal = require('fast-deep-equal')\n  , util = require('./util')\n  , SchemaObject = require('./schema_obj')\n  , traverse = require('json-schema-traverse');\n\nmodule.exports = resolve;\n\nresolve.normalizeId = normalizeId;\nresolve.fullPath = getFullPath;\nresolve.url = resolveUrl;\nresolve.ids = resolveIds;\nresolve.inlineRef = inlineRef;\nresolve.schema = resolveSchema;\n\n/**\n * [resolve and compile the references ($ref)]\n * @this   Ajv\n * @param  {Function} compile reference to schema compilation funciton (localCompile)\n * @param  {Object} root object with information about the root schema for the current schema\n * @param  {String} ref reference to resolve\n * @return {Object|Function} schema object (if the schema can be inlined) or validation function\n */\nfunction resolve(compile, root, ref) {\n  /* jshint validthis: true */\n  var refVal = this._refs[ref];\n  if (typeof refVal == 'string') {\n    if (this._refs[refVal]) refVal = this._refs[refVal];\n    else return resolve.call(this, compile, root, refVal);\n  }\n\n  refVal = refVal || this._schemas[ref];\n  if (refVal instanceof SchemaObject) {\n    return inlineRef(refVal.schema, this._opts.inlineRefs)\n            ? refVal.schema\n            : refVal.validate || this._compile(refVal);\n  }\n\n  var res = resolveSchema.call(this, root, ref);\n  var schema, v, baseId;\n  if (res) {\n    schema = res.schema;\n    root = res.root;\n    baseId = res.baseId;\n  }\n\n  if (schema instanceof SchemaObject) {\n    v = schema.validate || compile.call(this, schema.schema, root, undefined, baseId);\n  } else if (schema !== undefined) {\n    v = inlineRef(schema, this._opts.inlineRefs)\n        ? schema\n        : compile.call(this, schema, root, undefined, baseId);\n  }\n\n  return v;\n}\n\n\n/**\n * Resolve schema, its root and baseId\n * @this Ajv\n * @param  {Object} root root object with properties schema, refVal, refs\n * @param  {String} ref  reference to resolve\n * @return {Object} object with properties schema, root, baseId\n */\nfunction resolveSchema(root, ref) {\n  /* jshint validthis: true */\n  var p = URI.parse(ref)\n    , refPath = _getFullPath(p)\n    , baseId = getFullPath(this._getId(root.schema));\n  if (Object.keys(root.schema).length === 0 || refPath !== baseId) {\n    var id = normalizeId(refPath);\n    var refVal = this._refs[id];\n    if (typeof refVal == 'string') {\n      return resolveRecursive.call(this, root, refVal, p);\n    } else if (refVal instanceof SchemaObject) {\n      if (!refVal.validate) this._compile(refVal);\n      root = refVal;\n    } else {\n      refVal = this._schemas[id];\n      if (refVal instanceof SchemaObject) {\n        if (!refVal.validate) this._compile(refVal);\n        if (id == normalizeId(ref))\n          return { schema: refVal, root: root, baseId: baseId };\n        root = refVal;\n      } else {\n        return;\n      }\n    }\n    if (!root.schema) return;\n    baseId = getFullPath(this._getId(root.schema));\n  }\n  return getJsonPointer.call(this, p, baseId, root.schema, root);\n}\n\n\n/* @this Ajv */\nfunction resolveRecursive(root, ref, parsedRef) {\n  /* jshint validthis: true */\n  var res = resolveSchema.call(this, root, ref);\n  if (res) {\n    var schema = res.schema;\n    var baseId = res.baseId;\n    root = res.root;\n    var id = this._getId(schema);\n    if (id) baseId = resolveUrl(baseId, id);\n    return getJsonPointer.call(this, parsedRef, baseId, schema, root);\n  }\n}\n\n\nvar PREVENT_SCOPE_CHANGE = util.toHash(['properties', 'patternProperties', 'enum', 'dependencies', 'definitions']);\n/* @this Ajv */\nfunction getJsonPointer(parsedRef, baseId, schema, root) {\n  /* jshint validthis: true */\n  parsedRef.fragment = parsedRef.fragment || '';\n  if (parsedRef.fragment.slice(0,1) != '/') return;\n  var parts = parsedRef.fragment.split('/');\n\n  for (var i = 1; i < parts.length; i++) {\n    var part = parts[i];\n    if (part) {\n      part = util.unescapeFragment(part);\n      schema = schema[part];\n      if (schema === undefined) break;\n      var id;\n      if (!PREVENT_SCOPE_CHANGE[part]) {\n        id = this._getId(schema);\n        if (id) baseId = resolveUrl(baseId, id);\n        if (schema.$ref) {\n          var $ref = resolveUrl(baseId, schema.$ref);\n          var res = resolveSchema.call(this, root, $ref);\n          if (res) {\n            schema = res.schema;\n            root = res.root;\n            baseId = res.baseId;\n          }\n        }\n      }\n    }\n  }\n  if (schema !== undefined && schema !== root.schema)\n    return { schema: schema, root: root, baseId: baseId };\n}\n\n\nvar SIMPLE_INLINED = util.toHash([\n  'type', 'format', 'pattern',\n  'maxLength', 'minLength',\n  'maxProperties', 'minProperties',\n  'maxItems', 'minItems',\n  'maximum', 'minimum',\n  'uniqueItems', 'multipleOf',\n  'required', 'enum'\n]);\nfunction inlineRef(schema, limit) {\n  if (limit === false) return false;\n  if (limit === undefined || limit === true) return checkNoRef(schema);\n  else if (limit) return countKeys(schema) <= limit;\n}\n\n\nfunction checkNoRef(schema) {\n  var item;\n  if (Array.isArray(schema)) {\n    for (var i=0; i<schema.length; i++) {\n      item = schema[i];\n      if (typeof item == 'object' && !checkNoRef(item)) return false;\n    }\n  } else {\n    for (var key in schema) {\n      if (key == '$ref') return false;\n      item = schema[key];\n      if (typeof item == 'object' && !checkNoRef(item)) return false;\n    }\n  }\n  return true;\n}\n\n\nfunction countKeys(schema) {\n  var count = 0, item;\n  if (Array.isArray(schema)) {\n    for (var i=0; i<schema.length; i++) {\n      item = schema[i];\n      if (typeof item == 'object') count += countKeys(item);\n      if (count == Infinity) return Infinity;\n    }\n  } else {\n    for (var key in schema) {\n      if (key == '$ref') return Infinity;\n      if (SIMPLE_INLINED[key]) {\n        count++;\n      } else {\n        item = schema[key];\n        if (typeof item == 'object') count += countKeys(item) + 1;\n        if (count == Infinity) return Infinity;\n      }\n    }\n  }\n  return count;\n}\n\n\nfunction getFullPath(id, normalize) {\n  if (normalize !== false) id = normalizeId(id);\n  var p = URI.parse(id);\n  return _getFullPath(p);\n}\n\n\nfunction _getFullPath(p) {\n  return URI.serialize(p).split('#')[0] + '#';\n}\n\n\nvar TRAILING_SLASH_HASH = /#\\/?$/;\nfunction normalizeId(id) {\n  return id ? id.replace(TRAILING_SLASH_HASH, '') : '';\n}\n\n\nfunction resolveUrl(baseId, id) {\n  id = normalizeId(id);\n  return URI.resolve(baseId, id);\n}\n\n\n/* @this Ajv */\nfunction resolveIds(schema) {\n  var schemaId = normalizeId(this._getId(schema));\n  var baseIds = {'': schemaId};\n  var fullPaths = {'': getFullPath(schemaId, false)};\n  var localRefs = {};\n  var self = this;\n\n  traverse(schema, {allKeys: true}, function(sch, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex) {\n    if (jsonPtr === '') return;\n    var id = self._getId(sch);\n    var baseId = baseIds[parentJsonPtr];\n    var fullPath = fullPaths[parentJsonPtr] + '/' + parentKeyword;\n    if (keyIndex !== undefined)\n      fullPath += '/' + (typeof keyIndex == 'number' ? keyIndex : util.escapeFragment(keyIndex));\n\n    if (typeof id == 'string') {\n      id = baseId = normalizeId(baseId ? URI.resolve(baseId, id) : id);\n\n      var refVal = self._refs[id];\n      if (typeof refVal == 'string') refVal = self._refs[refVal];\n      if (refVal && refVal.schema) {\n        if (!equal(sch, refVal.schema))\n          throw new Error('id \"' + id + '\" resolves to more than one schema');\n      } else if (id != normalizeId(fullPath)) {\n        if (id[0] == '#') {\n          if (localRefs[id] && !equal(sch, localRefs[id]))\n            throw new Error('id \"' + id + '\" resolves to more than one schema');\n          localRefs[id] = sch;\n        } else {\n          self._refs[id] = fullPath;\n        }\n      }\n    }\n    baseIds[jsonPtr] = baseId;\n    fullPaths[jsonPtr] = fullPath;\n  });\n\n  return localRefs;\n}\n","'use strict';\n\nvar ruleModules = require('../dotjs')\n  , toHash = require('./util').toHash;\n\nmodule.exports = function rules() {\n  var RULES = [\n    { type: 'number',\n      rules: [ { 'maximum': ['exclusiveMaximum'] },\n               { 'minimum': ['exclusiveMinimum'] }, 'multipleOf', 'format'] },\n    { type: 'string',\n      rules: [ 'maxLength', 'minLength', 'pattern', 'format' ] },\n    { type: 'array',\n      rules: [ 'maxItems', 'minItems', 'items', 'contains', 'uniqueItems' ] },\n    { type: 'object',\n      rules: [ 'maxProperties', 'minProperties', 'required', 'dependencies', 'propertyNames',\n               { 'properties': ['additionalProperties', 'patternProperties'] } ] },\n    { rules: [ '$ref', 'const', 'enum', 'not', 'anyOf', 'oneOf', 'allOf', 'if' ] }\n  ];\n\n  var ALL = [ 'type', '$comment' ];\n  var KEYWORDS = [\n    '$schema', '$id', 'id', '$data', '$async', 'title',\n    'description', 'default', 'definitions',\n    'examples', 'readOnly', 'writeOnly',\n    'contentMediaType', 'contentEncoding',\n    'additionalItems', 'then', 'else'\n  ];\n  var TYPES = [ 'number', 'integer', 'string', 'array', 'object', 'boolean', 'null' ];\n  RULES.all = toHash(ALL);\n  RULES.types = toHash(TYPES);\n\n  RULES.forEach(function (group) {\n    group.rules = group.rules.map(function (keyword) {\n      var implKeywords;\n      if (typeof keyword == 'object') {\n        var key = Object.keys(keyword)[0];\n        implKeywords = keyword[key];\n        keyword = key;\n        implKeywords.forEach(function (k) {\n          ALL.push(k);\n          RULES.all[k] = true;\n        });\n      }\n      ALL.push(keyword);\n      var rule = RULES.all[keyword] = {\n        keyword: keyword,\n        code: ruleModules[keyword],\n        implements: implKeywords\n      };\n      return rule;\n    });\n\n    RULES.all.$comment = {\n      keyword: '$comment',\n      code: ruleModules.$comment\n    };\n\n    if (group.type) RULES.types[group.type] = group;\n  });\n\n  RULES.keywords = toHash(ALL.concat(KEYWORDS));\n  RULES.custom = {};\n\n  return RULES;\n};\n","'use strict';\n\nvar util = require('./util');\n\nmodule.exports = SchemaObject;\n\nfunction SchemaObject(obj) {\n  util.copy(obj, this);\n}\n","'use strict';\n\n// https://mathiasbynens.be/notes/javascript-encoding\n// https://github.com/bestiejs/punycode.js - punycode.ucs2.decode\nmodule.exports = function ucs2length(str) {\n  var length = 0\n    , len = str.length\n    , pos = 0\n    , value;\n  while (pos < len) {\n    length++;\n    value = str.charCodeAt(pos++);\n    if (value >= 0xD800 && value <= 0xDBFF && pos < len) {\n      // high surrogate, and there is a next character\n      value = str.charCodeAt(pos);\n      if ((value & 0xFC00) == 0xDC00) pos++; // low surrogate\n    }\n  }\n  return length;\n};\n","'use strict';\n\n\nmodule.exports = {\n  copy: copy,\n  checkDataType: checkDataType,\n  checkDataTypes: checkDataTypes,\n  coerceToTypes: coerceToTypes,\n  toHash: toHash,\n  getProperty: getProperty,\n  escapeQuotes: escapeQuotes,\n  equal: require('fast-deep-equal'),\n  ucs2length: require('./ucs2length'),\n  varOccurences: varOccurences,\n  varReplace: varReplace,\n  cleanUpCode: cleanUpCode,\n  finalCleanUpCode: finalCleanUpCode,\n  schemaHasRules: schemaHasRules,\n  schemaHasRulesExcept: schemaHasRulesExcept,\n  schemaUnknownRules: schemaUnknownRules,\n  toQuotedString: toQuotedString,\n  getPathExpr: getPathExpr,\n  getPath: getPath,\n  getData: getData,\n  unescapeFragment: unescapeFragment,\n  unescapeJsonPointer: unescapeJsonPointer,\n  escapeFragment: escapeFragment,\n  escapeJsonPointer: escapeJsonPointer\n};\n\n\nfunction copy(o, to) {\n  to = to || {};\n  for (var key in o) to[key] = o[key];\n  return to;\n}\n\n\nfunction checkDataType(dataType, data, negate) {\n  var EQUAL = negate ? ' !== ' : ' === '\n    , AND = negate ? ' || ' : ' && '\n    , OK = negate ? '!' : ''\n    , NOT = negate ? '' : '!';\n  switch (dataType) {\n    case 'null': return data + EQUAL + 'null';\n    case 'array': return OK + 'Array.isArray(' + data + ')';\n    case 'object': return '(' + OK + data + AND +\n                          'typeof ' + data + EQUAL + '\"object\"' + AND +\n                          NOT + 'Array.isArray(' + data + '))';\n    case 'integer': return '(typeof ' + data + EQUAL + '\"number\"' + AND +\n                           NOT + '(' + data + ' % 1)' +\n                           AND + data + EQUAL + data + ')';\n    default: return 'typeof ' + data + EQUAL + '\"' + dataType + '\"';\n  }\n}\n\n\nfunction checkDataTypes(dataTypes, data) {\n  switch (dataTypes.length) {\n    case 1: return checkDataType(dataTypes[0], data, true);\n    default:\n      var code = '';\n      var types = toHash(dataTypes);\n      if (types.array && types.object) {\n        code = types.null ? '(': '(!' + data + ' || ';\n        code += 'typeof ' + data + ' !== \"object\")';\n        delete types.null;\n        delete types.array;\n        delete types.object;\n      }\n      if (types.number) delete types.integer;\n      for (var t in types)\n        code += (code ? ' && ' : '' ) + checkDataType(t, data, true);\n\n      return code;\n  }\n}\n\n\nvar COERCE_TO_TYPES = toHash([ 'string', 'number', 'integer', 'boolean', 'null' ]);\nfunction coerceToTypes(optionCoerceTypes, dataTypes) {\n  if (Array.isArray(dataTypes)) {\n    var types = [];\n    for (var i=0; i<dataTypes.length; i++) {\n      var t = dataTypes[i];\n      if (COERCE_TO_TYPES[t]) types[types.length] = t;\n      else if (optionCoerceTypes === 'array' && t === 'array') types[types.length] = t;\n    }\n    if (types.length) return types;\n  } else if (COERCE_TO_TYPES[dataTypes]) {\n    return [dataTypes];\n  } else if (optionCoerceTypes === 'array' && dataTypes === 'array') {\n    return ['array'];\n  }\n}\n\n\nfunction toHash(arr) {\n  var hash = {};\n  for (var i=0; i<arr.length; i++) hash[arr[i]] = true;\n  return hash;\n}\n\n\nvar IDENTIFIER = /^[a-z$_][a-z$_0-9]*$/i;\nvar SINGLE_QUOTE = /'|\\\\/g;\nfunction getProperty(key) {\n  return typeof key == 'number'\n          ? '[' + key + ']'\n          : IDENTIFIER.test(key)\n            ? '.' + key\n            : \"['\" + escapeQuotes(key) + \"']\";\n}\n\n\nfunction escapeQuotes(str) {\n  return str.replace(SINGLE_QUOTE, '\\\\$&')\n            .replace(/\\n/g, '\\\\n')\n            .replace(/\\r/g, '\\\\r')\n            .replace(/\\f/g, '\\\\f')\n            .replace(/\\t/g, '\\\\t');\n}\n\n\nfunction varOccurences(str, dataVar) {\n  dataVar += '[^0-9]';\n  var matches = str.match(new RegExp(dataVar, 'g'));\n  return matches ? matches.length : 0;\n}\n\n\nfunction varReplace(str, dataVar, expr) {\n  dataVar += '([^0-9])';\n  expr = expr.replace(/\\$/g, '$$$$');\n  return str.replace(new RegExp(dataVar, 'g'), expr + '$1');\n}\n\n\nvar EMPTY_ELSE = /else\\s*{\\s*}/g\n  , EMPTY_IF_NO_ELSE = /if\\s*\\([^)]+\\)\\s*\\{\\s*\\}(?!\\s*else)/g\n  , EMPTY_IF_WITH_ELSE = /if\\s*\\(([^)]+)\\)\\s*\\{\\s*\\}\\s*else(?!\\s*if)/g;\nfunction cleanUpCode(out) {\n  return out.replace(EMPTY_ELSE, '')\n            .replace(EMPTY_IF_NO_ELSE, '')\n            .replace(EMPTY_IF_WITH_ELSE, 'if (!($1))');\n}\n\n\nvar ERRORS_REGEXP = /[^v.]errors/g\n  , REMOVE_ERRORS = /var errors = 0;|var vErrors = null;|validate.errors = vErrors;/g\n  , REMOVE_ERRORS_ASYNC = /var errors = 0;|var vErrors = null;/g\n  , RETURN_VALID = 'return errors === 0;'\n  , RETURN_TRUE = 'validate.errors = null; return true;'\n  , RETURN_ASYNC = /if \\(errors === 0\\) return data;\\s*else throw new ValidationError\\(vErrors\\);/\n  , RETURN_DATA_ASYNC = 'return data;'\n  , ROOTDATA_REGEXP = /[^A-Za-z_$]rootData[^A-Za-z0-9_$]/g\n  , REMOVE_ROOTDATA = /if \\(rootData === undefined\\) rootData = data;/;\n\nfunction finalCleanUpCode(out, async) {\n  var matches = out.match(ERRORS_REGEXP);\n  if (matches && matches.length == 2) {\n    out = async\n          ? out.replace(REMOVE_ERRORS_ASYNC, '')\n               .replace(RETURN_ASYNC, RETURN_DATA_ASYNC)\n          : out.replace(REMOVE_ERRORS, '')\n               .replace(RETURN_VALID, RETURN_TRUE);\n  }\n\n  matches = out.match(ROOTDATA_REGEXP);\n  if (!matches || matches.length !== 3) return out;\n  return out.replace(REMOVE_ROOTDATA, '');\n}\n\n\nfunction schemaHasRules(schema, rules) {\n  if (typeof schema == 'boolean') return !schema;\n  for (var key in schema) if (rules[key]) return true;\n}\n\n\nfunction schemaHasRulesExcept(schema, rules, exceptKeyword) {\n  if (typeof schema == 'boolean') return !schema && exceptKeyword != 'not';\n  for (var key in schema) if (key != exceptKeyword && rules[key]) return true;\n}\n\n\nfunction schemaUnknownRules(schema, rules) {\n  if (typeof schema == 'boolean') return;\n  for (var key in schema) if (!rules[key]) return key;\n}\n\n\nfunction toQuotedString(str) {\n  return '\\'' + escapeQuotes(str) + '\\'';\n}\n\n\nfunction getPathExpr(currentPath, expr, jsonPointers, isNumber) {\n  var path = jsonPointers // false by default\n              ? '\\'/\\' + ' + expr + (isNumber ? '' : '.replace(/~/g, \\'~0\\').replace(/\\\\//g, \\'~1\\')')\n              : (isNumber ? '\\'[\\' + ' + expr + ' + \\']\\'' : '\\'[\\\\\\'\\' + ' + expr + ' + \\'\\\\\\']\\'');\n  return joinPaths(currentPath, path);\n}\n\n\nfunction getPath(currentPath, prop, jsonPointers) {\n  var path = jsonPointers // false by default\n              ? toQuotedString('/' + escapeJsonPointer(prop))\n              : toQuotedString(getProperty(prop));\n  return joinPaths(currentPath, path);\n}\n\n\nvar JSON_POINTER = /^\\/(?:[^~]|~0|~1)*$/;\nvar RELATIVE_JSON_POINTER = /^([0-9]+)(#|\\/(?:[^~]|~0|~1)*)?$/;\nfunction getData($data, lvl, paths) {\n  var up, jsonPointer, data, matches;\n  if ($data === '') return 'rootData';\n  if ($data[0] == '/') {\n    if (!JSON_POINTER.test($data)) throw new Error('Invalid JSON-pointer: ' + $data);\n    jsonPointer = $data;\n    data = 'rootData';\n  } else {\n    matches = $data.match(RELATIVE_JSON_POINTER);\n    if (!matches) throw new Error('Invalid JSON-pointer: ' + $data);\n    up = +matches[1];\n    jsonPointer = matches[2];\n    if (jsonPointer == '#') {\n      if (up >= lvl) throw new Error('Cannot access property/index ' + up + ' levels up, current level is ' + lvl);\n      return paths[lvl - up];\n    }\n\n    if (up > lvl) throw new Error('Cannot access data ' + up + ' levels up, current level is ' + lvl);\n    data = 'data' + ((lvl - up) || '');\n    if (!jsonPointer) return data;\n  }\n\n  var expr = data;\n  var segments = jsonPointer.split('/');\n  for (var i=0; i<segments.length; i++) {\n    var segment = segments[i];\n    if (segment) {\n      data += getProperty(unescapeJsonPointer(segment));\n      expr += ' && ' + data;\n    }\n  }\n  return expr;\n}\n\n\nfunction joinPaths (a, b) {\n  if (a == '\"\"') return b;\n  return (a + ' + ' + b).replace(/' \\+ '/g, '');\n}\n\n\nfunction unescapeFragment(str) {\n  return unescapeJsonPointer(decodeURIComponent(str));\n}\n\n\nfunction escapeFragment(str) {\n  return encodeURIComponent(escapeJsonPointer(str));\n}\n\n\nfunction escapeJsonPointer(str) {\n  return str.replace(/~/g, '~0').replace(/\\//g, '~1');\n}\n\n\nfunction unescapeJsonPointer(str) {\n  return str.replace(/~1/g, '/').replace(/~0/g, '~');\n}\n","'use strict';\n\nvar KEYWORDS = [\n  'multipleOf',\n  'maximum',\n  'exclusiveMaximum',\n  'minimum',\n  'exclusiveMinimum',\n  'maxLength',\n  'minLength',\n  'pattern',\n  'additionalItems',\n  'maxItems',\n  'minItems',\n  'uniqueItems',\n  'maxProperties',\n  'minProperties',\n  'required',\n  'additionalProperties',\n  'enum',\n  'format',\n  'const'\n];\n\nmodule.exports = function (metaSchema, keywordsJsonPointers) {\n  for (var i=0; i<keywordsJsonPointers.length; i++) {\n    metaSchema = JSON.parse(JSON.stringify(metaSchema));\n    var segments = keywordsJsonPointers[i].split('/');\n    var keywords = metaSchema;\n    var j;\n    for (j=1; j<segments.length; j++)\n      keywords = keywords[segments[j]];\n\n    for (j=0; j<KEYWORDS.length; j++) {\n      var key = KEYWORDS[j];\n      var schema = keywords[key];\n      if (schema) {\n        keywords[key] = {\n          anyOf: [\n            schema,\n            { $ref: 'https://raw.githubusercontent.com/epoberezkin/ajv/master/lib/refs/data.json#' }\n          ]\n        };\n      }\n    }\n  }\n\n  return metaSchema;\n};\n","'use strict';\n\nvar metaSchema = require('./refs/json-schema-draft-07.json');\n\nmodule.exports = {\n  $id: 'https://github.com/epoberezkin/ajv/blob/master/lib/definition_schema.js',\n  definitions: {\n    simpleTypes: metaSchema.definitions.simpleTypes\n  },\n  type: 'object',\n  dependencies: {\n    schema: ['validate'],\n    $data: ['validate'],\n    statements: ['inline'],\n    valid: {not: {required: ['macro']}}\n  },\n  properties: {\n    type: metaSchema.properties.type,\n    schema: {type: 'boolean'},\n    statements: {type: 'boolean'},\n    dependencies: {\n      type: 'array',\n      items: {type: 'string'}\n    },\n    metaSchema: {type: 'object'},\n    modifying: {type: 'boolean'},\n    valid: {type: 'boolean'},\n    $data: {type: 'boolean'},\n    async: {type: 'boolean'},\n    errors: {\n      anyOf: [\n        {type: 'boolean'},\n        {const: 'full'}\n      ]\n    }\n  }\n};\n","'use strict';\nmodule.exports = function generate__limit(it, $keyword, $ruleType) {\n  var out = ' ';\n  var $lvl = it.level;\n  var $dataLvl = it.dataLevel;\n  var $schema = it.schema[$keyword];\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n  var $breakOnError = !it.opts.allErrors;\n  var $errorKeyword;\n  var $data = 'data' + ($dataLvl || '');\n  var $isData = it.opts.$data && $schema && $schema.$data,\n    $schemaValue;\n  if ($isData) {\n    out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';\n    $schemaValue = 'schema' + $lvl;\n  } else {\n    $schemaValue = $schema;\n  }\n  var $isMax = $keyword == 'maximum',\n    $exclusiveKeyword = $isMax ? 'exclusiveMaximum' : 'exclusiveMinimum',\n    $schemaExcl = it.schema[$exclusiveKeyword],\n    $isDataExcl = it.opts.$data && $schemaExcl && $schemaExcl.$data,\n    $op = $isMax ? '<' : '>',\n    $notOp = $isMax ? '>' : '<',\n    $errorKeyword = undefined;\n  if ($isDataExcl) {\n    var $schemaValueExcl = it.util.getData($schemaExcl.$data, $dataLvl, it.dataPathArr),\n      $exclusive = 'exclusive' + $lvl,\n      $exclType = 'exclType' + $lvl,\n      $exclIsNumber = 'exclIsNumber' + $lvl,\n      $opExpr = 'op' + $lvl,\n      $opStr = '\\' + ' + $opExpr + ' + \\'';\n    out += ' var schemaExcl' + ($lvl) + ' = ' + ($schemaValueExcl) + '; ';\n    $schemaValueExcl = 'schemaExcl' + $lvl;\n    out += ' var ' + ($exclusive) + '; var ' + ($exclType) + ' = typeof ' + ($schemaValueExcl) + '; if (' + ($exclType) + ' != \\'boolean\\' && ' + ($exclType) + ' != \\'undefined\\' && ' + ($exclType) + ' != \\'number\\') { ';\n    var $errorKeyword = $exclusiveKeyword;\n    var $$outStack = $$outStack || [];\n    $$outStack.push(out);\n    out = ''; /* istanbul ignore else */\n    if (it.createErrors !== false) {\n      out += ' { keyword: \\'' + ($errorKeyword || '_exclusiveLimit') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: {} ';\n      if (it.opts.messages !== false) {\n        out += ' , message: \\'' + ($exclusiveKeyword) + ' should be boolean\\' ';\n      }\n      if (it.opts.verbose) {\n        out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n      }\n      out += ' } ';\n    } else {\n      out += ' {} ';\n    }\n    var __err = out;\n    out = $$outStack.pop();\n    if (!it.compositeRule && $breakOnError) {\n      /* istanbul ignore if */\n      if (it.async) {\n        out += ' throw new ValidationError([' + (__err) + ']); ';\n      } else {\n        out += ' validate.errors = [' + (__err) + ']; return false; ';\n      }\n    } else {\n      out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n    }\n    out += ' } else if ( ';\n    if ($isData) {\n      out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \\'number\\') || ';\n    }\n    out += ' ' + ($exclType) + ' == \\'number\\' ? ( (' + ($exclusive) + ' = ' + ($schemaValue) + ' === undefined || ' + ($schemaValueExcl) + ' ' + ($op) + '= ' + ($schemaValue) + ') ? ' + ($data) + ' ' + ($notOp) + '= ' + ($schemaValueExcl) + ' : ' + ($data) + ' ' + ($notOp) + ' ' + ($schemaValue) + ' ) : ( (' + ($exclusive) + ' = ' + ($schemaValueExcl) + ' === true) ? ' + ($data) + ' ' + ($notOp) + '= ' + ($schemaValue) + ' : ' + ($data) + ' ' + ($notOp) + ' ' + ($schemaValue) + ' ) || ' + ($data) + ' !== ' + ($data) + ') { var op' + ($lvl) + ' = ' + ($exclusive) + ' ? \\'' + ($op) + '\\' : \\'' + ($op) + '=\\'; ';\n    if ($schema === undefined) {\n      $errorKeyword = $exclusiveKeyword;\n      $errSchemaPath = it.errSchemaPath + '/' + $exclusiveKeyword;\n      $schemaValue = $schemaValueExcl;\n      $isData = $isDataExcl;\n    }\n  } else {\n    var $exclIsNumber = typeof $schemaExcl == 'number',\n      $opStr = $op;\n    if ($exclIsNumber && $isData) {\n      var $opExpr = '\\'' + $opStr + '\\'';\n      out += ' if ( ';\n      if ($isData) {\n        out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \\'number\\') || ';\n      }\n      out += ' ( ' + ($schemaValue) + ' === undefined || ' + ($schemaExcl) + ' ' + ($op) + '= ' + ($schemaValue) + ' ? ' + ($data) + ' ' + ($notOp) + '= ' + ($schemaExcl) + ' : ' + ($data) + ' ' + ($notOp) + ' ' + ($schemaValue) + ' ) || ' + ($data) + ' !== ' + ($data) + ') { ';\n    } else {\n      if ($exclIsNumber && $schema === undefined) {\n        $exclusive = true;\n        $errorKeyword = $exclusiveKeyword;\n        $errSchemaPath = it.errSchemaPath + '/' + $exclusiveKeyword;\n        $schemaValue = $schemaExcl;\n        $notOp += '=';\n      } else {\n        if ($exclIsNumber) $schemaValue = Math[$isMax ? 'min' : 'max']($schemaExcl, $schema);\n        if ($schemaExcl === ($exclIsNumber ? $schemaValue : true)) {\n          $exclusive = true;\n          $errorKeyword = $exclusiveKeyword;\n          $errSchemaPath = it.errSchemaPath + '/' + $exclusiveKeyword;\n          $notOp += '=';\n        } else {\n          $exclusive = false;\n          $opStr += '=';\n        }\n      }\n      var $opExpr = '\\'' + $opStr + '\\'';\n      out += ' if ( ';\n      if ($isData) {\n        out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \\'number\\') || ';\n      }\n      out += ' ' + ($data) + ' ' + ($notOp) + ' ' + ($schemaValue) + ' || ' + ($data) + ' !== ' + ($data) + ') { ';\n    }\n  }\n  $errorKeyword = $errorKeyword || $keyword;\n  var $$outStack = $$outStack || [];\n  $$outStack.push(out);\n  out = ''; /* istanbul ignore else */\n  if (it.createErrors !== false) {\n    out += ' { keyword: \\'' + ($errorKeyword || '_limit') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { comparison: ' + ($opExpr) + ', limit: ' + ($schemaValue) + ', exclusive: ' + ($exclusive) + ' } ';\n    if (it.opts.messages !== false) {\n      out += ' , message: \\'should be ' + ($opStr) + ' ';\n      if ($isData) {\n        out += '\\' + ' + ($schemaValue);\n      } else {\n        out += '' + ($schemaValue) + '\\'';\n      }\n    }\n    if (it.opts.verbose) {\n      out += ' , schema:  ';\n      if ($isData) {\n        out += 'validate.schema' + ($schemaPath);\n      } else {\n        out += '' + ($schema);\n      }\n      out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n    }\n    out += ' } ';\n  } else {\n    out += ' {} ';\n  }\n  var __err = out;\n  out = $$outStack.pop();\n  if (!it.compositeRule && $breakOnError) {\n    /* istanbul ignore if */\n    if (it.async) {\n      out += ' throw new ValidationError([' + (__err) + ']); ';\n    } else {\n      out += ' validate.errors = [' + (__err) + ']; return false; ';\n    }\n  } else {\n    out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n  }\n  out += ' } ';\n  if ($breakOnError) {\n    out += ' else { ';\n  }\n  return out;\n}\n","'use strict';\nmodule.exports = function generate__limitItems(it, $keyword, $ruleType) {\n  var out = ' ';\n  var $lvl = it.level;\n  var $dataLvl = it.dataLevel;\n  var $schema = it.schema[$keyword];\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n  var $breakOnError = !it.opts.allErrors;\n  var $errorKeyword;\n  var $data = 'data' + ($dataLvl || '');\n  var $isData = it.opts.$data && $schema && $schema.$data,\n    $schemaValue;\n  if ($isData) {\n    out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';\n    $schemaValue = 'schema' + $lvl;\n  } else {\n    $schemaValue = $schema;\n  }\n  var $op = $keyword == 'maxItems' ? '>' : '<';\n  out += 'if ( ';\n  if ($isData) {\n    out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \\'number\\') || ';\n  }\n  out += ' ' + ($data) + '.length ' + ($op) + ' ' + ($schemaValue) + ') { ';\n  var $errorKeyword = $keyword;\n  var $$outStack = $$outStack || [];\n  $$outStack.push(out);\n  out = ''; /* istanbul ignore else */\n  if (it.createErrors !== false) {\n    out += ' { keyword: \\'' + ($errorKeyword || '_limitItems') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { limit: ' + ($schemaValue) + ' } ';\n    if (it.opts.messages !== false) {\n      out += ' , message: \\'should NOT have ';\n      if ($keyword == 'maxItems') {\n        out += 'more';\n      } else {\n        out += 'fewer';\n      }\n      out += ' than ';\n      if ($isData) {\n        out += '\\' + ' + ($schemaValue) + ' + \\'';\n      } else {\n        out += '' + ($schema);\n      }\n      out += ' items\\' ';\n    }\n    if (it.opts.verbose) {\n      out += ' , schema:  ';\n      if ($isData) {\n        out += 'validate.schema' + ($schemaPath);\n      } else {\n        out += '' + ($schema);\n      }\n      out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n    }\n    out += ' } ';\n  } else {\n    out += ' {} ';\n  }\n  var __err = out;\n  out = $$outStack.pop();\n  if (!it.compositeRule && $breakOnError) {\n    /* istanbul ignore if */\n    if (it.async) {\n      out += ' throw new ValidationError([' + (__err) + ']); ';\n    } else {\n      out += ' validate.errors = [' + (__err) + ']; return false; ';\n    }\n  } else {\n    out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n  }\n  out += '} ';\n  if ($breakOnError) {\n    out += ' else { ';\n  }\n  return out;\n}\n","'use strict';\nmodule.exports = function generate__limitLength(it, $keyword, $ruleType) {\n  var out = ' ';\n  var $lvl = it.level;\n  var $dataLvl = it.dataLevel;\n  var $schema = it.schema[$keyword];\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n  var $breakOnError = !it.opts.allErrors;\n  var $errorKeyword;\n  var $data = 'data' + ($dataLvl || '');\n  var $isData = it.opts.$data && $schema && $schema.$data,\n    $schemaValue;\n  if ($isData) {\n    out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';\n    $schemaValue = 'schema' + $lvl;\n  } else {\n    $schemaValue = $schema;\n  }\n  var $op = $keyword == 'maxLength' ? '>' : '<';\n  out += 'if ( ';\n  if ($isData) {\n    out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \\'number\\') || ';\n  }\n  if (it.opts.unicode === false) {\n    out += ' ' + ($data) + '.length ';\n  } else {\n    out += ' ucs2length(' + ($data) + ') ';\n  }\n  out += ' ' + ($op) + ' ' + ($schemaValue) + ') { ';\n  var $errorKeyword = $keyword;\n  var $$outStack = $$outStack || [];\n  $$outStack.push(out);\n  out = ''; /* istanbul ignore else */\n  if (it.createErrors !== false) {\n    out += ' { keyword: \\'' + ($errorKeyword || '_limitLength') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { limit: ' + ($schemaValue) + ' } ';\n    if (it.opts.messages !== false) {\n      out += ' , message: \\'should NOT be ';\n      if ($keyword == 'maxLength') {\n        out += 'longer';\n      } else {\n        out += 'shorter';\n      }\n      out += ' than ';\n      if ($isData) {\n        out += '\\' + ' + ($schemaValue) + ' + \\'';\n      } else {\n        out += '' + ($schema);\n      }\n      out += ' characters\\' ';\n    }\n    if (it.opts.verbose) {\n      out += ' , schema:  ';\n      if ($isData) {\n        out += 'validate.schema' + ($schemaPath);\n      } else {\n        out += '' + ($schema);\n      }\n      out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n    }\n    out += ' } ';\n  } else {\n    out += ' {} ';\n  }\n  var __err = out;\n  out = $$outStack.pop();\n  if (!it.compositeRule && $breakOnError) {\n    /* istanbul ignore if */\n    if (it.async) {\n      out += ' throw new ValidationError([' + (__err) + ']); ';\n    } else {\n      out += ' validate.errors = [' + (__err) + ']; return false; ';\n    }\n  } else {\n    out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n  }\n  out += '} ';\n  if ($breakOnError) {\n    out += ' else { ';\n  }\n  return out;\n}\n","'use strict';\nmodule.exports = function generate__limitProperties(it, $keyword, $ruleType) {\n  var out = ' ';\n  var $lvl = it.level;\n  var $dataLvl = it.dataLevel;\n  var $schema = it.schema[$keyword];\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n  var $breakOnError = !it.opts.allErrors;\n  var $errorKeyword;\n  var $data = 'data' + ($dataLvl || '');\n  var $isData = it.opts.$data && $schema && $schema.$data,\n    $schemaValue;\n  if ($isData) {\n    out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';\n    $schemaValue = 'schema' + $lvl;\n  } else {\n    $schemaValue = $schema;\n  }\n  var $op = $keyword == 'maxProperties' ? '>' : '<';\n  out += 'if ( ';\n  if ($isData) {\n    out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \\'number\\') || ';\n  }\n  out += ' Object.keys(' + ($data) + ').length ' + ($op) + ' ' + ($schemaValue) + ') { ';\n  var $errorKeyword = $keyword;\n  var $$outStack = $$outStack || [];\n  $$outStack.push(out);\n  out = ''; /* istanbul ignore else */\n  if (it.createErrors !== false) {\n    out += ' { keyword: \\'' + ($errorKeyword || '_limitProperties') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { limit: ' + ($schemaValue) + ' } ';\n    if (it.opts.messages !== false) {\n      out += ' , message: \\'should NOT have ';\n      if ($keyword == 'maxProperties') {\n        out += 'more';\n      } else {\n        out += 'fewer';\n      }\n      out += ' than ';\n      if ($isData) {\n        out += '\\' + ' + ($schemaValue) + ' + \\'';\n      } else {\n        out += '' + ($schema);\n      }\n      out += ' properties\\' ';\n    }\n    if (it.opts.verbose) {\n      out += ' , schema:  ';\n      if ($isData) {\n        out += 'validate.schema' + ($schemaPath);\n      } else {\n        out += '' + ($schema);\n      }\n      out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n    }\n    out += ' } ';\n  } else {\n    out += ' {} ';\n  }\n  var __err = out;\n  out = $$outStack.pop();\n  if (!it.compositeRule && $breakOnError) {\n    /* istanbul ignore if */\n    if (it.async) {\n      out += ' throw new ValidationError([' + (__err) + ']); ';\n    } else {\n      out += ' validate.errors = [' + (__err) + ']; return false; ';\n    }\n  } else {\n    out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n  }\n  out += '} ';\n  if ($breakOnError) {\n    out += ' else { ';\n  }\n  return out;\n}\n","'use strict';\nmodule.exports = function generate_allOf(it, $keyword, $ruleType) {\n  var out = ' ';\n  var $schema = it.schema[$keyword];\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n  var $breakOnError = !it.opts.allErrors;\n  var $it = it.util.copy(it);\n  var $closingBraces = '';\n  $it.level++;\n  var $nextValid = 'valid' + $it.level;\n  var $currentBaseId = $it.baseId,\n    $allSchemasEmpty = true;\n  var arr1 = $schema;\n  if (arr1) {\n    var $sch, $i = -1,\n      l1 = arr1.length - 1;\n    while ($i < l1) {\n      $sch = arr1[$i += 1];\n      if ((it.opts.strictKeywords ? typeof $sch == 'object' && Object.keys($sch).length > 0 : it.util.schemaHasRules($sch, it.RULES.all))) {\n        $allSchemasEmpty = false;\n        $it.schema = $sch;\n        $it.schemaPath = $schemaPath + '[' + $i + ']';\n        $it.errSchemaPath = $errSchemaPath + '/' + $i;\n        out += '  ' + (it.validate($it)) + ' ';\n        $it.baseId = $currentBaseId;\n        if ($breakOnError) {\n          out += ' if (' + ($nextValid) + ') { ';\n          $closingBraces += '}';\n        }\n      }\n    }\n  }\n  if ($breakOnError) {\n    if ($allSchemasEmpty) {\n      out += ' if (true) { ';\n    } else {\n      out += ' ' + ($closingBraces.slice(0, -1)) + ' ';\n    }\n  }\n  out = it.util.cleanUpCode(out);\n  return out;\n}\n","'use strict';\nmodule.exports = function generate_anyOf(it, $keyword, $ruleType) {\n  var out = ' ';\n  var $lvl = it.level;\n  var $dataLvl = it.dataLevel;\n  var $schema = it.schema[$keyword];\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n  var $breakOnError = !it.opts.allErrors;\n  var $data = 'data' + ($dataLvl || '');\n  var $valid = 'valid' + $lvl;\n  var $errs = 'errs__' + $lvl;\n  var $it = it.util.copy(it);\n  var $closingBraces = '';\n  $it.level++;\n  var $nextValid = 'valid' + $it.level;\n  var $noEmptySchema = $schema.every(function($sch) {\n    return (it.opts.strictKeywords ? typeof $sch == 'object' && Object.keys($sch).length > 0 : it.util.schemaHasRules($sch, it.RULES.all));\n  });\n  if ($noEmptySchema) {\n    var $currentBaseId = $it.baseId;\n    out += ' var ' + ($errs) + ' = errors; var ' + ($valid) + ' = false;  ';\n    var $wasComposite = it.compositeRule;\n    it.compositeRule = $it.compositeRule = true;\n    var arr1 = $schema;\n    if (arr1) {\n      var $sch, $i = -1,\n        l1 = arr1.length - 1;\n      while ($i < l1) {\n        $sch = arr1[$i += 1];\n        $it.schema = $sch;\n        $it.schemaPath = $schemaPath + '[' + $i + ']';\n        $it.errSchemaPath = $errSchemaPath + '/' + $i;\n        out += '  ' + (it.validate($it)) + ' ';\n        $it.baseId = $currentBaseId;\n        out += ' ' + ($valid) + ' = ' + ($valid) + ' || ' + ($nextValid) + '; if (!' + ($valid) + ') { ';\n        $closingBraces += '}';\n      }\n    }\n    it.compositeRule = $it.compositeRule = $wasComposite;\n    out += ' ' + ($closingBraces) + ' if (!' + ($valid) + ') {   var err =   '; /* istanbul ignore else */\n    if (it.createErrors !== false) {\n      out += ' { keyword: \\'' + ('anyOf') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: {} ';\n      if (it.opts.messages !== false) {\n        out += ' , message: \\'should match some schema in anyOf\\' ';\n      }\n      if (it.opts.verbose) {\n        out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n      }\n      out += ' } ';\n    } else {\n      out += ' {} ';\n    }\n    out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n    if (!it.compositeRule && $breakOnError) {\n      /* istanbul ignore if */\n      if (it.async) {\n        out += ' throw new ValidationError(vErrors); ';\n      } else {\n        out += ' validate.errors = vErrors; return false; ';\n      }\n    }\n    out += ' } else {  errors = ' + ($errs) + '; if (vErrors !== null) { if (' + ($errs) + ') vErrors.length = ' + ($errs) + '; else vErrors = null; } ';\n    if (it.opts.allErrors) {\n      out += ' } ';\n    }\n    out = it.util.cleanUpCode(out);\n  } else {\n    if ($breakOnError) {\n      out += ' if (true) { ';\n    }\n  }\n  return out;\n}\n","'use strict';\nmodule.exports = function generate_comment(it, $keyword, $ruleType) {\n  var out = ' ';\n  var $schema = it.schema[$keyword];\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n  var $breakOnError = !it.opts.allErrors;\n  var $comment = it.util.toQuotedString($schema);\n  if (it.opts.$comment === true) {\n    out += ' console.log(' + ($comment) + ');';\n  } else if (typeof it.opts.$comment == 'function') {\n    out += ' self._opts.$comment(' + ($comment) + ', ' + (it.util.toQuotedString($errSchemaPath)) + ', validate.root.schema);';\n  }\n  return out;\n}\n","'use strict';\nmodule.exports = function generate_const(it, $keyword, $ruleType) {\n  var out = ' ';\n  var $lvl = it.level;\n  var $dataLvl = it.dataLevel;\n  var $schema = it.schema[$keyword];\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n  var $breakOnError = !it.opts.allErrors;\n  var $data = 'data' + ($dataLvl || '');\n  var $valid = 'valid' + $lvl;\n  var $isData = it.opts.$data && $schema && $schema.$data,\n    $schemaValue;\n  if ($isData) {\n    out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';\n    $schemaValue = 'schema' + $lvl;\n  } else {\n    $schemaValue = $schema;\n  }\n  if (!$isData) {\n    out += ' var schema' + ($lvl) + ' = validate.schema' + ($schemaPath) + ';';\n  }\n  out += 'var ' + ($valid) + ' = equal(' + ($data) + ', schema' + ($lvl) + '); if (!' + ($valid) + ') {   ';\n  var $$outStack = $$outStack || [];\n  $$outStack.push(out);\n  out = ''; /* istanbul ignore else */\n  if (it.createErrors !== false) {\n    out += ' { keyword: \\'' + ('const') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { allowedValue: schema' + ($lvl) + ' } ';\n    if (it.opts.messages !== false) {\n      out += ' , message: \\'should be equal to constant\\' ';\n    }\n    if (it.opts.verbose) {\n      out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n    }\n    out += ' } ';\n  } else {\n    out += ' {} ';\n  }\n  var __err = out;\n  out = $$outStack.pop();\n  if (!it.compositeRule && $breakOnError) {\n    /* istanbul ignore if */\n    if (it.async) {\n      out += ' throw new ValidationError([' + (__err) + ']); ';\n    } else {\n      out += ' validate.errors = [' + (__err) + ']; return false; ';\n    }\n  } else {\n    out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n  }\n  out += ' }';\n  if ($breakOnError) {\n    out += ' else { ';\n  }\n  return out;\n}\n","'use strict';\nmodule.exports = function generate_contains(it, $keyword, $ruleType) {\n  var out = ' ';\n  var $lvl = it.level;\n  var $dataLvl = it.dataLevel;\n  var $schema = it.schema[$keyword];\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n  var $breakOnError = !it.opts.allErrors;\n  var $data = 'data' + ($dataLvl || '');\n  var $valid = 'valid' + $lvl;\n  var $errs = 'errs__' + $lvl;\n  var $it = it.util.copy(it);\n  var $closingBraces = '';\n  $it.level++;\n  var $nextValid = 'valid' + $it.level;\n  var $idx = 'i' + $lvl,\n    $dataNxt = $it.dataLevel = it.dataLevel + 1,\n    $nextData = 'data' + $dataNxt,\n    $currentBaseId = it.baseId,\n    $nonEmptySchema = (it.opts.strictKeywords ? typeof $schema == 'object' && Object.keys($schema).length > 0 : it.util.schemaHasRules($schema, it.RULES.all));\n  out += 'var ' + ($errs) + ' = errors;var ' + ($valid) + ';';\n  if ($nonEmptySchema) {\n    var $wasComposite = it.compositeRule;\n    it.compositeRule = $it.compositeRule = true;\n    $it.schema = $schema;\n    $it.schemaPath = $schemaPath;\n    $it.errSchemaPath = $errSchemaPath;\n    out += ' var ' + ($nextValid) + ' = false; for (var ' + ($idx) + ' = 0; ' + ($idx) + ' < ' + ($data) + '.length; ' + ($idx) + '++) { ';\n    $it.errorPath = it.util.getPathExpr(it.errorPath, $idx, it.opts.jsonPointers, true);\n    var $passData = $data + '[' + $idx + ']';\n    $it.dataPathArr[$dataNxt] = $idx;\n    var $code = it.validate($it);\n    $it.baseId = $currentBaseId;\n    if (it.util.varOccurences($code, $nextData) < 2) {\n      out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';\n    } else {\n      out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';\n    }\n    out += ' if (' + ($nextValid) + ') break; }  ';\n    it.compositeRule = $it.compositeRule = $wasComposite;\n    out += ' ' + ($closingBraces) + ' if (!' + ($nextValid) + ') {';\n  } else {\n    out += ' if (' + ($data) + '.length == 0) {';\n  }\n  var $$outStack = $$outStack || [];\n  $$outStack.push(out);\n  out = ''; /* istanbul ignore else */\n  if (it.createErrors !== false) {\n    out += ' { keyword: \\'' + ('contains') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: {} ';\n    if (it.opts.messages !== false) {\n      out += ' , message: \\'should contain a valid item\\' ';\n    }\n    if (it.opts.verbose) {\n      out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n    }\n    out += ' } ';\n  } else {\n    out += ' {} ';\n  }\n  var __err = out;\n  out = $$outStack.pop();\n  if (!it.compositeRule && $breakOnError) {\n    /* istanbul ignore if */\n    if (it.async) {\n      out += ' throw new ValidationError([' + (__err) + ']); ';\n    } else {\n      out += ' validate.errors = [' + (__err) + ']; return false; ';\n    }\n  } else {\n    out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n  }\n  out += ' } else { ';\n  if ($nonEmptySchema) {\n    out += '  errors = ' + ($errs) + '; if (vErrors !== null) { if (' + ($errs) + ') vErrors.length = ' + ($errs) + '; else vErrors = null; } ';\n  }\n  if (it.opts.allErrors) {\n    out += ' } ';\n  }\n  out = it.util.cleanUpCode(out);\n  return out;\n}\n","'use strict';\nmodule.exports = function generate_custom(it, $keyword, $ruleType) {\n  var out = ' ';\n  var $lvl = it.level;\n  var $dataLvl = it.dataLevel;\n  var $schema = it.schema[$keyword];\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n  var $breakOnError = !it.opts.allErrors;\n  var $errorKeyword;\n  var $data = 'data' + ($dataLvl || '');\n  var $valid = 'valid' + $lvl;\n  var $errs = 'errs__' + $lvl;\n  var $isData = it.opts.$data && $schema && $schema.$data,\n    $schemaValue;\n  if ($isData) {\n    out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';\n    $schemaValue = 'schema' + $lvl;\n  } else {\n    $schemaValue = $schema;\n  }\n  var $rule = this,\n    $definition = 'definition' + $lvl,\n    $rDef = $rule.definition,\n    $closingBraces = '';\n  var $compile, $inline, $macro, $ruleValidate, $validateCode;\n  if ($isData && $rDef.$data) {\n    $validateCode = 'keywordValidate' + $lvl;\n    var $validateSchema = $rDef.validateSchema;\n    out += ' var ' + ($definition) + ' = RULES.custom[\\'' + ($keyword) + '\\'].definition; var ' + ($validateCode) + ' = ' + ($definition) + '.validate;';\n  } else {\n    $ruleValidate = it.useCustomRule($rule, $schema, it.schema, it);\n    if (!$ruleValidate) return;\n    $schemaValue = 'validate.schema' + $schemaPath;\n    $validateCode = $ruleValidate.code;\n    $compile = $rDef.compile;\n    $inline = $rDef.inline;\n    $macro = $rDef.macro;\n  }\n  var $ruleErrs = $validateCode + '.errors',\n    $i = 'i' + $lvl,\n    $ruleErr = 'ruleErr' + $lvl,\n    $asyncKeyword = $rDef.async;\n  if ($asyncKeyword && !it.async) throw new Error('async keyword in sync schema');\n  if (!($inline || $macro)) {\n    out += '' + ($ruleErrs) + ' = null;';\n  }\n  out += 'var ' + ($errs) + ' = errors;var ' + ($valid) + ';';\n  if ($isData && $rDef.$data) {\n    $closingBraces += '}';\n    out += ' if (' + ($schemaValue) + ' === undefined) { ' + ($valid) + ' = true; } else { ';\n    if ($validateSchema) {\n      $closingBraces += '}';\n      out += ' ' + ($valid) + ' = ' + ($definition) + '.validateSchema(' + ($schemaValue) + '); if (' + ($valid) + ') { ';\n    }\n  }\n  if ($inline) {\n    if ($rDef.statements) {\n      out += ' ' + ($ruleValidate.validate) + ' ';\n    } else {\n      out += ' ' + ($valid) + ' = ' + ($ruleValidate.validate) + '; ';\n    }\n  } else if ($macro) {\n    var $it = it.util.copy(it);\n    var $closingBraces = '';\n    $it.level++;\n    var $nextValid = 'valid' + $it.level;\n    $it.schema = $ruleValidate.validate;\n    $it.schemaPath = '';\n    var $wasComposite = it.compositeRule;\n    it.compositeRule = $it.compositeRule = true;\n    var $code = it.validate($it).replace(/validate\\.schema/g, $validateCode);\n    it.compositeRule = $it.compositeRule = $wasComposite;\n    out += ' ' + ($code);\n  } else {\n    var $$outStack = $$outStack || [];\n    $$outStack.push(out);\n    out = '';\n    out += '  ' + ($validateCode) + '.call( ';\n    if (it.opts.passContext) {\n      out += 'this';\n    } else {\n      out += 'self';\n    }\n    if ($compile || $rDef.schema === false) {\n      out += ' , ' + ($data) + ' ';\n    } else {\n      out += ' , ' + ($schemaValue) + ' , ' + ($data) + ' , validate.schema' + (it.schemaPath) + ' ';\n    }\n    out += ' , (dataPath || \\'\\')';\n    if (it.errorPath != '\"\"') {\n      out += ' + ' + (it.errorPath);\n    }\n    var $parentData = $dataLvl ? 'data' + (($dataLvl - 1) || '') : 'parentData',\n      $parentDataProperty = $dataLvl ? it.dataPathArr[$dataLvl] : 'parentDataProperty';\n    out += ' , ' + ($parentData) + ' , ' + ($parentDataProperty) + ' , rootData )  ';\n    var def_callRuleValidate = out;\n    out = $$outStack.pop();\n    if ($rDef.errors === false) {\n      out += ' ' + ($valid) + ' = ';\n      if ($asyncKeyword) {\n        out += 'await ';\n      }\n      out += '' + (def_callRuleValidate) + '; ';\n    } else {\n      if ($asyncKeyword) {\n        $ruleErrs = 'customErrors' + $lvl;\n        out += ' var ' + ($ruleErrs) + ' = null; try { ' + ($valid) + ' = await ' + (def_callRuleValidate) + '; } catch (e) { ' + ($valid) + ' = false; if (e instanceof ValidationError) ' + ($ruleErrs) + ' = e.errors; else throw e; } ';\n      } else {\n        out += ' ' + ($ruleErrs) + ' = null; ' + ($valid) + ' = ' + (def_callRuleValidate) + '; ';\n      }\n    }\n  }\n  if ($rDef.modifying) {\n    out += ' if (' + ($parentData) + ') ' + ($data) + ' = ' + ($parentData) + '[' + ($parentDataProperty) + '];';\n  }\n  out += '' + ($closingBraces);\n  if ($rDef.valid) {\n    if ($breakOnError) {\n      out += ' if (true) { ';\n    }\n  } else {\n    out += ' if ( ';\n    if ($rDef.valid === undefined) {\n      out += ' !';\n      if ($macro) {\n        out += '' + ($nextValid);\n      } else {\n        out += '' + ($valid);\n      }\n    } else {\n      out += ' ' + (!$rDef.valid) + ' ';\n    }\n    out += ') { ';\n    $errorKeyword = $rule.keyword;\n    var $$outStack = $$outStack || [];\n    $$outStack.push(out);\n    out = '';\n    var $$outStack = $$outStack || [];\n    $$outStack.push(out);\n    out = ''; /* istanbul ignore else */\n    if (it.createErrors !== false) {\n      out += ' { keyword: \\'' + ($errorKeyword || 'custom') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { keyword: \\'' + ($rule.keyword) + '\\' } ';\n      if (it.opts.messages !== false) {\n        out += ' , message: \\'should pass \"' + ($rule.keyword) + '\" keyword validation\\' ';\n      }\n      if (it.opts.verbose) {\n        out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n      }\n      out += ' } ';\n    } else {\n      out += ' {} ';\n    }\n    var __err = out;\n    out = $$outStack.pop();\n    if (!it.compositeRule && $breakOnError) {\n      /* istanbul ignore if */\n      if (it.async) {\n        out += ' throw new ValidationError([' + (__err) + ']); ';\n      } else {\n        out += ' validate.errors = [' + (__err) + ']; return false; ';\n      }\n    } else {\n      out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n    }\n    var def_customError = out;\n    out = $$outStack.pop();\n    if ($inline) {\n      if ($rDef.errors) {\n        if ($rDef.errors != 'full') {\n          out += '  for (var ' + ($i) + '=' + ($errs) + '; ' + ($i) + '<errors; ' + ($i) + '++) { var ' + ($ruleErr) + ' = vErrors[' + ($i) + ']; if (' + ($ruleErr) + '.dataPath === undefined) ' + ($ruleErr) + '.dataPath = (dataPath || \\'\\') + ' + (it.errorPath) + '; if (' + ($ruleErr) + '.schemaPath === undefined) { ' + ($ruleErr) + '.schemaPath = \"' + ($errSchemaPath) + '\"; } ';\n          if (it.opts.verbose) {\n            out += ' ' + ($ruleErr) + '.schema = ' + ($schemaValue) + '; ' + ($ruleErr) + '.data = ' + ($data) + '; ';\n          }\n          out += ' } ';\n        }\n      } else {\n        if ($rDef.errors === false) {\n          out += ' ' + (def_customError) + ' ';\n        } else {\n          out += ' if (' + ($errs) + ' == errors) { ' + (def_customError) + ' } else {  for (var ' + ($i) + '=' + ($errs) + '; ' + ($i) + '<errors; ' + ($i) + '++) { var ' + ($ruleErr) + ' = vErrors[' + ($i) + ']; if (' + ($ruleErr) + '.dataPath === undefined) ' + ($ruleErr) + '.dataPath = (dataPath || \\'\\') + ' + (it.errorPath) + '; if (' + ($ruleErr) + '.schemaPath === undefined) { ' + ($ruleErr) + '.schemaPath = \"' + ($errSchemaPath) + '\"; } ';\n          if (it.opts.verbose) {\n            out += ' ' + ($ruleErr) + '.schema = ' + ($schemaValue) + '; ' + ($ruleErr) + '.data = ' + ($data) + '; ';\n          }\n          out += ' } } ';\n        }\n      }\n    } else if ($macro) {\n      out += '   var err =   '; /* istanbul ignore else */\n      if (it.createErrors !== false) {\n        out += ' { keyword: \\'' + ($errorKeyword || 'custom') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { keyword: \\'' + ($rule.keyword) + '\\' } ';\n        if (it.opts.messages !== false) {\n          out += ' , message: \\'should pass \"' + ($rule.keyword) + '\" keyword validation\\' ';\n        }\n        if (it.opts.verbose) {\n          out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n        }\n        out += ' } ';\n      } else {\n        out += ' {} ';\n      }\n      out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n      if (!it.compositeRule && $breakOnError) {\n        /* istanbul ignore if */\n        if (it.async) {\n          out += ' throw new ValidationError(vErrors); ';\n        } else {\n          out += ' validate.errors = vErrors; return false; ';\n        }\n      }\n    } else {\n      if ($rDef.errors === false) {\n        out += ' ' + (def_customError) + ' ';\n      } else {\n        out += ' if (Array.isArray(' + ($ruleErrs) + ')) { if (vErrors === null) vErrors = ' + ($ruleErrs) + '; else vErrors = vErrors.concat(' + ($ruleErrs) + '); errors = vErrors.length;  for (var ' + ($i) + '=' + ($errs) + '; ' + ($i) + '<errors; ' + ($i) + '++) { var ' + ($ruleErr) + ' = vErrors[' + ($i) + ']; if (' + ($ruleErr) + '.dataPath === undefined) ' + ($ruleErr) + '.dataPath = (dataPath || \\'\\') + ' + (it.errorPath) + ';  ' + ($ruleErr) + '.schemaPath = \"' + ($errSchemaPath) + '\";  ';\n        if (it.opts.verbose) {\n          out += ' ' + ($ruleErr) + '.schema = ' + ($schemaValue) + '; ' + ($ruleErr) + '.data = ' + ($data) + '; ';\n        }\n        out += ' } } else { ' + (def_customError) + ' } ';\n      }\n    }\n    out += ' } ';\n    if ($breakOnError) {\n      out += ' else { ';\n    }\n  }\n  return out;\n}\n","'use strict';\nmodule.exports = function generate_dependencies(it, $keyword, $ruleType) {\n  var out = ' ';\n  var $lvl = it.level;\n  var $dataLvl = it.dataLevel;\n  var $schema = it.schema[$keyword];\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n  var $breakOnError = !it.opts.allErrors;\n  var $data = 'data' + ($dataLvl || '');\n  var $errs = 'errs__' + $lvl;\n  var $it = it.util.copy(it);\n  var $closingBraces = '';\n  $it.level++;\n  var $nextValid = 'valid' + $it.level;\n  var $schemaDeps = {},\n    $propertyDeps = {},\n    $ownProperties = it.opts.ownProperties;\n  for ($property in $schema) {\n    var $sch = $schema[$property];\n    var $deps = Array.isArray($sch) ? $propertyDeps : $schemaDeps;\n    $deps[$property] = $sch;\n  }\n  out += 'var ' + ($errs) + ' = errors;';\n  var $currentErrorPath = it.errorPath;\n  out += 'var missing' + ($lvl) + ';';\n  for (var $property in $propertyDeps) {\n    $deps = $propertyDeps[$property];\n    if ($deps.length) {\n      out += ' if ( ' + ($data) + (it.util.getProperty($property)) + ' !== undefined ';\n      if ($ownProperties) {\n        out += ' && Object.prototype.hasOwnProperty.call(' + ($data) + ', \\'' + (it.util.escapeQuotes($property)) + '\\') ';\n      }\n      if ($breakOnError) {\n        out += ' && ( ';\n        var arr1 = $deps;\n        if (arr1) {\n          var $propertyKey, $i = -1,\n            l1 = arr1.length - 1;\n          while ($i < l1) {\n            $propertyKey = arr1[$i += 1];\n            if ($i) {\n              out += ' || ';\n            }\n            var $prop = it.util.getProperty($propertyKey),\n              $useData = $data + $prop;\n            out += ' ( ( ' + ($useData) + ' === undefined ';\n            if ($ownProperties) {\n              out += ' || ! Object.prototype.hasOwnProperty.call(' + ($data) + ', \\'' + (it.util.escapeQuotes($propertyKey)) + '\\') ';\n            }\n            out += ') && (missing' + ($lvl) + ' = ' + (it.util.toQuotedString(it.opts.jsonPointers ? $propertyKey : $prop)) + ') ) ';\n          }\n        }\n        out += ')) {  ';\n        var $propertyPath = 'missing' + $lvl,\n          $missingProperty = '\\' + ' + $propertyPath + ' + \\'';\n        if (it.opts._errorDataPathProperty) {\n          it.errorPath = it.opts.jsonPointers ? it.util.getPathExpr($currentErrorPath, $propertyPath, true) : $currentErrorPath + ' + ' + $propertyPath;\n        }\n        var $$outStack = $$outStack || [];\n        $$outStack.push(out);\n        out = ''; /* istanbul ignore else */\n        if (it.createErrors !== false) {\n          out += ' { keyword: \\'' + ('dependencies') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { property: \\'' + (it.util.escapeQuotes($property)) + '\\', missingProperty: \\'' + ($missingProperty) + '\\', depsCount: ' + ($deps.length) + ', deps: \\'' + (it.util.escapeQuotes($deps.length == 1 ? $deps[0] : $deps.join(\", \"))) + '\\' } ';\n          if (it.opts.messages !== false) {\n            out += ' , message: \\'should have ';\n            if ($deps.length == 1) {\n              out += 'property ' + (it.util.escapeQuotes($deps[0]));\n            } else {\n              out += 'properties ' + (it.util.escapeQuotes($deps.join(\", \")));\n            }\n            out += ' when property ' + (it.util.escapeQuotes($property)) + ' is present\\' ';\n          }\n          if (it.opts.verbose) {\n            out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n          }\n          out += ' } ';\n        } else {\n          out += ' {} ';\n        }\n        var __err = out;\n        out = $$outStack.pop();\n        if (!it.compositeRule && $breakOnError) {\n          /* istanbul ignore if */\n          if (it.async) {\n            out += ' throw new ValidationError([' + (__err) + ']); ';\n          } else {\n            out += ' validate.errors = [' + (__err) + ']; return false; ';\n          }\n        } else {\n          out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n        }\n      } else {\n        out += ' ) { ';\n        var arr2 = $deps;\n        if (arr2) {\n          var $propertyKey, i2 = -1,\n            l2 = arr2.length - 1;\n          while (i2 < l2) {\n            $propertyKey = arr2[i2 += 1];\n            var $prop = it.util.getProperty($propertyKey),\n              $missingProperty = it.util.escapeQuotes($propertyKey),\n              $useData = $data + $prop;\n            if (it.opts._errorDataPathProperty) {\n              it.errorPath = it.util.getPath($currentErrorPath, $propertyKey, it.opts.jsonPointers);\n            }\n            out += ' if ( ' + ($useData) + ' === undefined ';\n            if ($ownProperties) {\n              out += ' || ! Object.prototype.hasOwnProperty.call(' + ($data) + ', \\'' + (it.util.escapeQuotes($propertyKey)) + '\\') ';\n            }\n            out += ') {  var err =   '; /* istanbul ignore else */\n            if (it.createErrors !== false) {\n              out += ' { keyword: \\'' + ('dependencies') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { property: \\'' + (it.util.escapeQuotes($property)) + '\\', missingProperty: \\'' + ($missingProperty) + '\\', depsCount: ' + ($deps.length) + ', deps: \\'' + (it.util.escapeQuotes($deps.length == 1 ? $deps[0] : $deps.join(\", \"))) + '\\' } ';\n              if (it.opts.messages !== false) {\n                out += ' , message: \\'should have ';\n                if ($deps.length == 1) {\n                  out += 'property ' + (it.util.escapeQuotes($deps[0]));\n                } else {\n                  out += 'properties ' + (it.util.escapeQuotes($deps.join(\", \")));\n                }\n                out += ' when property ' + (it.util.escapeQuotes($property)) + ' is present\\' ';\n              }\n              if (it.opts.verbose) {\n                out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n              }\n              out += ' } ';\n            } else {\n              out += ' {} ';\n            }\n            out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } ';\n          }\n        }\n      }\n      out += ' }   ';\n      if ($breakOnError) {\n        $closingBraces += '}';\n        out += ' else { ';\n      }\n    }\n  }\n  it.errorPath = $currentErrorPath;\n  var $currentBaseId = $it.baseId;\n  for (var $property in $schemaDeps) {\n    var $sch = $schemaDeps[$property];\n    if ((it.opts.strictKeywords ? typeof $sch == 'object' && Object.keys($sch).length > 0 : it.util.schemaHasRules($sch, it.RULES.all))) {\n      out += ' ' + ($nextValid) + ' = true; if ( ' + ($data) + (it.util.getProperty($property)) + ' !== undefined ';\n      if ($ownProperties) {\n        out += ' && Object.prototype.hasOwnProperty.call(' + ($data) + ', \\'' + (it.util.escapeQuotes($property)) + '\\') ';\n      }\n      out += ') { ';\n      $it.schema = $sch;\n      $it.schemaPath = $schemaPath + it.util.getProperty($property);\n      $it.errSchemaPath = $errSchemaPath + '/' + it.util.escapeFragment($property);\n      out += '  ' + (it.validate($it)) + ' ';\n      $it.baseId = $currentBaseId;\n      out += ' }  ';\n      if ($breakOnError) {\n        out += ' if (' + ($nextValid) + ') { ';\n        $closingBraces += '}';\n      }\n    }\n  }\n  if ($breakOnError) {\n    out += '   ' + ($closingBraces) + ' if (' + ($errs) + ' == errors) {';\n  }\n  out = it.util.cleanUpCode(out);\n  return out;\n}\n","'use strict';\nmodule.exports = function generate_enum(it, $keyword, $ruleType) {\n  var out = ' ';\n  var $lvl = it.level;\n  var $dataLvl = it.dataLevel;\n  var $schema = it.schema[$keyword];\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n  var $breakOnError = !it.opts.allErrors;\n  var $data = 'data' + ($dataLvl || '');\n  var $valid = 'valid' + $lvl;\n  var $isData = it.opts.$data && $schema && $schema.$data,\n    $schemaValue;\n  if ($isData) {\n    out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';\n    $schemaValue = 'schema' + $lvl;\n  } else {\n    $schemaValue = $schema;\n  }\n  var $i = 'i' + $lvl,\n    $vSchema = 'schema' + $lvl;\n  if (!$isData) {\n    out += ' var ' + ($vSchema) + ' = validate.schema' + ($schemaPath) + ';';\n  }\n  out += 'var ' + ($valid) + ';';\n  if ($isData) {\n    out += ' if (schema' + ($lvl) + ' === undefined) ' + ($valid) + ' = true; else if (!Array.isArray(schema' + ($lvl) + ')) ' + ($valid) + ' = false; else {';\n  }\n  out += '' + ($valid) + ' = false;for (var ' + ($i) + '=0; ' + ($i) + '<' + ($vSchema) + '.length; ' + ($i) + '++) if (equal(' + ($data) + ', ' + ($vSchema) + '[' + ($i) + '])) { ' + ($valid) + ' = true; break; }';\n  if ($isData) {\n    out += '  }  ';\n  }\n  out += ' if (!' + ($valid) + ') {   ';\n  var $$outStack = $$outStack || [];\n  $$outStack.push(out);\n  out = ''; /* istanbul ignore else */\n  if (it.createErrors !== false) {\n    out += ' { keyword: \\'' + ('enum') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { allowedValues: schema' + ($lvl) + ' } ';\n    if (it.opts.messages !== false) {\n      out += ' , message: \\'should be equal to one of the allowed values\\' ';\n    }\n    if (it.opts.verbose) {\n      out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n    }\n    out += ' } ';\n  } else {\n    out += ' {} ';\n  }\n  var __err = out;\n  out = $$outStack.pop();\n  if (!it.compositeRule && $breakOnError) {\n    /* istanbul ignore if */\n    if (it.async) {\n      out += ' throw new ValidationError([' + (__err) + ']); ';\n    } else {\n      out += ' validate.errors = [' + (__err) + ']; return false; ';\n    }\n  } else {\n    out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n  }\n  out += ' }';\n  if ($breakOnError) {\n    out += ' else { ';\n  }\n  return out;\n}\n","'use strict';\nmodule.exports = function generate_format(it, $keyword, $ruleType) {\n  var out = ' ';\n  var $lvl = it.level;\n  var $dataLvl = it.dataLevel;\n  var $schema = it.schema[$keyword];\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n  var $breakOnError = !it.opts.allErrors;\n  var $data = 'data' + ($dataLvl || '');\n  if (it.opts.format === false) {\n    if ($breakOnError) {\n      out += ' if (true) { ';\n    }\n    return out;\n  }\n  var $isData = it.opts.$data && $schema && $schema.$data,\n    $schemaValue;\n  if ($isData) {\n    out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';\n    $schemaValue = 'schema' + $lvl;\n  } else {\n    $schemaValue = $schema;\n  }\n  var $unknownFormats = it.opts.unknownFormats,\n    $allowUnknown = Array.isArray($unknownFormats);\n  if ($isData) {\n    var $format = 'format' + $lvl,\n      $isObject = 'isObject' + $lvl,\n      $formatType = 'formatType' + $lvl;\n    out += ' var ' + ($format) + ' = formats[' + ($schemaValue) + ']; var ' + ($isObject) + ' = typeof ' + ($format) + ' == \\'object\\' && !(' + ($format) + ' instanceof RegExp) && ' + ($format) + '.validate; var ' + ($formatType) + ' = ' + ($isObject) + ' && ' + ($format) + '.type || \\'string\\'; if (' + ($isObject) + ') { ';\n    if (it.async) {\n      out += ' var async' + ($lvl) + ' = ' + ($format) + '.async; ';\n    }\n    out += ' ' + ($format) + ' = ' + ($format) + '.validate; } if (  ';\n    if ($isData) {\n      out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \\'string\\') || ';\n    }\n    out += ' (';\n    if ($unknownFormats != 'ignore') {\n      out += ' (' + ($schemaValue) + ' && !' + ($format) + ' ';\n      if ($allowUnknown) {\n        out += ' && self._opts.unknownFormats.indexOf(' + ($schemaValue) + ') == -1 ';\n      }\n      out += ') || ';\n    }\n    out += ' (' + ($format) + ' && ' + ($formatType) + ' == \\'' + ($ruleType) + '\\' && !(typeof ' + ($format) + ' == \\'function\\' ? ';\n    if (it.async) {\n      out += ' (async' + ($lvl) + ' ? await ' + ($format) + '(' + ($data) + ') : ' + ($format) + '(' + ($data) + ')) ';\n    } else {\n      out += ' ' + ($format) + '(' + ($data) + ') ';\n    }\n    out += ' : ' + ($format) + '.test(' + ($data) + '))))) {';\n  } else {\n    var $format = it.formats[$schema];\n    if (!$format) {\n      if ($unknownFormats == 'ignore') {\n        it.logger.warn('unknown format \"' + $schema + '\" ignored in schema at path \"' + it.errSchemaPath + '\"');\n        if ($breakOnError) {\n          out += ' if (true) { ';\n        }\n        return out;\n      } else if ($allowUnknown && $unknownFormats.indexOf($schema) >= 0) {\n        if ($breakOnError) {\n          out += ' if (true) { ';\n        }\n        return out;\n      } else {\n        throw new Error('unknown format \"' + $schema + '\" is used in schema at path \"' + it.errSchemaPath + '\"');\n      }\n    }\n    var $isObject = typeof $format == 'object' && !($format instanceof RegExp) && $format.validate;\n    var $formatType = $isObject && $format.type || 'string';\n    if ($isObject) {\n      var $async = $format.async === true;\n      $format = $format.validate;\n    }\n    if ($formatType != $ruleType) {\n      if ($breakOnError) {\n        out += ' if (true) { ';\n      }\n      return out;\n    }\n    if ($async) {\n      if (!it.async) throw new Error('async format in sync schema');\n      var $formatRef = 'formats' + it.util.getProperty($schema) + '.validate';\n      out += ' if (!(await ' + ($formatRef) + '(' + ($data) + '))) { ';\n    } else {\n      out += ' if (! ';\n      var $formatRef = 'formats' + it.util.getProperty($schema);\n      if ($isObject) $formatRef += '.validate';\n      if (typeof $format == 'function') {\n        out += ' ' + ($formatRef) + '(' + ($data) + ') ';\n      } else {\n        out += ' ' + ($formatRef) + '.test(' + ($data) + ') ';\n      }\n      out += ') { ';\n    }\n  }\n  var $$outStack = $$outStack || [];\n  $$outStack.push(out);\n  out = ''; /* istanbul ignore else */\n  if (it.createErrors !== false) {\n    out += ' { keyword: \\'' + ('format') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { format:  ';\n    if ($isData) {\n      out += '' + ($schemaValue);\n    } else {\n      out += '' + (it.util.toQuotedString($schema));\n    }\n    out += '  } ';\n    if (it.opts.messages !== false) {\n      out += ' , message: \\'should match format \"';\n      if ($isData) {\n        out += '\\' + ' + ($schemaValue) + ' + \\'';\n      } else {\n        out += '' + (it.util.escapeQuotes($schema));\n      }\n      out += '\"\\' ';\n    }\n    if (it.opts.verbose) {\n      out += ' , schema:  ';\n      if ($isData) {\n        out += 'validate.schema' + ($schemaPath);\n      } else {\n        out += '' + (it.util.toQuotedString($schema));\n      }\n      out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n    }\n    out += ' } ';\n  } else {\n    out += ' {} ';\n  }\n  var __err = out;\n  out = $$outStack.pop();\n  if (!it.compositeRule && $breakOnError) {\n    /* istanbul ignore if */\n    if (it.async) {\n      out += ' throw new ValidationError([' + (__err) + ']); ';\n    } else {\n      out += ' validate.errors = [' + (__err) + ']; return false; ';\n    }\n  } else {\n    out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n  }\n  out += ' } ';\n  if ($breakOnError) {\n    out += ' else { ';\n  }\n  return out;\n}\n","'use strict';\nmodule.exports = function generate_if(it, $keyword, $ruleType) {\n  var out = ' ';\n  var $lvl = it.level;\n  var $dataLvl = it.dataLevel;\n  var $schema = it.schema[$keyword];\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n  var $breakOnError = !it.opts.allErrors;\n  var $data = 'data' + ($dataLvl || '');\n  var $valid = 'valid' + $lvl;\n  var $errs = 'errs__' + $lvl;\n  var $it = it.util.copy(it);\n  $it.level++;\n  var $nextValid = 'valid' + $it.level;\n  var $thenSch = it.schema['then'],\n    $elseSch = it.schema['else'],\n    $thenPresent = $thenSch !== undefined && (it.opts.strictKeywords ? typeof $thenSch == 'object' && Object.keys($thenSch).length > 0 : it.util.schemaHasRules($thenSch, it.RULES.all)),\n    $elsePresent = $elseSch !== undefined && (it.opts.strictKeywords ? typeof $elseSch == 'object' && Object.keys($elseSch).length > 0 : it.util.schemaHasRules($elseSch, it.RULES.all)),\n    $currentBaseId = $it.baseId;\n  if ($thenPresent || $elsePresent) {\n    var $ifClause;\n    $it.createErrors = false;\n    $it.schema = $schema;\n    $it.schemaPath = $schemaPath;\n    $it.errSchemaPath = $errSchemaPath;\n    out += ' var ' + ($errs) + ' = errors; var ' + ($valid) + ' = true;  ';\n    var $wasComposite = it.compositeRule;\n    it.compositeRule = $it.compositeRule = true;\n    out += '  ' + (it.validate($it)) + ' ';\n    $it.baseId = $currentBaseId;\n    $it.createErrors = true;\n    out += '  errors = ' + ($errs) + '; if (vErrors !== null) { if (' + ($errs) + ') vErrors.length = ' + ($errs) + '; else vErrors = null; }  ';\n    it.compositeRule = $it.compositeRule = $wasComposite;\n    if ($thenPresent) {\n      out += ' if (' + ($nextValid) + ') {  ';\n      $it.schema = it.schema['then'];\n      $it.schemaPath = it.schemaPath + '.then';\n      $it.errSchemaPath = it.errSchemaPath + '/then';\n      out += '  ' + (it.validate($it)) + ' ';\n      $it.baseId = $currentBaseId;\n      out += ' ' + ($valid) + ' = ' + ($nextValid) + '; ';\n      if ($thenPresent && $elsePresent) {\n        $ifClause = 'ifClause' + $lvl;\n        out += ' var ' + ($ifClause) + ' = \\'then\\'; ';\n      } else {\n        $ifClause = '\\'then\\'';\n      }\n      out += ' } ';\n      if ($elsePresent) {\n        out += ' else { ';\n      }\n    } else {\n      out += ' if (!' + ($nextValid) + ') { ';\n    }\n    if ($elsePresent) {\n      $it.schema = it.schema['else'];\n      $it.schemaPath = it.schemaPath + '.else';\n      $it.errSchemaPath = it.errSchemaPath + '/else';\n      out += '  ' + (it.validate($it)) + ' ';\n      $it.baseId = $currentBaseId;\n      out += ' ' + ($valid) + ' = ' + ($nextValid) + '; ';\n      if ($thenPresent && $elsePresent) {\n        $ifClause = 'ifClause' + $lvl;\n        out += ' var ' + ($ifClause) + ' = \\'else\\'; ';\n      } else {\n        $ifClause = '\\'else\\'';\n      }\n      out += ' } ';\n    }\n    out += ' if (!' + ($valid) + ') {   var err =   '; /* istanbul ignore else */\n    if (it.createErrors !== false) {\n      out += ' { keyword: \\'' + ('if') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { failingKeyword: ' + ($ifClause) + ' } ';\n      if (it.opts.messages !== false) {\n        out += ' , message: \\'should match \"\\' + ' + ($ifClause) + ' + \\'\" schema\\' ';\n      }\n      if (it.opts.verbose) {\n        out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n      }\n      out += ' } ';\n    } else {\n      out += ' {} ';\n    }\n    out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n    if (!it.compositeRule && $breakOnError) {\n      /* istanbul ignore if */\n      if (it.async) {\n        out += ' throw new ValidationError(vErrors); ';\n      } else {\n        out += ' validate.errors = vErrors; return false; ';\n      }\n    }\n    out += ' }   ';\n    if ($breakOnError) {\n      out += ' else { ';\n    }\n    out = it.util.cleanUpCode(out);\n  } else {\n    if ($breakOnError) {\n      out += ' if (true) { ';\n    }\n  }\n  return out;\n}\n","'use strict';\n\n//all requires must be explicit because browserify won't work with dynamic requires\nmodule.exports = {\n  '$ref': require('./ref'),\n  allOf: require('./allOf'),\n  anyOf: require('./anyOf'),\n  '$comment': require('./comment'),\n  const: require('./const'),\n  contains: require('./contains'),\n  dependencies: require('./dependencies'),\n  'enum': require('./enum'),\n  format: require('./format'),\n  'if': require('./if'),\n  items: require('./items'),\n  maximum: require('./_limit'),\n  minimum: require('./_limit'),\n  maxItems: require('./_limitItems'),\n  minItems: require('./_limitItems'),\n  maxLength: require('./_limitLength'),\n  minLength: require('./_limitLength'),\n  maxProperties: require('./_limitProperties'),\n  minProperties: require('./_limitProperties'),\n  multipleOf: require('./multipleOf'),\n  not: require('./not'),\n  oneOf: require('./oneOf'),\n  pattern: require('./pattern'),\n  properties: require('./properties'),\n  propertyNames: require('./propertyNames'),\n  required: require('./required'),\n  uniqueItems: require('./uniqueItems'),\n  validate: require('./validate')\n};\n","'use strict';\nmodule.exports = function generate_items(it, $keyword, $ruleType) {\n  var out = ' ';\n  var $lvl = it.level;\n  var $dataLvl = it.dataLevel;\n  var $schema = it.schema[$keyword];\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n  var $breakOnError = !it.opts.allErrors;\n  var $data = 'data' + ($dataLvl || '');\n  var $valid = 'valid' + $lvl;\n  var $errs = 'errs__' + $lvl;\n  var $it = it.util.copy(it);\n  var $closingBraces = '';\n  $it.level++;\n  var $nextValid = 'valid' + $it.level;\n  var $idx = 'i' + $lvl,\n    $dataNxt = $it.dataLevel = it.dataLevel + 1,\n    $nextData = 'data' + $dataNxt,\n    $currentBaseId = it.baseId;\n  out += 'var ' + ($errs) + ' = errors;var ' + ($valid) + ';';\n  if (Array.isArray($schema)) {\n    var $additionalItems = it.schema.additionalItems;\n    if ($additionalItems === false) {\n      out += ' ' + ($valid) + ' = ' + ($data) + '.length <= ' + ($schema.length) + '; ';\n      var $currErrSchemaPath = $errSchemaPath;\n      $errSchemaPath = it.errSchemaPath + '/additionalItems';\n      out += '  if (!' + ($valid) + ') {   ';\n      var $$outStack = $$outStack || [];\n      $$outStack.push(out);\n      out = ''; /* istanbul ignore else */\n      if (it.createErrors !== false) {\n        out += ' { keyword: \\'' + ('additionalItems') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { limit: ' + ($schema.length) + ' } ';\n        if (it.opts.messages !== false) {\n          out += ' , message: \\'should NOT have more than ' + ($schema.length) + ' items\\' ';\n        }\n        if (it.opts.verbose) {\n          out += ' , schema: false , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n        }\n        out += ' } ';\n      } else {\n        out += ' {} ';\n      }\n      var __err = out;\n      out = $$outStack.pop();\n      if (!it.compositeRule && $breakOnError) {\n        /* istanbul ignore if */\n        if (it.async) {\n          out += ' throw new ValidationError([' + (__err) + ']); ';\n        } else {\n          out += ' validate.errors = [' + (__err) + ']; return false; ';\n        }\n      } else {\n        out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n      }\n      out += ' } ';\n      $errSchemaPath = $currErrSchemaPath;\n      if ($breakOnError) {\n        $closingBraces += '}';\n        out += ' else { ';\n      }\n    }\n    var arr1 = $schema;\n    if (arr1) {\n      var $sch, $i = -1,\n        l1 = arr1.length - 1;\n      while ($i < l1) {\n        $sch = arr1[$i += 1];\n        if ((it.opts.strictKeywords ? typeof $sch == 'object' && Object.keys($sch).length > 0 : it.util.schemaHasRules($sch, it.RULES.all))) {\n          out += ' ' + ($nextValid) + ' = true; if (' + ($data) + '.length > ' + ($i) + ') { ';\n          var $passData = $data + '[' + $i + ']';\n          $it.schema = $sch;\n          $it.schemaPath = $schemaPath + '[' + $i + ']';\n          $it.errSchemaPath = $errSchemaPath + '/' + $i;\n          $it.errorPath = it.util.getPathExpr(it.errorPath, $i, it.opts.jsonPointers, true);\n          $it.dataPathArr[$dataNxt] = $i;\n          var $code = it.validate($it);\n          $it.baseId = $currentBaseId;\n          if (it.util.varOccurences($code, $nextData) < 2) {\n            out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';\n          } else {\n            out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';\n          }\n          out += ' }  ';\n          if ($breakOnError) {\n            out += ' if (' + ($nextValid) + ') { ';\n            $closingBraces += '}';\n          }\n        }\n      }\n    }\n    if (typeof $additionalItems == 'object' && (it.opts.strictKeywords ? typeof $additionalItems == 'object' && Object.keys($additionalItems).length > 0 : it.util.schemaHasRules($additionalItems, it.RULES.all))) {\n      $it.schema = $additionalItems;\n      $it.schemaPath = it.schemaPath + '.additionalItems';\n      $it.errSchemaPath = it.errSchemaPath + '/additionalItems';\n      out += ' ' + ($nextValid) + ' = true; if (' + ($data) + '.length > ' + ($schema.length) + ') {  for (var ' + ($idx) + ' = ' + ($schema.length) + '; ' + ($idx) + ' < ' + ($data) + '.length; ' + ($idx) + '++) { ';\n      $it.errorPath = it.util.getPathExpr(it.errorPath, $idx, it.opts.jsonPointers, true);\n      var $passData = $data + '[' + $idx + ']';\n      $it.dataPathArr[$dataNxt] = $idx;\n      var $code = it.validate($it);\n      $it.baseId = $currentBaseId;\n      if (it.util.varOccurences($code, $nextData) < 2) {\n        out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';\n      } else {\n        out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';\n      }\n      if ($breakOnError) {\n        out += ' if (!' + ($nextValid) + ') break; ';\n      }\n      out += ' } }  ';\n      if ($breakOnError) {\n        out += ' if (' + ($nextValid) + ') { ';\n        $closingBraces += '}';\n      }\n    }\n  } else if ((it.opts.strictKeywords ? typeof $schema == 'object' && Object.keys($schema).length > 0 : it.util.schemaHasRules($schema, it.RULES.all))) {\n    $it.schema = $schema;\n    $it.schemaPath = $schemaPath;\n    $it.errSchemaPath = $errSchemaPath;\n    out += '  for (var ' + ($idx) + ' = ' + (0) + '; ' + ($idx) + ' < ' + ($data) + '.length; ' + ($idx) + '++) { ';\n    $it.errorPath = it.util.getPathExpr(it.errorPath, $idx, it.opts.jsonPointers, true);\n    var $passData = $data + '[' + $idx + ']';\n    $it.dataPathArr[$dataNxt] = $idx;\n    var $code = it.validate($it);\n    $it.baseId = $currentBaseId;\n    if (it.util.varOccurences($code, $nextData) < 2) {\n      out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';\n    } else {\n      out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';\n    }\n    if ($breakOnError) {\n      out += ' if (!' + ($nextValid) + ') break; ';\n    }\n    out += ' }';\n  }\n  if ($breakOnError) {\n    out += ' ' + ($closingBraces) + ' if (' + ($errs) + ' == errors) {';\n  }\n  out = it.util.cleanUpCode(out);\n  return out;\n}\n","'use strict';\nmodule.exports = function generate_multipleOf(it, $keyword, $ruleType) {\n  var out = ' ';\n  var $lvl = it.level;\n  var $dataLvl = it.dataLevel;\n  var $schema = it.schema[$keyword];\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n  var $breakOnError = !it.opts.allErrors;\n  var $data = 'data' + ($dataLvl || '');\n  var $isData = it.opts.$data && $schema && $schema.$data,\n    $schemaValue;\n  if ($isData) {\n    out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';\n    $schemaValue = 'schema' + $lvl;\n  } else {\n    $schemaValue = $schema;\n  }\n  out += 'var division' + ($lvl) + ';if (';\n  if ($isData) {\n    out += ' ' + ($schemaValue) + ' !== undefined && ( typeof ' + ($schemaValue) + ' != \\'number\\' || ';\n  }\n  out += ' (division' + ($lvl) + ' = ' + ($data) + ' / ' + ($schemaValue) + ', ';\n  if (it.opts.multipleOfPrecision) {\n    out += ' Math.abs(Math.round(division' + ($lvl) + ') - division' + ($lvl) + ') > 1e-' + (it.opts.multipleOfPrecision) + ' ';\n  } else {\n    out += ' division' + ($lvl) + ' !== parseInt(division' + ($lvl) + ') ';\n  }\n  out += ' ) ';\n  if ($isData) {\n    out += '  )  ';\n  }\n  out += ' ) {   ';\n  var $$outStack = $$outStack || [];\n  $$outStack.push(out);\n  out = ''; /* istanbul ignore else */\n  if (it.createErrors !== false) {\n    out += ' { keyword: \\'' + ('multipleOf') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { multipleOf: ' + ($schemaValue) + ' } ';\n    if (it.opts.messages !== false) {\n      out += ' , message: \\'should be multiple of ';\n      if ($isData) {\n        out += '\\' + ' + ($schemaValue);\n      } else {\n        out += '' + ($schemaValue) + '\\'';\n      }\n    }\n    if (it.opts.verbose) {\n      out += ' , schema:  ';\n      if ($isData) {\n        out += 'validate.schema' + ($schemaPath);\n      } else {\n        out += '' + ($schema);\n      }\n      out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n    }\n    out += ' } ';\n  } else {\n    out += ' {} ';\n  }\n  var __err = out;\n  out = $$outStack.pop();\n  if (!it.compositeRule && $breakOnError) {\n    /* istanbul ignore if */\n    if (it.async) {\n      out += ' throw new ValidationError([' + (__err) + ']); ';\n    } else {\n      out += ' validate.errors = [' + (__err) + ']; return false; ';\n    }\n  } else {\n    out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n  }\n  out += '} ';\n  if ($breakOnError) {\n    out += ' else { ';\n  }\n  return out;\n}\n","'use strict';\nmodule.exports = function generate_not(it, $keyword, $ruleType) {\n  var out = ' ';\n  var $lvl = it.level;\n  var $dataLvl = it.dataLevel;\n  var $schema = it.schema[$keyword];\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n  var $breakOnError = !it.opts.allErrors;\n  var $data = 'data' + ($dataLvl || '');\n  var $errs = 'errs__' + $lvl;\n  var $it = it.util.copy(it);\n  $it.level++;\n  var $nextValid = 'valid' + $it.level;\n  if ((it.opts.strictKeywords ? typeof $schema == 'object' && Object.keys($schema).length > 0 : it.util.schemaHasRules($schema, it.RULES.all))) {\n    $it.schema = $schema;\n    $it.schemaPath = $schemaPath;\n    $it.errSchemaPath = $errSchemaPath;\n    out += ' var ' + ($errs) + ' = errors;  ';\n    var $wasComposite = it.compositeRule;\n    it.compositeRule = $it.compositeRule = true;\n    $it.createErrors = false;\n    var $allErrorsOption;\n    if ($it.opts.allErrors) {\n      $allErrorsOption = $it.opts.allErrors;\n      $it.opts.allErrors = false;\n    }\n    out += ' ' + (it.validate($it)) + ' ';\n    $it.createErrors = true;\n    if ($allErrorsOption) $it.opts.allErrors = $allErrorsOption;\n    it.compositeRule = $it.compositeRule = $wasComposite;\n    out += ' if (' + ($nextValid) + ') {   ';\n    var $$outStack = $$outStack || [];\n    $$outStack.push(out);\n    out = ''; /* istanbul ignore else */\n    if (it.createErrors !== false) {\n      out += ' { keyword: \\'' + ('not') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: {} ';\n      if (it.opts.messages !== false) {\n        out += ' , message: \\'should NOT be valid\\' ';\n      }\n      if (it.opts.verbose) {\n        out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n      }\n      out += ' } ';\n    } else {\n      out += ' {} ';\n    }\n    var __err = out;\n    out = $$outStack.pop();\n    if (!it.compositeRule && $breakOnError) {\n      /* istanbul ignore if */\n      if (it.async) {\n        out += ' throw new ValidationError([' + (__err) + ']); ';\n      } else {\n        out += ' validate.errors = [' + (__err) + ']; return false; ';\n      }\n    } else {\n      out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n    }\n    out += ' } else {  errors = ' + ($errs) + '; if (vErrors !== null) { if (' + ($errs) + ') vErrors.length = ' + ($errs) + '; else vErrors = null; } ';\n    if (it.opts.allErrors) {\n      out += ' } ';\n    }\n  } else {\n    out += '  var err =   '; /* istanbul ignore else */\n    if (it.createErrors !== false) {\n      out += ' { keyword: \\'' + ('not') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: {} ';\n      if (it.opts.messages !== false) {\n        out += ' , message: \\'should NOT be valid\\' ';\n      }\n      if (it.opts.verbose) {\n        out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n      }\n      out += ' } ';\n    } else {\n      out += ' {} ';\n    }\n    out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n    if ($breakOnError) {\n      out += ' if (false) { ';\n    }\n  }\n  return out;\n}\n","'use strict';\nmodule.exports = function generate_oneOf(it, $keyword, $ruleType) {\n  var out = ' ';\n  var $lvl = it.level;\n  var $dataLvl = it.dataLevel;\n  var $schema = it.schema[$keyword];\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n  var $breakOnError = !it.opts.allErrors;\n  var $data = 'data' + ($dataLvl || '');\n  var $valid = 'valid' + $lvl;\n  var $errs = 'errs__' + $lvl;\n  var $it = it.util.copy(it);\n  var $closingBraces = '';\n  $it.level++;\n  var $nextValid = 'valid' + $it.level;\n  var $currentBaseId = $it.baseId,\n    $prevValid = 'prevValid' + $lvl,\n    $passingSchemas = 'passingSchemas' + $lvl;\n  out += 'var ' + ($errs) + ' = errors , ' + ($prevValid) + ' = false , ' + ($valid) + ' = false , ' + ($passingSchemas) + ' = null; ';\n  var $wasComposite = it.compositeRule;\n  it.compositeRule = $it.compositeRule = true;\n  var arr1 = $schema;\n  if (arr1) {\n    var $sch, $i = -1,\n      l1 = arr1.length - 1;\n    while ($i < l1) {\n      $sch = arr1[$i += 1];\n      if ((it.opts.strictKeywords ? typeof $sch == 'object' && Object.keys($sch).length > 0 : it.util.schemaHasRules($sch, it.RULES.all))) {\n        $it.schema = $sch;\n        $it.schemaPath = $schemaPath + '[' + $i + ']';\n        $it.errSchemaPath = $errSchemaPath + '/' + $i;\n        out += '  ' + (it.validate($it)) + ' ';\n        $it.baseId = $currentBaseId;\n      } else {\n        out += ' var ' + ($nextValid) + ' = true; ';\n      }\n      if ($i) {\n        out += ' if (' + ($nextValid) + ' && ' + ($prevValid) + ') { ' + ($valid) + ' = false; ' + ($passingSchemas) + ' = [' + ($passingSchemas) + ', ' + ($i) + ']; } else { ';\n        $closingBraces += '}';\n      }\n      out += ' if (' + ($nextValid) + ') { ' + ($valid) + ' = ' + ($prevValid) + ' = true; ' + ($passingSchemas) + ' = ' + ($i) + '; }';\n    }\n  }\n  it.compositeRule = $it.compositeRule = $wasComposite;\n  out += '' + ($closingBraces) + 'if (!' + ($valid) + ') {   var err =   '; /* istanbul ignore else */\n  if (it.createErrors !== false) {\n    out += ' { keyword: \\'' + ('oneOf') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { passingSchemas: ' + ($passingSchemas) + ' } ';\n    if (it.opts.messages !== false) {\n      out += ' , message: \\'should match exactly one schema in oneOf\\' ';\n    }\n    if (it.opts.verbose) {\n      out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n    }\n    out += ' } ';\n  } else {\n    out += ' {} ';\n  }\n  out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n  if (!it.compositeRule && $breakOnError) {\n    /* istanbul ignore if */\n    if (it.async) {\n      out += ' throw new ValidationError(vErrors); ';\n    } else {\n      out += ' validate.errors = vErrors; return false; ';\n    }\n  }\n  out += '} else {  errors = ' + ($errs) + '; if (vErrors !== null) { if (' + ($errs) + ') vErrors.length = ' + ($errs) + '; else vErrors = null; }';\n  if (it.opts.allErrors) {\n    out += ' } ';\n  }\n  return out;\n}\n","'use strict';\nmodule.exports = function generate_pattern(it, $keyword, $ruleType) {\n  var out = ' ';\n  var $lvl = it.level;\n  var $dataLvl = it.dataLevel;\n  var $schema = it.schema[$keyword];\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n  var $breakOnError = !it.opts.allErrors;\n  var $data = 'data' + ($dataLvl || '');\n  var $isData = it.opts.$data && $schema && $schema.$data,\n    $schemaValue;\n  if ($isData) {\n    out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';\n    $schemaValue = 'schema' + $lvl;\n  } else {\n    $schemaValue = $schema;\n  }\n  var $regexp = $isData ? '(new RegExp(' + $schemaValue + '))' : it.usePattern($schema);\n  out += 'if ( ';\n  if ($isData) {\n    out += ' (' + ($schemaValue) + ' !== undefined && typeof ' + ($schemaValue) + ' != \\'string\\') || ';\n  }\n  out += ' !' + ($regexp) + '.test(' + ($data) + ') ) {   ';\n  var $$outStack = $$outStack || [];\n  $$outStack.push(out);\n  out = ''; /* istanbul ignore else */\n  if (it.createErrors !== false) {\n    out += ' { keyword: \\'' + ('pattern') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { pattern:  ';\n    if ($isData) {\n      out += '' + ($schemaValue);\n    } else {\n      out += '' + (it.util.toQuotedString($schema));\n    }\n    out += '  } ';\n    if (it.opts.messages !== false) {\n      out += ' , message: \\'should match pattern \"';\n      if ($isData) {\n        out += '\\' + ' + ($schemaValue) + ' + \\'';\n      } else {\n        out += '' + (it.util.escapeQuotes($schema));\n      }\n      out += '\"\\' ';\n    }\n    if (it.opts.verbose) {\n      out += ' , schema:  ';\n      if ($isData) {\n        out += 'validate.schema' + ($schemaPath);\n      } else {\n        out += '' + (it.util.toQuotedString($schema));\n      }\n      out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n    }\n    out += ' } ';\n  } else {\n    out += ' {} ';\n  }\n  var __err = out;\n  out = $$outStack.pop();\n  if (!it.compositeRule && $breakOnError) {\n    /* istanbul ignore if */\n    if (it.async) {\n      out += ' throw new ValidationError([' + (__err) + ']); ';\n    } else {\n      out += ' validate.errors = [' + (__err) + ']; return false; ';\n    }\n  } else {\n    out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n  }\n  out += '} ';\n  if ($breakOnError) {\n    out += ' else { ';\n  }\n  return out;\n}\n","'use strict';\nmodule.exports = function generate_properties(it, $keyword, $ruleType) {\n  var out = ' ';\n  var $lvl = it.level;\n  var $dataLvl = it.dataLevel;\n  var $schema = it.schema[$keyword];\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n  var $breakOnError = !it.opts.allErrors;\n  var $data = 'data' + ($dataLvl || '');\n  var $errs = 'errs__' + $lvl;\n  var $it = it.util.copy(it);\n  var $closingBraces = '';\n  $it.level++;\n  var $nextValid = 'valid' + $it.level;\n  var $key = 'key' + $lvl,\n    $idx = 'idx' + $lvl,\n    $dataNxt = $it.dataLevel = it.dataLevel + 1,\n    $nextData = 'data' + $dataNxt,\n    $dataProperties = 'dataProperties' + $lvl;\n  var $schemaKeys = Object.keys($schema || {}),\n    $pProperties = it.schema.patternProperties || {},\n    $pPropertyKeys = Object.keys($pProperties),\n    $aProperties = it.schema.additionalProperties,\n    $someProperties = $schemaKeys.length || $pPropertyKeys.length,\n    $noAdditional = $aProperties === false,\n    $additionalIsSchema = typeof $aProperties == 'object' && Object.keys($aProperties).length,\n    $removeAdditional = it.opts.removeAdditional,\n    $checkAdditional = $noAdditional || $additionalIsSchema || $removeAdditional,\n    $ownProperties = it.opts.ownProperties,\n    $currentBaseId = it.baseId;\n  var $required = it.schema.required;\n  if ($required && !(it.opts.$data && $required.$data) && $required.length < it.opts.loopRequired) var $requiredHash = it.util.toHash($required);\n  out += 'var ' + ($errs) + ' = errors;var ' + ($nextValid) + ' = true;';\n  if ($ownProperties) {\n    out += ' var ' + ($dataProperties) + ' = undefined;';\n  }\n  if ($checkAdditional) {\n    if ($ownProperties) {\n      out += ' ' + ($dataProperties) + ' = ' + ($dataProperties) + ' || Object.keys(' + ($data) + '); for (var ' + ($idx) + '=0; ' + ($idx) + '<' + ($dataProperties) + '.length; ' + ($idx) + '++) { var ' + ($key) + ' = ' + ($dataProperties) + '[' + ($idx) + ']; ';\n    } else {\n      out += ' for (var ' + ($key) + ' in ' + ($data) + ') { ';\n    }\n    if ($someProperties) {\n      out += ' var isAdditional' + ($lvl) + ' = !(false ';\n      if ($schemaKeys.length) {\n        if ($schemaKeys.length > 8) {\n          out += ' || validate.schema' + ($schemaPath) + '.hasOwnProperty(' + ($key) + ') ';\n        } else {\n          var arr1 = $schemaKeys;\n          if (arr1) {\n            var $propertyKey, i1 = -1,\n              l1 = arr1.length - 1;\n            while (i1 < l1) {\n              $propertyKey = arr1[i1 += 1];\n              out += ' || ' + ($key) + ' == ' + (it.util.toQuotedString($propertyKey)) + ' ';\n            }\n          }\n        }\n      }\n      if ($pPropertyKeys.length) {\n        var arr2 = $pPropertyKeys;\n        if (arr2) {\n          var $pProperty, $i = -1,\n            l2 = arr2.length - 1;\n          while ($i < l2) {\n            $pProperty = arr2[$i += 1];\n            out += ' || ' + (it.usePattern($pProperty)) + '.test(' + ($key) + ') ';\n          }\n        }\n      }\n      out += ' ); if (isAdditional' + ($lvl) + ') { ';\n    }\n    if ($removeAdditional == 'all') {\n      out += ' delete ' + ($data) + '[' + ($key) + ']; ';\n    } else {\n      var $currentErrorPath = it.errorPath;\n      var $additionalProperty = '\\' + ' + $key + ' + \\'';\n      if (it.opts._errorDataPathProperty) {\n        it.errorPath = it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);\n      }\n      if ($noAdditional) {\n        if ($removeAdditional) {\n          out += ' delete ' + ($data) + '[' + ($key) + ']; ';\n        } else {\n          out += ' ' + ($nextValid) + ' = false; ';\n          var $currErrSchemaPath = $errSchemaPath;\n          $errSchemaPath = it.errSchemaPath + '/additionalProperties';\n          var $$outStack = $$outStack || [];\n          $$outStack.push(out);\n          out = ''; /* istanbul ignore else */\n          if (it.createErrors !== false) {\n            out += ' { keyword: \\'' + ('additionalProperties') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { additionalProperty: \\'' + ($additionalProperty) + '\\' } ';\n            if (it.opts.messages !== false) {\n              out += ' , message: \\'';\n              if (it.opts._errorDataPathProperty) {\n                out += 'is an invalid additional property';\n              } else {\n                out += 'should NOT have additional properties';\n              }\n              out += '\\' ';\n            }\n            if (it.opts.verbose) {\n              out += ' , schema: false , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n            }\n            out += ' } ';\n          } else {\n            out += ' {} ';\n          }\n          var __err = out;\n          out = $$outStack.pop();\n          if (!it.compositeRule && $breakOnError) {\n            /* istanbul ignore if */\n            if (it.async) {\n              out += ' throw new ValidationError([' + (__err) + ']); ';\n            } else {\n              out += ' validate.errors = [' + (__err) + ']; return false; ';\n            }\n          } else {\n            out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n          }\n          $errSchemaPath = $currErrSchemaPath;\n          if ($breakOnError) {\n            out += ' break; ';\n          }\n        }\n      } else if ($additionalIsSchema) {\n        if ($removeAdditional == 'failing') {\n          out += ' var ' + ($errs) + ' = errors;  ';\n          var $wasComposite = it.compositeRule;\n          it.compositeRule = $it.compositeRule = true;\n          $it.schema = $aProperties;\n          $it.schemaPath = it.schemaPath + '.additionalProperties';\n          $it.errSchemaPath = it.errSchemaPath + '/additionalProperties';\n          $it.errorPath = it.opts._errorDataPathProperty ? it.errorPath : it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);\n          var $passData = $data + '[' + $key + ']';\n          $it.dataPathArr[$dataNxt] = $key;\n          var $code = it.validate($it);\n          $it.baseId = $currentBaseId;\n          if (it.util.varOccurences($code, $nextData) < 2) {\n            out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';\n          } else {\n            out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';\n          }\n          out += ' if (!' + ($nextValid) + ') { errors = ' + ($errs) + '; if (validate.errors !== null) { if (errors) validate.errors.length = errors; else validate.errors = null; } delete ' + ($data) + '[' + ($key) + ']; }  ';\n          it.compositeRule = $it.compositeRule = $wasComposite;\n        } else {\n          $it.schema = $aProperties;\n          $it.schemaPath = it.schemaPath + '.additionalProperties';\n          $it.errSchemaPath = it.errSchemaPath + '/additionalProperties';\n          $it.errorPath = it.opts._errorDataPathProperty ? it.errorPath : it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);\n          var $passData = $data + '[' + $key + ']';\n          $it.dataPathArr[$dataNxt] = $key;\n          var $code = it.validate($it);\n          $it.baseId = $currentBaseId;\n          if (it.util.varOccurences($code, $nextData) < 2) {\n            out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';\n          } else {\n            out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';\n          }\n          if ($breakOnError) {\n            out += ' if (!' + ($nextValid) + ') break; ';\n          }\n        }\n      }\n      it.errorPath = $currentErrorPath;\n    }\n    if ($someProperties) {\n      out += ' } ';\n    }\n    out += ' }  ';\n    if ($breakOnError) {\n      out += ' if (' + ($nextValid) + ') { ';\n      $closingBraces += '}';\n    }\n  }\n  var $useDefaults = it.opts.useDefaults && !it.compositeRule;\n  if ($schemaKeys.length) {\n    var arr3 = $schemaKeys;\n    if (arr3) {\n      var $propertyKey, i3 = -1,\n        l3 = arr3.length - 1;\n      while (i3 < l3) {\n        $propertyKey = arr3[i3 += 1];\n        var $sch = $schema[$propertyKey];\n        if ((it.opts.strictKeywords ? typeof $sch == 'object' && Object.keys($sch).length > 0 : it.util.schemaHasRules($sch, it.RULES.all))) {\n          var $prop = it.util.getProperty($propertyKey),\n            $passData = $data + $prop,\n            $hasDefault = $useDefaults && $sch.default !== undefined;\n          $it.schema = $sch;\n          $it.schemaPath = $schemaPath + $prop;\n          $it.errSchemaPath = $errSchemaPath + '/' + it.util.escapeFragment($propertyKey);\n          $it.errorPath = it.util.getPath(it.errorPath, $propertyKey, it.opts.jsonPointers);\n          $it.dataPathArr[$dataNxt] = it.util.toQuotedString($propertyKey);\n          var $code = it.validate($it);\n          $it.baseId = $currentBaseId;\n          if (it.util.varOccurences($code, $nextData) < 2) {\n            $code = it.util.varReplace($code, $nextData, $passData);\n            var $useData = $passData;\n          } else {\n            var $useData = $nextData;\n            out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ';\n          }\n          if ($hasDefault) {\n            out += ' ' + ($code) + ' ';\n          } else {\n            if ($requiredHash && $requiredHash[$propertyKey]) {\n              out += ' if ( ' + ($useData) + ' === undefined ';\n              if ($ownProperties) {\n                out += ' || ! Object.prototype.hasOwnProperty.call(' + ($data) + ', \\'' + (it.util.escapeQuotes($propertyKey)) + '\\') ';\n              }\n              out += ') { ' + ($nextValid) + ' = false; ';\n              var $currentErrorPath = it.errorPath,\n                $currErrSchemaPath = $errSchemaPath,\n                $missingProperty = it.util.escapeQuotes($propertyKey);\n              if (it.opts._errorDataPathProperty) {\n                it.errorPath = it.util.getPath($currentErrorPath, $propertyKey, it.opts.jsonPointers);\n              }\n              $errSchemaPath = it.errSchemaPath + '/required';\n              var $$outStack = $$outStack || [];\n              $$outStack.push(out);\n              out = ''; /* istanbul ignore else */\n              if (it.createErrors !== false) {\n                out += ' { keyword: \\'' + ('required') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { missingProperty: \\'' + ($missingProperty) + '\\' } ';\n                if (it.opts.messages !== false) {\n                  out += ' , message: \\'';\n                  if (it.opts._errorDataPathProperty) {\n                    out += 'is a required property';\n                  } else {\n                    out += 'should have required property \\\\\\'' + ($missingProperty) + '\\\\\\'';\n                  }\n                  out += '\\' ';\n                }\n                if (it.opts.verbose) {\n                  out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n                }\n                out += ' } ';\n              } else {\n                out += ' {} ';\n              }\n              var __err = out;\n              out = $$outStack.pop();\n              if (!it.compositeRule && $breakOnError) {\n                /* istanbul ignore if */\n                if (it.async) {\n                  out += ' throw new ValidationError([' + (__err) + ']); ';\n                } else {\n                  out += ' validate.errors = [' + (__err) + ']; return false; ';\n                }\n              } else {\n                out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n              }\n              $errSchemaPath = $currErrSchemaPath;\n              it.errorPath = $currentErrorPath;\n              out += ' } else { ';\n            } else {\n              if ($breakOnError) {\n                out += ' if ( ' + ($useData) + ' === undefined ';\n                if ($ownProperties) {\n                  out += ' || ! Object.prototype.hasOwnProperty.call(' + ($data) + ', \\'' + (it.util.escapeQuotes($propertyKey)) + '\\') ';\n                }\n                out += ') { ' + ($nextValid) + ' = true; } else { ';\n              } else {\n                out += ' if (' + ($useData) + ' !== undefined ';\n                if ($ownProperties) {\n                  out += ' &&   Object.prototype.hasOwnProperty.call(' + ($data) + ', \\'' + (it.util.escapeQuotes($propertyKey)) + '\\') ';\n                }\n                out += ' ) { ';\n              }\n            }\n            out += ' ' + ($code) + ' } ';\n          }\n        }\n        if ($breakOnError) {\n          out += ' if (' + ($nextValid) + ') { ';\n          $closingBraces += '}';\n        }\n      }\n    }\n  }\n  if ($pPropertyKeys.length) {\n    var arr4 = $pPropertyKeys;\n    if (arr4) {\n      var $pProperty, i4 = -1,\n        l4 = arr4.length - 1;\n      while (i4 < l4) {\n        $pProperty = arr4[i4 += 1];\n        var $sch = $pProperties[$pProperty];\n        if ((it.opts.strictKeywords ? typeof $sch == 'object' && Object.keys($sch).length > 0 : it.util.schemaHasRules($sch, it.RULES.all))) {\n          $it.schema = $sch;\n          $it.schemaPath = it.schemaPath + '.patternProperties' + it.util.getProperty($pProperty);\n          $it.errSchemaPath = it.errSchemaPath + '/patternProperties/' + it.util.escapeFragment($pProperty);\n          if ($ownProperties) {\n            out += ' ' + ($dataProperties) + ' = ' + ($dataProperties) + ' || Object.keys(' + ($data) + '); for (var ' + ($idx) + '=0; ' + ($idx) + '<' + ($dataProperties) + '.length; ' + ($idx) + '++) { var ' + ($key) + ' = ' + ($dataProperties) + '[' + ($idx) + ']; ';\n          } else {\n            out += ' for (var ' + ($key) + ' in ' + ($data) + ') { ';\n          }\n          out += ' if (' + (it.usePattern($pProperty)) + '.test(' + ($key) + ')) { ';\n          $it.errorPath = it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);\n          var $passData = $data + '[' + $key + ']';\n          $it.dataPathArr[$dataNxt] = $key;\n          var $code = it.validate($it);\n          $it.baseId = $currentBaseId;\n          if (it.util.varOccurences($code, $nextData) < 2) {\n            out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';\n          } else {\n            out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';\n          }\n          if ($breakOnError) {\n            out += ' if (!' + ($nextValid) + ') break; ';\n          }\n          out += ' } ';\n          if ($breakOnError) {\n            out += ' else ' + ($nextValid) + ' = true; ';\n          }\n          out += ' }  ';\n          if ($breakOnError) {\n            out += ' if (' + ($nextValid) + ') { ';\n            $closingBraces += '}';\n          }\n        }\n      }\n    }\n  }\n  if ($breakOnError) {\n    out += ' ' + ($closingBraces) + ' if (' + ($errs) + ' == errors) {';\n  }\n  out = it.util.cleanUpCode(out);\n  return out;\n}\n","'use strict';\nmodule.exports = function generate_propertyNames(it, $keyword, $ruleType) {\n  var out = ' ';\n  var $lvl = it.level;\n  var $dataLvl = it.dataLevel;\n  var $schema = it.schema[$keyword];\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n  var $breakOnError = !it.opts.allErrors;\n  var $data = 'data' + ($dataLvl || '');\n  var $errs = 'errs__' + $lvl;\n  var $it = it.util.copy(it);\n  var $closingBraces = '';\n  $it.level++;\n  var $nextValid = 'valid' + $it.level;\n  out += 'var ' + ($errs) + ' = errors;';\n  if ((it.opts.strictKeywords ? typeof $schema == 'object' && Object.keys($schema).length > 0 : it.util.schemaHasRules($schema, it.RULES.all))) {\n    $it.schema = $schema;\n    $it.schemaPath = $schemaPath;\n    $it.errSchemaPath = $errSchemaPath;\n    var $key = 'key' + $lvl,\n      $idx = 'idx' + $lvl,\n      $i = 'i' + $lvl,\n      $invalidName = '\\' + ' + $key + ' + \\'',\n      $dataNxt = $it.dataLevel = it.dataLevel + 1,\n      $nextData = 'data' + $dataNxt,\n      $dataProperties = 'dataProperties' + $lvl,\n      $ownProperties = it.opts.ownProperties,\n      $currentBaseId = it.baseId;\n    if ($ownProperties) {\n      out += ' var ' + ($dataProperties) + ' = undefined; ';\n    }\n    if ($ownProperties) {\n      out += ' ' + ($dataProperties) + ' = ' + ($dataProperties) + ' || Object.keys(' + ($data) + '); for (var ' + ($idx) + '=0; ' + ($idx) + '<' + ($dataProperties) + '.length; ' + ($idx) + '++) { var ' + ($key) + ' = ' + ($dataProperties) + '[' + ($idx) + ']; ';\n    } else {\n      out += ' for (var ' + ($key) + ' in ' + ($data) + ') { ';\n    }\n    out += ' var startErrs' + ($lvl) + ' = errors; ';\n    var $passData = $key;\n    var $wasComposite = it.compositeRule;\n    it.compositeRule = $it.compositeRule = true;\n    var $code = it.validate($it);\n    $it.baseId = $currentBaseId;\n    if (it.util.varOccurences($code, $nextData) < 2) {\n      out += ' ' + (it.util.varReplace($code, $nextData, $passData)) + ' ';\n    } else {\n      out += ' var ' + ($nextData) + ' = ' + ($passData) + '; ' + ($code) + ' ';\n    }\n    it.compositeRule = $it.compositeRule = $wasComposite;\n    out += ' if (!' + ($nextValid) + ') { for (var ' + ($i) + '=startErrs' + ($lvl) + '; ' + ($i) + '<errors; ' + ($i) + '++) { vErrors[' + ($i) + '].propertyName = ' + ($key) + '; }   var err =   '; /* istanbul ignore else */\n    if (it.createErrors !== false) {\n      out += ' { keyword: \\'' + ('propertyNames') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { propertyName: \\'' + ($invalidName) + '\\' } ';\n      if (it.opts.messages !== false) {\n        out += ' , message: \\'property name \\\\\\'' + ($invalidName) + '\\\\\\' is invalid\\' ';\n      }\n      if (it.opts.verbose) {\n        out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n      }\n      out += ' } ';\n    } else {\n      out += ' {} ';\n    }\n    out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n    if (!it.compositeRule && $breakOnError) {\n      /* istanbul ignore if */\n      if (it.async) {\n        out += ' throw new ValidationError(vErrors); ';\n      } else {\n        out += ' validate.errors = vErrors; return false; ';\n      }\n    }\n    if ($breakOnError) {\n      out += ' break; ';\n    }\n    out += ' } }';\n  }\n  if ($breakOnError) {\n    out += ' ' + ($closingBraces) + ' if (' + ($errs) + ' == errors) {';\n  }\n  out = it.util.cleanUpCode(out);\n  return out;\n}\n","'use strict';\nmodule.exports = function generate_ref(it, $keyword, $ruleType) {\n  var out = ' ';\n  var $lvl = it.level;\n  var $dataLvl = it.dataLevel;\n  var $schema = it.schema[$keyword];\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n  var $breakOnError = !it.opts.allErrors;\n  var $data = 'data' + ($dataLvl || '');\n  var $valid = 'valid' + $lvl;\n  var $async, $refCode;\n  if ($schema == '#' || $schema == '#/') {\n    if (it.isRoot) {\n      $async = it.async;\n      $refCode = 'validate';\n    } else {\n      $async = it.root.schema.$async === true;\n      $refCode = 'root.refVal[0]';\n    }\n  } else {\n    var $refVal = it.resolveRef(it.baseId, $schema, it.isRoot);\n    if ($refVal === undefined) {\n      var $message = it.MissingRefError.message(it.baseId, $schema);\n      if (it.opts.missingRefs == 'fail') {\n        it.logger.error($message);\n        var $$outStack = $$outStack || [];\n        $$outStack.push(out);\n        out = ''; /* istanbul ignore else */\n        if (it.createErrors !== false) {\n          out += ' { keyword: \\'' + ('$ref') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { ref: \\'' + (it.util.escapeQuotes($schema)) + '\\' } ';\n          if (it.opts.messages !== false) {\n            out += ' , message: \\'can\\\\\\'t resolve reference ' + (it.util.escapeQuotes($schema)) + '\\' ';\n          }\n          if (it.opts.verbose) {\n            out += ' , schema: ' + (it.util.toQuotedString($schema)) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n          }\n          out += ' } ';\n        } else {\n          out += ' {} ';\n        }\n        var __err = out;\n        out = $$outStack.pop();\n        if (!it.compositeRule && $breakOnError) {\n          /* istanbul ignore if */\n          if (it.async) {\n            out += ' throw new ValidationError([' + (__err) + ']); ';\n          } else {\n            out += ' validate.errors = [' + (__err) + ']; return false; ';\n          }\n        } else {\n          out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n        }\n        if ($breakOnError) {\n          out += ' if (false) { ';\n        }\n      } else if (it.opts.missingRefs == 'ignore') {\n        it.logger.warn($message);\n        if ($breakOnError) {\n          out += ' if (true) { ';\n        }\n      } else {\n        throw new it.MissingRefError(it.baseId, $schema, $message);\n      }\n    } else if ($refVal.inline) {\n      var $it = it.util.copy(it);\n      $it.level++;\n      var $nextValid = 'valid' + $it.level;\n      $it.schema = $refVal.schema;\n      $it.schemaPath = '';\n      $it.errSchemaPath = $schema;\n      var $code = it.validate($it).replace(/validate\\.schema/g, $refVal.code);\n      out += ' ' + ($code) + ' ';\n      if ($breakOnError) {\n        out += ' if (' + ($nextValid) + ') { ';\n      }\n    } else {\n      $async = $refVal.$async === true || (it.async && $refVal.$async !== false);\n      $refCode = $refVal.code;\n    }\n  }\n  if ($refCode) {\n    var $$outStack = $$outStack || [];\n    $$outStack.push(out);\n    out = '';\n    if (it.opts.passContext) {\n      out += ' ' + ($refCode) + '.call(this, ';\n    } else {\n      out += ' ' + ($refCode) + '( ';\n    }\n    out += ' ' + ($data) + ', (dataPath || \\'\\')';\n    if (it.errorPath != '\"\"') {\n      out += ' + ' + (it.errorPath);\n    }\n    var $parentData = $dataLvl ? 'data' + (($dataLvl - 1) || '') : 'parentData',\n      $parentDataProperty = $dataLvl ? it.dataPathArr[$dataLvl] : 'parentDataProperty';\n    out += ' , ' + ($parentData) + ' , ' + ($parentDataProperty) + ', rootData)  ';\n    var __callValidate = out;\n    out = $$outStack.pop();\n    if ($async) {\n      if (!it.async) throw new Error('async schema referenced by sync schema');\n      if ($breakOnError) {\n        out += ' var ' + ($valid) + '; ';\n      }\n      out += ' try { await ' + (__callValidate) + '; ';\n      if ($breakOnError) {\n        out += ' ' + ($valid) + ' = true; ';\n      }\n      out += ' } catch (e) { if (!(e instanceof ValidationError)) throw e; if (vErrors === null) vErrors = e.errors; else vErrors = vErrors.concat(e.errors); errors = vErrors.length; ';\n      if ($breakOnError) {\n        out += ' ' + ($valid) + ' = false; ';\n      }\n      out += ' } ';\n      if ($breakOnError) {\n        out += ' if (' + ($valid) + ') { ';\n      }\n    } else {\n      out += ' if (!' + (__callValidate) + ') { if (vErrors === null) vErrors = ' + ($refCode) + '.errors; else vErrors = vErrors.concat(' + ($refCode) + '.errors); errors = vErrors.length; } ';\n      if ($breakOnError) {\n        out += ' else { ';\n      }\n    }\n  }\n  return out;\n}\n","'use strict';\nmodule.exports = function generate_required(it, $keyword, $ruleType) {\n  var out = ' ';\n  var $lvl = it.level;\n  var $dataLvl = it.dataLevel;\n  var $schema = it.schema[$keyword];\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n  var $breakOnError = !it.opts.allErrors;\n  var $data = 'data' + ($dataLvl || '');\n  var $valid = 'valid' + $lvl;\n  var $isData = it.opts.$data && $schema && $schema.$data,\n    $schemaValue;\n  if ($isData) {\n    out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';\n    $schemaValue = 'schema' + $lvl;\n  } else {\n    $schemaValue = $schema;\n  }\n  var $vSchema = 'schema' + $lvl;\n  if (!$isData) {\n    if ($schema.length < it.opts.loopRequired && it.schema.properties && Object.keys(it.schema.properties).length) {\n      var $required = [];\n      var arr1 = $schema;\n      if (arr1) {\n        var $property, i1 = -1,\n          l1 = arr1.length - 1;\n        while (i1 < l1) {\n          $property = arr1[i1 += 1];\n          var $propertySch = it.schema.properties[$property];\n          if (!($propertySch && (it.opts.strictKeywords ? typeof $propertySch == 'object' && Object.keys($propertySch).length > 0 : it.util.schemaHasRules($propertySch, it.RULES.all)))) {\n            $required[$required.length] = $property;\n          }\n        }\n      }\n    } else {\n      var $required = $schema;\n    }\n  }\n  if ($isData || $required.length) {\n    var $currentErrorPath = it.errorPath,\n      $loopRequired = $isData || $required.length >= it.opts.loopRequired,\n      $ownProperties = it.opts.ownProperties;\n    if ($breakOnError) {\n      out += ' var missing' + ($lvl) + '; ';\n      if ($loopRequired) {\n        if (!$isData) {\n          out += ' var ' + ($vSchema) + ' = validate.schema' + ($schemaPath) + '; ';\n        }\n        var $i = 'i' + $lvl,\n          $propertyPath = 'schema' + $lvl + '[' + $i + ']',\n          $missingProperty = '\\' + ' + $propertyPath + ' + \\'';\n        if (it.opts._errorDataPathProperty) {\n          it.errorPath = it.util.getPathExpr($currentErrorPath, $propertyPath, it.opts.jsonPointers);\n        }\n        out += ' var ' + ($valid) + ' = true; ';\n        if ($isData) {\n          out += ' if (schema' + ($lvl) + ' === undefined) ' + ($valid) + ' = true; else if (!Array.isArray(schema' + ($lvl) + ')) ' + ($valid) + ' = false; else {';\n        }\n        out += ' for (var ' + ($i) + ' = 0; ' + ($i) + ' < ' + ($vSchema) + '.length; ' + ($i) + '++) { ' + ($valid) + ' = ' + ($data) + '[' + ($vSchema) + '[' + ($i) + ']] !== undefined ';\n        if ($ownProperties) {\n          out += ' &&   Object.prototype.hasOwnProperty.call(' + ($data) + ', ' + ($vSchema) + '[' + ($i) + ']) ';\n        }\n        out += '; if (!' + ($valid) + ') break; } ';\n        if ($isData) {\n          out += '  }  ';\n        }\n        out += '  if (!' + ($valid) + ') {   ';\n        var $$outStack = $$outStack || [];\n        $$outStack.push(out);\n        out = ''; /* istanbul ignore else */\n        if (it.createErrors !== false) {\n          out += ' { keyword: \\'' + ('required') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { missingProperty: \\'' + ($missingProperty) + '\\' } ';\n          if (it.opts.messages !== false) {\n            out += ' , message: \\'';\n            if (it.opts._errorDataPathProperty) {\n              out += 'is a required property';\n            } else {\n              out += 'should have required property \\\\\\'' + ($missingProperty) + '\\\\\\'';\n            }\n            out += '\\' ';\n          }\n          if (it.opts.verbose) {\n            out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n          }\n          out += ' } ';\n        } else {\n          out += ' {} ';\n        }\n        var __err = out;\n        out = $$outStack.pop();\n        if (!it.compositeRule && $breakOnError) {\n          /* istanbul ignore if */\n          if (it.async) {\n            out += ' throw new ValidationError([' + (__err) + ']); ';\n          } else {\n            out += ' validate.errors = [' + (__err) + ']; return false; ';\n          }\n        } else {\n          out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n        }\n        out += ' } else { ';\n      } else {\n        out += ' if ( ';\n        var arr2 = $required;\n        if (arr2) {\n          var $propertyKey, $i = -1,\n            l2 = arr2.length - 1;\n          while ($i < l2) {\n            $propertyKey = arr2[$i += 1];\n            if ($i) {\n              out += ' || ';\n            }\n            var $prop = it.util.getProperty($propertyKey),\n              $useData = $data + $prop;\n            out += ' ( ( ' + ($useData) + ' === undefined ';\n            if ($ownProperties) {\n              out += ' || ! Object.prototype.hasOwnProperty.call(' + ($data) + ', \\'' + (it.util.escapeQuotes($propertyKey)) + '\\') ';\n            }\n            out += ') && (missing' + ($lvl) + ' = ' + (it.util.toQuotedString(it.opts.jsonPointers ? $propertyKey : $prop)) + ') ) ';\n          }\n        }\n        out += ') {  ';\n        var $propertyPath = 'missing' + $lvl,\n          $missingProperty = '\\' + ' + $propertyPath + ' + \\'';\n        if (it.opts._errorDataPathProperty) {\n          it.errorPath = it.opts.jsonPointers ? it.util.getPathExpr($currentErrorPath, $propertyPath, true) : $currentErrorPath + ' + ' + $propertyPath;\n        }\n        var $$outStack = $$outStack || [];\n        $$outStack.push(out);\n        out = ''; /* istanbul ignore else */\n        if (it.createErrors !== false) {\n          out += ' { keyword: \\'' + ('required') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { missingProperty: \\'' + ($missingProperty) + '\\' } ';\n          if (it.opts.messages !== false) {\n            out += ' , message: \\'';\n            if (it.opts._errorDataPathProperty) {\n              out += 'is a required property';\n            } else {\n              out += 'should have required property \\\\\\'' + ($missingProperty) + '\\\\\\'';\n            }\n            out += '\\' ';\n          }\n          if (it.opts.verbose) {\n            out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n          }\n          out += ' } ';\n        } else {\n          out += ' {} ';\n        }\n        var __err = out;\n        out = $$outStack.pop();\n        if (!it.compositeRule && $breakOnError) {\n          /* istanbul ignore if */\n          if (it.async) {\n            out += ' throw new ValidationError([' + (__err) + ']); ';\n          } else {\n            out += ' validate.errors = [' + (__err) + ']; return false; ';\n          }\n        } else {\n          out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n        }\n        out += ' } else { ';\n      }\n    } else {\n      if ($loopRequired) {\n        if (!$isData) {\n          out += ' var ' + ($vSchema) + ' = validate.schema' + ($schemaPath) + '; ';\n        }\n        var $i = 'i' + $lvl,\n          $propertyPath = 'schema' + $lvl + '[' + $i + ']',\n          $missingProperty = '\\' + ' + $propertyPath + ' + \\'';\n        if (it.opts._errorDataPathProperty) {\n          it.errorPath = it.util.getPathExpr($currentErrorPath, $propertyPath, it.opts.jsonPointers);\n        }\n        if ($isData) {\n          out += ' if (' + ($vSchema) + ' && !Array.isArray(' + ($vSchema) + ')) {  var err =   '; /* istanbul ignore else */\n          if (it.createErrors !== false) {\n            out += ' { keyword: \\'' + ('required') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { missingProperty: \\'' + ($missingProperty) + '\\' } ';\n            if (it.opts.messages !== false) {\n              out += ' , message: \\'';\n              if (it.opts._errorDataPathProperty) {\n                out += 'is a required property';\n              } else {\n                out += 'should have required property \\\\\\'' + ($missingProperty) + '\\\\\\'';\n              }\n              out += '\\' ';\n            }\n            if (it.opts.verbose) {\n              out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n            }\n            out += ' } ';\n          } else {\n            out += ' {} ';\n          }\n          out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } else if (' + ($vSchema) + ' !== undefined) { ';\n        }\n        out += ' for (var ' + ($i) + ' = 0; ' + ($i) + ' < ' + ($vSchema) + '.length; ' + ($i) + '++) { if (' + ($data) + '[' + ($vSchema) + '[' + ($i) + ']] === undefined ';\n        if ($ownProperties) {\n          out += ' || ! Object.prototype.hasOwnProperty.call(' + ($data) + ', ' + ($vSchema) + '[' + ($i) + ']) ';\n        }\n        out += ') {  var err =   '; /* istanbul ignore else */\n        if (it.createErrors !== false) {\n          out += ' { keyword: \\'' + ('required') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { missingProperty: \\'' + ($missingProperty) + '\\' } ';\n          if (it.opts.messages !== false) {\n            out += ' , message: \\'';\n            if (it.opts._errorDataPathProperty) {\n              out += 'is a required property';\n            } else {\n              out += 'should have required property \\\\\\'' + ($missingProperty) + '\\\\\\'';\n            }\n            out += '\\' ';\n          }\n          if (it.opts.verbose) {\n            out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n          }\n          out += ' } ';\n        } else {\n          out += ' {} ';\n        }\n        out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } } ';\n        if ($isData) {\n          out += '  }  ';\n        }\n      } else {\n        var arr3 = $required;\n        if (arr3) {\n          var $propertyKey, i3 = -1,\n            l3 = arr3.length - 1;\n          while (i3 < l3) {\n            $propertyKey = arr3[i3 += 1];\n            var $prop = it.util.getProperty($propertyKey),\n              $missingProperty = it.util.escapeQuotes($propertyKey),\n              $useData = $data + $prop;\n            if (it.opts._errorDataPathProperty) {\n              it.errorPath = it.util.getPath($currentErrorPath, $propertyKey, it.opts.jsonPointers);\n            }\n            out += ' if ( ' + ($useData) + ' === undefined ';\n            if ($ownProperties) {\n              out += ' || ! Object.prototype.hasOwnProperty.call(' + ($data) + ', \\'' + (it.util.escapeQuotes($propertyKey)) + '\\') ';\n            }\n            out += ') {  var err =   '; /* istanbul ignore else */\n            if (it.createErrors !== false) {\n              out += ' { keyword: \\'' + ('required') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { missingProperty: \\'' + ($missingProperty) + '\\' } ';\n              if (it.opts.messages !== false) {\n                out += ' , message: \\'';\n                if (it.opts._errorDataPathProperty) {\n                  out += 'is a required property';\n                } else {\n                  out += 'should have required property \\\\\\'' + ($missingProperty) + '\\\\\\'';\n                }\n                out += '\\' ';\n              }\n              if (it.opts.verbose) {\n                out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n              }\n              out += ' } ';\n            } else {\n              out += ' {} ';\n            }\n            out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } ';\n          }\n        }\n      }\n    }\n    it.errorPath = $currentErrorPath;\n  } else if ($breakOnError) {\n    out += ' if (true) {';\n  }\n  return out;\n}\n","'use strict';\nmodule.exports = function generate_uniqueItems(it, $keyword, $ruleType) {\n  var out = ' ';\n  var $lvl = it.level;\n  var $dataLvl = it.dataLevel;\n  var $schema = it.schema[$keyword];\n  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n  var $breakOnError = !it.opts.allErrors;\n  var $data = 'data' + ($dataLvl || '');\n  var $valid = 'valid' + $lvl;\n  var $isData = it.opts.$data && $schema && $schema.$data,\n    $schemaValue;\n  if ($isData) {\n    out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';\n    $schemaValue = 'schema' + $lvl;\n  } else {\n    $schemaValue = $schema;\n  }\n  if (($schema || $isData) && it.opts.uniqueItems !== false) {\n    if ($isData) {\n      out += ' var ' + ($valid) + '; if (' + ($schemaValue) + ' === false || ' + ($schemaValue) + ' === undefined) ' + ($valid) + ' = true; else if (typeof ' + ($schemaValue) + ' != \\'boolean\\') ' + ($valid) + ' = false; else { ';\n    }\n    out += ' var i = ' + ($data) + '.length , ' + ($valid) + ' = true , j; if (i > 1) { ';\n    var $itemType = it.schema.items && it.schema.items.type,\n      $typeIsArray = Array.isArray($itemType);\n    if (!$itemType || $itemType == 'object' || $itemType == 'array' || ($typeIsArray && ($itemType.indexOf('object') >= 0 || $itemType.indexOf('array') >= 0))) {\n      out += ' outer: for (;i--;) { for (j = i; j--;) { if (equal(' + ($data) + '[i], ' + ($data) + '[j])) { ' + ($valid) + ' = false; break outer; } } } ';\n    } else {\n      out += ' var itemIndices = {}, item; for (;i--;) { var item = ' + ($data) + '[i]; ';\n      var $method = 'checkDataType' + ($typeIsArray ? 's' : '');\n      out += ' if (' + (it.util[$method]($itemType, 'item', true)) + ') continue; ';\n      if ($typeIsArray) {\n        out += ' if (typeof item == \\'string\\') item = \\'\"\\' + item; ';\n      }\n      out += ' if (typeof itemIndices[item] == \\'number\\') { ' + ($valid) + ' = false; j = itemIndices[item]; break; } itemIndices[item] = i; } ';\n    }\n    out += ' } ';\n    if ($isData) {\n      out += '  }  ';\n    }\n    out += ' if (!' + ($valid) + ') {   ';\n    var $$outStack = $$outStack || [];\n    $$outStack.push(out);\n    out = ''; /* istanbul ignore else */\n    if (it.createErrors !== false) {\n      out += ' { keyword: \\'' + ('uniqueItems') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { i: i, j: j } ';\n      if (it.opts.messages !== false) {\n        out += ' , message: \\'should NOT have duplicate items (items ## \\' + j + \\' and \\' + i + \\' are identical)\\' ';\n      }\n      if (it.opts.verbose) {\n        out += ' , schema:  ';\n        if ($isData) {\n          out += 'validate.schema' + ($schemaPath);\n        } else {\n          out += '' + ($schema);\n        }\n        out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n      }\n      out += ' } ';\n    } else {\n      out += ' {} ';\n    }\n    var __err = out;\n    out = $$outStack.pop();\n    if (!it.compositeRule && $breakOnError) {\n      /* istanbul ignore if */\n      if (it.async) {\n        out += ' throw new ValidationError([' + (__err) + ']); ';\n      } else {\n        out += ' validate.errors = [' + (__err) + ']; return false; ';\n      }\n    } else {\n      out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n    }\n    out += ' } ';\n    if ($breakOnError) {\n      out += ' else { ';\n    }\n  } else {\n    if ($breakOnError) {\n      out += ' if (true) { ';\n    }\n  }\n  return out;\n}\n","'use strict';\nmodule.exports = function generate_validate(it, $keyword, $ruleType) {\n  var out = '';\n  var $async = it.schema.$async === true,\n    $refKeywords = it.util.schemaHasRulesExcept(it.schema, it.RULES.all, '$ref'),\n    $id = it.self._getId(it.schema);\n  if (it.opts.strictKeywords) {\n    var $unknownKwd = it.util.schemaUnknownRules(it.schema, it.RULES.keywords);\n    if ($unknownKwd) {\n      var $keywordsMsg = 'unknown keyword: ' + $unknownKwd;\n      if (it.opts.strictKeywords === 'log') it.logger.warn($keywordsMsg);\n      else throw new Error($keywordsMsg);\n    }\n  }\n  if (it.isTop) {\n    out += ' var validate = ';\n    if ($async) {\n      it.async = true;\n      out += 'async ';\n    }\n    out += 'function(data, dataPath, parentData, parentDataProperty, rootData) { \\'use strict\\'; ';\n    if ($id && (it.opts.sourceCode || it.opts.processCode)) {\n      out += ' ' + ('/\\*# sourceURL=' + $id + ' */') + ' ';\n    }\n  }\n  if (typeof it.schema == 'boolean' || !($refKeywords || it.schema.$ref)) {\n    var $keyword = 'false schema';\n    var $lvl = it.level;\n    var $dataLvl = it.dataLevel;\n    var $schema = it.schema[$keyword];\n    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);\n    var $errSchemaPath = it.errSchemaPath + '/' + $keyword;\n    var $breakOnError = !it.opts.allErrors;\n    var $errorKeyword;\n    var $data = 'data' + ($dataLvl || '');\n    var $valid = 'valid' + $lvl;\n    if (it.schema === false) {\n      if (it.isTop) {\n        $breakOnError = true;\n      } else {\n        out += ' var ' + ($valid) + ' = false; ';\n      }\n      var $$outStack = $$outStack || [];\n      $$outStack.push(out);\n      out = ''; /* istanbul ignore else */\n      if (it.createErrors !== false) {\n        out += ' { keyword: \\'' + ($errorKeyword || 'false schema') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: {} ';\n        if (it.opts.messages !== false) {\n          out += ' , message: \\'boolean schema is false\\' ';\n        }\n        if (it.opts.verbose) {\n          out += ' , schema: false , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n        }\n        out += ' } ';\n      } else {\n        out += ' {} ';\n      }\n      var __err = out;\n      out = $$outStack.pop();\n      if (!it.compositeRule && $breakOnError) {\n        /* istanbul ignore if */\n        if (it.async) {\n          out += ' throw new ValidationError([' + (__err) + ']); ';\n        } else {\n          out += ' validate.errors = [' + (__err) + ']; return false; ';\n        }\n      } else {\n        out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n      }\n    } else {\n      if (it.isTop) {\n        if ($async) {\n          out += ' return data; ';\n        } else {\n          out += ' validate.errors = null; return true; ';\n        }\n      } else {\n        out += ' var ' + ($valid) + ' = true; ';\n      }\n    }\n    if (it.isTop) {\n      out += ' }; return validate; ';\n    }\n    return out;\n  }\n  if (it.isTop) {\n    var $top = it.isTop,\n      $lvl = it.level = 0,\n      $dataLvl = it.dataLevel = 0,\n      $data = 'data';\n    it.rootId = it.resolve.fullPath(it.self._getId(it.root.schema));\n    it.baseId = it.baseId || it.rootId;\n    delete it.isTop;\n    it.dataPathArr = [undefined];\n    if (it.schema.default !== undefined && it.opts.useDefaults && it.opts.strictDefaults) {\n      var $defaultMsg = 'default is ignored in the schema root';\n      if (it.opts.strictDefaults === 'log') it.logger.warn($defaultMsg);\n      else throw new Error($defaultMsg);\n    }\n    out += ' var vErrors = null; ';\n    out += ' var errors = 0;     ';\n    out += ' if (rootData === undefined) rootData = data; ';\n  } else {\n    var $lvl = it.level,\n      $dataLvl = it.dataLevel,\n      $data = 'data' + ($dataLvl || '');\n    if ($id) it.baseId = it.resolve.url(it.baseId, $id);\n    if ($async && !it.async) throw new Error('async schema in sync schema');\n    out += ' var errs_' + ($lvl) + ' = errors;';\n  }\n  var $valid = 'valid' + $lvl,\n    $breakOnError = !it.opts.allErrors,\n    $closingBraces1 = '',\n    $closingBraces2 = '';\n  var $errorKeyword;\n  var $typeSchema = it.schema.type,\n    $typeIsArray = Array.isArray($typeSchema);\n  if ($typeSchema && it.opts.nullable && it.schema.nullable === true) {\n    if ($typeIsArray) {\n      if ($typeSchema.indexOf('null') == -1) $typeSchema = $typeSchema.concat('null');\n    } else if ($typeSchema != 'null') {\n      $typeSchema = [$typeSchema, 'null'];\n      $typeIsArray = true;\n    }\n  }\n  if ($typeIsArray && $typeSchema.length == 1) {\n    $typeSchema = $typeSchema[0];\n    $typeIsArray = false;\n  }\n  if (it.schema.$ref && $refKeywords) {\n    if (it.opts.extendRefs == 'fail') {\n      throw new Error('$ref: validation keywords used in schema at path \"' + it.errSchemaPath + '\" (see option extendRefs)');\n    } else if (it.opts.extendRefs !== true) {\n      $refKeywords = false;\n      it.logger.warn('$ref: keywords ignored in schema at path \"' + it.errSchemaPath + '\"');\n    }\n  }\n  if (it.schema.$comment && it.opts.$comment) {\n    out += ' ' + (it.RULES.all.$comment.code(it, '$comment'));\n  }\n  if ($typeSchema) {\n    if (it.opts.coerceTypes) {\n      var $coerceToTypes = it.util.coerceToTypes(it.opts.coerceTypes, $typeSchema);\n    }\n    var $rulesGroup = it.RULES.types[$typeSchema];\n    if ($coerceToTypes || $typeIsArray || $rulesGroup === true || ($rulesGroup && !$shouldUseGroup($rulesGroup))) {\n      var $schemaPath = it.schemaPath + '.type',\n        $errSchemaPath = it.errSchemaPath + '/type';\n      var $schemaPath = it.schemaPath + '.type',\n        $errSchemaPath = it.errSchemaPath + '/type',\n        $method = $typeIsArray ? 'checkDataTypes' : 'checkDataType';\n      out += ' if (' + (it.util[$method]($typeSchema, $data, true)) + ') { ';\n      if ($coerceToTypes) {\n        var $dataType = 'dataType' + $lvl,\n          $coerced = 'coerced' + $lvl;\n        out += ' var ' + ($dataType) + ' = typeof ' + ($data) + '; ';\n        if (it.opts.coerceTypes == 'array') {\n          out += ' if (' + ($dataType) + ' == \\'object\\' && Array.isArray(' + ($data) + ')) ' + ($dataType) + ' = \\'array\\'; ';\n        }\n        out += ' var ' + ($coerced) + ' = undefined; ';\n        var $bracesCoercion = '';\n        var arr1 = $coerceToTypes;\n        if (arr1) {\n          var $type, $i = -1,\n            l1 = arr1.length - 1;\n          while ($i < l1) {\n            $type = arr1[$i += 1];\n            if ($i) {\n              out += ' if (' + ($coerced) + ' === undefined) { ';\n              $bracesCoercion += '}';\n            }\n            if (it.opts.coerceTypes == 'array' && $type != 'array') {\n              out += ' if (' + ($dataType) + ' == \\'array\\' && ' + ($data) + '.length == 1) { ' + ($coerced) + ' = ' + ($data) + ' = ' + ($data) + '[0]; ' + ($dataType) + ' = typeof ' + ($data) + ';  } ';\n            }\n            if ($type == 'string') {\n              out += ' if (' + ($dataType) + ' == \\'number\\' || ' + ($dataType) + ' == \\'boolean\\') ' + ($coerced) + ' = \\'\\' + ' + ($data) + '; else if (' + ($data) + ' === null) ' + ($coerced) + ' = \\'\\'; ';\n            } else if ($type == 'number' || $type == 'integer') {\n              out += ' if (' + ($dataType) + ' == \\'boolean\\' || ' + ($data) + ' === null || (' + ($dataType) + ' == \\'string\\' && ' + ($data) + ' && ' + ($data) + ' == +' + ($data) + ' ';\n              if ($type == 'integer') {\n                out += ' && !(' + ($data) + ' % 1)';\n              }\n              out += ')) ' + ($coerced) + ' = +' + ($data) + '; ';\n            } else if ($type == 'boolean') {\n              out += ' if (' + ($data) + ' === \\'false\\' || ' + ($data) + ' === 0 || ' + ($data) + ' === null) ' + ($coerced) + ' = false; else if (' + ($data) + ' === \\'true\\' || ' + ($data) + ' === 1) ' + ($coerced) + ' = true; ';\n            } else if ($type == 'null') {\n              out += ' if (' + ($data) + ' === \\'\\' || ' + ($data) + ' === 0 || ' + ($data) + ' === false) ' + ($coerced) + ' = null; ';\n            } else if (it.opts.coerceTypes == 'array' && $type == 'array') {\n              out += ' if (' + ($dataType) + ' == \\'string\\' || ' + ($dataType) + ' == \\'number\\' || ' + ($dataType) + ' == \\'boolean\\' || ' + ($data) + ' == null) ' + ($coerced) + ' = [' + ($data) + ']; ';\n            }\n          }\n        }\n        out += ' ' + ($bracesCoercion) + ' if (' + ($coerced) + ' === undefined) {   ';\n        var $$outStack = $$outStack || [];\n        $$outStack.push(out);\n        out = ''; /* istanbul ignore else */\n        if (it.createErrors !== false) {\n          out += ' { keyword: \\'' + ($errorKeyword || 'type') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { type: \\'';\n          if ($typeIsArray) {\n            out += '' + ($typeSchema.join(\",\"));\n          } else {\n            out += '' + ($typeSchema);\n          }\n          out += '\\' } ';\n          if (it.opts.messages !== false) {\n            out += ' , message: \\'should be ';\n            if ($typeIsArray) {\n              out += '' + ($typeSchema.join(\",\"));\n            } else {\n              out += '' + ($typeSchema);\n            }\n            out += '\\' ';\n          }\n          if (it.opts.verbose) {\n            out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n          }\n          out += ' } ';\n        } else {\n          out += ' {} ';\n        }\n        var __err = out;\n        out = $$outStack.pop();\n        if (!it.compositeRule && $breakOnError) {\n          /* istanbul ignore if */\n          if (it.async) {\n            out += ' throw new ValidationError([' + (__err) + ']); ';\n          } else {\n            out += ' validate.errors = [' + (__err) + ']; return false; ';\n          }\n        } else {\n          out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n        }\n        out += ' } else {  ';\n        var $parentData = $dataLvl ? 'data' + (($dataLvl - 1) || '') : 'parentData',\n          $parentDataProperty = $dataLvl ? it.dataPathArr[$dataLvl] : 'parentDataProperty';\n        out += ' ' + ($data) + ' = ' + ($coerced) + '; ';\n        if (!$dataLvl) {\n          out += 'if (' + ($parentData) + ' !== undefined)';\n        }\n        out += ' ' + ($parentData) + '[' + ($parentDataProperty) + '] = ' + ($coerced) + '; } ';\n      } else {\n        var $$outStack = $$outStack || [];\n        $$outStack.push(out);\n        out = ''; /* istanbul ignore else */\n        if (it.createErrors !== false) {\n          out += ' { keyword: \\'' + ($errorKeyword || 'type') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { type: \\'';\n          if ($typeIsArray) {\n            out += '' + ($typeSchema.join(\",\"));\n          } else {\n            out += '' + ($typeSchema);\n          }\n          out += '\\' } ';\n          if (it.opts.messages !== false) {\n            out += ' , message: \\'should be ';\n            if ($typeIsArray) {\n              out += '' + ($typeSchema.join(\",\"));\n            } else {\n              out += '' + ($typeSchema);\n            }\n            out += '\\' ';\n          }\n          if (it.opts.verbose) {\n            out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n          }\n          out += ' } ';\n        } else {\n          out += ' {} ';\n        }\n        var __err = out;\n        out = $$outStack.pop();\n        if (!it.compositeRule && $breakOnError) {\n          /* istanbul ignore if */\n          if (it.async) {\n            out += ' throw new ValidationError([' + (__err) + ']); ';\n          } else {\n            out += ' validate.errors = [' + (__err) + ']; return false; ';\n          }\n        } else {\n          out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n        }\n      }\n      out += ' } ';\n    }\n  }\n  if (it.schema.$ref && !$refKeywords) {\n    out += ' ' + (it.RULES.all.$ref.code(it, '$ref')) + ' ';\n    if ($breakOnError) {\n      out += ' } if (errors === ';\n      if ($top) {\n        out += '0';\n      } else {\n        out += 'errs_' + ($lvl);\n      }\n      out += ') { ';\n      $closingBraces2 += '}';\n    }\n  } else {\n    var arr2 = it.RULES;\n    if (arr2) {\n      var $rulesGroup, i2 = -1,\n        l2 = arr2.length - 1;\n      while (i2 < l2) {\n        $rulesGroup = arr2[i2 += 1];\n        if ($shouldUseGroup($rulesGroup)) {\n          if ($rulesGroup.type) {\n            out += ' if (' + (it.util.checkDataType($rulesGroup.type, $data)) + ') { ';\n          }\n          if (it.opts.useDefaults) {\n            if ($rulesGroup.type == 'object' && it.schema.properties) {\n              var $schema = it.schema.properties,\n                $schemaKeys = Object.keys($schema);\n              var arr3 = $schemaKeys;\n              if (arr3) {\n                var $propertyKey, i3 = -1,\n                  l3 = arr3.length - 1;\n                while (i3 < l3) {\n                  $propertyKey = arr3[i3 += 1];\n                  var $sch = $schema[$propertyKey];\n                  if ($sch.default !== undefined) {\n                    var $passData = $data + it.util.getProperty($propertyKey);\n                    if (it.compositeRule) {\n                      if (it.opts.strictDefaults) {\n                        var $defaultMsg = 'default is ignored for: ' + $passData;\n                        if (it.opts.strictDefaults === 'log') it.logger.warn($defaultMsg);\n                        else throw new Error($defaultMsg);\n                      }\n                    } else {\n                      out += ' if (' + ($passData) + ' === undefined ';\n                      if (it.opts.useDefaults == 'empty') {\n                        out += ' || ' + ($passData) + ' === null || ' + ($passData) + ' === \\'\\' ';\n                      }\n                      out += ' ) ' + ($passData) + ' = ';\n                      if (it.opts.useDefaults == 'shared') {\n                        out += ' ' + (it.useDefault($sch.default)) + ' ';\n                      } else {\n                        out += ' ' + (JSON.stringify($sch.default)) + ' ';\n                      }\n                      out += '; ';\n                    }\n                  }\n                }\n              }\n            } else if ($rulesGroup.type == 'array' && Array.isArray(it.schema.items)) {\n              var arr4 = it.schema.items;\n              if (arr4) {\n                var $sch, $i = -1,\n                  l4 = arr4.length - 1;\n                while ($i < l4) {\n                  $sch = arr4[$i += 1];\n                  if ($sch.default !== undefined) {\n                    var $passData = $data + '[' + $i + ']';\n                    if (it.compositeRule) {\n                      if (it.opts.strictDefaults) {\n                        var $defaultMsg = 'default is ignored for: ' + $passData;\n                        if (it.opts.strictDefaults === 'log') it.logger.warn($defaultMsg);\n                        else throw new Error($defaultMsg);\n                      }\n                    } else {\n                      out += ' if (' + ($passData) + ' === undefined ';\n                      if (it.opts.useDefaults == 'empty') {\n                        out += ' || ' + ($passData) + ' === null || ' + ($passData) + ' === \\'\\' ';\n                      }\n                      out += ' ) ' + ($passData) + ' = ';\n                      if (it.opts.useDefaults == 'shared') {\n                        out += ' ' + (it.useDefault($sch.default)) + ' ';\n                      } else {\n                        out += ' ' + (JSON.stringify($sch.default)) + ' ';\n                      }\n                      out += '; ';\n                    }\n                  }\n                }\n              }\n            }\n          }\n          var arr5 = $rulesGroup.rules;\n          if (arr5) {\n            var $rule, i5 = -1,\n              l5 = arr5.length - 1;\n            while (i5 < l5) {\n              $rule = arr5[i5 += 1];\n              if ($shouldUseRule($rule)) {\n                var $code = $rule.code(it, $rule.keyword, $rulesGroup.type);\n                if ($code) {\n                  out += ' ' + ($code) + ' ';\n                  if ($breakOnError) {\n                    $closingBraces1 += '}';\n                  }\n                }\n              }\n            }\n          }\n          if ($breakOnError) {\n            out += ' ' + ($closingBraces1) + ' ';\n            $closingBraces1 = '';\n          }\n          if ($rulesGroup.type) {\n            out += ' } ';\n            if ($typeSchema && $typeSchema === $rulesGroup.type && !$coerceToTypes) {\n              out += ' else { ';\n              var $schemaPath = it.schemaPath + '.type',\n                $errSchemaPath = it.errSchemaPath + '/type';\n              var $$outStack = $$outStack || [];\n              $$outStack.push(out);\n              out = ''; /* istanbul ignore else */\n              if (it.createErrors !== false) {\n                out += ' { keyword: \\'' + ($errorKeyword || 'type') + '\\' , dataPath: (dataPath || \\'\\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { type: \\'';\n                if ($typeIsArray) {\n                  out += '' + ($typeSchema.join(\",\"));\n                } else {\n                  out += '' + ($typeSchema);\n                }\n                out += '\\' } ';\n                if (it.opts.messages !== false) {\n                  out += ' , message: \\'should be ';\n                  if ($typeIsArray) {\n                    out += '' + ($typeSchema.join(\",\"));\n                  } else {\n                    out += '' + ($typeSchema);\n                  }\n                  out += '\\' ';\n                }\n                if (it.opts.verbose) {\n                  out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';\n                }\n                out += ' } ';\n              } else {\n                out += ' {} ';\n              }\n              var __err = out;\n              out = $$outStack.pop();\n              if (!it.compositeRule && $breakOnError) {\n                /* istanbul ignore if */\n                if (it.async) {\n                  out += ' throw new ValidationError([' + (__err) + ']); ';\n                } else {\n                  out += ' validate.errors = [' + (__err) + ']; return false; ';\n                }\n              } else {\n                out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';\n              }\n              out += ' } ';\n            }\n          }\n          if ($breakOnError) {\n            out += ' if (errors === ';\n            if ($top) {\n              out += '0';\n            } else {\n              out += 'errs_' + ($lvl);\n            }\n            out += ') { ';\n            $closingBraces2 += '}';\n          }\n        }\n      }\n    }\n  }\n  if ($breakOnError) {\n    out += ' ' + ($closingBraces2) + ' ';\n  }\n  if ($top) {\n    if ($async) {\n      out += ' if (errors === 0) return data;           ';\n      out += ' else throw new ValidationError(vErrors); ';\n    } else {\n      out += ' validate.errors = vErrors; ';\n      out += ' return errors === 0;       ';\n    }\n    out += ' }; return validate;';\n  } else {\n    out += ' var ' + ($valid) + ' = errors === errs_' + ($lvl) + ';';\n  }\n  out = it.util.cleanUpCode(out);\n  if ($top) {\n    out = it.util.finalCleanUpCode(out, $async);\n  }\n\n  function $shouldUseGroup($rulesGroup) {\n    var rules = $rulesGroup.rules;\n    for (var i = 0; i < rules.length; i++)\n      if ($shouldUseRule(rules[i])) return true;\n  }\n\n  function $shouldUseRule($rule) {\n    return it.schema[$rule.keyword] !== undefined || ($rule.implements && $ruleImplementsSomeKeyword($rule));\n  }\n\n  function $ruleImplementsSomeKeyword($rule) {\n    var impl = $rule.implements;\n    for (var i = 0; i < impl.length; i++)\n      if (it.schema[impl[i]] !== undefined) return true;\n  }\n  return out;\n}\n","'use strict';\n\nvar IDENTIFIER = /^[a-z_$][a-z0-9_$-]*$/i;\nvar customRuleCode = require('./dotjs/custom');\nvar definitionSchema = require('./definition_schema');\n\nmodule.exports = {\n  add: addKeyword,\n  get: getKeyword,\n  remove: removeKeyword,\n  validate: validateKeyword\n};\n\n\n/**\n * Define custom keyword\n * @this  Ajv\n * @param {String} keyword custom keyword, should be unique (including different from all standard, custom and macro keywords).\n * @param {Object} definition keyword definition object with properties `type` (type(s) which the keyword applies to), `validate` or `compile`.\n * @return {Ajv} this for method chaining\n */\nfunction addKeyword(keyword, definition) {\n  /* jshint validthis: true */\n  /* eslint no-shadow: 0 */\n  var RULES = this.RULES;\n  if (RULES.keywords[keyword])\n    throw new Error('Keyword ' + keyword + ' is already defined');\n\n  if (!IDENTIFIER.test(keyword))\n    throw new Error('Keyword ' + keyword + ' is not a valid identifier');\n\n  if (definition) {\n    this.validateKeyword(definition, true);\n\n    var dataType = definition.type;\n    if (Array.isArray(dataType)) {\n      for (var i=0; i<dataType.length; i++)\n        _addRule(keyword, dataType[i], definition);\n    } else {\n      _addRule(keyword, dataType, definition);\n    }\n\n    var metaSchema = definition.metaSchema;\n    if (metaSchema) {\n      if (definition.$data && this._opts.$data) {\n        metaSchema = {\n          anyOf: [\n            metaSchema,\n            { '$ref': 'https://raw.githubusercontent.com/epoberezkin/ajv/master/lib/refs/data.json#' }\n          ]\n        };\n      }\n      definition.validateSchema = this.compile(metaSchema, true);\n    }\n  }\n\n  RULES.keywords[keyword] = RULES.all[keyword] = true;\n\n\n  function _addRule(keyword, dataType, definition) {\n    var ruleGroup;\n    for (var i=0; i<RULES.length; i++) {\n      var rg = RULES[i];\n      if (rg.type == dataType) {\n        ruleGroup = rg;\n        break;\n      }\n    }\n\n    if (!ruleGroup) {\n      ruleGroup = { type: dataType, rules: [] };\n      RULES.push(ruleGroup);\n    }\n\n    var rule = {\n      keyword: keyword,\n      definition: definition,\n      custom: true,\n      code: customRuleCode,\n      implements: definition.implements\n    };\n    ruleGroup.rules.push(rule);\n    RULES.custom[keyword] = rule;\n  }\n\n  return this;\n}\n\n\n/**\n * Get keyword\n * @this  Ajv\n * @param {String} keyword pre-defined or custom keyword.\n * @return {Object|Boolean} custom keyword definition, `true` if it is a predefined keyword, `false` otherwise.\n */\nfunction getKeyword(keyword) {\n  /* jshint validthis: true */\n  var rule = this.RULES.custom[keyword];\n  return rule ? rule.definition : this.RULES.keywords[keyword] || false;\n}\n\n\n/**\n * Remove keyword\n * @this  Ajv\n * @param {String} keyword pre-defined or custom keyword.\n * @return {Ajv} this for method chaining\n */\nfunction removeKeyword(keyword) {\n  /* jshint validthis: true */\n  var RULES = this.RULES;\n  delete RULES.keywords[keyword];\n  delete RULES.all[keyword];\n  delete RULES.custom[keyword];\n  for (var i=0; i<RULES.length; i++) {\n    var rules = RULES[i].rules;\n    for (var j=0; j<rules.length; j++) {\n      if (rules[j].keyword == keyword) {\n        rules.splice(j, 1);\n        break;\n      }\n    }\n  }\n  return this;\n}\n\n\n/**\n * Validate keyword definition\n * @this  Ajv\n * @param {Object} definition keyword definition object.\n * @param {Boolean} throwError true to throw exception if definition is invalid\n * @return {boolean} validation result\n */\nfunction validateKeyword(definition, throwError) {\n  validateKeyword.errors = null;\n  var v = this._validateKeyword = this._validateKeyword\n                                  || this.compile(definitionSchema, true);\n\n  if (v(definition)) return true;\n  validateKeyword.errors = v.errors;\n  if (throwError)\n    throw new Error('custom keyword definition is invalid: '  + this.errorsText(v.errors));\n  else\n    return false;\n}\n","var asn1 = exports;\n\nasn1.bignum = require('bn.js');\n\nasn1.define = require('./asn1/api').define;\nasn1.base = require('./asn1/base');\nasn1.constants = require('./asn1/constants');\nasn1.decoders = require('./asn1/decoders');\nasn1.encoders = require('./asn1/encoders');\n","var asn1 = require('../asn1');\nvar inherits = require('inherits');\n\nvar api = exports;\n\napi.define = function define(name, body) {\n  return new Entity(name, body);\n};\n\nfunction Entity(name, body) {\n  this.name = name;\n  this.body = body;\n\n  this.decoders = {};\n  this.encoders = {};\n};\n\nEntity.prototype._createNamed = function createNamed(base) {\n  var named;\n  try {\n    named = require('vm').runInThisContext(\n      '(function ' + this.name + '(entity) {\\n' +\n      '  this._initNamed(entity);\\n' +\n      '})'\n    );\n  } catch (e) {\n    named = function (entity) {\n      this._initNamed(entity);\n    };\n  }\n  inherits(named, base);\n  named.prototype._initNamed = function initnamed(entity) {\n    base.call(this, entity);\n  };\n\n  return new named(this);\n};\n\nEntity.prototype._getDecoder = function _getDecoder(enc) {\n  enc = enc || 'der';\n  // Lazily create decoder\n  if (!this.decoders.hasOwnProperty(enc))\n    this.decoders[enc] = this._createNamed(asn1.decoders[enc]);\n  return this.decoders[enc];\n};\n\nEntity.prototype.decode = function decode(data, enc, options) {\n  return this._getDecoder(enc).decode(data, options);\n};\n\nEntity.prototype._getEncoder = function _getEncoder(enc) {\n  enc = enc || 'der';\n  // Lazily create encoder\n  if (!this.encoders.hasOwnProperty(enc))\n    this.encoders[enc] = this._createNamed(asn1.encoders[enc]);\n  return this.encoders[enc];\n};\n\nEntity.prototype.encode = function encode(data, enc, /* internal */ reporter) {\n  return this._getEncoder(enc).encode(data, reporter);\n};\n","var inherits = require('inherits');\nvar Reporter = require('../base').Reporter;\nvar Buffer = require('buffer').Buffer;\n\nfunction DecoderBuffer(base, options) {\n  Reporter.call(this, options);\n  if (!Buffer.isBuffer(base)) {\n    this.error('Input not Buffer');\n    return;\n  }\n\n  this.base = base;\n  this.offset = 0;\n  this.length = base.length;\n}\ninherits(DecoderBuffer, Reporter);\nexports.DecoderBuffer = DecoderBuffer;\n\nDecoderBuffer.prototype.save = function save() {\n  return { offset: this.offset, reporter: Reporter.prototype.save.call(this) };\n};\n\nDecoderBuffer.prototype.restore = function restore(save) {\n  // Return skipped data\n  var res = new DecoderBuffer(this.base);\n  res.offset = save.offset;\n  res.length = this.offset;\n\n  this.offset = save.offset;\n  Reporter.prototype.restore.call(this, save.reporter);\n\n  return res;\n};\n\nDecoderBuffer.prototype.isEmpty = function isEmpty() {\n  return this.offset === this.length;\n};\n\nDecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {\n  if (this.offset + 1 <= this.length)\n    return this.base.readUInt8(this.offset++, true);\n  else\n    return this.error(fail || 'DecoderBuffer overrun');\n}\n\nDecoderBuffer.prototype.skip = function skip(bytes, fail) {\n  if (!(this.offset + bytes <= this.length))\n    return this.error(fail || 'DecoderBuffer overrun');\n\n  var res = new DecoderBuffer(this.base);\n\n  // Share reporter state\n  res._reporterState = this._reporterState;\n\n  res.offset = this.offset;\n  res.length = this.offset + bytes;\n  this.offset += bytes;\n  return res;\n}\n\nDecoderBuffer.prototype.raw = function raw(save) {\n  return this.base.slice(save ? save.offset : this.offset, this.length);\n}\n\nfunction EncoderBuffer(value, reporter) {\n  if (Array.isArray(value)) {\n    this.length = 0;\n    this.value = value.map(function(item) {\n      if (!(item instanceof EncoderBuffer))\n        item = new EncoderBuffer(item, reporter);\n      this.length += item.length;\n      return item;\n    }, this);\n  } else if (typeof value === 'number') {\n    if (!(0 <= value && value <= 0xff))\n      return reporter.error('non-byte EncoderBuffer value');\n    this.value = value;\n    this.length = 1;\n  } else if (typeof value === 'string') {\n    this.value = value;\n    this.length = Buffer.byteLength(value);\n  } else if (Buffer.isBuffer(value)) {\n    this.value = value;\n    this.length = value.length;\n  } else {\n    return reporter.error('Unsupported type: ' + typeof value);\n  }\n}\nexports.EncoderBuffer = EncoderBuffer;\n\nEncoderBuffer.prototype.join = function join(out, offset) {\n  if (!out)\n    out = new Buffer(this.length);\n  if (!offset)\n    offset = 0;\n\n  if (this.length === 0)\n    return out;\n\n  if (Array.isArray(this.value)) {\n    this.value.forEach(function(item) {\n      item.join(out, offset);\n      offset += item.length;\n    });\n  } else {\n    if (typeof this.value === 'number')\n      out[offset] = this.value;\n    else if (typeof this.value === 'string')\n      out.write(this.value, offset);\n    else if (Buffer.isBuffer(this.value))\n      this.value.copy(out, offset);\n    offset += this.length;\n  }\n\n  return out;\n};\n","var base = exports;\n\nbase.Reporter = require('./reporter').Reporter;\nbase.DecoderBuffer = require('./buffer').DecoderBuffer;\nbase.EncoderBuffer = require('./buffer').EncoderBuffer;\nbase.Node = require('./node');\n","var Reporter = require('../base').Reporter;\nvar EncoderBuffer = require('../base').EncoderBuffer;\nvar DecoderBuffer = require('../base').DecoderBuffer;\nvar assert = require('minimalistic-assert');\n\n// Supported tags\nvar tags = [\n  'seq', 'seqof', 'set', 'setof', 'objid', 'bool',\n  'gentime', 'utctime', 'null_', 'enum', 'int', 'objDesc',\n  'bitstr', 'bmpstr', 'charstr', 'genstr', 'graphstr', 'ia5str', 'iso646str',\n  'numstr', 'octstr', 'printstr', 't61str', 'unistr', 'utf8str', 'videostr'\n];\n\n// Public methods list\nvar methods = [\n  'key', 'obj', 'use', 'optional', 'explicit', 'implicit', 'def', 'choice',\n  'any', 'contains'\n].concat(tags);\n\n// Overrided methods list\nvar overrided = [\n  '_peekTag', '_decodeTag', '_use',\n  '_decodeStr', '_decodeObjid', '_decodeTime',\n  '_decodeNull', '_decodeInt', '_decodeBool', '_decodeList',\n\n  '_encodeComposite', '_encodeStr', '_encodeObjid', '_encodeTime',\n  '_encodeNull', '_encodeInt', '_encodeBool'\n];\n\nfunction Node(enc, parent) {\n  var state = {};\n  this._baseState = state;\n\n  state.enc = enc;\n\n  state.parent = parent || null;\n  state.children = null;\n\n  // State\n  state.tag = null;\n  state.args = null;\n  state.reverseArgs = null;\n  state.choice = null;\n  state.optional = false;\n  state.any = false;\n  state.obj = false;\n  state.use = null;\n  state.useDecoder = null;\n  state.key = null;\n  state['default'] = null;\n  state.explicit = null;\n  state.implicit = null;\n  state.contains = null;\n\n  // Should create new instance on each method\n  if (!state.parent) {\n    state.children = [];\n    this._wrap();\n  }\n}\nmodule.exports = Node;\n\nvar stateProps = [\n  'enc', 'parent', 'children', 'tag', 'args', 'reverseArgs', 'choice',\n  'optional', 'any', 'obj', 'use', 'alteredUse', 'key', 'default', 'explicit',\n  'implicit', 'contains'\n];\n\nNode.prototype.clone = function clone() {\n  var state = this._baseState;\n  var cstate = {};\n  stateProps.forEach(function(prop) {\n    cstate[prop] = state[prop];\n  });\n  var res = new this.constructor(cstate.parent);\n  res._baseState = cstate;\n  return res;\n};\n\nNode.prototype._wrap = function wrap() {\n  var state = this._baseState;\n  methods.forEach(function(method) {\n    this[method] = function _wrappedMethod() {\n      var clone = new this.constructor(this);\n      state.children.push(clone);\n      return clone[method].apply(clone, arguments);\n    };\n  }, this);\n};\n\nNode.prototype._init = function init(body) {\n  var state = this._baseState;\n\n  assert(state.parent === null);\n  body.call(this);\n\n  // Filter children\n  state.children = state.children.filter(function(child) {\n    return child._baseState.parent === this;\n  }, this);\n  assert.equal(state.children.length, 1, 'Root node can have only one child');\n};\n\nNode.prototype._useArgs = function useArgs(args) {\n  var state = this._baseState;\n\n  // Filter children and args\n  var children = args.filter(function(arg) {\n    return arg instanceof this.constructor;\n  }, this);\n  args = args.filter(function(arg) {\n    return !(arg instanceof this.constructor);\n  }, this);\n\n  if (children.length !== 0) {\n    assert(state.children === null);\n    state.children = children;\n\n    // Replace parent to maintain backward link\n    children.forEach(function(child) {\n      child._baseState.parent = this;\n    }, this);\n  }\n  if (args.length !== 0) {\n    assert(state.args === null);\n    state.args = args;\n    state.reverseArgs = args.map(function(arg) {\n      if (typeof arg !== 'object' || arg.constructor !== Object)\n        return arg;\n\n      var res = {};\n      Object.keys(arg).forEach(function(key) {\n        if (key == (key | 0))\n          key |= 0;\n        var value = arg[key];\n        res[value] = key;\n      });\n      return res;\n    });\n  }\n};\n\n//\n// Overrided methods\n//\n\noverrided.forEach(function(method) {\n  Node.prototype[method] = function _overrided() {\n    var state = this._baseState;\n    throw new Error(method + ' not implemented for encoding: ' + state.enc);\n  };\n});\n\n//\n// Public methods\n//\n\ntags.forEach(function(tag) {\n  Node.prototype[tag] = function _tagMethod() {\n    var state = this._baseState;\n    var args = Array.prototype.slice.call(arguments);\n\n    assert(state.tag === null);\n    state.tag = tag;\n\n    this._useArgs(args);\n\n    return this;\n  };\n});\n\nNode.prototype.use = function use(item) {\n  assert(item);\n  var state = this._baseState;\n\n  assert(state.use === null);\n  state.use = item;\n\n  return this;\n};\n\nNode.prototype.optional = function optional() {\n  var state = this._baseState;\n\n  state.optional = true;\n\n  return this;\n};\n\nNode.prototype.def = function def(val) {\n  var state = this._baseState;\n\n  assert(state['default'] === null);\n  state['default'] = val;\n  state.optional = true;\n\n  return this;\n};\n\nNode.prototype.explicit = function explicit(num) {\n  var state = this._baseState;\n\n  assert(state.explicit === null && state.implicit === null);\n  state.explicit = num;\n\n  return this;\n};\n\nNode.prototype.implicit = function implicit(num) {\n  var state = this._baseState;\n\n  assert(state.explicit === null && state.implicit === null);\n  state.implicit = num;\n\n  return this;\n};\n\nNode.prototype.obj = function obj() {\n  var state = this._baseState;\n  var args = Array.prototype.slice.call(arguments);\n\n  state.obj = true;\n\n  if (args.length !== 0)\n    this._useArgs(args);\n\n  return this;\n};\n\nNode.prototype.key = function key(newKey) {\n  var state = this._baseState;\n\n  assert(state.key === null);\n  state.key = newKey;\n\n  return this;\n};\n\nNode.prototype.any = function any() {\n  var state = this._baseState;\n\n  state.any = true;\n\n  return this;\n};\n\nNode.prototype.choice = function choice(obj) {\n  var state = this._baseState;\n\n  assert(state.choice === null);\n  state.choice = obj;\n  this._useArgs(Object.keys(obj).map(function(key) {\n    return obj[key];\n  }));\n\n  return this;\n};\n\nNode.prototype.contains = function contains(item) {\n  var state = this._baseState;\n\n  assert(state.use === null);\n  state.contains = item;\n\n  return this;\n};\n\n//\n// Decoding\n//\n\nNode.prototype._decode = function decode(input, options) {\n  var state = this._baseState;\n\n  // Decode root node\n  if (state.parent === null)\n    return input.wrapResult(state.children[0]._decode(input, options));\n\n  var result = state['default'];\n  var present = true;\n\n  var prevKey = null;\n  if (state.key !== null)\n    prevKey = input.enterKey(state.key);\n\n  // Check if tag is there\n  if (state.optional) {\n    var tag = null;\n    if (state.explicit !== null)\n      tag = state.explicit;\n    else if (state.implicit !== null)\n      tag = state.implicit;\n    else if (state.tag !== null)\n      tag = state.tag;\n\n    if (tag === null && !state.any) {\n      // Trial and Error\n      var save = input.save();\n      try {\n        if (state.choice === null)\n          this._decodeGeneric(state.tag, input, options);\n        else\n          this._decodeChoice(input, options);\n        present = true;\n      } catch (e) {\n        present = false;\n      }\n      input.restore(save);\n    } else {\n      present = this._peekTag(input, tag, state.any);\n\n      if (input.isError(present))\n        return present;\n    }\n  }\n\n  // Push object on stack\n  var prevObj;\n  if (state.obj && present)\n    prevObj = input.enterObject();\n\n  if (present) {\n    // Unwrap explicit values\n    if (state.explicit !== null) {\n      var explicit = this._decodeTag(input, state.explicit);\n      if (input.isError(explicit))\n        return explicit;\n      input = explicit;\n    }\n\n    var start = input.offset;\n\n    // Unwrap implicit and normal values\n    if (state.use === null && state.choice === null) {\n      if (state.any)\n        var save = input.save();\n      var body = this._decodeTag(\n        input,\n        state.implicit !== null ? state.implicit : state.tag,\n        state.any\n      );\n      if (input.isError(body))\n        return body;\n\n      if (state.any)\n        result = input.raw(save);\n      else\n        input = body;\n    }\n\n    if (options && options.track && state.tag !== null)\n      options.track(input.path(), start, input.length, 'tagged');\n\n    if (options && options.track && state.tag !== null)\n      options.track(input.path(), input.offset, input.length, 'content');\n\n    // Select proper method for tag\n    if (state.any)\n      result = result;\n    else if (state.choice === null)\n      result = this._decodeGeneric(state.tag, input, options);\n    else\n      result = this._decodeChoice(input, options);\n\n    if (input.isError(result))\n      return result;\n\n    // Decode children\n    if (!state.any && state.choice === null && state.children !== null) {\n      state.children.forEach(function decodeChildren(child) {\n        // NOTE: We are ignoring errors here, to let parser continue with other\n        // parts of encoded data\n        child._decode(input, options);\n      });\n    }\n\n    // Decode contained/encoded by schema, only in bit or octet strings\n    if (state.contains && (state.tag === 'octstr' || state.tag === 'bitstr')) {\n      var data = new DecoderBuffer(result);\n      result = this._getUse(state.contains, input._reporterState.obj)\n          ._decode(data, options);\n    }\n  }\n\n  // Pop object\n  if (state.obj && present)\n    result = input.leaveObject(prevObj);\n\n  // Set key\n  if (state.key !== null && (result !== null || present === true))\n    input.leaveKey(prevKey, state.key, result);\n  else if (prevKey !== null)\n    input.exitKey(prevKey);\n\n  return result;\n};\n\nNode.prototype._decodeGeneric = function decodeGeneric(tag, input, options) {\n  var state = this._baseState;\n\n  if (tag === 'seq' || tag === 'set')\n    return null;\n  if (tag === 'seqof' || tag === 'setof')\n    return this._decodeList(input, tag, state.args[0], options);\n  else if (/str$/.test(tag))\n    return this._decodeStr(input, tag, options);\n  else if (tag === 'objid' && state.args)\n    return this._decodeObjid(input, state.args[0], state.args[1], options);\n  else if (tag === 'objid')\n    return this._decodeObjid(input, null, null, options);\n  else if (tag === 'gentime' || tag === 'utctime')\n    return this._decodeTime(input, tag, options);\n  else if (tag === 'null_')\n    return this._decodeNull(input, options);\n  else if (tag === 'bool')\n    return this._decodeBool(input, options);\n  else if (tag === 'objDesc')\n    return this._decodeStr(input, tag, options);\n  else if (tag === 'int' || tag === 'enum')\n    return this._decodeInt(input, state.args && state.args[0], options);\n\n  if (state.use !== null) {\n    return this._getUse(state.use, input._reporterState.obj)\n        ._decode(input, options);\n  } else {\n    return input.error('unknown tag: ' + tag);\n  }\n};\n\nNode.prototype._getUse = function _getUse(entity, obj) {\n\n  var state = this._baseState;\n  // Create altered use decoder if implicit is set\n  state.useDecoder = this._use(entity, obj);\n  assert(state.useDecoder._baseState.parent === null);\n  state.useDecoder = state.useDecoder._baseState.children[0];\n  if (state.implicit !== state.useDecoder._baseState.implicit) {\n    state.useDecoder = state.useDecoder.clone();\n    state.useDecoder._baseState.implicit = state.implicit;\n  }\n  return state.useDecoder;\n};\n\nNode.prototype._decodeChoice = function decodeChoice(input, options) {\n  var state = this._baseState;\n  var result = null;\n  var match = false;\n\n  Object.keys(state.choice).some(function(key) {\n    var save = input.save();\n    var node = state.choice[key];\n    try {\n      var value = node._decode(input, options);\n      if (input.isError(value))\n        return false;\n\n      result = { type: key, value: value };\n      match = true;\n    } catch (e) {\n      input.restore(save);\n      return false;\n    }\n    return true;\n  }, this);\n\n  if (!match)\n    return input.error('Choice not matched');\n\n  return result;\n};\n\n//\n// Encoding\n//\n\nNode.prototype._createEncoderBuffer = function createEncoderBuffer(data) {\n  return new EncoderBuffer(data, this.reporter);\n};\n\nNode.prototype._encode = function encode(data, reporter, parent) {\n  var state = this._baseState;\n  if (state['default'] !== null && state['default'] === data)\n    return;\n\n  var result = this._encodeValue(data, reporter, parent);\n  if (result === undefined)\n    return;\n\n  if (this._skipDefault(result, reporter, parent))\n    return;\n\n  return result;\n};\n\nNode.prototype._encodeValue = function encode(data, reporter, parent) {\n  var state = this._baseState;\n\n  // Decode root node\n  if (state.parent === null)\n    return state.children[0]._encode(data, reporter || new Reporter());\n\n  var result = null;\n\n  // Set reporter to share it with a child class\n  this.reporter = reporter;\n\n  // Check if data is there\n  if (state.optional && data === undefined) {\n    if (state['default'] !== null)\n      data = state['default']\n    else\n      return;\n  }\n\n  // Encode children first\n  var content = null;\n  var primitive = false;\n  if (state.any) {\n    // Anything that was given is translated to buffer\n    result = this._createEncoderBuffer(data);\n  } else if (state.choice) {\n    result = this._encodeChoice(data, reporter);\n  } else if (state.contains) {\n    content = this._getUse(state.contains, parent)._encode(data, reporter);\n    primitive = true;\n  } else if (state.children) {\n    content = state.children.map(function(child) {\n      if (child._baseState.tag === 'null_')\n        return child._encode(null, reporter, data);\n\n      if (child._baseState.key === null)\n        return reporter.error('Child should have a key');\n      var prevKey = reporter.enterKey(child._baseState.key);\n\n      if (typeof data !== 'object')\n        return reporter.error('Child expected, but input is not object');\n\n      var res = child._encode(data[child._baseState.key], reporter, data);\n      reporter.leaveKey(prevKey);\n\n      return res;\n    }, this).filter(function(child) {\n      return child;\n    });\n    content = this._createEncoderBuffer(content);\n  } else {\n    if (state.tag === 'seqof' || state.tag === 'setof') {\n      // TODO(indutny): this should be thrown on DSL level\n      if (!(state.args && state.args.length === 1))\n        return reporter.error('Too many args for : ' + state.tag);\n\n      if (!Array.isArray(data))\n        return reporter.error('seqof/setof, but data is not Array');\n\n      var child = this.clone();\n      child._baseState.implicit = null;\n      content = this._createEncoderBuffer(data.map(function(item) {\n        var state = this._baseState;\n\n        return this._getUse(state.args[0], data)._encode(item, reporter);\n      }, child));\n    } else if (state.use !== null) {\n      result = this._getUse(state.use, parent)._encode(data, reporter);\n    } else {\n      content = this._encodePrimitive(state.tag, data);\n      primitive = true;\n    }\n  }\n\n  // Encode data itself\n  var result;\n  if (!state.any && state.choice === null) {\n    var tag = state.implicit !== null ? state.implicit : state.tag;\n    var cls = state.implicit === null ? 'universal' : 'context';\n\n    if (tag === null) {\n      if (state.use === null)\n        reporter.error('Tag could be omitted only for .use()');\n    } else {\n      if (state.use === null)\n        result = this._encodeComposite(tag, primitive, cls, content);\n    }\n  }\n\n  // Wrap in explicit\n  if (state.explicit !== null)\n    result = this._encodeComposite(state.explicit, false, 'context', result);\n\n  return result;\n};\n\nNode.prototype._encodeChoice = function encodeChoice(data, reporter) {\n  var state = this._baseState;\n\n  var node = state.choice[data.type];\n  if (!node) {\n    assert(\n        false,\n        data.type + ' not found in ' +\n            JSON.stringify(Object.keys(state.choice)));\n  }\n  return node._encode(data.value, reporter);\n};\n\nNode.prototype._encodePrimitive = function encodePrimitive(tag, data) {\n  var state = this._baseState;\n\n  if (/str$/.test(tag))\n    return this._encodeStr(data, tag);\n  else if (tag === 'objid' && state.args)\n    return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);\n  else if (tag === 'objid')\n    return this._encodeObjid(data, null, null);\n  else if (tag === 'gentime' || tag === 'utctime')\n    return this._encodeTime(data, tag);\n  else if (tag === 'null_')\n    return this._encodeNull();\n  else if (tag === 'int' || tag === 'enum')\n    return this._encodeInt(data, state.args && state.reverseArgs[0]);\n  else if (tag === 'bool')\n    return this._encodeBool(data);\n  else if (tag === 'objDesc')\n    return this._encodeStr(data, tag);\n  else\n    throw new Error('Unsupported tag: ' + tag);\n};\n\nNode.prototype._isNumstr = function isNumstr(str) {\n  return /^[0-9 ]*$/.test(str);\n};\n\nNode.prototype._isPrintstr = function isPrintstr(str) {\n  return /^[A-Za-z0-9 '\\(\\)\\+,\\-\\.\\/:=\\?]*$/.test(str);\n};\n","var inherits = require('inherits');\n\nfunction Reporter(options) {\n  this._reporterState = {\n    obj: null,\n    path: [],\n    options: options || {},\n    errors: []\n  };\n}\nexports.Reporter = Reporter;\n\nReporter.prototype.isError = function isError(obj) {\n  return obj instanceof ReporterError;\n};\n\nReporter.prototype.save = function save() {\n  var state = this._reporterState;\n\n  return { obj: state.obj, pathLen: state.path.length };\n};\n\nReporter.prototype.restore = function restore(data) {\n  var state = this._reporterState;\n\n  state.obj = data.obj;\n  state.path = state.path.slice(0, data.pathLen);\n};\n\nReporter.prototype.enterKey = function enterKey(key) {\n  return this._reporterState.path.push(key);\n};\n\nReporter.prototype.exitKey = function exitKey(index) {\n  var state = this._reporterState;\n\n  state.path = state.path.slice(0, index - 1);\n};\n\nReporter.prototype.leaveKey = function leaveKey(index, key, value) {\n  var state = this._reporterState;\n\n  this.exitKey(index);\n  if (state.obj !== null)\n    state.obj[key] = value;\n};\n\nReporter.prototype.path = function path() {\n  return this._reporterState.path.join('/');\n};\n\nReporter.prototype.enterObject = function enterObject() {\n  var state = this._reporterState;\n\n  var prev = state.obj;\n  state.obj = {};\n  return prev;\n};\n\nReporter.prototype.leaveObject = function leaveObject(prev) {\n  var state = this._reporterState;\n\n  var now = state.obj;\n  state.obj = prev;\n  return now;\n};\n\nReporter.prototype.error = function error(msg) {\n  var err;\n  var state = this._reporterState;\n\n  var inherited = msg instanceof ReporterError;\n  if (inherited) {\n    err = msg;\n  } else {\n    err = new ReporterError(state.path.map(function(elem) {\n      return '[' + JSON.stringify(elem) + ']';\n    }).join(''), msg.message || msg, msg.stack);\n  }\n\n  if (!state.options.partial)\n    throw err;\n\n  if (!inherited)\n    state.errors.push(err);\n\n  return err;\n};\n\nReporter.prototype.wrapResult = function wrapResult(result) {\n  var state = this._reporterState;\n  if (!state.options.partial)\n    return result;\n\n  return {\n    result: this.isError(result) ? null : result,\n    errors: state.errors\n  };\n};\n\nfunction ReporterError(path, msg) {\n  this.path = path;\n  this.rethrow(msg);\n};\ninherits(ReporterError, Error);\n\nReporterError.prototype.rethrow = function rethrow(msg) {\n  this.message = msg + ' at: ' + (this.path || '(shallow)');\n  if (Error.captureStackTrace)\n    Error.captureStackTrace(this, ReporterError);\n\n  if (!this.stack) {\n    try {\n      // IE only adds stack when thrown\n      throw new Error(this.message);\n    } catch (e) {\n      this.stack = e.stack;\n    }\n  }\n  return this;\n};\n","var constants = require('../constants');\n\nexports.tagClass = {\n  0: 'universal',\n  1: 'application',\n  2: 'context',\n  3: 'private'\n};\nexports.tagClassByName = constants._reverse(exports.tagClass);\n\nexports.tag = {\n  0x00: 'end',\n  0x01: 'bool',\n  0x02: 'int',\n  0x03: 'bitstr',\n  0x04: 'octstr',\n  0x05: 'null_',\n  0x06: 'objid',\n  0x07: 'objDesc',\n  0x08: 'external',\n  0x09: 'real',\n  0x0a: 'enum',\n  0x0b: 'embed',\n  0x0c: 'utf8str',\n  0x0d: 'relativeOid',\n  0x10: 'seq',\n  0x11: 'set',\n  0x12: 'numstr',\n  0x13: 'printstr',\n  0x14: 't61str',\n  0x15: 'videostr',\n  0x16: 'ia5str',\n  0x17: 'utctime',\n  0x18: 'gentime',\n  0x19: 'graphstr',\n  0x1a: 'iso646str',\n  0x1b: 'genstr',\n  0x1c: 'unistr',\n  0x1d: 'charstr',\n  0x1e: 'bmpstr'\n};\nexports.tagByName = constants._reverse(exports.tag);\n","var constants = exports;\n\n// Helper\nconstants._reverse = function reverse(map) {\n  var res = {};\n\n  Object.keys(map).forEach(function(key) {\n    // Convert key to integer if it is stringified\n    if ((key | 0) == key)\n      key = key | 0;\n\n    var value = map[key];\n    res[value] = key;\n  });\n\n  return res;\n};\n\nconstants.der = require('./der');\n","var inherits = require('inherits');\n\nvar asn1 = require('../../asn1');\nvar base = asn1.base;\nvar bignum = asn1.bignum;\n\n// Import DER constants\nvar der = asn1.constants.der;\n\nfunction DERDecoder(entity) {\n  this.enc = 'der';\n  this.name = entity.name;\n  this.entity = entity;\n\n  // Construct base tree\n  this.tree = new DERNode();\n  this.tree._init(entity.body);\n};\nmodule.exports = DERDecoder;\n\nDERDecoder.prototype.decode = function decode(data, options) {\n  if (!(data instanceof base.DecoderBuffer))\n    data = new base.DecoderBuffer(data, options);\n\n  return this.tree._decode(data, options);\n};\n\n// Tree methods\n\nfunction DERNode(parent) {\n  base.Node.call(this, 'der', parent);\n}\ninherits(DERNode, base.Node);\n\nDERNode.prototype._peekTag = function peekTag(buffer, tag, any) {\n  if (buffer.isEmpty())\n    return false;\n\n  var state = buffer.save();\n  var decodedTag = derDecodeTag(buffer, 'Failed to peek tag: \"' + tag + '\"');\n  if (buffer.isError(decodedTag))\n    return decodedTag;\n\n  buffer.restore(state);\n\n  return decodedTag.tag === tag || decodedTag.tagStr === tag ||\n    (decodedTag.tagStr + 'of') === tag || any;\n};\n\nDERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {\n  var decodedTag = derDecodeTag(buffer,\n                                'Failed to decode tag of \"' + tag + '\"');\n  if (buffer.isError(decodedTag))\n    return decodedTag;\n\n  var len = derDecodeLen(buffer,\n                         decodedTag.primitive,\n                         'Failed to get length of \"' + tag + '\"');\n\n  // Failure\n  if (buffer.isError(len))\n    return len;\n\n  if (!any &&\n      decodedTag.tag !== tag &&\n      decodedTag.tagStr !== tag &&\n      decodedTag.tagStr + 'of' !== tag) {\n    return buffer.error('Failed to match tag: \"' + tag + '\"');\n  }\n\n  if (decodedTag.primitive || len !== null)\n    return buffer.skip(len, 'Failed to match body of: \"' + tag + '\"');\n\n  // Indefinite length... find END tag\n  var state = buffer.save();\n  var res = this._skipUntilEnd(\n      buffer,\n      'Failed to skip indefinite length body: \"' + this.tag + '\"');\n  if (buffer.isError(res))\n    return res;\n\n  len = buffer.offset - state.offset;\n  buffer.restore(state);\n  return buffer.skip(len, 'Failed to match body of: \"' + tag + '\"');\n};\n\nDERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {\n  while (true) {\n    var tag = derDecodeTag(buffer, fail);\n    if (buffer.isError(tag))\n      return tag;\n    var len = derDecodeLen(buffer, tag.primitive, fail);\n    if (buffer.isError(len))\n      return len;\n\n    var res;\n    if (tag.primitive || len !== null)\n      res = buffer.skip(len)\n    else\n      res = this._skipUntilEnd(buffer, fail);\n\n    // Failure\n    if (buffer.isError(res))\n      return res;\n\n    if (tag.tagStr === 'end')\n      break;\n  }\n};\n\nDERNode.prototype._decodeList = function decodeList(buffer, tag, decoder,\n                                                    options) {\n  var result = [];\n  while (!buffer.isEmpty()) {\n    var possibleEnd = this._peekTag(buffer, 'end');\n    if (buffer.isError(possibleEnd))\n      return possibleEnd;\n\n    var res = decoder.decode(buffer, 'der', options);\n    if (buffer.isError(res) && possibleEnd)\n      break;\n    result.push(res);\n  }\n  return result;\n};\n\nDERNode.prototype._decodeStr = function decodeStr(buffer, tag) {\n  if (tag === 'bitstr') {\n    var unused = buffer.readUInt8();\n    if (buffer.isError(unused))\n      return unused;\n    return { unused: unused, data: buffer.raw() };\n  } else if (tag === 'bmpstr') {\n    var raw = buffer.raw();\n    if (raw.length % 2 === 1)\n      return buffer.error('Decoding of string type: bmpstr length mismatch');\n\n    var str = '';\n    for (var i = 0; i < raw.length / 2; i++) {\n      str += String.fromCharCode(raw.readUInt16BE(i * 2));\n    }\n    return str;\n  } else if (tag === 'numstr') {\n    var numstr = buffer.raw().toString('ascii');\n    if (!this._isNumstr(numstr)) {\n      return buffer.error('Decoding of string type: ' +\n                          'numstr unsupported characters');\n    }\n    return numstr;\n  } else if (tag === 'octstr') {\n    return buffer.raw();\n  } else if (tag === 'objDesc') {\n    return buffer.raw();\n  } else if (tag === 'printstr') {\n    var printstr = buffer.raw().toString('ascii');\n    if (!this._isPrintstr(printstr)) {\n      return buffer.error('Decoding of string type: ' +\n                          'printstr unsupported characters');\n    }\n    return printstr;\n  } else if (/str$/.test(tag)) {\n    return buffer.raw().toString();\n  } else {\n    return buffer.error('Decoding of string type: ' + tag + ' unsupported');\n  }\n};\n\nDERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {\n  var result;\n  var identifiers = [];\n  var ident = 0;\n  while (!buffer.isEmpty()) {\n    var subident = buffer.readUInt8();\n    ident <<= 7;\n    ident |= subident & 0x7f;\n    if ((subident & 0x80) === 0) {\n      identifiers.push(ident);\n      ident = 0;\n    }\n  }\n  if (subident & 0x80)\n    identifiers.push(ident);\n\n  var first = (identifiers[0] / 40) | 0;\n  var second = identifiers[0] % 40;\n\n  if (relative)\n    result = identifiers;\n  else\n    result = [first, second].concat(identifiers.slice(1));\n\n  if (values) {\n    var tmp = values[result.join(' ')];\n    if (tmp === undefined)\n      tmp = values[result.join('.')];\n    if (tmp !== undefined)\n      result = tmp;\n  }\n\n  return result;\n};\n\nDERNode.prototype._decodeTime = function decodeTime(buffer, tag) {\n  var str = buffer.raw().toString();\n  if (tag === 'gentime') {\n    var year = str.slice(0, 4) | 0;\n    var mon = str.slice(4, 6) | 0;\n    var day = str.slice(6, 8) | 0;\n    var hour = str.slice(8, 10) | 0;\n    var min = str.slice(10, 12) | 0;\n    var sec = str.slice(12, 14) | 0;\n  } else if (tag === 'utctime') {\n    var year = str.slice(0, 2) | 0;\n    var mon = str.slice(2, 4) | 0;\n    var day = str.slice(4, 6) | 0;\n    var hour = str.slice(6, 8) | 0;\n    var min = str.slice(8, 10) | 0;\n    var sec = str.slice(10, 12) | 0;\n    if (year < 70)\n      year = 2000 + year;\n    else\n      year = 1900 + year;\n  } else {\n    return buffer.error('Decoding ' + tag + ' time is not supported yet');\n  }\n\n  return Date.UTC(year, mon - 1, day, hour, min, sec, 0);\n};\n\nDERNode.prototype._decodeNull = function decodeNull(buffer) {\n  return null;\n};\n\nDERNode.prototype._decodeBool = function decodeBool(buffer) {\n  var res = buffer.readUInt8();\n  if (buffer.isError(res))\n    return res;\n  else\n    return res !== 0;\n};\n\nDERNode.prototype._decodeInt = function decodeInt(buffer, values) {\n  // Bigint, return as it is (assume big endian)\n  var raw = buffer.raw();\n  var res = new bignum(raw);\n\n  if (values)\n    res = values[res.toString(10)] || res;\n\n  return res;\n};\n\nDERNode.prototype._use = function use(entity, obj) {\n  if (typeof entity === 'function')\n    entity = entity(obj);\n  return entity._getDecoder('der').tree;\n};\n\n// Utility methods\n\nfunction derDecodeTag(buf, fail) {\n  var tag = buf.readUInt8(fail);\n  if (buf.isError(tag))\n    return tag;\n\n  var cls = der.tagClass[tag >> 6];\n  var primitive = (tag & 0x20) === 0;\n\n  // Multi-octet tag - load\n  if ((tag & 0x1f) === 0x1f) {\n    var oct = tag;\n    tag = 0;\n    while ((oct & 0x80) === 0x80) {\n      oct = buf.readUInt8(fail);\n      if (buf.isError(oct))\n        return oct;\n\n      tag <<= 7;\n      tag |= oct & 0x7f;\n    }\n  } else {\n    tag &= 0x1f;\n  }\n  var tagStr = der.tag[tag];\n\n  return {\n    cls: cls,\n    primitive: primitive,\n    tag: tag,\n    tagStr: tagStr\n  };\n}\n\nfunction derDecodeLen(buf, primitive, fail) {\n  var len = buf.readUInt8(fail);\n  if (buf.isError(len))\n    return len;\n\n  // Indefinite form\n  if (!primitive && len === 0x80)\n    return null;\n\n  // Definite form\n  if ((len & 0x80) === 0) {\n    // Short form\n    return len;\n  }\n\n  // Long form\n  var num = len & 0x7f;\n  if (num > 4)\n    return buf.error('length octect is too long');\n\n  len = 0;\n  for (var i = 0; i < num; i++) {\n    len <<= 8;\n    var j = buf.readUInt8(fail);\n    if (buf.isError(j))\n      return j;\n    len |= j;\n  }\n\n  return len;\n}\n","var decoders = exports;\n\ndecoders.der = require('./der');\ndecoders.pem = require('./pem');\n","var inherits = require('inherits');\nvar Buffer = require('buffer').Buffer;\n\nvar DERDecoder = require('./der');\n\nfunction PEMDecoder(entity) {\n  DERDecoder.call(this, entity);\n  this.enc = 'pem';\n};\ninherits(PEMDecoder, DERDecoder);\nmodule.exports = PEMDecoder;\n\nPEMDecoder.prototype.decode = function decode(data, options) {\n  var lines = data.toString().split(/[\\r\\n]+/g);\n\n  var label = options.label.toUpperCase();\n\n  var re = /^-----(BEGIN|END) ([^-]+)-----$/;\n  var start = -1;\n  var end = -1;\n  for (var i = 0; i < lines.length; i++) {\n    var match = lines[i].match(re);\n    if (match === null)\n      continue;\n\n    if (match[2] !== label)\n      continue;\n\n    if (start === -1) {\n      if (match[1] !== 'BEGIN')\n        break;\n      start = i;\n    } else {\n      if (match[1] !== 'END')\n        break;\n      end = i;\n      break;\n    }\n  }\n  if (start === -1 || end === -1)\n    throw new Error('PEM section not found for: ' + label);\n\n  var base64 = lines.slice(start + 1, end).join('');\n  // Remove excessive symbols\n  base64.replace(/[^a-z0-9\\+\\/=]+/gi, '');\n\n  var input = new Buffer(base64, 'base64');\n  return DERDecoder.prototype.decode.call(this, input, options);\n};\n","var inherits = require('inherits');\nvar Buffer = require('buffer').Buffer;\n\nvar asn1 = require('../../asn1');\nvar base = asn1.base;\n\n// Import DER constants\nvar der = asn1.constants.der;\n\nfunction DEREncoder(entity) {\n  this.enc = 'der';\n  this.name = entity.name;\n  this.entity = entity;\n\n  // Construct base tree\n  this.tree = new DERNode();\n  this.tree._init(entity.body);\n};\nmodule.exports = DEREncoder;\n\nDEREncoder.prototype.encode = function encode(data, reporter) {\n  return this.tree._encode(data, reporter).join();\n};\n\n// Tree methods\n\nfunction DERNode(parent) {\n  base.Node.call(this, 'der', parent);\n}\ninherits(DERNode, base.Node);\n\nDERNode.prototype._encodeComposite = function encodeComposite(tag,\n                                                              primitive,\n                                                              cls,\n                                                              content) {\n  var encodedTag = encodeTag(tag, primitive, cls, this.reporter);\n\n  // Short form\n  if (content.length < 0x80) {\n    var header = new Buffer(2);\n    header[0] = encodedTag;\n    header[1] = content.length;\n    return this._createEncoderBuffer([ header, content ]);\n  }\n\n  // Long form\n  // Count octets required to store length\n  var lenOctets = 1;\n  for (var i = content.length; i >= 0x100; i >>= 8)\n    lenOctets++;\n\n  var header = new Buffer(1 + 1 + lenOctets);\n  header[0] = encodedTag;\n  header[1] = 0x80 | lenOctets;\n\n  for (var i = 1 + lenOctets, j = content.length; j > 0; i--, j >>= 8)\n    header[i] = j & 0xff;\n\n  return this._createEncoderBuffer([ header, content ]);\n};\n\nDERNode.prototype._encodeStr = function encodeStr(str, tag) {\n  if (tag === 'bitstr') {\n    return this._createEncoderBuffer([ str.unused | 0, str.data ]);\n  } else if (tag === 'bmpstr') {\n    var buf = new Buffer(str.length * 2);\n    for (var i = 0; i < str.length; i++) {\n      buf.writeUInt16BE(str.charCodeAt(i), i * 2);\n    }\n    return this._createEncoderBuffer(buf);\n  } else if (tag === 'numstr') {\n    if (!this._isNumstr(str)) {\n      return this.reporter.error('Encoding of string type: numstr supports ' +\n                                 'only digits and space');\n    }\n    return this._createEncoderBuffer(str);\n  } else if (tag === 'printstr') {\n    if (!this._isPrintstr(str)) {\n      return this.reporter.error('Encoding of string type: printstr supports ' +\n                                 'only latin upper and lower case letters, ' +\n                                 'digits, space, apostrophe, left and rigth ' +\n                                 'parenthesis, plus sign, comma, hyphen, ' +\n                                 'dot, slash, colon, equal sign, ' +\n                                 'question mark');\n    }\n    return this._createEncoderBuffer(str);\n  } else if (/str$/.test(tag)) {\n    return this._createEncoderBuffer(str);\n  } else if (tag === 'objDesc') {\n    return this._createEncoderBuffer(str);\n  } else {\n    return this.reporter.error('Encoding of string type: ' + tag +\n                               ' unsupported');\n  }\n};\n\nDERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {\n  if (typeof id === 'string') {\n    if (!values)\n      return this.reporter.error('string objid given, but no values map found');\n    if (!values.hasOwnProperty(id))\n      return this.reporter.error('objid not found in values map');\n    id = values[id].split(/[\\s\\.]+/g);\n    for (var i = 0; i < id.length; i++)\n      id[i] |= 0;\n  } else if (Array.isArray(id)) {\n    id = id.slice();\n    for (var i = 0; i < id.length; i++)\n      id[i] |= 0;\n  }\n\n  if (!Array.isArray(id)) {\n    return this.reporter.error('objid() should be either array or string, ' +\n                               'got: ' + JSON.stringify(id));\n  }\n\n  if (!relative) {\n    if (id[1] >= 40)\n      return this.reporter.error('Second objid identifier OOB');\n    id.splice(0, 2, id[0] * 40 + id[1]);\n  }\n\n  // Count number of octets\n  var size = 0;\n  for (var i = 0; i < id.length; i++) {\n    var ident = id[i];\n    for (size++; ident >= 0x80; ident >>= 7)\n      size++;\n  }\n\n  var objid = new Buffer(size);\n  var offset = objid.length - 1;\n  for (var i = id.length - 1; i >= 0; i--) {\n    var ident = id[i];\n    objid[offset--] = ident & 0x7f;\n    while ((ident >>= 7) > 0)\n      objid[offset--] = 0x80 | (ident & 0x7f);\n  }\n\n  return this._createEncoderBuffer(objid);\n};\n\nfunction two(num) {\n  if (num < 10)\n    return '0' + num;\n  else\n    return num;\n}\n\nDERNode.prototype._encodeTime = function encodeTime(time, tag) {\n  var str;\n  var date = new Date(time);\n\n  if (tag === 'gentime') {\n    str = [\n      two(date.getFullYear()),\n      two(date.getUTCMonth() + 1),\n      two(date.getUTCDate()),\n      two(date.getUTCHours()),\n      two(date.getUTCMinutes()),\n      two(date.getUTCSeconds()),\n      'Z'\n    ].join('');\n  } else if (tag === 'utctime') {\n    str = [\n      two(date.getFullYear() % 100),\n      two(date.getUTCMonth() + 1),\n      two(date.getUTCDate()),\n      two(date.getUTCHours()),\n      two(date.getUTCMinutes()),\n      two(date.getUTCSeconds()),\n      'Z'\n    ].join('');\n  } else {\n    this.reporter.error('Encoding ' + tag + ' time is not supported yet');\n  }\n\n  return this._encodeStr(str, 'octstr');\n};\n\nDERNode.prototype._encodeNull = function encodeNull() {\n  return this._createEncoderBuffer('');\n};\n\nDERNode.prototype._encodeInt = function encodeInt(num, values) {\n  if (typeof num === 'string') {\n    if (!values)\n      return this.reporter.error('String int or enum given, but no values map');\n    if (!values.hasOwnProperty(num)) {\n      return this.reporter.error('Values map doesn\\'t contain: ' +\n                                 JSON.stringify(num));\n    }\n    num = values[num];\n  }\n\n  // Bignum, assume big endian\n  if (typeof num !== 'number' && !Buffer.isBuffer(num)) {\n    var numArray = num.toArray();\n    if (!num.sign && numArray[0] & 0x80) {\n      numArray.unshift(0);\n    }\n    num = new Buffer(numArray);\n  }\n\n  if (Buffer.isBuffer(num)) {\n    var size = num.length;\n    if (num.length === 0)\n      size++;\n\n    var out = new Buffer(size);\n    num.copy(out);\n    if (num.length === 0)\n      out[0] = 0\n    return this._createEncoderBuffer(out);\n  }\n\n  if (num < 0x80)\n    return this._createEncoderBuffer(num);\n\n  if (num < 0x100)\n    return this._createEncoderBuffer([0, num]);\n\n  var size = 1;\n  for (var i = num; i >= 0x100; i >>= 8)\n    size++;\n\n  var out = new Array(size);\n  for (var i = out.length - 1; i >= 0; i--) {\n    out[i] = num & 0xff;\n    num >>= 8;\n  }\n  if(out[0] & 0x80) {\n    out.unshift(0);\n  }\n\n  return this._createEncoderBuffer(new Buffer(out));\n};\n\nDERNode.prototype._encodeBool = function encodeBool(value) {\n  return this._createEncoderBuffer(value ? 0xff : 0);\n};\n\nDERNode.prototype._use = function use(entity, obj) {\n  if (typeof entity === 'function')\n    entity = entity(obj);\n  return entity._getEncoder('der').tree;\n};\n\nDERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {\n  var state = this._baseState;\n  var i;\n  if (state['default'] === null)\n    return false;\n\n  var data = dataBuffer.join();\n  if (state.defaultBuffer === undefined)\n    state.defaultBuffer = this._encodeValue(state['default'], reporter, parent).join();\n\n  if (data.length !== state.defaultBuffer.length)\n    return false;\n\n  for (i=0; i < data.length; i++)\n    if (data[i] !== state.defaultBuffer[i])\n      return false;\n\n  return true;\n};\n\n// Utility methods\n\nfunction encodeTag(tag, primitive, cls, reporter) {\n  var res;\n\n  if (tag === 'seqof')\n    tag = 'seq';\n  else if (tag === 'setof')\n    tag = 'set';\n\n  if (der.tagByName.hasOwnProperty(tag))\n    res = der.tagByName[tag];\n  else if (typeof tag === 'number' && (tag | 0) === tag)\n    res = tag;\n  else\n    return reporter.error('Unknown tag: ' + tag);\n\n  if (res >= 0x1f)\n    return reporter.error('Multi-octet tag encoding unsupported');\n\n  if (!primitive)\n    res |= 0x20;\n\n  res |= (der.tagClassByName[cls || 'universal'] << 6);\n\n  return res;\n}\n","var encoders = exports;\n\nencoders.der = require('./der');\nencoders.pem = require('./pem');\n","var inherits = require('inherits');\n\nvar DEREncoder = require('./der');\n\nfunction PEMEncoder(entity) {\n  DEREncoder.call(this, entity);\n  this.enc = 'pem';\n};\ninherits(PEMEncoder, DEREncoder);\nmodule.exports = PEMEncoder;\n\nPEMEncoder.prototype.encode = function encode(data, options) {\n  var buf = DEREncoder.prototype.encode.call(this, data);\n\n  var p = buf.toString('base64');\n  var out = [ '-----BEGIN ' + options.label + '-----' ];\n  for (var i = 0; i < p.length; i += 64)\n    out.push(p.slice(i, i + 64));\n  out.push('-----END ' + options.label + '-----');\n  return out.join('\\n');\n};\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","/*\r\n *  big.js v5.2.2\r\n *  A small, fast, easy-to-use library for arbitrary-precision decimal arithmetic.\r\n *  Copyright (c) 2018 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *  https://github.com/MikeMcl/big.js/LICENCE\r\n */\r\n;(function (GLOBAL) {\r\n  'use strict';\r\n  var Big,\r\n\r\n\r\n/************************************** EDITABLE DEFAULTS *****************************************/\r\n\r\n\r\n    // The default values below must be integers within the stated ranges.\r\n\r\n    /*\r\n     * The maximum number of decimal places (DP) of the results of operations involving division:\r\n     * div and sqrt, and pow with negative exponents.\r\n     */\r\n    DP = 20,          // 0 to MAX_DP\r\n\r\n    /*\r\n     * The rounding mode (RM) used when rounding to the above decimal places.\r\n     *\r\n     *  0  Towards zero (i.e. truncate, no rounding).       (ROUND_DOWN)\r\n     *  1  To nearest neighbour. If equidistant, round up.  (ROUND_HALF_UP)\r\n     *  2  To nearest neighbour. If equidistant, to even.   (ROUND_HALF_EVEN)\r\n     *  3  Away from zero.                                  (ROUND_UP)\r\n     */\r\n    RM = 1,             // 0, 1, 2 or 3\r\n\r\n    // The maximum value of DP and Big.DP.\r\n    MAX_DP = 1E6,       // 0 to 1000000\r\n\r\n    // The maximum magnitude of the exponent argument to the pow method.\r\n    MAX_POWER = 1E6,    // 1 to 1000000\r\n\r\n    /*\r\n     * The negative exponent (NE) at and beneath which toString returns exponential notation.\r\n     * (JavaScript numbers: -7)\r\n     * -1000000 is the minimum recommended exponent value of a Big.\r\n     */\r\n    NE = -7,            // 0 to -1000000\r\n\r\n    /*\r\n     * The positive exponent (PE) at and above which toString returns exponential notation.\r\n     * (JavaScript numbers: 21)\r\n     * 1000000 is the maximum recommended exponent value of a Big.\r\n     * (This limit is not enforced or checked.)\r\n     */\r\n    PE = 21,            // 0 to 1000000\r\n\r\n\r\n/**************************************************************************************************/\r\n\r\n\r\n    // Error messages.\r\n    NAME = '[big.js] ',\r\n    INVALID = NAME + 'Invalid ',\r\n    INVALID_DP = INVALID + 'decimal places',\r\n    INVALID_RM = INVALID + 'rounding mode',\r\n    DIV_BY_ZERO = NAME + 'Division by zero',\r\n\r\n    // The shared prototype object.\r\n    P = {},\r\n    UNDEFINED = void 0,\r\n    NUMERIC = /^-?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i;\r\n\r\n\r\n  /*\r\n   * Create and return a Big constructor.\r\n   *\r\n   */\r\n  function _Big_() {\r\n\r\n    /*\r\n     * The Big constructor and exported function.\r\n     * Create and return a new instance of a Big number object.\r\n     *\r\n     * n {number|string|Big} A numeric value.\r\n     */\r\n    function Big(n) {\r\n      var x = this;\r\n\r\n      // Enable constructor usage without new.\r\n      if (!(x instanceof Big)) return n === UNDEFINED ? _Big_() : new Big(n);\r\n\r\n      // Duplicate.\r\n      if (n instanceof Big) {\r\n        x.s = n.s;\r\n        x.e = n.e;\r\n        x.c = n.c.slice();\r\n      } else {\r\n        parse(x, n);\r\n      }\r\n\r\n      /*\r\n       * Retain a reference to this Big constructor, and shadow Big.prototype.constructor which\r\n       * points to Object.\r\n       */\r\n      x.constructor = Big;\r\n    }\r\n\r\n    Big.prototype = P;\r\n    Big.DP = DP;\r\n    Big.RM = RM;\r\n    Big.NE = NE;\r\n    Big.PE = PE;\r\n    Big.version = '5.2.2';\r\n\r\n    return Big;\r\n  }\r\n\r\n\r\n  /*\r\n   * Parse the number or string value passed to a Big constructor.\r\n   *\r\n   * x {Big} A Big number instance.\r\n   * n {number|string} A numeric value.\r\n   */\r\n  function parse(x, n) {\r\n    var e, i, nl;\r\n\r\n    // Minus zero?\r\n    if (n === 0 && 1 / n < 0) n = '-0';\r\n    else if (!NUMERIC.test(n += '')) throw Error(INVALID + 'number');\r\n\r\n    // Determine sign.\r\n    x.s = n.charAt(0) == '-' ? (n = n.slice(1), -1) : 1;\r\n\r\n    // Decimal point?\r\n    if ((e = n.indexOf('.')) > -1) n = n.replace('.', '');\r\n\r\n    // Exponential form?\r\n    if ((i = n.search(/e/i)) > 0) {\r\n\r\n      // Determine exponent.\r\n      if (e < 0) e = i;\r\n      e += +n.slice(i + 1);\r\n      n = n.substring(0, i);\r\n    } else if (e < 0) {\r\n\r\n      // Integer.\r\n      e = n.length;\r\n    }\r\n\r\n    nl = n.length;\r\n\r\n    // Determine leading zeros.\r\n    for (i = 0; i < nl && n.charAt(i) == '0';) ++i;\r\n\r\n    if (i == nl) {\r\n\r\n      // Zero.\r\n      x.c = [x.e = 0];\r\n    } else {\r\n\r\n      // Determine trailing zeros.\r\n      for (; nl > 0 && n.charAt(--nl) == '0';);\r\n      x.e = e - i - 1;\r\n      x.c = [];\r\n\r\n      // Convert string to array of digits without leading/trailing zeros.\r\n      for (e = 0; i <= nl;) x.c[e++] = +n.charAt(i++);\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Round Big x to a maximum of dp decimal places using rounding mode rm.\r\n   * Called by stringify, P.div, P.round and P.sqrt.\r\n   *\r\n   * x {Big} The Big to round.\r\n   * dp {number} Integer, 0 to MAX_DP inclusive.\r\n   * rm {number} 0, 1, 2 or 3 (DOWN, HALF_UP, HALF_EVEN, UP)\r\n   * [more] {boolean} Whether the result of division was truncated.\r\n   */\r\n  function round(x, dp, rm, more) {\r\n    var xc = x.c,\r\n      i = x.e + dp + 1;\r\n\r\n    if (i < xc.length) {\r\n      if (rm === 1) {\r\n\r\n        // xc[i] is the digit after the digit that may be rounded up.\r\n        more = xc[i] >= 5;\r\n      } else if (rm === 2) {\r\n        more = xc[i] > 5 || xc[i] == 5 &&\r\n          (more || i < 0 || xc[i + 1] !== UNDEFINED || xc[i - 1] & 1);\r\n      } else if (rm === 3) {\r\n        more = more || !!xc[0];\r\n      } else {\r\n        more = false;\r\n        if (rm !== 0) throw Error(INVALID_RM);\r\n      }\r\n\r\n      if (i < 1) {\r\n        xc.length = 1;\r\n\r\n        if (more) {\r\n\r\n          // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n          x.e = -dp;\r\n          xc[0] = 1;\r\n        } else {\r\n\r\n          // Zero.\r\n          xc[0] = x.e = 0;\r\n        }\r\n      } else {\r\n\r\n        // Remove any digits after the required decimal places.\r\n        xc.length = i--;\r\n\r\n        // Round up?\r\n        if (more) {\r\n\r\n          // Rounding up may mean the previous digit has to be rounded up.\r\n          for (; ++xc[i] > 9;) {\r\n            xc[i] = 0;\r\n            if (!i--) {\r\n              ++x.e;\r\n              xc.unshift(1);\r\n            }\r\n          }\r\n        }\r\n\r\n        // Remove trailing zeros.\r\n        for (i = xc.length; !xc[--i];) xc.pop();\r\n      }\r\n    } else if (rm < 0 || rm > 3 || rm !== ~~rm) {\r\n      throw Error(INVALID_RM);\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of Big x in normal or exponential notation.\r\n   * Handles P.toExponential, P.toFixed, P.toJSON, P.toPrecision, P.toString and P.valueOf.\r\n   *\r\n   * x {Big}\r\n   * id? {number} Caller id.\r\n   *         1 toExponential\r\n   *         2 toFixed\r\n   *         3 toPrecision\r\n   *         4 valueOf\r\n   * n? {number|undefined} Caller's argument.\r\n   * k? {number|undefined}\r\n   */\r\n  function stringify(x, id, n, k) {\r\n    var e, s,\r\n      Big = x.constructor,\r\n      z = !x.c[0];\r\n\r\n    if (n !== UNDEFINED) {\r\n      if (n !== ~~n || n < (id == 3) || n > MAX_DP) {\r\n        throw Error(id == 3 ? INVALID + 'precision' : INVALID_DP);\r\n      }\r\n\r\n      x = new Big(x);\r\n\r\n      // The index of the digit that may be rounded up.\r\n      n = k - x.e;\r\n\r\n      // Round?\r\n      if (x.c.length > ++k) round(x, n, Big.RM);\r\n\r\n      // toFixed: recalculate k as x.e may have changed if value rounded up.\r\n      if (id == 2) k = x.e + n + 1;\r\n\r\n      // Append zeros?\r\n      for (; x.c.length < k;) x.c.push(0);\r\n    }\r\n\r\n    e = x.e;\r\n    s = x.c.join('');\r\n    n = s.length;\r\n\r\n    // Exponential notation?\r\n    if (id != 2 && (id == 1 || id == 3 && k <= e || e <= Big.NE || e >= Big.PE)) {\r\n      s = s.charAt(0) + (n > 1 ? '.' + s.slice(1) : '') + (e < 0 ? 'e' : 'e+') + e;\r\n\r\n    // Normal notation.\r\n    } else if (e < 0) {\r\n      for (; ++e;) s = '0' + s;\r\n      s = '0.' + s;\r\n    } else if (e > 0) {\r\n      if (++e > n) for (e -= n; e--;) s += '0';\r\n      else if (e < n) s = s.slice(0, e) + '.' + s.slice(e);\r\n    } else if (n > 1) {\r\n      s = s.charAt(0) + '.' + s.slice(1);\r\n    }\r\n\r\n    return x.s < 0 && (!z || id == 4) ? '-' + s : s;\r\n  }\r\n\r\n\r\n  // Prototype/instance methods\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the absolute value of this Big.\r\n   */\r\n  P.abs = function () {\r\n    var x = new this.constructor(this);\r\n    x.s = 1;\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return 1 if the value of this Big is greater than the value of Big y,\r\n   *       -1 if the value of this Big is less than the value of Big y, or\r\n   *        0 if they have the same value.\r\n  */\r\n  P.cmp = function (y) {\r\n    var isneg,\r\n      x = this,\r\n      xc = x.c,\r\n      yc = (y = new x.constructor(y)).c,\r\n      i = x.s,\r\n      j = y.s,\r\n      k = x.e,\r\n      l = y.e;\r\n\r\n    // Either zero?\r\n    if (!xc[0] || !yc[0]) return !xc[0] ? !yc[0] ? 0 : -j : i;\r\n\r\n    // Signs differ?\r\n    if (i != j) return i;\r\n\r\n    isneg = i < 0;\r\n\r\n    // Compare exponents.\r\n    if (k != l) return k > l ^ isneg ? 1 : -1;\r\n\r\n    j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n    // Compare digit by digit.\r\n    for (i = -1; ++i < j;) {\r\n      if (xc[i] != yc[i]) return xc[i] > yc[i] ^ isneg ? 1 : -1;\r\n    }\r\n\r\n    // Compare lengths.\r\n    return k == l ? 0 : k > l ^ isneg ? 1 : -1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big divided by the value of Big y, rounded,\r\n   * if necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\r\n   */\r\n  P.div = function (y) {\r\n    var x = this,\r\n      Big = x.constructor,\r\n      a = x.c,                  // dividend\r\n      b = (y = new Big(y)).c,   // divisor\r\n      k = x.s == y.s ? 1 : -1,\r\n      dp = Big.DP;\r\n\r\n    if (dp !== ~~dp || dp < 0 || dp > MAX_DP) throw Error(INVALID_DP);\r\n\r\n    // Divisor is zero?\r\n    if (!b[0]) throw Error(DIV_BY_ZERO);\r\n\r\n    // Dividend is 0? Return +-0.\r\n    if (!a[0]) return new Big(k * 0);\r\n\r\n    var bl, bt, n, cmp, ri,\r\n      bz = b.slice(),\r\n      ai = bl = b.length,\r\n      al = a.length,\r\n      r = a.slice(0, bl),   // remainder\r\n      rl = r.length,\r\n      q = y,                // quotient\r\n      qc = q.c = [],\r\n      qi = 0,\r\n      d = dp + (q.e = x.e - y.e) + 1;    // number of digits of the result\r\n\r\n    q.s = k;\r\n    k = d < 0 ? 0 : d;\r\n\r\n    // Create version of divisor with leading zero.\r\n    bz.unshift(0);\r\n\r\n    // Add zeros to make remainder as long as divisor.\r\n    for (; rl++ < bl;) r.push(0);\r\n\r\n    do {\r\n\r\n      // n is how many times the divisor goes into current remainder.\r\n      for (n = 0; n < 10; n++) {\r\n\r\n        // Compare divisor and remainder.\r\n        if (bl != (rl = r.length)) {\r\n          cmp = bl > rl ? 1 : -1;\r\n        } else {\r\n          for (ri = -1, cmp = 0; ++ri < bl;) {\r\n            if (b[ri] != r[ri]) {\r\n              cmp = b[ri] > r[ri] ? 1 : -1;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        // If divisor < remainder, subtract divisor from remainder.\r\n        if (cmp < 0) {\r\n\r\n          // Remainder can't be more than 1 digit longer than divisor.\r\n          // Equalise lengths using divisor with extra leading zero?\r\n          for (bt = rl == bl ? b : bz; rl;) {\r\n            if (r[--rl] < bt[rl]) {\r\n              ri = rl;\r\n              for (; ri && !r[--ri];) r[ri] = 9;\r\n              --r[ri];\r\n              r[rl] += 10;\r\n            }\r\n            r[rl] -= bt[rl];\r\n          }\r\n\r\n          for (; !r[0];) r.shift();\r\n        } else {\r\n          break;\r\n        }\r\n      }\r\n\r\n      // Add the digit n to the result array.\r\n      qc[qi++] = cmp ? n : ++n;\r\n\r\n      // Update the remainder.\r\n      if (r[0] && cmp) r[rl] = a[ai] || 0;\r\n      else r = [a[ai]];\r\n\r\n    } while ((ai++ < al || r[0] !== UNDEFINED) && k--);\r\n\r\n    // Leading zero? Do not remove if result is simply zero (qi == 1).\r\n    if (!qc[0] && qi != 1) {\r\n\r\n      // There can't be more than one zero.\r\n      qc.shift();\r\n      q.e--;\r\n    }\r\n\r\n    // Round?\r\n    if (qi > d) round(q, dp, Big.RM, r[0] !== UNDEFINED);\r\n\r\n    return q;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Big is equal to the value of Big y, otherwise return false.\r\n   */\r\n  P.eq = function (y) {\r\n    return !this.cmp(y);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Big is greater than the value of Big y, otherwise return\r\n   * false.\r\n   */\r\n  P.gt = function (y) {\r\n    return this.cmp(y) > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Big is greater than or equal to the value of Big y, otherwise\r\n   * return false.\r\n   */\r\n  P.gte = function (y) {\r\n    return this.cmp(y) > -1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Big is less than the value of Big y, otherwise return false.\r\n   */\r\n  P.lt = function (y) {\r\n    return this.cmp(y) < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Big is less than or equal to the value of Big y, otherwise\r\n   * return false.\r\n   */\r\n  P.lte = function (y) {\r\n    return this.cmp(y) < 1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big minus the value of Big y.\r\n   */\r\n  P.minus = P.sub = function (y) {\r\n    var i, j, t, xlty,\r\n      x = this,\r\n      Big = x.constructor,\r\n      a = x.s,\r\n      b = (y = new Big(y)).s;\r\n\r\n    // Signs differ?\r\n    if (a != b) {\r\n      y.s = -b;\r\n      return x.plus(y);\r\n    }\r\n\r\n    var xc = x.c.slice(),\r\n      xe = x.e,\r\n      yc = y.c,\r\n      ye = y.e;\r\n\r\n    // Either zero?\r\n    if (!xc[0] || !yc[0]) {\r\n\r\n      // y is non-zero? x is non-zero? Or both are zero.\r\n      return yc[0] ? (y.s = -b, y) : new Big(xc[0] ? x : 0);\r\n    }\r\n\r\n    // Determine which is the bigger number. Prepend zeros to equalise exponents.\r\n    if (a = xe - ye) {\r\n\r\n      if (xlty = a < 0) {\r\n        a = -a;\r\n        t = xc;\r\n      } else {\r\n        ye = xe;\r\n        t = yc;\r\n      }\r\n\r\n      t.reverse();\r\n      for (b = a; b--;) t.push(0);\r\n      t.reverse();\r\n    } else {\r\n\r\n      // Exponents equal. Check digit by digit.\r\n      j = ((xlty = xc.length < yc.length) ? xc : yc).length;\r\n\r\n      for (a = b = 0; b < j; b++) {\r\n        if (xc[b] != yc[b]) {\r\n          xlty = xc[b] < yc[b];\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    // x < y? Point xc to the array of the bigger number.\r\n    if (xlty) {\r\n      t = xc;\r\n      xc = yc;\r\n      yc = t;\r\n      y.s = -y.s;\r\n    }\r\n\r\n    /*\r\n     * Append zeros to xc if shorter. No need to add zeros to yc if shorter as subtraction only\r\n     * needs to start at yc.length.\r\n     */\r\n    if ((b = (j = yc.length) - (i = xc.length)) > 0) for (; b--;) xc[i++] = 0;\r\n\r\n    // Subtract yc from xc.\r\n    for (b = i; j > a;) {\r\n      if (xc[--j] < yc[j]) {\r\n        for (i = j; i && !xc[--i];) xc[i] = 9;\r\n        --xc[i];\r\n        xc[j] += 10;\r\n      }\r\n\r\n      xc[j] -= yc[j];\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (; xc[--b] === 0;) xc.pop();\r\n\r\n    // Remove leading zeros and adjust exponent accordingly.\r\n    for (; xc[0] === 0;) {\r\n      xc.shift();\r\n      --ye;\r\n    }\r\n\r\n    if (!xc[0]) {\r\n\r\n      // n - n = +0\r\n      y.s = 1;\r\n\r\n      // Result must be zero.\r\n      xc = [ye = 0];\r\n    }\r\n\r\n    y.c = xc;\r\n    y.e = ye;\r\n\r\n    return y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big modulo the value of Big y.\r\n   */\r\n  P.mod = function (y) {\r\n    var ygtx,\r\n      x = this,\r\n      Big = x.constructor,\r\n      a = x.s,\r\n      b = (y = new Big(y)).s;\r\n\r\n    if (!y.c[0]) throw Error(DIV_BY_ZERO);\r\n\r\n    x.s = y.s = 1;\r\n    ygtx = y.cmp(x) == 1;\r\n    x.s = a;\r\n    y.s = b;\r\n\r\n    if (ygtx) return new Big(x);\r\n\r\n    a = Big.DP;\r\n    b = Big.RM;\r\n    Big.DP = Big.RM = 0;\r\n    x = x.div(y);\r\n    Big.DP = a;\r\n    Big.RM = b;\r\n\r\n    return this.minus(x.times(y));\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big plus the value of Big y.\r\n   */\r\n  P.plus = P.add = function (y) {\r\n    var t,\r\n      x = this,\r\n      Big = x.constructor,\r\n      a = x.s,\r\n      b = (y = new Big(y)).s;\r\n\r\n    // Signs differ?\r\n    if (a != b) {\r\n      y.s = -b;\r\n      return x.minus(y);\r\n    }\r\n\r\n    var xe = x.e,\r\n      xc = x.c,\r\n      ye = y.e,\r\n      yc = y.c;\r\n\r\n    // Either zero? y is non-zero? x is non-zero? Or both are zero.\r\n    if (!xc[0] || !yc[0]) return yc[0] ? y : new Big(xc[0] ? x : a * 0);\r\n\r\n    xc = xc.slice();\r\n\r\n    // Prepend zeros to equalise exponents.\r\n    // Note: reverse faster than unshifts.\r\n    if (a = xe - ye) {\r\n      if (a > 0) {\r\n        ye = xe;\r\n        t = yc;\r\n      } else {\r\n        a = -a;\r\n        t = xc;\r\n      }\r\n\r\n      t.reverse();\r\n      for (; a--;) t.push(0);\r\n      t.reverse();\r\n    }\r\n\r\n    // Point xc to the longer array.\r\n    if (xc.length - yc.length < 0) {\r\n      t = yc;\r\n      yc = xc;\r\n      xc = t;\r\n    }\r\n\r\n    a = yc.length;\r\n\r\n    // Only start adding at yc.length - 1 as the further digits of xc can be left as they are.\r\n    for (b = 0; a; xc[a] %= 10) b = (xc[--a] = xc[a] + yc[a] + b) / 10 | 0;\r\n\r\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n\r\n    if (b) {\r\n      xc.unshift(b);\r\n      ++ye;\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (a = xc.length; xc[--a] === 0;) xc.pop();\r\n\r\n    y.c = xc;\r\n    y.e = ye;\r\n\r\n    return y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a Big whose value is the value of this Big raised to the power n.\r\n   * If n is negative, round to a maximum of Big.DP decimal places using rounding\r\n   * mode Big.RM.\r\n   *\r\n   * n {number} Integer, -MAX_POWER to MAX_POWER inclusive.\r\n   */\r\n  P.pow = function (n) {\r\n    var x = this,\r\n      one = new x.constructor(1),\r\n      y = one,\r\n      isneg = n < 0;\r\n\r\n    if (n !== ~~n || n < -MAX_POWER || n > MAX_POWER) throw Error(INVALID + 'exponent');\r\n    if (isneg) n = -n;\r\n\r\n    for (;;) {\r\n      if (n & 1) y = y.times(x);\r\n      n >>= 1;\r\n      if (!n) break;\r\n      x = x.times(x);\r\n    }\r\n\r\n    return isneg ? one.div(y) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big rounded using rounding mode rm\r\n   * to a maximum of dp decimal places, or, if dp is negative, to an integer which is a\r\n   * multiple of 10**-dp.\r\n   * If dp is not specified, round to 0 decimal places.\r\n   * If rm is not specified, use Big.RM.\r\n   *\r\n   * dp? {number} Integer, -MAX_DP to MAX_DP inclusive.\r\n   * rm? 0, 1, 2 or 3 (ROUND_DOWN, ROUND_HALF_UP, ROUND_HALF_EVEN, ROUND_UP)\r\n   */\r\n  P.round = function (dp, rm) {\r\n    var Big = this.constructor;\r\n    if (dp === UNDEFINED) dp = 0;\r\n    else if (dp !== ~~dp || dp < -MAX_DP || dp > MAX_DP) throw Error(INVALID_DP);\r\n    return round(new Big(this), dp, rm === UNDEFINED ? Big.RM : rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the square root of the value of this Big, rounded, if\r\n   * necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\r\n   */\r\n  P.sqrt = function () {\r\n    var r, c, t,\r\n      x = this,\r\n      Big = x.constructor,\r\n      s = x.s,\r\n      e = x.e,\r\n      half = new Big(0.5);\r\n\r\n    // Zero?\r\n    if (!x.c[0]) return new Big(x);\r\n\r\n    // Negative?\r\n    if (s < 0) throw Error(NAME + 'No square root');\r\n\r\n    // Estimate.\r\n    s = Math.sqrt(x + '');\r\n\r\n    // Math.sqrt underflow/overflow?\r\n    // Re-estimate: pass x coefficient to Math.sqrt as integer, then adjust the result exponent.\r\n    if (s === 0 || s === 1 / 0) {\r\n      c = x.c.join('');\r\n      if (!(c.length + e & 1)) c += '0';\r\n      s = Math.sqrt(c);\r\n      e = ((e + 1) / 2 | 0) - (e < 0 || e & 1);\r\n      r = new Big((s == 1 / 0 ? '1e' : (s = s.toExponential()).slice(0, s.indexOf('e') + 1)) + e);\r\n    } else {\r\n      r = new Big(s);\r\n    }\r\n\r\n    e = r.e + (Big.DP += 4);\r\n\r\n    // Newton-Raphson iteration.\r\n    do {\r\n      t = r;\r\n      r = half.times(t.plus(x.div(t)));\r\n    } while (t.c.slice(0, e).join('') !== r.c.slice(0, e).join(''));\r\n\r\n    return round(r, Big.DP -= 4, Big.RM);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big times the value of Big y.\r\n   */\r\n  P.times = P.mul = function (y) {\r\n    var c,\r\n      x = this,\r\n      Big = x.constructor,\r\n      xc = x.c,\r\n      yc = (y = new Big(y)).c,\r\n      a = xc.length,\r\n      b = yc.length,\r\n      i = x.e,\r\n      j = y.e;\r\n\r\n    // Determine sign of result.\r\n    y.s = x.s == y.s ? 1 : -1;\r\n\r\n    // Return signed 0 if either 0.\r\n    if (!xc[0] || !yc[0]) return new Big(y.s * 0);\r\n\r\n    // Initialise exponent of result as x.e + y.e.\r\n    y.e = i + j;\r\n\r\n    // If array xc has fewer digits than yc, swap xc and yc, and lengths.\r\n    if (a < b) {\r\n      c = xc;\r\n      xc = yc;\r\n      yc = c;\r\n      j = a;\r\n      a = b;\r\n      b = j;\r\n    }\r\n\r\n    // Initialise coefficient array of result with zeros.\r\n    for (c = new Array(j = a + b); j--;) c[j] = 0;\r\n\r\n    // Multiply.\r\n\r\n    // i is initially xc.length.\r\n    for (i = b; i--;) {\r\n      b = 0;\r\n\r\n      // a is yc.length.\r\n      for (j = a + i; j > i;) {\r\n\r\n        // Current sum of products at this digit position, plus carry.\r\n        b = c[j] + yc[i] * xc[j - i - 1] + b;\r\n        c[j--] = b % 10;\r\n\r\n        // carry\r\n        b = b / 10 | 0;\r\n      }\r\n\r\n      c[j] = (c[j] + b) % 10;\r\n    }\r\n\r\n    // Increment result exponent if there is a final carry, otherwise remove leading zero.\r\n    if (b) ++y.e;\r\n    else c.shift();\r\n\r\n    // Remove trailing zeros.\r\n    for (i = c.length; !c[--i];) c.pop();\r\n    y.c = c;\r\n\r\n    return y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Big in exponential notation to dp fixed decimal\r\n   * places and rounded using Big.RM.\r\n   *\r\n   * dp? {number} Integer, 0 to MAX_DP inclusive.\r\n   */\r\n  P.toExponential = function (dp) {\r\n    return stringify(this, 1, dp, dp);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Big in normal notation to dp fixed decimal\r\n   * places and rounded using Big.RM.\r\n   *\r\n   * dp? {number} Integer, 0 to MAX_DP inclusive.\r\n   *\r\n   * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\r\n   * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\r\n   */\r\n  P.toFixed = function (dp) {\r\n    return stringify(this, 2, dp, this.e + dp);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Big rounded to sd significant digits using\r\n   * Big.RM. Use exponential notation if sd is less than the number of digits necessary to represent\r\n   * the integer part of the value in normal notation.\r\n   *\r\n   * sd {number} Integer, 1 to MAX_DP inclusive.\r\n   */\r\n  P.toPrecision = function (sd) {\r\n    return stringify(this, 3, sd, sd - 1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Big.\r\n   * Return exponential notation if this Big has a positive exponent equal to or greater than\r\n   * Big.PE, or a negative exponent equal to or less than Big.NE.\r\n   * Omit the sign for negative zero.\r\n   */\r\n  P.toString = function () {\r\n    return stringify(this);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Big.\r\n   * Return exponential notation if this Big has a positive exponent equal to or greater than\r\n   * Big.PE, or a negative exponent equal to or less than Big.NE.\r\n   * Include the sign for negative zero.\r\n   */\r\n  P.valueOf = P.toJSON = function () {\r\n    return stringify(this, 4);\r\n  };\r\n\r\n\r\n  // Export\r\n\r\n\r\n  Big = _Big_();\r\n\r\n  Big['default'] = Big.Big = Big;\r\n\r\n  //AMD.\r\n  if (typeof define === 'function' && define.amd) {\r\n    define(function () { return Big; });\r\n\r\n  // Node and other CommonJS-like environments that support module.exports.\r\n  } else if (typeof module !== 'undefined' && module.exports) {\r\n    module.exports = Big;\r\n\r\n  //Browser.\r\n  } else {\r\n    GLOBAL.Big = Big;\r\n  }\r\n})(this);\r\n","(function (module, exports) {\n  'use strict';\n\n  // Utils\n  function assert (val, msg) {\n    if (!val) throw new Error(msg || 'Assertion failed');\n  }\n\n  // Could use `inherits` module, but don't want to move from single file\n  // architecture yet.\n  function inherits (ctor, superCtor) {\n    ctor.super_ = superCtor;\n    var TempCtor = function () {};\n    TempCtor.prototype = superCtor.prototype;\n    ctor.prototype = new TempCtor();\n    ctor.prototype.constructor = ctor;\n  }\n\n  // BN\n\n  function BN (number, base, endian) {\n    if (BN.isBN(number)) {\n      return number;\n    }\n\n    this.negative = 0;\n    this.words = null;\n    this.length = 0;\n\n    // Reduction context\n    this.red = null;\n\n    if (number !== null) {\n      if (base === 'le' || base === 'be') {\n        endian = base;\n        base = 10;\n      }\n\n      this._init(number || 0, base || 10, endian || 'be');\n    }\n  }\n  if (typeof module === 'object') {\n    module.exports = BN;\n  } else {\n    exports.BN = BN;\n  }\n\n  BN.BN = BN;\n  BN.wordSize = 26;\n\n  var Buffer;\n  try {\n    Buffer = require('buffer').Buffer;\n  } catch (e) {\n  }\n\n  BN.isBN = function isBN (num) {\n    if (num instanceof BN) {\n      return true;\n    }\n\n    return num !== null && typeof num === 'object' &&\n      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);\n  };\n\n  BN.max = function max (left, right) {\n    if (left.cmp(right) > 0) return left;\n    return right;\n  };\n\n  BN.min = function min (left, right) {\n    if (left.cmp(right) < 0) return left;\n    return right;\n  };\n\n  BN.prototype._init = function init (number, base, endian) {\n    if (typeof number === 'number') {\n      return this._initNumber(number, base, endian);\n    }\n\n    if (typeof number === 'object') {\n      return this._initArray(number, base, endian);\n    }\n\n    if (base === 'hex') {\n      base = 16;\n    }\n    assert(base === (base | 0) && base >= 2 && base <= 36);\n\n    number = number.toString().replace(/\\s+/g, '');\n    var start = 0;\n    if (number[0] === '-') {\n      start++;\n    }\n\n    if (base === 16) {\n      this._parseHex(number, start);\n    } else {\n      this._parseBase(number, base, start);\n    }\n\n    if (number[0] === '-') {\n      this.negative = 1;\n    }\n\n    this.strip();\n\n    if (endian !== 'le') return;\n\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initNumber = function _initNumber (number, base, endian) {\n    if (number < 0) {\n      this.negative = 1;\n      number = -number;\n    }\n    if (number < 0x4000000) {\n      this.words = [ number & 0x3ffffff ];\n      this.length = 1;\n    } else if (number < 0x10000000000000) {\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff\n      ];\n      this.length = 2;\n    } else {\n      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff,\n        1\n      ];\n      this.length = 3;\n    }\n\n    if (endian !== 'le') return;\n\n    // Reverse the bytes\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initArray = function _initArray (number, base, endian) {\n    // Perhaps a Uint8Array\n    assert(typeof number.length === 'number');\n    if (number.length <= 0) {\n      this.words = [ 0 ];\n      this.length = 1;\n      return this;\n    }\n\n    this.length = Math.ceil(number.length / 3);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    var off = 0;\n    if (endian === 'be') {\n      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {\n        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    } else if (endian === 'le') {\n      for (i = 0, j = 0; i < number.length; i += 3) {\n        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    }\n    return this.strip();\n  };\n\n  function parseHex (str, start, end) {\n    var r = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r <<= 4;\n\n      // 'a' - 'f'\n      if (c >= 49 && c <= 54) {\n        r |= c - 49 + 0xa;\n\n      // 'A' - 'F'\n      } else if (c >= 17 && c <= 22) {\n        r |= c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        r |= c & 0xf;\n      }\n    }\n    return r;\n  }\n\n  BN.prototype._parseHex = function _parseHex (number, start) {\n    // Create possibly bigger array to ensure that it fits the number\n    this.length = Math.ceil((number.length - start) / 6);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    // Scan 24-bit chunks and add them to the number\n    var off = 0;\n    for (i = number.length - 6, j = 0; i >= start; i -= 6) {\n      w = parseHex(number, i, i + 6);\n      this.words[j] |= (w << off) & 0x3ffffff;\n      // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb\n      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;\n      off += 24;\n      if (off >= 26) {\n        off -= 26;\n        j++;\n      }\n    }\n    if (i + 6 !== start) {\n      w = parseHex(number, start, i + 6);\n      this.words[j] |= (w << off) & 0x3ffffff;\n      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;\n    }\n    this.strip();\n  };\n\n  function parseBase (str, start, end, mul) {\n    var r = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r *= mul;\n\n      // 'a'\n      if (c >= 49) {\n        r += c - 49 + 0xa;\n\n      // 'A'\n      } else if (c >= 17) {\n        r += c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        r += c;\n      }\n    }\n    return r;\n  }\n\n  BN.prototype._parseBase = function _parseBase (number, base, start) {\n    // Initialize as zero\n    this.words = [ 0 ];\n    this.length = 1;\n\n    // Find length of limb in base\n    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {\n      limbLen++;\n    }\n    limbLen--;\n    limbPow = (limbPow / base) | 0;\n\n    var total = number.length - start;\n    var mod = total % limbLen;\n    var end = Math.min(total, total - mod) + start;\n\n    var word = 0;\n    for (var i = start; i < end; i += limbLen) {\n      word = parseBase(number, i, i + limbLen, base);\n\n      this.imuln(limbPow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n\n    if (mod !== 0) {\n      var pow = 1;\n      word = parseBase(number, i, number.length, base);\n\n      for (i = 0; i < mod; i++) {\n        pow *= base;\n      }\n\n      this.imuln(pow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n  };\n\n  BN.prototype.copy = function copy (dest) {\n    dest.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      dest.words[i] = this.words[i];\n    }\n    dest.length = this.length;\n    dest.negative = this.negative;\n    dest.red = this.red;\n  };\n\n  BN.prototype.clone = function clone () {\n    var r = new BN(null);\n    this.copy(r);\n    return r;\n  };\n\n  BN.prototype._expand = function _expand (size) {\n    while (this.length < size) {\n      this.words[this.length++] = 0;\n    }\n    return this;\n  };\n\n  // Remove leading `0` from `this`\n  BN.prototype.strip = function strip () {\n    while (this.length > 1 && this.words[this.length - 1] === 0) {\n      this.length--;\n    }\n    return this._normSign();\n  };\n\n  BN.prototype._normSign = function _normSign () {\n    // -0 = 0\n    if (this.length === 1 && this.words[0] === 0) {\n      this.negative = 0;\n    }\n    return this;\n  };\n\n  BN.prototype.inspect = function inspect () {\n    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';\n  };\n\n  /*\n\n  var zeros = [];\n  var groupSizes = [];\n  var groupBases = [];\n\n  var s = '';\n  var i = -1;\n  while (++i < BN.wordSize) {\n    zeros[i] = s;\n    s += '0';\n  }\n  groupSizes[0] = 0;\n  groupSizes[1] = 0;\n  groupBases[0] = 0;\n  groupBases[1] = 0;\n  var base = 2 - 1;\n  while (++base < 36 + 1) {\n    var groupSize = 0;\n    var groupBase = 1;\n    while (groupBase < (1 << BN.wordSize) / base) {\n      groupBase *= base;\n      groupSize += 1;\n    }\n    groupSizes[base] = groupSize;\n    groupBases[base] = groupBase;\n  }\n\n  */\n\n  var zeros = [\n    '',\n    '0',\n    '00',\n    '000',\n    '0000',\n    '00000',\n    '000000',\n    '0000000',\n    '00000000',\n    '000000000',\n    '0000000000',\n    '00000000000',\n    '000000000000',\n    '0000000000000',\n    '00000000000000',\n    '000000000000000',\n    '0000000000000000',\n    '00000000000000000',\n    '000000000000000000',\n    '0000000000000000000',\n    '00000000000000000000',\n    '000000000000000000000',\n    '0000000000000000000000',\n    '00000000000000000000000',\n    '000000000000000000000000',\n    '0000000000000000000000000'\n  ];\n\n  var groupSizes = [\n    0, 0,\n    25, 16, 12, 11, 10, 9, 8,\n    8, 7, 7, 7, 7, 6, 6,\n    6, 6, 6, 6, 6, 5, 5,\n    5, 5, 5, 5, 5, 5, 5,\n    5, 5, 5, 5, 5, 5, 5\n  ];\n\n  var groupBases = [\n    0, 0,\n    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,\n    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,\n    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,\n    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,\n    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176\n  ];\n\n  BN.prototype.toString = function toString (base, padding) {\n    base = base || 10;\n    padding = padding | 0 || 1;\n\n    var out;\n    if (base === 16 || base === 'hex') {\n      out = '';\n      var off = 0;\n      var carry = 0;\n      for (var i = 0; i < this.length; i++) {\n        var w = this.words[i];\n        var word = (((w << off) | carry) & 0xffffff).toString(16);\n        carry = (w >>> (24 - off)) & 0xffffff;\n        if (carry !== 0 || i !== this.length - 1) {\n          out = zeros[6 - word.length] + word + out;\n        } else {\n          out = word + out;\n        }\n        off += 2;\n        if (off >= 26) {\n          off -= 26;\n          i--;\n        }\n      }\n      if (carry !== 0) {\n        out = carry.toString(16) + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    if (base === (base | 0) && base >= 2 && base <= 36) {\n      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));\n      var groupSize = groupSizes[base];\n      // var groupBase = Math.pow(base, groupSize);\n      var groupBase = groupBases[base];\n      out = '';\n      var c = this.clone();\n      c.negative = 0;\n      while (!c.isZero()) {\n        var r = c.modn(groupBase).toString(base);\n        c = c.idivn(groupBase);\n\n        if (!c.isZero()) {\n          out = zeros[groupSize - r.length] + r + out;\n        } else {\n          out = r + out;\n        }\n      }\n      if (this.isZero()) {\n        out = '0' + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    assert(false, 'Base should be between 2 and 36');\n  };\n\n  BN.prototype.toNumber = function toNumber () {\n    var ret = this.words[0];\n    if (this.length === 2) {\n      ret += this.words[1] * 0x4000000;\n    } else if (this.length === 3 && this.words[2] === 0x01) {\n      // NOTE: at this stage it is known that the top bit is set\n      ret += 0x10000000000000 + (this.words[1] * 0x4000000);\n    } else if (this.length > 2) {\n      assert(false, 'Number can only safely store up to 53 bits');\n    }\n    return (this.negative !== 0) ? -ret : ret;\n  };\n\n  BN.prototype.toJSON = function toJSON () {\n    return this.toString(16);\n  };\n\n  BN.prototype.toBuffer = function toBuffer (endian, length) {\n    assert(typeof Buffer !== 'undefined');\n    return this.toArrayLike(Buffer, endian, length);\n  };\n\n  BN.prototype.toArray = function toArray (endian, length) {\n    return this.toArrayLike(Array, endian, length);\n  };\n\n  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {\n    var byteLength = this.byteLength();\n    var reqLength = length || Math.max(1, byteLength);\n    assert(byteLength <= reqLength, 'byte array longer than desired length');\n    assert(reqLength > 0, 'Requested array length <= 0');\n\n    this.strip();\n    var littleEndian = endian === 'le';\n    var res = new ArrayType(reqLength);\n\n    var b, i;\n    var q = this.clone();\n    if (!littleEndian) {\n      // Assume big-endian\n      for (i = 0; i < reqLength - byteLength; i++) {\n        res[i] = 0;\n      }\n\n      for (i = 0; !q.isZero(); i++) {\n        b = q.andln(0xff);\n        q.iushrn(8);\n\n        res[reqLength - i - 1] = b;\n      }\n    } else {\n      for (i = 0; !q.isZero(); i++) {\n        b = q.andln(0xff);\n        q.iushrn(8);\n\n        res[i] = b;\n      }\n\n      for (; i < reqLength; i++) {\n        res[i] = 0;\n      }\n    }\n\n    return res;\n  };\n\n  if (Math.clz32) {\n    BN.prototype._countBits = function _countBits (w) {\n      return 32 - Math.clz32(w);\n    };\n  } else {\n    BN.prototype._countBits = function _countBits (w) {\n      var t = w;\n      var r = 0;\n      if (t >= 0x1000) {\n        r += 13;\n        t >>>= 13;\n      }\n      if (t >= 0x40) {\n        r += 7;\n        t >>>= 7;\n      }\n      if (t >= 0x8) {\n        r += 4;\n        t >>>= 4;\n      }\n      if (t >= 0x02) {\n        r += 2;\n        t >>>= 2;\n      }\n      return r + t;\n    };\n  }\n\n  BN.prototype._zeroBits = function _zeroBits (w) {\n    // Short-cut\n    if (w === 0) return 26;\n\n    var t = w;\n    var r = 0;\n    if ((t & 0x1fff) === 0) {\n      r += 13;\n      t >>>= 13;\n    }\n    if ((t & 0x7f) === 0) {\n      r += 7;\n      t >>>= 7;\n    }\n    if ((t & 0xf) === 0) {\n      r += 4;\n      t >>>= 4;\n    }\n    if ((t & 0x3) === 0) {\n      r += 2;\n      t >>>= 2;\n    }\n    if ((t & 0x1) === 0) {\n      r++;\n    }\n    return r;\n  };\n\n  // Return number of used bits in a BN\n  BN.prototype.bitLength = function bitLength () {\n    var w = this.words[this.length - 1];\n    var hi = this._countBits(w);\n    return (this.length - 1) * 26 + hi;\n  };\n\n  function toBitArray (num) {\n    var w = new Array(num.bitLength());\n\n    for (var bit = 0; bit < w.length; bit++) {\n      var off = (bit / 26) | 0;\n      var wbit = bit % 26;\n\n      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;\n    }\n\n    return w;\n  }\n\n  // Number of trailing zero bits\n  BN.prototype.zeroBits = function zeroBits () {\n    if (this.isZero()) return 0;\n\n    var r = 0;\n    for (var i = 0; i < this.length; i++) {\n      var b = this._zeroBits(this.words[i]);\n      r += b;\n      if (b !== 26) break;\n    }\n    return r;\n  };\n\n  BN.prototype.byteLength = function byteLength () {\n    return Math.ceil(this.bitLength() / 8);\n  };\n\n  BN.prototype.toTwos = function toTwos (width) {\n    if (this.negative !== 0) {\n      return this.abs().inotn(width).iaddn(1);\n    }\n    return this.clone();\n  };\n\n  BN.prototype.fromTwos = function fromTwos (width) {\n    if (this.testn(width - 1)) {\n      return this.notn(width).iaddn(1).ineg();\n    }\n    return this.clone();\n  };\n\n  BN.prototype.isNeg = function isNeg () {\n    return this.negative !== 0;\n  };\n\n  // Return negative clone of `this`\n  BN.prototype.neg = function neg () {\n    return this.clone().ineg();\n  };\n\n  BN.prototype.ineg = function ineg () {\n    if (!this.isZero()) {\n      this.negative ^= 1;\n    }\n\n    return this;\n  };\n\n  // Or `num` with `this` in-place\n  BN.prototype.iuor = function iuor (num) {\n    while (this.length < num.length) {\n      this.words[this.length++] = 0;\n    }\n\n    for (var i = 0; i < num.length; i++) {\n      this.words[i] = this.words[i] | num.words[i];\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ior = function ior (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuor(num);\n  };\n\n  // Or `num` with `this`\n  BN.prototype.or = function or (num) {\n    if (this.length > num.length) return this.clone().ior(num);\n    return num.clone().ior(this);\n  };\n\n  BN.prototype.uor = function uor (num) {\n    if (this.length > num.length) return this.clone().iuor(num);\n    return num.clone().iuor(this);\n  };\n\n  // And `num` with `this` in-place\n  BN.prototype.iuand = function iuand (num) {\n    // b = min-length(num, this)\n    var b;\n    if (this.length > num.length) {\n      b = num;\n    } else {\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = this.words[i] & num.words[i];\n    }\n\n    this.length = b.length;\n\n    return this.strip();\n  };\n\n  BN.prototype.iand = function iand (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuand(num);\n  };\n\n  // And `num` with `this`\n  BN.prototype.and = function and (num) {\n    if (this.length > num.length) return this.clone().iand(num);\n    return num.clone().iand(this);\n  };\n\n  BN.prototype.uand = function uand (num) {\n    if (this.length > num.length) return this.clone().iuand(num);\n    return num.clone().iuand(this);\n  };\n\n  // Xor `num` with `this` in-place\n  BN.prototype.iuxor = function iuxor (num) {\n    // a.length > b.length\n    var a;\n    var b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = a.words[i] ^ b.words[i];\n    }\n\n    if (this !== a) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = a.length;\n\n    return this.strip();\n  };\n\n  BN.prototype.ixor = function ixor (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuxor(num);\n  };\n\n  // Xor `num` with `this`\n  BN.prototype.xor = function xor (num) {\n    if (this.length > num.length) return this.clone().ixor(num);\n    return num.clone().ixor(this);\n  };\n\n  BN.prototype.uxor = function uxor (num) {\n    if (this.length > num.length) return this.clone().iuxor(num);\n    return num.clone().iuxor(this);\n  };\n\n  // Not ``this`` with ``width`` bitwidth\n  BN.prototype.inotn = function inotn (width) {\n    assert(typeof width === 'number' && width >= 0);\n\n    var bytesNeeded = Math.ceil(width / 26) | 0;\n    var bitsLeft = width % 26;\n\n    // Extend the buffer with leading zeroes\n    this._expand(bytesNeeded);\n\n    if (bitsLeft > 0) {\n      bytesNeeded--;\n    }\n\n    // Handle complete words\n    for (var i = 0; i < bytesNeeded; i++) {\n      this.words[i] = ~this.words[i] & 0x3ffffff;\n    }\n\n    // Handle the residue\n    if (bitsLeft > 0) {\n      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));\n    }\n\n    // And remove leading zeroes\n    return this.strip();\n  };\n\n  BN.prototype.notn = function notn (width) {\n    return this.clone().inotn(width);\n  };\n\n  // Set `bit` of `this`\n  BN.prototype.setn = function setn (bit, val) {\n    assert(typeof bit === 'number' && bit >= 0);\n\n    var off = (bit / 26) | 0;\n    var wbit = bit % 26;\n\n    this._expand(off + 1);\n\n    if (val) {\n      this.words[off] = this.words[off] | (1 << wbit);\n    } else {\n      this.words[off] = this.words[off] & ~(1 << wbit);\n    }\n\n    return this.strip();\n  };\n\n  // Add `num` to `this` in-place\n  BN.prototype.iadd = function iadd (num) {\n    var r;\n\n    // negative + positive\n    if (this.negative !== 0 && num.negative === 0) {\n      this.negative = 0;\n      r = this.isub(num);\n      this.negative ^= 1;\n      return this._normSign();\n\n    // positive + negative\n    } else if (this.negative === 0 && num.negative !== 0) {\n      num.negative = 0;\n      r = this.isub(num);\n      num.negative = 1;\n      return r._normSign();\n    }\n\n    // a.length > b.length\n    var a, b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n\n    this.length = a.length;\n    if (carry !== 0) {\n      this.words[this.length] = carry;\n      this.length++;\n    // Copy the rest of the words\n    } else if (a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    return this;\n  };\n\n  // Add `num` to `this`\n  BN.prototype.add = function add (num) {\n    var res;\n    if (num.negative !== 0 && this.negative === 0) {\n      num.negative = 0;\n      res = this.sub(num);\n      num.negative ^= 1;\n      return res;\n    } else if (num.negative === 0 && this.negative !== 0) {\n      this.negative = 0;\n      res = num.sub(this);\n      this.negative = 1;\n      return res;\n    }\n\n    if (this.length > num.length) return this.clone().iadd(num);\n\n    return num.clone().iadd(this);\n  };\n\n  // Subtract `num` from `this` in-place\n  BN.prototype.isub = function isub (num) {\n    // this - (-num) = this + num\n    if (num.negative !== 0) {\n      num.negative = 0;\n      var r = this.iadd(num);\n      num.negative = 1;\n      return r._normSign();\n\n    // -this - num = -(this + num)\n    } else if (this.negative !== 0) {\n      this.negative = 0;\n      this.iadd(num);\n      this.negative = 1;\n      return this._normSign();\n    }\n\n    // At this point both numbers are positive\n    var cmp = this.cmp(num);\n\n    // Optimization - zeroify\n    if (cmp === 0) {\n      this.negative = 0;\n      this.length = 1;\n      this.words[0] = 0;\n      return this;\n    }\n\n    // a > b\n    var a, b;\n    if (cmp > 0) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n\n    // Copy rest of the words\n    if (carry === 0 && i < a.length && a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = Math.max(this.length, i);\n\n    if (a !== this) {\n      this.negative = 1;\n    }\n\n    return this.strip();\n  };\n\n  // Subtract `num` from `this`\n  BN.prototype.sub = function sub (num) {\n    return this.clone().isub(num);\n  };\n\n  function smallMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    var len = (self.length + num.length) | 0;\n    out.length = len;\n    len = (len - 1) | 0;\n\n    // Peel one iteration (compiler can't do it, because of code complexity)\n    var a = self.words[0] | 0;\n    var b = num.words[0] | 0;\n    var r = a * b;\n\n    var lo = r & 0x3ffffff;\n    var carry = (r / 0x4000000) | 0;\n    out.words[0] = lo;\n\n    for (var k = 1; k < len; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = carry >>> 26;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = (k - j) | 0;\n        a = self.words[i] | 0;\n        b = num.words[j] | 0;\n        r = a * b + rword;\n        ncarry += (r / 0x4000000) | 0;\n        rword = r & 0x3ffffff;\n      }\n      out.words[k] = rword | 0;\n      carry = ncarry | 0;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry | 0;\n    } else {\n      out.length--;\n    }\n\n    return out.strip();\n  }\n\n  // TODO(indutny): it may be reasonable to omit it for users who don't need\n  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit\n  // multiplication (like elliptic secp256k1).\n  var comb10MulTo = function comb10MulTo (self, num, out) {\n    var a = self.words;\n    var b = num.words;\n    var o = out.words;\n    var c = 0;\n    var lo;\n    var mid;\n    var hi;\n    var a0 = a[0] | 0;\n    var al0 = a0 & 0x1fff;\n    var ah0 = a0 >>> 13;\n    var a1 = a[1] | 0;\n    var al1 = a1 & 0x1fff;\n    var ah1 = a1 >>> 13;\n    var a2 = a[2] | 0;\n    var al2 = a2 & 0x1fff;\n    var ah2 = a2 >>> 13;\n    var a3 = a[3] | 0;\n    var al3 = a3 & 0x1fff;\n    var ah3 = a3 >>> 13;\n    var a4 = a[4] | 0;\n    var al4 = a4 & 0x1fff;\n    var ah4 = a4 >>> 13;\n    var a5 = a[5] | 0;\n    var al5 = a5 & 0x1fff;\n    var ah5 = a5 >>> 13;\n    var a6 = a[6] | 0;\n    var al6 = a6 & 0x1fff;\n    var ah6 = a6 >>> 13;\n    var a7 = a[7] | 0;\n    var al7 = a7 & 0x1fff;\n    var ah7 = a7 >>> 13;\n    var a8 = a[8] | 0;\n    var al8 = a8 & 0x1fff;\n    var ah8 = a8 >>> 13;\n    var a9 = a[9] | 0;\n    var al9 = a9 & 0x1fff;\n    var ah9 = a9 >>> 13;\n    var b0 = b[0] | 0;\n    var bl0 = b0 & 0x1fff;\n    var bh0 = b0 >>> 13;\n    var b1 = b[1] | 0;\n    var bl1 = b1 & 0x1fff;\n    var bh1 = b1 >>> 13;\n    var b2 = b[2] | 0;\n    var bl2 = b2 & 0x1fff;\n    var bh2 = b2 >>> 13;\n    var b3 = b[3] | 0;\n    var bl3 = b3 & 0x1fff;\n    var bh3 = b3 >>> 13;\n    var b4 = b[4] | 0;\n    var bl4 = b4 & 0x1fff;\n    var bh4 = b4 >>> 13;\n    var b5 = b[5] | 0;\n    var bl5 = b5 & 0x1fff;\n    var bh5 = b5 >>> 13;\n    var b6 = b[6] | 0;\n    var bl6 = b6 & 0x1fff;\n    var bh6 = b6 >>> 13;\n    var b7 = b[7] | 0;\n    var bl7 = b7 & 0x1fff;\n    var bh7 = b7 >>> 13;\n    var b8 = b[8] | 0;\n    var bl8 = b8 & 0x1fff;\n    var bh8 = b8 >>> 13;\n    var b9 = b[9] | 0;\n    var bl9 = b9 & 0x1fff;\n    var bh9 = b9 >>> 13;\n\n    out.negative = self.negative ^ num.negative;\n    out.length = 19;\n    /* k = 0 */\n    lo = Math.imul(al0, bl0);\n    mid = Math.imul(al0, bh0);\n    mid = (mid + Math.imul(ah0, bl0)) | 0;\n    hi = Math.imul(ah0, bh0);\n    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;\n    w0 &= 0x3ffffff;\n    /* k = 1 */\n    lo = Math.imul(al1, bl0);\n    mid = Math.imul(al1, bh0);\n    mid = (mid + Math.imul(ah1, bl0)) | 0;\n    hi = Math.imul(ah1, bh0);\n    lo = (lo + Math.imul(al0, bl1)) | 0;\n    mid = (mid + Math.imul(al0, bh1)) | 0;\n    mid = (mid + Math.imul(ah0, bl1)) | 0;\n    hi = (hi + Math.imul(ah0, bh1)) | 0;\n    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;\n    w1 &= 0x3ffffff;\n    /* k = 2 */\n    lo = Math.imul(al2, bl0);\n    mid = Math.imul(al2, bh0);\n    mid = (mid + Math.imul(ah2, bl0)) | 0;\n    hi = Math.imul(ah2, bh0);\n    lo = (lo + Math.imul(al1, bl1)) | 0;\n    mid = (mid + Math.imul(al1, bh1)) | 0;\n    mid = (mid + Math.imul(ah1, bl1)) | 0;\n    hi = (hi + Math.imul(ah1, bh1)) | 0;\n    lo = (lo + Math.imul(al0, bl2)) | 0;\n    mid = (mid + Math.imul(al0, bh2)) | 0;\n    mid = (mid + Math.imul(ah0, bl2)) | 0;\n    hi = (hi + Math.imul(ah0, bh2)) | 0;\n    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;\n    w2 &= 0x3ffffff;\n    /* k = 3 */\n    lo = Math.imul(al3, bl0);\n    mid = Math.imul(al3, bh0);\n    mid = (mid + Math.imul(ah3, bl0)) | 0;\n    hi = Math.imul(ah3, bh0);\n    lo = (lo + Math.imul(al2, bl1)) | 0;\n    mid = (mid + Math.imul(al2, bh1)) | 0;\n    mid = (mid + Math.imul(ah2, bl1)) | 0;\n    hi = (hi + Math.imul(ah2, bh1)) | 0;\n    lo = (lo + Math.imul(al1, bl2)) | 0;\n    mid = (mid + Math.imul(al1, bh2)) | 0;\n    mid = (mid + Math.imul(ah1, bl2)) | 0;\n    hi = (hi + Math.imul(ah1, bh2)) | 0;\n    lo = (lo + Math.imul(al0, bl3)) | 0;\n    mid = (mid + Math.imul(al0, bh3)) | 0;\n    mid = (mid + Math.imul(ah0, bl3)) | 0;\n    hi = (hi + Math.imul(ah0, bh3)) | 0;\n    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;\n    w3 &= 0x3ffffff;\n    /* k = 4 */\n    lo = Math.imul(al4, bl0);\n    mid = Math.imul(al4, bh0);\n    mid = (mid + Math.imul(ah4, bl0)) | 0;\n    hi = Math.imul(ah4, bh0);\n    lo = (lo + Math.imul(al3, bl1)) | 0;\n    mid = (mid + Math.imul(al3, bh1)) | 0;\n    mid = (mid + Math.imul(ah3, bl1)) | 0;\n    hi = (hi + Math.imul(ah3, bh1)) | 0;\n    lo = (lo + Math.imul(al2, bl2)) | 0;\n    mid = (mid + Math.imul(al2, bh2)) | 0;\n    mid = (mid + Math.imul(ah2, bl2)) | 0;\n    hi = (hi + Math.imul(ah2, bh2)) | 0;\n    lo = (lo + Math.imul(al1, bl3)) | 0;\n    mid = (mid + Math.imul(al1, bh3)) | 0;\n    mid = (mid + Math.imul(ah1, bl3)) | 0;\n    hi = (hi + Math.imul(ah1, bh3)) | 0;\n    lo = (lo + Math.imul(al0, bl4)) | 0;\n    mid = (mid + Math.imul(al0, bh4)) | 0;\n    mid = (mid + Math.imul(ah0, bl4)) | 0;\n    hi = (hi + Math.imul(ah0, bh4)) | 0;\n    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;\n    w4 &= 0x3ffffff;\n    /* k = 5 */\n    lo = Math.imul(al5, bl0);\n    mid = Math.imul(al5, bh0);\n    mid = (mid + Math.imul(ah5, bl0)) | 0;\n    hi = Math.imul(ah5, bh0);\n    lo = (lo + Math.imul(al4, bl1)) | 0;\n    mid = (mid + Math.imul(al4, bh1)) | 0;\n    mid = (mid + Math.imul(ah4, bl1)) | 0;\n    hi = (hi + Math.imul(ah4, bh1)) | 0;\n    lo = (lo + Math.imul(al3, bl2)) | 0;\n    mid = (mid + Math.imul(al3, bh2)) | 0;\n    mid = (mid + Math.imul(ah3, bl2)) | 0;\n    hi = (hi + Math.imul(ah3, bh2)) | 0;\n    lo = (lo + Math.imul(al2, bl3)) | 0;\n    mid = (mid + Math.imul(al2, bh3)) | 0;\n    mid = (mid + Math.imul(ah2, bl3)) | 0;\n    hi = (hi + Math.imul(ah2, bh3)) | 0;\n    lo = (lo + Math.imul(al1, bl4)) | 0;\n    mid = (mid + Math.imul(al1, bh4)) | 0;\n    mid = (mid + Math.imul(ah1, bl4)) | 0;\n    hi = (hi + Math.imul(ah1, bh4)) | 0;\n    lo = (lo + Math.imul(al0, bl5)) | 0;\n    mid = (mid + Math.imul(al0, bh5)) | 0;\n    mid = (mid + Math.imul(ah0, bl5)) | 0;\n    hi = (hi + Math.imul(ah0, bh5)) | 0;\n    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;\n    w5 &= 0x3ffffff;\n    /* k = 6 */\n    lo = Math.imul(al6, bl0);\n    mid = Math.imul(al6, bh0);\n    mid = (mid + Math.imul(ah6, bl0)) | 0;\n    hi = Math.imul(ah6, bh0);\n    lo = (lo + Math.imul(al5, bl1)) | 0;\n    mid = (mid + Math.imul(al5, bh1)) | 0;\n    mid = (mid + Math.imul(ah5, bl1)) | 0;\n    hi = (hi + Math.imul(ah5, bh1)) | 0;\n    lo = (lo + Math.imul(al4, bl2)) | 0;\n    mid = (mid + Math.imul(al4, bh2)) | 0;\n    mid = (mid + Math.imul(ah4, bl2)) | 0;\n    hi = (hi + Math.imul(ah4, bh2)) | 0;\n    lo = (lo + Math.imul(al3, bl3)) | 0;\n    mid = (mid + Math.imul(al3, bh3)) | 0;\n    mid = (mid + Math.imul(ah3, bl3)) | 0;\n    hi = (hi + Math.imul(ah3, bh3)) | 0;\n    lo = (lo + Math.imul(al2, bl4)) | 0;\n    mid = (mid + Math.imul(al2, bh4)) | 0;\n    mid = (mid + Math.imul(ah2, bl4)) | 0;\n    hi = (hi + Math.imul(ah2, bh4)) | 0;\n    lo = (lo + Math.imul(al1, bl5)) | 0;\n    mid = (mid + Math.imul(al1, bh5)) | 0;\n    mid = (mid + Math.imul(ah1, bl5)) | 0;\n    hi = (hi + Math.imul(ah1, bh5)) | 0;\n    lo = (lo + Math.imul(al0, bl6)) | 0;\n    mid = (mid + Math.imul(al0, bh6)) | 0;\n    mid = (mid + Math.imul(ah0, bl6)) | 0;\n    hi = (hi + Math.imul(ah0, bh6)) | 0;\n    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;\n    w6 &= 0x3ffffff;\n    /* k = 7 */\n    lo = Math.imul(al7, bl0);\n    mid = Math.imul(al7, bh0);\n    mid = (mid + Math.imul(ah7, bl0)) | 0;\n    hi = Math.imul(ah7, bh0);\n    lo = (lo + Math.imul(al6, bl1)) | 0;\n    mid = (mid + Math.imul(al6, bh1)) | 0;\n    mid = (mid + Math.imul(ah6, bl1)) | 0;\n    hi = (hi + Math.imul(ah6, bh1)) | 0;\n    lo = (lo + Math.imul(al5, bl2)) | 0;\n    mid = (mid + Math.imul(al5, bh2)) | 0;\n    mid = (mid + Math.imul(ah5, bl2)) | 0;\n    hi = (hi + Math.imul(ah5, bh2)) | 0;\n    lo = (lo + Math.imul(al4, bl3)) | 0;\n    mid = (mid + Math.imul(al4, bh3)) | 0;\n    mid = (mid + Math.imul(ah4, bl3)) | 0;\n    hi = (hi + Math.imul(ah4, bh3)) | 0;\n    lo = (lo + Math.imul(al3, bl4)) | 0;\n    mid = (mid + Math.imul(al3, bh4)) | 0;\n    mid = (mid + Math.imul(ah3, bl4)) | 0;\n    hi = (hi + Math.imul(ah3, bh4)) | 0;\n    lo = (lo + Math.imul(al2, bl5)) | 0;\n    mid = (mid + Math.imul(al2, bh5)) | 0;\n    mid = (mid + Math.imul(ah2, bl5)) | 0;\n    hi = (hi + Math.imul(ah2, bh5)) | 0;\n    lo = (lo + Math.imul(al1, bl6)) | 0;\n    mid = (mid + Math.imul(al1, bh6)) | 0;\n    mid = (mid + Math.imul(ah1, bl6)) | 0;\n    hi = (hi + Math.imul(ah1, bh6)) | 0;\n    lo = (lo + Math.imul(al0, bl7)) | 0;\n    mid = (mid + Math.imul(al0, bh7)) | 0;\n    mid = (mid + Math.imul(ah0, bl7)) | 0;\n    hi = (hi + Math.imul(ah0, bh7)) | 0;\n    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;\n    w7 &= 0x3ffffff;\n    /* k = 8 */\n    lo = Math.imul(al8, bl0);\n    mid = Math.imul(al8, bh0);\n    mid = (mid + Math.imul(ah8, bl0)) | 0;\n    hi = Math.imul(ah8, bh0);\n    lo = (lo + Math.imul(al7, bl1)) | 0;\n    mid = (mid + Math.imul(al7, bh1)) | 0;\n    mid = (mid + Math.imul(ah7, bl1)) | 0;\n    hi = (hi + Math.imul(ah7, bh1)) | 0;\n    lo = (lo + Math.imul(al6, bl2)) | 0;\n    mid = (mid + Math.imul(al6, bh2)) | 0;\n    mid = (mid + Math.imul(ah6, bl2)) | 0;\n    hi = (hi + Math.imul(ah6, bh2)) | 0;\n    lo = (lo + Math.imul(al5, bl3)) | 0;\n    mid = (mid + Math.imul(al5, bh3)) | 0;\n    mid = (mid + Math.imul(ah5, bl3)) | 0;\n    hi = (hi + Math.imul(ah5, bh3)) | 0;\n    lo = (lo + Math.imul(al4, bl4)) | 0;\n    mid = (mid + Math.imul(al4, bh4)) | 0;\n    mid = (mid + Math.imul(ah4, bl4)) | 0;\n    hi = (hi + Math.imul(ah4, bh4)) | 0;\n    lo = (lo + Math.imul(al3, bl5)) | 0;\n    mid = (mid + Math.imul(al3, bh5)) | 0;\n    mid = (mid + Math.imul(ah3, bl5)) | 0;\n    hi = (hi + Math.imul(ah3, bh5)) | 0;\n    lo = (lo + Math.imul(al2, bl6)) | 0;\n    mid = (mid + Math.imul(al2, bh6)) | 0;\n    mid = (mid + Math.imul(ah2, bl6)) | 0;\n    hi = (hi + Math.imul(ah2, bh6)) | 0;\n    lo = (lo + Math.imul(al1, bl7)) | 0;\n    mid = (mid + Math.imul(al1, bh7)) | 0;\n    mid = (mid + Math.imul(ah1, bl7)) | 0;\n    hi = (hi + Math.imul(ah1, bh7)) | 0;\n    lo = (lo + Math.imul(al0, bl8)) | 0;\n    mid = (mid + Math.imul(al0, bh8)) | 0;\n    mid = (mid + Math.imul(ah0, bl8)) | 0;\n    hi = (hi + Math.imul(ah0, bh8)) | 0;\n    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;\n    w8 &= 0x3ffffff;\n    /* k = 9 */\n    lo = Math.imul(al9, bl0);\n    mid = Math.imul(al9, bh0);\n    mid = (mid + Math.imul(ah9, bl0)) | 0;\n    hi = Math.imul(ah9, bh0);\n    lo = (lo + Math.imul(al8, bl1)) | 0;\n    mid = (mid + Math.imul(al8, bh1)) | 0;\n    mid = (mid + Math.imul(ah8, bl1)) | 0;\n    hi = (hi + Math.imul(ah8, bh1)) | 0;\n    lo = (lo + Math.imul(al7, bl2)) | 0;\n    mid = (mid + Math.imul(al7, bh2)) | 0;\n    mid = (mid + Math.imul(ah7, bl2)) | 0;\n    hi = (hi + Math.imul(ah7, bh2)) | 0;\n    lo = (lo + Math.imul(al6, bl3)) | 0;\n    mid = (mid + Math.imul(al6, bh3)) | 0;\n    mid = (mid + Math.imul(ah6, bl3)) | 0;\n    hi = (hi + Math.imul(ah6, bh3)) | 0;\n    lo = (lo + Math.imul(al5, bl4)) | 0;\n    mid = (mid + Math.imul(al5, bh4)) | 0;\n    mid = (mid + Math.imul(ah5, bl4)) | 0;\n    hi = (hi + Math.imul(ah5, bh4)) | 0;\n    lo = (lo + Math.imul(al4, bl5)) | 0;\n    mid = (mid + Math.imul(al4, bh5)) | 0;\n    mid = (mid + Math.imul(ah4, bl5)) | 0;\n    hi = (hi + Math.imul(ah4, bh5)) | 0;\n    lo = (lo + Math.imul(al3, bl6)) | 0;\n    mid = (mid + Math.imul(al3, bh6)) | 0;\n    mid = (mid + Math.imul(ah3, bl6)) | 0;\n    hi = (hi + Math.imul(ah3, bh6)) | 0;\n    lo = (lo + Math.imul(al2, bl7)) | 0;\n    mid = (mid + Math.imul(al2, bh7)) | 0;\n    mid = (mid + Math.imul(ah2, bl7)) | 0;\n    hi = (hi + Math.imul(ah2, bh7)) | 0;\n    lo = (lo + Math.imul(al1, bl8)) | 0;\n    mid = (mid + Math.imul(al1, bh8)) | 0;\n    mid = (mid + Math.imul(ah1, bl8)) | 0;\n    hi = (hi + Math.imul(ah1, bh8)) | 0;\n    lo = (lo + Math.imul(al0, bl9)) | 0;\n    mid = (mid + Math.imul(al0, bh9)) | 0;\n    mid = (mid + Math.imul(ah0, bl9)) | 0;\n    hi = (hi + Math.imul(ah0, bh9)) | 0;\n    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;\n    w9 &= 0x3ffffff;\n    /* k = 10 */\n    lo = Math.imul(al9, bl1);\n    mid = Math.imul(al9, bh1);\n    mid = (mid + Math.imul(ah9, bl1)) | 0;\n    hi = Math.imul(ah9, bh1);\n    lo = (lo + Math.imul(al8, bl2)) | 0;\n    mid = (mid + Math.imul(al8, bh2)) | 0;\n    mid = (mid + Math.imul(ah8, bl2)) | 0;\n    hi = (hi + Math.imul(ah8, bh2)) | 0;\n    lo = (lo + Math.imul(al7, bl3)) | 0;\n    mid = (mid + Math.imul(al7, bh3)) | 0;\n    mid = (mid + Math.imul(ah7, bl3)) | 0;\n    hi = (hi + Math.imul(ah7, bh3)) | 0;\n    lo = (lo + Math.imul(al6, bl4)) | 0;\n    mid = (mid + Math.imul(al6, bh4)) | 0;\n    mid = (mid + Math.imul(ah6, bl4)) | 0;\n    hi = (hi + Math.imul(ah6, bh4)) | 0;\n    lo = (lo + Math.imul(al5, bl5)) | 0;\n    mid = (mid + Math.imul(al5, bh5)) | 0;\n    mid = (mid + Math.imul(ah5, bl5)) | 0;\n    hi = (hi + Math.imul(ah5, bh5)) | 0;\n    lo = (lo + Math.imul(al4, bl6)) | 0;\n    mid = (mid + Math.imul(al4, bh6)) | 0;\n    mid = (mid + Math.imul(ah4, bl6)) | 0;\n    hi = (hi + Math.imul(ah4, bh6)) | 0;\n    lo = (lo + Math.imul(al3, bl7)) | 0;\n    mid = (mid + Math.imul(al3, bh7)) | 0;\n    mid = (mid + Math.imul(ah3, bl7)) | 0;\n    hi = (hi + Math.imul(ah3, bh7)) | 0;\n    lo = (lo + Math.imul(al2, bl8)) | 0;\n    mid = (mid + Math.imul(al2, bh8)) | 0;\n    mid = (mid + Math.imul(ah2, bl8)) | 0;\n    hi = (hi + Math.imul(ah2, bh8)) | 0;\n    lo = (lo + Math.imul(al1, bl9)) | 0;\n    mid = (mid + Math.imul(al1, bh9)) | 0;\n    mid = (mid + Math.imul(ah1, bl9)) | 0;\n    hi = (hi + Math.imul(ah1, bh9)) | 0;\n    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;\n    w10 &= 0x3ffffff;\n    /* k = 11 */\n    lo = Math.imul(al9, bl2);\n    mid = Math.imul(al9, bh2);\n    mid = (mid + Math.imul(ah9, bl2)) | 0;\n    hi = Math.imul(ah9, bh2);\n    lo = (lo + Math.imul(al8, bl3)) | 0;\n    mid = (mid + Math.imul(al8, bh3)) | 0;\n    mid = (mid + Math.imul(ah8, bl3)) | 0;\n    hi = (hi + Math.imul(ah8, bh3)) | 0;\n    lo = (lo + Math.imul(al7, bl4)) | 0;\n    mid = (mid + Math.imul(al7, bh4)) | 0;\n    mid = (mid + Math.imul(ah7, bl4)) | 0;\n    hi = (hi + Math.imul(ah7, bh4)) | 0;\n    lo = (lo + Math.imul(al6, bl5)) | 0;\n    mid = (mid + Math.imul(al6, bh5)) | 0;\n    mid = (mid + Math.imul(ah6, bl5)) | 0;\n    hi = (hi + Math.imul(ah6, bh5)) | 0;\n    lo = (lo + Math.imul(al5, bl6)) | 0;\n    mid = (mid + Math.imul(al5, bh6)) | 0;\n    mid = (mid + Math.imul(ah5, bl6)) | 0;\n    hi = (hi + Math.imul(ah5, bh6)) | 0;\n    lo = (lo + Math.imul(al4, bl7)) | 0;\n    mid = (mid + Math.imul(al4, bh7)) | 0;\n    mid = (mid + Math.imul(ah4, bl7)) | 0;\n    hi = (hi + Math.imul(ah4, bh7)) | 0;\n    lo = (lo + Math.imul(al3, bl8)) | 0;\n    mid = (mid + Math.imul(al3, bh8)) | 0;\n    mid = (mid + Math.imul(ah3, bl8)) | 0;\n    hi = (hi + Math.imul(ah3, bh8)) | 0;\n    lo = (lo + Math.imul(al2, bl9)) | 0;\n    mid = (mid + Math.imul(al2, bh9)) | 0;\n    mid = (mid + Math.imul(ah2, bl9)) | 0;\n    hi = (hi + Math.imul(ah2, bh9)) | 0;\n    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;\n    w11 &= 0x3ffffff;\n    /* k = 12 */\n    lo = Math.imul(al9, bl3);\n    mid = Math.imul(al9, bh3);\n    mid = (mid + Math.imul(ah9, bl3)) | 0;\n    hi = Math.imul(ah9, bh3);\n    lo = (lo + Math.imul(al8, bl4)) | 0;\n    mid = (mid + Math.imul(al8, bh4)) | 0;\n    mid = (mid + Math.imul(ah8, bl4)) | 0;\n    hi = (hi + Math.imul(ah8, bh4)) | 0;\n    lo = (lo + Math.imul(al7, bl5)) | 0;\n    mid = (mid + Math.imul(al7, bh5)) | 0;\n    mid = (mid + Math.imul(ah7, bl5)) | 0;\n    hi = (hi + Math.imul(ah7, bh5)) | 0;\n    lo = (lo + Math.imul(al6, bl6)) | 0;\n    mid = (mid + Math.imul(al6, bh6)) | 0;\n    mid = (mid + Math.imul(ah6, bl6)) | 0;\n    hi = (hi + Math.imul(ah6, bh6)) | 0;\n    lo = (lo + Math.imul(al5, bl7)) | 0;\n    mid = (mid + Math.imul(al5, bh7)) | 0;\n    mid = (mid + Math.imul(ah5, bl7)) | 0;\n    hi = (hi + Math.imul(ah5, bh7)) | 0;\n    lo = (lo + Math.imul(al4, bl8)) | 0;\n    mid = (mid + Math.imul(al4, bh8)) | 0;\n    mid = (mid + Math.imul(ah4, bl8)) | 0;\n    hi = (hi + Math.imul(ah4, bh8)) | 0;\n    lo = (lo + Math.imul(al3, bl9)) | 0;\n    mid = (mid + Math.imul(al3, bh9)) | 0;\n    mid = (mid + Math.imul(ah3, bl9)) | 0;\n    hi = (hi + Math.imul(ah3, bh9)) | 0;\n    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;\n    w12 &= 0x3ffffff;\n    /* k = 13 */\n    lo = Math.imul(al9, bl4);\n    mid = Math.imul(al9, bh4);\n    mid = (mid + Math.imul(ah9, bl4)) | 0;\n    hi = Math.imul(ah9, bh4);\n    lo = (lo + Math.imul(al8, bl5)) | 0;\n    mid = (mid + Math.imul(al8, bh5)) | 0;\n    mid = (mid + Math.imul(ah8, bl5)) | 0;\n    hi = (hi + Math.imul(ah8, bh5)) | 0;\n    lo = (lo + Math.imul(al7, bl6)) | 0;\n    mid = (mid + Math.imul(al7, bh6)) | 0;\n    mid = (mid + Math.imul(ah7, bl6)) | 0;\n    hi = (hi + Math.imul(ah7, bh6)) | 0;\n    lo = (lo + Math.imul(al6, bl7)) | 0;\n    mid = (mid + Math.imul(al6, bh7)) | 0;\n    mid = (mid + Math.imul(ah6, bl7)) | 0;\n    hi = (hi + Math.imul(ah6, bh7)) | 0;\n    lo = (lo + Math.imul(al5, bl8)) | 0;\n    mid = (mid + Math.imul(al5, bh8)) | 0;\n    mid = (mid + Math.imul(ah5, bl8)) | 0;\n    hi = (hi + Math.imul(ah5, bh8)) | 0;\n    lo = (lo + Math.imul(al4, bl9)) | 0;\n    mid = (mid + Math.imul(al4, bh9)) | 0;\n    mid = (mid + Math.imul(ah4, bl9)) | 0;\n    hi = (hi + Math.imul(ah4, bh9)) | 0;\n    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;\n    w13 &= 0x3ffffff;\n    /* k = 14 */\n    lo = Math.imul(al9, bl5);\n    mid = Math.imul(al9, bh5);\n    mid = (mid + Math.imul(ah9, bl5)) | 0;\n    hi = Math.imul(ah9, bh5);\n    lo = (lo + Math.imul(al8, bl6)) | 0;\n    mid = (mid + Math.imul(al8, bh6)) | 0;\n    mid = (mid + Math.imul(ah8, bl6)) | 0;\n    hi = (hi + Math.imul(ah8, bh6)) | 0;\n    lo = (lo + Math.imul(al7, bl7)) | 0;\n    mid = (mid + Math.imul(al7, bh7)) | 0;\n    mid = (mid + Math.imul(ah7, bl7)) | 0;\n    hi = (hi + Math.imul(ah7, bh7)) | 0;\n    lo = (lo + Math.imul(al6, bl8)) | 0;\n    mid = (mid + Math.imul(al6, bh8)) | 0;\n    mid = (mid + Math.imul(ah6, bl8)) | 0;\n    hi = (hi + Math.imul(ah6, bh8)) | 0;\n    lo = (lo + Math.imul(al5, bl9)) | 0;\n    mid = (mid + Math.imul(al5, bh9)) | 0;\n    mid = (mid + Math.imul(ah5, bl9)) | 0;\n    hi = (hi + Math.imul(ah5, bh9)) | 0;\n    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;\n    w14 &= 0x3ffffff;\n    /* k = 15 */\n    lo = Math.imul(al9, bl6);\n    mid = Math.imul(al9, bh6);\n    mid = (mid + Math.imul(ah9, bl6)) | 0;\n    hi = Math.imul(ah9, bh6);\n    lo = (lo + Math.imul(al8, bl7)) | 0;\n    mid = (mid + Math.imul(al8, bh7)) | 0;\n    mid = (mid + Math.imul(ah8, bl7)) | 0;\n    hi = (hi + Math.imul(ah8, bh7)) | 0;\n    lo = (lo + Math.imul(al7, bl8)) | 0;\n    mid = (mid + Math.imul(al7, bh8)) | 0;\n    mid = (mid + Math.imul(ah7, bl8)) | 0;\n    hi = (hi + Math.imul(ah7, bh8)) | 0;\n    lo = (lo + Math.imul(al6, bl9)) | 0;\n    mid = (mid + Math.imul(al6, bh9)) | 0;\n    mid = (mid + Math.imul(ah6, bl9)) | 0;\n    hi = (hi + Math.imul(ah6, bh9)) | 0;\n    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;\n    w15 &= 0x3ffffff;\n    /* k = 16 */\n    lo = Math.imul(al9, bl7);\n    mid = Math.imul(al9, bh7);\n    mid = (mid + Math.imul(ah9, bl7)) | 0;\n    hi = Math.imul(ah9, bh7);\n    lo = (lo + Math.imul(al8, bl8)) | 0;\n    mid = (mid + Math.imul(al8, bh8)) | 0;\n    mid = (mid + Math.imul(ah8, bl8)) | 0;\n    hi = (hi + Math.imul(ah8, bh8)) | 0;\n    lo = (lo + Math.imul(al7, bl9)) | 0;\n    mid = (mid + Math.imul(al7, bh9)) | 0;\n    mid = (mid + Math.imul(ah7, bl9)) | 0;\n    hi = (hi + Math.imul(ah7, bh9)) | 0;\n    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;\n    w16 &= 0x3ffffff;\n    /* k = 17 */\n    lo = Math.imul(al9, bl8);\n    mid = Math.imul(al9, bh8);\n    mid = (mid + Math.imul(ah9, bl8)) | 0;\n    hi = Math.imul(ah9, bh8);\n    lo = (lo + Math.imul(al8, bl9)) | 0;\n    mid = (mid + Math.imul(al8, bh9)) | 0;\n    mid = (mid + Math.imul(ah8, bl9)) | 0;\n    hi = (hi + Math.imul(ah8, bh9)) | 0;\n    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;\n    w17 &= 0x3ffffff;\n    /* k = 18 */\n    lo = Math.imul(al9, bl9);\n    mid = Math.imul(al9, bh9);\n    mid = (mid + Math.imul(ah9, bl9)) | 0;\n    hi = Math.imul(ah9, bh9);\n    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;\n    w18 &= 0x3ffffff;\n    o[0] = w0;\n    o[1] = w1;\n    o[2] = w2;\n    o[3] = w3;\n    o[4] = w4;\n    o[5] = w5;\n    o[6] = w6;\n    o[7] = w7;\n    o[8] = w8;\n    o[9] = w9;\n    o[10] = w10;\n    o[11] = w11;\n    o[12] = w12;\n    o[13] = w13;\n    o[14] = w14;\n    o[15] = w15;\n    o[16] = w16;\n    o[17] = w17;\n    o[18] = w18;\n    if (c !== 0) {\n      o[19] = c;\n      out.length++;\n    }\n    return out;\n  };\n\n  // Polyfill comb\n  if (!Math.imul) {\n    comb10MulTo = smallMulTo;\n  }\n\n  function bigMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    out.length = self.length + num.length;\n\n    var carry = 0;\n    var hncarry = 0;\n    for (var k = 0; k < out.length - 1; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = hncarry;\n      hncarry = 0;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = k - j;\n        var a = self.words[i] | 0;\n        var b = num.words[j] | 0;\n        var r = a * b;\n\n        var lo = r & 0x3ffffff;\n        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;\n        lo = (lo + rword) | 0;\n        rword = lo & 0x3ffffff;\n        ncarry = (ncarry + (lo >>> 26)) | 0;\n\n        hncarry += ncarry >>> 26;\n        ncarry &= 0x3ffffff;\n      }\n      out.words[k] = rword;\n      carry = ncarry;\n      ncarry = hncarry;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry;\n    } else {\n      out.length--;\n    }\n\n    return out.strip();\n  }\n\n  function jumboMulTo (self, num, out) {\n    var fftm = new FFTM();\n    return fftm.mulp(self, num, out);\n  }\n\n  BN.prototype.mulTo = function mulTo (num, out) {\n    var res;\n    var len = this.length + num.length;\n    if (this.length === 10 && num.length === 10) {\n      res = comb10MulTo(this, num, out);\n    } else if (len < 63) {\n      res = smallMulTo(this, num, out);\n    } else if (len < 1024) {\n      res = bigMulTo(this, num, out);\n    } else {\n      res = jumboMulTo(this, num, out);\n    }\n\n    return res;\n  };\n\n  // Cooley-Tukey algorithm for FFT\n  // slightly revisited to rely on looping instead of recursion\n\n  function FFTM (x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  FFTM.prototype.makeRBT = function makeRBT (N) {\n    var t = new Array(N);\n    var l = BN.prototype._countBits(N) - 1;\n    for (var i = 0; i < N; i++) {\n      t[i] = this.revBin(i, l, N);\n    }\n\n    return t;\n  };\n\n  // Returns binary-reversed representation of `x`\n  FFTM.prototype.revBin = function revBin (x, l, N) {\n    if (x === 0 || x === N - 1) return x;\n\n    var rb = 0;\n    for (var i = 0; i < l; i++) {\n      rb |= (x & 1) << (l - i - 1);\n      x >>= 1;\n    }\n\n    return rb;\n  };\n\n  // Performs \"tweedling\" phase, therefore 'emulating'\n  // behaviour of the recursive algorithm\n  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {\n    for (var i = 0; i < N; i++) {\n      rtws[i] = rws[rbt[i]];\n      itws[i] = iws[rbt[i]];\n    }\n  };\n\n  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {\n    this.permute(rbt, rws, iws, rtws, itws, N);\n\n    for (var s = 1; s < N; s <<= 1) {\n      var l = s << 1;\n\n      var rtwdf = Math.cos(2 * Math.PI / l);\n      var itwdf = Math.sin(2 * Math.PI / l);\n\n      for (var p = 0; p < N; p += l) {\n        var rtwdf_ = rtwdf;\n        var itwdf_ = itwdf;\n\n        for (var j = 0; j < s; j++) {\n          var re = rtws[p + j];\n          var ie = itws[p + j];\n\n          var ro = rtws[p + j + s];\n          var io = itws[p + j + s];\n\n          var rx = rtwdf_ * ro - itwdf_ * io;\n\n          io = rtwdf_ * io + itwdf_ * ro;\n          ro = rx;\n\n          rtws[p + j] = re + ro;\n          itws[p + j] = ie + io;\n\n          rtws[p + j + s] = re - ro;\n          itws[p + j + s] = ie - io;\n\n          /* jshint maxdepth : false */\n          if (j !== l) {\n            rx = rtwdf * rtwdf_ - itwdf * itwdf_;\n\n            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;\n            rtwdf_ = rx;\n          }\n        }\n      }\n    }\n  };\n\n  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {\n    var N = Math.max(m, n) | 1;\n    var odd = N & 1;\n    var i = 0;\n    for (N = N / 2 | 0; N; N = N >>> 1) {\n      i++;\n    }\n\n    return 1 << i + 1 + odd;\n  };\n\n  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {\n    if (N <= 1) return;\n\n    for (var i = 0; i < N / 2; i++) {\n      var t = rws[i];\n\n      rws[i] = rws[N - i - 1];\n      rws[N - i - 1] = t;\n\n      t = iws[i];\n\n      iws[i] = -iws[N - i - 1];\n      iws[N - i - 1] = -t;\n    }\n  };\n\n  FFTM.prototype.normalize13b = function normalize13b (ws, N) {\n    var carry = 0;\n    for (var i = 0; i < N / 2; i++) {\n      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +\n        Math.round(ws[2 * i] / N) +\n        carry;\n\n      ws[i] = w & 0x3ffffff;\n\n      if (w < 0x4000000) {\n        carry = 0;\n      } else {\n        carry = w / 0x4000000 | 0;\n      }\n    }\n\n    return ws;\n  };\n\n  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {\n    var carry = 0;\n    for (var i = 0; i < len; i++) {\n      carry = carry + (ws[i] | 0);\n\n      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;\n      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;\n    }\n\n    // Pad with zeroes\n    for (i = 2 * len; i < N; ++i) {\n      rws[i] = 0;\n    }\n\n    assert(carry === 0);\n    assert((carry & ~0x1fff) === 0);\n  };\n\n  FFTM.prototype.stub = function stub (N) {\n    var ph = new Array(N);\n    for (var i = 0; i < N; i++) {\n      ph[i] = 0;\n    }\n\n    return ph;\n  };\n\n  FFTM.prototype.mulp = function mulp (x, y, out) {\n    var N = 2 * this.guessLen13b(x.length, y.length);\n\n    var rbt = this.makeRBT(N);\n\n    var _ = this.stub(N);\n\n    var rws = new Array(N);\n    var rwst = new Array(N);\n    var iwst = new Array(N);\n\n    var nrws = new Array(N);\n    var nrwst = new Array(N);\n    var niwst = new Array(N);\n\n    var rmws = out.words;\n    rmws.length = N;\n\n    this.convert13b(x.words, x.length, rws, N);\n    this.convert13b(y.words, y.length, nrws, N);\n\n    this.transform(rws, _, rwst, iwst, N, rbt);\n    this.transform(nrws, _, nrwst, niwst, N, rbt);\n\n    for (var i = 0; i < N; i++) {\n      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];\n      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];\n      rwst[i] = rx;\n    }\n\n    this.conjugate(rwst, iwst, N);\n    this.transform(rwst, iwst, rmws, _, N, rbt);\n    this.conjugate(rmws, _, N);\n    this.normalize13b(rmws, N);\n\n    out.negative = x.negative ^ y.negative;\n    out.length = x.length + y.length;\n    return out.strip();\n  };\n\n  // Multiply `this` by `num`\n  BN.prototype.mul = function mul (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return this.mulTo(num, out);\n  };\n\n  // Multiply employing FFT\n  BN.prototype.mulf = function mulf (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return jumboMulTo(this, num, out);\n  };\n\n  // In-place Multiplication\n  BN.prototype.imul = function imul (num) {\n    return this.clone().mulTo(num, this);\n  };\n\n  BN.prototype.imuln = function imuln (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n\n    // Carry\n    var carry = 0;\n    for (var i = 0; i < this.length; i++) {\n      var w = (this.words[i] | 0) * num;\n      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);\n      carry >>= 26;\n      carry += (w / 0x4000000) | 0;\n      // NOTE: lo is 27bit maximum\n      carry += lo >>> 26;\n      this.words[i] = lo & 0x3ffffff;\n    }\n\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n\n    return this;\n  };\n\n  BN.prototype.muln = function muln (num) {\n    return this.clone().imuln(num);\n  };\n\n  // `this` * `this`\n  BN.prototype.sqr = function sqr () {\n    return this.mul(this);\n  };\n\n  // `this` * `this` in-place\n  BN.prototype.isqr = function isqr () {\n    return this.imul(this.clone());\n  };\n\n  // Math.pow(`this`, `num`)\n  BN.prototype.pow = function pow (num) {\n    var w = toBitArray(num);\n    if (w.length === 0) return new BN(1);\n\n    // Skip leading zeroes\n    var res = this;\n    for (var i = 0; i < w.length; i++, res = res.sqr()) {\n      if (w[i] !== 0) break;\n    }\n\n    if (++i < w.length) {\n      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {\n        if (w[i] === 0) continue;\n\n        res = res.mul(q);\n      }\n    }\n\n    return res;\n  };\n\n  // Shift-left in-place\n  BN.prototype.iushln = function iushln (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);\n    var i;\n\n    if (r !== 0) {\n      var carry = 0;\n\n      for (i = 0; i < this.length; i++) {\n        var newCarry = this.words[i] & carryMask;\n        var c = ((this.words[i] | 0) - newCarry) << r;\n        this.words[i] = c | carry;\n        carry = newCarry >>> (26 - r);\n      }\n\n      if (carry) {\n        this.words[i] = carry;\n        this.length++;\n      }\n    }\n\n    if (s !== 0) {\n      for (i = this.length - 1; i >= 0; i--) {\n        this.words[i + s] = this.words[i];\n      }\n\n      for (i = 0; i < s; i++) {\n        this.words[i] = 0;\n      }\n\n      this.length += s;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ishln = function ishln (bits) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushln(bits);\n  };\n\n  // Shift-right in-place\n  // NOTE: `hint` is a lowest bit before trailing zeroes\n  // NOTE: if `extended` is present - it will be filled with destroyed bits\n  BN.prototype.iushrn = function iushrn (bits, hint, extended) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var h;\n    if (hint) {\n      h = (hint - (hint % 26)) / 26;\n    } else {\n      h = 0;\n    }\n\n    var r = bits % 26;\n    var s = Math.min((bits - r) / 26, this.length);\n    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n    var maskedWords = extended;\n\n    h -= s;\n    h = Math.max(0, h);\n\n    // Extended mode, copy masked part\n    if (maskedWords) {\n      for (var i = 0; i < s; i++) {\n        maskedWords.words[i] = this.words[i];\n      }\n      maskedWords.length = s;\n    }\n\n    if (s === 0) {\n      // No-op, we should not move anything at all\n    } else if (this.length > s) {\n      this.length -= s;\n      for (i = 0; i < this.length; i++) {\n        this.words[i] = this.words[i + s];\n      }\n    } else {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    var carry = 0;\n    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {\n      var word = this.words[i] | 0;\n      this.words[i] = (carry << (26 - r)) | (word >>> r);\n      carry = word & mask;\n    }\n\n    // Push carried bits as a mask\n    if (maskedWords && carry !== 0) {\n      maskedWords.words[maskedWords.length++] = carry;\n    }\n\n    if (this.length === 0) {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ishrn = function ishrn (bits, hint, extended) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushrn(bits, hint, extended);\n  };\n\n  // Shift-left\n  BN.prototype.shln = function shln (bits) {\n    return this.clone().ishln(bits);\n  };\n\n  BN.prototype.ushln = function ushln (bits) {\n    return this.clone().iushln(bits);\n  };\n\n  // Shift-right\n  BN.prototype.shrn = function shrn (bits) {\n    return this.clone().ishrn(bits);\n  };\n\n  BN.prototype.ushrn = function ushrn (bits) {\n    return this.clone().iushrn(bits);\n  };\n\n  // Test if n bit is set\n  BN.prototype.testn = function testn (bit) {\n    assert(typeof bit === 'number' && bit >= 0);\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) return false;\n\n    // Check bit and return\n    var w = this.words[s];\n\n    return !!(w & q);\n  };\n\n  // Return only lowers bits of number (in-place)\n  BN.prototype.imaskn = function imaskn (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n\n    assert(this.negative === 0, 'imaskn works only with positive numbers');\n\n    if (this.length <= s) {\n      return this;\n    }\n\n    if (r !== 0) {\n      s++;\n    }\n    this.length = Math.min(s, this.length);\n\n    if (r !== 0) {\n      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n      this.words[this.length - 1] &= mask;\n    }\n\n    return this.strip();\n  };\n\n  // Return only lowers bits of number\n  BN.prototype.maskn = function maskn (bits) {\n    return this.clone().imaskn(bits);\n  };\n\n  // Add plain number `num` to `this`\n  BN.prototype.iaddn = function iaddn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.isubn(-num);\n\n    // Possible sign change\n    if (this.negative !== 0) {\n      if (this.length === 1 && (this.words[0] | 0) < num) {\n        this.words[0] = num - (this.words[0] | 0);\n        this.negative = 0;\n        return this;\n      }\n\n      this.negative = 0;\n      this.isubn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    // Add without checks\n    return this._iaddn(num);\n  };\n\n  BN.prototype._iaddn = function _iaddn (num) {\n    this.words[0] += num;\n\n    // Carry\n    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {\n      this.words[i] -= 0x4000000;\n      if (i === this.length - 1) {\n        this.words[i + 1] = 1;\n      } else {\n        this.words[i + 1]++;\n      }\n    }\n    this.length = Math.max(this.length, i + 1);\n\n    return this;\n  };\n\n  // Subtract plain number `num` from `this`\n  BN.prototype.isubn = function isubn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.iaddn(-num);\n\n    if (this.negative !== 0) {\n      this.negative = 0;\n      this.iaddn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    this.words[0] -= num;\n\n    if (this.length === 1 && this.words[0] < 0) {\n      this.words[0] = -this.words[0];\n      this.negative = 1;\n    } else {\n      // Carry\n      for (var i = 0; i < this.length && this.words[i] < 0; i++) {\n        this.words[i] += 0x4000000;\n        this.words[i + 1] -= 1;\n      }\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.addn = function addn (num) {\n    return this.clone().iaddn(num);\n  };\n\n  BN.prototype.subn = function subn (num) {\n    return this.clone().isubn(num);\n  };\n\n  BN.prototype.iabs = function iabs () {\n    this.negative = 0;\n\n    return this;\n  };\n\n  BN.prototype.abs = function abs () {\n    return this.clone().iabs();\n  };\n\n  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {\n    var len = num.length + shift;\n    var i;\n\n    this._expand(len);\n\n    var w;\n    var carry = 0;\n    for (i = 0; i < num.length; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      var right = (num.words[i] | 0) * mul;\n      w -= right & 0x3ffffff;\n      carry = (w >> 26) - ((right / 0x4000000) | 0);\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n    for (; i < this.length - shift; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      carry = w >> 26;\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n\n    if (carry === 0) return this.strip();\n\n    // Subtraction overflow\n    assert(carry === -1);\n    carry = 0;\n    for (i = 0; i < this.length; i++) {\n      w = -(this.words[i] | 0) + carry;\n      carry = w >> 26;\n      this.words[i] = w & 0x3ffffff;\n    }\n    this.negative = 1;\n\n    return this.strip();\n  };\n\n  BN.prototype._wordDiv = function _wordDiv (num, mode) {\n    var shift = this.length - num.length;\n\n    var a = this.clone();\n    var b = num;\n\n    // Normalize\n    var bhi = b.words[b.length - 1] | 0;\n    var bhiBits = this._countBits(bhi);\n    shift = 26 - bhiBits;\n    if (shift !== 0) {\n      b = b.ushln(shift);\n      a.iushln(shift);\n      bhi = b.words[b.length - 1] | 0;\n    }\n\n    // Initialize quotient\n    var m = a.length - b.length;\n    var q;\n\n    if (mode !== 'mod') {\n      q = new BN(null);\n      q.length = m + 1;\n      q.words = new Array(q.length);\n      for (var i = 0; i < q.length; i++) {\n        q.words[i] = 0;\n      }\n    }\n\n    var diff = a.clone()._ishlnsubmul(b, 1, m);\n    if (diff.negative === 0) {\n      a = diff;\n      if (q) {\n        q.words[m] = 1;\n      }\n    }\n\n    for (var j = m - 1; j >= 0; j--) {\n      var qj = (a.words[b.length + j] | 0) * 0x4000000 +\n        (a.words[b.length + j - 1] | 0);\n\n      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max\n      // (0x7ffffff)\n      qj = Math.min((qj / bhi) | 0, 0x3ffffff);\n\n      a._ishlnsubmul(b, qj, j);\n      while (a.negative !== 0) {\n        qj--;\n        a.negative = 0;\n        a._ishlnsubmul(b, 1, j);\n        if (!a.isZero()) {\n          a.negative ^= 1;\n        }\n      }\n      if (q) {\n        q.words[j] = qj;\n      }\n    }\n    if (q) {\n      q.strip();\n    }\n    a.strip();\n\n    // Denormalize\n    if (mode !== 'div' && shift !== 0) {\n      a.iushrn(shift);\n    }\n\n    return {\n      div: q || null,\n      mod: a\n    };\n  };\n\n  // NOTE: 1) `mode` can be set to `mod` to request mod only,\n  //       to `div` to request div only, or be absent to\n  //       request both div & mod\n  //       2) `positive` is true if unsigned mod is requested\n  BN.prototype.divmod = function divmod (num, mode, positive) {\n    assert(!num.isZero());\n\n    if (this.isZero()) {\n      return {\n        div: new BN(0),\n        mod: new BN(0)\n      };\n    }\n\n    var div, mod, res;\n    if (this.negative !== 0 && num.negative === 0) {\n      res = this.neg().divmod(num, mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.iadd(num);\n        }\n      }\n\n      return {\n        div: div,\n        mod: mod\n      };\n    }\n\n    if (this.negative === 0 && num.negative !== 0) {\n      res = this.divmod(num.neg(), mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      return {\n        div: div,\n        mod: res.mod\n      };\n    }\n\n    if ((this.negative & num.negative) !== 0) {\n      res = this.neg().divmod(num.neg(), mode);\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.isub(num);\n        }\n      }\n\n      return {\n        div: res.div,\n        mod: mod\n      };\n    }\n\n    // Both numbers are positive at this point\n\n    // Strip both numbers to approximate shift value\n    if (num.length > this.length || this.cmp(num) < 0) {\n      return {\n        div: new BN(0),\n        mod: this\n      };\n    }\n\n    // Very short reduction\n    if (num.length === 1) {\n      if (mode === 'div') {\n        return {\n          div: this.divn(num.words[0]),\n          mod: null\n        };\n      }\n\n      if (mode === 'mod') {\n        return {\n          div: null,\n          mod: new BN(this.modn(num.words[0]))\n        };\n      }\n\n      return {\n        div: this.divn(num.words[0]),\n        mod: new BN(this.modn(num.words[0]))\n      };\n    }\n\n    return this._wordDiv(num, mode);\n  };\n\n  // Find `this` / `num`\n  BN.prototype.div = function div (num) {\n    return this.divmod(num, 'div', false).div;\n  };\n\n  // Find `this` % `num`\n  BN.prototype.mod = function mod (num) {\n    return this.divmod(num, 'mod', false).mod;\n  };\n\n  BN.prototype.umod = function umod (num) {\n    return this.divmod(num, 'mod', true).mod;\n  };\n\n  // Find Round(`this` / `num`)\n  BN.prototype.divRound = function divRound (num) {\n    var dm = this.divmod(num);\n\n    // Fast case - exact division\n    if (dm.mod.isZero()) return dm.div;\n\n    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;\n\n    var half = num.ushrn(1);\n    var r2 = num.andln(1);\n    var cmp = mod.cmp(half);\n\n    // Round down\n    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;\n\n    // Round up\n    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);\n  };\n\n  BN.prototype.modn = function modn (num) {\n    assert(num <= 0x3ffffff);\n    var p = (1 << 26) % num;\n\n    var acc = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      acc = (p * acc + (this.words[i] | 0)) % num;\n    }\n\n    return acc;\n  };\n\n  // In-place division by number\n  BN.prototype.idivn = function idivn (num) {\n    assert(num <= 0x3ffffff);\n\n    var carry = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var w = (this.words[i] | 0) + carry * 0x4000000;\n      this.words[i] = (w / num) | 0;\n      carry = w % num;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.divn = function divn (num) {\n    return this.clone().idivn(num);\n  };\n\n  BN.prototype.egcd = function egcd (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var x = this;\n    var y = p.clone();\n\n    if (x.negative !== 0) {\n      x = x.umod(p);\n    } else {\n      x = x.clone();\n    }\n\n    // A * x + B * y = x\n    var A = new BN(1);\n    var B = new BN(0);\n\n    // C * x + D * y = y\n    var C = new BN(0);\n    var D = new BN(1);\n\n    var g = 0;\n\n    while (x.isEven() && y.isEven()) {\n      x.iushrn(1);\n      y.iushrn(1);\n      ++g;\n    }\n\n    var yp = y.clone();\n    var xp = x.clone();\n\n    while (!x.isZero()) {\n      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        x.iushrn(i);\n        while (i-- > 0) {\n          if (A.isOdd() || B.isOdd()) {\n            A.iadd(yp);\n            B.isub(xp);\n          }\n\n          A.iushrn(1);\n          B.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        y.iushrn(j);\n        while (j-- > 0) {\n          if (C.isOdd() || D.isOdd()) {\n            C.iadd(yp);\n            D.isub(xp);\n          }\n\n          C.iushrn(1);\n          D.iushrn(1);\n        }\n      }\n\n      if (x.cmp(y) >= 0) {\n        x.isub(y);\n        A.isub(C);\n        B.isub(D);\n      } else {\n        y.isub(x);\n        C.isub(A);\n        D.isub(B);\n      }\n    }\n\n    return {\n      a: C,\n      b: D,\n      gcd: y.iushln(g)\n    };\n  };\n\n  // This is reduced incarnation of the binary EEA\n  // above, designated to invert members of the\n  // _prime_ fields F(p) at a maximal speed\n  BN.prototype._invmp = function _invmp (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var a = this;\n    var b = p.clone();\n\n    if (a.negative !== 0) {\n      a = a.umod(p);\n    } else {\n      a = a.clone();\n    }\n\n    var x1 = new BN(1);\n    var x2 = new BN(0);\n\n    var delta = b.clone();\n\n    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {\n      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        a.iushrn(i);\n        while (i-- > 0) {\n          if (x1.isOdd()) {\n            x1.iadd(delta);\n          }\n\n          x1.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        b.iushrn(j);\n        while (j-- > 0) {\n          if (x2.isOdd()) {\n            x2.iadd(delta);\n          }\n\n          x2.iushrn(1);\n        }\n      }\n\n      if (a.cmp(b) >= 0) {\n        a.isub(b);\n        x1.isub(x2);\n      } else {\n        b.isub(a);\n        x2.isub(x1);\n      }\n    }\n\n    var res;\n    if (a.cmpn(1) === 0) {\n      res = x1;\n    } else {\n      res = x2;\n    }\n\n    if (res.cmpn(0) < 0) {\n      res.iadd(p);\n    }\n\n    return res;\n  };\n\n  BN.prototype.gcd = function gcd (num) {\n    if (this.isZero()) return num.abs();\n    if (num.isZero()) return this.abs();\n\n    var a = this.clone();\n    var b = num.clone();\n    a.negative = 0;\n    b.negative = 0;\n\n    // Remove common factor of two\n    for (var shift = 0; a.isEven() && b.isEven(); shift++) {\n      a.iushrn(1);\n      b.iushrn(1);\n    }\n\n    do {\n      while (a.isEven()) {\n        a.iushrn(1);\n      }\n      while (b.isEven()) {\n        b.iushrn(1);\n      }\n\n      var r = a.cmp(b);\n      if (r < 0) {\n        // Swap `a` and `b` to make `a` always bigger than `b`\n        var t = a;\n        a = b;\n        b = t;\n      } else if (r === 0 || b.cmpn(1) === 0) {\n        break;\n      }\n\n      a.isub(b);\n    } while (true);\n\n    return b.iushln(shift);\n  };\n\n  // Invert number in the field F(num)\n  BN.prototype.invm = function invm (num) {\n    return this.egcd(num).a.umod(num);\n  };\n\n  BN.prototype.isEven = function isEven () {\n    return (this.words[0] & 1) === 0;\n  };\n\n  BN.prototype.isOdd = function isOdd () {\n    return (this.words[0] & 1) === 1;\n  };\n\n  // And first word and num\n  BN.prototype.andln = function andln (num) {\n    return this.words[0] & num;\n  };\n\n  // Increment at the bit position in-line\n  BN.prototype.bincn = function bincn (bit) {\n    assert(typeof bit === 'number');\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) {\n      this._expand(s + 1);\n      this.words[s] |= q;\n      return this;\n    }\n\n    // Add bit and propagate, if needed\n    var carry = q;\n    for (var i = s; carry !== 0 && i < this.length; i++) {\n      var w = this.words[i] | 0;\n      w += carry;\n      carry = w >>> 26;\n      w &= 0x3ffffff;\n      this.words[i] = w;\n    }\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n    return this;\n  };\n\n  BN.prototype.isZero = function isZero () {\n    return this.length === 1 && this.words[0] === 0;\n  };\n\n  BN.prototype.cmpn = function cmpn (num) {\n    var negative = num < 0;\n\n    if (this.negative !== 0 && !negative) return -1;\n    if (this.negative === 0 && negative) return 1;\n\n    this.strip();\n\n    var res;\n    if (this.length > 1) {\n      res = 1;\n    } else {\n      if (negative) {\n        num = -num;\n      }\n\n      assert(num <= 0x3ffffff, 'Number is too big');\n\n      var w = this.words[0] | 0;\n      res = w === num ? 0 : w < num ? -1 : 1;\n    }\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Compare two numbers and return:\n  // 1 - if `this` > `num`\n  // 0 - if `this` == `num`\n  // -1 - if `this` < `num`\n  BN.prototype.cmp = function cmp (num) {\n    if (this.negative !== 0 && num.negative === 0) return -1;\n    if (this.negative === 0 && num.negative !== 0) return 1;\n\n    var res = this.ucmp(num);\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Unsigned comparison\n  BN.prototype.ucmp = function ucmp (num) {\n    // At this point both numbers have the same sign\n    if (this.length > num.length) return 1;\n    if (this.length < num.length) return -1;\n\n    var res = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var a = this.words[i] | 0;\n      var b = num.words[i] | 0;\n\n      if (a === b) continue;\n      if (a < b) {\n        res = -1;\n      } else if (a > b) {\n        res = 1;\n      }\n      break;\n    }\n    return res;\n  };\n\n  BN.prototype.gtn = function gtn (num) {\n    return this.cmpn(num) === 1;\n  };\n\n  BN.prototype.gt = function gt (num) {\n    return this.cmp(num) === 1;\n  };\n\n  BN.prototype.gten = function gten (num) {\n    return this.cmpn(num) >= 0;\n  };\n\n  BN.prototype.gte = function gte (num) {\n    return this.cmp(num) >= 0;\n  };\n\n  BN.prototype.ltn = function ltn (num) {\n    return this.cmpn(num) === -1;\n  };\n\n  BN.prototype.lt = function lt (num) {\n    return this.cmp(num) === -1;\n  };\n\n  BN.prototype.lten = function lten (num) {\n    return this.cmpn(num) <= 0;\n  };\n\n  BN.prototype.lte = function lte (num) {\n    return this.cmp(num) <= 0;\n  };\n\n  BN.prototype.eqn = function eqn (num) {\n    return this.cmpn(num) === 0;\n  };\n\n  BN.prototype.eq = function eq (num) {\n    return this.cmp(num) === 0;\n  };\n\n  //\n  // A reduce context, could be using montgomery or something better, depending\n  // on the `m` itself.\n  //\n  BN.red = function red (num) {\n    return new Red(num);\n  };\n\n  BN.prototype.toRed = function toRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    assert(this.negative === 0, 'red works only with positives');\n    return ctx.convertTo(this)._forceRed(ctx);\n  };\n\n  BN.prototype.fromRed = function fromRed () {\n    assert(this.red, 'fromRed works only with numbers in reduction context');\n    return this.red.convertFrom(this);\n  };\n\n  BN.prototype._forceRed = function _forceRed (ctx) {\n    this.red = ctx;\n    return this;\n  };\n\n  BN.prototype.forceRed = function forceRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    return this._forceRed(ctx);\n  };\n\n  BN.prototype.redAdd = function redAdd (num) {\n    assert(this.red, 'redAdd works only with red numbers');\n    return this.red.add(this, num);\n  };\n\n  BN.prototype.redIAdd = function redIAdd (num) {\n    assert(this.red, 'redIAdd works only with red numbers');\n    return this.red.iadd(this, num);\n  };\n\n  BN.prototype.redSub = function redSub (num) {\n    assert(this.red, 'redSub works only with red numbers');\n    return this.red.sub(this, num);\n  };\n\n  BN.prototype.redISub = function redISub (num) {\n    assert(this.red, 'redISub works only with red numbers');\n    return this.red.isub(this, num);\n  };\n\n  BN.prototype.redShl = function redShl (num) {\n    assert(this.red, 'redShl works only with red numbers');\n    return this.red.shl(this, num);\n  };\n\n  BN.prototype.redMul = function redMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.mul(this, num);\n  };\n\n  BN.prototype.redIMul = function redIMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.imul(this, num);\n  };\n\n  BN.prototype.redSqr = function redSqr () {\n    assert(this.red, 'redSqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqr(this);\n  };\n\n  BN.prototype.redISqr = function redISqr () {\n    assert(this.red, 'redISqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.isqr(this);\n  };\n\n  // Square root over p\n  BN.prototype.redSqrt = function redSqrt () {\n    assert(this.red, 'redSqrt works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqrt(this);\n  };\n\n  BN.prototype.redInvm = function redInvm () {\n    assert(this.red, 'redInvm works only with red numbers');\n    this.red._verify1(this);\n    return this.red.invm(this);\n  };\n\n  // Return negative clone of `this` % `red modulo`\n  BN.prototype.redNeg = function redNeg () {\n    assert(this.red, 'redNeg works only with red numbers');\n    this.red._verify1(this);\n    return this.red.neg(this);\n  };\n\n  BN.prototype.redPow = function redPow (num) {\n    assert(this.red && !num.red, 'redPow(normalNum)');\n    this.red._verify1(this);\n    return this.red.pow(this, num);\n  };\n\n  // Prime numbers with efficient reduction\n  var primes = {\n    k256: null,\n    p224: null,\n    p192: null,\n    p25519: null\n  };\n\n  // Pseudo-Mersenne prime\n  function MPrime (name, p) {\n    // P = 2 ^ N - K\n    this.name = name;\n    this.p = new BN(p, 16);\n    this.n = this.p.bitLength();\n    this.k = new BN(1).iushln(this.n).isub(this.p);\n\n    this.tmp = this._tmp();\n  }\n\n  MPrime.prototype._tmp = function _tmp () {\n    var tmp = new BN(null);\n    tmp.words = new Array(Math.ceil(this.n / 13));\n    return tmp;\n  };\n\n  MPrime.prototype.ireduce = function ireduce (num) {\n    // Assumes that `num` is less than `P^2`\n    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)\n    var r = num;\n    var rlen;\n\n    do {\n      this.split(r, this.tmp);\n      r = this.imulK(r);\n      r = r.iadd(this.tmp);\n      rlen = r.bitLength();\n    } while (rlen > this.n);\n\n    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);\n    if (cmp === 0) {\n      r.words[0] = 0;\n      r.length = 1;\n    } else if (cmp > 0) {\n      r.isub(this.p);\n    } else {\n      r.strip();\n    }\n\n    return r;\n  };\n\n  MPrime.prototype.split = function split (input, out) {\n    input.iushrn(this.n, 0, out);\n  };\n\n  MPrime.prototype.imulK = function imulK (num) {\n    return num.imul(this.k);\n  };\n\n  function K256 () {\n    MPrime.call(\n      this,\n      'k256',\n      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');\n  }\n  inherits(K256, MPrime);\n\n  K256.prototype.split = function split (input, output) {\n    // 256 = 9 * 26 + 22\n    var mask = 0x3fffff;\n\n    var outLen = Math.min(input.length, 9);\n    for (var i = 0; i < outLen; i++) {\n      output.words[i] = input.words[i];\n    }\n    output.length = outLen;\n\n    if (input.length <= 9) {\n      input.words[0] = 0;\n      input.length = 1;\n      return;\n    }\n\n    // Shift by 9 limbs\n    var prev = input.words[9];\n    output.words[output.length++] = prev & mask;\n\n    for (i = 10; i < input.length; i++) {\n      var next = input.words[i] | 0;\n      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);\n      prev = next;\n    }\n    prev >>>= 22;\n    input.words[i - 10] = prev;\n    if (prev === 0 && input.length > 10) {\n      input.length -= 10;\n    } else {\n      input.length -= 9;\n    }\n  };\n\n  K256.prototype.imulK = function imulK (num) {\n    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]\n    num.words[num.length] = 0;\n    num.words[num.length + 1] = 0;\n    num.length += 2;\n\n    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390\n    var lo = 0;\n    for (var i = 0; i < num.length; i++) {\n      var w = num.words[i] | 0;\n      lo += w * 0x3d1;\n      num.words[i] = lo & 0x3ffffff;\n      lo = w * 0x40 + ((lo / 0x4000000) | 0);\n    }\n\n    // Fast length reduction\n    if (num.words[num.length - 1] === 0) {\n      num.length--;\n      if (num.words[num.length - 1] === 0) {\n        num.length--;\n      }\n    }\n    return num;\n  };\n\n  function P224 () {\n    MPrime.call(\n      this,\n      'p224',\n      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');\n  }\n  inherits(P224, MPrime);\n\n  function P192 () {\n    MPrime.call(\n      this,\n      'p192',\n      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');\n  }\n  inherits(P192, MPrime);\n\n  function P25519 () {\n    // 2 ^ 255 - 19\n    MPrime.call(\n      this,\n      '25519',\n      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');\n  }\n  inherits(P25519, MPrime);\n\n  P25519.prototype.imulK = function imulK (num) {\n    // K = 0x13\n    var carry = 0;\n    for (var i = 0; i < num.length; i++) {\n      var hi = (num.words[i] | 0) * 0x13 + carry;\n      var lo = hi & 0x3ffffff;\n      hi >>>= 26;\n\n      num.words[i] = lo;\n      carry = hi;\n    }\n    if (carry !== 0) {\n      num.words[num.length++] = carry;\n    }\n    return num;\n  };\n\n  // Exported mostly for testing purposes, use plain name instead\n  BN._prime = function prime (name) {\n    // Cached version of prime\n    if (primes[name]) return primes[name];\n\n    var prime;\n    if (name === 'k256') {\n      prime = new K256();\n    } else if (name === 'p224') {\n      prime = new P224();\n    } else if (name === 'p192') {\n      prime = new P192();\n    } else if (name === 'p25519') {\n      prime = new P25519();\n    } else {\n      throw new Error('Unknown prime ' + name);\n    }\n    primes[name] = prime;\n\n    return prime;\n  };\n\n  //\n  // Base reduction engine\n  //\n  function Red (m) {\n    if (typeof m === 'string') {\n      var prime = BN._prime(m);\n      this.m = prime.p;\n      this.prime = prime;\n    } else {\n      assert(m.gtn(1), 'modulus must be greater than 1');\n      this.m = m;\n      this.prime = null;\n    }\n  }\n\n  Red.prototype._verify1 = function _verify1 (a) {\n    assert(a.negative === 0, 'red works only with positives');\n    assert(a.red, 'red works only with red numbers');\n  };\n\n  Red.prototype._verify2 = function _verify2 (a, b) {\n    assert((a.negative | b.negative) === 0, 'red works only with positives');\n    assert(a.red && a.red === b.red,\n      'red works only with red numbers');\n  };\n\n  Red.prototype.imod = function imod (a) {\n    if (this.prime) return this.prime.ireduce(a)._forceRed(this);\n    return a.umod(this.m)._forceRed(this);\n  };\n\n  Red.prototype.neg = function neg (a) {\n    if (a.isZero()) {\n      return a.clone();\n    }\n\n    return this.m.sub(a)._forceRed(this);\n  };\n\n  Red.prototype.add = function add (a, b) {\n    this._verify2(a, b);\n\n    var res = a.add(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.iadd = function iadd (a, b) {\n    this._verify2(a, b);\n\n    var res = a.iadd(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.sub = function sub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.sub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.isub = function isub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.isub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.shl = function shl (a, num) {\n    this._verify1(a);\n    return this.imod(a.ushln(num));\n  };\n\n  Red.prototype.imul = function imul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.imul(b));\n  };\n\n  Red.prototype.mul = function mul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.mul(b));\n  };\n\n  Red.prototype.isqr = function isqr (a) {\n    return this.imul(a, a.clone());\n  };\n\n  Red.prototype.sqr = function sqr (a) {\n    return this.mul(a, a);\n  };\n\n  Red.prototype.sqrt = function sqrt (a) {\n    if (a.isZero()) return a.clone();\n\n    var mod3 = this.m.andln(3);\n    assert(mod3 % 2 === 1);\n\n    // Fast case\n    if (mod3 === 3) {\n      var pow = this.m.add(new BN(1)).iushrn(2);\n      return this.pow(a, pow);\n    }\n\n    // Tonelli-Shanks algorithm (Totally unoptimized and slow)\n    //\n    // Find Q and S, that Q * 2 ^ S = (P - 1)\n    var q = this.m.subn(1);\n    var s = 0;\n    while (!q.isZero() && q.andln(1) === 0) {\n      s++;\n      q.iushrn(1);\n    }\n    assert(!q.isZero());\n\n    var one = new BN(1).toRed(this);\n    var nOne = one.redNeg();\n\n    // Find quadratic non-residue\n    // NOTE: Max is such because of generalized Riemann hypothesis.\n    var lpow = this.m.subn(1).iushrn(1);\n    var z = this.m.bitLength();\n    z = new BN(2 * z * z).toRed(this);\n\n    while (this.pow(z, lpow).cmp(nOne) !== 0) {\n      z.redIAdd(nOne);\n    }\n\n    var c = this.pow(z, q);\n    var r = this.pow(a, q.addn(1).iushrn(1));\n    var t = this.pow(a, q);\n    var m = s;\n    while (t.cmp(one) !== 0) {\n      var tmp = t;\n      for (var i = 0; tmp.cmp(one) !== 0; i++) {\n        tmp = tmp.redSqr();\n      }\n      assert(i < m);\n      var b = this.pow(c, new BN(1).iushln(m - i - 1));\n\n      r = r.redMul(b);\n      c = b.redSqr();\n      t = t.redMul(c);\n      m = i;\n    }\n\n    return r;\n  };\n\n  Red.prototype.invm = function invm (a) {\n    var inv = a._invmp(this.m);\n    if (inv.negative !== 0) {\n      inv.negative = 0;\n      return this.imod(inv).redNeg();\n    } else {\n      return this.imod(inv);\n    }\n  };\n\n  Red.prototype.pow = function pow (a, num) {\n    if (num.isZero()) return new BN(1).toRed(this);\n    if (num.cmpn(1) === 0) return a.clone();\n\n    var windowSize = 4;\n    var wnd = new Array(1 << windowSize);\n    wnd[0] = new BN(1).toRed(this);\n    wnd[1] = a;\n    for (var i = 2; i < wnd.length; i++) {\n      wnd[i] = this.mul(wnd[i - 1], a);\n    }\n\n    var res = wnd[0];\n    var current = 0;\n    var currentLen = 0;\n    var start = num.bitLength() % 26;\n    if (start === 0) {\n      start = 26;\n    }\n\n    for (i = num.length - 1; i >= 0; i--) {\n      var word = num.words[i];\n      for (var j = start - 1; j >= 0; j--) {\n        var bit = (word >> j) & 1;\n        if (res !== wnd[0]) {\n          res = this.sqr(res);\n        }\n\n        if (bit === 0 && current === 0) {\n          currentLen = 0;\n          continue;\n        }\n\n        current <<= 1;\n        current |= bit;\n        currentLen++;\n        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;\n\n        res = this.mul(res, wnd[current]);\n        currentLen = 0;\n        current = 0;\n      }\n      start = 26;\n    }\n\n    return res;\n  };\n\n  Red.prototype.convertTo = function convertTo (num) {\n    var r = num.umod(this.m);\n\n    return r === num ? r.clone() : r;\n  };\n\n  Red.prototype.convertFrom = function convertFrom (num) {\n    var res = num.clone();\n    res.red = null;\n    return res;\n  };\n\n  //\n  // Montgomery method engine\n  //\n\n  BN.mont = function mont (num) {\n    return new Mont(num);\n  };\n\n  function Mont (m) {\n    Red.call(this, m);\n\n    this.shift = this.m.bitLength();\n    if (this.shift % 26 !== 0) {\n      this.shift += 26 - (this.shift % 26);\n    }\n\n    this.r = new BN(1).iushln(this.shift);\n    this.r2 = this.imod(this.r.sqr());\n    this.rinv = this.r._invmp(this.m);\n\n    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);\n    this.minv = this.minv.umod(this.r);\n    this.minv = this.r.sub(this.minv);\n  }\n  inherits(Mont, Red);\n\n  Mont.prototype.convertTo = function convertTo (num) {\n    return this.imod(num.ushln(this.shift));\n  };\n\n  Mont.prototype.convertFrom = function convertFrom (num) {\n    var r = this.imod(num.mul(this.rinv));\n    r.red = null;\n    return r;\n  };\n\n  Mont.prototype.imul = function imul (a, b) {\n    if (a.isZero() || b.isZero()) {\n      a.words[0] = 0;\n      a.length = 1;\n      return a;\n    }\n\n    var t = a.imul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.mul = function mul (a, b) {\n    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);\n\n    var t = a.mul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.invm = function invm (a) {\n    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R\n    var res = this.imod(a._invmp(this.m).mul(this.r2));\n    return res._forceRed(this);\n  };\n})(typeof module === 'undefined' || module, this);\n","var r;\n\nmodule.exports = function rand(len) {\n  if (!r)\n    r = new Rand(null);\n\n  return r.generate(len);\n};\n\nfunction Rand(rand) {\n  this.rand = rand;\n}\nmodule.exports.Rand = Rand;\n\nRand.prototype.generate = function generate(len) {\n  return this._rand(len);\n};\n\n// Emulate crypto API using randy\nRand.prototype._rand = function _rand(n) {\n  if (this.rand.getBytes)\n    return this.rand.getBytes(n);\n\n  var res = new Uint8Array(n);\n  for (var i = 0; i < res.length; i++)\n    res[i] = this.rand.getByte();\n  return res;\n};\n\nif (typeof self === 'object') {\n  if (self.crypto && self.crypto.getRandomValues) {\n    // Modern browsers\n    Rand.prototype._rand = function _rand(n) {\n      var arr = new Uint8Array(n);\n      self.crypto.getRandomValues(arr);\n      return arr;\n    };\n  } else if (self.msCrypto && self.msCrypto.getRandomValues) {\n    // IE\n    Rand.prototype._rand = function _rand(n) {\n      var arr = new Uint8Array(n);\n      self.msCrypto.getRandomValues(arr);\n      return arr;\n    };\n\n  // Safari's WebWorkers do not have `crypto`\n  } else if (typeof window === 'object') {\n    // Old junk\n    Rand.prototype._rand = function() {\n      throw new Error('Not implemented yet');\n    };\n  }\n} else {\n  // Node.js or Web worker with no crypto support\n  try {\n    var crypto = require('crypto');\n    if (typeof crypto.randomBytes !== 'function')\n      throw new Error('Not supported');\n\n    Rand.prototype._rand = function _rand(n) {\n      return crypto.randomBytes(n);\n    };\n  } catch (e) {\n  }\n}\n","// based on the aes implimentation in triple sec\n// https://github.com/keybase/triplesec\n// which is in turn based on the one from crypto-js\n// https://code.google.com/p/crypto-js/\n\nvar Buffer = require('safe-buffer').Buffer\n\nfunction asUInt32Array (buf) {\n  if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)\n\n  var len = (buf.length / 4) | 0\n  var out = new Array(len)\n\n  for (var i = 0; i < len; i++) {\n    out[i] = buf.readUInt32BE(i * 4)\n  }\n\n  return out\n}\n\nfunction scrubVec (v) {\n  for (var i = 0; i < v.length; v++) {\n    v[i] = 0\n  }\n}\n\nfunction cryptBlock (M, keySchedule, SUB_MIX, SBOX, nRounds) {\n  var SUB_MIX0 = SUB_MIX[0]\n  var SUB_MIX1 = SUB_MIX[1]\n  var SUB_MIX2 = SUB_MIX[2]\n  var SUB_MIX3 = SUB_MIX[3]\n\n  var s0 = M[0] ^ keySchedule[0]\n  var s1 = M[1] ^ keySchedule[1]\n  var s2 = M[2] ^ keySchedule[2]\n  var s3 = M[3] ^ keySchedule[3]\n  var t0, t1, t2, t3\n  var ksRow = 4\n\n  for (var round = 1; round < nRounds; round++) {\n    t0 = SUB_MIX0[s0 >>> 24] ^ SUB_MIX1[(s1 >>> 16) & 0xff] ^ SUB_MIX2[(s2 >>> 8) & 0xff] ^ SUB_MIX3[s3 & 0xff] ^ keySchedule[ksRow++]\n    t1 = SUB_MIX0[s1 >>> 24] ^ SUB_MIX1[(s2 >>> 16) & 0xff] ^ SUB_MIX2[(s3 >>> 8) & 0xff] ^ SUB_MIX3[s0 & 0xff] ^ keySchedule[ksRow++]\n    t2 = SUB_MIX0[s2 >>> 24] ^ SUB_MIX1[(s3 >>> 16) & 0xff] ^ SUB_MIX2[(s0 >>> 8) & 0xff] ^ SUB_MIX3[s1 & 0xff] ^ keySchedule[ksRow++]\n    t3 = SUB_MIX0[s3 >>> 24] ^ SUB_MIX1[(s0 >>> 16) & 0xff] ^ SUB_MIX2[(s1 >>> 8) & 0xff] ^ SUB_MIX3[s2 & 0xff] ^ keySchedule[ksRow++]\n    s0 = t0\n    s1 = t1\n    s2 = t2\n    s3 = t3\n  }\n\n  t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++]\n  t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++]\n  t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++]\n  t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++]\n  t0 = t0 >>> 0\n  t1 = t1 >>> 0\n  t2 = t2 >>> 0\n  t3 = t3 >>> 0\n\n  return [t0, t1, t2, t3]\n}\n\n// AES constants\nvar RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36]\nvar G = (function () {\n  // Compute double table\n  var d = new Array(256)\n  for (var j = 0; j < 256; j++) {\n    if (j < 128) {\n      d[j] = j << 1\n    } else {\n      d[j] = (j << 1) ^ 0x11b\n    }\n  }\n\n  var SBOX = []\n  var INV_SBOX = []\n  var SUB_MIX = [[], [], [], []]\n  var INV_SUB_MIX = [[], [], [], []]\n\n  // Walk GF(2^8)\n  var x = 0\n  var xi = 0\n  for (var i = 0; i < 256; ++i) {\n    // Compute sbox\n    var sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4)\n    sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63\n    SBOX[x] = sx\n    INV_SBOX[sx] = x\n\n    // Compute multiplication\n    var x2 = d[x]\n    var x4 = d[x2]\n    var x8 = d[x4]\n\n    // Compute sub bytes, mix columns tables\n    var t = (d[sx] * 0x101) ^ (sx * 0x1010100)\n    SUB_MIX[0][x] = (t << 24) | (t >>> 8)\n    SUB_MIX[1][x] = (t << 16) | (t >>> 16)\n    SUB_MIX[2][x] = (t << 8) | (t >>> 24)\n    SUB_MIX[3][x] = t\n\n    // Compute inv sub bytes, inv mix columns tables\n    t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100)\n    INV_SUB_MIX[0][sx] = (t << 24) | (t >>> 8)\n    INV_SUB_MIX[1][sx] = (t << 16) | (t >>> 16)\n    INV_SUB_MIX[2][sx] = (t << 8) | (t >>> 24)\n    INV_SUB_MIX[3][sx] = t\n\n    if (x === 0) {\n      x = xi = 1\n    } else {\n      x = x2 ^ d[d[d[x8 ^ x2]]]\n      xi ^= d[d[xi]]\n    }\n  }\n\n  return {\n    SBOX: SBOX,\n    INV_SBOX: INV_SBOX,\n    SUB_MIX: SUB_MIX,\n    INV_SUB_MIX: INV_SUB_MIX\n  }\n})()\n\nfunction AES (key) {\n  this._key = asUInt32Array(key)\n  this._reset()\n}\n\nAES.blockSize = 4 * 4\nAES.keySize = 256 / 8\nAES.prototype.blockSize = AES.blockSize\nAES.prototype.keySize = AES.keySize\nAES.prototype._reset = function () {\n  var keyWords = this._key\n  var keySize = keyWords.length\n  var nRounds = keySize + 6\n  var ksRows = (nRounds + 1) * 4\n\n  var keySchedule = []\n  for (var k = 0; k < keySize; k++) {\n    keySchedule[k] = keyWords[k]\n  }\n\n  for (k = keySize; k < ksRows; k++) {\n    var t = keySchedule[k - 1]\n\n    if (k % keySize === 0) {\n      t = (t << 8) | (t >>> 24)\n      t =\n        (G.SBOX[t >>> 24] << 24) |\n        (G.SBOX[(t >>> 16) & 0xff] << 16) |\n        (G.SBOX[(t >>> 8) & 0xff] << 8) |\n        (G.SBOX[t & 0xff])\n\n      t ^= RCON[(k / keySize) | 0] << 24\n    } else if (keySize > 6 && k % keySize === 4) {\n      t =\n        (G.SBOX[t >>> 24] << 24) |\n        (G.SBOX[(t >>> 16) & 0xff] << 16) |\n        (G.SBOX[(t >>> 8) & 0xff] << 8) |\n        (G.SBOX[t & 0xff])\n    }\n\n    keySchedule[k] = keySchedule[k - keySize] ^ t\n  }\n\n  var invKeySchedule = []\n  for (var ik = 0; ik < ksRows; ik++) {\n    var ksR = ksRows - ik\n    var tt = keySchedule[ksR - (ik % 4 ? 0 : 4)]\n\n    if (ik < 4 || ksR <= 4) {\n      invKeySchedule[ik] = tt\n    } else {\n      invKeySchedule[ik] =\n        G.INV_SUB_MIX[0][G.SBOX[tt >>> 24]] ^\n        G.INV_SUB_MIX[1][G.SBOX[(tt >>> 16) & 0xff]] ^\n        G.INV_SUB_MIX[2][G.SBOX[(tt >>> 8) & 0xff]] ^\n        G.INV_SUB_MIX[3][G.SBOX[tt & 0xff]]\n    }\n  }\n\n  this._nRounds = nRounds\n  this._keySchedule = keySchedule\n  this._invKeySchedule = invKeySchedule\n}\n\nAES.prototype.encryptBlockRaw = function (M) {\n  M = asUInt32Array(M)\n  return cryptBlock(M, this._keySchedule, G.SUB_MIX, G.SBOX, this._nRounds)\n}\n\nAES.prototype.encryptBlock = function (M) {\n  var out = this.encryptBlockRaw(M)\n  var buf = Buffer.allocUnsafe(16)\n  buf.writeUInt32BE(out[0], 0)\n  buf.writeUInt32BE(out[1], 4)\n  buf.writeUInt32BE(out[2], 8)\n  buf.writeUInt32BE(out[3], 12)\n  return buf\n}\n\nAES.prototype.decryptBlock = function (M) {\n  M = asUInt32Array(M)\n\n  // swap\n  var m1 = M[1]\n  M[1] = M[3]\n  M[3] = m1\n\n  var out = cryptBlock(M, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX, this._nRounds)\n  var buf = Buffer.allocUnsafe(16)\n  buf.writeUInt32BE(out[0], 0)\n  buf.writeUInt32BE(out[3], 4)\n  buf.writeUInt32BE(out[2], 8)\n  buf.writeUInt32BE(out[1], 12)\n  return buf\n}\n\nAES.prototype.scrub = function () {\n  scrubVec(this._keySchedule)\n  scrubVec(this._invKeySchedule)\n  scrubVec(this._key)\n}\n\nmodule.exports.AES = AES\n","var aes = require('./aes')\nvar Buffer = require('safe-buffer').Buffer\nvar Transform = require('cipher-base')\nvar inherits = require('inherits')\nvar GHASH = require('./ghash')\nvar xor = require('buffer-xor')\nvar incr32 = require('./incr32')\n\nfunction xorTest (a, b) {\n  var out = 0\n  if (a.length !== b.length) out++\n\n  var len = Math.min(a.length, b.length)\n  for (var i = 0; i < len; ++i) {\n    out += (a[i] ^ b[i])\n  }\n\n  return out\n}\n\nfunction calcIv (self, iv, ck) {\n  if (iv.length === 12) {\n    self._finID = Buffer.concat([iv, Buffer.from([0, 0, 0, 1])])\n    return Buffer.concat([iv, Buffer.from([0, 0, 0, 2])])\n  }\n  var ghash = new GHASH(ck)\n  var len = iv.length\n  var toPad = len % 16\n  ghash.update(iv)\n  if (toPad) {\n    toPad = 16 - toPad\n    ghash.update(Buffer.alloc(toPad, 0))\n  }\n  ghash.update(Buffer.alloc(8, 0))\n  var ivBits = len * 8\n  var tail = Buffer.alloc(8)\n  tail.writeUIntBE(ivBits, 0, 8)\n  ghash.update(tail)\n  self._finID = ghash.state\n  var out = Buffer.from(self._finID)\n  incr32(out)\n  return out\n}\nfunction StreamCipher (mode, key, iv, decrypt) {\n  Transform.call(this)\n\n  var h = Buffer.alloc(4, 0)\n\n  this._cipher = new aes.AES(key)\n  var ck = this._cipher.encryptBlock(h)\n  this._ghash = new GHASH(ck)\n  iv = calcIv(this, iv, ck)\n\n  this._prev = Buffer.from(iv)\n  this._cache = Buffer.allocUnsafe(0)\n  this._secCache = Buffer.allocUnsafe(0)\n  this._decrypt = decrypt\n  this._alen = 0\n  this._len = 0\n  this._mode = mode\n\n  this._authTag = null\n  this._called = false\n}\n\ninherits(StreamCipher, Transform)\n\nStreamCipher.prototype._update = function (chunk) {\n  if (!this._called && this._alen) {\n    var rump = 16 - (this._alen % 16)\n    if (rump < 16) {\n      rump = Buffer.alloc(rump, 0)\n      this._ghash.update(rump)\n    }\n  }\n\n  this._called = true\n  var out = this._mode.encrypt(this, chunk)\n  if (this._decrypt) {\n    this._ghash.update(chunk)\n  } else {\n    this._ghash.update(out)\n  }\n  this._len += chunk.length\n  return out\n}\n\nStreamCipher.prototype._final = function () {\n  if (this._decrypt && !this._authTag) throw new Error('Unsupported state or unable to authenticate data')\n\n  var tag = xor(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID))\n  if (this._decrypt && xorTest(tag, this._authTag)) throw new Error('Unsupported state or unable to authenticate data')\n\n  this._authTag = tag\n  this._cipher.scrub()\n}\n\nStreamCipher.prototype.getAuthTag = function getAuthTag () {\n  if (this._decrypt || !Buffer.isBuffer(this._authTag)) throw new Error('Attempting to get auth tag in unsupported state')\n\n  return this._authTag\n}\n\nStreamCipher.prototype.setAuthTag = function setAuthTag (tag) {\n  if (!this._decrypt) throw new Error('Attempting to set auth tag in unsupported state')\n\n  this._authTag = tag\n}\n\nStreamCipher.prototype.setAAD = function setAAD (buf) {\n  if (this._called) throw new Error('Attempting to set AAD in unsupported state')\n\n  this._ghash.update(buf)\n  this._alen += buf.length\n}\n\nmodule.exports = StreamCipher\n","var ciphers = require('./encrypter')\nvar deciphers = require('./decrypter')\nvar modes = require('./modes/list.json')\n\nfunction getCiphers () {\n  return Object.keys(modes)\n}\n\nexports.createCipher = exports.Cipher = ciphers.createCipher\nexports.createCipheriv = exports.Cipheriv = ciphers.createCipheriv\nexports.createDecipher = exports.Decipher = deciphers.createDecipher\nexports.createDecipheriv = exports.Decipheriv = deciphers.createDecipheriv\nexports.listCiphers = exports.getCiphers = getCiphers\n","var AuthCipher = require('./authCipher')\nvar Buffer = require('safe-buffer').Buffer\nvar MODES = require('./modes')\nvar StreamCipher = require('./streamCipher')\nvar Transform = require('cipher-base')\nvar aes = require('./aes')\nvar ebtk = require('evp_bytestokey')\nvar inherits = require('inherits')\n\nfunction Decipher (mode, key, iv) {\n  Transform.call(this)\n\n  this._cache = new Splitter()\n  this._last = void 0\n  this._cipher = new aes.AES(key)\n  this._prev = Buffer.from(iv)\n  this._mode = mode\n  this._autopadding = true\n}\n\ninherits(Decipher, Transform)\n\nDecipher.prototype._update = function (data) {\n  this._cache.add(data)\n  var chunk\n  var thing\n  var out = []\n  while ((chunk = this._cache.get(this._autopadding))) {\n    thing = this._mode.decrypt(this, chunk)\n    out.push(thing)\n  }\n  return Buffer.concat(out)\n}\n\nDecipher.prototype._final = function () {\n  var chunk = this._cache.flush()\n  if (this._autopadding) {\n    return unpad(this._mode.decrypt(this, chunk))\n  } else if (chunk) {\n    throw new Error('data not multiple of block length')\n  }\n}\n\nDecipher.prototype.setAutoPadding = function (setTo) {\n  this._autopadding = !!setTo\n  return this\n}\n\nfunction Splitter () {\n  this.cache = Buffer.allocUnsafe(0)\n}\n\nSplitter.prototype.add = function (data) {\n  this.cache = Buffer.concat([this.cache, data])\n}\n\nSplitter.prototype.get = function (autoPadding) {\n  var out\n  if (autoPadding) {\n    if (this.cache.length > 16) {\n      out = this.cache.slice(0, 16)\n      this.cache = this.cache.slice(16)\n      return out\n    }\n  } else {\n    if (this.cache.length >= 16) {\n      out = this.cache.slice(0, 16)\n      this.cache = this.cache.slice(16)\n      return out\n    }\n  }\n\n  return null\n}\n\nSplitter.prototype.flush = function () {\n  if (this.cache.length) return this.cache\n}\n\nfunction unpad (last) {\n  var padded = last[15]\n  if (padded < 1 || padded > 16) {\n    throw new Error('unable to decrypt data')\n  }\n  var i = -1\n  while (++i < padded) {\n    if (last[(i + (16 - padded))] !== padded) {\n      throw new Error('unable to decrypt data')\n    }\n  }\n  if (padded === 16) return\n\n  return last.slice(0, 16 - padded)\n}\n\nfunction createDecipheriv (suite, password, iv) {\n  var config = MODES[suite.toLowerCase()]\n  if (!config) throw new TypeError('invalid suite type')\n\n  if (typeof iv === 'string') iv = Buffer.from(iv)\n  if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length)\n\n  if (typeof password === 'string') password = Buffer.from(password)\n  if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length)\n\n  if (config.type === 'stream') {\n    return new StreamCipher(config.module, password, iv, true)\n  } else if (config.type === 'auth') {\n    return new AuthCipher(config.module, password, iv, true)\n  }\n\n  return new Decipher(config.module, password, iv)\n}\n\nfunction createDecipher (suite, password) {\n  var config = MODES[suite.toLowerCase()]\n  if (!config) throw new TypeError('invalid suite type')\n\n  var keys = ebtk(password, false, config.key, config.iv)\n  return createDecipheriv(suite, keys.key, keys.iv)\n}\n\nexports.createDecipher = createDecipher\nexports.createDecipheriv = createDecipheriv\n","var MODES = require('./modes')\nvar AuthCipher = require('./authCipher')\nvar Buffer = require('safe-buffer').Buffer\nvar StreamCipher = require('./streamCipher')\nvar Transform = require('cipher-base')\nvar aes = require('./aes')\nvar ebtk = require('evp_bytestokey')\nvar inherits = require('inherits')\n\nfunction Cipher (mode, key, iv) {\n  Transform.call(this)\n\n  this._cache = new Splitter()\n  this._cipher = new aes.AES(key)\n  this._prev = Buffer.from(iv)\n  this._mode = mode\n  this._autopadding = true\n}\n\ninherits(Cipher, Transform)\n\nCipher.prototype._update = function (data) {\n  this._cache.add(data)\n  var chunk\n  var thing\n  var out = []\n\n  while ((chunk = this._cache.get())) {\n    thing = this._mode.encrypt(this, chunk)\n    out.push(thing)\n  }\n\n  return Buffer.concat(out)\n}\n\nvar PADDING = Buffer.alloc(16, 0x10)\n\nCipher.prototype._final = function () {\n  var chunk = this._cache.flush()\n  if (this._autopadding) {\n    chunk = this._mode.encrypt(this, chunk)\n    this._cipher.scrub()\n    return chunk\n  }\n\n  if (!chunk.equals(PADDING)) {\n    this._cipher.scrub()\n    throw new Error('data not multiple of block length')\n  }\n}\n\nCipher.prototype.setAutoPadding = function (setTo) {\n  this._autopadding = !!setTo\n  return this\n}\n\nfunction Splitter () {\n  this.cache = Buffer.allocUnsafe(0)\n}\n\nSplitter.prototype.add = function (data) {\n  this.cache = Buffer.concat([this.cache, data])\n}\n\nSplitter.prototype.get = function () {\n  if (this.cache.length > 15) {\n    var out = this.cache.slice(0, 16)\n    this.cache = this.cache.slice(16)\n    return out\n  }\n  return null\n}\n\nSplitter.prototype.flush = function () {\n  var len = 16 - this.cache.length\n  var padBuff = Buffer.allocUnsafe(len)\n\n  var i = -1\n  while (++i < len) {\n    padBuff.writeUInt8(len, i)\n  }\n\n  return Buffer.concat([this.cache, padBuff])\n}\n\nfunction createCipheriv (suite, password, iv) {\n  var config = MODES[suite.toLowerCase()]\n  if (!config) throw new TypeError('invalid suite type')\n\n  if (typeof password === 'string') password = Buffer.from(password)\n  if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length)\n\n  if (typeof iv === 'string') iv = Buffer.from(iv)\n  if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length)\n\n  if (config.type === 'stream') {\n    return new StreamCipher(config.module, password, iv)\n  } else if (config.type === 'auth') {\n    return new AuthCipher(config.module, password, iv)\n  }\n\n  return new Cipher(config.module, password, iv)\n}\n\nfunction createCipher (suite, password) {\n  var config = MODES[suite.toLowerCase()]\n  if (!config) throw new TypeError('invalid suite type')\n\n  var keys = ebtk(password, false, config.key, config.iv)\n  return createCipheriv(suite, keys.key, keys.iv)\n}\n\nexports.createCipheriv = createCipheriv\nexports.createCipher = createCipher\n","var Buffer = require('safe-buffer').Buffer\nvar ZEROES = Buffer.alloc(16, 0)\n\nfunction toArray (buf) {\n  return [\n    buf.readUInt32BE(0),\n    buf.readUInt32BE(4),\n    buf.readUInt32BE(8),\n    buf.readUInt32BE(12)\n  ]\n}\n\nfunction fromArray (out) {\n  var buf = Buffer.allocUnsafe(16)\n  buf.writeUInt32BE(out[0] >>> 0, 0)\n  buf.writeUInt32BE(out[1] >>> 0, 4)\n  buf.writeUInt32BE(out[2] >>> 0, 8)\n  buf.writeUInt32BE(out[3] >>> 0, 12)\n  return buf\n}\n\nfunction GHASH (key) {\n  this.h = key\n  this.state = Buffer.alloc(16, 0)\n  this.cache = Buffer.allocUnsafe(0)\n}\n\n// from http://bitwiseshiftleft.github.io/sjcl/doc/symbols/src/core_gcm.js.html\n// by Juho Vähä-Herttua\nGHASH.prototype.ghash = function (block) {\n  var i = -1\n  while (++i < block.length) {\n    this.state[i] ^= block[i]\n  }\n  this._multiply()\n}\n\nGHASH.prototype._multiply = function () {\n  var Vi = toArray(this.h)\n  var Zi = [0, 0, 0, 0]\n  var j, xi, lsbVi\n  var i = -1\n  while (++i < 128) {\n    xi = (this.state[~~(i / 8)] & (1 << (7 - (i % 8)))) !== 0\n    if (xi) {\n      // Z_i+1 = Z_i ^ V_i\n      Zi[0] ^= Vi[0]\n      Zi[1] ^= Vi[1]\n      Zi[2] ^= Vi[2]\n      Zi[3] ^= Vi[3]\n    }\n\n    // Store the value of LSB(V_i)\n    lsbVi = (Vi[3] & 1) !== 0\n\n    // V_i+1 = V_i >> 1\n    for (j = 3; j > 0; j--) {\n      Vi[j] = (Vi[j] >>> 1) | ((Vi[j - 1] & 1) << 31)\n    }\n    Vi[0] = Vi[0] >>> 1\n\n    // If LSB(V_i) is 1, V_i+1 = (V_i >> 1) ^ R\n    if (lsbVi) {\n      Vi[0] = Vi[0] ^ (0xe1 << 24)\n    }\n  }\n  this.state = fromArray(Zi)\n}\n\nGHASH.prototype.update = function (buf) {\n  this.cache = Buffer.concat([this.cache, buf])\n  var chunk\n  while (this.cache.length >= 16) {\n    chunk = this.cache.slice(0, 16)\n    this.cache = this.cache.slice(16)\n    this.ghash(chunk)\n  }\n}\n\nGHASH.prototype.final = function (abl, bl) {\n  if (this.cache.length) {\n    this.ghash(Buffer.concat([this.cache, ZEROES], 16))\n  }\n\n  this.ghash(fromArray([0, abl, 0, bl]))\n  return this.state\n}\n\nmodule.exports = GHASH\n","function incr32 (iv) {\n  var len = iv.length\n  var item\n  while (len--) {\n    item = iv.readUInt8(len)\n    if (item === 255) {\n      iv.writeUInt8(0, len)\n    } else {\n      item++\n      iv.writeUInt8(item, len)\n      break\n    }\n  }\n}\nmodule.exports = incr32\n","var xor = require('buffer-xor')\n\nexports.encrypt = function (self, block) {\n  var data = xor(block, self._prev)\n\n  self._prev = self._cipher.encryptBlock(data)\n  return self._prev\n}\n\nexports.decrypt = function (self, block) {\n  var pad = self._prev\n\n  self._prev = block\n  var out = self._cipher.decryptBlock(block)\n\n  return xor(out, pad)\n}\n","var Buffer = require('safe-buffer').Buffer\nvar xor = require('buffer-xor')\n\nfunction encryptStart (self, data, decrypt) {\n  var len = data.length\n  var out = xor(data, self._cache)\n  self._cache = self._cache.slice(len)\n  self._prev = Buffer.concat([self._prev, decrypt ? data : out])\n  return out\n}\n\nexports.encrypt = function (self, data, decrypt) {\n  var out = Buffer.allocUnsafe(0)\n  var len\n\n  while (data.length) {\n    if (self._cache.length === 0) {\n      self._cache = self._cipher.encryptBlock(self._prev)\n      self._prev = Buffer.allocUnsafe(0)\n    }\n\n    if (self._cache.length <= data.length) {\n      len = self._cache.length\n      out = Buffer.concat([out, encryptStart(self, data.slice(0, len), decrypt)])\n      data = data.slice(len)\n    } else {\n      out = Buffer.concat([out, encryptStart(self, data, decrypt)])\n      break\n    }\n  }\n\n  return out\n}\n","var Buffer = require('safe-buffer').Buffer\n\nfunction encryptByte (self, byteParam, decrypt) {\n  var pad\n  var i = -1\n  var len = 8\n  var out = 0\n  var bit, value\n  while (++i < len) {\n    pad = self._cipher.encryptBlock(self._prev)\n    bit = (byteParam & (1 << (7 - i))) ? 0x80 : 0\n    value = pad[0] ^ bit\n    out += ((value & 0x80) >> (i % 8))\n    self._prev = shiftIn(self._prev, decrypt ? bit : value)\n  }\n  return out\n}\n\nfunction shiftIn (buffer, value) {\n  var len = buffer.length\n  var i = -1\n  var out = Buffer.allocUnsafe(buffer.length)\n  buffer = Buffer.concat([buffer, Buffer.from([value])])\n\n  while (++i < len) {\n    out[i] = buffer[i] << 1 | buffer[i + 1] >> (7)\n  }\n\n  return out\n}\n\nexports.encrypt = function (self, chunk, decrypt) {\n  var len = chunk.length\n  var out = Buffer.allocUnsafe(len)\n  var i = -1\n\n  while (++i < len) {\n    out[i] = encryptByte(self, chunk[i], decrypt)\n  }\n\n  return out\n}\n","var Buffer = require('safe-buffer').Buffer\n\nfunction encryptByte (self, byteParam, decrypt) {\n  var pad = self._cipher.encryptBlock(self._prev)\n  var out = pad[0] ^ byteParam\n\n  self._prev = Buffer.concat([\n    self._prev.slice(1),\n    Buffer.from([decrypt ? byteParam : out])\n  ])\n\n  return out\n}\n\nexports.encrypt = function (self, chunk, decrypt) {\n  var len = chunk.length\n  var out = Buffer.allocUnsafe(len)\n  var i = -1\n\n  while (++i < len) {\n    out[i] = encryptByte(self, chunk[i], decrypt)\n  }\n\n  return out\n}\n","var xor = require('buffer-xor')\nvar Buffer = require('safe-buffer').Buffer\nvar incr32 = require('../incr32')\n\nfunction getBlock (self) {\n  var out = self._cipher.encryptBlockRaw(self._prev)\n  incr32(self._prev)\n  return out\n}\n\nvar blockSize = 16\nexports.encrypt = function (self, chunk) {\n  var chunkNum = Math.ceil(chunk.length / blockSize)\n  var start = self._cache.length\n  self._cache = Buffer.concat([\n    self._cache,\n    Buffer.allocUnsafe(chunkNum * blockSize)\n  ])\n  for (var i = 0; i < chunkNum; i++) {\n    var out = getBlock(self)\n    var offset = start + i * blockSize\n    self._cache.writeUInt32BE(out[0], offset + 0)\n    self._cache.writeUInt32BE(out[1], offset + 4)\n    self._cache.writeUInt32BE(out[2], offset + 8)\n    self._cache.writeUInt32BE(out[3], offset + 12)\n  }\n  var pad = self._cache.slice(0, chunk.length)\n  self._cache = self._cache.slice(chunk.length)\n  return xor(chunk, pad)\n}\n","exports.encrypt = function (self, block) {\n  return self._cipher.encryptBlock(block)\n}\n\nexports.decrypt = function (self, block) {\n  return self._cipher.decryptBlock(block)\n}\n","var modeModules = {\n  ECB: require('./ecb'),\n  CBC: require('./cbc'),\n  CFB: require('./cfb'),\n  CFB8: require('./cfb8'),\n  CFB1: require('./cfb1'),\n  OFB: require('./ofb'),\n  CTR: require('./ctr'),\n  GCM: require('./ctr')\n}\n\nvar modes = require('./list.json')\n\nfor (var key in modes) {\n  modes[key].module = modeModules[modes[key].mode]\n}\n\nmodule.exports = modes\n","var xor = require('buffer-xor')\n\nfunction getBlock (self) {\n  self._prev = self._cipher.encryptBlock(self._prev)\n  return self._prev\n}\n\nexports.encrypt = function (self, chunk) {\n  while (self._cache.length < chunk.length) {\n    self._cache = Buffer.concat([self._cache, getBlock(self)])\n  }\n\n  var pad = self._cache.slice(0, chunk.length)\n  self._cache = self._cache.slice(chunk.length)\n  return xor(chunk, pad)\n}\n","var aes = require('./aes')\nvar Buffer = require('safe-buffer').Buffer\nvar Transform = require('cipher-base')\nvar inherits = require('inherits')\n\nfunction StreamCipher (mode, key, iv, decrypt) {\n  Transform.call(this)\n\n  this._cipher = new aes.AES(key)\n  this._prev = Buffer.from(iv)\n  this._cache = Buffer.allocUnsafe(0)\n  this._secCache = Buffer.allocUnsafe(0)\n  this._decrypt = decrypt\n  this._mode = mode\n}\n\ninherits(StreamCipher, Transform)\n\nStreamCipher.prototype._update = function (chunk) {\n  return this._mode.encrypt(this, chunk, this._decrypt)\n}\n\nStreamCipher.prototype._final = function () {\n  this._cipher.scrub()\n}\n\nmodule.exports = StreamCipher\n","var DES = require('browserify-des')\nvar aes = require('browserify-aes/browser')\nvar aesModes = require('browserify-aes/modes')\nvar desModes = require('browserify-des/modes')\nvar ebtk = require('evp_bytestokey')\n\nfunction createCipher (suite, password) {\n  suite = suite.toLowerCase()\n\n  var keyLen, ivLen\n  if (aesModes[suite]) {\n    keyLen = aesModes[suite].key\n    ivLen = aesModes[suite].iv\n  } else if (desModes[suite]) {\n    keyLen = desModes[suite].key * 8\n    ivLen = desModes[suite].iv\n  } else {\n    throw new TypeError('invalid suite type')\n  }\n\n  var keys = ebtk(password, false, keyLen, ivLen)\n  return createCipheriv(suite, keys.key, keys.iv)\n}\n\nfunction createDecipher (suite, password) {\n  suite = suite.toLowerCase()\n\n  var keyLen, ivLen\n  if (aesModes[suite]) {\n    keyLen = aesModes[suite].key\n    ivLen = aesModes[suite].iv\n  } else if (desModes[suite]) {\n    keyLen = desModes[suite].key * 8\n    ivLen = desModes[suite].iv\n  } else {\n    throw new TypeError('invalid suite type')\n  }\n\n  var keys = ebtk(password, false, keyLen, ivLen)\n  return createDecipheriv(suite, keys.key, keys.iv)\n}\n\nfunction createCipheriv (suite, key, iv) {\n  suite = suite.toLowerCase()\n  if (aesModes[suite]) return aes.createCipheriv(suite, key, iv)\n  if (desModes[suite]) return new DES({ key: key, iv: iv, mode: suite })\n\n  throw new TypeError('invalid suite type')\n}\n\nfunction createDecipheriv (suite, key, iv) {\n  suite = suite.toLowerCase()\n  if (aesModes[suite]) return aes.createDecipheriv(suite, key, iv)\n  if (desModes[suite]) return new DES({ key: key, iv: iv, mode: suite, decrypt: true })\n\n  throw new TypeError('invalid suite type')\n}\n\nfunction getCiphers () {\n  return Object.keys(desModes).concat(aes.getCiphers())\n}\n\nexports.createCipher = exports.Cipher = createCipher\nexports.createCipheriv = exports.Cipheriv = createCipheriv\nexports.createDecipher = exports.Decipher = createDecipher\nexports.createDecipheriv = exports.Decipheriv = createDecipheriv\nexports.listCiphers = exports.getCiphers = getCiphers\n","var CipherBase = require('cipher-base')\nvar des = require('des.js')\nvar inherits = require('inherits')\nvar Buffer = require('safe-buffer').Buffer\n\nvar modes = {\n  'des-ede3-cbc': des.CBC.instantiate(des.EDE),\n  'des-ede3': des.EDE,\n  'des-ede-cbc': des.CBC.instantiate(des.EDE),\n  'des-ede': des.EDE,\n  'des-cbc': des.CBC.instantiate(des.DES),\n  'des-ecb': des.DES\n}\nmodes.des = modes['des-cbc']\nmodes.des3 = modes['des-ede3-cbc']\nmodule.exports = DES\ninherits(DES, CipherBase)\nfunction DES (opts) {\n  CipherBase.call(this)\n  var modeName = opts.mode.toLowerCase()\n  var mode = modes[modeName]\n  var type\n  if (opts.decrypt) {\n    type = 'decrypt'\n  } else {\n    type = 'encrypt'\n  }\n  var key = opts.key\n  if (!Buffer.isBuffer(key)) {\n    key = Buffer.from(key)\n  }\n  if (modeName === 'des-ede' || modeName === 'des-ede-cbc') {\n    key = Buffer.concat([key, key.slice(0, 8)])\n  }\n  var iv = opts.iv\n  if (!Buffer.isBuffer(iv)) {\n    iv = Buffer.from(iv)\n  }\n  this._des = mode.create({\n    key: key,\n    iv: iv,\n    type: type\n  })\n}\nDES.prototype._update = function (data) {\n  return Buffer.from(this._des.update(data))\n}\nDES.prototype._final = function () {\n  return Buffer.from(this._des.final())\n}\n","exports['des-ecb'] = {\n  key: 8,\n  iv: 0\n}\nexports['des-cbc'] = exports.des = {\n  key: 8,\n  iv: 8\n}\nexports['des-ede3-cbc'] = exports.des3 = {\n  key: 24,\n  iv: 8\n}\nexports['des-ede3'] = {\n  key: 24,\n  iv: 0\n}\nexports['des-ede-cbc'] = {\n  key: 16,\n  iv: 8\n}\nexports['des-ede'] = {\n  key: 16,\n  iv: 0\n}\n","var bn = require('bn.js');\nvar randomBytes = require('randombytes');\nmodule.exports = crt;\nfunction blind(priv) {\n  var r = getr(priv);\n  var blinder = r.toRed(bn.mont(priv.modulus))\n  .redPow(new bn(priv.publicExponent)).fromRed();\n  return {\n    blinder: blinder,\n    unblinder:r.invm(priv.modulus)\n  };\n}\nfunction crt(msg, priv) {\n  var blinds = blind(priv);\n  var len = priv.modulus.byteLength();\n  var mod = bn.mont(priv.modulus);\n  var blinded = new bn(msg).mul(blinds.blinder).umod(priv.modulus);\n  var c1 = blinded.toRed(bn.mont(priv.prime1));\n  var c2 = blinded.toRed(bn.mont(priv.prime2));\n  var qinv = priv.coefficient;\n  var p = priv.prime1;\n  var q = priv.prime2;\n  var m1 = c1.redPow(priv.exponent1);\n  var m2 = c2.redPow(priv.exponent2);\n  m1 = m1.fromRed();\n  m2 = m2.fromRed();\n  var h = m1.isub(m2).imul(qinv).umod(p);\n  h.imul(q);\n  m2.iadd(h);\n  return new Buffer(m2.imul(blinds.unblinder).umod(priv.modulus).toArray(false, len));\n}\ncrt.getr = getr;\nfunction getr(priv) {\n  var len = priv.modulus.byteLength();\n  var r = new bn(randomBytes(len));\n  while (r.cmp(priv.modulus) >=  0 || !r.umod(priv.prime1) || !r.umod(priv.prime2)) {\n    r = new bn(randomBytes(len));\n  }\n  return r;\n}\n","module.exports = require('./browser/algorithms.json')\n","var Buffer = require('safe-buffer').Buffer\nvar createHash = require('create-hash')\nvar stream = require('readable-stream')\nvar inherits = require('inherits')\nvar sign = require('./sign')\nvar verify = require('./verify')\n\nvar algorithms = require('./algorithms.json')\nObject.keys(algorithms).forEach(function (key) {\n  algorithms[key].id = Buffer.from(algorithms[key].id, 'hex')\n  algorithms[key.toLowerCase()] = algorithms[key]\n})\n\nfunction Sign (algorithm) {\n  stream.Writable.call(this)\n\n  var data = algorithms[algorithm]\n  if (!data) throw new Error('Unknown message digest')\n\n  this._hashType = data.hash\n  this._hash = createHash(data.hash)\n  this._tag = data.id\n  this._signType = data.sign\n}\ninherits(Sign, stream.Writable)\n\nSign.prototype._write = function _write (data, _, done) {\n  this._hash.update(data)\n  done()\n}\n\nSign.prototype.update = function update (data, enc) {\n  if (typeof data === 'string') data = Buffer.from(data, enc)\n\n  this._hash.update(data)\n  return this\n}\n\nSign.prototype.sign = function signMethod (key, enc) {\n  this.end()\n  var hash = this._hash.digest()\n  var sig = sign(hash, key, this._hashType, this._signType, this._tag)\n\n  return enc ? sig.toString(enc) : sig\n}\n\nfunction Verify (algorithm) {\n  stream.Writable.call(this)\n\n  var data = algorithms[algorithm]\n  if (!data) throw new Error('Unknown message digest')\n\n  this._hash = createHash(data.hash)\n  this._tag = data.id\n  this._signType = data.sign\n}\ninherits(Verify, stream.Writable)\n\nVerify.prototype._write = function _write (data, _, done) {\n  this._hash.update(data)\n  done()\n}\n\nVerify.prototype.update = function update (data, enc) {\n  if (typeof data === 'string') data = Buffer.from(data, enc)\n\n  this._hash.update(data)\n  return this\n}\n\nVerify.prototype.verify = function verifyMethod (key, sig, enc) {\n  if (typeof sig === 'string') sig = Buffer.from(sig, enc)\n\n  this.end()\n  var hash = this._hash.digest()\n  return verify(sig, hash, key, this._signType, this._tag)\n}\n\nfunction createSign (algorithm) {\n  return new Sign(algorithm)\n}\n\nfunction createVerify (algorithm) {\n  return new Verify(algorithm)\n}\n\nmodule.exports = {\n  Sign: createSign,\n  Verify: createVerify,\n  createSign: createSign,\n  createVerify: createVerify\n}\n","// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js\nvar Buffer = require('safe-buffer').Buffer\nvar createHmac = require('create-hmac')\nvar crt = require('browserify-rsa')\nvar EC = require('elliptic').ec\nvar BN = require('bn.js')\nvar parseKeys = require('parse-asn1')\nvar curves = require('./curves.json')\n\nfunction sign (hash, key, hashType, signType, tag) {\n  var priv = parseKeys(key)\n  if (priv.curve) {\n    // rsa keys can be interpreted as ecdsa ones in openssl\n    if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type')\n    return ecSign(hash, priv)\n  } else if (priv.type === 'dsa') {\n    if (signType !== 'dsa') throw new Error('wrong private key type')\n    return dsaSign(hash, priv, hashType)\n  } else {\n    if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type')\n  }\n  hash = Buffer.concat([tag, hash])\n  var len = priv.modulus.byteLength()\n  var pad = [0, 1]\n  while (hash.length + pad.length + 1 < len) pad.push(0xff)\n  pad.push(0x00)\n  var i = -1\n  while (++i < hash.length) pad.push(hash[i])\n\n  var out = crt(pad, priv)\n  return out\n}\n\nfunction ecSign (hash, priv) {\n  var curveId = curves[priv.curve.join('.')]\n  if (!curveId) throw new Error('unknown curve ' + priv.curve.join('.'))\n\n  var curve = new EC(curveId)\n  var key = curve.keyFromPrivate(priv.privateKey)\n  var out = key.sign(hash)\n\n  return Buffer.from(out.toDER())\n}\n\nfunction dsaSign (hash, priv, algo) {\n  var x = priv.params.priv_key\n  var p = priv.params.p\n  var q = priv.params.q\n  var g = priv.params.g\n  var r = new BN(0)\n  var k\n  var H = bits2int(hash, q).mod(q)\n  var s = false\n  var kv = getKey(x, q, hash, algo)\n  while (s === false) {\n    k = makeKey(q, kv, algo)\n    r = makeR(g, k, p, q)\n    s = k.invm(q).imul(H.add(x.mul(r))).mod(q)\n    if (s.cmpn(0) === 0) {\n      s = false\n      r = new BN(0)\n    }\n  }\n  return toDER(r, s)\n}\n\nfunction toDER (r, s) {\n  r = r.toArray()\n  s = s.toArray()\n\n  // Pad values\n  if (r[0] & 0x80) r = [0].concat(r)\n  if (s[0] & 0x80) s = [0].concat(s)\n\n  var total = r.length + s.length + 4\n  var res = [0x30, total, 0x02, r.length]\n  res = res.concat(r, [0x02, s.length], s)\n  return Buffer.from(res)\n}\n\nfunction getKey (x, q, hash, algo) {\n  x = Buffer.from(x.toArray())\n  if (x.length < q.byteLength()) {\n    var zeros = Buffer.alloc(q.byteLength() - x.length)\n    x = Buffer.concat([zeros, x])\n  }\n  var hlen = hash.length\n  var hbits = bits2octets(hash, q)\n  var v = Buffer.alloc(hlen)\n  v.fill(1)\n  var k = Buffer.alloc(hlen)\n  k = createHmac(algo, k).update(v).update(Buffer.from([0])).update(x).update(hbits).digest()\n  v = createHmac(algo, k).update(v).digest()\n  k = createHmac(algo, k).update(v).update(Buffer.from([1])).update(x).update(hbits).digest()\n  v = createHmac(algo, k).update(v).digest()\n  return { k: k, v: v }\n}\n\nfunction bits2int (obits, q) {\n  var bits = new BN(obits)\n  var shift = (obits.length << 3) - q.bitLength()\n  if (shift > 0) bits.ishrn(shift)\n  return bits\n}\n\nfunction bits2octets (bits, q) {\n  bits = bits2int(bits, q)\n  bits = bits.mod(q)\n  var out = Buffer.from(bits.toArray())\n  if (out.length < q.byteLength()) {\n    var zeros = Buffer.alloc(q.byteLength() - out.length)\n    out = Buffer.concat([zeros, out])\n  }\n  return out\n}\n\nfunction makeKey (q, kv, algo) {\n  var t\n  var k\n\n  do {\n    t = Buffer.alloc(0)\n\n    while (t.length * 8 < q.bitLength()) {\n      kv.v = createHmac(algo, kv.k).update(kv.v).digest()\n      t = Buffer.concat([t, kv.v])\n    }\n\n    k = bits2int(t, q)\n    kv.k = createHmac(algo, kv.k).update(kv.v).update(Buffer.from([0])).digest()\n    kv.v = createHmac(algo, kv.k).update(kv.v).digest()\n  } while (k.cmp(q) !== -1)\n\n  return k\n}\n\nfunction makeR (g, k, p, q) {\n  return g.toRed(BN.mont(p)).redPow(k).fromRed().mod(q)\n}\n\nmodule.exports = sign\nmodule.exports.getKey = getKey\nmodule.exports.makeKey = makeKey\n","// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js\nvar Buffer = require('safe-buffer').Buffer\nvar BN = require('bn.js')\nvar EC = require('elliptic').ec\nvar parseKeys = require('parse-asn1')\nvar curves = require('./curves.json')\n\nfunction verify (sig, hash, key, signType, tag) {\n  var pub = parseKeys(key)\n  if (pub.type === 'ec') {\n    // rsa keys can be interpreted as ecdsa ones in openssl\n    if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type')\n    return ecVerify(sig, hash, pub)\n  } else if (pub.type === 'dsa') {\n    if (signType !== 'dsa') throw new Error('wrong public key type')\n    return dsaVerify(sig, hash, pub)\n  } else {\n    if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type')\n  }\n  hash = Buffer.concat([tag, hash])\n  var len = pub.modulus.byteLength()\n  var pad = [1]\n  var padNum = 0\n  while (hash.length + pad.length + 2 < len) {\n    pad.push(0xff)\n    padNum++\n  }\n  pad.push(0x00)\n  var i = -1\n  while (++i < hash.length) {\n    pad.push(hash[i])\n  }\n  pad = Buffer.from(pad)\n  var red = BN.mont(pub.modulus)\n  sig = new BN(sig).toRed(red)\n\n  sig = sig.redPow(new BN(pub.publicExponent))\n  sig = Buffer.from(sig.fromRed().toArray())\n  var out = padNum < 8 ? 1 : 0\n  len = Math.min(sig.length, pad.length)\n  if (sig.length !== pad.length) out = 1\n\n  i = -1\n  while (++i < len) out |= sig[i] ^ pad[i]\n  return out === 0\n}\n\nfunction ecVerify (sig, hash, pub) {\n  var curveId = curves[pub.data.algorithm.curve.join('.')]\n  if (!curveId) throw new Error('unknown curve ' + pub.data.algorithm.curve.join('.'))\n\n  var curve = new EC(curveId)\n  var pubkey = pub.data.subjectPrivateKey.data\n\n  return curve.verify(hash, sig, pubkey)\n}\n\nfunction dsaVerify (sig, hash, pub) {\n  var p = pub.data.p\n  var q = pub.data.q\n  var g = pub.data.g\n  var y = pub.data.pub_key\n  var unpacked = parseKeys.signature.decode(sig, 'der')\n  var s = unpacked.s\n  var r = unpacked.r\n  checkValue(s, q)\n  checkValue(r, q)\n  var montp = BN.mont(p)\n  var w = s.invm(q)\n  var v = g.toRed(montp)\n    .redPow(new BN(hash).mul(w).mod(q))\n    .fromRed()\n    .mul(y.toRed(montp).redPow(r.mul(w).mod(q)).fromRed())\n    .mod(p)\n    .mod(q)\n  return v.cmp(r) === 0\n}\n\nfunction checkValue (b, q) {\n  if (b.cmpn(0) <= 0) throw new Error('invalid sig')\n  if (b.cmp(q) >= q) throw new Error('invalid sig')\n}\n\nmodule.exports = verify\n","(function (module, exports) {\n  'use strict';\n\n  // Utils\n  function assert (val, msg) {\n    if (!val) throw new Error(msg || 'Assertion failed');\n  }\n\n  // Could use `inherits` module, but don't want to move from single file\n  // architecture yet.\n  function inherits (ctor, superCtor) {\n    ctor.super_ = superCtor;\n    var TempCtor = function () {};\n    TempCtor.prototype = superCtor.prototype;\n    ctor.prototype = new TempCtor();\n    ctor.prototype.constructor = ctor;\n  }\n\n  // BN\n\n  function BN (number, base, endian) {\n    if (BN.isBN(number)) {\n      return number;\n    }\n\n    this.negative = 0;\n    this.words = null;\n    this.length = 0;\n\n    // Reduction context\n    this.red = null;\n\n    if (number !== null) {\n      if (base === 'le' || base === 'be') {\n        endian = base;\n        base = 10;\n      }\n\n      this._init(number || 0, base || 10, endian || 'be');\n    }\n  }\n  if (typeof module === 'object') {\n    module.exports = BN;\n  } else {\n    exports.BN = BN;\n  }\n\n  BN.BN = BN;\n  BN.wordSize = 26;\n\n  var Buffer;\n  try {\n    Buffer = require('buffer').Buffer;\n  } catch (e) {\n  }\n\n  BN.isBN = function isBN (num) {\n    if (num instanceof BN) {\n      return true;\n    }\n\n    return num !== null && typeof num === 'object' &&\n      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);\n  };\n\n  BN.max = function max (left, right) {\n    if (left.cmp(right) > 0) return left;\n    return right;\n  };\n\n  BN.min = function min (left, right) {\n    if (left.cmp(right) < 0) return left;\n    return right;\n  };\n\n  BN.prototype._init = function init (number, base, endian) {\n    if (typeof number === 'number') {\n      return this._initNumber(number, base, endian);\n    }\n\n    if (typeof number === 'object') {\n      return this._initArray(number, base, endian);\n    }\n\n    if (base === 'hex') {\n      base = 16;\n    }\n    assert(base === (base | 0) && base >= 2 && base <= 36);\n\n    number = number.toString().replace(/\\s+/g, '');\n    var start = 0;\n    if (number[0] === '-') {\n      start++;\n    }\n\n    if (base === 16) {\n      this._parseHex(number, start);\n    } else {\n      this._parseBase(number, base, start);\n    }\n\n    if (number[0] === '-') {\n      this.negative = 1;\n    }\n\n    this._strip();\n\n    if (endian !== 'le') return;\n\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initNumber = function _initNumber (number, base, endian) {\n    if (number < 0) {\n      this.negative = 1;\n      number = -number;\n    }\n    if (number < 0x4000000) {\n      this.words = [number & 0x3ffffff];\n      this.length = 1;\n    } else if (number < 0x10000000000000) {\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff\n      ];\n      this.length = 2;\n    } else {\n      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff,\n        1\n      ];\n      this.length = 3;\n    }\n\n    if (endian !== 'le') return;\n\n    // Reverse the bytes\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initArray = function _initArray (number, base, endian) {\n    // Perhaps a Uint8Array\n    assert(typeof number.length === 'number');\n    if (number.length <= 0) {\n      this.words = [0];\n      this.length = 1;\n      return this;\n    }\n\n    this.length = Math.ceil(number.length / 3);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    var off = 0;\n    if (endian === 'be') {\n      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {\n        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    } else if (endian === 'le') {\n      for (i = 0, j = 0; i < number.length; i += 3) {\n        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    }\n    return this._strip();\n  };\n\n  function parseHex (str, start, end) {\n    var r = 0;\n    var len = Math.min(str.length, end);\n    var z = 0;\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r <<= 4;\n\n      var b;\n\n      // 'a' - 'f'\n      if (c >= 49 && c <= 54) {\n        b = c - 49 + 0xa;\n\n      // 'A' - 'F'\n      } else if (c >= 17 && c <= 22) {\n        b = c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        b = c;\n      }\n\n      r |= b;\n      z |= b;\n    }\n\n    assert(!(z & 0xf0), 'Invalid character in ' + str);\n    return r;\n  }\n\n  BN.prototype._parseHex = function _parseHex (number, start) {\n    // Create possibly bigger array to ensure that it fits the number\n    this.length = Math.ceil((number.length - start) / 6);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    // Scan 24-bit chunks and add them to the number\n    var off = 0;\n    for (i = number.length - 6, j = 0; i >= start; i -= 6) {\n      w = parseHex(number, i, i + 6);\n      this.words[j] |= (w << off) & 0x3ffffff;\n      // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb\n      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;\n      off += 24;\n      if (off >= 26) {\n        off -= 26;\n        j++;\n      }\n    }\n    if (i + 6 !== start) {\n      w = parseHex(number, start, i + 6);\n      this.words[j] |= (w << off) & 0x3ffffff;\n      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;\n    }\n    this._strip();\n  };\n\n  function parseBase (str, start, end, mul) {\n    var r = 0;\n    var b = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r *= mul;\n\n      // 'a'\n      if (c >= 49) {\n        b = c - 49 + 0xa;\n\n      // 'A'\n      } else if (c >= 17) {\n        b = c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        b = c;\n      }\n      assert(c >= 0 && b < mul, 'Invalid character');\n      r += b;\n    }\n    return r;\n  }\n\n  BN.prototype._parseBase = function _parseBase (number, base, start) {\n    // Initialize as zero\n    this.words = [0];\n    this.length = 1;\n\n    // Find length of limb in base\n    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {\n      limbLen++;\n    }\n    limbLen--;\n    limbPow = (limbPow / base) | 0;\n\n    var total = number.length - start;\n    var mod = total % limbLen;\n    var end = Math.min(total, total - mod) + start;\n\n    var word = 0;\n    for (var i = start; i < end; i += limbLen) {\n      word = parseBase(number, i, i + limbLen, base);\n\n      this.imuln(limbPow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n\n    if (mod !== 0) {\n      var pow = 1;\n      word = parseBase(number, i, number.length, base);\n\n      for (i = 0; i < mod; i++) {\n        pow *= base;\n      }\n\n      this.imuln(pow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n  };\n\n  BN.prototype.copy = function copy (dest) {\n    dest.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      dest.words[i] = this.words[i];\n    }\n    dest.length = this.length;\n    dest.negative = this.negative;\n    dest.red = this.red;\n  };\n\n  function move (dest, src) {\n    dest.words = src.words;\n    dest.length = src.length;\n    dest.negative = src.negative;\n    dest.red = src.red;\n  }\n\n  BN.prototype._move = function _move (dest) {\n    move(dest, this);\n  };\n\n  BN.prototype.clone = function clone () {\n    var r = new BN(null);\n    this.copy(r);\n    return r;\n  };\n\n  BN.prototype._expand = function _expand (size) {\n    while (this.length < size) {\n      this.words[this.length++] = 0;\n    }\n    return this;\n  };\n\n  // Remove leading `0` from `this`\n  BN.prototype._strip = function strip () {\n    while (this.length > 1 && this.words[this.length - 1] === 0) {\n      this.length--;\n    }\n    return this._normSign();\n  };\n\n  BN.prototype._normSign = function _normSign () {\n    // -0 = 0\n    if (this.length === 1 && this.words[0] === 0) {\n      this.negative = 0;\n    }\n    return this;\n  };\n\n  // Check Symbol.for because not everywhere where Symbol defined\n  // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility\n  if (typeof Symbol !== 'undefined' && typeof Symbol.for === 'function') {\n    BN.prototype[Symbol.for('nodejs.util.inspect.custom')] = inspect;\n  } else {\n    BN.prototype.inspect = inspect;\n  }\n\n  function inspect () {\n    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';\n  }\n\n  /*\n\n  var zeros = [];\n  var groupSizes = [];\n  var groupBases = [];\n\n  var s = '';\n  var i = -1;\n  while (++i < BN.wordSize) {\n    zeros[i] = s;\n    s += '0';\n  }\n  groupSizes[0] = 0;\n  groupSizes[1] = 0;\n  groupBases[0] = 0;\n  groupBases[1] = 0;\n  var base = 2 - 1;\n  while (++base < 36 + 1) {\n    var groupSize = 0;\n    var groupBase = 1;\n    while (groupBase < (1 << BN.wordSize) / base) {\n      groupBase *= base;\n      groupSize += 1;\n    }\n    groupSizes[base] = groupSize;\n    groupBases[base] = groupBase;\n  }\n\n  */\n\n  var zeros = [\n    '',\n    '0',\n    '00',\n    '000',\n    '0000',\n    '00000',\n    '000000',\n    '0000000',\n    '00000000',\n    '000000000',\n    '0000000000',\n    '00000000000',\n    '000000000000',\n    '0000000000000',\n    '00000000000000',\n    '000000000000000',\n    '0000000000000000',\n    '00000000000000000',\n    '000000000000000000',\n    '0000000000000000000',\n    '00000000000000000000',\n    '000000000000000000000',\n    '0000000000000000000000',\n    '00000000000000000000000',\n    '000000000000000000000000',\n    '0000000000000000000000000'\n  ];\n\n  var groupSizes = [\n    0, 0,\n    25, 16, 12, 11, 10, 9, 8,\n    8, 7, 7, 7, 7, 6, 6,\n    6, 6, 6, 6, 6, 5, 5,\n    5, 5, 5, 5, 5, 5, 5,\n    5, 5, 5, 5, 5, 5, 5\n  ];\n\n  var groupBases = [\n    0, 0,\n    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,\n    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,\n    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,\n    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,\n    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176\n  ];\n\n  BN.prototype.toString = function toString (base, padding) {\n    base = base || 10;\n    padding = padding | 0 || 1;\n\n    var out;\n    if (base === 16 || base === 'hex') {\n      out = '';\n      var off = 0;\n      var carry = 0;\n      for (var i = 0; i < this.length; i++) {\n        var w = this.words[i];\n        var word = (((w << off) | carry) & 0xffffff).toString(16);\n        carry = (w >>> (24 - off)) & 0xffffff;\n        if (carry !== 0 || i !== this.length - 1) {\n          out = zeros[6 - word.length] + word + out;\n        } else {\n          out = word + out;\n        }\n        off += 2;\n        if (off >= 26) {\n          off -= 26;\n          i--;\n        }\n      }\n      if (carry !== 0) {\n        out = carry.toString(16) + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    if (base === (base | 0) && base >= 2 && base <= 36) {\n      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));\n      var groupSize = groupSizes[base];\n      // var groupBase = Math.pow(base, groupSize);\n      var groupBase = groupBases[base];\n      out = '';\n      var c = this.clone();\n      c.negative = 0;\n      while (!c.isZero()) {\n        var r = c.modrn(groupBase).toString(base);\n        c = c.idivn(groupBase);\n\n        if (!c.isZero()) {\n          out = zeros[groupSize - r.length] + r + out;\n        } else {\n          out = r + out;\n        }\n      }\n      if (this.isZero()) {\n        out = '0' + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    assert(false, 'Base should be between 2 and 36');\n  };\n\n  BN.prototype.toNumber = function toNumber () {\n    var ret = this.words[0];\n    if (this.length === 2) {\n      ret += this.words[1] * 0x4000000;\n    } else if (this.length === 3 && this.words[2] === 0x01) {\n      // NOTE: at this stage it is known that the top bit is set\n      ret += 0x10000000000000 + (this.words[1] * 0x4000000);\n    } else if (this.length > 2) {\n      assert(false, 'Number can only safely store up to 53 bits');\n    }\n    return (this.negative !== 0) ? -ret : ret;\n  };\n\n  BN.prototype.toJSON = function toJSON () {\n    return this.toString(16, 2);\n  };\n\n  if (Buffer) {\n    BN.prototype.toBuffer = function toBuffer (endian, length) {\n      return this.toArrayLike(Buffer, endian, length);\n    };\n  }\n\n  BN.prototype.toArray = function toArray (endian, length) {\n    return this.toArrayLike(Array, endian, length);\n  };\n\n  var allocate = function allocate (ArrayType, size) {\n    if (ArrayType.allocUnsafe) {\n      return ArrayType.allocUnsafe(size);\n    }\n    return new ArrayType(size);\n  };\n\n  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {\n    this._strip();\n\n    var byteLength = this.byteLength();\n    var reqLength = length || Math.max(1, byteLength);\n    assert(byteLength <= reqLength, 'byte array longer than desired length');\n    assert(reqLength > 0, 'Requested array length <= 0');\n\n    var res = allocate(ArrayType, reqLength);\n    var postfix = endian === 'le' ? 'LE' : 'BE';\n    this['_toArrayLike' + postfix](res, byteLength);\n    return res;\n  };\n\n  BN.prototype._toArrayLikeLE = function _toArrayLikeLE (res, byteLength) {\n    var position = 0;\n    var carry = 0;\n\n    for (var i = 0, shift = 0; i < this.length; i++) {\n      var word = (this.words[i] << shift) | carry;\n\n      res[position++] = word & 0xff;\n      if (position < res.length) {\n        res[position++] = (word >> 8) & 0xff;\n      }\n      if (position < res.length) {\n        res[position++] = (word >> 16) & 0xff;\n      }\n\n      if (shift === 6) {\n        if (position < res.length) {\n          res[position++] = (word >> 24) & 0xff;\n        }\n        carry = 0;\n        shift = 0;\n      } else {\n        carry = word >>> 24;\n        shift += 2;\n      }\n    }\n\n    if (position < res.length) {\n      res[position++] = carry;\n\n      while (position < res.length) {\n        res[position++] = 0;\n      }\n    }\n  };\n\n  BN.prototype._toArrayLikeBE = function _toArrayLikeBE (res, byteLength) {\n    var position = res.length - 1;\n    var carry = 0;\n\n    for (var i = 0, shift = 0; i < this.length; i++) {\n      var word = (this.words[i] << shift) | carry;\n\n      res[position--] = word & 0xff;\n      if (position >= 0) {\n        res[position--] = (word >> 8) & 0xff;\n      }\n      if (position >= 0) {\n        res[position--] = (word >> 16) & 0xff;\n      }\n\n      if (shift === 6) {\n        if (position >= 0) {\n          res[position--] = (word >> 24) & 0xff;\n        }\n        carry = 0;\n        shift = 0;\n      } else {\n        carry = word >>> 24;\n        shift += 2;\n      }\n    }\n\n    if (position >= 0) {\n      res[position--] = carry;\n\n      while (position >= 0) {\n        res[position--] = 0;\n      }\n    }\n  };\n\n  if (Math.clz32) {\n    BN.prototype._countBits = function _countBits (w) {\n      return 32 - Math.clz32(w);\n    };\n  } else {\n    BN.prototype._countBits = function _countBits (w) {\n      var t = w;\n      var r = 0;\n      if (t >= 0x1000) {\n        r += 13;\n        t >>>= 13;\n      }\n      if (t >= 0x40) {\n        r += 7;\n        t >>>= 7;\n      }\n      if (t >= 0x8) {\n        r += 4;\n        t >>>= 4;\n      }\n      if (t >= 0x02) {\n        r += 2;\n        t >>>= 2;\n      }\n      return r + t;\n    };\n  }\n\n  BN.prototype._zeroBits = function _zeroBits (w) {\n    // Short-cut\n    if (w === 0) return 26;\n\n    var t = w;\n    var r = 0;\n    if ((t & 0x1fff) === 0) {\n      r += 13;\n      t >>>= 13;\n    }\n    if ((t & 0x7f) === 0) {\n      r += 7;\n      t >>>= 7;\n    }\n    if ((t & 0xf) === 0) {\n      r += 4;\n      t >>>= 4;\n    }\n    if ((t & 0x3) === 0) {\n      r += 2;\n      t >>>= 2;\n    }\n    if ((t & 0x1) === 0) {\n      r++;\n    }\n    return r;\n  };\n\n  // Return number of used bits in a BN\n  BN.prototype.bitLength = function bitLength () {\n    var w = this.words[this.length - 1];\n    var hi = this._countBits(w);\n    return (this.length - 1) * 26 + hi;\n  };\n\n  function toBitArray (num) {\n    var w = new Array(num.bitLength());\n\n    for (var bit = 0; bit < w.length; bit++) {\n      var off = (bit / 26) | 0;\n      var wbit = bit % 26;\n\n      w[bit] = (num.words[off] >>> wbit) & 0x01;\n    }\n\n    return w;\n  }\n\n  // Number of trailing zero bits\n  BN.prototype.zeroBits = function zeroBits () {\n    if (this.isZero()) return 0;\n\n    var r = 0;\n    for (var i = 0; i < this.length; i++) {\n      var b = this._zeroBits(this.words[i]);\n      r += b;\n      if (b !== 26) break;\n    }\n    return r;\n  };\n\n  BN.prototype.byteLength = function byteLength () {\n    return Math.ceil(this.bitLength() / 8);\n  };\n\n  BN.prototype.toTwos = function toTwos (width) {\n    if (this.negative !== 0) {\n      return this.abs().inotn(width).iaddn(1);\n    }\n    return this.clone();\n  };\n\n  BN.prototype.fromTwos = function fromTwos (width) {\n    if (this.testn(width - 1)) {\n      return this.notn(width).iaddn(1).ineg();\n    }\n    return this.clone();\n  };\n\n  BN.prototype.isNeg = function isNeg () {\n    return this.negative !== 0;\n  };\n\n  // Return negative clone of `this`\n  BN.prototype.neg = function neg () {\n    return this.clone().ineg();\n  };\n\n  BN.prototype.ineg = function ineg () {\n    if (!this.isZero()) {\n      this.negative ^= 1;\n    }\n\n    return this;\n  };\n\n  // Or `num` with `this` in-place\n  BN.prototype.iuor = function iuor (num) {\n    while (this.length < num.length) {\n      this.words[this.length++] = 0;\n    }\n\n    for (var i = 0; i < num.length; i++) {\n      this.words[i] = this.words[i] | num.words[i];\n    }\n\n    return this._strip();\n  };\n\n  BN.prototype.ior = function ior (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuor(num);\n  };\n\n  // Or `num` with `this`\n  BN.prototype.or = function or (num) {\n    if (this.length > num.length) return this.clone().ior(num);\n    return num.clone().ior(this);\n  };\n\n  BN.prototype.uor = function uor (num) {\n    if (this.length > num.length) return this.clone().iuor(num);\n    return num.clone().iuor(this);\n  };\n\n  // And `num` with `this` in-place\n  BN.prototype.iuand = function iuand (num) {\n    // b = min-length(num, this)\n    var b;\n    if (this.length > num.length) {\n      b = num;\n    } else {\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = this.words[i] & num.words[i];\n    }\n\n    this.length = b.length;\n\n    return this._strip();\n  };\n\n  BN.prototype.iand = function iand (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuand(num);\n  };\n\n  // And `num` with `this`\n  BN.prototype.and = function and (num) {\n    if (this.length > num.length) return this.clone().iand(num);\n    return num.clone().iand(this);\n  };\n\n  BN.prototype.uand = function uand (num) {\n    if (this.length > num.length) return this.clone().iuand(num);\n    return num.clone().iuand(this);\n  };\n\n  // Xor `num` with `this` in-place\n  BN.prototype.iuxor = function iuxor (num) {\n    // a.length > b.length\n    var a;\n    var b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = a.words[i] ^ b.words[i];\n    }\n\n    if (this !== a) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = a.length;\n\n    return this._strip();\n  };\n\n  BN.prototype.ixor = function ixor (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuxor(num);\n  };\n\n  // Xor `num` with `this`\n  BN.prototype.xor = function xor (num) {\n    if (this.length > num.length) return this.clone().ixor(num);\n    return num.clone().ixor(this);\n  };\n\n  BN.prototype.uxor = function uxor (num) {\n    if (this.length > num.length) return this.clone().iuxor(num);\n    return num.clone().iuxor(this);\n  };\n\n  // Not ``this`` with ``width`` bitwidth\n  BN.prototype.inotn = function inotn (width) {\n    assert(typeof width === 'number' && width >= 0);\n\n    var bytesNeeded = Math.ceil(width / 26) | 0;\n    var bitsLeft = width % 26;\n\n    // Extend the buffer with leading zeroes\n    this._expand(bytesNeeded);\n\n    if (bitsLeft > 0) {\n      bytesNeeded--;\n    }\n\n    // Handle complete words\n    for (var i = 0; i < bytesNeeded; i++) {\n      this.words[i] = ~this.words[i] & 0x3ffffff;\n    }\n\n    // Handle the residue\n    if (bitsLeft > 0) {\n      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));\n    }\n\n    // And remove leading zeroes\n    return this._strip();\n  };\n\n  BN.prototype.notn = function notn (width) {\n    return this.clone().inotn(width);\n  };\n\n  // Set `bit` of `this`\n  BN.prototype.setn = function setn (bit, val) {\n    assert(typeof bit === 'number' && bit >= 0);\n\n    var off = (bit / 26) | 0;\n    var wbit = bit % 26;\n\n    this._expand(off + 1);\n\n    if (val) {\n      this.words[off] = this.words[off] | (1 << wbit);\n    } else {\n      this.words[off] = this.words[off] & ~(1 << wbit);\n    }\n\n    return this._strip();\n  };\n\n  // Add `num` to `this` in-place\n  BN.prototype.iadd = function iadd (num) {\n    var r;\n\n    // negative + positive\n    if (this.negative !== 0 && num.negative === 0) {\n      this.negative = 0;\n      r = this.isub(num);\n      this.negative ^= 1;\n      return this._normSign();\n\n    // positive + negative\n    } else if (this.negative === 0 && num.negative !== 0) {\n      num.negative = 0;\n      r = this.isub(num);\n      num.negative = 1;\n      return r._normSign();\n    }\n\n    // a.length > b.length\n    var a, b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n\n    this.length = a.length;\n    if (carry !== 0) {\n      this.words[this.length] = carry;\n      this.length++;\n    // Copy the rest of the words\n    } else if (a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    return this;\n  };\n\n  // Add `num` to `this`\n  BN.prototype.add = function add (num) {\n    var res;\n    if (num.negative !== 0 && this.negative === 0) {\n      num.negative = 0;\n      res = this.sub(num);\n      num.negative ^= 1;\n      return res;\n    } else if (num.negative === 0 && this.negative !== 0) {\n      this.negative = 0;\n      res = num.sub(this);\n      this.negative = 1;\n      return res;\n    }\n\n    if (this.length > num.length) return this.clone().iadd(num);\n\n    return num.clone().iadd(this);\n  };\n\n  // Subtract `num` from `this` in-place\n  BN.prototype.isub = function isub (num) {\n    // this - (-num) = this + num\n    if (num.negative !== 0) {\n      num.negative = 0;\n      var r = this.iadd(num);\n      num.negative = 1;\n      return r._normSign();\n\n    // -this - num = -(this + num)\n    } else if (this.negative !== 0) {\n      this.negative = 0;\n      this.iadd(num);\n      this.negative = 1;\n      return this._normSign();\n    }\n\n    // At this point both numbers are positive\n    var cmp = this.cmp(num);\n\n    // Optimization - zeroify\n    if (cmp === 0) {\n      this.negative = 0;\n      this.length = 1;\n      this.words[0] = 0;\n      return this;\n    }\n\n    // a > b\n    var a, b;\n    if (cmp > 0) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n\n    // Copy rest of the words\n    if (carry === 0 && i < a.length && a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = Math.max(this.length, i);\n\n    if (a !== this) {\n      this.negative = 1;\n    }\n\n    return this._strip();\n  };\n\n  // Subtract `num` from `this`\n  BN.prototype.sub = function sub (num) {\n    return this.clone().isub(num);\n  };\n\n  function smallMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    var len = (self.length + num.length) | 0;\n    out.length = len;\n    len = (len - 1) | 0;\n\n    // Peel one iteration (compiler can't do it, because of code complexity)\n    var a = self.words[0] | 0;\n    var b = num.words[0] | 0;\n    var r = a * b;\n\n    var lo = r & 0x3ffffff;\n    var carry = (r / 0x4000000) | 0;\n    out.words[0] = lo;\n\n    for (var k = 1; k < len; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = carry >>> 26;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = (k - j) | 0;\n        a = self.words[i] | 0;\n        b = num.words[j] | 0;\n        r = a * b + rword;\n        ncarry += (r / 0x4000000) | 0;\n        rword = r & 0x3ffffff;\n      }\n      out.words[k] = rword | 0;\n      carry = ncarry | 0;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry | 0;\n    } else {\n      out.length--;\n    }\n\n    return out._strip();\n  }\n\n  // TODO(indutny): it may be reasonable to omit it for users who don't need\n  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit\n  // multiplication (like elliptic secp256k1).\n  var comb10MulTo = function comb10MulTo (self, num, out) {\n    var a = self.words;\n    var b = num.words;\n    var o = out.words;\n    var c = 0;\n    var lo;\n    var mid;\n    var hi;\n    var a0 = a[0] | 0;\n    var al0 = a0 & 0x1fff;\n    var ah0 = a0 >>> 13;\n    var a1 = a[1] | 0;\n    var al1 = a1 & 0x1fff;\n    var ah1 = a1 >>> 13;\n    var a2 = a[2] | 0;\n    var al2 = a2 & 0x1fff;\n    var ah2 = a2 >>> 13;\n    var a3 = a[3] | 0;\n    var al3 = a3 & 0x1fff;\n    var ah3 = a3 >>> 13;\n    var a4 = a[4] | 0;\n    var al4 = a4 & 0x1fff;\n    var ah4 = a4 >>> 13;\n    var a5 = a[5] | 0;\n    var al5 = a5 & 0x1fff;\n    var ah5 = a5 >>> 13;\n    var a6 = a[6] | 0;\n    var al6 = a6 & 0x1fff;\n    var ah6 = a6 >>> 13;\n    var a7 = a[7] | 0;\n    var al7 = a7 & 0x1fff;\n    var ah7 = a7 >>> 13;\n    var a8 = a[8] | 0;\n    var al8 = a8 & 0x1fff;\n    var ah8 = a8 >>> 13;\n    var a9 = a[9] | 0;\n    var al9 = a9 & 0x1fff;\n    var ah9 = a9 >>> 13;\n    var b0 = b[0] | 0;\n    var bl0 = b0 & 0x1fff;\n    var bh0 = b0 >>> 13;\n    var b1 = b[1] | 0;\n    var bl1 = b1 & 0x1fff;\n    var bh1 = b1 >>> 13;\n    var b2 = b[2] | 0;\n    var bl2 = b2 & 0x1fff;\n    var bh2 = b2 >>> 13;\n    var b3 = b[3] | 0;\n    var bl3 = b3 & 0x1fff;\n    var bh3 = b3 >>> 13;\n    var b4 = b[4] | 0;\n    var bl4 = b4 & 0x1fff;\n    var bh4 = b4 >>> 13;\n    var b5 = b[5] | 0;\n    var bl5 = b5 & 0x1fff;\n    var bh5 = b5 >>> 13;\n    var b6 = b[6] | 0;\n    var bl6 = b6 & 0x1fff;\n    var bh6 = b6 >>> 13;\n    var b7 = b[7] | 0;\n    var bl7 = b7 & 0x1fff;\n    var bh7 = b7 >>> 13;\n    var b8 = b[8] | 0;\n    var bl8 = b8 & 0x1fff;\n    var bh8 = b8 >>> 13;\n    var b9 = b[9] | 0;\n    var bl9 = b9 & 0x1fff;\n    var bh9 = b9 >>> 13;\n\n    out.negative = self.negative ^ num.negative;\n    out.length = 19;\n    /* k = 0 */\n    lo = Math.imul(al0, bl0);\n    mid = Math.imul(al0, bh0);\n    mid = (mid + Math.imul(ah0, bl0)) | 0;\n    hi = Math.imul(ah0, bh0);\n    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;\n    w0 &= 0x3ffffff;\n    /* k = 1 */\n    lo = Math.imul(al1, bl0);\n    mid = Math.imul(al1, bh0);\n    mid = (mid + Math.imul(ah1, bl0)) | 0;\n    hi = Math.imul(ah1, bh0);\n    lo = (lo + Math.imul(al0, bl1)) | 0;\n    mid = (mid + Math.imul(al0, bh1)) | 0;\n    mid = (mid + Math.imul(ah0, bl1)) | 0;\n    hi = (hi + Math.imul(ah0, bh1)) | 0;\n    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;\n    w1 &= 0x3ffffff;\n    /* k = 2 */\n    lo = Math.imul(al2, bl0);\n    mid = Math.imul(al2, bh0);\n    mid = (mid + Math.imul(ah2, bl0)) | 0;\n    hi = Math.imul(ah2, bh0);\n    lo = (lo + Math.imul(al1, bl1)) | 0;\n    mid = (mid + Math.imul(al1, bh1)) | 0;\n    mid = (mid + Math.imul(ah1, bl1)) | 0;\n    hi = (hi + Math.imul(ah1, bh1)) | 0;\n    lo = (lo + Math.imul(al0, bl2)) | 0;\n    mid = (mid + Math.imul(al0, bh2)) | 0;\n    mid = (mid + Math.imul(ah0, bl2)) | 0;\n    hi = (hi + Math.imul(ah0, bh2)) | 0;\n    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;\n    w2 &= 0x3ffffff;\n    /* k = 3 */\n    lo = Math.imul(al3, bl0);\n    mid = Math.imul(al3, bh0);\n    mid = (mid + Math.imul(ah3, bl0)) | 0;\n    hi = Math.imul(ah3, bh0);\n    lo = (lo + Math.imul(al2, bl1)) | 0;\n    mid = (mid + Math.imul(al2, bh1)) | 0;\n    mid = (mid + Math.imul(ah2, bl1)) | 0;\n    hi = (hi + Math.imul(ah2, bh1)) | 0;\n    lo = (lo + Math.imul(al1, bl2)) | 0;\n    mid = (mid + Math.imul(al1, bh2)) | 0;\n    mid = (mid + Math.imul(ah1, bl2)) | 0;\n    hi = (hi + Math.imul(ah1, bh2)) | 0;\n    lo = (lo + Math.imul(al0, bl3)) | 0;\n    mid = (mid + Math.imul(al0, bh3)) | 0;\n    mid = (mid + Math.imul(ah0, bl3)) | 0;\n    hi = (hi + Math.imul(ah0, bh3)) | 0;\n    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;\n    w3 &= 0x3ffffff;\n    /* k = 4 */\n    lo = Math.imul(al4, bl0);\n    mid = Math.imul(al4, bh0);\n    mid = (mid + Math.imul(ah4, bl0)) | 0;\n    hi = Math.imul(ah4, bh0);\n    lo = (lo + Math.imul(al3, bl1)) | 0;\n    mid = (mid + Math.imul(al3, bh1)) | 0;\n    mid = (mid + Math.imul(ah3, bl1)) | 0;\n    hi = (hi + Math.imul(ah3, bh1)) | 0;\n    lo = (lo + Math.imul(al2, bl2)) | 0;\n    mid = (mid + Math.imul(al2, bh2)) | 0;\n    mid = (mid + Math.imul(ah2, bl2)) | 0;\n    hi = (hi + Math.imul(ah2, bh2)) | 0;\n    lo = (lo + Math.imul(al1, bl3)) | 0;\n    mid = (mid + Math.imul(al1, bh3)) | 0;\n    mid = (mid + Math.imul(ah1, bl3)) | 0;\n    hi = (hi + Math.imul(ah1, bh3)) | 0;\n    lo = (lo + Math.imul(al0, bl4)) | 0;\n    mid = (mid + Math.imul(al0, bh4)) | 0;\n    mid = (mid + Math.imul(ah0, bl4)) | 0;\n    hi = (hi + Math.imul(ah0, bh4)) | 0;\n    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;\n    w4 &= 0x3ffffff;\n    /* k = 5 */\n    lo = Math.imul(al5, bl0);\n    mid = Math.imul(al5, bh0);\n    mid = (mid + Math.imul(ah5, bl0)) | 0;\n    hi = Math.imul(ah5, bh0);\n    lo = (lo + Math.imul(al4, bl1)) | 0;\n    mid = (mid + Math.imul(al4, bh1)) | 0;\n    mid = (mid + Math.imul(ah4, bl1)) | 0;\n    hi = (hi + Math.imul(ah4, bh1)) | 0;\n    lo = (lo + Math.imul(al3, bl2)) | 0;\n    mid = (mid + Math.imul(al3, bh2)) | 0;\n    mid = (mid + Math.imul(ah3, bl2)) | 0;\n    hi = (hi + Math.imul(ah3, bh2)) | 0;\n    lo = (lo + Math.imul(al2, bl3)) | 0;\n    mid = (mid + Math.imul(al2, bh3)) | 0;\n    mid = (mid + Math.imul(ah2, bl3)) | 0;\n    hi = (hi + Math.imul(ah2, bh3)) | 0;\n    lo = (lo + Math.imul(al1, bl4)) | 0;\n    mid = (mid + Math.imul(al1, bh4)) | 0;\n    mid = (mid + Math.imul(ah1, bl4)) | 0;\n    hi = (hi + Math.imul(ah1, bh4)) | 0;\n    lo = (lo + Math.imul(al0, bl5)) | 0;\n    mid = (mid + Math.imul(al0, bh5)) | 0;\n    mid = (mid + Math.imul(ah0, bl5)) | 0;\n    hi = (hi + Math.imul(ah0, bh5)) | 0;\n    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;\n    w5 &= 0x3ffffff;\n    /* k = 6 */\n    lo = Math.imul(al6, bl0);\n    mid = Math.imul(al6, bh0);\n    mid = (mid + Math.imul(ah6, bl0)) | 0;\n    hi = Math.imul(ah6, bh0);\n    lo = (lo + Math.imul(al5, bl1)) | 0;\n    mid = (mid + Math.imul(al5, bh1)) | 0;\n    mid = (mid + Math.imul(ah5, bl1)) | 0;\n    hi = (hi + Math.imul(ah5, bh1)) | 0;\n    lo = (lo + Math.imul(al4, bl2)) | 0;\n    mid = (mid + Math.imul(al4, bh2)) | 0;\n    mid = (mid + Math.imul(ah4, bl2)) | 0;\n    hi = (hi + Math.imul(ah4, bh2)) | 0;\n    lo = (lo + Math.imul(al3, bl3)) | 0;\n    mid = (mid + Math.imul(al3, bh3)) | 0;\n    mid = (mid + Math.imul(ah3, bl3)) | 0;\n    hi = (hi + Math.imul(ah3, bh3)) | 0;\n    lo = (lo + Math.imul(al2, bl4)) | 0;\n    mid = (mid + Math.imul(al2, bh4)) | 0;\n    mid = (mid + Math.imul(ah2, bl4)) | 0;\n    hi = (hi + Math.imul(ah2, bh4)) | 0;\n    lo = (lo + Math.imul(al1, bl5)) | 0;\n    mid = (mid + Math.imul(al1, bh5)) | 0;\n    mid = (mid + Math.imul(ah1, bl5)) | 0;\n    hi = (hi + Math.imul(ah1, bh5)) | 0;\n    lo = (lo + Math.imul(al0, bl6)) | 0;\n    mid = (mid + Math.imul(al0, bh6)) | 0;\n    mid = (mid + Math.imul(ah0, bl6)) | 0;\n    hi = (hi + Math.imul(ah0, bh6)) | 0;\n    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;\n    w6 &= 0x3ffffff;\n    /* k = 7 */\n    lo = Math.imul(al7, bl0);\n    mid = Math.imul(al7, bh0);\n    mid = (mid + Math.imul(ah7, bl0)) | 0;\n    hi = Math.imul(ah7, bh0);\n    lo = (lo + Math.imul(al6, bl1)) | 0;\n    mid = (mid + Math.imul(al6, bh1)) | 0;\n    mid = (mid + Math.imul(ah6, bl1)) | 0;\n    hi = (hi + Math.imul(ah6, bh1)) | 0;\n    lo = (lo + Math.imul(al5, bl2)) | 0;\n    mid = (mid + Math.imul(al5, bh2)) | 0;\n    mid = (mid + Math.imul(ah5, bl2)) | 0;\n    hi = (hi + Math.imul(ah5, bh2)) | 0;\n    lo = (lo + Math.imul(al4, bl3)) | 0;\n    mid = (mid + Math.imul(al4, bh3)) | 0;\n    mid = (mid + Math.imul(ah4, bl3)) | 0;\n    hi = (hi + Math.imul(ah4, bh3)) | 0;\n    lo = (lo + Math.imul(al3, bl4)) | 0;\n    mid = (mid + Math.imul(al3, bh4)) | 0;\n    mid = (mid + Math.imul(ah3, bl4)) | 0;\n    hi = (hi + Math.imul(ah3, bh4)) | 0;\n    lo = (lo + Math.imul(al2, bl5)) | 0;\n    mid = (mid + Math.imul(al2, bh5)) | 0;\n    mid = (mid + Math.imul(ah2, bl5)) | 0;\n    hi = (hi + Math.imul(ah2, bh5)) | 0;\n    lo = (lo + Math.imul(al1, bl6)) | 0;\n    mid = (mid + Math.imul(al1, bh6)) | 0;\n    mid = (mid + Math.imul(ah1, bl6)) | 0;\n    hi = (hi + Math.imul(ah1, bh6)) | 0;\n    lo = (lo + Math.imul(al0, bl7)) | 0;\n    mid = (mid + Math.imul(al0, bh7)) | 0;\n    mid = (mid + Math.imul(ah0, bl7)) | 0;\n    hi = (hi + Math.imul(ah0, bh7)) | 0;\n    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;\n    w7 &= 0x3ffffff;\n    /* k = 8 */\n    lo = Math.imul(al8, bl0);\n    mid = Math.imul(al8, bh0);\n    mid = (mid + Math.imul(ah8, bl0)) | 0;\n    hi = Math.imul(ah8, bh0);\n    lo = (lo + Math.imul(al7, bl1)) | 0;\n    mid = (mid + Math.imul(al7, bh1)) | 0;\n    mid = (mid + Math.imul(ah7, bl1)) | 0;\n    hi = (hi + Math.imul(ah7, bh1)) | 0;\n    lo = (lo + Math.imul(al6, bl2)) | 0;\n    mid = (mid + Math.imul(al6, bh2)) | 0;\n    mid = (mid + Math.imul(ah6, bl2)) | 0;\n    hi = (hi + Math.imul(ah6, bh2)) | 0;\n    lo = (lo + Math.imul(al5, bl3)) | 0;\n    mid = (mid + Math.imul(al5, bh3)) | 0;\n    mid = (mid + Math.imul(ah5, bl3)) | 0;\n    hi = (hi + Math.imul(ah5, bh3)) | 0;\n    lo = (lo + Math.imul(al4, bl4)) | 0;\n    mid = (mid + Math.imul(al4, bh4)) | 0;\n    mid = (mid + Math.imul(ah4, bl4)) | 0;\n    hi = (hi + Math.imul(ah4, bh4)) | 0;\n    lo = (lo + Math.imul(al3, bl5)) | 0;\n    mid = (mid + Math.imul(al3, bh5)) | 0;\n    mid = (mid + Math.imul(ah3, bl5)) | 0;\n    hi = (hi + Math.imul(ah3, bh5)) | 0;\n    lo = (lo + Math.imul(al2, bl6)) | 0;\n    mid = (mid + Math.imul(al2, bh6)) | 0;\n    mid = (mid + Math.imul(ah2, bl6)) | 0;\n    hi = (hi + Math.imul(ah2, bh6)) | 0;\n    lo = (lo + Math.imul(al1, bl7)) | 0;\n    mid = (mid + Math.imul(al1, bh7)) | 0;\n    mid = (mid + Math.imul(ah1, bl7)) | 0;\n    hi = (hi + Math.imul(ah1, bh7)) | 0;\n    lo = (lo + Math.imul(al0, bl8)) | 0;\n    mid = (mid + Math.imul(al0, bh8)) | 0;\n    mid = (mid + Math.imul(ah0, bl8)) | 0;\n    hi = (hi + Math.imul(ah0, bh8)) | 0;\n    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;\n    w8 &= 0x3ffffff;\n    /* k = 9 */\n    lo = Math.imul(al9, bl0);\n    mid = Math.imul(al9, bh0);\n    mid = (mid + Math.imul(ah9, bl0)) | 0;\n    hi = Math.imul(ah9, bh0);\n    lo = (lo + Math.imul(al8, bl1)) | 0;\n    mid = (mid + Math.imul(al8, bh1)) | 0;\n    mid = (mid + Math.imul(ah8, bl1)) | 0;\n    hi = (hi + Math.imul(ah8, bh1)) | 0;\n    lo = (lo + Math.imul(al7, bl2)) | 0;\n    mid = (mid + Math.imul(al7, bh2)) | 0;\n    mid = (mid + Math.imul(ah7, bl2)) | 0;\n    hi = (hi + Math.imul(ah7, bh2)) | 0;\n    lo = (lo + Math.imul(al6, bl3)) | 0;\n    mid = (mid + Math.imul(al6, bh3)) | 0;\n    mid = (mid + Math.imul(ah6, bl3)) | 0;\n    hi = (hi + Math.imul(ah6, bh3)) | 0;\n    lo = (lo + Math.imul(al5, bl4)) | 0;\n    mid = (mid + Math.imul(al5, bh4)) | 0;\n    mid = (mid + Math.imul(ah5, bl4)) | 0;\n    hi = (hi + Math.imul(ah5, bh4)) | 0;\n    lo = (lo + Math.imul(al4, bl5)) | 0;\n    mid = (mid + Math.imul(al4, bh5)) | 0;\n    mid = (mid + Math.imul(ah4, bl5)) | 0;\n    hi = (hi + Math.imul(ah4, bh5)) | 0;\n    lo = (lo + Math.imul(al3, bl6)) | 0;\n    mid = (mid + Math.imul(al3, bh6)) | 0;\n    mid = (mid + Math.imul(ah3, bl6)) | 0;\n    hi = (hi + Math.imul(ah3, bh6)) | 0;\n    lo = (lo + Math.imul(al2, bl7)) | 0;\n    mid = (mid + Math.imul(al2, bh7)) | 0;\n    mid = (mid + Math.imul(ah2, bl7)) | 0;\n    hi = (hi + Math.imul(ah2, bh7)) | 0;\n    lo = (lo + Math.imul(al1, bl8)) | 0;\n    mid = (mid + Math.imul(al1, bh8)) | 0;\n    mid = (mid + Math.imul(ah1, bl8)) | 0;\n    hi = (hi + Math.imul(ah1, bh8)) | 0;\n    lo = (lo + Math.imul(al0, bl9)) | 0;\n    mid = (mid + Math.imul(al0, bh9)) | 0;\n    mid = (mid + Math.imul(ah0, bl9)) | 0;\n    hi = (hi + Math.imul(ah0, bh9)) | 0;\n    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;\n    w9 &= 0x3ffffff;\n    /* k = 10 */\n    lo = Math.imul(al9, bl1);\n    mid = Math.imul(al9, bh1);\n    mid = (mid + Math.imul(ah9, bl1)) | 0;\n    hi = Math.imul(ah9, bh1);\n    lo = (lo + Math.imul(al8, bl2)) | 0;\n    mid = (mid + Math.imul(al8, bh2)) | 0;\n    mid = (mid + Math.imul(ah8, bl2)) | 0;\n    hi = (hi + Math.imul(ah8, bh2)) | 0;\n    lo = (lo + Math.imul(al7, bl3)) | 0;\n    mid = (mid + Math.imul(al7, bh3)) | 0;\n    mid = (mid + Math.imul(ah7, bl3)) | 0;\n    hi = (hi + Math.imul(ah7, bh3)) | 0;\n    lo = (lo + Math.imul(al6, bl4)) | 0;\n    mid = (mid + Math.imul(al6, bh4)) | 0;\n    mid = (mid + Math.imul(ah6, bl4)) | 0;\n    hi = (hi + Math.imul(ah6, bh4)) | 0;\n    lo = (lo + Math.imul(al5, bl5)) | 0;\n    mid = (mid + Math.imul(al5, bh5)) | 0;\n    mid = (mid + Math.imul(ah5, bl5)) | 0;\n    hi = (hi + Math.imul(ah5, bh5)) | 0;\n    lo = (lo + Math.imul(al4, bl6)) | 0;\n    mid = (mid + Math.imul(al4, bh6)) | 0;\n    mid = (mid + Math.imul(ah4, bl6)) | 0;\n    hi = (hi + Math.imul(ah4, bh6)) | 0;\n    lo = (lo + Math.imul(al3, bl7)) | 0;\n    mid = (mid + Math.imul(al3, bh7)) | 0;\n    mid = (mid + Math.imul(ah3, bl7)) | 0;\n    hi = (hi + Math.imul(ah3, bh7)) | 0;\n    lo = (lo + Math.imul(al2, bl8)) | 0;\n    mid = (mid + Math.imul(al2, bh8)) | 0;\n    mid = (mid + Math.imul(ah2, bl8)) | 0;\n    hi = (hi + Math.imul(ah2, bh8)) | 0;\n    lo = (lo + Math.imul(al1, bl9)) | 0;\n    mid = (mid + Math.imul(al1, bh9)) | 0;\n    mid = (mid + Math.imul(ah1, bl9)) | 0;\n    hi = (hi + Math.imul(ah1, bh9)) | 0;\n    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;\n    w10 &= 0x3ffffff;\n    /* k = 11 */\n    lo = Math.imul(al9, bl2);\n    mid = Math.imul(al9, bh2);\n    mid = (mid + Math.imul(ah9, bl2)) | 0;\n    hi = Math.imul(ah9, bh2);\n    lo = (lo + Math.imul(al8, bl3)) | 0;\n    mid = (mid + Math.imul(al8, bh3)) | 0;\n    mid = (mid + Math.imul(ah8, bl3)) | 0;\n    hi = (hi + Math.imul(ah8, bh3)) | 0;\n    lo = (lo + Math.imul(al7, bl4)) | 0;\n    mid = (mid + Math.imul(al7, bh4)) | 0;\n    mid = (mid + Math.imul(ah7, bl4)) | 0;\n    hi = (hi + Math.imul(ah7, bh4)) | 0;\n    lo = (lo + Math.imul(al6, bl5)) | 0;\n    mid = (mid + Math.imul(al6, bh5)) | 0;\n    mid = (mid + Math.imul(ah6, bl5)) | 0;\n    hi = (hi + Math.imul(ah6, bh5)) | 0;\n    lo = (lo + Math.imul(al5, bl6)) | 0;\n    mid = (mid + Math.imul(al5, bh6)) | 0;\n    mid = (mid + Math.imul(ah5, bl6)) | 0;\n    hi = (hi + Math.imul(ah5, bh6)) | 0;\n    lo = (lo + Math.imul(al4, bl7)) | 0;\n    mid = (mid + Math.imul(al4, bh7)) | 0;\n    mid = (mid + Math.imul(ah4, bl7)) | 0;\n    hi = (hi + Math.imul(ah4, bh7)) | 0;\n    lo = (lo + Math.imul(al3, bl8)) | 0;\n    mid = (mid + Math.imul(al3, bh8)) | 0;\n    mid = (mid + Math.imul(ah3, bl8)) | 0;\n    hi = (hi + Math.imul(ah3, bh8)) | 0;\n    lo = (lo + Math.imul(al2, bl9)) | 0;\n    mid = (mid + Math.imul(al2, bh9)) | 0;\n    mid = (mid + Math.imul(ah2, bl9)) | 0;\n    hi = (hi + Math.imul(ah2, bh9)) | 0;\n    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;\n    w11 &= 0x3ffffff;\n    /* k = 12 */\n    lo = Math.imul(al9, bl3);\n    mid = Math.imul(al9, bh3);\n    mid = (mid + Math.imul(ah9, bl3)) | 0;\n    hi = Math.imul(ah9, bh3);\n    lo = (lo + Math.imul(al8, bl4)) | 0;\n    mid = (mid + Math.imul(al8, bh4)) | 0;\n    mid = (mid + Math.imul(ah8, bl4)) | 0;\n    hi = (hi + Math.imul(ah8, bh4)) | 0;\n    lo = (lo + Math.imul(al7, bl5)) | 0;\n    mid = (mid + Math.imul(al7, bh5)) | 0;\n    mid = (mid + Math.imul(ah7, bl5)) | 0;\n    hi = (hi + Math.imul(ah7, bh5)) | 0;\n    lo = (lo + Math.imul(al6, bl6)) | 0;\n    mid = (mid + Math.imul(al6, bh6)) | 0;\n    mid = (mid + Math.imul(ah6, bl6)) | 0;\n    hi = (hi + Math.imul(ah6, bh6)) | 0;\n    lo = (lo + Math.imul(al5, bl7)) | 0;\n    mid = (mid + Math.imul(al5, bh7)) | 0;\n    mid = (mid + Math.imul(ah5, bl7)) | 0;\n    hi = (hi + Math.imul(ah5, bh7)) | 0;\n    lo = (lo + Math.imul(al4, bl8)) | 0;\n    mid = (mid + Math.imul(al4, bh8)) | 0;\n    mid = (mid + Math.imul(ah4, bl8)) | 0;\n    hi = (hi + Math.imul(ah4, bh8)) | 0;\n    lo = (lo + Math.imul(al3, bl9)) | 0;\n    mid = (mid + Math.imul(al3, bh9)) | 0;\n    mid = (mid + Math.imul(ah3, bl9)) | 0;\n    hi = (hi + Math.imul(ah3, bh9)) | 0;\n    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;\n    w12 &= 0x3ffffff;\n    /* k = 13 */\n    lo = Math.imul(al9, bl4);\n    mid = Math.imul(al9, bh4);\n    mid = (mid + Math.imul(ah9, bl4)) | 0;\n    hi = Math.imul(ah9, bh4);\n    lo = (lo + Math.imul(al8, bl5)) | 0;\n    mid = (mid + Math.imul(al8, bh5)) | 0;\n    mid = (mid + Math.imul(ah8, bl5)) | 0;\n    hi = (hi + Math.imul(ah8, bh5)) | 0;\n    lo = (lo + Math.imul(al7, bl6)) | 0;\n    mid = (mid + Math.imul(al7, bh6)) | 0;\n    mid = (mid + Math.imul(ah7, bl6)) | 0;\n    hi = (hi + Math.imul(ah7, bh6)) | 0;\n    lo = (lo + Math.imul(al6, bl7)) | 0;\n    mid = (mid + Math.imul(al6, bh7)) | 0;\n    mid = (mid + Math.imul(ah6, bl7)) | 0;\n    hi = (hi + Math.imul(ah6, bh7)) | 0;\n    lo = (lo + Math.imul(al5, bl8)) | 0;\n    mid = (mid + Math.imul(al5, bh8)) | 0;\n    mid = (mid + Math.imul(ah5, bl8)) | 0;\n    hi = (hi + Math.imul(ah5, bh8)) | 0;\n    lo = (lo + Math.imul(al4, bl9)) | 0;\n    mid = (mid + Math.imul(al4, bh9)) | 0;\n    mid = (mid + Math.imul(ah4, bl9)) | 0;\n    hi = (hi + Math.imul(ah4, bh9)) | 0;\n    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;\n    w13 &= 0x3ffffff;\n    /* k = 14 */\n    lo = Math.imul(al9, bl5);\n    mid = Math.imul(al9, bh5);\n    mid = (mid + Math.imul(ah9, bl5)) | 0;\n    hi = Math.imul(ah9, bh5);\n    lo = (lo + Math.imul(al8, bl6)) | 0;\n    mid = (mid + Math.imul(al8, bh6)) | 0;\n    mid = (mid + Math.imul(ah8, bl6)) | 0;\n    hi = (hi + Math.imul(ah8, bh6)) | 0;\n    lo = (lo + Math.imul(al7, bl7)) | 0;\n    mid = (mid + Math.imul(al7, bh7)) | 0;\n    mid = (mid + Math.imul(ah7, bl7)) | 0;\n    hi = (hi + Math.imul(ah7, bh7)) | 0;\n    lo = (lo + Math.imul(al6, bl8)) | 0;\n    mid = (mid + Math.imul(al6, bh8)) | 0;\n    mid = (mid + Math.imul(ah6, bl8)) | 0;\n    hi = (hi + Math.imul(ah6, bh8)) | 0;\n    lo = (lo + Math.imul(al5, bl9)) | 0;\n    mid = (mid + Math.imul(al5, bh9)) | 0;\n    mid = (mid + Math.imul(ah5, bl9)) | 0;\n    hi = (hi + Math.imul(ah5, bh9)) | 0;\n    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;\n    w14 &= 0x3ffffff;\n    /* k = 15 */\n    lo = Math.imul(al9, bl6);\n    mid = Math.imul(al9, bh6);\n    mid = (mid + Math.imul(ah9, bl6)) | 0;\n    hi = Math.imul(ah9, bh6);\n    lo = (lo + Math.imul(al8, bl7)) | 0;\n    mid = (mid + Math.imul(al8, bh7)) | 0;\n    mid = (mid + Math.imul(ah8, bl7)) | 0;\n    hi = (hi + Math.imul(ah8, bh7)) | 0;\n    lo = (lo + Math.imul(al7, bl8)) | 0;\n    mid = (mid + Math.imul(al7, bh8)) | 0;\n    mid = (mid + Math.imul(ah7, bl8)) | 0;\n    hi = (hi + Math.imul(ah7, bh8)) | 0;\n    lo = (lo + Math.imul(al6, bl9)) | 0;\n    mid = (mid + Math.imul(al6, bh9)) | 0;\n    mid = (mid + Math.imul(ah6, bl9)) | 0;\n    hi = (hi + Math.imul(ah6, bh9)) | 0;\n    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;\n    w15 &= 0x3ffffff;\n    /* k = 16 */\n    lo = Math.imul(al9, bl7);\n    mid = Math.imul(al9, bh7);\n    mid = (mid + Math.imul(ah9, bl7)) | 0;\n    hi = Math.imul(ah9, bh7);\n    lo = (lo + Math.imul(al8, bl8)) | 0;\n    mid = (mid + Math.imul(al8, bh8)) | 0;\n    mid = (mid + Math.imul(ah8, bl8)) | 0;\n    hi = (hi + Math.imul(ah8, bh8)) | 0;\n    lo = (lo + Math.imul(al7, bl9)) | 0;\n    mid = (mid + Math.imul(al7, bh9)) | 0;\n    mid = (mid + Math.imul(ah7, bl9)) | 0;\n    hi = (hi + Math.imul(ah7, bh9)) | 0;\n    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;\n    w16 &= 0x3ffffff;\n    /* k = 17 */\n    lo = Math.imul(al9, bl8);\n    mid = Math.imul(al9, bh8);\n    mid = (mid + Math.imul(ah9, bl8)) | 0;\n    hi = Math.imul(ah9, bh8);\n    lo = (lo + Math.imul(al8, bl9)) | 0;\n    mid = (mid + Math.imul(al8, bh9)) | 0;\n    mid = (mid + Math.imul(ah8, bl9)) | 0;\n    hi = (hi + Math.imul(ah8, bh9)) | 0;\n    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;\n    w17 &= 0x3ffffff;\n    /* k = 18 */\n    lo = Math.imul(al9, bl9);\n    mid = Math.imul(al9, bh9);\n    mid = (mid + Math.imul(ah9, bl9)) | 0;\n    hi = Math.imul(ah9, bh9);\n    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;\n    w18 &= 0x3ffffff;\n    o[0] = w0;\n    o[1] = w1;\n    o[2] = w2;\n    o[3] = w3;\n    o[4] = w4;\n    o[5] = w5;\n    o[6] = w6;\n    o[7] = w7;\n    o[8] = w8;\n    o[9] = w9;\n    o[10] = w10;\n    o[11] = w11;\n    o[12] = w12;\n    o[13] = w13;\n    o[14] = w14;\n    o[15] = w15;\n    o[16] = w16;\n    o[17] = w17;\n    o[18] = w18;\n    if (c !== 0) {\n      o[19] = c;\n      out.length++;\n    }\n    return out;\n  };\n\n  // Polyfill comb\n  if (!Math.imul) {\n    comb10MulTo = smallMulTo;\n  }\n\n  function bigMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    out.length = self.length + num.length;\n\n    var carry = 0;\n    var hncarry = 0;\n    for (var k = 0; k < out.length - 1; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = hncarry;\n      hncarry = 0;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = k - j;\n        var a = self.words[i] | 0;\n        var b = num.words[j] | 0;\n        var r = a * b;\n\n        var lo = r & 0x3ffffff;\n        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;\n        lo = (lo + rword) | 0;\n        rword = lo & 0x3ffffff;\n        ncarry = (ncarry + (lo >>> 26)) | 0;\n\n        hncarry += ncarry >>> 26;\n        ncarry &= 0x3ffffff;\n      }\n      out.words[k] = rword;\n      carry = ncarry;\n      ncarry = hncarry;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry;\n    } else {\n      out.length--;\n    }\n\n    return out._strip();\n  }\n\n  function jumboMulTo (self, num, out) {\n    // Temporary disable, see https://github.com/indutny/bn.js/issues/211\n    // var fftm = new FFTM();\n    // return fftm.mulp(self, num, out);\n    return bigMulTo(self, num, out);\n  }\n\n  BN.prototype.mulTo = function mulTo (num, out) {\n    var res;\n    var len = this.length + num.length;\n    if (this.length === 10 && num.length === 10) {\n      res = comb10MulTo(this, num, out);\n    } else if (len < 63) {\n      res = smallMulTo(this, num, out);\n    } else if (len < 1024) {\n      res = bigMulTo(this, num, out);\n    } else {\n      res = jumboMulTo(this, num, out);\n    }\n\n    return res;\n  };\n\n  // Cooley-Tukey algorithm for FFT\n  // slightly revisited to rely on looping instead of recursion\n\n  function FFTM (x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  FFTM.prototype.makeRBT = function makeRBT (N) {\n    var t = new Array(N);\n    var l = BN.prototype._countBits(N) - 1;\n    for (var i = 0; i < N; i++) {\n      t[i] = this.revBin(i, l, N);\n    }\n\n    return t;\n  };\n\n  // Returns binary-reversed representation of `x`\n  FFTM.prototype.revBin = function revBin (x, l, N) {\n    if (x === 0 || x === N - 1) return x;\n\n    var rb = 0;\n    for (var i = 0; i < l; i++) {\n      rb |= (x & 1) << (l - i - 1);\n      x >>= 1;\n    }\n\n    return rb;\n  };\n\n  // Performs \"tweedling\" phase, therefore 'emulating'\n  // behaviour of the recursive algorithm\n  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {\n    for (var i = 0; i < N; i++) {\n      rtws[i] = rws[rbt[i]];\n      itws[i] = iws[rbt[i]];\n    }\n  };\n\n  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {\n    this.permute(rbt, rws, iws, rtws, itws, N);\n\n    for (var s = 1; s < N; s <<= 1) {\n      var l = s << 1;\n\n      var rtwdf = Math.cos(2 * Math.PI / l);\n      var itwdf = Math.sin(2 * Math.PI / l);\n\n      for (var p = 0; p < N; p += l) {\n        var rtwdf_ = rtwdf;\n        var itwdf_ = itwdf;\n\n        for (var j = 0; j < s; j++) {\n          var re = rtws[p + j];\n          var ie = itws[p + j];\n\n          var ro = rtws[p + j + s];\n          var io = itws[p + j + s];\n\n          var rx = rtwdf_ * ro - itwdf_ * io;\n\n          io = rtwdf_ * io + itwdf_ * ro;\n          ro = rx;\n\n          rtws[p + j] = re + ro;\n          itws[p + j] = ie + io;\n\n          rtws[p + j + s] = re - ro;\n          itws[p + j + s] = ie - io;\n\n          /* jshint maxdepth : false */\n          if (j !== l) {\n            rx = rtwdf * rtwdf_ - itwdf * itwdf_;\n\n            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;\n            rtwdf_ = rx;\n          }\n        }\n      }\n    }\n  };\n\n  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {\n    var N = Math.max(m, n) | 1;\n    var odd = N & 1;\n    var i = 0;\n    for (N = N / 2 | 0; N; N = N >>> 1) {\n      i++;\n    }\n\n    return 1 << i + 1 + odd;\n  };\n\n  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {\n    if (N <= 1) return;\n\n    for (var i = 0; i < N / 2; i++) {\n      var t = rws[i];\n\n      rws[i] = rws[N - i - 1];\n      rws[N - i - 1] = t;\n\n      t = iws[i];\n\n      iws[i] = -iws[N - i - 1];\n      iws[N - i - 1] = -t;\n    }\n  };\n\n  FFTM.prototype.normalize13b = function normalize13b (ws, N) {\n    var carry = 0;\n    for (var i = 0; i < N / 2; i++) {\n      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +\n        Math.round(ws[2 * i] / N) +\n        carry;\n\n      ws[i] = w & 0x3ffffff;\n\n      if (w < 0x4000000) {\n        carry = 0;\n      } else {\n        carry = w / 0x4000000 | 0;\n      }\n    }\n\n    return ws;\n  };\n\n  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {\n    var carry = 0;\n    for (var i = 0; i < len; i++) {\n      carry = carry + (ws[i] | 0);\n\n      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;\n      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;\n    }\n\n    // Pad with zeroes\n    for (i = 2 * len; i < N; ++i) {\n      rws[i] = 0;\n    }\n\n    assert(carry === 0);\n    assert((carry & ~0x1fff) === 0);\n  };\n\n  FFTM.prototype.stub = function stub (N) {\n    var ph = new Array(N);\n    for (var i = 0; i < N; i++) {\n      ph[i] = 0;\n    }\n\n    return ph;\n  };\n\n  FFTM.prototype.mulp = function mulp (x, y, out) {\n    var N = 2 * this.guessLen13b(x.length, y.length);\n\n    var rbt = this.makeRBT(N);\n\n    var _ = this.stub(N);\n\n    var rws = new Array(N);\n    var rwst = new Array(N);\n    var iwst = new Array(N);\n\n    var nrws = new Array(N);\n    var nrwst = new Array(N);\n    var niwst = new Array(N);\n\n    var rmws = out.words;\n    rmws.length = N;\n\n    this.convert13b(x.words, x.length, rws, N);\n    this.convert13b(y.words, y.length, nrws, N);\n\n    this.transform(rws, _, rwst, iwst, N, rbt);\n    this.transform(nrws, _, nrwst, niwst, N, rbt);\n\n    for (var i = 0; i < N; i++) {\n      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];\n      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];\n      rwst[i] = rx;\n    }\n\n    this.conjugate(rwst, iwst, N);\n    this.transform(rwst, iwst, rmws, _, N, rbt);\n    this.conjugate(rmws, _, N);\n    this.normalize13b(rmws, N);\n\n    out.negative = x.negative ^ y.negative;\n    out.length = x.length + y.length;\n    return out._strip();\n  };\n\n  // Multiply `this` by `num`\n  BN.prototype.mul = function mul (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return this.mulTo(num, out);\n  };\n\n  // Multiply employing FFT\n  BN.prototype.mulf = function mulf (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return jumboMulTo(this, num, out);\n  };\n\n  // In-place Multiplication\n  BN.prototype.imul = function imul (num) {\n    return this.clone().mulTo(num, this);\n  };\n\n  BN.prototype.imuln = function imuln (num) {\n    var isNegNum = num < 0;\n    if (isNegNum) num = -num;\n\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n\n    // Carry\n    var carry = 0;\n    for (var i = 0; i < this.length; i++) {\n      var w = (this.words[i] | 0) * num;\n      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);\n      carry >>= 26;\n      carry += (w / 0x4000000) | 0;\n      // NOTE: lo is 27bit maximum\n      carry += lo >>> 26;\n      this.words[i] = lo & 0x3ffffff;\n    }\n\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n\n    return isNegNum ? this.ineg() : this;\n  };\n\n  BN.prototype.muln = function muln (num) {\n    return this.clone().imuln(num);\n  };\n\n  // `this` * `this`\n  BN.prototype.sqr = function sqr () {\n    return this.mul(this);\n  };\n\n  // `this` * `this` in-place\n  BN.prototype.isqr = function isqr () {\n    return this.imul(this.clone());\n  };\n\n  // Math.pow(`this`, `num`)\n  BN.prototype.pow = function pow (num) {\n    var w = toBitArray(num);\n    if (w.length === 0) return new BN(1);\n\n    // Skip leading zeroes\n    var res = this;\n    for (var i = 0; i < w.length; i++, res = res.sqr()) {\n      if (w[i] !== 0) break;\n    }\n\n    if (++i < w.length) {\n      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {\n        if (w[i] === 0) continue;\n\n        res = res.mul(q);\n      }\n    }\n\n    return res;\n  };\n\n  // Shift-left in-place\n  BN.prototype.iushln = function iushln (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);\n    var i;\n\n    if (r !== 0) {\n      var carry = 0;\n\n      for (i = 0; i < this.length; i++) {\n        var newCarry = this.words[i] & carryMask;\n        var c = ((this.words[i] | 0) - newCarry) << r;\n        this.words[i] = c | carry;\n        carry = newCarry >>> (26 - r);\n      }\n\n      if (carry) {\n        this.words[i] = carry;\n        this.length++;\n      }\n    }\n\n    if (s !== 0) {\n      for (i = this.length - 1; i >= 0; i--) {\n        this.words[i + s] = this.words[i];\n      }\n\n      for (i = 0; i < s; i++) {\n        this.words[i] = 0;\n      }\n\n      this.length += s;\n    }\n\n    return this._strip();\n  };\n\n  BN.prototype.ishln = function ishln (bits) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushln(bits);\n  };\n\n  // Shift-right in-place\n  // NOTE: `hint` is a lowest bit before trailing zeroes\n  // NOTE: if `extended` is present - it will be filled with destroyed bits\n  BN.prototype.iushrn = function iushrn (bits, hint, extended) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var h;\n    if (hint) {\n      h = (hint - (hint % 26)) / 26;\n    } else {\n      h = 0;\n    }\n\n    var r = bits % 26;\n    var s = Math.min((bits - r) / 26, this.length);\n    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n    var maskedWords = extended;\n\n    h -= s;\n    h = Math.max(0, h);\n\n    // Extended mode, copy masked part\n    if (maskedWords) {\n      for (var i = 0; i < s; i++) {\n        maskedWords.words[i] = this.words[i];\n      }\n      maskedWords.length = s;\n    }\n\n    if (s === 0) {\n      // No-op, we should not move anything at all\n    } else if (this.length > s) {\n      this.length -= s;\n      for (i = 0; i < this.length; i++) {\n        this.words[i] = this.words[i + s];\n      }\n    } else {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    var carry = 0;\n    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {\n      var word = this.words[i] | 0;\n      this.words[i] = (carry << (26 - r)) | (word >>> r);\n      carry = word & mask;\n    }\n\n    // Push carried bits as a mask\n    if (maskedWords && carry !== 0) {\n      maskedWords.words[maskedWords.length++] = carry;\n    }\n\n    if (this.length === 0) {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    return this._strip();\n  };\n\n  BN.prototype.ishrn = function ishrn (bits, hint, extended) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushrn(bits, hint, extended);\n  };\n\n  // Shift-left\n  BN.prototype.shln = function shln (bits) {\n    return this.clone().ishln(bits);\n  };\n\n  BN.prototype.ushln = function ushln (bits) {\n    return this.clone().iushln(bits);\n  };\n\n  // Shift-right\n  BN.prototype.shrn = function shrn (bits) {\n    return this.clone().ishrn(bits);\n  };\n\n  BN.prototype.ushrn = function ushrn (bits) {\n    return this.clone().iushrn(bits);\n  };\n\n  // Test if n bit is set\n  BN.prototype.testn = function testn (bit) {\n    assert(typeof bit === 'number' && bit >= 0);\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) return false;\n\n    // Check bit and return\n    var w = this.words[s];\n\n    return !!(w & q);\n  };\n\n  // Return only lowers bits of number (in-place)\n  BN.prototype.imaskn = function imaskn (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n\n    assert(this.negative === 0, 'imaskn works only with positive numbers');\n\n    if (this.length <= s) {\n      return this;\n    }\n\n    if (r !== 0) {\n      s++;\n    }\n    this.length = Math.min(s, this.length);\n\n    if (r !== 0) {\n      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n      this.words[this.length - 1] &= mask;\n    }\n\n    return this._strip();\n  };\n\n  // Return only lowers bits of number\n  BN.prototype.maskn = function maskn (bits) {\n    return this.clone().imaskn(bits);\n  };\n\n  // Add plain number `num` to `this`\n  BN.prototype.iaddn = function iaddn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.isubn(-num);\n\n    // Possible sign change\n    if (this.negative !== 0) {\n      if (this.length === 1 && (this.words[0] | 0) <= num) {\n        this.words[0] = num - (this.words[0] | 0);\n        this.negative = 0;\n        return this;\n      }\n\n      this.negative = 0;\n      this.isubn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    // Add without checks\n    return this._iaddn(num);\n  };\n\n  BN.prototype._iaddn = function _iaddn (num) {\n    this.words[0] += num;\n\n    // Carry\n    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {\n      this.words[i] -= 0x4000000;\n      if (i === this.length - 1) {\n        this.words[i + 1] = 1;\n      } else {\n        this.words[i + 1]++;\n      }\n    }\n    this.length = Math.max(this.length, i + 1);\n\n    return this;\n  };\n\n  // Subtract plain number `num` from `this`\n  BN.prototype.isubn = function isubn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.iaddn(-num);\n\n    if (this.negative !== 0) {\n      this.negative = 0;\n      this.iaddn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    this.words[0] -= num;\n\n    if (this.length === 1 && this.words[0] < 0) {\n      this.words[0] = -this.words[0];\n      this.negative = 1;\n    } else {\n      // Carry\n      for (var i = 0; i < this.length && this.words[i] < 0; i++) {\n        this.words[i] += 0x4000000;\n        this.words[i + 1] -= 1;\n      }\n    }\n\n    return this._strip();\n  };\n\n  BN.prototype.addn = function addn (num) {\n    return this.clone().iaddn(num);\n  };\n\n  BN.prototype.subn = function subn (num) {\n    return this.clone().isubn(num);\n  };\n\n  BN.prototype.iabs = function iabs () {\n    this.negative = 0;\n\n    return this;\n  };\n\n  BN.prototype.abs = function abs () {\n    return this.clone().iabs();\n  };\n\n  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {\n    var len = num.length + shift;\n    var i;\n\n    this._expand(len);\n\n    var w;\n    var carry = 0;\n    for (i = 0; i < num.length; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      var right = (num.words[i] | 0) * mul;\n      w -= right & 0x3ffffff;\n      carry = (w >> 26) - ((right / 0x4000000) | 0);\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n    for (; i < this.length - shift; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      carry = w >> 26;\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n\n    if (carry === 0) return this._strip();\n\n    // Subtraction overflow\n    assert(carry === -1);\n    carry = 0;\n    for (i = 0; i < this.length; i++) {\n      w = -(this.words[i] | 0) + carry;\n      carry = w >> 26;\n      this.words[i] = w & 0x3ffffff;\n    }\n    this.negative = 1;\n\n    return this._strip();\n  };\n\n  BN.prototype._wordDiv = function _wordDiv (num, mode) {\n    var shift = this.length - num.length;\n\n    var a = this.clone();\n    var b = num;\n\n    // Normalize\n    var bhi = b.words[b.length - 1] | 0;\n    var bhiBits = this._countBits(bhi);\n    shift = 26 - bhiBits;\n    if (shift !== 0) {\n      b = b.ushln(shift);\n      a.iushln(shift);\n      bhi = b.words[b.length - 1] | 0;\n    }\n\n    // Initialize quotient\n    var m = a.length - b.length;\n    var q;\n\n    if (mode !== 'mod') {\n      q = new BN(null);\n      q.length = m + 1;\n      q.words = new Array(q.length);\n      for (var i = 0; i < q.length; i++) {\n        q.words[i] = 0;\n      }\n    }\n\n    var diff = a.clone()._ishlnsubmul(b, 1, m);\n    if (diff.negative === 0) {\n      a = diff;\n      if (q) {\n        q.words[m] = 1;\n      }\n    }\n\n    for (var j = m - 1; j >= 0; j--) {\n      var qj = (a.words[b.length + j] | 0) * 0x4000000 +\n        (a.words[b.length + j - 1] | 0);\n\n      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max\n      // (0x7ffffff)\n      qj = Math.min((qj / bhi) | 0, 0x3ffffff);\n\n      a._ishlnsubmul(b, qj, j);\n      while (a.negative !== 0) {\n        qj--;\n        a.negative = 0;\n        a._ishlnsubmul(b, 1, j);\n        if (!a.isZero()) {\n          a.negative ^= 1;\n        }\n      }\n      if (q) {\n        q.words[j] = qj;\n      }\n    }\n    if (q) {\n      q._strip();\n    }\n    a._strip();\n\n    // Denormalize\n    if (mode !== 'div' && shift !== 0) {\n      a.iushrn(shift);\n    }\n\n    return {\n      div: q || null,\n      mod: a\n    };\n  };\n\n  // NOTE: 1) `mode` can be set to `mod` to request mod only,\n  //       to `div` to request div only, or be absent to\n  //       request both div & mod\n  //       2) `positive` is true if unsigned mod is requested\n  BN.prototype.divmod = function divmod (num, mode, positive) {\n    assert(!num.isZero());\n\n    if (this.isZero()) {\n      return {\n        div: new BN(0),\n        mod: new BN(0)\n      };\n    }\n\n    var div, mod, res;\n    if (this.negative !== 0 && num.negative === 0) {\n      res = this.neg().divmod(num, mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.iadd(num);\n        }\n      }\n\n      return {\n        div: div,\n        mod: mod\n      };\n    }\n\n    if (this.negative === 0 && num.negative !== 0) {\n      res = this.divmod(num.neg(), mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      return {\n        div: div,\n        mod: res.mod\n      };\n    }\n\n    if ((this.negative & num.negative) !== 0) {\n      res = this.neg().divmod(num.neg(), mode);\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.isub(num);\n        }\n      }\n\n      return {\n        div: res.div,\n        mod: mod\n      };\n    }\n\n    // Both numbers are positive at this point\n\n    // Strip both numbers to approximate shift value\n    if (num.length > this.length || this.cmp(num) < 0) {\n      return {\n        div: new BN(0),\n        mod: this\n      };\n    }\n\n    // Very short reduction\n    if (num.length === 1) {\n      if (mode === 'div') {\n        return {\n          div: this.divn(num.words[0]),\n          mod: null\n        };\n      }\n\n      if (mode === 'mod') {\n        return {\n          div: null,\n          mod: new BN(this.modrn(num.words[0]))\n        };\n      }\n\n      return {\n        div: this.divn(num.words[0]),\n        mod: new BN(this.modrn(num.words[0]))\n      };\n    }\n\n    return this._wordDiv(num, mode);\n  };\n\n  // Find `this` / `num`\n  BN.prototype.div = function div (num) {\n    return this.divmod(num, 'div', false).div;\n  };\n\n  // Find `this` % `num`\n  BN.prototype.mod = function mod (num) {\n    return this.divmod(num, 'mod', false).mod;\n  };\n\n  BN.prototype.umod = function umod (num) {\n    return this.divmod(num, 'mod', true).mod;\n  };\n\n  // Find Round(`this` / `num`)\n  BN.prototype.divRound = function divRound (num) {\n    var dm = this.divmod(num);\n\n    // Fast case - exact division\n    if (dm.mod.isZero()) return dm.div;\n\n    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;\n\n    var half = num.ushrn(1);\n    var r2 = num.andln(1);\n    var cmp = mod.cmp(half);\n\n    // Round down\n    if (cmp < 0 || (r2 === 1 && cmp === 0)) return dm.div;\n\n    // Round up\n    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);\n  };\n\n  BN.prototype.modrn = function modrn (num) {\n    var isNegNum = num < 0;\n    if (isNegNum) num = -num;\n\n    assert(num <= 0x3ffffff);\n    var p = (1 << 26) % num;\n\n    var acc = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      acc = (p * acc + (this.words[i] | 0)) % num;\n    }\n\n    return isNegNum ? -acc : acc;\n  };\n\n  // WARNING: DEPRECATED\n  BN.prototype.modn = function modn (num) {\n    return this.modrn(num);\n  };\n\n  // In-place division by number\n  BN.prototype.idivn = function idivn (num) {\n    var isNegNum = num < 0;\n    if (isNegNum) num = -num;\n\n    assert(num <= 0x3ffffff);\n\n    var carry = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var w = (this.words[i] | 0) + carry * 0x4000000;\n      this.words[i] = (w / num) | 0;\n      carry = w % num;\n    }\n\n    this._strip();\n    return isNegNum ? this.ineg() : this;\n  };\n\n  BN.prototype.divn = function divn (num) {\n    return this.clone().idivn(num);\n  };\n\n  BN.prototype.egcd = function egcd (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var x = this;\n    var y = p.clone();\n\n    if (x.negative !== 0) {\n      x = x.umod(p);\n    } else {\n      x = x.clone();\n    }\n\n    // A * x + B * y = x\n    var A = new BN(1);\n    var B = new BN(0);\n\n    // C * x + D * y = y\n    var C = new BN(0);\n    var D = new BN(1);\n\n    var g = 0;\n\n    while (x.isEven() && y.isEven()) {\n      x.iushrn(1);\n      y.iushrn(1);\n      ++g;\n    }\n\n    var yp = y.clone();\n    var xp = x.clone();\n\n    while (!x.isZero()) {\n      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        x.iushrn(i);\n        while (i-- > 0) {\n          if (A.isOdd() || B.isOdd()) {\n            A.iadd(yp);\n            B.isub(xp);\n          }\n\n          A.iushrn(1);\n          B.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        y.iushrn(j);\n        while (j-- > 0) {\n          if (C.isOdd() || D.isOdd()) {\n            C.iadd(yp);\n            D.isub(xp);\n          }\n\n          C.iushrn(1);\n          D.iushrn(1);\n        }\n      }\n\n      if (x.cmp(y) >= 0) {\n        x.isub(y);\n        A.isub(C);\n        B.isub(D);\n      } else {\n        y.isub(x);\n        C.isub(A);\n        D.isub(B);\n      }\n    }\n\n    return {\n      a: C,\n      b: D,\n      gcd: y.iushln(g)\n    };\n  };\n\n  // This is reduced incarnation of the binary EEA\n  // above, designated to invert members of the\n  // _prime_ fields F(p) at a maximal speed\n  BN.prototype._invmp = function _invmp (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var a = this;\n    var b = p.clone();\n\n    if (a.negative !== 0) {\n      a = a.umod(p);\n    } else {\n      a = a.clone();\n    }\n\n    var x1 = new BN(1);\n    var x2 = new BN(0);\n\n    var delta = b.clone();\n\n    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {\n      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        a.iushrn(i);\n        while (i-- > 0) {\n          if (x1.isOdd()) {\n            x1.iadd(delta);\n          }\n\n          x1.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        b.iushrn(j);\n        while (j-- > 0) {\n          if (x2.isOdd()) {\n            x2.iadd(delta);\n          }\n\n          x2.iushrn(1);\n        }\n      }\n\n      if (a.cmp(b) >= 0) {\n        a.isub(b);\n        x1.isub(x2);\n      } else {\n        b.isub(a);\n        x2.isub(x1);\n      }\n    }\n\n    var res;\n    if (a.cmpn(1) === 0) {\n      res = x1;\n    } else {\n      res = x2;\n    }\n\n    if (res.cmpn(0) < 0) {\n      res.iadd(p);\n    }\n\n    return res;\n  };\n\n  BN.prototype.gcd = function gcd (num) {\n    if (this.isZero()) return num.abs();\n    if (num.isZero()) return this.abs();\n\n    var a = this.clone();\n    var b = num.clone();\n    a.negative = 0;\n    b.negative = 0;\n\n    // Remove common factor of two\n    for (var shift = 0; a.isEven() && b.isEven(); shift++) {\n      a.iushrn(1);\n      b.iushrn(1);\n    }\n\n    do {\n      while (a.isEven()) {\n        a.iushrn(1);\n      }\n      while (b.isEven()) {\n        b.iushrn(1);\n      }\n\n      var r = a.cmp(b);\n      if (r < 0) {\n        // Swap `a` and `b` to make `a` always bigger than `b`\n        var t = a;\n        a = b;\n        b = t;\n      } else if (r === 0 || b.cmpn(1) === 0) {\n        break;\n      }\n\n      a.isub(b);\n    } while (true);\n\n    return b.iushln(shift);\n  };\n\n  // Invert number in the field F(num)\n  BN.prototype.invm = function invm (num) {\n    return this.egcd(num).a.umod(num);\n  };\n\n  BN.prototype.isEven = function isEven () {\n    return (this.words[0] & 1) === 0;\n  };\n\n  BN.prototype.isOdd = function isOdd () {\n    return (this.words[0] & 1) === 1;\n  };\n\n  // And first word and num\n  BN.prototype.andln = function andln (num) {\n    return this.words[0] & num;\n  };\n\n  // Increment at the bit position in-line\n  BN.prototype.bincn = function bincn (bit) {\n    assert(typeof bit === 'number');\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) {\n      this._expand(s + 1);\n      this.words[s] |= q;\n      return this;\n    }\n\n    // Add bit and propagate, if needed\n    var carry = q;\n    for (var i = s; carry !== 0 && i < this.length; i++) {\n      var w = this.words[i] | 0;\n      w += carry;\n      carry = w >>> 26;\n      w &= 0x3ffffff;\n      this.words[i] = w;\n    }\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n    return this;\n  };\n\n  BN.prototype.isZero = function isZero () {\n    return this.length === 1 && this.words[0] === 0;\n  };\n\n  BN.prototype.cmpn = function cmpn (num) {\n    var negative = num < 0;\n\n    if (this.negative !== 0 && !negative) return -1;\n    if (this.negative === 0 && negative) return 1;\n\n    this._strip();\n\n    var res;\n    if (this.length > 1) {\n      res = 1;\n    } else {\n      if (negative) {\n        num = -num;\n      }\n\n      assert(num <= 0x3ffffff, 'Number is too big');\n\n      var w = this.words[0] | 0;\n      res = w === num ? 0 : w < num ? -1 : 1;\n    }\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Compare two numbers and return:\n  // 1 - if `this` > `num`\n  // 0 - if `this` == `num`\n  // -1 - if `this` < `num`\n  BN.prototype.cmp = function cmp (num) {\n    if (this.negative !== 0 && num.negative === 0) return -1;\n    if (this.negative === 0 && num.negative !== 0) return 1;\n\n    var res = this.ucmp(num);\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Unsigned comparison\n  BN.prototype.ucmp = function ucmp (num) {\n    // At this point both numbers have the same sign\n    if (this.length > num.length) return 1;\n    if (this.length < num.length) return -1;\n\n    var res = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var a = this.words[i] | 0;\n      var b = num.words[i] | 0;\n\n      if (a === b) continue;\n      if (a < b) {\n        res = -1;\n      } else if (a > b) {\n        res = 1;\n      }\n      break;\n    }\n    return res;\n  };\n\n  BN.prototype.gtn = function gtn (num) {\n    return this.cmpn(num) === 1;\n  };\n\n  BN.prototype.gt = function gt (num) {\n    return this.cmp(num) === 1;\n  };\n\n  BN.prototype.gten = function gten (num) {\n    return this.cmpn(num) >= 0;\n  };\n\n  BN.prototype.gte = function gte (num) {\n    return this.cmp(num) >= 0;\n  };\n\n  BN.prototype.ltn = function ltn (num) {\n    return this.cmpn(num) === -1;\n  };\n\n  BN.prototype.lt = function lt (num) {\n    return this.cmp(num) === -1;\n  };\n\n  BN.prototype.lten = function lten (num) {\n    return this.cmpn(num) <= 0;\n  };\n\n  BN.prototype.lte = function lte (num) {\n    return this.cmp(num) <= 0;\n  };\n\n  BN.prototype.eqn = function eqn (num) {\n    return this.cmpn(num) === 0;\n  };\n\n  BN.prototype.eq = function eq (num) {\n    return this.cmp(num) === 0;\n  };\n\n  //\n  // A reduce context, could be using montgomery or something better, depending\n  // on the `m` itself.\n  //\n  BN.red = function red (num) {\n    return new Red(num);\n  };\n\n  BN.prototype.toRed = function toRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    assert(this.negative === 0, 'red works only with positives');\n    return ctx.convertTo(this)._forceRed(ctx);\n  };\n\n  BN.prototype.fromRed = function fromRed () {\n    assert(this.red, 'fromRed works only with numbers in reduction context');\n    return this.red.convertFrom(this);\n  };\n\n  BN.prototype._forceRed = function _forceRed (ctx) {\n    this.red = ctx;\n    return this;\n  };\n\n  BN.prototype.forceRed = function forceRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    return this._forceRed(ctx);\n  };\n\n  BN.prototype.redAdd = function redAdd (num) {\n    assert(this.red, 'redAdd works only with red numbers');\n    return this.red.add(this, num);\n  };\n\n  BN.prototype.redIAdd = function redIAdd (num) {\n    assert(this.red, 'redIAdd works only with red numbers');\n    return this.red.iadd(this, num);\n  };\n\n  BN.prototype.redSub = function redSub (num) {\n    assert(this.red, 'redSub works only with red numbers');\n    return this.red.sub(this, num);\n  };\n\n  BN.prototype.redISub = function redISub (num) {\n    assert(this.red, 'redISub works only with red numbers');\n    return this.red.isub(this, num);\n  };\n\n  BN.prototype.redShl = function redShl (num) {\n    assert(this.red, 'redShl works only with red numbers');\n    return this.red.shl(this, num);\n  };\n\n  BN.prototype.redMul = function redMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.mul(this, num);\n  };\n\n  BN.prototype.redIMul = function redIMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.imul(this, num);\n  };\n\n  BN.prototype.redSqr = function redSqr () {\n    assert(this.red, 'redSqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqr(this);\n  };\n\n  BN.prototype.redISqr = function redISqr () {\n    assert(this.red, 'redISqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.isqr(this);\n  };\n\n  // Square root over p\n  BN.prototype.redSqrt = function redSqrt () {\n    assert(this.red, 'redSqrt works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqrt(this);\n  };\n\n  BN.prototype.redInvm = function redInvm () {\n    assert(this.red, 'redInvm works only with red numbers');\n    this.red._verify1(this);\n    return this.red.invm(this);\n  };\n\n  // Return negative clone of `this` % `red modulo`\n  BN.prototype.redNeg = function redNeg () {\n    assert(this.red, 'redNeg works only with red numbers');\n    this.red._verify1(this);\n    return this.red.neg(this);\n  };\n\n  BN.prototype.redPow = function redPow (num) {\n    assert(this.red && !num.red, 'redPow(normalNum)');\n    this.red._verify1(this);\n    return this.red.pow(this, num);\n  };\n\n  // Prime numbers with efficient reduction\n  var primes = {\n    k256: null,\n    p224: null,\n    p192: null,\n    p25519: null\n  };\n\n  // Pseudo-Mersenne prime\n  function MPrime (name, p) {\n    // P = 2 ^ N - K\n    this.name = name;\n    this.p = new BN(p, 16);\n    this.n = this.p.bitLength();\n    this.k = new BN(1).iushln(this.n).isub(this.p);\n\n    this.tmp = this._tmp();\n  }\n\n  MPrime.prototype._tmp = function _tmp () {\n    var tmp = new BN(null);\n    tmp.words = new Array(Math.ceil(this.n / 13));\n    return tmp;\n  };\n\n  MPrime.prototype.ireduce = function ireduce (num) {\n    // Assumes that `num` is less than `P^2`\n    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)\n    var r = num;\n    var rlen;\n\n    do {\n      this.split(r, this.tmp);\n      r = this.imulK(r);\n      r = r.iadd(this.tmp);\n      rlen = r.bitLength();\n    } while (rlen > this.n);\n\n    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);\n    if (cmp === 0) {\n      r.words[0] = 0;\n      r.length = 1;\n    } else if (cmp > 0) {\n      r.isub(this.p);\n    } else {\n      r._strip();\n    }\n\n    return r;\n  };\n\n  MPrime.prototype.split = function split (input, out) {\n    input.iushrn(this.n, 0, out);\n  };\n\n  MPrime.prototype.imulK = function imulK (num) {\n    return num.imul(this.k);\n  };\n\n  function K256 () {\n    MPrime.call(\n      this,\n      'k256',\n      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');\n  }\n  inherits(K256, MPrime);\n\n  K256.prototype.split = function split (input, output) {\n    // 256 = 9 * 26 + 22\n    var mask = 0x3fffff;\n\n    var outLen = Math.min(input.length, 9);\n    for (var i = 0; i < outLen; i++) {\n      output.words[i] = input.words[i];\n    }\n    output.length = outLen;\n\n    if (input.length <= 9) {\n      input.words[0] = 0;\n      input.length = 1;\n      return;\n    }\n\n    // Shift by 9 limbs\n    var prev = input.words[9];\n    output.words[output.length++] = prev & mask;\n\n    for (i = 10; i < input.length; i++) {\n      var next = input.words[i] | 0;\n      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);\n      prev = next;\n    }\n    prev >>>= 22;\n    input.words[i - 10] = prev;\n    if (prev === 0 && input.length > 10) {\n      input.length -= 10;\n    } else {\n      input.length -= 9;\n    }\n  };\n\n  K256.prototype.imulK = function imulK (num) {\n    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]\n    num.words[num.length] = 0;\n    num.words[num.length + 1] = 0;\n    num.length += 2;\n\n    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390\n    var lo = 0;\n    for (var i = 0; i < num.length; i++) {\n      var w = num.words[i] | 0;\n      lo += w * 0x3d1;\n      num.words[i] = lo & 0x3ffffff;\n      lo = w * 0x40 + ((lo / 0x4000000) | 0);\n    }\n\n    // Fast length reduction\n    if (num.words[num.length - 1] === 0) {\n      num.length--;\n      if (num.words[num.length - 1] === 0) {\n        num.length--;\n      }\n    }\n    return num;\n  };\n\n  function P224 () {\n    MPrime.call(\n      this,\n      'p224',\n      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');\n  }\n  inherits(P224, MPrime);\n\n  function P192 () {\n    MPrime.call(\n      this,\n      'p192',\n      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');\n  }\n  inherits(P192, MPrime);\n\n  function P25519 () {\n    // 2 ^ 255 - 19\n    MPrime.call(\n      this,\n      '25519',\n      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');\n  }\n  inherits(P25519, MPrime);\n\n  P25519.prototype.imulK = function imulK (num) {\n    // K = 0x13\n    var carry = 0;\n    for (var i = 0; i < num.length; i++) {\n      var hi = (num.words[i] | 0) * 0x13 + carry;\n      var lo = hi & 0x3ffffff;\n      hi >>>= 26;\n\n      num.words[i] = lo;\n      carry = hi;\n    }\n    if (carry !== 0) {\n      num.words[num.length++] = carry;\n    }\n    return num;\n  };\n\n  // Exported mostly for testing purposes, use plain name instead\n  BN._prime = function prime (name) {\n    // Cached version of prime\n    if (primes[name]) return primes[name];\n\n    var prime;\n    if (name === 'k256') {\n      prime = new K256();\n    } else if (name === 'p224') {\n      prime = new P224();\n    } else if (name === 'p192') {\n      prime = new P192();\n    } else if (name === 'p25519') {\n      prime = new P25519();\n    } else {\n      throw new Error('Unknown prime ' + name);\n    }\n    primes[name] = prime;\n\n    return prime;\n  };\n\n  //\n  // Base reduction engine\n  //\n  function Red (m) {\n    if (typeof m === 'string') {\n      var prime = BN._prime(m);\n      this.m = prime.p;\n      this.prime = prime;\n    } else {\n      assert(m.gtn(1), 'modulus must be greater than 1');\n      this.m = m;\n      this.prime = null;\n    }\n  }\n\n  Red.prototype._verify1 = function _verify1 (a) {\n    assert(a.negative === 0, 'red works only with positives');\n    assert(a.red, 'red works only with red numbers');\n  };\n\n  Red.prototype._verify2 = function _verify2 (a, b) {\n    assert((a.negative | b.negative) === 0, 'red works only with positives');\n    assert(a.red && a.red === b.red,\n      'red works only with red numbers');\n  };\n\n  Red.prototype.imod = function imod (a) {\n    if (this.prime) return this.prime.ireduce(a)._forceRed(this);\n\n    move(a, a.umod(this.m)._forceRed(this));\n    return a;\n  };\n\n  Red.prototype.neg = function neg (a) {\n    if (a.isZero()) {\n      return a.clone();\n    }\n\n    return this.m.sub(a)._forceRed(this);\n  };\n\n  Red.prototype.add = function add (a, b) {\n    this._verify2(a, b);\n\n    var res = a.add(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.iadd = function iadd (a, b) {\n    this._verify2(a, b);\n\n    var res = a.iadd(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.sub = function sub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.sub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.isub = function isub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.isub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.shl = function shl (a, num) {\n    this._verify1(a);\n    return this.imod(a.ushln(num));\n  };\n\n  Red.prototype.imul = function imul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.imul(b));\n  };\n\n  Red.prototype.mul = function mul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.mul(b));\n  };\n\n  Red.prototype.isqr = function isqr (a) {\n    return this.imul(a, a.clone());\n  };\n\n  Red.prototype.sqr = function sqr (a) {\n    return this.mul(a, a);\n  };\n\n  Red.prototype.sqrt = function sqrt (a) {\n    if (a.isZero()) return a.clone();\n\n    var mod3 = this.m.andln(3);\n    assert(mod3 % 2 === 1);\n\n    // Fast case\n    if (mod3 === 3) {\n      var pow = this.m.add(new BN(1)).iushrn(2);\n      return this.pow(a, pow);\n    }\n\n    // Tonelli-Shanks algorithm (Totally unoptimized and slow)\n    //\n    // Find Q and S, that Q * 2 ^ S = (P - 1)\n    var q = this.m.subn(1);\n    var s = 0;\n    while (!q.isZero() && q.andln(1) === 0) {\n      s++;\n      q.iushrn(1);\n    }\n    assert(!q.isZero());\n\n    var one = new BN(1).toRed(this);\n    var nOne = one.redNeg();\n\n    // Find quadratic non-residue\n    // NOTE: Max is such because of generalized Riemann hypothesis.\n    var lpow = this.m.subn(1).iushrn(1);\n    var z = this.m.bitLength();\n    z = new BN(2 * z * z).toRed(this);\n\n    while (this.pow(z, lpow).cmp(nOne) !== 0) {\n      z.redIAdd(nOne);\n    }\n\n    var c = this.pow(z, q);\n    var r = this.pow(a, q.addn(1).iushrn(1));\n    var t = this.pow(a, q);\n    var m = s;\n    while (t.cmp(one) !== 0) {\n      var tmp = t;\n      for (var i = 0; tmp.cmp(one) !== 0; i++) {\n        tmp = tmp.redSqr();\n      }\n      assert(i < m);\n      var b = this.pow(c, new BN(1).iushln(m - i - 1));\n\n      r = r.redMul(b);\n      c = b.redSqr();\n      t = t.redMul(c);\n      m = i;\n    }\n\n    return r;\n  };\n\n  Red.prototype.invm = function invm (a) {\n    var inv = a._invmp(this.m);\n    if (inv.negative !== 0) {\n      inv.negative = 0;\n      return this.imod(inv).redNeg();\n    } else {\n      return this.imod(inv);\n    }\n  };\n\n  Red.prototype.pow = function pow (a, num) {\n    if (num.isZero()) return new BN(1).toRed(this);\n    if (num.cmpn(1) === 0) return a.clone();\n\n    var windowSize = 4;\n    var wnd = new Array(1 << windowSize);\n    wnd[0] = new BN(1).toRed(this);\n    wnd[1] = a;\n    for (var i = 2; i < wnd.length; i++) {\n      wnd[i] = this.mul(wnd[i - 1], a);\n    }\n\n    var res = wnd[0];\n    var current = 0;\n    var currentLen = 0;\n    var start = num.bitLength() % 26;\n    if (start === 0) {\n      start = 26;\n    }\n\n    for (i = num.length - 1; i >= 0; i--) {\n      var word = num.words[i];\n      for (var j = start - 1; j >= 0; j--) {\n        var bit = (word >> j) & 1;\n        if (res !== wnd[0]) {\n          res = this.sqr(res);\n        }\n\n        if (bit === 0 && current === 0) {\n          currentLen = 0;\n          continue;\n        }\n\n        current <<= 1;\n        current |= bit;\n        currentLen++;\n        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;\n\n        res = this.mul(res, wnd[current]);\n        currentLen = 0;\n        current = 0;\n      }\n      start = 26;\n    }\n\n    return res;\n  };\n\n  Red.prototype.convertTo = function convertTo (num) {\n    var r = num.umod(this.m);\n\n    return r === num ? r.clone() : r;\n  };\n\n  Red.prototype.convertFrom = function convertFrom (num) {\n    var res = num.clone();\n    res.red = null;\n    return res;\n  };\n\n  //\n  // Montgomery method engine\n  //\n\n  BN.mont = function mont (num) {\n    return new Mont(num);\n  };\n\n  function Mont (m) {\n    Red.call(this, m);\n\n    this.shift = this.m.bitLength();\n    if (this.shift % 26 !== 0) {\n      this.shift += 26 - (this.shift % 26);\n    }\n\n    this.r = new BN(1).iushln(this.shift);\n    this.r2 = this.imod(this.r.sqr());\n    this.rinv = this.r._invmp(this.m);\n\n    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);\n    this.minv = this.minv.umod(this.r);\n    this.minv = this.r.sub(this.minv);\n  }\n  inherits(Mont, Red);\n\n  Mont.prototype.convertTo = function convertTo (num) {\n    return this.imod(num.ushln(this.shift));\n  };\n\n  Mont.prototype.convertFrom = function convertFrom (num) {\n    var r = this.imod(num.mul(this.rinv));\n    r.red = null;\n    return r;\n  };\n\n  Mont.prototype.imul = function imul (a, b) {\n    if (a.isZero() || b.isZero()) {\n      a.words[0] = 0;\n      a.length = 1;\n      return a;\n    }\n\n    var t = a.imul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.mul = function mul (a, b) {\n    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);\n\n    var t = a.mul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.invm = function invm (a) {\n    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R\n    var res = this.imod(a._invmp(this.m).mul(this.r2));\n    return res._forceRed(this);\n  };\n})(typeof module === 'undefined' || module, this);\n","'use strict';\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n\nvar codes = {};\n\nfunction createErrorType(code, message, Base) {\n  if (!Base) {\n    Base = Error;\n  }\n\n  function getMessage(arg1, arg2, arg3) {\n    if (typeof message === 'string') {\n      return message;\n    } else {\n      return message(arg1, arg2, arg3);\n    }\n  }\n\n  var NodeError =\n  /*#__PURE__*/\n  function (_Base) {\n    _inheritsLoose(NodeError, _Base);\n\n    function NodeError(arg1, arg2, arg3) {\n      return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;\n    }\n\n    return NodeError;\n  }(Base);\n\n  NodeError.prototype.name = Base.name;\n  NodeError.prototype.code = code;\n  codes[code] = NodeError;\n} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js\n\n\nfunction oneOf(expected, thing) {\n  if (Array.isArray(expected)) {\n    var len = expected.length;\n    expected = expected.map(function (i) {\n      return String(i);\n    });\n\n    if (len > 2) {\n      return \"one of \".concat(thing, \" \").concat(expected.slice(0, len - 1).join(', '), \", or \") + expected[len - 1];\n    } else if (len === 2) {\n      return \"one of \".concat(thing, \" \").concat(expected[0], \" or \").concat(expected[1]);\n    } else {\n      return \"of \".concat(thing, \" \").concat(expected[0]);\n    }\n  } else {\n    return \"of \".concat(thing, \" \").concat(String(expected));\n  }\n} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith\n\n\nfunction startsWith(str, search, pos) {\n  return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;\n} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith\n\n\nfunction endsWith(str, search, this_len) {\n  if (this_len === undefined || this_len > str.length) {\n    this_len = str.length;\n  }\n\n  return str.substring(this_len - search.length, this_len) === search;\n} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes\n\n\nfunction includes(str, search, start) {\n  if (typeof start !== 'number') {\n    start = 0;\n  }\n\n  if (start + search.length > str.length) {\n    return false;\n  } else {\n    return str.indexOf(search, start) !== -1;\n  }\n}\n\ncreateErrorType('ERR_INVALID_OPT_VALUE', function (name, value) {\n  return 'The value \"' + value + '\" is invalid for option \"' + name + '\"';\n}, TypeError);\ncreateErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {\n  // determiner: 'must be' or 'must not be'\n  var determiner;\n\n  if (typeof expected === 'string' && startsWith(expected, 'not ')) {\n    determiner = 'must not be';\n    expected = expected.replace(/^not /, '');\n  } else {\n    determiner = 'must be';\n  }\n\n  var msg;\n\n  if (endsWith(name, ' argument')) {\n    // For cases like 'first argument'\n    msg = \"The \".concat(name, \" \").concat(determiner, \" \").concat(oneOf(expected, 'type'));\n  } else {\n    var type = includes(name, '.') ? 'property' : 'argument';\n    msg = \"The \\\"\".concat(name, \"\\\" \").concat(type, \" \").concat(determiner, \" \").concat(oneOf(expected, 'type'));\n  }\n\n  msg += \". Received type \".concat(typeof actual);\n  return msg;\n}, TypeError);\ncreateErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');\ncreateErrorType('ERR_METHOD_NOT_IMPLEMENTED', function (name) {\n  return 'The ' + name + ' method is not implemented';\n});\ncreateErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');\ncreateErrorType('ERR_STREAM_DESTROYED', function (name) {\n  return 'Cannot call ' + name + ' after a stream was destroyed';\n});\ncreateErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');\ncreateErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');\ncreateErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');\ncreateErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);\ncreateErrorType('ERR_UNKNOWN_ENCODING', function (arg) {\n  return 'Unknown encoding: ' + arg;\n}, TypeError);\ncreateErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');\nmodule.exports.codes = codes;\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n// a duplex stream is just a stream that is both readable and writable.\n// Since JS doesn't have multiple prototypal inheritance, this class\n// prototypally inherits from Readable, and then parasitically from\n// Writable.\n'use strict';\n/*<replacement>*/\n\nvar objectKeys = Object.keys || function (obj) {\n  var keys = [];\n\n  for (var key in obj) {\n    keys.push(key);\n  }\n\n  return keys;\n};\n/*</replacement>*/\n\n\nmodule.exports = Duplex;\n\nvar Readable = require('./_stream_readable');\n\nvar Writable = require('./_stream_writable');\n\nrequire('inherits')(Duplex, Readable);\n\n{\n  // Allow the keys array to be GC'ed.\n  var keys = objectKeys(Writable.prototype);\n\n  for (var v = 0; v < keys.length; v++) {\n    var method = keys[v];\n    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];\n  }\n}\n\nfunction Duplex(options) {\n  if (!(this instanceof Duplex)) return new Duplex(options);\n  Readable.call(this, options);\n  Writable.call(this, options);\n  this.allowHalfOpen = true;\n\n  if (options) {\n    if (options.readable === false) this.readable = false;\n    if (options.writable === false) this.writable = false;\n\n    if (options.allowHalfOpen === false) {\n      this.allowHalfOpen = false;\n      this.once('end', onend);\n    }\n  }\n}\n\nObject.defineProperty(Duplex.prototype, 'writableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState.highWaterMark;\n  }\n});\nObject.defineProperty(Duplex.prototype, 'writableBuffer', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState && this._writableState.getBuffer();\n  }\n});\nObject.defineProperty(Duplex.prototype, 'writableLength', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState.length;\n  }\n}); // the no-half-open enforcer\n\nfunction onend() {\n  // If the writable side ended, then we're ok.\n  if (this._writableState.ended) return; // no more data can be written.\n  // But allow more writes to happen in this tick.\n\n  process.nextTick(onEndNT, this);\n}\n\nfunction onEndNT(self) {\n  self.end();\n}\n\nObject.defineProperty(Duplex.prototype, 'destroyed', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    if (this._readableState === undefined || this._writableState === undefined) {\n      return false;\n    }\n\n    return this._readableState.destroyed && this._writableState.destroyed;\n  },\n  set: function set(value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (this._readableState === undefined || this._writableState === undefined) {\n      return;\n    } // backward compatibility, the user is explicitly\n    // managing destroyed\n\n\n    this._readableState.destroyed = value;\n    this._writableState.destroyed = value;\n  }\n});","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n// a passthrough stream.\n// basically just the most minimal sort of Transform stream.\n// Every written chunk gets output as-is.\n'use strict';\n\nmodule.exports = PassThrough;\n\nvar Transform = require('./_stream_transform');\n\nrequire('inherits')(PassThrough, Transform);\n\nfunction PassThrough(options) {\n  if (!(this instanceof PassThrough)) return new PassThrough(options);\n  Transform.call(this, options);\n}\n\nPassThrough.prototype._transform = function (chunk, encoding, cb) {\n  cb(null, chunk);\n};","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n'use strict';\n\nmodule.exports = Readable;\n/*<replacement>*/\n\nvar Duplex;\n/*</replacement>*/\n\nReadable.ReadableState = ReadableState;\n/*<replacement>*/\n\nvar EE = require('events').EventEmitter;\n\nvar EElistenerCount = function EElistenerCount(emitter, type) {\n  return emitter.listeners(type).length;\n};\n/*</replacement>*/\n\n/*<replacement>*/\n\n\nvar Stream = require('./internal/streams/stream');\n/*</replacement>*/\n\n\nvar Buffer = require('buffer').Buffer;\n\nvar OurUint8Array = global.Uint8Array || function () {};\n\nfunction _uint8ArrayToBuffer(chunk) {\n  return Buffer.from(chunk);\n}\n\nfunction _isUint8Array(obj) {\n  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\n}\n/*<replacement>*/\n\n\nvar debugUtil = require('util');\n\nvar debug;\n\nif (debugUtil && debugUtil.debuglog) {\n  debug = debugUtil.debuglog('stream');\n} else {\n  debug = function debug() {};\n}\n/*</replacement>*/\n\n\nvar BufferList = require('./internal/streams/buffer_list');\n\nvar destroyImpl = require('./internal/streams/destroy');\n\nvar _require = require('./internal/streams/state'),\n    getHighWaterMark = _require.getHighWaterMark;\n\nvar _require$codes = require('../errors').codes,\n    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,\n    ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF,\n    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,\n    ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT; // Lazy loaded to improve the startup performance.\n\n\nvar StringDecoder;\nvar createReadableStreamAsyncIterator;\nvar from;\n\nrequire('inherits')(Readable, Stream);\n\nvar errorOrDestroy = destroyImpl.errorOrDestroy;\nvar kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];\n\nfunction prependListener(emitter, event, fn) {\n  // Sadly this is not cacheable as some libraries bundle their own\n  // event emitter implementation with them.\n  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any\n  // userland ones.  NEVER DO THIS. This is here only because this code needs\n  // to continue to work with older versions of Node.js that do not include\n  // the prependListener() method. The goal is to eventually remove this hack.\n\n  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];\n}\n\nfunction ReadableState(options, stream, isDuplex) {\n  Duplex = Duplex || require('./_stream_duplex');\n  options = options || {}; // Duplex streams are both readable and writable, but share\n  // the same options object.\n  // However, some cases require setting options to different\n  // values for the readable and the writable sides of the duplex stream.\n  // These options can be provided separately as readableXXX and writableXXX.\n\n  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag. Used to make read(n) ignore n and to\n  // make all the buffer merging and length checks go away\n\n  this.objectMode = !!options.objectMode;\n  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer\n  // Note: 0 is a valid value, means \"don't call _read preemptively ever\"\n\n  this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex); // A linked list is used to store data chunks instead of an array because the\n  // linked list can remove elements from the beginning faster than\n  // array.shift()\n\n  this.buffer = new BufferList();\n  this.length = 0;\n  this.pipes = null;\n  this.pipesCount = 0;\n  this.flowing = null;\n  this.ended = false;\n  this.endEmitted = false;\n  this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted\n  // immediately, or on a later tick.  We set this to true at first, because\n  // any actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first read call.\n\n  this.sync = true; // whenever we return null, then we set a flag to say\n  // that we're awaiting a 'readable' event emission.\n\n  this.needReadable = false;\n  this.emittedReadable = false;\n  this.readableListening = false;\n  this.resumeScheduled = false;\n  this.paused = true; // Should close be emitted on destroy. Defaults to true.\n\n  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'end' (and potentially 'finish')\n\n  this.autoDestroy = !!options.autoDestroy; // has it been destroyed\n\n  this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n\n  this.defaultEncoding = options.defaultEncoding || 'utf8'; // the number of writers that are awaiting a drain event in .pipe()s\n\n  this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled\n\n  this.readingMore = false;\n  this.decoder = null;\n  this.encoding = null;\n\n  if (options.encoding) {\n    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n    this.decoder = new StringDecoder(options.encoding);\n    this.encoding = options.encoding;\n  }\n}\n\nfunction Readable(options) {\n  Duplex = Duplex || require('./_stream_duplex');\n  if (!(this instanceof Readable)) return new Readable(options); // Checking for a Stream.Duplex instance is faster here instead of inside\n  // the ReadableState constructor, at least with V8 6.5\n\n  var isDuplex = this instanceof Duplex;\n  this._readableState = new ReadableState(options, this, isDuplex); // legacy\n\n  this.readable = true;\n\n  if (options) {\n    if (typeof options.read === 'function') this._read = options.read;\n    if (typeof options.destroy === 'function') this._destroy = options.destroy;\n  }\n\n  Stream.call(this);\n}\n\nObject.defineProperty(Readable.prototype, 'destroyed', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    if (this._readableState === undefined) {\n      return false;\n    }\n\n    return this._readableState.destroyed;\n  },\n  set: function set(value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (!this._readableState) {\n      return;\n    } // backward compatibility, the user is explicitly\n    // managing destroyed\n\n\n    this._readableState.destroyed = value;\n  }\n});\nReadable.prototype.destroy = destroyImpl.destroy;\nReadable.prototype._undestroy = destroyImpl.undestroy;\n\nReadable.prototype._destroy = function (err, cb) {\n  cb(err);\n}; // Manually shove something into the read() buffer.\n// This returns true if the highWaterMark has not been hit yet,\n// similar to how Writable.write() returns true if you should\n// write() some more.\n\n\nReadable.prototype.push = function (chunk, encoding) {\n  var state = this._readableState;\n  var skipChunkCheck;\n\n  if (!state.objectMode) {\n    if (typeof chunk === 'string') {\n      encoding = encoding || state.defaultEncoding;\n\n      if (encoding !== state.encoding) {\n        chunk = Buffer.from(chunk, encoding);\n        encoding = '';\n      }\n\n      skipChunkCheck = true;\n    }\n  } else {\n    skipChunkCheck = true;\n  }\n\n  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);\n}; // Unshift should *always* be something directly out of read()\n\n\nReadable.prototype.unshift = function (chunk) {\n  return readableAddChunk(this, chunk, null, true, false);\n};\n\nfunction readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {\n  debug('readableAddChunk', chunk);\n  var state = stream._readableState;\n\n  if (chunk === null) {\n    state.reading = false;\n    onEofChunk(stream, state);\n  } else {\n    var er;\n    if (!skipChunkCheck) er = chunkInvalid(state, chunk);\n\n    if (er) {\n      errorOrDestroy(stream, er);\n    } else if (state.objectMode || chunk && chunk.length > 0) {\n      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {\n        chunk = _uint8ArrayToBuffer(chunk);\n      }\n\n      if (addToFront) {\n        if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());else addChunk(stream, state, chunk, true);\n      } else if (state.ended) {\n        errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());\n      } else if (state.destroyed) {\n        return false;\n      } else {\n        state.reading = false;\n\n        if (state.decoder && !encoding) {\n          chunk = state.decoder.write(chunk);\n          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);\n        } else {\n          addChunk(stream, state, chunk, false);\n        }\n      }\n    } else if (!addToFront) {\n      state.reading = false;\n      maybeReadMore(stream, state);\n    }\n  } // We can push more data if we are below the highWaterMark.\n  // Also, if we have no data yet, we can stand some more bytes.\n  // This is to work around cases where hwm=0, such as the repl.\n\n\n  return !state.ended && (state.length < state.highWaterMark || state.length === 0);\n}\n\nfunction addChunk(stream, state, chunk, addToFront) {\n  if (state.flowing && state.length === 0 && !state.sync) {\n    state.awaitDrain = 0;\n    stream.emit('data', chunk);\n  } else {\n    // update the buffer info.\n    state.length += state.objectMode ? 1 : chunk.length;\n    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);\n    if (state.needReadable) emitReadable(stream);\n  }\n\n  maybeReadMore(stream, state);\n}\n\nfunction chunkInvalid(state, chunk) {\n  var er;\n\n  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {\n    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk);\n  }\n\n  return er;\n}\n\nReadable.prototype.isPaused = function () {\n  return this._readableState.flowing === false;\n}; // backwards compatibility.\n\n\nReadable.prototype.setEncoding = function (enc) {\n  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n  var decoder = new StringDecoder(enc);\n  this._readableState.decoder = decoder; // If setEncoding(null), decoder.encoding equals utf8\n\n  this._readableState.encoding = this._readableState.decoder.encoding; // Iterate over current buffer to convert already stored Buffers:\n\n  var p = this._readableState.buffer.head;\n  var content = '';\n\n  while (p !== null) {\n    content += decoder.write(p.data);\n    p = p.next;\n  }\n\n  this._readableState.buffer.clear();\n\n  if (content !== '') this._readableState.buffer.push(content);\n  this._readableState.length = content.length;\n  return this;\n}; // Don't raise the hwm > 1GB\n\n\nvar MAX_HWM = 0x40000000;\n\nfunction computeNewHighWaterMark(n) {\n  if (n >= MAX_HWM) {\n    // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.\n    n = MAX_HWM;\n  } else {\n    // Get the next highest power of 2 to prevent increasing hwm excessively in\n    // tiny amounts\n    n--;\n    n |= n >>> 1;\n    n |= n >>> 2;\n    n |= n >>> 4;\n    n |= n >>> 8;\n    n |= n >>> 16;\n    n++;\n  }\n\n  return n;\n} // This function is designed to be inlinable, so please take care when making\n// changes to the function body.\n\n\nfunction howMuchToRead(n, state) {\n  if (n <= 0 || state.length === 0 && state.ended) return 0;\n  if (state.objectMode) return 1;\n\n  if (n !== n) {\n    // Only flow one buffer at a time\n    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;\n  } // If we're asking for more than the current hwm, then raise the hwm.\n\n\n  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);\n  if (n <= state.length) return n; // Don't have enough\n\n  if (!state.ended) {\n    state.needReadable = true;\n    return 0;\n  }\n\n  return state.length;\n} // you can override either this method, or the async _read(n) below.\n\n\nReadable.prototype.read = function (n) {\n  debug('read', n);\n  n = parseInt(n, 10);\n  var state = this._readableState;\n  var nOrig = n;\n  if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we\n  // already have a bunch of data in the buffer, then just trigger\n  // the 'readable' event and move on.\n\n  if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {\n    debug('read: emitReadable', state.length, state.ended);\n    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);\n    return null;\n  }\n\n  n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.\n\n  if (n === 0 && state.ended) {\n    if (state.length === 0) endReadable(this);\n    return null;\n  } // All the actual chunk generation logic needs to be\n  // *below* the call to _read.  The reason is that in certain\n  // synthetic stream cases, such as passthrough streams, _read\n  // may be a completely synchronous operation which may change\n  // the state of the read buffer, providing enough data when\n  // before there was *not* enough.\n  //\n  // So, the steps are:\n  // 1. Figure out what the state of things will be after we do\n  // a read from the buffer.\n  //\n  // 2. If that resulting state will trigger a _read, then call _read.\n  // Note that this may be asynchronous, or synchronous.  Yes, it is\n  // deeply ugly to write APIs this way, but that still doesn't mean\n  // that the Readable class should behave improperly, as streams are\n  // designed to be sync/async agnostic.\n  // Take note if the _read call is sync or async (ie, if the read call\n  // has returned yet), so that we know whether or not it's safe to emit\n  // 'readable' etc.\n  //\n  // 3. Actually pull the requested chunks out of the buffer and return.\n  // if we need a readable event, then we need to do some reading.\n\n\n  var doRead = state.needReadable;\n  debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some\n\n  if (state.length === 0 || state.length - n < state.highWaterMark) {\n    doRead = true;\n    debug('length less than watermark', doRead);\n  } // however, if we've ended, then there's no point, and if we're already\n  // reading, then it's unnecessary.\n\n\n  if (state.ended || state.reading) {\n    doRead = false;\n    debug('reading or ended', doRead);\n  } else if (doRead) {\n    debug('do read');\n    state.reading = true;\n    state.sync = true; // if the length is currently zero, then we *need* a readable event.\n\n    if (state.length === 0) state.needReadable = true; // call internal read method\n\n    this._read(state.highWaterMark);\n\n    state.sync = false; // If _read pushed data synchronously, then `reading` will be false,\n    // and we need to re-evaluate how much data we can return to the user.\n\n    if (!state.reading) n = howMuchToRead(nOrig, state);\n  }\n\n  var ret;\n  if (n > 0) ret = fromList(n, state);else ret = null;\n\n  if (ret === null) {\n    state.needReadable = state.length <= state.highWaterMark;\n    n = 0;\n  } else {\n    state.length -= n;\n    state.awaitDrain = 0;\n  }\n\n  if (state.length === 0) {\n    // If we have nothing in the buffer, then we want to know\n    // as soon as we *do* get something into the buffer.\n    if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.\n\n    if (nOrig !== n && state.ended) endReadable(this);\n  }\n\n  if (ret !== null) this.emit('data', ret);\n  return ret;\n};\n\nfunction onEofChunk(stream, state) {\n  debug('onEofChunk');\n  if (state.ended) return;\n\n  if (state.decoder) {\n    var chunk = state.decoder.end();\n\n    if (chunk && chunk.length) {\n      state.buffer.push(chunk);\n      state.length += state.objectMode ? 1 : chunk.length;\n    }\n  }\n\n  state.ended = true;\n\n  if (state.sync) {\n    // if we are sync, wait until next tick to emit the data.\n    // Otherwise we risk emitting data in the flow()\n    // the readable code triggers during a read() call\n    emitReadable(stream);\n  } else {\n    // emit 'readable' now to make sure it gets picked up.\n    state.needReadable = false;\n\n    if (!state.emittedReadable) {\n      state.emittedReadable = true;\n      emitReadable_(stream);\n    }\n  }\n} // Don't emit readable right away in sync mode, because this can trigger\n// another read() call => stack overflow.  This way, it might trigger\n// a nextTick recursion warning, but that's not so bad.\n\n\nfunction emitReadable(stream) {\n  var state = stream._readableState;\n  debug('emitReadable', state.needReadable, state.emittedReadable);\n  state.needReadable = false;\n\n  if (!state.emittedReadable) {\n    debug('emitReadable', state.flowing);\n    state.emittedReadable = true;\n    process.nextTick(emitReadable_, stream);\n  }\n}\n\nfunction emitReadable_(stream) {\n  var state = stream._readableState;\n  debug('emitReadable_', state.destroyed, state.length, state.ended);\n\n  if (!state.destroyed && (state.length || state.ended)) {\n    stream.emit('readable');\n    state.emittedReadable = false;\n  } // The stream needs another readable event if\n  // 1. It is not flowing, as the flow mechanism will take\n  //    care of it.\n  // 2. It is not ended.\n  // 3. It is below the highWaterMark, so we can schedule\n  //    another readable later.\n\n\n  state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;\n  flow(stream);\n} // at this point, the user has presumably seen the 'readable' event,\n// and called read() to consume some data.  that may have triggered\n// in turn another _read(n) call, in which case reading = true if\n// it's in progress.\n// However, if we're not ended, or reading, and the length < hwm,\n// then go ahead and try to read some more preemptively.\n\n\nfunction maybeReadMore(stream, state) {\n  if (!state.readingMore) {\n    state.readingMore = true;\n    process.nextTick(maybeReadMore_, stream, state);\n  }\n}\n\nfunction maybeReadMore_(stream, state) {\n  // Attempt to read more data if we should.\n  //\n  // The conditions for reading more data are (one of):\n  // - Not enough data buffered (state.length < state.highWaterMark). The loop\n  //   is responsible for filling the buffer with enough data if such data\n  //   is available. If highWaterMark is 0 and we are not in the flowing mode\n  //   we should _not_ attempt to buffer any extra data. We'll get more data\n  //   when the stream consumer calls read() instead.\n  // - No data in the buffer, and the stream is in flowing mode. In this mode\n  //   the loop below is responsible for ensuring read() is called. Failing to\n  //   call read here would abort the flow and there's no other mechanism for\n  //   continuing the flow if the stream consumer has just subscribed to the\n  //   'data' event.\n  //\n  // In addition to the above conditions to keep reading data, the following\n  // conditions prevent the data from being read:\n  // - The stream has ended (state.ended).\n  // - There is already a pending 'read' operation (state.reading). This is a\n  //   case where the the stream has called the implementation defined _read()\n  //   method, but they are processing the call asynchronously and have _not_\n  //   called push() with new data. In this case we skip performing more\n  //   read()s. The execution ends in this method again after the _read() ends\n  //   up calling push() with more data.\n  while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {\n    var len = state.length;\n    debug('maybeReadMore read 0');\n    stream.read(0);\n    if (len === state.length) // didn't get any data, stop spinning.\n      break;\n  }\n\n  state.readingMore = false;\n} // abstract method.  to be overridden in specific implementation classes.\n// call cb(er, data) where data is <= n in length.\n// for virtual (non-string, non-buffer) streams, \"length\" is somewhat\n// arbitrary, and perhaps not very meaningful.\n\n\nReadable.prototype._read = function (n) {\n  errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED('_read()'));\n};\n\nReadable.prototype.pipe = function (dest, pipeOpts) {\n  var src = this;\n  var state = this._readableState;\n\n  switch (state.pipesCount) {\n    case 0:\n      state.pipes = dest;\n      break;\n\n    case 1:\n      state.pipes = [state.pipes, dest];\n      break;\n\n    default:\n      state.pipes.push(dest);\n      break;\n  }\n\n  state.pipesCount += 1;\n  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);\n  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;\n  var endFn = doEnd ? onend : unpipe;\n  if (state.endEmitted) process.nextTick(endFn);else src.once('end', endFn);\n  dest.on('unpipe', onunpipe);\n\n  function onunpipe(readable, unpipeInfo) {\n    debug('onunpipe');\n\n    if (readable === src) {\n      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {\n        unpipeInfo.hasUnpiped = true;\n        cleanup();\n      }\n    }\n  }\n\n  function onend() {\n    debug('onend');\n    dest.end();\n  } // when the dest drains, it reduces the awaitDrain counter\n  // on the source.  This would be more elegant with a .once()\n  // handler in flow(), but adding and removing repeatedly is\n  // too slow.\n\n\n  var ondrain = pipeOnDrain(src);\n  dest.on('drain', ondrain);\n  var cleanedUp = false;\n\n  function cleanup() {\n    debug('cleanup'); // cleanup event handlers once the pipe is broken\n\n    dest.removeListener('close', onclose);\n    dest.removeListener('finish', onfinish);\n    dest.removeListener('drain', ondrain);\n    dest.removeListener('error', onerror);\n    dest.removeListener('unpipe', onunpipe);\n    src.removeListener('end', onend);\n    src.removeListener('end', unpipe);\n    src.removeListener('data', ondata);\n    cleanedUp = true; // if the reader is waiting for a drain event from this\n    // specific writer, then it would cause it to never start\n    // flowing again.\n    // So, if this is awaiting a drain, then we just call it now.\n    // If we don't know, then assume that we are waiting for one.\n\n    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();\n  }\n\n  src.on('data', ondata);\n\n  function ondata(chunk) {\n    debug('ondata');\n    var ret = dest.write(chunk);\n    debug('dest.write', ret);\n\n    if (ret === false) {\n      // If the user unpiped during `dest.write()`, it is possible\n      // to get stuck in a permanently paused state if that write\n      // also returned false.\n      // => Check whether `dest` is still a piping destination.\n      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {\n        debug('false write response, pause', state.awaitDrain);\n        state.awaitDrain++;\n      }\n\n      src.pause();\n    }\n  } // if the dest has an error, then stop piping into it.\n  // however, don't suppress the throwing behavior for this.\n\n\n  function onerror(er) {\n    debug('onerror', er);\n    unpipe();\n    dest.removeListener('error', onerror);\n    if (EElistenerCount(dest, 'error') === 0) errorOrDestroy(dest, er);\n  } // Make sure our error handler is attached before userland ones.\n\n\n  prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.\n\n  function onclose() {\n    dest.removeListener('finish', onfinish);\n    unpipe();\n  }\n\n  dest.once('close', onclose);\n\n  function onfinish() {\n    debug('onfinish');\n    dest.removeListener('close', onclose);\n    unpipe();\n  }\n\n  dest.once('finish', onfinish);\n\n  function unpipe() {\n    debug('unpipe');\n    src.unpipe(dest);\n  } // tell the dest that it's being piped to\n\n\n  dest.emit('pipe', src); // start the flow if it hasn't been started already.\n\n  if (!state.flowing) {\n    debug('pipe resume');\n    src.resume();\n  }\n\n  return dest;\n};\n\nfunction pipeOnDrain(src) {\n  return function pipeOnDrainFunctionResult() {\n    var state = src._readableState;\n    debug('pipeOnDrain', state.awaitDrain);\n    if (state.awaitDrain) state.awaitDrain--;\n\n    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {\n      state.flowing = true;\n      flow(src);\n    }\n  };\n}\n\nReadable.prototype.unpipe = function (dest) {\n  var state = this._readableState;\n  var unpipeInfo = {\n    hasUnpiped: false\n  }; // if we're not piping anywhere, then do nothing.\n\n  if (state.pipesCount === 0) return this; // just one destination.  most common case.\n\n  if (state.pipesCount === 1) {\n    // passed in one, but it's not the right one.\n    if (dest && dest !== state.pipes) return this;\n    if (!dest) dest = state.pipes; // got a match.\n\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n    if (dest) dest.emit('unpipe', this, unpipeInfo);\n    return this;\n  } // slow case. multiple pipe destinations.\n\n\n  if (!dest) {\n    // remove all.\n    var dests = state.pipes;\n    var len = state.pipesCount;\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n\n    for (var i = 0; i < len; i++) {\n      dests[i].emit('unpipe', this, {\n        hasUnpiped: false\n      });\n    }\n\n    return this;\n  } // try to find the right one.\n\n\n  var index = indexOf(state.pipes, dest);\n  if (index === -1) return this;\n  state.pipes.splice(index, 1);\n  state.pipesCount -= 1;\n  if (state.pipesCount === 1) state.pipes = state.pipes[0];\n  dest.emit('unpipe', this, unpipeInfo);\n  return this;\n}; // set up data events if they are asked for\n// Ensure readable listeners eventually get something\n\n\nReadable.prototype.on = function (ev, fn) {\n  var res = Stream.prototype.on.call(this, ev, fn);\n  var state = this._readableState;\n\n  if (ev === 'data') {\n    // update readableListening so that resume() may be a no-op\n    // a few lines down. This is needed to support once('readable').\n    state.readableListening = this.listenerCount('readable') > 0; // Try start flowing on next tick if stream isn't explicitly paused\n\n    if (state.flowing !== false) this.resume();\n  } else if (ev === 'readable') {\n    if (!state.endEmitted && !state.readableListening) {\n      state.readableListening = state.needReadable = true;\n      state.flowing = false;\n      state.emittedReadable = false;\n      debug('on readable', state.length, state.reading);\n\n      if (state.length) {\n        emitReadable(this);\n      } else if (!state.reading) {\n        process.nextTick(nReadingNextTick, this);\n      }\n    }\n  }\n\n  return res;\n};\n\nReadable.prototype.addListener = Readable.prototype.on;\n\nReadable.prototype.removeListener = function (ev, fn) {\n  var res = Stream.prototype.removeListener.call(this, ev, fn);\n\n  if (ev === 'readable') {\n    // We need to check if there is someone still listening to\n    // readable and reset the state. However this needs to happen\n    // after readable has been emitted but before I/O (nextTick) to\n    // support once('readable', fn) cycles. This means that calling\n    // resume within the same tick will have no\n    // effect.\n    process.nextTick(updateReadableListening, this);\n  }\n\n  return res;\n};\n\nReadable.prototype.removeAllListeners = function (ev) {\n  var res = Stream.prototype.removeAllListeners.apply(this, arguments);\n\n  if (ev === 'readable' || ev === undefined) {\n    // We need to check if there is someone still listening to\n    // readable and reset the state. However this needs to happen\n    // after readable has been emitted but before I/O (nextTick) to\n    // support once('readable', fn) cycles. This means that calling\n    // resume within the same tick will have no\n    // effect.\n    process.nextTick(updateReadableListening, this);\n  }\n\n  return res;\n};\n\nfunction updateReadableListening(self) {\n  var state = self._readableState;\n  state.readableListening = self.listenerCount('readable') > 0;\n\n  if (state.resumeScheduled && !state.paused) {\n    // flowing needs to be set to true now, otherwise\n    // the upcoming resume will not flow.\n    state.flowing = true; // crude way to check if we should resume\n  } else if (self.listenerCount('data') > 0) {\n    self.resume();\n  }\n}\n\nfunction nReadingNextTick(self) {\n  debug('readable nexttick read 0');\n  self.read(0);\n} // pause() and resume() are remnants of the legacy readable stream API\n// If the user uses them, then switch into old mode.\n\n\nReadable.prototype.resume = function () {\n  var state = this._readableState;\n\n  if (!state.flowing) {\n    debug('resume'); // we flow only if there is no one listening\n    // for readable, but we still have to call\n    // resume()\n\n    state.flowing = !state.readableListening;\n    resume(this, state);\n  }\n\n  state.paused = false;\n  return this;\n};\n\nfunction resume(stream, state) {\n  if (!state.resumeScheduled) {\n    state.resumeScheduled = true;\n    process.nextTick(resume_, stream, state);\n  }\n}\n\nfunction resume_(stream, state) {\n  debug('resume', state.reading);\n\n  if (!state.reading) {\n    stream.read(0);\n  }\n\n  state.resumeScheduled = false;\n  stream.emit('resume');\n  flow(stream);\n  if (state.flowing && !state.reading) stream.read(0);\n}\n\nReadable.prototype.pause = function () {\n  debug('call pause flowing=%j', this._readableState.flowing);\n\n  if (this._readableState.flowing !== false) {\n    debug('pause');\n    this._readableState.flowing = false;\n    this.emit('pause');\n  }\n\n  this._readableState.paused = true;\n  return this;\n};\n\nfunction flow(stream) {\n  var state = stream._readableState;\n  debug('flow', state.flowing);\n\n  while (state.flowing && stream.read() !== null) {\n    ;\n  }\n} // wrap an old-style stream as the async data source.\n// This is *not* part of the readable stream interface.\n// It is an ugly unfortunate mess of history.\n\n\nReadable.prototype.wrap = function (stream) {\n  var _this = this;\n\n  var state = this._readableState;\n  var paused = false;\n  stream.on('end', function () {\n    debug('wrapped end');\n\n    if (state.decoder && !state.ended) {\n      var chunk = state.decoder.end();\n      if (chunk && chunk.length) _this.push(chunk);\n    }\n\n    _this.push(null);\n  });\n  stream.on('data', function (chunk) {\n    debug('wrapped data');\n    if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode\n\n    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;\n\n    var ret = _this.push(chunk);\n\n    if (!ret) {\n      paused = true;\n      stream.pause();\n    }\n  }); // proxy all the other methods.\n  // important when wrapping filters and duplexes.\n\n  for (var i in stream) {\n    if (this[i] === undefined && typeof stream[i] === 'function') {\n      this[i] = function methodWrap(method) {\n        return function methodWrapReturnFunction() {\n          return stream[method].apply(stream, arguments);\n        };\n      }(i);\n    }\n  } // proxy certain important events.\n\n\n  for (var n = 0; n < kProxyEvents.length; n++) {\n    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));\n  } // when we try to consume some more bytes, simply unpause the\n  // underlying stream.\n\n\n  this._read = function (n) {\n    debug('wrapped _read', n);\n\n    if (paused) {\n      paused = false;\n      stream.resume();\n    }\n  };\n\n  return this;\n};\n\nif (typeof Symbol === 'function') {\n  Readable.prototype[Symbol.asyncIterator] = function () {\n    if (createReadableStreamAsyncIterator === undefined) {\n      createReadableStreamAsyncIterator = require('./internal/streams/async_iterator');\n    }\n\n    return createReadableStreamAsyncIterator(this);\n  };\n}\n\nObject.defineProperty(Readable.prototype, 'readableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._readableState.highWaterMark;\n  }\n});\nObject.defineProperty(Readable.prototype, 'readableBuffer', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._readableState && this._readableState.buffer;\n  }\n});\nObject.defineProperty(Readable.prototype, 'readableFlowing', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._readableState.flowing;\n  },\n  set: function set(state) {\n    if (this._readableState) {\n      this._readableState.flowing = state;\n    }\n  }\n}); // exposed for testing purposes only.\n\nReadable._fromList = fromList;\nObject.defineProperty(Readable.prototype, 'readableLength', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._readableState.length;\n  }\n}); // Pluck off n bytes from an array of buffers.\n// Length is the combined lengths of all the buffers in the list.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\n\nfunction fromList(n, state) {\n  // nothing buffered\n  if (state.length === 0) return null;\n  var ret;\n  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {\n    // read it all, truncate the list\n    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.first();else ret = state.buffer.concat(state.length);\n    state.buffer.clear();\n  } else {\n    // read part of list\n    ret = state.buffer.consume(n, state.decoder);\n  }\n  return ret;\n}\n\nfunction endReadable(stream) {\n  var state = stream._readableState;\n  debug('endReadable', state.endEmitted);\n\n  if (!state.endEmitted) {\n    state.ended = true;\n    process.nextTick(endReadableNT, state, stream);\n  }\n}\n\nfunction endReadableNT(state, stream) {\n  debug('endReadableNT', state.endEmitted, state.length); // Check that we didn't get one last unshift.\n\n  if (!state.endEmitted && state.length === 0) {\n    state.endEmitted = true;\n    stream.readable = false;\n    stream.emit('end');\n\n    if (state.autoDestroy) {\n      // In case of duplex streams we need a way to detect\n      // if the writable side is ready for autoDestroy as well\n      var wState = stream._writableState;\n\n      if (!wState || wState.autoDestroy && wState.finished) {\n        stream.destroy();\n      }\n    }\n  }\n}\n\nif (typeof Symbol === 'function') {\n  Readable.from = function (iterable, opts) {\n    if (from === undefined) {\n      from = require('./internal/streams/from');\n    }\n\n    return from(Readable, iterable, opts);\n  };\n}\n\nfunction indexOf(xs, x) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    if (xs[i] === x) return i;\n  }\n\n  return -1;\n}","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n// a transform stream is a readable/writable stream where you do\n// something with the data.  Sometimes it's called a \"filter\",\n// but that's not a great name for it, since that implies a thing where\n// some bits pass through, and others are simply ignored.  (That would\n// be a valid example of a transform, of course.)\n//\n// While the output is causally related to the input, it's not a\n// necessarily symmetric or synchronous transformation.  For example,\n// a zlib stream might take multiple plain-text writes(), and then\n// emit a single compressed chunk some time in the future.\n//\n// Here's how this works:\n//\n// The Transform stream has all the aspects of the readable and writable\n// stream classes.  When you write(chunk), that calls _write(chunk,cb)\n// internally, and returns false if there's a lot of pending writes\n// buffered up.  When you call read(), that calls _read(n) until\n// there's enough pending readable data buffered up.\n//\n// In a transform stream, the written data is placed in a buffer.  When\n// _read(n) is called, it transforms the queued up data, calling the\n// buffered _write cb's as it consumes chunks.  If consuming a single\n// written chunk would result in multiple output chunks, then the first\n// outputted bit calls the readcb, and subsequent chunks just go into\n// the read buffer, and will cause it to emit 'readable' if necessary.\n//\n// This way, back-pressure is actually determined by the reading side,\n// since _read has to be called to start processing a new chunk.  However,\n// a pathological inflate type of transform can cause excessive buffering\n// here.  For example, imagine a stream where every byte of input is\n// interpreted as an integer from 0-255, and then results in that many\n// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in\n// 1kb of data being output.  In this case, you could write a very small\n// amount of input, and end up with a very large amount of output.  In\n// such a pathological inflating mechanism, there'd be no way to tell\n// the system to stop doing the transform.  A single 4MB write could\n// cause the system to run out of memory.\n//\n// However, even in such a pathological case, only a single written chunk\n// would be consumed, and then the rest would wait (un-transformed) until\n// the results of the previous transformed chunk were consumed.\n'use strict';\n\nmodule.exports = Transform;\n\nvar _require$codes = require('../errors').codes,\n    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,\n    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,\n    ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING,\n    ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;\n\nvar Duplex = require('./_stream_duplex');\n\nrequire('inherits')(Transform, Duplex);\n\nfunction afterTransform(er, data) {\n  var ts = this._transformState;\n  ts.transforming = false;\n  var cb = ts.writecb;\n\n  if (cb === null) {\n    return this.emit('error', new ERR_MULTIPLE_CALLBACK());\n  }\n\n  ts.writechunk = null;\n  ts.writecb = null;\n  if (data != null) // single equals check for both `null` and `undefined`\n    this.push(data);\n  cb(er);\n  var rs = this._readableState;\n  rs.reading = false;\n\n  if (rs.needReadable || rs.length < rs.highWaterMark) {\n    this._read(rs.highWaterMark);\n  }\n}\n\nfunction Transform(options) {\n  if (!(this instanceof Transform)) return new Transform(options);\n  Duplex.call(this, options);\n  this._transformState = {\n    afterTransform: afterTransform.bind(this),\n    needTransform: false,\n    transforming: false,\n    writecb: null,\n    writechunk: null,\n    writeencoding: null\n  }; // start out asking for a readable event once data is transformed.\n\n  this._readableState.needReadable = true; // we have implemented the _read method, and done the other things\n  // that Readable wants before the first _read call, so unset the\n  // sync guard flag.\n\n  this._readableState.sync = false;\n\n  if (options) {\n    if (typeof options.transform === 'function') this._transform = options.transform;\n    if (typeof options.flush === 'function') this._flush = options.flush;\n  } // When the writable side finishes, then flush out anything remaining.\n\n\n  this.on('prefinish', prefinish);\n}\n\nfunction prefinish() {\n  var _this = this;\n\n  if (typeof this._flush === 'function' && !this._readableState.destroyed) {\n    this._flush(function (er, data) {\n      done(_this, er, data);\n    });\n  } else {\n    done(this, null, null);\n  }\n}\n\nTransform.prototype.push = function (chunk, encoding) {\n  this._transformState.needTransform = false;\n  return Duplex.prototype.push.call(this, chunk, encoding);\n}; // This is the part where you do stuff!\n// override this function in implementation classes.\n// 'chunk' is an input chunk.\n//\n// Call `push(newChunk)` to pass along transformed output\n// to the readable side.  You may call 'push' zero or more times.\n//\n// Call `cb(err)` when you are done with this chunk.  If you pass\n// an error, then that'll put the hurt on the whole operation.  If you\n// never call cb(), then you'll never get another chunk.\n\n\nTransform.prototype._transform = function (chunk, encoding, cb) {\n  cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));\n};\n\nTransform.prototype._write = function (chunk, encoding, cb) {\n  var ts = this._transformState;\n  ts.writecb = cb;\n  ts.writechunk = chunk;\n  ts.writeencoding = encoding;\n\n  if (!ts.transforming) {\n    var rs = this._readableState;\n    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);\n  }\n}; // Doesn't matter what the args are here.\n// _transform does all the work.\n// That we got here means that the readable side wants more data.\n\n\nTransform.prototype._read = function (n) {\n  var ts = this._transformState;\n\n  if (ts.writechunk !== null && !ts.transforming) {\n    ts.transforming = true;\n\n    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);\n  } else {\n    // mark that we need a transform, so that any data that comes in\n    // will get processed, now that we've asked for it.\n    ts.needTransform = true;\n  }\n};\n\nTransform.prototype._destroy = function (err, cb) {\n  Duplex.prototype._destroy.call(this, err, function (err2) {\n    cb(err2);\n  });\n};\n\nfunction done(stream, er, data) {\n  if (er) return stream.emit('error', er);\n  if (data != null) // single equals check for both `null` and `undefined`\n    stream.push(data); // TODO(BridgeAR): Write a test for these two error cases\n  // if there's nothing in the write buffer, then that means\n  // that nothing more will ever be provided\n\n  if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();\n  if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();\n  return stream.push(null);\n}","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A bit simpler than readable streams.\n// Implement an async ._write(chunk, encoding, cb), and it'll handle all\n// the drain event emission and buffering.\n'use strict';\n\nmodule.exports = Writable;\n/* <replacement> */\n\nfunction WriteReq(chunk, encoding, cb) {\n  this.chunk = chunk;\n  this.encoding = encoding;\n  this.callback = cb;\n  this.next = null;\n} // It seems a linked list but it is not\n// there will be only 2 of these for each stream\n\n\nfunction CorkedRequest(state) {\n  var _this = this;\n\n  this.next = null;\n  this.entry = null;\n\n  this.finish = function () {\n    onCorkedFinish(_this, state);\n  };\n}\n/* </replacement> */\n\n/*<replacement>*/\n\n\nvar Duplex;\n/*</replacement>*/\n\nWritable.WritableState = WritableState;\n/*<replacement>*/\n\nvar internalUtil = {\n  deprecate: require('util-deprecate')\n};\n/*</replacement>*/\n\n/*<replacement>*/\n\nvar Stream = require('./internal/streams/stream');\n/*</replacement>*/\n\n\nvar Buffer = require('buffer').Buffer;\n\nvar OurUint8Array = global.Uint8Array || function () {};\n\nfunction _uint8ArrayToBuffer(chunk) {\n  return Buffer.from(chunk);\n}\n\nfunction _isUint8Array(obj) {\n  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\n}\n\nvar destroyImpl = require('./internal/streams/destroy');\n\nvar _require = require('./internal/streams/state'),\n    getHighWaterMark = _require.getHighWaterMark;\n\nvar _require$codes = require('../errors').codes,\n    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,\n    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,\n    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,\n    ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE,\n    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED,\n    ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES,\n    ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END,\n    ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;\n\nvar errorOrDestroy = destroyImpl.errorOrDestroy;\n\nrequire('inherits')(Writable, Stream);\n\nfunction nop() {}\n\nfunction WritableState(options, stream, isDuplex) {\n  Duplex = Duplex || require('./_stream_duplex');\n  options = options || {}; // Duplex streams are both readable and writable, but share\n  // the same options object.\n  // However, some cases require setting options to different\n  // values for the readable and the writable sides of the duplex stream,\n  // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.\n\n  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag to indicate whether or not this stream\n  // contains buffers or objects.\n\n  this.objectMode = !!options.objectMode;\n  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false\n  // Note: 0 is a valid value, means that we always return false if\n  // the entire buffer is not flushed immediately on write()\n\n  this.highWaterMark = getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex); // if _final has been called\n\n  this.finalCalled = false; // drain event flag.\n\n  this.needDrain = false; // at the start of calling end()\n\n  this.ending = false; // when end() has been called, and returned\n\n  this.ended = false; // when 'finish' is emitted\n\n  this.finished = false; // has it been destroyed\n\n  this.destroyed = false; // should we decode strings into buffers before passing to _write?\n  // this is here so that some node-core streams can optimize string\n  // handling at a lower level.\n\n  var noDecode = options.decodeStrings === false;\n  this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n\n  this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement\n  // of how much we're waiting to get pushed to some underlying\n  // socket or file.\n\n  this.length = 0; // a flag to see when we're in the middle of a write.\n\n  this.writing = false; // when true all writes will be buffered until .uncork() call\n\n  this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, because any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n\n  this.sync = true; // a flag to know if we're processing previously buffered items, which\n  // may call the _write() callback in the same tick, so that we don't\n  // end up in an overlapped onwrite situation.\n\n  this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)\n\n  this.onwrite = function (er) {\n    onwrite(stream, er);\n  }; // the callback that the user supplies to write(chunk,encoding,cb)\n\n\n  this.writecb = null; // the amount that is being written when _write is called.\n\n  this.writelen = 0;\n  this.bufferedRequest = null;\n  this.lastBufferedRequest = null; // number of pending user-supplied write callbacks\n  // this must be 0 before 'finish' can be emitted\n\n  this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs\n  // This is relevant for synchronous Transform streams\n\n  this.prefinished = false; // True if the error was already emitted and should not be thrown again\n\n  this.errorEmitted = false; // Should close be emitted on destroy. Defaults to true.\n\n  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'finish' (and potentially 'end')\n\n  this.autoDestroy = !!options.autoDestroy; // count buffered requests\n\n  this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always\n  // one allocated and free to use, and we maintain at most two\n\n  this.corkedRequestsFree = new CorkedRequest(this);\n}\n\nWritableState.prototype.getBuffer = function getBuffer() {\n  var current = this.bufferedRequest;\n  var out = [];\n\n  while (current) {\n    out.push(current);\n    current = current.next;\n  }\n\n  return out;\n};\n\n(function () {\n  try {\n    Object.defineProperty(WritableState.prototype, 'buffer', {\n      get: internalUtil.deprecate(function writableStateBufferGetter() {\n        return this.getBuffer();\n      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')\n    });\n  } catch (_) {}\n})(); // Test _writableState for inheritance to account for Duplex streams,\n// whose prototype chain only points to Readable.\n\n\nvar realHasInstance;\n\nif (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {\n  realHasInstance = Function.prototype[Symbol.hasInstance];\n  Object.defineProperty(Writable, Symbol.hasInstance, {\n    value: function value(object) {\n      if (realHasInstance.call(this, object)) return true;\n      if (this !== Writable) return false;\n      return object && object._writableState instanceof WritableState;\n    }\n  });\n} else {\n  realHasInstance = function realHasInstance(object) {\n    return object instanceof this;\n  };\n}\n\nfunction Writable(options) {\n  Duplex = Duplex || require('./_stream_duplex'); // Writable ctor is applied to Duplexes, too.\n  // `realHasInstance` is necessary because using plain `instanceof`\n  // would return false, as no `_writableState` property is attached.\n  // Trying to use the custom `instanceof` for Writable here will also break the\n  // Node.js LazyTransform implementation, which has a non-trivial getter for\n  // `_writableState` that would lead to infinite recursion.\n  // Checking for a Stream.Duplex instance is faster here instead of inside\n  // the WritableState constructor, at least with V8 6.5\n\n  var isDuplex = this instanceof Duplex;\n  if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);\n  this._writableState = new WritableState(options, this, isDuplex); // legacy.\n\n  this.writable = true;\n\n  if (options) {\n    if (typeof options.write === 'function') this._write = options.write;\n    if (typeof options.writev === 'function') this._writev = options.writev;\n    if (typeof options.destroy === 'function') this._destroy = options.destroy;\n    if (typeof options.final === 'function') this._final = options.final;\n  }\n\n  Stream.call(this);\n} // Otherwise people can pipe Writable streams, which is just wrong.\n\n\nWritable.prototype.pipe = function () {\n  errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());\n};\n\nfunction writeAfterEnd(stream, cb) {\n  var er = new ERR_STREAM_WRITE_AFTER_END(); // TODO: defer error events consistently everywhere, not just the cb\n\n  errorOrDestroy(stream, er);\n  process.nextTick(cb, er);\n} // Checks that a user-supplied chunk is valid, especially for the particular\n// mode the stream is in. Currently this means that `null` is never accepted\n// and undefined/non-string values are only allowed in object mode.\n\n\nfunction validChunk(stream, state, chunk, cb) {\n  var er;\n\n  if (chunk === null) {\n    er = new ERR_STREAM_NULL_VALUES();\n  } else if (typeof chunk !== 'string' && !state.objectMode) {\n    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer'], chunk);\n  }\n\n  if (er) {\n    errorOrDestroy(stream, er);\n    process.nextTick(cb, er);\n    return false;\n  }\n\n  return true;\n}\n\nWritable.prototype.write = function (chunk, encoding, cb) {\n  var state = this._writableState;\n  var ret = false;\n\n  var isBuf = !state.objectMode && _isUint8Array(chunk);\n\n  if (isBuf && !Buffer.isBuffer(chunk)) {\n    chunk = _uint8ArrayToBuffer(chunk);\n  }\n\n  if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;\n  if (typeof cb !== 'function') cb = nop;\n  if (state.ending) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {\n    state.pendingcb++;\n    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);\n  }\n  return ret;\n};\n\nWritable.prototype.cork = function () {\n  this._writableState.corked++;\n};\n\nWritable.prototype.uncork = function () {\n  var state = this._writableState;\n\n  if (state.corked) {\n    state.corked--;\n    if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);\n  }\n};\n\nWritable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {\n  // node::ParseEncoding() requires lower case.\n  if (typeof encoding === 'string') encoding = encoding.toLowerCase();\n  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);\n  this._writableState.defaultEncoding = encoding;\n  return this;\n};\n\nObject.defineProperty(Writable.prototype, 'writableBuffer', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState && this._writableState.getBuffer();\n  }\n});\n\nfunction decodeChunk(state, chunk, encoding) {\n  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {\n    chunk = Buffer.from(chunk, encoding);\n  }\n\n  return chunk;\n}\n\nObject.defineProperty(Writable.prototype, 'writableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState.highWaterMark;\n  }\n}); // if we're already writing something, then just put this\n// in the queue, and wait our turn.  Otherwise, call _write\n// If we return false, then we need a drain event, so set that flag.\n\nfunction writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {\n  if (!isBuf) {\n    var newChunk = decodeChunk(state, chunk, encoding);\n\n    if (chunk !== newChunk) {\n      isBuf = true;\n      encoding = 'buffer';\n      chunk = newChunk;\n    }\n  }\n\n  var len = state.objectMode ? 1 : chunk.length;\n  state.length += len;\n  var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.\n\n  if (!ret) state.needDrain = true;\n\n  if (state.writing || state.corked) {\n    var last = state.lastBufferedRequest;\n    state.lastBufferedRequest = {\n      chunk: chunk,\n      encoding: encoding,\n      isBuf: isBuf,\n      callback: cb,\n      next: null\n    };\n\n    if (last) {\n      last.next = state.lastBufferedRequest;\n    } else {\n      state.bufferedRequest = state.lastBufferedRequest;\n    }\n\n    state.bufferedRequestCount += 1;\n  } else {\n    doWrite(stream, state, false, len, chunk, encoding, cb);\n  }\n\n  return ret;\n}\n\nfunction doWrite(stream, state, writev, len, chunk, encoding, cb) {\n  state.writelen = len;\n  state.writecb = cb;\n  state.writing = true;\n  state.sync = true;\n  if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write'));else if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);\n  state.sync = false;\n}\n\nfunction onwriteError(stream, state, sync, er, cb) {\n  --state.pendingcb;\n\n  if (sync) {\n    // defer the callback if we are being called synchronously\n    // to avoid piling up things on the stack\n    process.nextTick(cb, er); // this can emit finish, and it will always happen\n    // after error\n\n    process.nextTick(finishMaybe, stream, state);\n    stream._writableState.errorEmitted = true;\n    errorOrDestroy(stream, er);\n  } else {\n    // the caller expect this to happen before if\n    // it is async\n    cb(er);\n    stream._writableState.errorEmitted = true;\n    errorOrDestroy(stream, er); // this can emit finish, but finish must\n    // always follow error\n\n    finishMaybe(stream, state);\n  }\n}\n\nfunction onwriteStateUpdate(state) {\n  state.writing = false;\n  state.writecb = null;\n  state.length -= state.writelen;\n  state.writelen = 0;\n}\n\nfunction onwrite(stream, er) {\n  var state = stream._writableState;\n  var sync = state.sync;\n  var cb = state.writecb;\n  if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK();\n  onwriteStateUpdate(state);\n  if (er) onwriteError(stream, state, sync, er, cb);else {\n    // Check if we're actually ready to finish, but don't emit yet\n    var finished = needFinish(state) || stream.destroyed;\n\n    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {\n      clearBuffer(stream, state);\n    }\n\n    if (sync) {\n      process.nextTick(afterWrite, stream, state, finished, cb);\n    } else {\n      afterWrite(stream, state, finished, cb);\n    }\n  }\n}\n\nfunction afterWrite(stream, state, finished, cb) {\n  if (!finished) onwriteDrain(stream, state);\n  state.pendingcb--;\n  cb();\n  finishMaybe(stream, state);\n} // Must force callback to be called on nextTick, so that we don't\n// emit 'drain' before the write() consumer gets the 'false' return\n// value, and has a chance to attach a 'drain' listener.\n\n\nfunction onwriteDrain(stream, state) {\n  if (state.length === 0 && state.needDrain) {\n    state.needDrain = false;\n    stream.emit('drain');\n  }\n} // if there's something in the buffer waiting, then process it\n\n\nfunction clearBuffer(stream, state) {\n  state.bufferProcessing = true;\n  var entry = state.bufferedRequest;\n\n  if (stream._writev && entry && entry.next) {\n    // Fast case, write everything using _writev()\n    var l = state.bufferedRequestCount;\n    var buffer = new Array(l);\n    var holder = state.corkedRequestsFree;\n    holder.entry = entry;\n    var count = 0;\n    var allBuffers = true;\n\n    while (entry) {\n      buffer[count] = entry;\n      if (!entry.isBuf) allBuffers = false;\n      entry = entry.next;\n      count += 1;\n    }\n\n    buffer.allBuffers = allBuffers;\n    doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time\n    // as the hot path ends with doWrite\n\n    state.pendingcb++;\n    state.lastBufferedRequest = null;\n\n    if (holder.next) {\n      state.corkedRequestsFree = holder.next;\n      holder.next = null;\n    } else {\n      state.corkedRequestsFree = new CorkedRequest(state);\n    }\n\n    state.bufferedRequestCount = 0;\n  } else {\n    // Slow case, write chunks one-by-one\n    while (entry) {\n      var chunk = entry.chunk;\n      var encoding = entry.encoding;\n      var cb = entry.callback;\n      var len = state.objectMode ? 1 : chunk.length;\n      doWrite(stream, state, false, len, chunk, encoding, cb);\n      entry = entry.next;\n      state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then\n      // it means that we need to wait until it does.\n      // also, that means that the chunk and cb are currently\n      // being processed, so move the buffer counter past them.\n\n      if (state.writing) {\n        break;\n      }\n    }\n\n    if (entry === null) state.lastBufferedRequest = null;\n  }\n\n  state.bufferedRequest = entry;\n  state.bufferProcessing = false;\n}\n\nWritable.prototype._write = function (chunk, encoding, cb) {\n  cb(new ERR_METHOD_NOT_IMPLEMENTED('_write()'));\n};\n\nWritable.prototype._writev = null;\n\nWritable.prototype.end = function (chunk, encoding, cb) {\n  var state = this._writableState;\n\n  if (typeof chunk === 'function') {\n    cb = chunk;\n    chunk = null;\n    encoding = null;\n  } else if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks\n\n  if (state.corked) {\n    state.corked = 1;\n    this.uncork();\n  } // ignore unnecessary end() calls.\n\n\n  if (!state.ending) endWritable(this, state, cb);\n  return this;\n};\n\nObject.defineProperty(Writable.prototype, 'writableLength', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState.length;\n  }\n});\n\nfunction needFinish(state) {\n  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;\n}\n\nfunction callFinal(stream, state) {\n  stream._final(function (err) {\n    state.pendingcb--;\n\n    if (err) {\n      errorOrDestroy(stream, err);\n    }\n\n    state.prefinished = true;\n    stream.emit('prefinish');\n    finishMaybe(stream, state);\n  });\n}\n\nfunction prefinish(stream, state) {\n  if (!state.prefinished && !state.finalCalled) {\n    if (typeof stream._final === 'function' && !state.destroyed) {\n      state.pendingcb++;\n      state.finalCalled = true;\n      process.nextTick(callFinal, stream, state);\n    } else {\n      state.prefinished = true;\n      stream.emit('prefinish');\n    }\n  }\n}\n\nfunction finishMaybe(stream, state) {\n  var need = needFinish(state);\n\n  if (need) {\n    prefinish(stream, state);\n\n    if (state.pendingcb === 0) {\n      state.finished = true;\n      stream.emit('finish');\n\n      if (state.autoDestroy) {\n        // In case of duplex streams we need a way to detect\n        // if the readable side is ready for autoDestroy as well\n        var rState = stream._readableState;\n\n        if (!rState || rState.autoDestroy && rState.endEmitted) {\n          stream.destroy();\n        }\n      }\n    }\n  }\n\n  return need;\n}\n\nfunction endWritable(stream, state, cb) {\n  state.ending = true;\n  finishMaybe(stream, state);\n\n  if (cb) {\n    if (state.finished) process.nextTick(cb);else stream.once('finish', cb);\n  }\n\n  state.ended = true;\n  stream.writable = false;\n}\n\nfunction onCorkedFinish(corkReq, state, err) {\n  var entry = corkReq.entry;\n  corkReq.entry = null;\n\n  while (entry) {\n    var cb = entry.callback;\n    state.pendingcb--;\n    cb(err);\n    entry = entry.next;\n  } // reuse the free corkReq.\n\n\n  state.corkedRequestsFree.next = corkReq;\n}\n\nObject.defineProperty(Writable.prototype, 'destroyed', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    if (this._writableState === undefined) {\n      return false;\n    }\n\n    return this._writableState.destroyed;\n  },\n  set: function set(value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (!this._writableState) {\n      return;\n    } // backward compatibility, the user is explicitly\n    // managing destroyed\n\n\n    this._writableState.destroyed = value;\n  }\n});\nWritable.prototype.destroy = destroyImpl.destroy;\nWritable.prototype._undestroy = destroyImpl.undestroy;\n\nWritable.prototype._destroy = function (err, cb) {\n  cb(err);\n};","'use strict';\n\nvar _Object$setPrototypeO;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar finished = require('./end-of-stream');\n\nvar kLastResolve = Symbol('lastResolve');\nvar kLastReject = Symbol('lastReject');\nvar kError = Symbol('error');\nvar kEnded = Symbol('ended');\nvar kLastPromise = Symbol('lastPromise');\nvar kHandlePromise = Symbol('handlePromise');\nvar kStream = Symbol('stream');\n\nfunction createIterResult(value, done) {\n  return {\n    value: value,\n    done: done\n  };\n}\n\nfunction readAndResolve(iter) {\n  var resolve = iter[kLastResolve];\n\n  if (resolve !== null) {\n    var data = iter[kStream].read(); // we defer if data is null\n    // we can be expecting either 'end' or\n    // 'error'\n\n    if (data !== null) {\n      iter[kLastPromise] = null;\n      iter[kLastResolve] = null;\n      iter[kLastReject] = null;\n      resolve(createIterResult(data, false));\n    }\n  }\n}\n\nfunction onReadable(iter) {\n  // we wait for the next tick, because it might\n  // emit an error with process.nextTick\n  process.nextTick(readAndResolve, iter);\n}\n\nfunction wrapForNext(lastPromise, iter) {\n  return function (resolve, reject) {\n    lastPromise.then(function () {\n      if (iter[kEnded]) {\n        resolve(createIterResult(undefined, true));\n        return;\n      }\n\n      iter[kHandlePromise](resolve, reject);\n    }, reject);\n  };\n}\n\nvar AsyncIteratorPrototype = Object.getPrototypeOf(function () {});\nvar ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {\n  get stream() {\n    return this[kStream];\n  },\n\n  next: function next() {\n    var _this = this;\n\n    // if we have detected an error in the meanwhile\n    // reject straight away\n    var error = this[kError];\n\n    if (error !== null) {\n      return Promise.reject(error);\n    }\n\n    if (this[kEnded]) {\n      return Promise.resolve(createIterResult(undefined, true));\n    }\n\n    if (this[kStream].destroyed) {\n      // We need to defer via nextTick because if .destroy(err) is\n      // called, the error will be emitted via nextTick, and\n      // we cannot guarantee that there is no error lingering around\n      // waiting to be emitted.\n      return new Promise(function (resolve, reject) {\n        process.nextTick(function () {\n          if (_this[kError]) {\n            reject(_this[kError]);\n          } else {\n            resolve(createIterResult(undefined, true));\n          }\n        });\n      });\n    } // if we have multiple next() calls\n    // we will wait for the previous Promise to finish\n    // this logic is optimized to support for await loops,\n    // where next() is only called once at a time\n\n\n    var lastPromise = this[kLastPromise];\n    var promise;\n\n    if (lastPromise) {\n      promise = new Promise(wrapForNext(lastPromise, this));\n    } else {\n      // fast path needed to support multiple this.push()\n      // without triggering the next() queue\n      var data = this[kStream].read();\n\n      if (data !== null) {\n        return Promise.resolve(createIterResult(data, false));\n      }\n\n      promise = new Promise(this[kHandlePromise]);\n    }\n\n    this[kLastPromise] = promise;\n    return promise;\n  }\n}, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function () {\n  return this;\n}), _defineProperty(_Object$setPrototypeO, \"return\", function _return() {\n  var _this2 = this;\n\n  // destroy(err, cb) is a private API\n  // we can guarantee we have that here, because we control the\n  // Readable class this is attached to\n  return new Promise(function (resolve, reject) {\n    _this2[kStream].destroy(null, function (err) {\n      if (err) {\n        reject(err);\n        return;\n      }\n\n      resolve(createIterResult(undefined, true));\n    });\n  });\n}), _Object$setPrototypeO), AsyncIteratorPrototype);\n\nvar createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {\n  var _Object$create;\n\n  var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {\n    value: stream,\n    writable: true\n  }), _defineProperty(_Object$create, kLastResolve, {\n    value: null,\n    writable: true\n  }), _defineProperty(_Object$create, kLastReject, {\n    value: null,\n    writable: true\n  }), _defineProperty(_Object$create, kError, {\n    value: null,\n    writable: true\n  }), _defineProperty(_Object$create, kEnded, {\n    value: stream._readableState.endEmitted,\n    writable: true\n  }), _defineProperty(_Object$create, kHandlePromise, {\n    value: function value(resolve, reject) {\n      var data = iterator[kStream].read();\n\n      if (data) {\n        iterator[kLastPromise] = null;\n        iterator[kLastResolve] = null;\n        iterator[kLastReject] = null;\n        resolve(createIterResult(data, false));\n      } else {\n        iterator[kLastResolve] = resolve;\n        iterator[kLastReject] = reject;\n      }\n    },\n    writable: true\n  }), _Object$create));\n  iterator[kLastPromise] = null;\n  finished(stream, function (err) {\n    if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {\n      var reject = iterator[kLastReject]; // reject if we are waiting for data in the Promise\n      // returned by next() and store the error\n\n      if (reject !== null) {\n        iterator[kLastPromise] = null;\n        iterator[kLastResolve] = null;\n        iterator[kLastReject] = null;\n        reject(err);\n      }\n\n      iterator[kError] = err;\n      return;\n    }\n\n    var resolve = iterator[kLastResolve];\n\n    if (resolve !== null) {\n      iterator[kLastPromise] = null;\n      iterator[kLastResolve] = null;\n      iterator[kLastReject] = null;\n      resolve(createIterResult(undefined, true));\n    }\n\n    iterator[kEnded] = true;\n  });\n  stream.on('readable', onReadable.bind(null, iterator));\n  return iterator;\n};\n\nmodule.exports = createReadableStreamAsyncIterator;","'use strict';\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar _require = require('buffer'),\n    Buffer = _require.Buffer;\n\nvar _require2 = require('util'),\n    inspect = _require2.inspect;\n\nvar custom = inspect && inspect.custom || 'inspect';\n\nfunction copyBuffer(src, target, offset) {\n  Buffer.prototype.copy.call(src, target, offset);\n}\n\nmodule.exports =\n/*#__PURE__*/\nfunction () {\n  function BufferList() {\n    _classCallCheck(this, BufferList);\n\n    this.head = null;\n    this.tail = null;\n    this.length = 0;\n  }\n\n  _createClass(BufferList, [{\n    key: \"push\",\n    value: function push(v) {\n      var entry = {\n        data: v,\n        next: null\n      };\n      if (this.length > 0) this.tail.next = entry;else this.head = entry;\n      this.tail = entry;\n      ++this.length;\n    }\n  }, {\n    key: \"unshift\",\n    value: function unshift(v) {\n      var entry = {\n        data: v,\n        next: this.head\n      };\n      if (this.length === 0) this.tail = entry;\n      this.head = entry;\n      ++this.length;\n    }\n  }, {\n    key: \"shift\",\n    value: function shift() {\n      if (this.length === 0) return;\n      var ret = this.head.data;\n      if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;\n      --this.length;\n      return ret;\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.head = this.tail = null;\n      this.length = 0;\n    }\n  }, {\n    key: \"join\",\n    value: function join(s) {\n      if (this.length === 0) return '';\n      var p = this.head;\n      var ret = '' + p.data;\n\n      while (p = p.next) {\n        ret += s + p.data;\n      }\n\n      return ret;\n    }\n  }, {\n    key: \"concat\",\n    value: function concat(n) {\n      if (this.length === 0) return Buffer.alloc(0);\n      var ret = Buffer.allocUnsafe(n >>> 0);\n      var p = this.head;\n      var i = 0;\n\n      while (p) {\n        copyBuffer(p.data, ret, i);\n        i += p.data.length;\n        p = p.next;\n      }\n\n      return ret;\n    } // Consumes a specified amount of bytes or characters from the buffered data.\n\n  }, {\n    key: \"consume\",\n    value: function consume(n, hasStrings) {\n      var ret;\n\n      if (n < this.head.data.length) {\n        // `slice` is the same for buffers and strings.\n        ret = this.head.data.slice(0, n);\n        this.head.data = this.head.data.slice(n);\n      } else if (n === this.head.data.length) {\n        // First chunk is a perfect match.\n        ret = this.shift();\n      } else {\n        // Result spans more than one buffer.\n        ret = hasStrings ? this._getString(n) : this._getBuffer(n);\n      }\n\n      return ret;\n    }\n  }, {\n    key: \"first\",\n    value: function first() {\n      return this.head.data;\n    } // Consumes a specified amount of characters from the buffered data.\n\n  }, {\n    key: \"_getString\",\n    value: function _getString(n) {\n      var p = this.head;\n      var c = 1;\n      var ret = p.data;\n      n -= ret.length;\n\n      while (p = p.next) {\n        var str = p.data;\n        var nb = n > str.length ? str.length : n;\n        if (nb === str.length) ret += str;else ret += str.slice(0, n);\n        n -= nb;\n\n        if (n === 0) {\n          if (nb === str.length) {\n            ++c;\n            if (p.next) this.head = p.next;else this.head = this.tail = null;\n          } else {\n            this.head = p;\n            p.data = str.slice(nb);\n          }\n\n          break;\n        }\n\n        ++c;\n      }\n\n      this.length -= c;\n      return ret;\n    } // Consumes a specified amount of bytes from the buffered data.\n\n  }, {\n    key: \"_getBuffer\",\n    value: function _getBuffer(n) {\n      var ret = Buffer.allocUnsafe(n);\n      var p = this.head;\n      var c = 1;\n      p.data.copy(ret);\n      n -= p.data.length;\n\n      while (p = p.next) {\n        var buf = p.data;\n        var nb = n > buf.length ? buf.length : n;\n        buf.copy(ret, ret.length - n, 0, nb);\n        n -= nb;\n\n        if (n === 0) {\n          if (nb === buf.length) {\n            ++c;\n            if (p.next) this.head = p.next;else this.head = this.tail = null;\n          } else {\n            this.head = p;\n            p.data = buf.slice(nb);\n          }\n\n          break;\n        }\n\n        ++c;\n      }\n\n      this.length -= c;\n      return ret;\n    } // Make sure the linked list only shows the minimal necessary information.\n\n  }, {\n    key: custom,\n    value: function value(_, options) {\n      return inspect(this, _objectSpread({}, options, {\n        // Only inspect one level.\n        depth: 0,\n        // It should not recurse.\n        customInspect: false\n      }));\n    }\n  }]);\n\n  return BufferList;\n}();","'use strict'; // undocumented cb() API, needed for core, not for public API\n\nfunction destroy(err, cb) {\n  var _this = this;\n\n  var readableDestroyed = this._readableState && this._readableState.destroyed;\n  var writableDestroyed = this._writableState && this._writableState.destroyed;\n\n  if (readableDestroyed || writableDestroyed) {\n    if (cb) {\n      cb(err);\n    } else if (err) {\n      if (!this._writableState) {\n        process.nextTick(emitErrorNT, this, err);\n      } else if (!this._writableState.errorEmitted) {\n        this._writableState.errorEmitted = true;\n        process.nextTick(emitErrorNT, this, err);\n      }\n    }\n\n    return this;\n  } // we set destroyed to true before firing error callbacks in order\n  // to make it re-entrance safe in case destroy() is called within callbacks\n\n\n  if (this._readableState) {\n    this._readableState.destroyed = true;\n  } // if this is a duplex stream mark the writable part as destroyed as well\n\n\n  if (this._writableState) {\n    this._writableState.destroyed = true;\n  }\n\n  this._destroy(err || null, function (err) {\n    if (!cb && err) {\n      if (!_this._writableState) {\n        process.nextTick(emitErrorAndCloseNT, _this, err);\n      } else if (!_this._writableState.errorEmitted) {\n        _this._writableState.errorEmitted = true;\n        process.nextTick(emitErrorAndCloseNT, _this, err);\n      } else {\n        process.nextTick(emitCloseNT, _this);\n      }\n    } else if (cb) {\n      process.nextTick(emitCloseNT, _this);\n      cb(err);\n    } else {\n      process.nextTick(emitCloseNT, _this);\n    }\n  });\n\n  return this;\n}\n\nfunction emitErrorAndCloseNT(self, err) {\n  emitErrorNT(self, err);\n  emitCloseNT(self);\n}\n\nfunction emitCloseNT(self) {\n  if (self._writableState && !self._writableState.emitClose) return;\n  if (self._readableState && !self._readableState.emitClose) return;\n  self.emit('close');\n}\n\nfunction undestroy() {\n  if (this._readableState) {\n    this._readableState.destroyed = false;\n    this._readableState.reading = false;\n    this._readableState.ended = false;\n    this._readableState.endEmitted = false;\n  }\n\n  if (this._writableState) {\n    this._writableState.destroyed = false;\n    this._writableState.ended = false;\n    this._writableState.ending = false;\n    this._writableState.finalCalled = false;\n    this._writableState.prefinished = false;\n    this._writableState.finished = false;\n    this._writableState.errorEmitted = false;\n  }\n}\n\nfunction emitErrorNT(self, err) {\n  self.emit('error', err);\n}\n\nfunction errorOrDestroy(stream, err) {\n  // We have tests that rely on errors being emitted\n  // in the same tick, so changing this is semver major.\n  // For now when you opt-in to autoDestroy we allow\n  // the error to be emitted nextTick. In a future\n  // semver major update we should change the default to this.\n  var rState = stream._readableState;\n  var wState = stream._writableState;\n  if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);else stream.emit('error', err);\n}\n\nmodule.exports = {\n  destroy: destroy,\n  undestroy: undestroy,\n  errorOrDestroy: errorOrDestroy\n};","// Ported from https://github.com/mafintosh/end-of-stream with\n// permission from the author, Mathias Buus (@mafintosh).\n'use strict';\n\nvar ERR_STREAM_PREMATURE_CLOSE = require('../../../errors').codes.ERR_STREAM_PREMATURE_CLOSE;\n\nfunction once(callback) {\n  var called = false;\n  return function () {\n    if (called) return;\n    called = true;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    callback.apply(this, args);\n  };\n}\n\nfunction noop() {}\n\nfunction isRequest(stream) {\n  return stream.setHeader && typeof stream.abort === 'function';\n}\n\nfunction eos(stream, opts, callback) {\n  if (typeof opts === 'function') return eos(stream, null, opts);\n  if (!opts) opts = {};\n  callback = once(callback || noop);\n  var readable = opts.readable || opts.readable !== false && stream.readable;\n  var writable = opts.writable || opts.writable !== false && stream.writable;\n\n  var onlegacyfinish = function onlegacyfinish() {\n    if (!stream.writable) onfinish();\n  };\n\n  var writableEnded = stream._writableState && stream._writableState.finished;\n\n  var onfinish = function onfinish() {\n    writable = false;\n    writableEnded = true;\n    if (!readable) callback.call(stream);\n  };\n\n  var readableEnded = stream._readableState && stream._readableState.endEmitted;\n\n  var onend = function onend() {\n    readable = false;\n    readableEnded = true;\n    if (!writable) callback.call(stream);\n  };\n\n  var onerror = function onerror(err) {\n    callback.call(stream, err);\n  };\n\n  var onclose = function onclose() {\n    var err;\n\n    if (readable && !readableEnded) {\n      if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();\n      return callback.call(stream, err);\n    }\n\n    if (writable && !writableEnded) {\n      if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();\n      return callback.call(stream, err);\n    }\n  };\n\n  var onrequest = function onrequest() {\n    stream.req.on('finish', onfinish);\n  };\n\n  if (isRequest(stream)) {\n    stream.on('complete', onfinish);\n    stream.on('abort', onclose);\n    if (stream.req) onrequest();else stream.on('request', onrequest);\n  } else if (writable && !stream._writableState) {\n    // legacy streams\n    stream.on('end', onlegacyfinish);\n    stream.on('close', onlegacyfinish);\n  }\n\n  stream.on('end', onend);\n  stream.on('finish', onfinish);\n  if (opts.error !== false) stream.on('error', onerror);\n  stream.on('close', onclose);\n  return function () {\n    stream.removeListener('complete', onfinish);\n    stream.removeListener('abort', onclose);\n    stream.removeListener('request', onrequest);\n    if (stream.req) stream.req.removeListener('finish', onfinish);\n    stream.removeListener('end', onlegacyfinish);\n    stream.removeListener('close', onlegacyfinish);\n    stream.removeListener('finish', onfinish);\n    stream.removeListener('end', onend);\n    stream.removeListener('error', onerror);\n    stream.removeListener('close', onclose);\n  };\n}\n\nmodule.exports = eos;","module.exports = function () {\n  throw new Error('Readable.from is not available in the browser')\n};\n","// Ported from https://github.com/mafintosh/pump with\n// permission from the author, Mathias Buus (@mafintosh).\n'use strict';\n\nvar eos;\n\nfunction once(callback) {\n  var called = false;\n  return function () {\n    if (called) return;\n    called = true;\n    callback.apply(void 0, arguments);\n  };\n}\n\nvar _require$codes = require('../../../errors').codes,\n    ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS,\n    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;\n\nfunction noop(err) {\n  // Rethrow the error if it exists to avoid swallowing it\n  if (err) throw err;\n}\n\nfunction isRequest(stream) {\n  return stream.setHeader && typeof stream.abort === 'function';\n}\n\nfunction destroyer(stream, reading, writing, callback) {\n  callback = once(callback);\n  var closed = false;\n  stream.on('close', function () {\n    closed = true;\n  });\n  if (eos === undefined) eos = require('./end-of-stream');\n  eos(stream, {\n    readable: reading,\n    writable: writing\n  }, function (err) {\n    if (err) return callback(err);\n    closed = true;\n    callback();\n  });\n  var destroyed = false;\n  return function (err) {\n    if (closed) return;\n    if (destroyed) return;\n    destroyed = true; // request.destroy just do .end - .abort is what we want\n\n    if (isRequest(stream)) return stream.abort();\n    if (typeof stream.destroy === 'function') return stream.destroy();\n    callback(err || new ERR_STREAM_DESTROYED('pipe'));\n  };\n}\n\nfunction call(fn) {\n  fn();\n}\n\nfunction pipe(from, to) {\n  return from.pipe(to);\n}\n\nfunction popCallback(streams) {\n  if (!streams.length) return noop;\n  if (typeof streams[streams.length - 1] !== 'function') return noop;\n  return streams.pop();\n}\n\nfunction pipeline() {\n  for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {\n    streams[_key] = arguments[_key];\n  }\n\n  var callback = popCallback(streams);\n  if (Array.isArray(streams[0])) streams = streams[0];\n\n  if (streams.length < 2) {\n    throw new ERR_MISSING_ARGS('streams');\n  }\n\n  var error;\n  var destroys = streams.map(function (stream, i) {\n    var reading = i < streams.length - 1;\n    var writing = i > 0;\n    return destroyer(stream, reading, writing, function (err) {\n      if (!error) error = err;\n      if (err) destroys.forEach(call);\n      if (reading) return;\n      destroys.forEach(call);\n      callback(error);\n    });\n  });\n  return streams.reduce(pipe);\n}\n\nmodule.exports = pipeline;","'use strict';\n\nvar ERR_INVALID_OPT_VALUE = require('../../../errors').codes.ERR_INVALID_OPT_VALUE;\n\nfunction highWaterMarkFrom(options, isDuplex, duplexKey) {\n  return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;\n}\n\nfunction getHighWaterMark(state, options, duplexKey, isDuplex) {\n  var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);\n\n  if (hwm != null) {\n    if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {\n      var name = isDuplex ? duplexKey : 'highWaterMark';\n      throw new ERR_INVALID_OPT_VALUE(name, hwm);\n    }\n\n    return Math.floor(hwm);\n  } // Default value\n\n\n  return state.objectMode ? 16 : 16 * 1024;\n}\n\nmodule.exports = {\n  getHighWaterMark: getHighWaterMark\n};","module.exports = require('events').EventEmitter;\n","exports = module.exports = require('./lib/_stream_readable.js');\nexports.Stream = exports;\nexports.Readable = exports;\nexports.Writable = require('./lib/_stream_writable.js');\nexports.Duplex = require('./lib/_stream_duplex.js');\nexports.Transform = require('./lib/_stream_transform.js');\nexports.PassThrough = require('./lib/_stream_passthrough.js');\nexports.finished = require('./lib/internal/streams/end-of-stream.js');\nexports.pipeline = require('./lib/internal/streams/pipeline.js');\n","module.exports = function xor (a, b) {\n  var length = Math.min(a.length, b.length)\n  var buffer = new Buffer(length)\n\n  for (var i = 0; i < length; ++i) {\n    buffer[i] = a[i] ^ b[i]\n  }\n\n  return buffer\n}\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n","var Buffer = require('safe-buffer').Buffer\nvar Transform = require('stream').Transform\nvar StringDecoder = require('string_decoder').StringDecoder\nvar inherits = require('inherits')\n\nfunction CipherBase (hashMode) {\n  Transform.call(this)\n  this.hashMode = typeof hashMode === 'string'\n  if (this.hashMode) {\n    this[hashMode] = this._finalOrDigest\n  } else {\n    this.final = this._finalOrDigest\n  }\n  if (this._final) {\n    this.__final = this._final\n    this._final = null\n  }\n  this._decoder = null\n  this._encoding = null\n}\ninherits(CipherBase, Transform)\n\nCipherBase.prototype.update = function (data, inputEnc, outputEnc) {\n  if (typeof data === 'string') {\n    data = Buffer.from(data, inputEnc)\n  }\n\n  var outData = this._update(data)\n  if (this.hashMode) return this\n\n  if (outputEnc) {\n    outData = this._toString(outData, outputEnc)\n  }\n\n  return outData\n}\n\nCipherBase.prototype.setAutoPadding = function () {}\nCipherBase.prototype.getAuthTag = function () {\n  throw new Error('trying to get auth tag in unsupported state')\n}\n\nCipherBase.prototype.setAuthTag = function () {\n  throw new Error('trying to set auth tag in unsupported state')\n}\n\nCipherBase.prototype.setAAD = function () {\n  throw new Error('trying to set aad in unsupported state')\n}\n\nCipherBase.prototype._transform = function (data, _, next) {\n  var err\n  try {\n    if (this.hashMode) {\n      this._update(data)\n    } else {\n      this.push(this._update(data))\n    }\n  } catch (e) {\n    err = e\n  } finally {\n    next(err)\n  }\n}\nCipherBase.prototype._flush = function (done) {\n  var err\n  try {\n    this.push(this.__final())\n  } catch (e) {\n    err = e\n  }\n\n  done(err)\n}\nCipherBase.prototype._finalOrDigest = function (outputEnc) {\n  var outData = this.__final() || Buffer.alloc(0)\n  if (outputEnc) {\n    outData = this._toString(outData, outputEnc, true)\n  }\n  return outData\n}\n\nCipherBase.prototype._toString = function (value, enc, fin) {\n  if (!this._decoder) {\n    this._decoder = new StringDecoder(enc)\n    this._encoding = enc\n  }\n\n  if (this._encoding !== enc) throw new Error('can\\'t switch encodings')\n\n  var out = this._decoder.write(value)\n  if (fin) {\n    out += this._decoder.end()\n  }\n\n  return out\n}\n\nmodule.exports = CipherBase\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\n\nfunction isArray(arg) {\n  if (Array.isArray) {\n    return Array.isArray(arg);\n  }\n  return objectToString(arg) === '[object Array]';\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\n\nfunction isError(e) {\n  return (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = Buffer.isBuffer;\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n","var elliptic = require('elliptic')\nvar BN = require('bn.js')\n\nmodule.exports = function createECDH (curve) {\n  return new ECDH(curve)\n}\n\nvar aliases = {\n  secp256k1: {\n    name: 'secp256k1',\n    byteLength: 32\n  },\n  secp224r1: {\n    name: 'p224',\n    byteLength: 28\n  },\n  prime256v1: {\n    name: 'p256',\n    byteLength: 32\n  },\n  prime192v1: {\n    name: 'p192',\n    byteLength: 24\n  },\n  ed25519: {\n    name: 'ed25519',\n    byteLength: 32\n  },\n  secp384r1: {\n    name: 'p384',\n    byteLength: 48\n  },\n  secp521r1: {\n    name: 'p521',\n    byteLength: 66\n  }\n}\n\naliases.p224 = aliases.secp224r1\naliases.p256 = aliases.secp256r1 = aliases.prime256v1\naliases.p192 = aliases.secp192r1 = aliases.prime192v1\naliases.p384 = aliases.secp384r1\naliases.p521 = aliases.secp521r1\n\nfunction ECDH (curve) {\n  this.curveType = aliases[curve]\n  if (!this.curveType) {\n    this.curveType = {\n      name: curve\n    }\n  }\n  this.curve = new elliptic.ec(this.curveType.name) // eslint-disable-line new-cap\n  this.keys = void 0\n}\n\nECDH.prototype.generateKeys = function (enc, format) {\n  this.keys = this.curve.genKeyPair()\n  return this.getPublicKey(enc, format)\n}\n\nECDH.prototype.computeSecret = function (other, inenc, enc) {\n  inenc = inenc || 'utf8'\n  if (!Buffer.isBuffer(other)) {\n    other = new Buffer(other, inenc)\n  }\n  var otherPub = this.curve.keyFromPublic(other).getPublic()\n  var out = otherPub.mul(this.keys.getPrivate()).getX()\n  return formatReturnValue(out, enc, this.curveType.byteLength)\n}\n\nECDH.prototype.getPublicKey = function (enc, format) {\n  var key = this.keys.getPublic(format === 'compressed', true)\n  if (format === 'hybrid') {\n    if (key[key.length - 1] % 2) {\n      key[0] = 7\n    } else {\n      key[0] = 6\n    }\n  }\n  return formatReturnValue(key, enc)\n}\n\nECDH.prototype.getPrivateKey = function (enc) {\n  return formatReturnValue(this.keys.getPrivate(), enc)\n}\n\nECDH.prototype.setPublicKey = function (pub, enc) {\n  enc = enc || 'utf8'\n  if (!Buffer.isBuffer(pub)) {\n    pub = new Buffer(pub, enc)\n  }\n  this.keys._importPublic(pub)\n  return this\n}\n\nECDH.prototype.setPrivateKey = function (priv, enc) {\n  enc = enc || 'utf8'\n  if (!Buffer.isBuffer(priv)) {\n    priv = new Buffer(priv, enc)\n  }\n\n  var _priv = new BN(priv)\n  _priv = _priv.toString(16)\n  this.keys = this.curve.genKeyPair()\n  this.keys._importPrivate(_priv)\n  return this\n}\n\nfunction formatReturnValue (bn, enc, len) {\n  if (!Array.isArray(bn)) {\n    bn = bn.toArray()\n  }\n  var buf = new Buffer(bn)\n  if (len && buf.length < len) {\n    var zeros = new Buffer(len - buf.length)\n    zeros.fill(0)\n    buf = Buffer.concat([zeros, buf])\n  }\n  if (!enc) {\n    return buf\n  } else {\n    return buf.toString(enc)\n  }\n}\n","'use strict'\nvar inherits = require('inherits')\nvar MD5 = require('md5.js')\nvar RIPEMD160 = require('ripemd160')\nvar sha = require('sha.js')\nvar Base = require('cipher-base')\n\nfunction Hash (hash) {\n  Base.call(this, 'digest')\n\n  this._hash = hash\n}\n\ninherits(Hash, Base)\n\nHash.prototype._update = function (data) {\n  this._hash.update(data)\n}\n\nHash.prototype._final = function () {\n  return this._hash.digest()\n}\n\nmodule.exports = function createHash (alg) {\n  alg = alg.toLowerCase()\n  if (alg === 'md5') return new MD5()\n  if (alg === 'rmd160' || alg === 'ripemd160') return new RIPEMD160()\n\n  return new Hash(sha(alg))\n}\n","var MD5 = require('md5.js')\n\nmodule.exports = function (buffer) {\n  return new MD5().update(buffer).digest()\n}\n","'use strict'\nvar inherits = require('inherits')\nvar Legacy = require('./legacy')\nvar Base = require('cipher-base')\nvar Buffer = require('safe-buffer').Buffer\nvar md5 = require('create-hash/md5')\nvar RIPEMD160 = require('ripemd160')\n\nvar sha = require('sha.js')\n\nvar ZEROS = Buffer.alloc(128)\n\nfunction Hmac (alg, key) {\n  Base.call(this, 'digest')\n  if (typeof key === 'string') {\n    key = Buffer.from(key)\n  }\n\n  var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64\n\n  this._alg = alg\n  this._key = key\n  if (key.length > blocksize) {\n    var hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg)\n    key = hash.update(key).digest()\n  } else if (key.length < blocksize) {\n    key = Buffer.concat([key, ZEROS], blocksize)\n  }\n\n  var ipad = this._ipad = Buffer.allocUnsafe(blocksize)\n  var opad = this._opad = Buffer.allocUnsafe(blocksize)\n\n  for (var i = 0; i < blocksize; i++) {\n    ipad[i] = key[i] ^ 0x36\n    opad[i] = key[i] ^ 0x5C\n  }\n  this._hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg)\n  this._hash.update(ipad)\n}\n\ninherits(Hmac, Base)\n\nHmac.prototype._update = function (data) {\n  this._hash.update(data)\n}\n\nHmac.prototype._final = function () {\n  var h = this._hash.digest()\n  var hash = this._alg === 'rmd160' ? new RIPEMD160() : sha(this._alg)\n  return hash.update(this._opad).update(h).digest()\n}\n\nmodule.exports = function createHmac (alg, key) {\n  alg = alg.toLowerCase()\n  if (alg === 'rmd160' || alg === 'ripemd160') {\n    return new Hmac('rmd160', key)\n  }\n  if (alg === 'md5') {\n    return new Legacy(md5, key)\n  }\n  return new Hmac(alg, key)\n}\n","'use strict'\nvar inherits = require('inherits')\nvar Buffer = require('safe-buffer').Buffer\n\nvar Base = require('cipher-base')\n\nvar ZEROS = Buffer.alloc(128)\nvar blocksize = 64\n\nfunction Hmac (alg, key) {\n  Base.call(this, 'digest')\n  if (typeof key === 'string') {\n    key = Buffer.from(key)\n  }\n\n  this._alg = alg\n  this._key = key\n\n  if (key.length > blocksize) {\n    key = alg(key)\n  } else if (key.length < blocksize) {\n    key = Buffer.concat([key, ZEROS], blocksize)\n  }\n\n  var ipad = this._ipad = Buffer.allocUnsafe(blocksize)\n  var opad = this._opad = Buffer.allocUnsafe(blocksize)\n\n  for (var i = 0; i < blocksize; i++) {\n    ipad[i] = key[i] ^ 0x36\n    opad[i] = key[i] ^ 0x5C\n  }\n\n  this._hash = [ipad]\n}\n\ninherits(Hmac, Base)\n\nHmac.prototype._update = function (data) {\n  this._hash.push(data)\n}\n\nHmac.prototype._final = function () {\n  var h = this._alg(Buffer.concat(this._hash))\n  return this._alg(Buffer.concat([this._opad, h]))\n}\nmodule.exports = Hmac\n","'use strict'\n\nexports.randomBytes = exports.rng = exports.pseudoRandomBytes = exports.prng = require('randombytes')\nexports.createHash = exports.Hash = require('create-hash')\nexports.createHmac = exports.Hmac = require('create-hmac')\n\nvar algos = require('browserify-sign/algos')\nvar algoKeys = Object.keys(algos)\nvar hashes = ['sha1', 'sha224', 'sha256', 'sha384', 'sha512', 'md5', 'rmd160'].concat(algoKeys)\nexports.getHashes = function () {\n  return hashes\n}\n\nvar p = require('pbkdf2')\nexports.pbkdf2 = p.pbkdf2\nexports.pbkdf2Sync = p.pbkdf2Sync\n\nvar aes = require('browserify-cipher')\n\nexports.Cipher = aes.Cipher\nexports.createCipher = aes.createCipher\nexports.Cipheriv = aes.Cipheriv\nexports.createCipheriv = aes.createCipheriv\nexports.Decipher = aes.Decipher\nexports.createDecipher = aes.createDecipher\nexports.Decipheriv = aes.Decipheriv\nexports.createDecipheriv = aes.createDecipheriv\nexports.getCiphers = aes.getCiphers\nexports.listCiphers = aes.listCiphers\n\nvar dh = require('diffie-hellman')\n\nexports.DiffieHellmanGroup = dh.DiffieHellmanGroup\nexports.createDiffieHellmanGroup = dh.createDiffieHellmanGroup\nexports.getDiffieHellman = dh.getDiffieHellman\nexports.createDiffieHellman = dh.createDiffieHellman\nexports.DiffieHellman = dh.DiffieHellman\n\nvar sign = require('browserify-sign')\n\nexports.createSign = sign.createSign\nexports.Sign = sign.Sign\nexports.createVerify = sign.createVerify\nexports.Verify = sign.Verify\n\nexports.createECDH = require('create-ecdh')\n\nvar publicEncrypt = require('public-encrypt')\n\nexports.publicEncrypt = publicEncrypt.publicEncrypt\nexports.privateEncrypt = publicEncrypt.privateEncrypt\nexports.publicDecrypt = publicEncrypt.publicDecrypt\nexports.privateDecrypt = publicEncrypt.privateDecrypt\n\n// the least I can do is make error messages for the rest of the node.js/crypto api.\n// ;[\n//   'createCredentials'\n// ].forEach(function (name) {\n//   exports[name] = function () {\n//     throw new Error([\n//       'sorry, ' + name + ' is not implemented yet',\n//       'we accept pull requests',\n//       'https://github.com/crypto-browserify/crypto-browserify'\n//     ].join('\\n'))\n//   }\n// })\n\nvar rf = require('randomfill')\n\nexports.randomFill = rf.randomFill\nexports.randomFillSync = rf.randomFillSync\n\nexports.createCredentials = function () {\n  throw new Error([\n    'sorry, createCredentials is not implemented yet',\n    'we accept pull requests',\n    'https://github.com/crypto-browserify/crypto-browserify'\n  ].join('\\n'))\n}\n\nexports.constants = {\n  'DH_CHECK_P_NOT_SAFE_PRIME': 2,\n  'DH_CHECK_P_NOT_PRIME': 1,\n  'DH_UNABLE_TO_CHECK_GENERATOR': 4,\n  'DH_NOT_SUITABLE_GENERATOR': 8,\n  'NPN_ENABLED': 1,\n  'ALPN_ENABLED': 1,\n  'RSA_PKCS1_PADDING': 1,\n  'RSA_SSLV23_PADDING': 2,\n  'RSA_NO_PADDING': 3,\n  'RSA_PKCS1_OAEP_PADDING': 4,\n  'RSA_X931_PADDING': 5,\n  'RSA_PKCS1_PSS_PADDING': 6,\n  'POINT_CONVERSION_COMPRESSED': 2,\n  'POINT_CONVERSION_UNCOMPRESSED': 4,\n  'POINT_CONVERSION_HYBRID': 6\n}\n","'use strict';\n\nexports.utils = require('./des/utils');\nexports.Cipher = require('./des/cipher');\nexports.DES = require('./des/des');\nexports.CBC = require('./des/cbc');\nexports.EDE = require('./des/ede');\n","'use strict';\n\nvar assert = require('minimalistic-assert');\nvar inherits = require('inherits');\n\nvar proto = {};\n\nfunction CBCState(iv) {\n  assert.equal(iv.length, 8, 'Invalid IV length');\n\n  this.iv = new Array(8);\n  for (var i = 0; i < this.iv.length; i++)\n    this.iv[i] = iv[i];\n}\n\nfunction instantiate(Base) {\n  function CBC(options) {\n    Base.call(this, options);\n    this._cbcInit();\n  }\n  inherits(CBC, Base);\n\n  var keys = Object.keys(proto);\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    CBC.prototype[key] = proto[key];\n  }\n\n  CBC.create = function create(options) {\n    return new CBC(options);\n  };\n\n  return CBC;\n}\n\nexports.instantiate = instantiate;\n\nproto._cbcInit = function _cbcInit() {\n  var state = new CBCState(this.options.iv);\n  this._cbcState = state;\n};\n\nproto._update = function _update(inp, inOff, out, outOff) {\n  var state = this._cbcState;\n  var superProto = this.constructor.super_.prototype;\n\n  var iv = state.iv;\n  if (this.type === 'encrypt') {\n    for (var i = 0; i < this.blockSize; i++)\n      iv[i] ^= inp[inOff + i];\n\n    superProto._update.call(this, iv, 0, out, outOff);\n\n    for (var i = 0; i < this.blockSize; i++)\n      iv[i] = out[outOff + i];\n  } else {\n    superProto._update.call(this, inp, inOff, out, outOff);\n\n    for (var i = 0; i < this.blockSize; i++)\n      out[outOff + i] ^= iv[i];\n\n    for (var i = 0; i < this.blockSize; i++)\n      iv[i] = inp[inOff + i];\n  }\n};\n","'use strict';\n\nvar assert = require('minimalistic-assert');\n\nfunction Cipher(options) {\n  this.options = options;\n\n  this.type = this.options.type;\n  this.blockSize = 8;\n  this._init();\n\n  this.buffer = new Array(this.blockSize);\n  this.bufferOff = 0;\n}\nmodule.exports = Cipher;\n\nCipher.prototype._init = function _init() {\n  // Might be overrided\n};\n\nCipher.prototype.update = function update(data) {\n  if (data.length === 0)\n    return [];\n\n  if (this.type === 'decrypt')\n    return this._updateDecrypt(data);\n  else\n    return this._updateEncrypt(data);\n};\n\nCipher.prototype._buffer = function _buffer(data, off) {\n  // Append data to buffer\n  var min = Math.min(this.buffer.length - this.bufferOff, data.length - off);\n  for (var i = 0; i < min; i++)\n    this.buffer[this.bufferOff + i] = data[off + i];\n  this.bufferOff += min;\n\n  // Shift next\n  return min;\n};\n\nCipher.prototype._flushBuffer = function _flushBuffer(out, off) {\n  this._update(this.buffer, 0, out, off);\n  this.bufferOff = 0;\n  return this.blockSize;\n};\n\nCipher.prototype._updateEncrypt = function _updateEncrypt(data) {\n  var inputOff = 0;\n  var outputOff = 0;\n\n  var count = ((this.bufferOff + data.length) / this.blockSize) | 0;\n  var out = new Array(count * this.blockSize);\n\n  if (this.bufferOff !== 0) {\n    inputOff += this._buffer(data, inputOff);\n\n    if (this.bufferOff === this.buffer.length)\n      outputOff += this._flushBuffer(out, outputOff);\n  }\n\n  // Write blocks\n  var max = data.length - ((data.length - inputOff) % this.blockSize);\n  for (; inputOff < max; inputOff += this.blockSize) {\n    this._update(data, inputOff, out, outputOff);\n    outputOff += this.blockSize;\n  }\n\n  // Queue rest\n  for (; inputOff < data.length; inputOff++, this.bufferOff++)\n    this.buffer[this.bufferOff] = data[inputOff];\n\n  return out;\n};\n\nCipher.prototype._updateDecrypt = function _updateDecrypt(data) {\n  var inputOff = 0;\n  var outputOff = 0;\n\n  var count = Math.ceil((this.bufferOff + data.length) / this.blockSize) - 1;\n  var out = new Array(count * this.blockSize);\n\n  // TODO(indutny): optimize it, this is far from optimal\n  for (; count > 0; count--) {\n    inputOff += this._buffer(data, inputOff);\n    outputOff += this._flushBuffer(out, outputOff);\n  }\n\n  // Buffer rest of the input\n  inputOff += this._buffer(data, inputOff);\n\n  return out;\n};\n\nCipher.prototype.final = function final(buffer) {\n  var first;\n  if (buffer)\n    first = this.update(buffer);\n\n  var last;\n  if (this.type === 'encrypt')\n    last = this._finalEncrypt();\n  else\n    last = this._finalDecrypt();\n\n  if (first)\n    return first.concat(last);\n  else\n    return last;\n};\n\nCipher.prototype._pad = function _pad(buffer, off) {\n  if (off === 0)\n    return false;\n\n  while (off < buffer.length)\n    buffer[off++] = 0;\n\n  return true;\n};\n\nCipher.prototype._finalEncrypt = function _finalEncrypt() {\n  if (!this._pad(this.buffer, this.bufferOff))\n    return [];\n\n  var out = new Array(this.blockSize);\n  this._update(this.buffer, 0, out, 0);\n  return out;\n};\n\nCipher.prototype._unpad = function _unpad(buffer) {\n  return buffer;\n};\n\nCipher.prototype._finalDecrypt = function _finalDecrypt() {\n  assert.equal(this.bufferOff, this.blockSize, 'Not enough data to decrypt');\n  var out = new Array(this.blockSize);\n  this._flushBuffer(out, 0);\n\n  return this._unpad(out);\n};\n","'use strict';\n\nvar assert = require('minimalistic-assert');\nvar inherits = require('inherits');\n\nvar utils = require('./utils');\nvar Cipher = require('./cipher');\n\nfunction DESState() {\n  this.tmp = new Array(2);\n  this.keys = null;\n}\n\nfunction DES(options) {\n  Cipher.call(this, options);\n\n  var state = new DESState();\n  this._desState = state;\n\n  this.deriveKeys(state, options.key);\n}\ninherits(DES, Cipher);\nmodule.exports = DES;\n\nDES.create = function create(options) {\n  return new DES(options);\n};\n\nvar shiftTable = [\n  1, 1, 2, 2, 2, 2, 2, 2,\n  1, 2, 2, 2, 2, 2, 2, 1\n];\n\nDES.prototype.deriveKeys = function deriveKeys(state, key) {\n  state.keys = new Array(16 * 2);\n\n  assert.equal(key.length, this.blockSize, 'Invalid key length');\n\n  var kL = utils.readUInt32BE(key, 0);\n  var kR = utils.readUInt32BE(key, 4);\n\n  utils.pc1(kL, kR, state.tmp, 0);\n  kL = state.tmp[0];\n  kR = state.tmp[1];\n  for (var i = 0; i < state.keys.length; i += 2) {\n    var shift = shiftTable[i >>> 1];\n    kL = utils.r28shl(kL, shift);\n    kR = utils.r28shl(kR, shift);\n    utils.pc2(kL, kR, state.keys, i);\n  }\n};\n\nDES.prototype._update = function _update(inp, inOff, out, outOff) {\n  var state = this._desState;\n\n  var l = utils.readUInt32BE(inp, inOff);\n  var r = utils.readUInt32BE(inp, inOff + 4);\n\n  // Initial Permutation\n  utils.ip(l, r, state.tmp, 0);\n  l = state.tmp[0];\n  r = state.tmp[1];\n\n  if (this.type === 'encrypt')\n    this._encrypt(state, l, r, state.tmp, 0);\n  else\n    this._decrypt(state, l, r, state.tmp, 0);\n\n  l = state.tmp[0];\n  r = state.tmp[1];\n\n  utils.writeUInt32BE(out, l, outOff);\n  utils.writeUInt32BE(out, r, outOff + 4);\n};\n\nDES.prototype._pad = function _pad(buffer, off) {\n  var value = buffer.length - off;\n  for (var i = off; i < buffer.length; i++)\n    buffer[i] = value;\n\n  return true;\n};\n\nDES.prototype._unpad = function _unpad(buffer) {\n  var pad = buffer[buffer.length - 1];\n  for (var i = buffer.length - pad; i < buffer.length; i++)\n    assert.equal(buffer[i], pad);\n\n  return buffer.slice(0, buffer.length - pad);\n};\n\nDES.prototype._encrypt = function _encrypt(state, lStart, rStart, out, off) {\n  var l = lStart;\n  var r = rStart;\n\n  // Apply f() x16 times\n  for (var i = 0; i < state.keys.length; i += 2) {\n    var keyL = state.keys[i];\n    var keyR = state.keys[i + 1];\n\n    // f(r, k)\n    utils.expand(r, state.tmp, 0);\n\n    keyL ^= state.tmp[0];\n    keyR ^= state.tmp[1];\n    var s = utils.substitute(keyL, keyR);\n    var f = utils.permute(s);\n\n    var t = r;\n    r = (l ^ f) >>> 0;\n    l = t;\n  }\n\n  // Reverse Initial Permutation\n  utils.rip(r, l, out, off);\n};\n\nDES.prototype._decrypt = function _decrypt(state, lStart, rStart, out, off) {\n  var l = rStart;\n  var r = lStart;\n\n  // Apply f() x16 times\n  for (var i = state.keys.length - 2; i >= 0; i -= 2) {\n    var keyL = state.keys[i];\n    var keyR = state.keys[i + 1];\n\n    // f(r, k)\n    utils.expand(l, state.tmp, 0);\n\n    keyL ^= state.tmp[0];\n    keyR ^= state.tmp[1];\n    var s = utils.substitute(keyL, keyR);\n    var f = utils.permute(s);\n\n    var t = l;\n    l = (r ^ f) >>> 0;\n    r = t;\n  }\n\n  // Reverse Initial Permutation\n  utils.rip(l, r, out, off);\n};\n","'use strict';\n\nvar assert = require('minimalistic-assert');\nvar inherits = require('inherits');\n\nvar Cipher = require('./cipher');\nvar DES = require('./des');\n\nfunction EDEState(type, key) {\n  assert.equal(key.length, 24, 'Invalid key length');\n\n  var k1 = key.slice(0, 8);\n  var k2 = key.slice(8, 16);\n  var k3 = key.slice(16, 24);\n\n  if (type === 'encrypt') {\n    this.ciphers = [\n      DES.create({ type: 'encrypt', key: k1 }),\n      DES.create({ type: 'decrypt', key: k2 }),\n      DES.create({ type: 'encrypt', key: k3 })\n    ];\n  } else {\n    this.ciphers = [\n      DES.create({ type: 'decrypt', key: k3 }),\n      DES.create({ type: 'encrypt', key: k2 }),\n      DES.create({ type: 'decrypt', key: k1 })\n    ];\n  }\n}\n\nfunction EDE(options) {\n  Cipher.call(this, options);\n\n  var state = new EDEState(this.type, this.options.key);\n  this._edeState = state;\n}\ninherits(EDE, Cipher);\n\nmodule.exports = EDE;\n\nEDE.create = function create(options) {\n  return new EDE(options);\n};\n\nEDE.prototype._update = function _update(inp, inOff, out, outOff) {\n  var state = this._edeState;\n\n  state.ciphers[0]._update(inp, inOff, out, outOff);\n  state.ciphers[1]._update(out, outOff, out, outOff);\n  state.ciphers[2]._update(out, outOff, out, outOff);\n};\n\nEDE.prototype._pad = DES.prototype._pad;\nEDE.prototype._unpad = DES.prototype._unpad;\n","'use strict';\n\nexports.readUInt32BE = function readUInt32BE(bytes, off) {\n  var res =  (bytes[0 + off] << 24) |\n             (bytes[1 + off] << 16) |\n             (bytes[2 + off] << 8) |\n             bytes[3 + off];\n  return res >>> 0;\n};\n\nexports.writeUInt32BE = function writeUInt32BE(bytes, value, off) {\n  bytes[0 + off] = value >>> 24;\n  bytes[1 + off] = (value >>> 16) & 0xff;\n  bytes[2 + off] = (value >>> 8) & 0xff;\n  bytes[3 + off] = value & 0xff;\n};\n\nexports.ip = function ip(inL, inR, out, off) {\n  var outL = 0;\n  var outR = 0;\n\n  for (var i = 6; i >= 0; i -= 2) {\n    for (var j = 0; j <= 24; j += 8) {\n      outL <<= 1;\n      outL |= (inR >>> (j + i)) & 1;\n    }\n    for (var j = 0; j <= 24; j += 8) {\n      outL <<= 1;\n      outL |= (inL >>> (j + i)) & 1;\n    }\n  }\n\n  for (var i = 6; i >= 0; i -= 2) {\n    for (var j = 1; j <= 25; j += 8) {\n      outR <<= 1;\n      outR |= (inR >>> (j + i)) & 1;\n    }\n    for (var j = 1; j <= 25; j += 8) {\n      outR <<= 1;\n      outR |= (inL >>> (j + i)) & 1;\n    }\n  }\n\n  out[off + 0] = outL >>> 0;\n  out[off + 1] = outR >>> 0;\n};\n\nexports.rip = function rip(inL, inR, out, off) {\n  var outL = 0;\n  var outR = 0;\n\n  for (var i = 0; i < 4; i++) {\n    for (var j = 24; j >= 0; j -= 8) {\n      outL <<= 1;\n      outL |= (inR >>> (j + i)) & 1;\n      outL <<= 1;\n      outL |= (inL >>> (j + i)) & 1;\n    }\n  }\n  for (var i = 4; i < 8; i++) {\n    for (var j = 24; j >= 0; j -= 8) {\n      outR <<= 1;\n      outR |= (inR >>> (j + i)) & 1;\n      outR <<= 1;\n      outR |= (inL >>> (j + i)) & 1;\n    }\n  }\n\n  out[off + 0] = outL >>> 0;\n  out[off + 1] = outR >>> 0;\n};\n\nexports.pc1 = function pc1(inL, inR, out, off) {\n  var outL = 0;\n  var outR = 0;\n\n  // 7, 15, 23, 31, 39, 47, 55, 63\n  // 6, 14, 22, 30, 39, 47, 55, 63\n  // 5, 13, 21, 29, 39, 47, 55, 63\n  // 4, 12, 20, 28\n  for (var i = 7; i >= 5; i--) {\n    for (var j = 0; j <= 24; j += 8) {\n      outL <<= 1;\n      outL |= (inR >> (j + i)) & 1;\n    }\n    for (var j = 0; j <= 24; j += 8) {\n      outL <<= 1;\n      outL |= (inL >> (j + i)) & 1;\n    }\n  }\n  for (var j = 0; j <= 24; j += 8) {\n    outL <<= 1;\n    outL |= (inR >> (j + i)) & 1;\n  }\n\n  // 1, 9, 17, 25, 33, 41, 49, 57\n  // 2, 10, 18, 26, 34, 42, 50, 58\n  // 3, 11, 19, 27, 35, 43, 51, 59\n  // 36, 44, 52, 60\n  for (var i = 1; i <= 3; i++) {\n    for (var j = 0; j <= 24; j += 8) {\n      outR <<= 1;\n      outR |= (inR >> (j + i)) & 1;\n    }\n    for (var j = 0; j <= 24; j += 8) {\n      outR <<= 1;\n      outR |= (inL >> (j + i)) & 1;\n    }\n  }\n  for (var j = 0; j <= 24; j += 8) {\n    outR <<= 1;\n    outR |= (inL >> (j + i)) & 1;\n  }\n\n  out[off + 0] = outL >>> 0;\n  out[off + 1] = outR >>> 0;\n};\n\nexports.r28shl = function r28shl(num, shift) {\n  return ((num << shift) & 0xfffffff) | (num >>> (28 - shift));\n};\n\nvar pc2table = [\n  // inL => outL\n  14, 11, 17, 4, 27, 23, 25, 0,\n  13, 22, 7, 18, 5, 9, 16, 24,\n  2, 20, 12, 21, 1, 8, 15, 26,\n\n  // inR => outR\n  15, 4, 25, 19, 9, 1, 26, 16,\n  5, 11, 23, 8, 12, 7, 17, 0,\n  22, 3, 10, 14, 6, 20, 27, 24\n];\n\nexports.pc2 = function pc2(inL, inR, out, off) {\n  var outL = 0;\n  var outR = 0;\n\n  var len = pc2table.length >>> 1;\n  for (var i = 0; i < len; i++) {\n    outL <<= 1;\n    outL |= (inL >>> pc2table[i]) & 0x1;\n  }\n  for (var i = len; i < pc2table.length; i++) {\n    outR <<= 1;\n    outR |= (inR >>> pc2table[i]) & 0x1;\n  }\n\n  out[off + 0] = outL >>> 0;\n  out[off + 1] = outR >>> 0;\n};\n\nexports.expand = function expand(r, out, off) {\n  var outL = 0;\n  var outR = 0;\n\n  outL = ((r & 1) << 5) | (r >>> 27);\n  for (var i = 23; i >= 15; i -= 4) {\n    outL <<= 6;\n    outL |= (r >>> i) & 0x3f;\n  }\n  for (var i = 11; i >= 3; i -= 4) {\n    outR |= (r >>> i) & 0x3f;\n    outR <<= 6;\n  }\n  outR |= ((r & 0x1f) << 1) | (r >>> 31);\n\n  out[off + 0] = outL >>> 0;\n  out[off + 1] = outR >>> 0;\n};\n\nvar sTable = [\n  14, 0, 4, 15, 13, 7, 1, 4, 2, 14, 15, 2, 11, 13, 8, 1,\n  3, 10, 10, 6, 6, 12, 12, 11, 5, 9, 9, 5, 0, 3, 7, 8,\n  4, 15, 1, 12, 14, 8, 8, 2, 13, 4, 6, 9, 2, 1, 11, 7,\n  15, 5, 12, 11, 9, 3, 7, 14, 3, 10, 10, 0, 5, 6, 0, 13,\n\n  15, 3, 1, 13, 8, 4, 14, 7, 6, 15, 11, 2, 3, 8, 4, 14,\n  9, 12, 7, 0, 2, 1, 13, 10, 12, 6, 0, 9, 5, 11, 10, 5,\n  0, 13, 14, 8, 7, 10, 11, 1, 10, 3, 4, 15, 13, 4, 1, 2,\n  5, 11, 8, 6, 12, 7, 6, 12, 9, 0, 3, 5, 2, 14, 15, 9,\n\n  10, 13, 0, 7, 9, 0, 14, 9, 6, 3, 3, 4, 15, 6, 5, 10,\n  1, 2, 13, 8, 12, 5, 7, 14, 11, 12, 4, 11, 2, 15, 8, 1,\n  13, 1, 6, 10, 4, 13, 9, 0, 8, 6, 15, 9, 3, 8, 0, 7,\n  11, 4, 1, 15, 2, 14, 12, 3, 5, 11, 10, 5, 14, 2, 7, 12,\n\n  7, 13, 13, 8, 14, 11, 3, 5, 0, 6, 6, 15, 9, 0, 10, 3,\n  1, 4, 2, 7, 8, 2, 5, 12, 11, 1, 12, 10, 4, 14, 15, 9,\n  10, 3, 6, 15, 9, 0, 0, 6, 12, 10, 11, 1, 7, 13, 13, 8,\n  15, 9, 1, 4, 3, 5, 14, 11, 5, 12, 2, 7, 8, 2, 4, 14,\n\n  2, 14, 12, 11, 4, 2, 1, 12, 7, 4, 10, 7, 11, 13, 6, 1,\n  8, 5, 5, 0, 3, 15, 15, 10, 13, 3, 0, 9, 14, 8, 9, 6,\n  4, 11, 2, 8, 1, 12, 11, 7, 10, 1, 13, 14, 7, 2, 8, 13,\n  15, 6, 9, 15, 12, 0, 5, 9, 6, 10, 3, 4, 0, 5, 14, 3,\n\n  12, 10, 1, 15, 10, 4, 15, 2, 9, 7, 2, 12, 6, 9, 8, 5,\n  0, 6, 13, 1, 3, 13, 4, 14, 14, 0, 7, 11, 5, 3, 11, 8,\n  9, 4, 14, 3, 15, 2, 5, 12, 2, 9, 8, 5, 12, 15, 3, 10,\n  7, 11, 0, 14, 4, 1, 10, 7, 1, 6, 13, 0, 11, 8, 6, 13,\n\n  4, 13, 11, 0, 2, 11, 14, 7, 15, 4, 0, 9, 8, 1, 13, 10,\n  3, 14, 12, 3, 9, 5, 7, 12, 5, 2, 10, 15, 6, 8, 1, 6,\n  1, 6, 4, 11, 11, 13, 13, 8, 12, 1, 3, 4, 7, 10, 14, 7,\n  10, 9, 15, 5, 6, 0, 8, 15, 0, 14, 5, 2, 9, 3, 2, 12,\n\n  13, 1, 2, 15, 8, 13, 4, 8, 6, 10, 15, 3, 11, 7, 1, 4,\n  10, 12, 9, 5, 3, 6, 14, 11, 5, 0, 0, 14, 12, 9, 7, 2,\n  7, 2, 11, 1, 4, 14, 1, 7, 9, 4, 12, 10, 14, 8, 2, 13,\n  0, 15, 6, 12, 10, 9, 13, 0, 15, 3, 3, 5, 5, 6, 8, 11\n];\n\nexports.substitute = function substitute(inL, inR) {\n  var out = 0;\n  for (var i = 0; i < 4; i++) {\n    var b = (inL >>> (18 - i * 6)) & 0x3f;\n    var sb = sTable[i * 0x40 + b];\n\n    out <<= 4;\n    out |= sb;\n  }\n  for (var i = 0; i < 4; i++) {\n    var b = (inR >>> (18 - i * 6)) & 0x3f;\n    var sb = sTable[4 * 0x40 + i * 0x40 + b];\n\n    out <<= 4;\n    out |= sb;\n  }\n  return out >>> 0;\n};\n\nvar permuteTable = [\n  16, 25, 12, 11, 3, 20, 4, 15, 31, 17, 9, 6, 27, 14, 1, 22,\n  30, 24, 8, 18, 0, 5, 29, 23, 13, 19, 2, 26, 10, 21, 28, 7\n];\n\nexports.permute = function permute(num) {\n  var out = 0;\n  for (var i = 0; i < permuteTable.length; i++) {\n    out <<= 1;\n    out |= (num >>> permuteTable[i]) & 0x1;\n  }\n  return out >>> 0;\n};\n\nexports.padSplit = function padSplit(num, size, group) {\n  var str = num.toString(2);\n  while (str.length < size)\n    str = '0' + str;\n\n  var out = [];\n  for (var i = 0; i < size; i += group)\n    out.push(str.slice(i, i + group));\n  return out.join(' ');\n};\n","var generatePrime = require('./lib/generatePrime')\nvar primes = require('./lib/primes.json')\n\nvar DH = require('./lib/dh')\n\nfunction getDiffieHellman (mod) {\n  var prime = new Buffer(primes[mod].prime, 'hex')\n  var gen = new Buffer(primes[mod].gen, 'hex')\n\n  return new DH(prime, gen)\n}\n\nvar ENCODINGS = {\n  'binary': true, 'hex': true, 'base64': true\n}\n\nfunction createDiffieHellman (prime, enc, generator, genc) {\n  if (Buffer.isBuffer(enc) || ENCODINGS[enc] === undefined) {\n    return createDiffieHellman(prime, 'binary', enc, generator)\n  }\n\n  enc = enc || 'binary'\n  genc = genc || 'binary'\n  generator = generator || new Buffer([2])\n\n  if (!Buffer.isBuffer(generator)) {\n    generator = new Buffer(generator, genc)\n  }\n\n  if (typeof prime === 'number') {\n    return new DH(generatePrime(prime, generator), generator, true)\n  }\n\n  if (!Buffer.isBuffer(prime)) {\n    prime = new Buffer(prime, enc)\n  }\n\n  return new DH(prime, generator, true)\n}\n\nexports.DiffieHellmanGroup = exports.createDiffieHellmanGroup = exports.getDiffieHellman = getDiffieHellman\nexports.createDiffieHellman = exports.DiffieHellman = createDiffieHellman\n","var BN = require('bn.js');\nvar MillerRabin = require('miller-rabin');\nvar millerRabin = new MillerRabin();\nvar TWENTYFOUR = new BN(24);\nvar ELEVEN = new BN(11);\nvar TEN = new BN(10);\nvar THREE = new BN(3);\nvar SEVEN = new BN(7);\nvar primes = require('./generatePrime');\nvar randomBytes = require('randombytes');\nmodule.exports = DH;\n\nfunction setPublicKey(pub, enc) {\n  enc = enc || 'utf8';\n  if (!Buffer.isBuffer(pub)) {\n    pub = new Buffer(pub, enc);\n  }\n  this._pub = new BN(pub);\n  return this;\n}\n\nfunction setPrivateKey(priv, enc) {\n  enc = enc || 'utf8';\n  if (!Buffer.isBuffer(priv)) {\n    priv = new Buffer(priv, enc);\n  }\n  this._priv = new BN(priv);\n  return this;\n}\n\nvar primeCache = {};\nfunction checkPrime(prime, generator) {\n  var gen = generator.toString('hex');\n  var hex = [gen, prime.toString(16)].join('_');\n  if (hex in primeCache) {\n    return primeCache[hex];\n  }\n  var error = 0;\n\n  if (prime.isEven() ||\n    !primes.simpleSieve ||\n    !primes.fermatTest(prime) ||\n    !millerRabin.test(prime)) {\n    //not a prime so +1\n    error += 1;\n\n    if (gen === '02' || gen === '05') {\n      // we'd be able to check the generator\n      // it would fail so +8\n      error += 8;\n    } else {\n      //we wouldn't be able to test the generator\n      // so +4\n      error += 4;\n    }\n    primeCache[hex] = error;\n    return error;\n  }\n  if (!millerRabin.test(prime.shrn(1))) {\n    //not a safe prime\n    error += 2;\n  }\n  var rem;\n  switch (gen) {\n    case '02':\n      if (prime.mod(TWENTYFOUR).cmp(ELEVEN)) {\n        // unsuidable generator\n        error += 8;\n      }\n      break;\n    case '05':\n      rem = prime.mod(TEN);\n      if (rem.cmp(THREE) && rem.cmp(SEVEN)) {\n        // prime mod 10 needs to equal 3 or 7\n        error += 8;\n      }\n      break;\n    default:\n      error += 4;\n  }\n  primeCache[hex] = error;\n  return error;\n}\n\nfunction DH(prime, generator, malleable) {\n  this.setGenerator(generator);\n  this.__prime = new BN(prime);\n  this._prime = BN.mont(this.__prime);\n  this._primeLen = prime.length;\n  this._pub = undefined;\n  this._priv = undefined;\n  this._primeCode = undefined;\n  if (malleable) {\n    this.setPublicKey = setPublicKey;\n    this.setPrivateKey = setPrivateKey;\n  } else {\n    this._primeCode = 8;\n  }\n}\nObject.defineProperty(DH.prototype, 'verifyError', {\n  enumerable: true,\n  get: function () {\n    if (typeof this._primeCode !== 'number') {\n      this._primeCode = checkPrime(this.__prime, this.__gen);\n    }\n    return this._primeCode;\n  }\n});\nDH.prototype.generateKeys = function () {\n  if (!this._priv) {\n    this._priv = new BN(randomBytes(this._primeLen));\n  }\n  this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed();\n  return this.getPublicKey();\n};\n\nDH.prototype.computeSecret = function (other) {\n  other = new BN(other);\n  other = other.toRed(this._prime);\n  var secret = other.redPow(this._priv).fromRed();\n  var out = new Buffer(secret.toArray());\n  var prime = this.getPrime();\n  if (out.length < prime.length) {\n    var front = new Buffer(prime.length - out.length);\n    front.fill(0);\n    out = Buffer.concat([front, out]);\n  }\n  return out;\n};\n\nDH.prototype.getPublicKey = function getPublicKey(enc) {\n  return formatReturnValue(this._pub, enc);\n};\n\nDH.prototype.getPrivateKey = function getPrivateKey(enc) {\n  return formatReturnValue(this._priv, enc);\n};\n\nDH.prototype.getPrime = function (enc) {\n  return formatReturnValue(this.__prime, enc);\n};\n\nDH.prototype.getGenerator = function (enc) {\n  return formatReturnValue(this._gen, enc);\n};\n\nDH.prototype.setGenerator = function (gen, enc) {\n  enc = enc || 'utf8';\n  if (!Buffer.isBuffer(gen)) {\n    gen = new Buffer(gen, enc);\n  }\n  this.__gen = gen;\n  this._gen = new BN(gen);\n  return this;\n};\n\nfunction formatReturnValue(bn, enc) {\n  var buf = new Buffer(bn.toArray());\n  if (!enc) {\n    return buf;\n  } else {\n    return buf.toString(enc);\n  }\n}\n","var randomBytes = require('randombytes');\nmodule.exports = findPrime;\nfindPrime.simpleSieve = simpleSieve;\nfindPrime.fermatTest = fermatTest;\nvar BN = require('bn.js');\nvar TWENTYFOUR = new BN(24);\nvar MillerRabin = require('miller-rabin');\nvar millerRabin = new MillerRabin();\nvar ONE = new BN(1);\nvar TWO = new BN(2);\nvar FIVE = new BN(5);\nvar SIXTEEN = new BN(16);\nvar EIGHT = new BN(8);\nvar TEN = new BN(10);\nvar THREE = new BN(3);\nvar SEVEN = new BN(7);\nvar ELEVEN = new BN(11);\nvar FOUR = new BN(4);\nvar TWELVE = new BN(12);\nvar primes = null;\n\nfunction _getPrimes() {\n  if (primes !== null)\n    return primes;\n\n  var limit = 0x100000;\n  var res = [];\n  res[0] = 2;\n  for (var i = 1, k = 3; k < limit; k += 2) {\n    var sqrt = Math.ceil(Math.sqrt(k));\n    for (var j = 0; j < i && res[j] <= sqrt; j++)\n      if (k % res[j] === 0)\n        break;\n\n    if (i !== j && res[j] <= sqrt)\n      continue;\n\n    res[i++] = k;\n  }\n  primes = res;\n  return res;\n}\n\nfunction simpleSieve(p) {\n  var primes = _getPrimes();\n\n  for (var i = 0; i < primes.length; i++)\n    if (p.modn(primes[i]) === 0) {\n      if (p.cmpn(primes[i]) === 0) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n  return true;\n}\n\nfunction fermatTest(p) {\n  var red = BN.mont(p);\n  return TWO.toRed(red).redPow(p.subn(1)).fromRed().cmpn(1) === 0;\n}\n\nfunction findPrime(bits, gen) {\n  if (bits < 16) {\n    // this is what openssl does\n    if (gen === 2 || gen === 5) {\n      return new BN([0x8c, 0x7b]);\n    } else {\n      return new BN([0x8c, 0x27]);\n    }\n  }\n  gen = new BN(gen);\n\n  var num, n2;\n\n  while (true) {\n    num = new BN(randomBytes(Math.ceil(bits / 8)));\n    while (num.bitLength() > bits) {\n      num.ishrn(1);\n    }\n    if (num.isEven()) {\n      num.iadd(ONE);\n    }\n    if (!num.testn(1)) {\n      num.iadd(TWO);\n    }\n    if (!gen.cmp(TWO)) {\n      while (num.mod(TWENTYFOUR).cmp(ELEVEN)) {\n        num.iadd(FOUR);\n      }\n    } else if (!gen.cmp(FIVE)) {\n      while (num.mod(TEN).cmp(THREE)) {\n        num.iadd(FOUR);\n      }\n    }\n    n2 = num.shrn(1);\n    if (simpleSieve(n2) && simpleSieve(num) &&\n      fermatTest(n2) && fermatTest(num) &&\n      millerRabin.test(n2) && millerRabin.test(num)) {\n      return num;\n    }\n  }\n\n}\n","'use strict';\n\nvar elliptic = exports;\n\nelliptic.version = require('../package.json').version;\nelliptic.utils = require('./elliptic/utils');\nelliptic.rand = require('brorand');\nelliptic.curve = require('./elliptic/curve');\nelliptic.curves = require('./elliptic/curves');\n\n// Protocols\nelliptic.ec = require('./elliptic/ec');\nelliptic.eddsa = require('./elliptic/eddsa');\n","'use strict';\n\nvar BN = require('bn.js');\nvar utils = require('../utils');\nvar getNAF = utils.getNAF;\nvar getJSF = utils.getJSF;\nvar assert = utils.assert;\n\nfunction BaseCurve(type, conf) {\n  this.type = type;\n  this.p = new BN(conf.p, 16);\n\n  // Use Montgomery, when there is no fast reduction for the prime\n  this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);\n\n  // Useful for many curves\n  this.zero = new BN(0).toRed(this.red);\n  this.one = new BN(1).toRed(this.red);\n  this.two = new BN(2).toRed(this.red);\n\n  // Curve configuration, optional\n  this.n = conf.n && new BN(conf.n, 16);\n  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);\n\n  // Temporary arrays\n  this._wnafT1 = new Array(4);\n  this._wnafT2 = new Array(4);\n  this._wnafT3 = new Array(4);\n  this._wnafT4 = new Array(4);\n\n  this._bitLength = this.n ? this.n.bitLength() : 0;\n\n  // Generalized Greg Maxwell's trick\n  var adjustCount = this.n && this.p.div(this.n);\n  if (!adjustCount || adjustCount.cmpn(100) > 0) {\n    this.redN = null;\n  } else {\n    this._maxwellTrick = true;\n    this.redN = this.n.toRed(this.red);\n  }\n}\nmodule.exports = BaseCurve;\n\nBaseCurve.prototype.point = function point() {\n  throw new Error('Not implemented');\n};\n\nBaseCurve.prototype.validate = function validate() {\n  throw new Error('Not implemented');\n};\n\nBaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {\n  assert(p.precomputed);\n  var doubles = p._getDoubles();\n\n  var naf = getNAF(k, 1, this._bitLength);\n  var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);\n  I /= 3;\n\n  // Translate into more windowed form\n  var repr = [];\n  for (var j = 0; j < naf.length; j += doubles.step) {\n    var nafW = 0;\n    for (var k = j + doubles.step - 1; k >= j; k--)\n      nafW = (nafW << 1) + naf[k];\n    repr.push(nafW);\n  }\n\n  var a = this.jpoint(null, null, null);\n  var b = this.jpoint(null, null, null);\n  for (var i = I; i > 0; i--) {\n    for (var j = 0; j < repr.length; j++) {\n      var nafW = repr[j];\n      if (nafW === i)\n        b = b.mixedAdd(doubles.points[j]);\n      else if (nafW === -i)\n        b = b.mixedAdd(doubles.points[j].neg());\n    }\n    a = a.add(b);\n  }\n  return a.toP();\n};\n\nBaseCurve.prototype._wnafMul = function _wnafMul(p, k) {\n  var w = 4;\n\n  // Precompute window\n  var nafPoints = p._getNAFPoints(w);\n  w = nafPoints.wnd;\n  var wnd = nafPoints.points;\n\n  // Get NAF form\n  var naf = getNAF(k, w, this._bitLength);\n\n  // Add `this`*(N+1) for every w-NAF index\n  var acc = this.jpoint(null, null, null);\n  for (var i = naf.length - 1; i >= 0; i--) {\n    // Count zeroes\n    for (var k = 0; i >= 0 && naf[i] === 0; i--)\n      k++;\n    if (i >= 0)\n      k++;\n    acc = acc.dblp(k);\n\n    if (i < 0)\n      break;\n    var z = naf[i];\n    assert(z !== 0);\n    if (p.type === 'affine') {\n      // J +- P\n      if (z > 0)\n        acc = acc.mixedAdd(wnd[(z - 1) >> 1]);\n      else\n        acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());\n    } else {\n      // J +- J\n      if (z > 0)\n        acc = acc.add(wnd[(z - 1) >> 1]);\n      else\n        acc = acc.add(wnd[(-z - 1) >> 1].neg());\n    }\n  }\n  return p.type === 'affine' ? acc.toP() : acc;\n};\n\nBaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,\n                                                       points,\n                                                       coeffs,\n                                                       len,\n                                                       jacobianResult) {\n  var wndWidth = this._wnafT1;\n  var wnd = this._wnafT2;\n  var naf = this._wnafT3;\n\n  // Fill all arrays\n  var max = 0;\n  for (var i = 0; i < len; i++) {\n    var p = points[i];\n    var nafPoints = p._getNAFPoints(defW);\n    wndWidth[i] = nafPoints.wnd;\n    wnd[i] = nafPoints.points;\n  }\n\n  // Comb small window NAFs\n  for (var i = len - 1; i >= 1; i -= 2) {\n    var a = i - 1;\n    var b = i;\n    if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {\n      naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);\n      naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);\n      max = Math.max(naf[a].length, max);\n      max = Math.max(naf[b].length, max);\n      continue;\n    }\n\n    var comb = [\n      points[a], /* 1 */\n      null, /* 3 */\n      null, /* 5 */\n      points[b] /* 7 */\n    ];\n\n    // Try to avoid Projective points, if possible\n    if (points[a].y.cmp(points[b].y) === 0) {\n      comb[1] = points[a].add(points[b]);\n      comb[2] = points[a].toJ().mixedAdd(points[b].neg());\n    } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {\n      comb[1] = points[a].toJ().mixedAdd(points[b]);\n      comb[2] = points[a].add(points[b].neg());\n    } else {\n      comb[1] = points[a].toJ().mixedAdd(points[b]);\n      comb[2] = points[a].toJ().mixedAdd(points[b].neg());\n    }\n\n    var index = [\n      -3, /* -1 -1 */\n      -1, /* -1 0 */\n      -5, /* -1 1 */\n      -7, /* 0 -1 */\n      0, /* 0 0 */\n      7, /* 0 1 */\n      5, /* 1 -1 */\n      1, /* 1 0 */\n      3  /* 1 1 */\n    ];\n\n    var jsf = getJSF(coeffs[a], coeffs[b]);\n    max = Math.max(jsf[0].length, max);\n    naf[a] = new Array(max);\n    naf[b] = new Array(max);\n    for (var j = 0; j < max; j++) {\n      var ja = jsf[0][j] | 0;\n      var jb = jsf[1][j] | 0;\n\n      naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];\n      naf[b][j] = 0;\n      wnd[a] = comb;\n    }\n  }\n\n  var acc = this.jpoint(null, null, null);\n  var tmp = this._wnafT4;\n  for (var i = max; i >= 0; i--) {\n    var k = 0;\n\n    while (i >= 0) {\n      var zero = true;\n      for (var j = 0; j < len; j++) {\n        tmp[j] = naf[j][i] | 0;\n        if (tmp[j] !== 0)\n          zero = false;\n      }\n      if (!zero)\n        break;\n      k++;\n      i--;\n    }\n    if (i >= 0)\n      k++;\n    acc = acc.dblp(k);\n    if (i < 0)\n      break;\n\n    for (var j = 0; j < len; j++) {\n      var z = tmp[j];\n      var p;\n      if (z === 0)\n        continue;\n      else if (z > 0)\n        p = wnd[j][(z - 1) >> 1];\n      else if (z < 0)\n        p = wnd[j][(-z - 1) >> 1].neg();\n\n      if (p.type === 'affine')\n        acc = acc.mixedAdd(p);\n      else\n        acc = acc.add(p);\n    }\n  }\n  // Zeroify references\n  for (var i = 0; i < len; i++)\n    wnd[i] = null;\n\n  if (jacobianResult)\n    return acc;\n  else\n    return acc.toP();\n};\n\nfunction BasePoint(curve, type) {\n  this.curve = curve;\n  this.type = type;\n  this.precomputed = null;\n}\nBaseCurve.BasePoint = BasePoint;\n\nBasePoint.prototype.eq = function eq(/*other*/) {\n  throw new Error('Not implemented');\n};\n\nBasePoint.prototype.validate = function validate() {\n  return this.curve.validate(this);\n};\n\nBaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {\n  bytes = utils.toArray(bytes, enc);\n\n  var len = this.p.byteLength();\n\n  // uncompressed, hybrid-odd, hybrid-even\n  if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&\n      bytes.length - 1 === 2 * len) {\n    if (bytes[0] === 0x06)\n      assert(bytes[bytes.length - 1] % 2 === 0);\n    else if (bytes[0] === 0x07)\n      assert(bytes[bytes.length - 1] % 2 === 1);\n\n    var res =  this.point(bytes.slice(1, 1 + len),\n                          bytes.slice(1 + len, 1 + 2 * len));\n\n    return res;\n  } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&\n              bytes.length - 1 === len) {\n    return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);\n  }\n  throw new Error('Unknown point format');\n};\n\nBasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {\n  return this.encode(enc, true);\n};\n\nBasePoint.prototype._encode = function _encode(compact) {\n  var len = this.curve.p.byteLength();\n  var x = this.getX().toArray('be', len);\n\n  if (compact)\n    return [ this.getY().isEven() ? 0x02 : 0x03 ].concat(x);\n\n  return [ 0x04 ].concat(x, this.getY().toArray('be', len)) ;\n};\n\nBasePoint.prototype.encode = function encode(enc, compact) {\n  return utils.encode(this._encode(compact), enc);\n};\n\nBasePoint.prototype.precompute = function precompute(power) {\n  if (this.precomputed)\n    return this;\n\n  var precomputed = {\n    doubles: null,\n    naf: null,\n    beta: null\n  };\n  precomputed.naf = this._getNAFPoints(8);\n  precomputed.doubles = this._getDoubles(4, power);\n  precomputed.beta = this._getBeta();\n  this.precomputed = precomputed;\n\n  return this;\n};\n\nBasePoint.prototype._hasDoubles = function _hasDoubles(k) {\n  if (!this.precomputed)\n    return false;\n\n  var doubles = this.precomputed.doubles;\n  if (!doubles)\n    return false;\n\n  return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);\n};\n\nBasePoint.prototype._getDoubles = function _getDoubles(step, power) {\n  if (this.precomputed && this.precomputed.doubles)\n    return this.precomputed.doubles;\n\n  var doubles = [ this ];\n  var acc = this;\n  for (var i = 0; i < power; i += step) {\n    for (var j = 0; j < step; j++)\n      acc = acc.dbl();\n    doubles.push(acc);\n  }\n  return {\n    step: step,\n    points: doubles\n  };\n};\n\nBasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {\n  if (this.precomputed && this.precomputed.naf)\n    return this.precomputed.naf;\n\n  var res = [ this ];\n  var max = (1 << wnd) - 1;\n  var dbl = max === 1 ? null : this.dbl();\n  for (var i = 1; i < max; i++)\n    res[i] = res[i - 1].add(dbl);\n  return {\n    wnd: wnd,\n    points: res\n  };\n};\n\nBasePoint.prototype._getBeta = function _getBeta() {\n  return null;\n};\n\nBasePoint.prototype.dblp = function dblp(k) {\n  var r = this;\n  for (var i = 0; i < k; i++)\n    r = r.dbl();\n  return r;\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar BN = require('bn.js');\nvar inherits = require('inherits');\nvar Base = require('./base');\n\nvar assert = utils.assert;\n\nfunction EdwardsCurve(conf) {\n  // NOTE: Important as we are creating point in Base.call()\n  this.twisted = (conf.a | 0) !== 1;\n  this.mOneA = this.twisted && (conf.a | 0) === -1;\n  this.extended = this.mOneA;\n\n  Base.call(this, 'edwards', conf);\n\n  this.a = new BN(conf.a, 16).umod(this.red.m);\n  this.a = this.a.toRed(this.red);\n  this.c = new BN(conf.c, 16).toRed(this.red);\n  this.c2 = this.c.redSqr();\n  this.d = new BN(conf.d, 16).toRed(this.red);\n  this.dd = this.d.redAdd(this.d);\n\n  assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);\n  this.oneC = (conf.c | 0) === 1;\n}\ninherits(EdwardsCurve, Base);\nmodule.exports = EdwardsCurve;\n\nEdwardsCurve.prototype._mulA = function _mulA(num) {\n  if (this.mOneA)\n    return num.redNeg();\n  else\n    return this.a.redMul(num);\n};\n\nEdwardsCurve.prototype._mulC = function _mulC(num) {\n  if (this.oneC)\n    return num;\n  else\n    return this.c.redMul(num);\n};\n\n// Just for compatibility with Short curve\nEdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {\n  return this.point(x, y, z, t);\n};\n\nEdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {\n  x = new BN(x, 16);\n  if (!x.red)\n    x = x.toRed(this.red);\n\n  var x2 = x.redSqr();\n  var rhs = this.c2.redSub(this.a.redMul(x2));\n  var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));\n\n  var y2 = rhs.redMul(lhs.redInvm());\n  var y = y2.redSqrt();\n  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)\n    throw new Error('invalid point');\n\n  var isOdd = y.fromRed().isOdd();\n  if (odd && !isOdd || !odd && isOdd)\n    y = y.redNeg();\n\n  return this.point(x, y);\n};\n\nEdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {\n  y = new BN(y, 16);\n  if (!y.red)\n    y = y.toRed(this.red);\n\n  // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)\n  var y2 = y.redSqr();\n  var lhs = y2.redSub(this.c2);\n  var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);\n  var x2 = lhs.redMul(rhs.redInvm());\n\n  if (x2.cmp(this.zero) === 0) {\n    if (odd)\n      throw new Error('invalid point');\n    else\n      return this.point(this.zero, y);\n  }\n\n  var x = x2.redSqrt();\n  if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)\n    throw new Error('invalid point');\n\n  if (x.fromRed().isOdd() !== odd)\n    x = x.redNeg();\n\n  return this.point(x, y);\n};\n\nEdwardsCurve.prototype.validate = function validate(point) {\n  if (point.isInfinity())\n    return true;\n\n  // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)\n  point.normalize();\n\n  var x2 = point.x.redSqr();\n  var y2 = point.y.redSqr();\n  var lhs = x2.redMul(this.a).redAdd(y2);\n  var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));\n\n  return lhs.cmp(rhs) === 0;\n};\n\nfunction Point(curve, x, y, z, t) {\n  Base.BasePoint.call(this, curve, 'projective');\n  if (x === null && y === null && z === null) {\n    this.x = this.curve.zero;\n    this.y = this.curve.one;\n    this.z = this.curve.one;\n    this.t = this.curve.zero;\n    this.zOne = true;\n  } else {\n    this.x = new BN(x, 16);\n    this.y = new BN(y, 16);\n    this.z = z ? new BN(z, 16) : this.curve.one;\n    this.t = t && new BN(t, 16);\n    if (!this.x.red)\n      this.x = this.x.toRed(this.curve.red);\n    if (!this.y.red)\n      this.y = this.y.toRed(this.curve.red);\n    if (!this.z.red)\n      this.z = this.z.toRed(this.curve.red);\n    if (this.t && !this.t.red)\n      this.t = this.t.toRed(this.curve.red);\n    this.zOne = this.z === this.curve.one;\n\n    // Use extended coordinates\n    if (this.curve.extended && !this.t) {\n      this.t = this.x.redMul(this.y);\n      if (!this.zOne)\n        this.t = this.t.redMul(this.z.redInvm());\n    }\n  }\n}\ninherits(Point, Base.BasePoint);\n\nEdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {\n  return Point.fromJSON(this, obj);\n};\n\nEdwardsCurve.prototype.point = function point(x, y, z, t) {\n  return new Point(this, x, y, z, t);\n};\n\nPoint.fromJSON = function fromJSON(curve, obj) {\n  return new Point(curve, obj[0], obj[1], obj[2]);\n};\n\nPoint.prototype.inspect = function inspect() {\n  if (this.isInfinity())\n    return '<EC Point Infinity>';\n  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +\n      ' y: ' + this.y.fromRed().toString(16, 2) +\n      ' z: ' + this.z.fromRed().toString(16, 2) + '>';\n};\n\nPoint.prototype.isInfinity = function isInfinity() {\n  // XXX This code assumes that zero is always zero in red\n  return this.x.cmpn(0) === 0 &&\n    (this.y.cmp(this.z) === 0 ||\n    (this.zOne && this.y.cmp(this.curve.c) === 0));\n};\n\nPoint.prototype._extDbl = function _extDbl() {\n  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html\n  //     #doubling-dbl-2008-hwcd\n  // 4M + 4S\n\n  // A = X1^2\n  var a = this.x.redSqr();\n  // B = Y1^2\n  var b = this.y.redSqr();\n  // C = 2 * Z1^2\n  var c = this.z.redSqr();\n  c = c.redIAdd(c);\n  // D = a * A\n  var d = this.curve._mulA(a);\n  // E = (X1 + Y1)^2 - A - B\n  var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);\n  // G = D + B\n  var g = d.redAdd(b);\n  // F = G - C\n  var f = g.redSub(c);\n  // H = D - B\n  var h = d.redSub(b);\n  // X3 = E * F\n  var nx = e.redMul(f);\n  // Y3 = G * H\n  var ny = g.redMul(h);\n  // T3 = E * H\n  var nt = e.redMul(h);\n  // Z3 = F * G\n  var nz = f.redMul(g);\n  return this.curve.point(nx, ny, nz, nt);\n};\n\nPoint.prototype._projDbl = function _projDbl() {\n  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html\n  //     #doubling-dbl-2008-bbjlp\n  //     #doubling-dbl-2007-bl\n  // and others\n  // Generally 3M + 4S or 2M + 4S\n\n  // B = (X1 + Y1)^2\n  var b = this.x.redAdd(this.y).redSqr();\n  // C = X1^2\n  var c = this.x.redSqr();\n  // D = Y1^2\n  var d = this.y.redSqr();\n\n  var nx;\n  var ny;\n  var nz;\n  if (this.curve.twisted) {\n    // E = a * C\n    var e = this.curve._mulA(c);\n    // F = E + D\n    var f = e.redAdd(d);\n    if (this.zOne) {\n      // X3 = (B - C - D) * (F - 2)\n      nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));\n      // Y3 = F * (E - D)\n      ny = f.redMul(e.redSub(d));\n      // Z3 = F^2 - 2 * F\n      nz = f.redSqr().redSub(f).redSub(f);\n    } else {\n      // H = Z1^2\n      var h = this.z.redSqr();\n      // J = F - 2 * H\n      var j = f.redSub(h).redISub(h);\n      // X3 = (B-C-D)*J\n      nx = b.redSub(c).redISub(d).redMul(j);\n      // Y3 = F * (E - D)\n      ny = f.redMul(e.redSub(d));\n      // Z3 = F * J\n      nz = f.redMul(j);\n    }\n  } else {\n    // E = C + D\n    var e = c.redAdd(d);\n    // H = (c * Z1)^2\n    var h = this.curve._mulC(this.z).redSqr();\n    // J = E - 2 * H\n    var j = e.redSub(h).redSub(h);\n    // X3 = c * (B - E) * J\n    nx = this.curve._mulC(b.redISub(e)).redMul(j);\n    // Y3 = c * E * (C - D)\n    ny = this.curve._mulC(e).redMul(c.redISub(d));\n    // Z3 = E * J\n    nz = e.redMul(j);\n  }\n  return this.curve.point(nx, ny, nz);\n};\n\nPoint.prototype.dbl = function dbl() {\n  if (this.isInfinity())\n    return this;\n\n  // Double in extended coordinates\n  if (this.curve.extended)\n    return this._extDbl();\n  else\n    return this._projDbl();\n};\n\nPoint.prototype._extAdd = function _extAdd(p) {\n  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html\n  //     #addition-add-2008-hwcd-3\n  // 8M\n\n  // A = (Y1 - X1) * (Y2 - X2)\n  var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));\n  // B = (Y1 + X1) * (Y2 + X2)\n  var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));\n  // C = T1 * k * T2\n  var c = this.t.redMul(this.curve.dd).redMul(p.t);\n  // D = Z1 * 2 * Z2\n  var d = this.z.redMul(p.z.redAdd(p.z));\n  // E = B - A\n  var e = b.redSub(a);\n  // F = D - C\n  var f = d.redSub(c);\n  // G = D + C\n  var g = d.redAdd(c);\n  // H = B + A\n  var h = b.redAdd(a);\n  // X3 = E * F\n  var nx = e.redMul(f);\n  // Y3 = G * H\n  var ny = g.redMul(h);\n  // T3 = E * H\n  var nt = e.redMul(h);\n  // Z3 = F * G\n  var nz = f.redMul(g);\n  return this.curve.point(nx, ny, nz, nt);\n};\n\nPoint.prototype._projAdd = function _projAdd(p) {\n  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html\n  //     #addition-add-2008-bbjlp\n  //     #addition-add-2007-bl\n  // 10M + 1S\n\n  // A = Z1 * Z2\n  var a = this.z.redMul(p.z);\n  // B = A^2\n  var b = a.redSqr();\n  // C = X1 * X2\n  var c = this.x.redMul(p.x);\n  // D = Y1 * Y2\n  var d = this.y.redMul(p.y);\n  // E = d * C * D\n  var e = this.curve.d.redMul(c).redMul(d);\n  // F = B - E\n  var f = b.redSub(e);\n  // G = B + E\n  var g = b.redAdd(e);\n  // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)\n  var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);\n  var nx = a.redMul(f).redMul(tmp);\n  var ny;\n  var nz;\n  if (this.curve.twisted) {\n    // Y3 = A * G * (D - a * C)\n    ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));\n    // Z3 = F * G\n    nz = f.redMul(g);\n  } else {\n    // Y3 = A * G * (D - C)\n    ny = a.redMul(g).redMul(d.redSub(c));\n    // Z3 = c * F * G\n    nz = this.curve._mulC(f).redMul(g);\n  }\n  return this.curve.point(nx, ny, nz);\n};\n\nPoint.prototype.add = function add(p) {\n  if (this.isInfinity())\n    return p;\n  if (p.isInfinity())\n    return this;\n\n  if (this.curve.extended)\n    return this._extAdd(p);\n  else\n    return this._projAdd(p);\n};\n\nPoint.prototype.mul = function mul(k) {\n  if (this._hasDoubles(k))\n    return this.curve._fixedNafMul(this, k);\n  else\n    return this.curve._wnafMul(this, k);\n};\n\nPoint.prototype.mulAdd = function mulAdd(k1, p, k2) {\n  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, false);\n};\n\nPoint.prototype.jmulAdd = function jmulAdd(k1, p, k2) {\n  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, true);\n};\n\nPoint.prototype.normalize = function normalize() {\n  if (this.zOne)\n    return this;\n\n  // Normalize coordinates\n  var zi = this.z.redInvm();\n  this.x = this.x.redMul(zi);\n  this.y = this.y.redMul(zi);\n  if (this.t)\n    this.t = this.t.redMul(zi);\n  this.z = this.curve.one;\n  this.zOne = true;\n  return this;\n};\n\nPoint.prototype.neg = function neg() {\n  return this.curve.point(this.x.redNeg(),\n                          this.y,\n                          this.z,\n                          this.t && this.t.redNeg());\n};\n\nPoint.prototype.getX = function getX() {\n  this.normalize();\n  return this.x.fromRed();\n};\n\nPoint.prototype.getY = function getY() {\n  this.normalize();\n  return this.y.fromRed();\n};\n\nPoint.prototype.eq = function eq(other) {\n  return this === other ||\n         this.getX().cmp(other.getX()) === 0 &&\n         this.getY().cmp(other.getY()) === 0;\n};\n\nPoint.prototype.eqXToP = function eqXToP(x) {\n  var rx = x.toRed(this.curve.red).redMul(this.z);\n  if (this.x.cmp(rx) === 0)\n    return true;\n\n  var xc = x.clone();\n  var t = this.curve.redN.redMul(this.z);\n  for (;;) {\n    xc.iadd(this.curve.n);\n    if (xc.cmp(this.curve.p) >= 0)\n      return false;\n\n    rx.redIAdd(t);\n    if (this.x.cmp(rx) === 0)\n      return true;\n  }\n};\n\n// Compatibility with BaseCurve\nPoint.prototype.toP = Point.prototype.normalize;\nPoint.prototype.mixedAdd = Point.prototype.add;\n","'use strict';\n\nvar curve = exports;\n\ncurve.base = require('./base');\ncurve.short = require('./short');\ncurve.mont = require('./mont');\ncurve.edwards = require('./edwards');\n","'use strict';\n\nvar BN = require('bn.js');\nvar inherits = require('inherits');\nvar Base = require('./base');\n\nvar utils = require('../utils');\n\nfunction MontCurve(conf) {\n  Base.call(this, 'mont', conf);\n\n  this.a = new BN(conf.a, 16).toRed(this.red);\n  this.b = new BN(conf.b, 16).toRed(this.red);\n  this.i4 = new BN(4).toRed(this.red).redInvm();\n  this.two = new BN(2).toRed(this.red);\n  this.a24 = this.i4.redMul(this.a.redAdd(this.two));\n}\ninherits(MontCurve, Base);\nmodule.exports = MontCurve;\n\nMontCurve.prototype.validate = function validate(point) {\n  var x = point.normalize().x;\n  var x2 = x.redSqr();\n  var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);\n  var y = rhs.redSqrt();\n\n  return y.redSqr().cmp(rhs) === 0;\n};\n\nfunction Point(curve, x, z) {\n  Base.BasePoint.call(this, curve, 'projective');\n  if (x === null && z === null) {\n    this.x = this.curve.one;\n    this.z = this.curve.zero;\n  } else {\n    this.x = new BN(x, 16);\n    this.z = new BN(z, 16);\n    if (!this.x.red)\n      this.x = this.x.toRed(this.curve.red);\n    if (!this.z.red)\n      this.z = this.z.toRed(this.curve.red);\n  }\n}\ninherits(Point, Base.BasePoint);\n\nMontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {\n  return this.point(utils.toArray(bytes, enc), 1);\n};\n\nMontCurve.prototype.point = function point(x, z) {\n  return new Point(this, x, z);\n};\n\nMontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {\n  return Point.fromJSON(this, obj);\n};\n\nPoint.prototype.precompute = function precompute() {\n  // No-op\n};\n\nPoint.prototype._encode = function _encode() {\n  return this.getX().toArray('be', this.curve.p.byteLength());\n};\n\nPoint.fromJSON = function fromJSON(curve, obj) {\n  return new Point(curve, obj[0], obj[1] || curve.one);\n};\n\nPoint.prototype.inspect = function inspect() {\n  if (this.isInfinity())\n    return '<EC Point Infinity>';\n  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +\n      ' z: ' + this.z.fromRed().toString(16, 2) + '>';\n};\n\nPoint.prototype.isInfinity = function isInfinity() {\n  // XXX This code assumes that zero is always zero in red\n  return this.z.cmpn(0) === 0;\n};\n\nPoint.prototype.dbl = function dbl() {\n  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3\n  // 2M + 2S + 4A\n\n  // A = X1 + Z1\n  var a = this.x.redAdd(this.z);\n  // AA = A^2\n  var aa = a.redSqr();\n  // B = X1 - Z1\n  var b = this.x.redSub(this.z);\n  // BB = B^2\n  var bb = b.redSqr();\n  // C = AA - BB\n  var c = aa.redSub(bb);\n  // X3 = AA * BB\n  var nx = aa.redMul(bb);\n  // Z3 = C * (BB + A24 * C)\n  var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));\n  return this.curve.point(nx, nz);\n};\n\nPoint.prototype.add = function add() {\n  throw new Error('Not supported on Montgomery curve');\n};\n\nPoint.prototype.diffAdd = function diffAdd(p, diff) {\n  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3\n  // 4M + 2S + 6A\n\n  // A = X2 + Z2\n  var a = this.x.redAdd(this.z);\n  // B = X2 - Z2\n  var b = this.x.redSub(this.z);\n  // C = X3 + Z3\n  var c = p.x.redAdd(p.z);\n  // D = X3 - Z3\n  var d = p.x.redSub(p.z);\n  // DA = D * A\n  var da = d.redMul(a);\n  // CB = C * B\n  var cb = c.redMul(b);\n  // X5 = Z1 * (DA + CB)^2\n  var nx = diff.z.redMul(da.redAdd(cb).redSqr());\n  // Z5 = X1 * (DA - CB)^2\n  var nz = diff.x.redMul(da.redISub(cb).redSqr());\n  return this.curve.point(nx, nz);\n};\n\nPoint.prototype.mul = function mul(k) {\n  var t = k.clone();\n  var a = this; // (N / 2) * Q + Q\n  var b = this.curve.point(null, null); // (N / 2) * Q\n  var c = this; // Q\n\n  for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))\n    bits.push(t.andln(1));\n\n  for (var i = bits.length - 1; i >= 0; i--) {\n    if (bits[i] === 0) {\n      // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q\n      a = a.diffAdd(b, c);\n      // N * Q = 2 * ((N / 2) * Q + Q))\n      b = b.dbl();\n    } else {\n      // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)\n      b = a.diffAdd(b, c);\n      // N * Q + Q = 2 * ((N / 2) * Q + Q)\n      a = a.dbl();\n    }\n  }\n  return b;\n};\n\nPoint.prototype.mulAdd = function mulAdd() {\n  throw new Error('Not supported on Montgomery curve');\n};\n\nPoint.prototype.jumlAdd = function jumlAdd() {\n  throw new Error('Not supported on Montgomery curve');\n};\n\nPoint.prototype.eq = function eq(other) {\n  return this.getX().cmp(other.getX()) === 0;\n};\n\nPoint.prototype.normalize = function normalize() {\n  this.x = this.x.redMul(this.z.redInvm());\n  this.z = this.curve.one;\n  return this;\n};\n\nPoint.prototype.getX = function getX() {\n  // Normalize coordinates\n  this.normalize();\n\n  return this.x.fromRed();\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar BN = require('bn.js');\nvar inherits = require('inherits');\nvar Base = require('./base');\n\nvar assert = utils.assert;\n\nfunction ShortCurve(conf) {\n  Base.call(this, 'short', conf);\n\n  this.a = new BN(conf.a, 16).toRed(this.red);\n  this.b = new BN(conf.b, 16).toRed(this.red);\n  this.tinv = this.two.redInvm();\n\n  this.zeroA = this.a.fromRed().cmpn(0) === 0;\n  this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;\n\n  // If the curve is endomorphic, precalculate beta and lambda\n  this.endo = this._getEndomorphism(conf);\n  this._endoWnafT1 = new Array(4);\n  this._endoWnafT2 = new Array(4);\n}\ninherits(ShortCurve, Base);\nmodule.exports = ShortCurve;\n\nShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {\n  // No efficient endomorphism\n  if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)\n    return;\n\n  // Compute beta and lambda, that lambda * P = (beta * Px; Py)\n  var beta;\n  var lambda;\n  if (conf.beta) {\n    beta = new BN(conf.beta, 16).toRed(this.red);\n  } else {\n    var betas = this._getEndoRoots(this.p);\n    // Choose the smallest beta\n    beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];\n    beta = beta.toRed(this.red);\n  }\n  if (conf.lambda) {\n    lambda = new BN(conf.lambda, 16);\n  } else {\n    // Choose the lambda that is matching selected beta\n    var lambdas = this._getEndoRoots(this.n);\n    if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {\n      lambda = lambdas[0];\n    } else {\n      lambda = lambdas[1];\n      assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);\n    }\n  }\n\n  // Get basis vectors, used for balanced length-two representation\n  var basis;\n  if (conf.basis) {\n    basis = conf.basis.map(function(vec) {\n      return {\n        a: new BN(vec.a, 16),\n        b: new BN(vec.b, 16)\n      };\n    });\n  } else {\n    basis = this._getEndoBasis(lambda);\n  }\n\n  return {\n    beta: beta,\n    lambda: lambda,\n    basis: basis\n  };\n};\n\nShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {\n  // Find roots of for x^2 + x + 1 in F\n  // Root = (-1 +- Sqrt(-3)) / 2\n  //\n  var red = num === this.p ? this.red : BN.mont(num);\n  var tinv = new BN(2).toRed(red).redInvm();\n  var ntinv = tinv.redNeg();\n\n  var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);\n\n  var l1 = ntinv.redAdd(s).fromRed();\n  var l2 = ntinv.redSub(s).fromRed();\n  return [ l1, l2 ];\n};\n\nShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {\n  // aprxSqrt >= sqrt(this.n)\n  var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));\n\n  // 3.74\n  // Run EGCD, until r(L + 1) < aprxSqrt\n  var u = lambda;\n  var v = this.n.clone();\n  var x1 = new BN(1);\n  var y1 = new BN(0);\n  var x2 = new BN(0);\n  var y2 = new BN(1);\n\n  // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)\n  var a0;\n  var b0;\n  // First vector\n  var a1;\n  var b1;\n  // Second vector\n  var a2;\n  var b2;\n\n  var prevR;\n  var i = 0;\n  var r;\n  var x;\n  while (u.cmpn(0) !== 0) {\n    var q = v.div(u);\n    r = v.sub(q.mul(u));\n    x = x2.sub(q.mul(x1));\n    var y = y2.sub(q.mul(y1));\n\n    if (!a1 && r.cmp(aprxSqrt) < 0) {\n      a0 = prevR.neg();\n      b0 = x1;\n      a1 = r.neg();\n      b1 = x;\n    } else if (a1 && ++i === 2) {\n      break;\n    }\n    prevR = r;\n\n    v = u;\n    u = r;\n    x2 = x1;\n    x1 = x;\n    y2 = y1;\n    y1 = y;\n  }\n  a2 = r.neg();\n  b2 = x;\n\n  var len1 = a1.sqr().add(b1.sqr());\n  var len2 = a2.sqr().add(b2.sqr());\n  if (len2.cmp(len1) >= 0) {\n    a2 = a0;\n    b2 = b0;\n  }\n\n  // Normalize signs\n  if (a1.negative) {\n    a1 = a1.neg();\n    b1 = b1.neg();\n  }\n  if (a2.negative) {\n    a2 = a2.neg();\n    b2 = b2.neg();\n  }\n\n  return [\n    { a: a1, b: b1 },\n    { a: a2, b: b2 }\n  ];\n};\n\nShortCurve.prototype._endoSplit = function _endoSplit(k) {\n  var basis = this.endo.basis;\n  var v1 = basis[0];\n  var v2 = basis[1];\n\n  var c1 = v2.b.mul(k).divRound(this.n);\n  var c2 = v1.b.neg().mul(k).divRound(this.n);\n\n  var p1 = c1.mul(v1.a);\n  var p2 = c2.mul(v2.a);\n  var q1 = c1.mul(v1.b);\n  var q2 = c2.mul(v2.b);\n\n  // Calculate answer\n  var k1 = k.sub(p1).sub(p2);\n  var k2 = q1.add(q2).neg();\n  return { k1: k1, k2: k2 };\n};\n\nShortCurve.prototype.pointFromX = function pointFromX(x, odd) {\n  x = new BN(x, 16);\n  if (!x.red)\n    x = x.toRed(this.red);\n\n  var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);\n  var y = y2.redSqrt();\n  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)\n    throw new Error('invalid point');\n\n  // XXX Is there any way to tell if the number is odd without converting it\n  // to non-red form?\n  var isOdd = y.fromRed().isOdd();\n  if (odd && !isOdd || !odd && isOdd)\n    y = y.redNeg();\n\n  return this.point(x, y);\n};\n\nShortCurve.prototype.validate = function validate(point) {\n  if (point.inf)\n    return true;\n\n  var x = point.x;\n  var y = point.y;\n\n  var ax = this.a.redMul(x);\n  var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);\n  return y.redSqr().redISub(rhs).cmpn(0) === 0;\n};\n\nShortCurve.prototype._endoWnafMulAdd =\n    function _endoWnafMulAdd(points, coeffs, jacobianResult) {\n  var npoints = this._endoWnafT1;\n  var ncoeffs = this._endoWnafT2;\n  for (var i = 0; i < points.length; i++) {\n    var split = this._endoSplit(coeffs[i]);\n    var p = points[i];\n    var beta = p._getBeta();\n\n    if (split.k1.negative) {\n      split.k1.ineg();\n      p = p.neg(true);\n    }\n    if (split.k2.negative) {\n      split.k2.ineg();\n      beta = beta.neg(true);\n    }\n\n    npoints[i * 2] = p;\n    npoints[i * 2 + 1] = beta;\n    ncoeffs[i * 2] = split.k1;\n    ncoeffs[i * 2 + 1] = split.k2;\n  }\n  var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);\n\n  // Clean-up references to points and coefficients\n  for (var j = 0; j < i * 2; j++) {\n    npoints[j] = null;\n    ncoeffs[j] = null;\n  }\n  return res;\n};\n\nfunction Point(curve, x, y, isRed) {\n  Base.BasePoint.call(this, curve, 'affine');\n  if (x === null && y === null) {\n    this.x = null;\n    this.y = null;\n    this.inf = true;\n  } else {\n    this.x = new BN(x, 16);\n    this.y = new BN(y, 16);\n    // Force redgomery representation when loading from JSON\n    if (isRed) {\n      this.x.forceRed(this.curve.red);\n      this.y.forceRed(this.curve.red);\n    }\n    if (!this.x.red)\n      this.x = this.x.toRed(this.curve.red);\n    if (!this.y.red)\n      this.y = this.y.toRed(this.curve.red);\n    this.inf = false;\n  }\n}\ninherits(Point, Base.BasePoint);\n\nShortCurve.prototype.point = function point(x, y, isRed) {\n  return new Point(this, x, y, isRed);\n};\n\nShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {\n  return Point.fromJSON(this, obj, red);\n};\n\nPoint.prototype._getBeta = function _getBeta() {\n  if (!this.curve.endo)\n    return;\n\n  var pre = this.precomputed;\n  if (pre && pre.beta)\n    return pre.beta;\n\n  var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);\n  if (pre) {\n    var curve = this.curve;\n    var endoMul = function(p) {\n      return curve.point(p.x.redMul(curve.endo.beta), p.y);\n    };\n    pre.beta = beta;\n    beta.precomputed = {\n      beta: null,\n      naf: pre.naf && {\n        wnd: pre.naf.wnd,\n        points: pre.naf.points.map(endoMul)\n      },\n      doubles: pre.doubles && {\n        step: pre.doubles.step,\n        points: pre.doubles.points.map(endoMul)\n      }\n    };\n  }\n  return beta;\n};\n\nPoint.prototype.toJSON = function toJSON() {\n  if (!this.precomputed)\n    return [ this.x, this.y ];\n\n  return [ this.x, this.y, this.precomputed && {\n    doubles: this.precomputed.doubles && {\n      step: this.precomputed.doubles.step,\n      points: this.precomputed.doubles.points.slice(1)\n    },\n    naf: this.precomputed.naf && {\n      wnd: this.precomputed.naf.wnd,\n      points: this.precomputed.naf.points.slice(1)\n    }\n  } ];\n};\n\nPoint.fromJSON = function fromJSON(curve, obj, red) {\n  if (typeof obj === 'string')\n    obj = JSON.parse(obj);\n  var res = curve.point(obj[0], obj[1], red);\n  if (!obj[2])\n    return res;\n\n  function obj2point(obj) {\n    return curve.point(obj[0], obj[1], red);\n  }\n\n  var pre = obj[2];\n  res.precomputed = {\n    beta: null,\n    doubles: pre.doubles && {\n      step: pre.doubles.step,\n      points: [ res ].concat(pre.doubles.points.map(obj2point))\n    },\n    naf: pre.naf && {\n      wnd: pre.naf.wnd,\n      points: [ res ].concat(pre.naf.points.map(obj2point))\n    }\n  };\n  return res;\n};\n\nPoint.prototype.inspect = function inspect() {\n  if (this.isInfinity())\n    return '<EC Point Infinity>';\n  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +\n      ' y: ' + this.y.fromRed().toString(16, 2) + '>';\n};\n\nPoint.prototype.isInfinity = function isInfinity() {\n  return this.inf;\n};\n\nPoint.prototype.add = function add(p) {\n  // O + P = P\n  if (this.inf)\n    return p;\n\n  // P + O = P\n  if (p.inf)\n    return this;\n\n  // P + P = 2P\n  if (this.eq(p))\n    return this.dbl();\n\n  // P + (-P) = O\n  if (this.neg().eq(p))\n    return this.curve.point(null, null);\n\n  // P + Q = O\n  if (this.x.cmp(p.x) === 0)\n    return this.curve.point(null, null);\n\n  var c = this.y.redSub(p.y);\n  if (c.cmpn(0) !== 0)\n    c = c.redMul(this.x.redSub(p.x).redInvm());\n  var nx = c.redSqr().redISub(this.x).redISub(p.x);\n  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);\n  return this.curve.point(nx, ny);\n};\n\nPoint.prototype.dbl = function dbl() {\n  if (this.inf)\n    return this;\n\n  // 2P = O\n  var ys1 = this.y.redAdd(this.y);\n  if (ys1.cmpn(0) === 0)\n    return this.curve.point(null, null);\n\n  var a = this.curve.a;\n\n  var x2 = this.x.redSqr();\n  var dyinv = ys1.redInvm();\n  var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);\n\n  var nx = c.redSqr().redISub(this.x.redAdd(this.x));\n  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);\n  return this.curve.point(nx, ny);\n};\n\nPoint.prototype.getX = function getX() {\n  return this.x.fromRed();\n};\n\nPoint.prototype.getY = function getY() {\n  return this.y.fromRed();\n};\n\nPoint.prototype.mul = function mul(k) {\n  k = new BN(k, 16);\n  if (this.isInfinity())\n    return this;\n  else if (this._hasDoubles(k))\n    return this.curve._fixedNafMul(this, k);\n  else if (this.curve.endo)\n    return this.curve._endoWnafMulAdd([ this ], [ k ]);\n  else\n    return this.curve._wnafMul(this, k);\n};\n\nPoint.prototype.mulAdd = function mulAdd(k1, p2, k2) {\n  var points = [ this, p2 ];\n  var coeffs = [ k1, k2 ];\n  if (this.curve.endo)\n    return this.curve._endoWnafMulAdd(points, coeffs);\n  else\n    return this.curve._wnafMulAdd(1, points, coeffs, 2);\n};\n\nPoint.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {\n  var points = [ this, p2 ];\n  var coeffs = [ k1, k2 ];\n  if (this.curve.endo)\n    return this.curve._endoWnafMulAdd(points, coeffs, true);\n  else\n    return this.curve._wnafMulAdd(1, points, coeffs, 2, true);\n};\n\nPoint.prototype.eq = function eq(p) {\n  return this === p ||\n         this.inf === p.inf &&\n             (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);\n};\n\nPoint.prototype.neg = function neg(_precompute) {\n  if (this.inf)\n    return this;\n\n  var res = this.curve.point(this.x, this.y.redNeg());\n  if (_precompute && this.precomputed) {\n    var pre = this.precomputed;\n    var negate = function(p) {\n      return p.neg();\n    };\n    res.precomputed = {\n      naf: pre.naf && {\n        wnd: pre.naf.wnd,\n        points: pre.naf.points.map(negate)\n      },\n      doubles: pre.doubles && {\n        step: pre.doubles.step,\n        points: pre.doubles.points.map(negate)\n      }\n    };\n  }\n  return res;\n};\n\nPoint.prototype.toJ = function toJ() {\n  if (this.inf)\n    return this.curve.jpoint(null, null, null);\n\n  var res = this.curve.jpoint(this.x, this.y, this.curve.one);\n  return res;\n};\n\nfunction JPoint(curve, x, y, z) {\n  Base.BasePoint.call(this, curve, 'jacobian');\n  if (x === null && y === null && z === null) {\n    this.x = this.curve.one;\n    this.y = this.curve.one;\n    this.z = new BN(0);\n  } else {\n    this.x = new BN(x, 16);\n    this.y = new BN(y, 16);\n    this.z = new BN(z, 16);\n  }\n  if (!this.x.red)\n    this.x = this.x.toRed(this.curve.red);\n  if (!this.y.red)\n    this.y = this.y.toRed(this.curve.red);\n  if (!this.z.red)\n    this.z = this.z.toRed(this.curve.red);\n\n  this.zOne = this.z === this.curve.one;\n}\ninherits(JPoint, Base.BasePoint);\n\nShortCurve.prototype.jpoint = function jpoint(x, y, z) {\n  return new JPoint(this, x, y, z);\n};\n\nJPoint.prototype.toP = function toP() {\n  if (this.isInfinity())\n    return this.curve.point(null, null);\n\n  var zinv = this.z.redInvm();\n  var zinv2 = zinv.redSqr();\n  var ax = this.x.redMul(zinv2);\n  var ay = this.y.redMul(zinv2).redMul(zinv);\n\n  return this.curve.point(ax, ay);\n};\n\nJPoint.prototype.neg = function neg() {\n  return this.curve.jpoint(this.x, this.y.redNeg(), this.z);\n};\n\nJPoint.prototype.add = function add(p) {\n  // O + P = P\n  if (this.isInfinity())\n    return p;\n\n  // P + O = P\n  if (p.isInfinity())\n    return this;\n\n  // 12M + 4S + 7A\n  var pz2 = p.z.redSqr();\n  var z2 = this.z.redSqr();\n  var u1 = this.x.redMul(pz2);\n  var u2 = p.x.redMul(z2);\n  var s1 = this.y.redMul(pz2.redMul(p.z));\n  var s2 = p.y.redMul(z2.redMul(this.z));\n\n  var h = u1.redSub(u2);\n  var r = s1.redSub(s2);\n  if (h.cmpn(0) === 0) {\n    if (r.cmpn(0) !== 0)\n      return this.curve.jpoint(null, null, null);\n    else\n      return this.dbl();\n  }\n\n  var h2 = h.redSqr();\n  var h3 = h2.redMul(h);\n  var v = u1.redMul(h2);\n\n  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);\n  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));\n  var nz = this.z.redMul(p.z).redMul(h);\n\n  return this.curve.jpoint(nx, ny, nz);\n};\n\nJPoint.prototype.mixedAdd = function mixedAdd(p) {\n  // O + P = P\n  if (this.isInfinity())\n    return p.toJ();\n\n  // P + O = P\n  if (p.isInfinity())\n    return this;\n\n  // 8M + 3S + 7A\n  var z2 = this.z.redSqr();\n  var u1 = this.x;\n  var u2 = p.x.redMul(z2);\n  var s1 = this.y;\n  var s2 = p.y.redMul(z2).redMul(this.z);\n\n  var h = u1.redSub(u2);\n  var r = s1.redSub(s2);\n  if (h.cmpn(0) === 0) {\n    if (r.cmpn(0) !== 0)\n      return this.curve.jpoint(null, null, null);\n    else\n      return this.dbl();\n  }\n\n  var h2 = h.redSqr();\n  var h3 = h2.redMul(h);\n  var v = u1.redMul(h2);\n\n  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);\n  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));\n  var nz = this.z.redMul(h);\n\n  return this.curve.jpoint(nx, ny, nz);\n};\n\nJPoint.prototype.dblp = function dblp(pow) {\n  if (pow === 0)\n    return this;\n  if (this.isInfinity())\n    return this;\n  if (!pow)\n    return this.dbl();\n\n  if (this.curve.zeroA || this.curve.threeA) {\n    var r = this;\n    for (var i = 0; i < pow; i++)\n      r = r.dbl();\n    return r;\n  }\n\n  // 1M + 2S + 1A + N * (4S + 5M + 8A)\n  // N = 1 => 6M + 6S + 9A\n  var a = this.curve.a;\n  var tinv = this.curve.tinv;\n\n  var jx = this.x;\n  var jy = this.y;\n  var jz = this.z;\n  var jz4 = jz.redSqr().redSqr();\n\n  // Reuse results\n  var jyd = jy.redAdd(jy);\n  for (var i = 0; i < pow; i++) {\n    var jx2 = jx.redSqr();\n    var jyd2 = jyd.redSqr();\n    var jyd4 = jyd2.redSqr();\n    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));\n\n    var t1 = jx.redMul(jyd2);\n    var nx = c.redSqr().redISub(t1.redAdd(t1));\n    var t2 = t1.redISub(nx);\n    var dny = c.redMul(t2);\n    dny = dny.redIAdd(dny).redISub(jyd4);\n    var nz = jyd.redMul(jz);\n    if (i + 1 < pow)\n      jz4 = jz4.redMul(jyd4);\n\n    jx = nx;\n    jz = nz;\n    jyd = dny;\n  }\n\n  return this.curve.jpoint(jx, jyd.redMul(tinv), jz);\n};\n\nJPoint.prototype.dbl = function dbl() {\n  if (this.isInfinity())\n    return this;\n\n  if (this.curve.zeroA)\n    return this._zeroDbl();\n  else if (this.curve.threeA)\n    return this._threeDbl();\n  else\n    return this._dbl();\n};\n\nJPoint.prototype._zeroDbl = function _zeroDbl() {\n  var nx;\n  var ny;\n  var nz;\n  // Z = 1\n  if (this.zOne) {\n    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html\n    //     #doubling-mdbl-2007-bl\n    // 1M + 5S + 14A\n\n    // XX = X1^2\n    var xx = this.x.redSqr();\n    // YY = Y1^2\n    var yy = this.y.redSqr();\n    // YYYY = YY^2\n    var yyyy = yy.redSqr();\n    // S = 2 * ((X1 + YY)^2 - XX - YYYY)\n    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);\n    s = s.redIAdd(s);\n    // M = 3 * XX + a; a = 0\n    var m = xx.redAdd(xx).redIAdd(xx);\n    // T = M ^ 2 - 2*S\n    var t = m.redSqr().redISub(s).redISub(s);\n\n    // 8 * YYYY\n    var yyyy8 = yyyy.redIAdd(yyyy);\n    yyyy8 = yyyy8.redIAdd(yyyy8);\n    yyyy8 = yyyy8.redIAdd(yyyy8);\n\n    // X3 = T\n    nx = t;\n    // Y3 = M * (S - T) - 8 * YYYY\n    ny = m.redMul(s.redISub(t)).redISub(yyyy8);\n    // Z3 = 2*Y1\n    nz = this.y.redAdd(this.y);\n  } else {\n    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html\n    //     #doubling-dbl-2009-l\n    // 2M + 5S + 13A\n\n    // A = X1^2\n    var a = this.x.redSqr();\n    // B = Y1^2\n    var b = this.y.redSqr();\n    // C = B^2\n    var c = b.redSqr();\n    // D = 2 * ((X1 + B)^2 - A - C)\n    var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);\n    d = d.redIAdd(d);\n    // E = 3 * A\n    var e = a.redAdd(a).redIAdd(a);\n    // F = E^2\n    var f = e.redSqr();\n\n    // 8 * C\n    var c8 = c.redIAdd(c);\n    c8 = c8.redIAdd(c8);\n    c8 = c8.redIAdd(c8);\n\n    // X3 = F - 2 * D\n    nx = f.redISub(d).redISub(d);\n    // Y3 = E * (D - X3) - 8 * C\n    ny = e.redMul(d.redISub(nx)).redISub(c8);\n    // Z3 = 2 * Y1 * Z1\n    nz = this.y.redMul(this.z);\n    nz = nz.redIAdd(nz);\n  }\n\n  return this.curve.jpoint(nx, ny, nz);\n};\n\nJPoint.prototype._threeDbl = function _threeDbl() {\n  var nx;\n  var ny;\n  var nz;\n  // Z = 1\n  if (this.zOne) {\n    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html\n    //     #doubling-mdbl-2007-bl\n    // 1M + 5S + 15A\n\n    // XX = X1^2\n    var xx = this.x.redSqr();\n    // YY = Y1^2\n    var yy = this.y.redSqr();\n    // YYYY = YY^2\n    var yyyy = yy.redSqr();\n    // S = 2 * ((X1 + YY)^2 - XX - YYYY)\n    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);\n    s = s.redIAdd(s);\n    // M = 3 * XX + a\n    var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);\n    // T = M^2 - 2 * S\n    var t = m.redSqr().redISub(s).redISub(s);\n    // X3 = T\n    nx = t;\n    // Y3 = M * (S - T) - 8 * YYYY\n    var yyyy8 = yyyy.redIAdd(yyyy);\n    yyyy8 = yyyy8.redIAdd(yyyy8);\n    yyyy8 = yyyy8.redIAdd(yyyy8);\n    ny = m.redMul(s.redISub(t)).redISub(yyyy8);\n    // Z3 = 2 * Y1\n    nz = this.y.redAdd(this.y);\n  } else {\n    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b\n    // 3M + 5S\n\n    // delta = Z1^2\n    var delta = this.z.redSqr();\n    // gamma = Y1^2\n    var gamma = this.y.redSqr();\n    // beta = X1 * gamma\n    var beta = this.x.redMul(gamma);\n    // alpha = 3 * (X1 - delta) * (X1 + delta)\n    var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));\n    alpha = alpha.redAdd(alpha).redIAdd(alpha);\n    // X3 = alpha^2 - 8 * beta\n    var beta4 = beta.redIAdd(beta);\n    beta4 = beta4.redIAdd(beta4);\n    var beta8 = beta4.redAdd(beta4);\n    nx = alpha.redSqr().redISub(beta8);\n    // Z3 = (Y1 + Z1)^2 - gamma - delta\n    nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);\n    // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2\n    var ggamma8 = gamma.redSqr();\n    ggamma8 = ggamma8.redIAdd(ggamma8);\n    ggamma8 = ggamma8.redIAdd(ggamma8);\n    ggamma8 = ggamma8.redIAdd(ggamma8);\n    ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);\n  }\n\n  return this.curve.jpoint(nx, ny, nz);\n};\n\nJPoint.prototype._dbl = function _dbl() {\n  var a = this.curve.a;\n\n  // 4M + 6S + 10A\n  var jx = this.x;\n  var jy = this.y;\n  var jz = this.z;\n  var jz4 = jz.redSqr().redSqr();\n\n  var jx2 = jx.redSqr();\n  var jy2 = jy.redSqr();\n\n  var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));\n\n  var jxd4 = jx.redAdd(jx);\n  jxd4 = jxd4.redIAdd(jxd4);\n  var t1 = jxd4.redMul(jy2);\n  var nx = c.redSqr().redISub(t1.redAdd(t1));\n  var t2 = t1.redISub(nx);\n\n  var jyd8 = jy2.redSqr();\n  jyd8 = jyd8.redIAdd(jyd8);\n  jyd8 = jyd8.redIAdd(jyd8);\n  jyd8 = jyd8.redIAdd(jyd8);\n  var ny = c.redMul(t2).redISub(jyd8);\n  var nz = jy.redAdd(jy).redMul(jz);\n\n  return this.curve.jpoint(nx, ny, nz);\n};\n\nJPoint.prototype.trpl = function trpl() {\n  if (!this.curve.zeroA)\n    return this.dbl().add(this);\n\n  // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl\n  // 5M + 10S + ...\n\n  // XX = X1^2\n  var xx = this.x.redSqr();\n  // YY = Y1^2\n  var yy = this.y.redSqr();\n  // ZZ = Z1^2\n  var zz = this.z.redSqr();\n  // YYYY = YY^2\n  var yyyy = yy.redSqr();\n  // M = 3 * XX + a * ZZ2; a = 0\n  var m = xx.redAdd(xx).redIAdd(xx);\n  // MM = M^2\n  var mm = m.redSqr();\n  // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM\n  var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);\n  e = e.redIAdd(e);\n  e = e.redAdd(e).redIAdd(e);\n  e = e.redISub(mm);\n  // EE = E^2\n  var ee = e.redSqr();\n  // T = 16*YYYY\n  var t = yyyy.redIAdd(yyyy);\n  t = t.redIAdd(t);\n  t = t.redIAdd(t);\n  t = t.redIAdd(t);\n  // U = (M + E)^2 - MM - EE - T\n  var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);\n  // X3 = 4 * (X1 * EE - 4 * YY * U)\n  var yyu4 = yy.redMul(u);\n  yyu4 = yyu4.redIAdd(yyu4);\n  yyu4 = yyu4.redIAdd(yyu4);\n  var nx = this.x.redMul(ee).redISub(yyu4);\n  nx = nx.redIAdd(nx);\n  nx = nx.redIAdd(nx);\n  // Y3 = 8 * Y1 * (U * (T - U) - E * EE)\n  var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));\n  ny = ny.redIAdd(ny);\n  ny = ny.redIAdd(ny);\n  ny = ny.redIAdd(ny);\n  // Z3 = (Z1 + E)^2 - ZZ - EE\n  var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);\n\n  return this.curve.jpoint(nx, ny, nz);\n};\n\nJPoint.prototype.mul = function mul(k, kbase) {\n  k = new BN(k, kbase);\n\n  return this.curve._wnafMul(this, k);\n};\n\nJPoint.prototype.eq = function eq(p) {\n  if (p.type === 'affine')\n    return this.eq(p.toJ());\n\n  if (this === p)\n    return true;\n\n  // x1 * z2^2 == x2 * z1^2\n  var z2 = this.z.redSqr();\n  var pz2 = p.z.redSqr();\n  if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)\n    return false;\n\n  // y1 * z2^3 == y2 * z1^3\n  var z3 = z2.redMul(this.z);\n  var pz3 = pz2.redMul(p.z);\n  return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;\n};\n\nJPoint.prototype.eqXToP = function eqXToP(x) {\n  var zs = this.z.redSqr();\n  var rx = x.toRed(this.curve.red).redMul(zs);\n  if (this.x.cmp(rx) === 0)\n    return true;\n\n  var xc = x.clone();\n  var t = this.curve.redN.redMul(zs);\n  for (;;) {\n    xc.iadd(this.curve.n);\n    if (xc.cmp(this.curve.p) >= 0)\n      return false;\n\n    rx.redIAdd(t);\n    if (this.x.cmp(rx) === 0)\n      return true;\n  }\n};\n\nJPoint.prototype.inspect = function inspect() {\n  if (this.isInfinity())\n    return '<EC JPoint Infinity>';\n  return '<EC JPoint x: ' + this.x.toString(16, 2) +\n      ' y: ' + this.y.toString(16, 2) +\n      ' z: ' + this.z.toString(16, 2) + '>';\n};\n\nJPoint.prototype.isInfinity = function isInfinity() {\n  // XXX This code assumes that zero is always zero in red\n  return this.z.cmpn(0) === 0;\n};\n","'use strict';\n\nvar curves = exports;\n\nvar hash = require('hash.js');\nvar curve = require('./curve');\nvar utils = require('./utils');\n\nvar assert = utils.assert;\n\nfunction PresetCurve(options) {\n  if (options.type === 'short')\n    this.curve = new curve.short(options);\n  else if (options.type === 'edwards')\n    this.curve = new curve.edwards(options);\n  else\n    this.curve = new curve.mont(options);\n  this.g = this.curve.g;\n  this.n = this.curve.n;\n  this.hash = options.hash;\n\n  assert(this.g.validate(), 'Invalid curve');\n  assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');\n}\ncurves.PresetCurve = PresetCurve;\n\nfunction defineCurve(name, options) {\n  Object.defineProperty(curves, name, {\n    configurable: true,\n    enumerable: true,\n    get: function() {\n      var curve = new PresetCurve(options);\n      Object.defineProperty(curves, name, {\n        configurable: true,\n        enumerable: true,\n        value: curve\n      });\n      return curve;\n    }\n  });\n}\n\ndefineCurve('p192', {\n  type: 'short',\n  prime: 'p192',\n  p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',\n  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',\n  b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',\n  n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',\n  hash: hash.sha256,\n  gRed: false,\n  g: [\n    '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',\n    '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811'\n  ]\n});\n\ndefineCurve('p224', {\n  type: 'short',\n  prime: 'p224',\n  p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',\n  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',\n  b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',\n  n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',\n  hash: hash.sha256,\n  gRed: false,\n  g: [\n    'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',\n    'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34'\n  ]\n});\n\ndefineCurve('p256', {\n  type: 'short',\n  prime: null,\n  p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',\n  a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',\n  b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',\n  n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',\n  hash: hash.sha256,\n  gRed: false,\n  g: [\n    '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',\n    '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5'\n  ]\n});\n\ndefineCurve('p384', {\n  type: 'short',\n  prime: null,\n  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +\n     'fffffffe ffffffff 00000000 00000000 ffffffff',\n  a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +\n     'fffffffe ffffffff 00000000 00000000 fffffffc',\n  b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +\n     '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',\n  n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +\n     'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',\n  hash: hash.sha384,\n  gRed: false,\n  g: [\n    'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +\n    '5502f25d bf55296c 3a545e38 72760ab7',\n    '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +\n    '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f'\n  ]\n});\n\ndefineCurve('p521', {\n  type: 'short',\n  prime: null,\n  p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +\n     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +\n     'ffffffff ffffffff ffffffff ffffffff ffffffff',\n  a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +\n     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +\n     'ffffffff ffffffff ffffffff ffffffff fffffffc',\n  b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +\n     '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +\n     '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',\n  n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +\n     'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +\n     'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',\n  hash: hash.sha512,\n  gRed: false,\n  g: [\n    '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +\n    '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +\n    'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',\n    '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +\n    '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +\n    '3fad0761 353c7086 a272c240 88be9476 9fd16650'\n  ]\n});\n\ndefineCurve('curve25519', {\n  type: 'mont',\n  prime: 'p25519',\n  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',\n  a: '76d06',\n  b: '1',\n  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',\n  hash: hash.sha256,\n  gRed: false,\n  g: [\n    '9'\n  ]\n});\n\ndefineCurve('ed25519', {\n  type: 'edwards',\n  prime: 'p25519',\n  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',\n  a: '-1',\n  c: '1',\n  // -121665 * (121666^(-1)) (mod P)\n  d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',\n  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',\n  hash: hash.sha256,\n  gRed: false,\n  g: [\n    '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',\n\n    // 4/5\n    '6666666666666666666666666666666666666666666666666666666666666658'\n  ]\n});\n\nvar pre;\ntry {\n  pre = require('./precomputed/secp256k1');\n} catch (e) {\n  pre = undefined;\n}\n\ndefineCurve('secp256k1', {\n  type: 'short',\n  prime: 'k256',\n  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',\n  a: '0',\n  b: '7',\n  n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',\n  h: '1',\n  hash: hash.sha256,\n\n  // Precomputed endomorphism\n  beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',\n  lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',\n  basis: [\n    {\n      a: '3086d221a7d46bcde86c90e49284eb15',\n      b: '-e4437ed6010e88286f547fa90abfe4c3'\n    },\n    {\n      a: '114ca50f7a8e2f3f657c1108d9d44cfd8',\n      b: '3086d221a7d46bcde86c90e49284eb15'\n    }\n  ],\n\n  gRed: false,\n  g: [\n    '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',\n    '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',\n    pre\n  ]\n});\n","'use strict';\n\nvar BN = require('bn.js');\nvar HmacDRBG = require('hmac-drbg');\nvar utils = require('../utils');\nvar curves = require('../curves');\nvar rand = require('brorand');\nvar assert = utils.assert;\n\nvar KeyPair = require('./key');\nvar Signature = require('./signature');\n\nfunction EC(options) {\n  if (!(this instanceof EC))\n    return new EC(options);\n\n  // Shortcut `elliptic.ec(curve-name)`\n  if (typeof options === 'string') {\n    assert(curves.hasOwnProperty(options), 'Unknown curve ' + options);\n\n    options = curves[options];\n  }\n\n  // Shortcut for `elliptic.ec(elliptic.curves.curveName)`\n  if (options instanceof curves.PresetCurve)\n    options = { curve: options };\n\n  this.curve = options.curve.curve;\n  this.n = this.curve.n;\n  this.nh = this.n.ushrn(1);\n  this.g = this.curve.g;\n\n  // Point on curve\n  this.g = options.curve.g;\n  this.g.precompute(options.curve.n.bitLength() + 1);\n\n  // Hash for function for DRBG\n  this.hash = options.hash || options.curve.hash;\n}\nmodule.exports = EC;\n\nEC.prototype.keyPair = function keyPair(options) {\n  return new KeyPair(this, options);\n};\n\nEC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {\n  return KeyPair.fromPrivate(this, priv, enc);\n};\n\nEC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {\n  return KeyPair.fromPublic(this, pub, enc);\n};\n\nEC.prototype.genKeyPair = function genKeyPair(options) {\n  if (!options)\n    options = {};\n\n  // Instantiate Hmac_DRBG\n  var drbg = new HmacDRBG({\n    hash: this.hash,\n    pers: options.pers,\n    persEnc: options.persEnc || 'utf8',\n    entropy: options.entropy || rand(this.hash.hmacStrength),\n    entropyEnc: options.entropy && options.entropyEnc || 'utf8',\n    nonce: this.n.toArray()\n  });\n\n  var bytes = this.n.byteLength();\n  var ns2 = this.n.sub(new BN(2));\n  do {\n    var priv = new BN(drbg.generate(bytes));\n    if (priv.cmp(ns2) > 0)\n      continue;\n\n    priv.iaddn(1);\n    return this.keyFromPrivate(priv);\n  } while (true);\n};\n\nEC.prototype._truncateToN = function truncateToN(msg, truncOnly) {\n  var delta = msg.byteLength() * 8 - this.n.bitLength();\n  if (delta > 0)\n    msg = msg.ushrn(delta);\n  if (!truncOnly && msg.cmp(this.n) >= 0)\n    return msg.sub(this.n);\n  else\n    return msg;\n};\n\nEC.prototype.sign = function sign(msg, key, enc, options) {\n  if (typeof enc === 'object') {\n    options = enc;\n    enc = null;\n  }\n  if (!options)\n    options = {};\n\n  key = this.keyFromPrivate(key, enc);\n  msg = this._truncateToN(new BN(msg, 16));\n\n  // Zero-extend key to provide enough entropy\n  var bytes = this.n.byteLength();\n  var bkey = key.getPrivate().toArray('be', bytes);\n\n  // Zero-extend nonce to have the same byte size as N\n  var nonce = msg.toArray('be', bytes);\n\n  // Instantiate Hmac_DRBG\n  var drbg = new HmacDRBG({\n    hash: this.hash,\n    entropy: bkey,\n    nonce: nonce,\n    pers: options.pers,\n    persEnc: options.persEnc || 'utf8'\n  });\n\n  // Number of bytes to generate\n  var ns1 = this.n.sub(new BN(1));\n\n  for (var iter = 0; true; iter++) {\n    var k = options.k ?\n        options.k(iter) :\n        new BN(drbg.generate(this.n.byteLength()));\n    k = this._truncateToN(k, true);\n    if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)\n      continue;\n\n    var kp = this.g.mul(k);\n    if (kp.isInfinity())\n      continue;\n\n    var kpX = kp.getX();\n    var r = kpX.umod(this.n);\n    if (r.cmpn(0) === 0)\n      continue;\n\n    var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));\n    s = s.umod(this.n);\n    if (s.cmpn(0) === 0)\n      continue;\n\n    var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |\n                        (kpX.cmp(r) !== 0 ? 2 : 0);\n\n    // Use complement of `s`, if it is > `n / 2`\n    if (options.canonical && s.cmp(this.nh) > 0) {\n      s = this.n.sub(s);\n      recoveryParam ^= 1;\n    }\n\n    return new Signature({ r: r, s: s, recoveryParam: recoveryParam });\n  }\n};\n\nEC.prototype.verify = function verify(msg, signature, key, enc) {\n  msg = this._truncateToN(new BN(msg, 16));\n  key = this.keyFromPublic(key, enc);\n  signature = new Signature(signature, 'hex');\n\n  // Perform primitive values validation\n  var r = signature.r;\n  var s = signature.s;\n  if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)\n    return false;\n  if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)\n    return false;\n\n  // Validate signature\n  var sinv = s.invm(this.n);\n  var u1 = sinv.mul(msg).umod(this.n);\n  var u2 = sinv.mul(r).umod(this.n);\n\n  if (!this.curve._maxwellTrick) {\n    var p = this.g.mulAdd(u1, key.getPublic(), u2);\n    if (p.isInfinity())\n      return false;\n\n    return p.getX().umod(this.n).cmp(r) === 0;\n  }\n\n  // NOTE: Greg Maxwell's trick, inspired by:\n  // https://git.io/vad3K\n\n  var p = this.g.jmulAdd(u1, key.getPublic(), u2);\n  if (p.isInfinity())\n    return false;\n\n  // Compare `p.x` of Jacobian point with `r`,\n  // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the\n  // inverse of `p.z^2`\n  return p.eqXToP(r);\n};\n\nEC.prototype.recoverPubKey = function(msg, signature, j, enc) {\n  assert((3 & j) === j, 'The recovery param is more than two bits');\n  signature = new Signature(signature, enc);\n\n  var n = this.n;\n  var e = new BN(msg);\n  var r = signature.r;\n  var s = signature.s;\n\n  // A set LSB signifies that the y-coordinate is odd\n  var isYOdd = j & 1;\n  var isSecondKey = j >> 1;\n  if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)\n    throw new Error('Unable to find sencond key candinate');\n\n  // 1.1. Let x = r + jn.\n  if (isSecondKey)\n    r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);\n  else\n    r = this.curve.pointFromX(r, isYOdd);\n\n  var rInv = signature.r.invm(n);\n  var s1 = n.sub(e).mul(rInv).umod(n);\n  var s2 = s.mul(rInv).umod(n);\n\n  // 1.6.1 Compute Q = r^-1 (sR -  eG)\n  //               Q = r^-1 (sR + -eG)\n  return this.g.mulAdd(s1, r, s2);\n};\n\nEC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {\n  signature = new Signature(signature, enc);\n  if (signature.recoveryParam !== null)\n    return signature.recoveryParam;\n\n  for (var i = 0; i < 4; i++) {\n    var Qprime;\n    try {\n      Qprime = this.recoverPubKey(e, signature, i);\n    } catch (e) {\n      continue;\n    }\n\n    if (Qprime.eq(Q))\n      return i;\n  }\n  throw new Error('Unable to find valid recovery factor');\n};\n","'use strict';\n\nvar BN = require('bn.js');\nvar utils = require('../utils');\nvar assert = utils.assert;\n\nfunction KeyPair(ec, options) {\n  this.ec = ec;\n  this.priv = null;\n  this.pub = null;\n\n  // KeyPair(ec, { priv: ..., pub: ... })\n  if (options.priv)\n    this._importPrivate(options.priv, options.privEnc);\n  if (options.pub)\n    this._importPublic(options.pub, options.pubEnc);\n}\nmodule.exports = KeyPair;\n\nKeyPair.fromPublic = function fromPublic(ec, pub, enc) {\n  if (pub instanceof KeyPair)\n    return pub;\n\n  return new KeyPair(ec, {\n    pub: pub,\n    pubEnc: enc\n  });\n};\n\nKeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {\n  if (priv instanceof KeyPair)\n    return priv;\n\n  return new KeyPair(ec, {\n    priv: priv,\n    privEnc: enc\n  });\n};\n\nKeyPair.prototype.validate = function validate() {\n  var pub = this.getPublic();\n\n  if (pub.isInfinity())\n    return { result: false, reason: 'Invalid public key' };\n  if (!pub.validate())\n    return { result: false, reason: 'Public key is not a point' };\n  if (!pub.mul(this.ec.curve.n).isInfinity())\n    return { result: false, reason: 'Public key * N != O' };\n\n  return { result: true, reason: null };\n};\n\nKeyPair.prototype.getPublic = function getPublic(compact, enc) {\n  // compact is optional argument\n  if (typeof compact === 'string') {\n    enc = compact;\n    compact = null;\n  }\n\n  if (!this.pub)\n    this.pub = this.ec.g.mul(this.priv);\n\n  if (!enc)\n    return this.pub;\n\n  return this.pub.encode(enc, compact);\n};\n\nKeyPair.prototype.getPrivate = function getPrivate(enc) {\n  if (enc === 'hex')\n    return this.priv.toString(16, 2);\n  else\n    return this.priv;\n};\n\nKeyPair.prototype._importPrivate = function _importPrivate(key, enc) {\n  this.priv = new BN(key, enc || 16);\n\n  // Ensure that the priv won't be bigger than n, otherwise we may fail\n  // in fixed multiplication method\n  this.priv = this.priv.umod(this.ec.curve.n);\n};\n\nKeyPair.prototype._importPublic = function _importPublic(key, enc) {\n  if (key.x || key.y) {\n    // Montgomery points only have an `x` coordinate.\n    // Weierstrass/Edwards points on the other hand have both `x` and\n    // `y` coordinates.\n    if (this.ec.curve.type === 'mont') {\n      assert(key.x, 'Need x coordinate');\n    } else if (this.ec.curve.type === 'short' ||\n               this.ec.curve.type === 'edwards') {\n      assert(key.x && key.y, 'Need both x and y coordinate');\n    }\n    this.pub = this.ec.curve.point(key.x, key.y);\n    return;\n  }\n  this.pub = this.ec.curve.decodePoint(key, enc);\n};\n\n// ECDH\nKeyPair.prototype.derive = function derive(pub) {\n  return pub.mul(this.priv).getX();\n};\n\n// ECDSA\nKeyPair.prototype.sign = function sign(msg, enc, options) {\n  return this.ec.sign(msg, this, enc, options);\n};\n\nKeyPair.prototype.verify = function verify(msg, signature) {\n  return this.ec.verify(msg, signature, this);\n};\n\nKeyPair.prototype.inspect = function inspect() {\n  return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +\n         ' pub: ' + (this.pub && this.pub.inspect()) + ' >';\n};\n","'use strict';\n\nvar BN = require('bn.js');\n\nvar utils = require('../utils');\nvar assert = utils.assert;\n\nfunction Signature(options, enc) {\n  if (options instanceof Signature)\n    return options;\n\n  if (this._importDER(options, enc))\n    return;\n\n  assert(options.r && options.s, 'Signature without r or s');\n  this.r = new BN(options.r, 16);\n  this.s = new BN(options.s, 16);\n  if (options.recoveryParam === undefined)\n    this.recoveryParam = null;\n  else\n    this.recoveryParam = options.recoveryParam;\n}\nmodule.exports = Signature;\n\nfunction Position() {\n  this.place = 0;\n}\n\nfunction getLength(buf, p) {\n  var initial = buf[p.place++];\n  if (!(initial & 0x80)) {\n    return initial;\n  }\n  var octetLen = initial & 0xf;\n  var val = 0;\n  for (var i = 0, off = p.place; i < octetLen; i++, off++) {\n    val <<= 8;\n    val |= buf[off];\n  }\n  p.place = off;\n  return val;\n}\n\nfunction rmPadding(buf) {\n  var i = 0;\n  var len = buf.length - 1;\n  while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {\n    i++;\n  }\n  if (i === 0) {\n    return buf;\n  }\n  return buf.slice(i);\n}\n\nSignature.prototype._importDER = function _importDER(data, enc) {\n  data = utils.toArray(data, enc);\n  var p = new Position();\n  if (data[p.place++] !== 0x30) {\n    return false;\n  }\n  var len = getLength(data, p);\n  if ((len + p.place) !== data.length) {\n    return false;\n  }\n  if (data[p.place++] !== 0x02) {\n    return false;\n  }\n  var rlen = getLength(data, p);\n  var r = data.slice(p.place, rlen + p.place);\n  p.place += rlen;\n  if (data[p.place++] !== 0x02) {\n    return false;\n  }\n  var slen = getLength(data, p);\n  if (data.length !== slen + p.place) {\n    return false;\n  }\n  var s = data.slice(p.place, slen + p.place);\n  if (r[0] === 0 && (r[1] & 0x80)) {\n    r = r.slice(1);\n  }\n  if (s[0] === 0 && (s[1] & 0x80)) {\n    s = s.slice(1);\n  }\n\n  this.r = new BN(r);\n  this.s = new BN(s);\n  this.recoveryParam = null;\n\n  return true;\n};\n\nfunction constructLength(arr, len) {\n  if (len < 0x80) {\n    arr.push(len);\n    return;\n  }\n  var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);\n  arr.push(octets | 0x80);\n  while (--octets) {\n    arr.push((len >>> (octets << 3)) & 0xff);\n  }\n  arr.push(len);\n}\n\nSignature.prototype.toDER = function toDER(enc) {\n  var r = this.r.toArray();\n  var s = this.s.toArray();\n\n  // Pad values\n  if (r[0] & 0x80)\n    r = [ 0 ].concat(r);\n  // Pad values\n  if (s[0] & 0x80)\n    s = [ 0 ].concat(s);\n\n  r = rmPadding(r);\n  s = rmPadding(s);\n\n  while (!s[0] && !(s[1] & 0x80)) {\n    s = s.slice(1);\n  }\n  var arr = [ 0x02 ];\n  constructLength(arr, r.length);\n  arr = arr.concat(r);\n  arr.push(0x02);\n  constructLength(arr, s.length);\n  var backHalf = arr.concat(s);\n  var res = [ 0x30 ];\n  constructLength(res, backHalf.length);\n  res = res.concat(backHalf);\n  return utils.encode(res, enc);\n};\n","'use strict';\n\nvar hash = require('hash.js');\nvar curves = require('../curves');\nvar utils = require('../utils');\nvar assert = utils.assert;\nvar parseBytes = utils.parseBytes;\nvar KeyPair = require('./key');\nvar Signature = require('./signature');\n\nfunction EDDSA(curve) {\n  assert(curve === 'ed25519', 'only tested with ed25519 so far');\n\n  if (!(this instanceof EDDSA))\n    return new EDDSA(curve);\n\n  var curve = curves[curve].curve;\n  this.curve = curve;\n  this.g = curve.g;\n  this.g.precompute(curve.n.bitLength() + 1);\n\n  this.pointClass = curve.point().constructor;\n  this.encodingLength = Math.ceil(curve.n.bitLength() / 8);\n  this.hash = hash.sha512;\n}\n\nmodule.exports = EDDSA;\n\n/**\n* @param {Array|String} message - message bytes\n* @param {Array|String|KeyPair} secret - secret bytes or a keypair\n* @returns {Signature} - signature\n*/\nEDDSA.prototype.sign = function sign(message, secret) {\n  message = parseBytes(message);\n  var key = this.keyFromSecret(secret);\n  var r = this.hashInt(key.messagePrefix(), message);\n  var R = this.g.mul(r);\n  var Rencoded = this.encodePoint(R);\n  var s_ = this.hashInt(Rencoded, key.pubBytes(), message)\n               .mul(key.priv());\n  var S = r.add(s_).umod(this.curve.n);\n  return this.makeSignature({ R: R, S: S, Rencoded: Rencoded });\n};\n\n/**\n* @param {Array} message - message bytes\n* @param {Array|String|Signature} sig - sig bytes\n* @param {Array|String|Point|KeyPair} pub - public key\n* @returns {Boolean} - true if public key matches sig of message\n*/\nEDDSA.prototype.verify = function verify(message, sig, pub) {\n  message = parseBytes(message);\n  sig = this.makeSignature(sig);\n  var key = this.keyFromPublic(pub);\n  var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);\n  var SG = this.g.mul(sig.S());\n  var RplusAh = sig.R().add(key.pub().mul(h));\n  return RplusAh.eq(SG);\n};\n\nEDDSA.prototype.hashInt = function hashInt() {\n  var hash = this.hash();\n  for (var i = 0; i < arguments.length; i++)\n    hash.update(arguments[i]);\n  return utils.intFromLE(hash.digest()).umod(this.curve.n);\n};\n\nEDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {\n  return KeyPair.fromPublic(this, pub);\n};\n\nEDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {\n  return KeyPair.fromSecret(this, secret);\n};\n\nEDDSA.prototype.makeSignature = function makeSignature(sig) {\n  if (sig instanceof Signature)\n    return sig;\n  return new Signature(this, sig);\n};\n\n/**\n* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2\n*\n* EDDSA defines methods for encoding and decoding points and integers. These are\n* helper convenience methods, that pass along to utility functions implied\n* parameters.\n*\n*/\nEDDSA.prototype.encodePoint = function encodePoint(point) {\n  var enc = point.getY().toArray('le', this.encodingLength);\n  enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;\n  return enc;\n};\n\nEDDSA.prototype.decodePoint = function decodePoint(bytes) {\n  bytes = utils.parseBytes(bytes);\n\n  var lastIx = bytes.length - 1;\n  var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);\n  var xIsOdd = (bytes[lastIx] & 0x80) !== 0;\n\n  var y = utils.intFromLE(normed);\n  return this.curve.pointFromY(y, xIsOdd);\n};\n\nEDDSA.prototype.encodeInt = function encodeInt(num) {\n  return num.toArray('le', this.encodingLength);\n};\n\nEDDSA.prototype.decodeInt = function decodeInt(bytes) {\n  return utils.intFromLE(bytes);\n};\n\nEDDSA.prototype.isPoint = function isPoint(val) {\n  return val instanceof this.pointClass;\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar assert = utils.assert;\nvar parseBytes = utils.parseBytes;\nvar cachedProperty = utils.cachedProperty;\n\n/**\n* @param {EDDSA} eddsa - instance\n* @param {Object} params - public/private key parameters\n*\n* @param {Array<Byte>} [params.secret] - secret seed bytes\n* @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)\n* @param {Array<Byte>} [params.pub] - public key point encoded as bytes\n*\n*/\nfunction KeyPair(eddsa, params) {\n  this.eddsa = eddsa;\n  this._secret = parseBytes(params.secret);\n  if (eddsa.isPoint(params.pub))\n    this._pub = params.pub;\n  else\n    this._pubBytes = parseBytes(params.pub);\n}\n\nKeyPair.fromPublic = function fromPublic(eddsa, pub) {\n  if (pub instanceof KeyPair)\n    return pub;\n  return new KeyPair(eddsa, { pub: pub });\n};\n\nKeyPair.fromSecret = function fromSecret(eddsa, secret) {\n  if (secret instanceof KeyPair)\n    return secret;\n  return new KeyPair(eddsa, { secret: secret });\n};\n\nKeyPair.prototype.secret = function secret() {\n  return this._secret;\n};\n\ncachedProperty(KeyPair, 'pubBytes', function pubBytes() {\n  return this.eddsa.encodePoint(this.pub());\n});\n\ncachedProperty(KeyPair, 'pub', function pub() {\n  if (this._pubBytes)\n    return this.eddsa.decodePoint(this._pubBytes);\n  return this.eddsa.g.mul(this.priv());\n});\n\ncachedProperty(KeyPair, 'privBytes', function privBytes() {\n  var eddsa = this.eddsa;\n  var hash = this.hash();\n  var lastIx = eddsa.encodingLength - 1;\n\n  var a = hash.slice(0, eddsa.encodingLength);\n  a[0] &= 248;\n  a[lastIx] &= 127;\n  a[lastIx] |= 64;\n\n  return a;\n});\n\ncachedProperty(KeyPair, 'priv', function priv() {\n  return this.eddsa.decodeInt(this.privBytes());\n});\n\ncachedProperty(KeyPair, 'hash', function hash() {\n  return this.eddsa.hash().update(this.secret()).digest();\n});\n\ncachedProperty(KeyPair, 'messagePrefix', function messagePrefix() {\n  return this.hash().slice(this.eddsa.encodingLength);\n});\n\nKeyPair.prototype.sign = function sign(message) {\n  assert(this._secret, 'KeyPair can only verify');\n  return this.eddsa.sign(message, this);\n};\n\nKeyPair.prototype.verify = function verify(message, sig) {\n  return this.eddsa.verify(message, sig, this);\n};\n\nKeyPair.prototype.getSecret = function getSecret(enc) {\n  assert(this._secret, 'KeyPair is public only');\n  return utils.encode(this.secret(), enc);\n};\n\nKeyPair.prototype.getPublic = function getPublic(enc) {\n  return utils.encode(this.pubBytes(), enc);\n};\n\nmodule.exports = KeyPair;\n","'use strict';\n\nvar BN = require('bn.js');\nvar utils = require('../utils');\nvar assert = utils.assert;\nvar cachedProperty = utils.cachedProperty;\nvar parseBytes = utils.parseBytes;\n\n/**\n* @param {EDDSA} eddsa - eddsa instance\n* @param {Array<Bytes>|Object} sig -\n* @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes\n* @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes\n* @param {Array<Bytes>} [sig.Rencoded] - R point encoded\n* @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded\n*/\nfunction Signature(eddsa, sig) {\n  this.eddsa = eddsa;\n\n  if (typeof sig !== 'object')\n    sig = parseBytes(sig);\n\n  if (Array.isArray(sig)) {\n    sig = {\n      R: sig.slice(0, eddsa.encodingLength),\n      S: sig.slice(eddsa.encodingLength)\n    };\n  }\n\n  assert(sig.R && sig.S, 'Signature without R or S');\n\n  if (eddsa.isPoint(sig.R))\n    this._R = sig.R;\n  if (sig.S instanceof BN)\n    this._S = sig.S;\n\n  this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;\n  this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;\n}\n\ncachedProperty(Signature, 'S', function S() {\n  return this.eddsa.decodeInt(this.Sencoded());\n});\n\ncachedProperty(Signature, 'R', function R() {\n  return this.eddsa.decodePoint(this.Rencoded());\n});\n\ncachedProperty(Signature, 'Rencoded', function Rencoded() {\n  return this.eddsa.encodePoint(this.R());\n});\n\ncachedProperty(Signature, 'Sencoded', function Sencoded() {\n  return this.eddsa.encodeInt(this.S());\n});\n\nSignature.prototype.toBytes = function toBytes() {\n  return this.Rencoded().concat(this.Sencoded());\n};\n\nSignature.prototype.toHex = function toHex() {\n  return utils.encode(this.toBytes(), 'hex').toUpperCase();\n};\n\nmodule.exports = Signature;\n","module.exports = {\n  doubles: {\n    step: 4,\n    points: [\n      [\n        'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',\n        'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821'\n      ],\n      [\n        '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',\n        '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf'\n      ],\n      [\n        '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',\n        'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695'\n      ],\n      [\n        '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',\n        '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9'\n      ],\n      [\n        '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',\n        '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36'\n      ],\n      [\n        '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',\n        '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f'\n      ],\n      [\n        'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',\n        '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999'\n      ],\n      [\n        '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',\n        'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09'\n      ],\n      [\n        'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',\n        '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d'\n      ],\n      [\n        'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',\n        'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088'\n      ],\n      [\n        'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',\n        '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d'\n      ],\n      [\n        '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',\n        '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8'\n      ],\n      [\n        '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',\n        '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a'\n      ],\n      [\n        '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',\n        '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453'\n      ],\n      [\n        '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',\n        '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160'\n      ],\n      [\n        '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',\n        '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0'\n      ],\n      [\n        '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',\n        '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6'\n      ],\n      [\n        '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',\n        '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589'\n      ],\n      [\n        '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',\n        'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17'\n      ],\n      [\n        'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',\n        '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda'\n      ],\n      [\n        'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',\n        '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd'\n      ],\n      [\n        '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',\n        '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2'\n      ],\n      [\n        '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',\n        '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6'\n      ],\n      [\n        'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',\n        '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f'\n      ],\n      [\n        '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',\n        'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01'\n      ],\n      [\n        'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',\n        '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3'\n      ],\n      [\n        'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',\n        'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f'\n      ],\n      [\n        'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',\n        '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7'\n      ],\n      [\n        'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',\n        'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78'\n      ],\n      [\n        'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',\n        '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1'\n      ],\n      [\n        '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',\n        'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150'\n      ],\n      [\n        '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',\n        '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82'\n      ],\n      [\n        'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',\n        '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc'\n      ],\n      [\n        '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',\n        'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b'\n      ],\n      [\n        'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',\n        '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51'\n      ],\n      [\n        'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',\n        '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45'\n      ],\n      [\n        'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',\n        'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120'\n      ],\n      [\n        '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',\n        '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84'\n      ],\n      [\n        '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',\n        '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d'\n      ],\n      [\n        '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',\n        'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d'\n      ],\n      [\n        '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',\n        '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8'\n      ],\n      [\n        'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',\n        '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8'\n      ],\n      [\n        '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',\n        '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac'\n      ],\n      [\n        '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',\n        'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f'\n      ],\n      [\n        '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',\n        '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962'\n      ],\n      [\n        'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',\n        '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907'\n      ],\n      [\n        '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',\n        'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec'\n      ],\n      [\n        'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',\n        'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d'\n      ],\n      [\n        'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',\n        '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414'\n      ],\n      [\n        '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',\n        'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd'\n      ],\n      [\n        '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',\n        'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0'\n      ],\n      [\n        'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',\n        '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811'\n      ],\n      [\n        'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',\n        '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1'\n      ],\n      [\n        'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',\n        '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c'\n      ],\n      [\n        '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',\n        'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73'\n      ],\n      [\n        '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',\n        '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd'\n      ],\n      [\n        'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',\n        'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405'\n      ],\n      [\n        '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',\n        'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589'\n      ],\n      [\n        '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',\n        '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e'\n      ],\n      [\n        '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',\n        '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27'\n      ],\n      [\n        'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',\n        'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1'\n      ],\n      [\n        '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',\n        '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482'\n      ],\n      [\n        '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',\n        '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945'\n      ],\n      [\n        'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',\n        '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573'\n      ],\n      [\n        'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',\n        'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82'\n      ]\n    ]\n  },\n  naf: {\n    wnd: 7,\n    points: [\n      [\n        'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',\n        '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672'\n      ],\n      [\n        '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',\n        'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6'\n      ],\n      [\n        '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',\n        '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da'\n      ],\n      [\n        'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',\n        'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37'\n      ],\n      [\n        '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',\n        'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b'\n      ],\n      [\n        'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',\n        'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81'\n      ],\n      [\n        'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',\n        '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58'\n      ],\n      [\n        'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',\n        '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77'\n      ],\n      [\n        '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',\n        '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a'\n      ],\n      [\n        '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',\n        '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c'\n      ],\n      [\n        '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',\n        '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67'\n      ],\n      [\n        '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',\n        '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402'\n      ],\n      [\n        'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',\n        'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55'\n      ],\n      [\n        'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',\n        '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482'\n      ],\n      [\n        '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',\n        'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82'\n      ],\n      [\n        '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',\n        'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396'\n      ],\n      [\n        '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',\n        '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49'\n      ],\n      [\n        '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',\n        '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf'\n      ],\n      [\n        '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',\n        '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a'\n      ],\n      [\n        '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',\n        'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7'\n      ],\n      [\n        'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',\n        'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933'\n      ],\n      [\n        '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',\n        '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a'\n      ],\n      [\n        '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',\n        '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6'\n      ],\n      [\n        'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',\n        'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37'\n      ],\n      [\n        '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',\n        '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e'\n      ],\n      [\n        'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',\n        'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6'\n      ],\n      [\n        'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',\n        'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476'\n      ],\n      [\n        '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',\n        '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40'\n      ],\n      [\n        '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',\n        '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61'\n      ],\n      [\n        '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',\n        '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683'\n      ],\n      [\n        'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',\n        '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5'\n      ],\n      [\n        '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',\n        '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b'\n      ],\n      [\n        'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',\n        '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417'\n      ],\n      [\n        '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',\n        'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868'\n      ],\n      [\n        '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',\n        'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a'\n      ],\n      [\n        'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',\n        'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6'\n      ],\n      [\n        '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',\n        '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996'\n      ],\n      [\n        '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',\n        'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e'\n      ],\n      [\n        'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',\n        'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d'\n      ],\n      [\n        '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',\n        '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2'\n      ],\n      [\n        '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',\n        'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e'\n      ],\n      [\n        '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',\n        '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437'\n      ],\n      [\n        '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',\n        'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311'\n      ],\n      [\n        'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',\n        '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4'\n      ],\n      [\n        '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',\n        '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575'\n      ],\n      [\n        '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',\n        'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d'\n      ],\n      [\n        '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',\n        'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d'\n      ],\n      [\n        'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',\n        'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629'\n      ],\n      [\n        'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',\n        'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06'\n      ],\n      [\n        '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',\n        '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374'\n      ],\n      [\n        '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',\n        '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee'\n      ],\n      [\n        'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',\n        '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1'\n      ],\n      [\n        'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',\n        'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b'\n      ],\n      [\n        '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',\n        '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661'\n      ],\n      [\n        '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',\n        '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6'\n      ],\n      [\n        'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',\n        '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e'\n      ],\n      [\n        '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',\n        '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d'\n      ],\n      [\n        'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',\n        'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc'\n      ],\n      [\n        '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',\n        'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4'\n      ],\n      [\n        '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',\n        '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c'\n      ],\n      [\n        'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',\n        '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b'\n      ],\n      [\n        'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',\n        '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913'\n      ],\n      [\n        '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',\n        '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154'\n      ],\n      [\n        '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',\n        '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865'\n      ],\n      [\n        '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',\n        'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc'\n      ],\n      [\n        '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',\n        'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224'\n      ],\n      [\n        '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',\n        '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e'\n      ],\n      [\n        '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',\n        '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6'\n      ],\n      [\n        '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',\n        '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511'\n      ],\n      [\n        '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',\n        'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b'\n      ],\n      [\n        'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',\n        'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2'\n      ],\n      [\n        '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',\n        'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c'\n      ],\n      [\n        'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',\n        '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3'\n      ],\n      [\n        'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',\n        '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d'\n      ],\n      [\n        'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',\n        '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700'\n      ],\n      [\n        'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',\n        '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4'\n      ],\n      [\n        '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',\n        'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196'\n      ],\n      [\n        '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',\n        '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4'\n      ],\n      [\n        '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',\n        'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257'\n      ],\n      [\n        'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',\n        'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13'\n      ],\n      [\n        'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',\n        '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096'\n      ],\n      [\n        'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',\n        'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38'\n      ],\n      [\n        'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',\n        '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f'\n      ],\n      [\n        '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',\n        '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448'\n      ],\n      [\n        'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',\n        '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a'\n      ],\n      [\n        'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',\n        '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4'\n      ],\n      [\n        '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',\n        '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437'\n      ],\n      [\n        '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',\n        'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7'\n      ],\n      [\n        'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',\n        '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d'\n      ],\n      [\n        'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',\n        '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a'\n      ],\n      [\n        'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',\n        '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54'\n      ],\n      [\n        '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',\n        '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77'\n      ],\n      [\n        'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',\n        'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517'\n      ],\n      [\n        '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',\n        'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10'\n      ],\n      [\n        'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',\n        'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125'\n      ],\n      [\n        'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',\n        '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e'\n      ],\n      [\n        '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',\n        'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1'\n      ],\n      [\n        'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',\n        '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2'\n      ],\n      [\n        'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',\n        '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423'\n      ],\n      [\n        'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',\n        '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8'\n      ],\n      [\n        '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',\n        'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758'\n      ],\n      [\n        '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',\n        'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375'\n      ],\n      [\n        'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',\n        '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d'\n      ],\n      [\n        '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',\n        'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec'\n      ],\n      [\n        '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',\n        '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0'\n      ],\n      [\n        '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',\n        'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c'\n      ],\n      [\n        'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',\n        'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4'\n      ],\n      [\n        '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',\n        'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f'\n      ],\n      [\n        '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',\n        '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649'\n      ],\n      [\n        '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',\n        'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826'\n      ],\n      [\n        '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',\n        '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5'\n      ],\n      [\n        'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',\n        'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87'\n      ],\n      [\n        '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',\n        '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b'\n      ],\n      [\n        'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',\n        '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc'\n      ],\n      [\n        '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',\n        '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c'\n      ],\n      [\n        'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',\n        'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f'\n      ],\n      [\n        'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',\n        '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a'\n      ],\n      [\n        'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',\n        'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46'\n      ],\n      [\n        '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',\n        'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f'\n      ],\n      [\n        '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',\n        '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03'\n      ],\n      [\n        '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',\n        'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08'\n      ],\n      [\n        '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',\n        '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8'\n      ],\n      [\n        '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',\n        '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373'\n      ],\n      [\n        '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',\n        'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3'\n      ],\n      [\n        '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',\n        '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8'\n      ],\n      [\n        '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',\n        '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1'\n      ],\n      [\n        '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',\n        '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9'\n      ]\n    ]\n  }\n};\n","'use strict';\n\nvar utils = exports;\nvar BN = require('bn.js');\nvar minAssert = require('minimalistic-assert');\nvar minUtils = require('minimalistic-crypto-utils');\n\nutils.assert = minAssert;\nutils.toArray = minUtils.toArray;\nutils.zero2 = minUtils.zero2;\nutils.toHex = minUtils.toHex;\nutils.encode = minUtils.encode;\n\n// Represent num in a w-NAF form\nfunction getNAF(num, w, bits) {\n  var naf = new Array(Math.max(num.bitLength(), bits) + 1);\n  naf.fill(0);\n\n  var ws = 1 << (w + 1);\n  var k = num.clone();\n\n  for (var i = 0; i < naf.length; i++) {\n    var z;\n    var mod = k.andln(ws - 1);\n    if (k.isOdd()) {\n      if (mod > (ws >> 1) - 1)\n        z = (ws >> 1) - mod;\n      else\n        z = mod;\n      k.isubn(z);\n    } else {\n      z = 0;\n    }\n\n    naf[i] = z;\n    k.iushrn(1);\n  }\n\n  return naf;\n}\nutils.getNAF = getNAF;\n\n// Represent k1, k2 in a Joint Sparse Form\nfunction getJSF(k1, k2) {\n  var jsf = [\n    [],\n    []\n  ];\n\n  k1 = k1.clone();\n  k2 = k2.clone();\n  var d1 = 0;\n  var d2 = 0;\n  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {\n\n    // First phase\n    var m14 = (k1.andln(3) + d1) & 3;\n    var m24 = (k2.andln(3) + d2) & 3;\n    if (m14 === 3)\n      m14 = -1;\n    if (m24 === 3)\n      m24 = -1;\n    var u1;\n    if ((m14 & 1) === 0) {\n      u1 = 0;\n    } else {\n      var m8 = (k1.andln(7) + d1) & 7;\n      if ((m8 === 3 || m8 === 5) && m24 === 2)\n        u1 = -m14;\n      else\n        u1 = m14;\n    }\n    jsf[0].push(u1);\n\n    var u2;\n    if ((m24 & 1) === 0) {\n      u2 = 0;\n    } else {\n      var m8 = (k2.andln(7) + d2) & 7;\n      if ((m8 === 3 || m8 === 5) && m14 === 2)\n        u2 = -m24;\n      else\n        u2 = m24;\n    }\n    jsf[1].push(u2);\n\n    // Second phase\n    if (2 * d1 === u1 + 1)\n      d1 = 1 - d1;\n    if (2 * d2 === u2 + 1)\n      d2 = 1 - d2;\n    k1.iushrn(1);\n    k2.iushrn(1);\n  }\n\n  return jsf;\n}\nutils.getJSF = getJSF;\n\nfunction cachedProperty(obj, name, computer) {\n  var key = '_' + name;\n  obj.prototype[name] = function cachedProperty() {\n    return this[key] !== undefined ? this[key] :\n           this[key] = computer.call(this);\n  };\n}\nutils.cachedProperty = cachedProperty;\n\nfunction parseBytes(bytes) {\n  return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :\n                                     bytes;\n}\nutils.parseBytes = parseBytes;\n\nfunction intFromLE(bytes) {\n  return new BN(bytes, 'hex', 'le');\n}\nutils.intFromLE = intFromLE;\n\n","module.exports = [\n  \"🀄️\",\n  \"🃏\",\n  \"🅰️\",\n  \"🅱️\",\n  \"🅾️\",\n  \"🅿️\",\n  \"🆎\",\n  \"🆑\",\n  \"🆒\",\n  \"🆓\",\n  \"🆔\",\n  \"🆕\",\n  \"🆖\",\n  \"🆗\",\n  \"🆘\",\n  \"🆙\",\n  \"🆚\",\n  \"🇦🇨\",\n  \"🇦🇩\",\n  \"🇦🇪\",\n  \"🇦🇫\",\n  \"🇦🇬\",\n  \"🇦🇮\",\n  \"🇦🇱\",\n  \"🇦🇲\",\n  \"🇦🇴\",\n  \"🇦🇶\",\n  \"🇦🇷\",\n  \"🇦🇸\",\n  \"🇦🇹\",\n  \"🇦🇺\",\n  \"🇦🇼\",\n  \"🇦🇽\",\n  \"🇦🇿\",\n  \"🇦\",\n  \"🇧🇦\",\n  \"🇧🇧\",\n  \"🇧🇩\",\n  \"🇧🇪\",\n  \"🇧🇫\",\n  \"🇧🇬\",\n  \"🇧🇭\",\n  \"🇧🇮\",\n  \"🇧🇯\",\n  \"🇧🇱\",\n  \"🇧🇲\",\n  \"🇧🇳\",\n  \"🇧🇴\",\n  \"🇧🇶\",\n  \"🇧🇷\",\n  \"🇧🇸\",\n  \"🇧🇹\",\n  \"🇧🇻\",\n  \"🇧🇼\",\n  \"🇧🇾\",\n  \"🇧🇿\",\n  \"🇧\",\n  \"🇨🇦\",\n  \"🇨🇨\",\n  \"🇨🇩\",\n  \"🇨🇫\",\n  \"🇨🇬\",\n  \"🇨🇭\",\n  \"🇨🇮\",\n  \"🇨🇰\",\n  \"🇨🇱\",\n  \"🇨🇲\",\n  \"🇨🇳\",\n  \"🇨🇴\",\n  \"🇨🇵\",\n  \"🇨🇷\",\n  \"🇨🇺\",\n  \"🇨🇻\",\n  \"🇨🇼\",\n  \"🇨🇽\",\n  \"🇨🇾\",\n  \"🇨🇿\",\n  \"🇨\",\n  \"🇩🇪\",\n  \"🇩🇬\",\n  \"🇩🇯\",\n  \"🇩🇰\",\n  \"🇩🇲\",\n  \"🇩🇴\",\n  \"🇩🇿\",\n  \"🇩\",\n  \"🇪🇦\",\n  \"🇪🇨\",\n  \"🇪🇪\",\n  \"🇪🇬\",\n  \"🇪🇭\",\n  \"🇪🇷\",\n  \"🇪🇸\",\n  \"🇪🇹\",\n  \"🇪🇺\",\n  \"🇪\",\n  \"🇫🇮\",\n  \"🇫🇯\",\n  \"🇫🇰\",\n  \"🇫🇲\",\n  \"🇫🇴\",\n  \"🇫🇷\",\n  \"🇫\",\n  \"🇬🇦\",\n  \"🇬🇧\",\n  \"🇬🇩\",\n  \"🇬🇪\",\n  \"🇬🇫\",\n  \"🇬🇬\",\n  \"🇬🇭\",\n  \"🇬🇮\",\n  \"🇬🇱\",\n  \"🇬🇲\",\n  \"🇬🇳\",\n  \"🇬🇵\",\n  \"🇬🇶\",\n  \"🇬🇷\",\n  \"🇬🇸\",\n  \"🇬🇹\",\n  \"🇬🇺\",\n  \"🇬🇼\",\n  \"🇬🇾\",\n  \"🇬\",\n  \"🇭🇰\",\n  \"🇭🇲\",\n  \"🇭🇳\",\n  \"🇭🇷\",\n  \"🇭🇹\",\n  \"🇭🇺\",\n  \"🇭\",\n  \"🇮🇨\",\n  \"🇮🇩\",\n  \"🇮🇪\",\n  \"🇮🇱\",\n  \"🇮🇲\",\n  \"🇮🇳\",\n  \"🇮🇴\",\n  \"🇮🇶\",\n  \"🇮🇷\",\n  \"🇮🇸\",\n  \"🇮🇹\",\n  \"🇮\",\n  \"🇯🇪\",\n  \"🇯🇲\",\n  \"🇯🇴\",\n  \"🇯🇵\",\n  \"🇯\",\n  \"🇰🇪\",\n  \"🇰🇬\",\n  \"🇰🇭\",\n  \"🇰🇮\",\n  \"🇰🇲\",\n  \"🇰🇳\",\n  \"🇰🇵\",\n  \"🇰🇷\",\n  \"🇰🇼\",\n  \"🇰🇾\",\n  \"🇰🇿\",\n  \"🇰\",\n  \"🇱🇦\",\n  \"🇱🇧\",\n  \"🇱🇨\",\n  \"🇱🇮\",\n  \"🇱🇰\",\n  \"🇱🇷\",\n  \"🇱🇸\",\n  \"🇱🇹\",\n  \"🇱🇺\",\n  \"🇱🇻\",\n  \"🇱🇾\",\n  \"🇱\",\n  \"🇲🇦\",\n  \"🇲🇨\",\n  \"🇲🇩\",\n  \"🇲🇪\",\n  \"🇲🇫\",\n  \"🇲🇬\",\n  \"🇲🇭\",\n  \"🇲🇰\",\n  \"🇲🇱\",\n  \"🇲🇲\",\n  \"🇲🇳\",\n  \"🇲🇴\",\n  \"🇲🇵\",\n  \"🇲🇶\",\n  \"🇲🇷\",\n  \"🇲🇸\",\n  \"🇲🇹\",\n  \"🇲🇺\",\n  \"🇲🇻\",\n  \"🇲🇼\",\n  \"🇲🇽\",\n  \"🇲🇾\",\n  \"🇲🇿\",\n  \"🇲\",\n  \"🇳🇦\",\n  \"🇳🇨\",\n  \"🇳🇪\",\n  \"🇳🇫\",\n  \"🇳🇬\",\n  \"🇳🇮\",\n  \"🇳🇱\",\n  \"🇳🇴\",\n  \"🇳🇵\",\n  \"🇳🇷\",\n  \"🇳🇺\",\n  \"🇳🇿\",\n  \"🇳\",\n  \"🇴🇲\",\n  \"🇴\",\n  \"🇵🇦\",\n  \"🇵🇪\",\n  \"🇵🇫\",\n  \"🇵🇬\",\n  \"🇵🇭\",\n  \"🇵🇰\",\n  \"🇵🇱\",\n  \"🇵🇲\",\n  \"🇵🇳\",\n  \"🇵🇷\",\n  \"🇵🇸\",\n  \"🇵🇹\",\n  \"🇵🇼\",\n  \"🇵🇾\",\n  \"🇵\",\n  \"🇶🇦\",\n  \"🇶\",\n  \"🇷🇪\",\n  \"🇷🇴\",\n  \"🇷🇸\",\n  \"🇷🇺\",\n  \"🇷🇼\",\n  \"🇷\",\n  \"🇸🇦\",\n  \"🇸🇧\",\n  \"🇸🇨\",\n  \"🇸🇩\",\n  \"🇸🇪\",\n  \"🇸🇬\",\n  \"🇸🇭\",\n  \"🇸🇮\",\n  \"🇸🇯\",\n  \"🇸🇰\",\n  \"🇸🇱\",\n  \"🇸🇲\",\n  \"🇸🇳\",\n  \"🇸🇴\",\n  \"🇸🇷\",\n  \"🇸🇸\",\n  \"🇸🇹\",\n  \"🇸🇻\",\n  \"🇸🇽\",\n  \"🇸🇾\",\n  \"🇸🇿\",\n  \"🇸\",\n  \"🇹🇦\",\n  \"🇹🇨\",\n  \"🇹🇩\",\n  \"🇹🇫\",\n  \"🇹🇬\",\n  \"🇹🇭\",\n  \"🇹🇯\",\n  \"🇹🇰\",\n  \"🇹🇱\",\n  \"🇹🇲\",\n  \"🇹🇳\",\n  \"🇹🇴\",\n  \"🇹🇷\",\n  \"🇹🇹\",\n  \"🇹🇻\",\n  \"🇹🇼\",\n  \"🇹🇿\",\n  \"🇹\",\n  \"🇺🇦\",\n  \"🇺🇬\",\n  \"🇺🇲\",\n  \"🇺🇳\",\n  \"🇺🇸\",\n  \"🇺🇾\",\n  \"🇺🇿\",\n  \"🇺\",\n  \"🇻🇦\",\n  \"🇻🇨\",\n  \"🇻🇪\",\n  \"🇻🇬\",\n  \"🇻🇮\",\n  \"🇻🇳\",\n  \"🇻🇺\",\n  \"🇻\",\n  \"🇼🇫\",\n  \"🇼🇸\",\n  \"🇼\",\n  \"🇽🇰\",\n  \"🇽\",\n  \"🇾🇪\",\n  \"🇾🇹\",\n  \"🇾\",\n  \"🇿🇦\",\n  \"🇿🇲\",\n  \"🇿🇼\",\n  \"🇿\",\n  \"🈁\",\n  \"🈂️\",\n  \"🈚️\",\n  \"🈯️\",\n  \"🈲\",\n  \"🈳\",\n  \"🈴\",\n  \"🈵\",\n  \"🈶\",\n  \"🈷️\",\n  \"🈸\",\n  \"🈹\",\n  \"🈺\",\n  \"🉐\",\n  \"🉑\",\n  \"🌀\",\n  \"🌁\",\n  \"🌂\",\n  \"🌃\",\n  \"🌄\",\n  \"🌅\",\n  \"🌆\",\n  \"🌇\",\n  \"🌈\",\n  \"🌉\",\n  \"🌊\",\n  \"🌋\",\n  \"🌌\",\n  \"🌍\",\n  \"🌎\",\n  \"🌏\",\n  \"🌐\",\n  \"🌑\",\n  \"🌒\",\n  \"🌓\",\n  \"🌔\",\n  \"🌕\",\n  \"🌖\",\n  \"🌗\",\n  \"🌘\",\n  \"🌙\",\n  \"🌚\",\n  \"🌛\",\n  \"🌜\",\n  \"🌝\",\n  \"🌞\",\n  \"🌟\",\n  \"🌠\",\n  \"🌡️\",\n  \"🌤️\",\n  \"🌥️\",\n  \"🌦️\",\n  \"🌧️\",\n  \"🌨️\",\n  \"🌩️\",\n  \"🌪️\",\n  \"🌫️\",\n  \"🌬️\",\n  \"🌭\",\n  \"🌮\",\n  \"🌯\",\n  \"🌰\",\n  \"🌱\",\n  \"🌲\",\n  \"🌳\",\n  \"🌴\",\n  \"🌵\",\n  \"🌶️\",\n  \"🌷\",\n  \"🌸\",\n  \"🌹\",\n  \"🌺\",\n  \"🌻\",\n  \"🌼\",\n  \"🌽\",\n  \"🌾\",\n  \"🌿\",\n  \"🍀\",\n  \"🍁\",\n  \"🍂\",\n  \"🍃\",\n  \"🍄\",\n  \"🍅\",\n  \"🍆\",\n  \"🍇\",\n  \"🍈\",\n  \"🍉\",\n  \"🍊\",\n  \"🍋\",\n  \"🍌\",\n  \"🍍\",\n  \"🍎\",\n  \"🍏\",\n  \"🍐\",\n  \"🍑\",\n  \"🍒\",\n  \"🍓\",\n  \"🍔\",\n  \"🍕\",\n  \"🍖\",\n  \"🍗\",\n  \"🍘\",\n  \"🍙\",\n  \"🍚\",\n  \"🍛\",\n  \"🍜\",\n  \"🍝\",\n  \"🍞\",\n  \"🍟\",\n  \"🍠\",\n  \"🍡\",\n  \"🍢\",\n  \"🍣\",\n  \"🍤\",\n  \"🍥\",\n  \"🍦\",\n  \"🍧\",\n  \"🍨\",\n  \"🍩\",\n  \"🍪\",\n  \"🍫\",\n  \"🍬\",\n  \"🍭\",\n  \"🍮\",\n  \"🍯\",\n  \"🍰\",\n  \"🍱\",\n  \"🍲\",\n  \"🍳\",\n  \"🍴\",\n  \"🍵\",\n  \"🍶\",\n  \"🍷\",\n  \"🍸\",\n  \"🍹\",\n  \"🍺\",\n  \"🍻\",\n  \"🍼\",\n  \"🍽️\",\n  \"🍾\",\n  \"🍿\",\n  \"🎀\",\n  \"🎁\",\n  \"🎂\",\n  \"🎃\",\n  \"🎄\",\n  \"🎅🏻\",\n  \"🎅🏼\",\n  \"🎅🏽\",\n  \"🎅🏾\",\n  \"🎅🏿\",\n  \"🎅\",\n  \"🎆\",\n  \"🎇\",\n  \"🎈\",\n  \"🎉\",\n  \"🎊\",\n  \"🎋\",\n  \"🎌\",\n  \"🎍\",\n  \"🎎\",\n  \"🎏\",\n  \"🎐\",\n  \"🎑\",\n  \"🎒\",\n  \"🎓\",\n  \"🎖️\",\n  \"🎗️\",\n  \"🎙️\",\n  \"🎚️\",\n  \"🎛️\",\n  \"🎞️\",\n  \"🎟️\",\n  \"🎠\",\n  \"🎡\",\n  \"🎢\",\n  \"🎣\",\n  \"🎤\",\n  \"🎥\",\n  \"🎦\",\n  \"🎧\",\n  \"🎨\",\n  \"🎩\",\n  \"🎪\",\n  \"🎫\",\n  \"🎬\",\n  \"🎭\",\n  \"🎮\",\n  \"🎯\",\n  \"🎰\",\n  \"🎱\",\n  \"🎲\",\n  \"🎳\",\n  \"🎴\",\n  \"🎵\",\n  \"🎶\",\n  \"🎷\",\n  \"🎸\",\n  \"🎹\",\n  \"🎺\",\n  \"🎻\",\n  \"🎼\",\n  \"🎽\",\n  \"🎾\",\n  \"🎿\",\n  \"🏀\",\n  \"🏁\",\n  \"🏂🏻\",\n  \"🏂🏼\",\n  \"🏂🏽\",\n  \"🏂🏾\",\n  \"🏂🏿\",\n  \"🏂\",\n  \"🏃🏻‍♀️\",\n  \"🏃🏻‍♂️\",\n  \"🏃🏻\",\n  \"🏃🏼‍♀️\",\n  \"🏃🏼‍♂️\",\n  \"🏃🏼\",\n  \"🏃🏽‍♀️\",\n  \"🏃🏽‍♂️\",\n  \"🏃🏽\",\n  \"🏃🏾‍♀️\",\n  \"🏃🏾‍♂️\",\n  \"🏃🏾\",\n  \"🏃🏿‍♀️\",\n  \"🏃🏿‍♂️\",\n  \"🏃🏿\",\n  \"🏃‍♀️\",\n  \"🏃‍♂️\",\n  \"🏃\",\n  \"🏄🏻‍♀️\",\n  \"🏄🏻‍♂️\",\n  \"🏄🏻\",\n  \"🏄🏼‍♀️\",\n  \"🏄🏼‍♂️\",\n  \"🏄🏼\",\n  \"🏄🏽‍♀️\",\n  \"🏄🏽‍♂️\",\n  \"🏄🏽\",\n  \"🏄🏾‍♀️\",\n  \"🏄🏾‍♂️\",\n  \"🏄🏾\",\n  \"🏄🏿‍♀️\",\n  \"🏄🏿‍♂️\",\n  \"🏄🏿\",\n  \"🏄‍♀️\",\n  \"🏄‍♂️\",\n  \"🏄\",\n  \"🏅\",\n  \"🏆\",\n  \"🏇🏻\",\n  \"🏇🏼\",\n  \"🏇🏽\",\n  \"🏇🏾\",\n  \"🏇🏿\",\n  \"🏇\",\n  \"🏈\",\n  \"🏉\",\n  \"🏊🏻‍♀️\",\n  \"🏊🏻‍♂️\",\n  \"🏊🏻\",\n  \"🏊🏼‍♀️\",\n  \"🏊🏼‍♂️\",\n  \"🏊🏼\",\n  \"🏊🏽‍♀️\",\n  \"🏊🏽‍♂️\",\n  \"🏊🏽\",\n  \"🏊🏾‍♀️\",\n  \"🏊🏾‍♂️\",\n  \"🏊🏾\",\n  \"🏊🏿‍♀️\",\n  \"🏊🏿‍♂️\",\n  \"🏊🏿\",\n  \"🏊‍♀️\",\n  \"🏊‍♂️\",\n  \"🏊\",\n  \"🏋🏻‍♀️\",\n  \"🏋🏻‍♂️\",\n  \"🏋🏻\",\n  \"🏋🏼‍♀️\",\n  \"🏋🏼‍♂️\",\n  \"🏋🏼\",\n  \"🏋🏽‍♀️\",\n  \"🏋🏽‍♂️\",\n  \"🏋🏽\",\n  \"🏋🏾‍♀️\",\n  \"🏋🏾‍♂️\",\n  \"🏋🏾\",\n  \"🏋🏿‍♀️\",\n  \"🏋🏿‍♂️\",\n  \"🏋🏿\",\n  \"🏋️‍♀️\",\n  \"🏋️‍♂️\",\n  \"🏋️\",\n  \"🏌🏻‍♀️\",\n  \"🏌🏻‍♂️\",\n  \"🏌🏻\",\n  \"🏌🏼‍♀️\",\n  \"🏌🏼‍♂️\",\n  \"🏌🏼\",\n  \"🏌🏽‍♀️\",\n  \"🏌🏽‍♂️\",\n  \"🏌🏽\",\n  \"🏌🏾‍♀️\",\n  \"🏌🏾‍♂️\",\n  \"🏌🏾\",\n  \"🏌🏿‍♀️\",\n  \"🏌🏿‍♂️\",\n  \"🏌🏿\",\n  \"🏌️‍♀️\",\n  \"🏌️‍♂️\",\n  \"🏌️\",\n  \"🏍️\",\n  \"🏎️\",\n  \"🏏\",\n  \"🏐\",\n  \"🏑\",\n  \"🏒\",\n  \"🏓\",\n  \"🏔️\",\n  \"🏕️\",\n  \"🏖️\",\n  \"🏗️\",\n  \"🏘️\",\n  \"🏙️\",\n  \"🏚️\",\n  \"🏛️\",\n  \"🏜️\",\n  \"🏝️\",\n  \"🏞️\",\n  \"🏟️\",\n  \"🏠\",\n  \"🏡\",\n  \"🏢\",\n  \"🏣\",\n  \"🏤\",\n  \"🏥\",\n  \"🏦\",\n  \"🏧\",\n  \"🏨\",\n  \"🏩\",\n  \"🏪\",\n  \"🏫\",\n  \"🏬\",\n  \"🏭\",\n  \"🏮\",\n  \"🏯\",\n  \"🏰\",\n  \"🏳️‍🌈\",\n  \"🏳️\",\n  \"🏴‍☠️\",\n  \"🏴󠁧󠁢󠁥󠁮󠁧󠁿\",\n  \"🏴󠁧󠁢󠁳󠁣󠁴󠁿\",\n  \"🏴󠁧󠁢󠁷󠁬󠁳󠁿\",\n  \"🏴\",\n  \"🏵️\",\n  \"🏷️\",\n  \"🏸\",\n  \"🏹\",\n  \"🏺\",\n  \"🏻\",\n  \"🏼\",\n  \"🏽\",\n  \"🏾\",\n  \"🏿\",\n  \"🐀\",\n  \"🐁\",\n  \"🐂\",\n  \"🐃\",\n  \"🐄\",\n  \"🐅\",\n  \"🐆\",\n  \"🐇\",\n  \"🐈\",\n  \"🐉\",\n  \"🐊\",\n  \"🐋\",\n  \"🐌\",\n  \"🐍\",\n  \"🐎\",\n  \"🐏\",\n  \"🐐\",\n  \"🐑\",\n  \"🐒\",\n  \"🐓\",\n  \"🐔\",\n  \"🐕‍🦺\",\n  \"🐕\",\n  \"🐖\",\n  \"🐗\",\n  \"🐘\",\n  \"🐙\",\n  \"🐚\",\n  \"🐛\",\n  \"🐜\",\n  \"🐝\",\n  \"🐞\",\n  \"🐟\",\n  \"🐠\",\n  \"🐡\",\n  \"🐢\",\n  \"🐣\",\n  \"🐤\",\n  \"🐥\",\n  \"🐦\",\n  \"🐧\",\n  \"🐨\",\n  \"🐩\",\n  \"🐪\",\n  \"🐫\",\n  \"🐬\",\n  \"🐭\",\n  \"🐮\",\n  \"🐯\",\n  \"🐰\",\n  \"🐱\",\n  \"🐲\",\n  \"🐳\",\n  \"🐴\",\n  \"🐵\",\n  \"🐶\",\n  \"🐷\",\n  \"🐸\",\n  \"🐹\",\n  \"🐺\",\n  \"🐻\",\n  \"🐼\",\n  \"🐽\",\n  \"🐾\",\n  \"🐿️\",\n  \"👀\",\n  \"👁‍🗨\",\n  \"👁️\",\n  \"👂🏻\",\n  \"👂🏼\",\n  \"👂🏽\",\n  \"👂🏾\",\n  \"👂🏿\",\n  \"👂\",\n  \"👃🏻\",\n  \"👃🏼\",\n  \"👃🏽\",\n  \"👃🏾\",\n  \"👃🏿\",\n  \"👃\",\n  \"👄\",\n  \"👅\",\n  \"👆🏻\",\n  \"👆🏼\",\n  \"👆🏽\",\n  \"👆🏾\",\n  \"👆🏿\",\n  \"👆\",\n  \"👇🏻\",\n  \"👇🏼\",\n  \"👇🏽\",\n  \"👇🏾\",\n  \"👇🏿\",\n  \"👇\",\n  \"👈🏻\",\n  \"👈🏼\",\n  \"👈🏽\",\n  \"👈🏾\",\n  \"👈🏿\",\n  \"👈\",\n  \"👉🏻\",\n  \"👉🏼\",\n  \"👉🏽\",\n  \"👉🏾\",\n  \"👉🏿\",\n  \"👉\",\n  \"👊🏻\",\n  \"👊🏼\",\n  \"👊🏽\",\n  \"👊🏾\",\n  \"👊🏿\",\n  \"👊\",\n  \"👋🏻\",\n  \"👋🏼\",\n  \"👋🏽\",\n  \"👋🏾\",\n  \"👋🏿\",\n  \"👋\",\n  \"👌🏻\",\n  \"👌🏼\",\n  \"👌🏽\",\n  \"👌🏾\",\n  \"👌🏿\",\n  \"👌\",\n  \"👍🏻\",\n  \"👍🏼\",\n  \"👍🏽\",\n  \"👍🏾\",\n  \"👍🏿\",\n  \"👍\",\n  \"👎🏻\",\n  \"👎🏼\",\n  \"👎🏽\",\n  \"👎🏾\",\n  \"👎🏿\",\n  \"👎\",\n  \"👏🏻\",\n  \"👏🏼\",\n  \"👏🏽\",\n  \"👏🏾\",\n  \"👏🏿\",\n  \"👏\",\n  \"👐🏻\",\n  \"👐🏼\",\n  \"👐🏽\",\n  \"👐🏾\",\n  \"👐🏿\",\n  \"👐\",\n  \"👑\",\n  \"👒\",\n  \"👓\",\n  \"👔\",\n  \"👕\",\n  \"👖\",\n  \"👗\",\n  \"👘\",\n  \"👙\",\n  \"👚\",\n  \"👛\",\n  \"👜\",\n  \"👝\",\n  \"👞\",\n  \"👟\",\n  \"👠\",\n  \"👡\",\n  \"👢\",\n  \"👣\",\n  \"👤\",\n  \"👥\",\n  \"👦🏻\",\n  \"👦🏼\",\n  \"👦🏽\",\n  \"👦🏾\",\n  \"👦🏿\",\n  \"👦\",\n  \"👧🏻\",\n  \"👧🏼\",\n  \"👧🏽\",\n  \"👧🏾\",\n  \"👧🏿\",\n  \"👧\",\n  \"👨🏻‍🌾\",\n  \"👨🏻‍🍳\",\n  \"👨🏻‍🎓\",\n  \"👨🏻‍🎤\",\n  \"👨🏻‍🎨\",\n  \"👨🏻‍🏫\",\n  \"👨🏻‍🏭\",\n  \"👨🏻‍💻\",\n  \"👨🏻‍💼\",\n  \"👨🏻‍🔧\",\n  \"👨🏻‍🔬\",\n  \"👨🏻‍🚀\",\n  \"👨🏻‍🚒\",\n  \"👨🏻‍🦯\",\n  \"👨🏻‍🦰\",\n  \"👨🏻‍🦱\",\n  \"👨🏻‍🦲\",\n  \"👨🏻‍🦳\",\n  \"👨🏻‍🦼\",\n  \"👨🏻‍🦽\",\n  \"👨🏻‍⚕️\",\n  \"👨🏻‍⚖️\",\n  \"👨🏻‍✈️\",\n  \"👨🏻\",\n  \"👨🏼‍🌾\",\n  \"👨🏼‍🍳\",\n  \"👨🏼‍🎓\",\n  \"👨🏼‍🎤\",\n  \"👨🏼‍🎨\",\n  \"👨🏼‍🏫\",\n  \"👨🏼‍🏭\",\n  \"👨🏼‍💻\",\n  \"👨🏼‍💼\",\n  \"👨🏼‍🔧\",\n  \"👨🏼‍🔬\",\n  \"👨🏼‍🚀\",\n  \"👨🏼‍🚒\",\n  \"👨🏼‍🤝‍👨🏻\",\n  \"👨🏼‍🦯\",\n  \"👨🏼‍🦰\",\n  \"👨🏼‍🦱\",\n  \"👨🏼‍🦲\",\n  \"👨🏼‍🦳\",\n  \"👨🏼‍🦼\",\n  \"👨🏼‍🦽\",\n  \"👨🏼‍⚕️\",\n  \"👨🏼‍⚖️\",\n  \"👨🏼‍✈️\",\n  \"👨🏼\",\n  \"👨🏽‍🌾\",\n  \"👨🏽‍🍳\",\n  \"👨🏽‍🎓\",\n  \"👨🏽‍🎤\",\n  \"👨🏽‍🎨\",\n  \"👨🏽‍🏫\",\n  \"👨🏽‍🏭\",\n  \"👨🏽‍💻\",\n  \"👨🏽‍💼\",\n  \"👨🏽‍🔧\",\n  \"👨🏽‍🔬\",\n  \"👨🏽‍🚀\",\n  \"👨🏽‍🚒\",\n  \"👨🏽‍🤝‍👨🏻\",\n  \"👨🏽‍🤝‍👨🏼\",\n  \"👨🏽‍🦯\",\n  \"👨🏽‍🦰\",\n  \"👨🏽‍🦱\",\n  \"👨🏽‍🦲\",\n  \"👨🏽‍🦳\",\n  \"👨🏽‍🦼\",\n  \"👨🏽‍🦽\",\n  \"👨🏽‍⚕️\",\n  \"👨🏽‍⚖️\",\n  \"👨🏽‍✈️\",\n  \"👨🏽\",\n  \"👨🏾‍🌾\",\n  \"👨🏾‍🍳\",\n  \"👨🏾‍🎓\",\n  \"👨🏾‍🎤\",\n  \"👨🏾‍🎨\",\n  \"👨🏾‍🏫\",\n  \"👨🏾‍🏭\",\n  \"👨🏾‍💻\",\n  \"👨🏾‍💼\",\n  \"👨🏾‍🔧\",\n  \"👨🏾‍🔬\",\n  \"👨🏾‍🚀\",\n  \"👨🏾‍🚒\",\n  \"👨🏾‍🤝‍👨🏻\",\n  \"👨🏾‍🤝‍👨🏼\",\n  \"👨🏾‍🤝‍👨🏽\",\n  \"👨🏾‍🦯\",\n  \"👨🏾‍🦰\",\n  \"👨🏾‍🦱\",\n  \"👨🏾‍🦲\",\n  \"👨🏾‍🦳\",\n  \"👨🏾‍🦼\",\n  \"👨🏾‍🦽\",\n  \"👨🏾‍⚕️\",\n  \"👨🏾‍⚖️\",\n  \"👨🏾‍✈️\",\n  \"👨🏾\",\n  \"👨🏿‍🌾\",\n  \"👨🏿‍🍳\",\n  \"👨🏿‍🎓\",\n  \"👨🏿‍🎤\",\n  \"👨🏿‍🎨\",\n  \"👨🏿‍🏫\",\n  \"👨🏿‍🏭\",\n  \"👨🏿‍💻\",\n  \"👨🏿‍💼\",\n  \"👨🏿‍🔧\",\n  \"👨🏿‍🔬\",\n  \"👨🏿‍🚀\",\n  \"👨🏿‍🚒\",\n  \"👨🏿‍🤝‍👨🏻\",\n  \"👨🏿‍🤝‍👨🏼\",\n  \"👨🏿‍🤝‍👨🏽\",\n  \"👨🏿‍🤝‍👨🏾\",\n  \"👨🏿‍🦯\",\n  \"👨🏿‍🦰\",\n  \"👨🏿‍🦱\",\n  \"👨🏿‍🦲\",\n  \"👨🏿‍🦳\",\n  \"👨🏿‍🦼\",\n  \"👨🏿‍🦽\",\n  \"👨🏿‍⚕️\",\n  \"👨🏿‍⚖️\",\n  \"👨🏿‍✈️\",\n  \"👨🏿\",\n  \"👨‍🌾\",\n  \"👨‍🍳\",\n  \"👨‍🎓\",\n  \"👨‍🎤\",\n  \"👨‍🎨\",\n  \"👨‍🏫\",\n  \"👨‍🏭\",\n  \"👨‍👦‍👦\",\n  \"👨‍👦\",\n  \"👨‍👧‍👦\",\n  \"👨‍👧‍👧\",\n  \"👨‍👧\",\n  \"👨‍👨‍👦‍👦\",\n  \"👨‍👨‍👦\",\n  \"👨‍👨‍👧‍👦\",\n  \"👨‍👨‍👧‍👧\",\n  \"👨‍👨‍👧\",\n  \"👨‍👩‍👦‍👦\",\n  \"👨‍👩‍👦\",\n  \"👨‍👩‍👧‍👦\",\n  \"👨‍👩‍👧‍👧\",\n  \"👨‍👩‍👧\",\n  \"👨‍💻\",\n  \"👨‍💼\",\n  \"👨‍🔧\",\n  \"👨‍🔬\",\n  \"👨‍🚀\",\n  \"👨‍🚒\",\n  \"👨‍🦯\",\n  \"👨‍🦰\",\n  \"👨‍🦱\",\n  \"👨‍🦲\",\n  \"👨‍🦳\",\n  \"👨‍🦼\",\n  \"👨‍🦽\",\n  \"👨‍⚕️\",\n  \"👨‍⚖️\",\n  \"👨‍✈️\",\n  \"👨‍❤️‍👨\",\n  \"👨‍❤️‍💋‍👨\",\n  \"👨\",\n  \"👩🏻‍🌾\",\n  \"👩🏻‍🍳\",\n  \"👩🏻‍🎓\",\n  \"👩🏻‍🎤\",\n  \"👩🏻‍🎨\",\n  \"👩🏻‍🏫\",\n  \"👩🏻‍🏭\",\n  \"👩🏻‍💻\",\n  \"👩🏻‍💼\",\n  \"👩🏻‍🔧\",\n  \"👩🏻‍🔬\",\n  \"👩🏻‍🚀\",\n  \"👩🏻‍🚒\",\n  \"👩🏻‍🤝‍👨🏼\",\n  \"👩🏻‍🤝‍👨🏽\",\n  \"👩🏻‍🤝‍👨🏾\",\n  \"👩🏻‍🤝‍👨🏿\",\n  \"👩🏻‍🦯\",\n  \"👩🏻‍🦰\",\n  \"👩🏻‍🦱\",\n  \"👩🏻‍🦲\",\n  \"👩🏻‍🦳\",\n  \"👩🏻‍🦼\",\n  \"👩🏻‍🦽\",\n  \"👩🏻‍⚕️\",\n  \"👩🏻‍⚖️\",\n  \"👩🏻‍✈️\",\n  \"👩🏻\",\n  \"👩🏼‍🌾\",\n  \"👩🏼‍🍳\",\n  \"👩🏼‍🎓\",\n  \"👩🏼‍🎤\",\n  \"👩🏼‍🎨\",\n  \"👩🏼‍🏫\",\n  \"👩🏼‍🏭\",\n  \"👩🏼‍💻\",\n  \"👩🏼‍💼\",\n  \"👩🏼‍🔧\",\n  \"👩🏼‍🔬\",\n  \"👩🏼‍🚀\",\n  \"👩🏼‍🚒\",\n  \"👩🏼‍🤝‍👨🏻\",\n  \"👩🏼‍🤝‍👨🏽\",\n  \"👩🏼‍🤝‍👨🏾\",\n  \"👩🏼‍🤝‍👨🏿\",\n  \"👩🏼‍🤝‍👩🏻\",\n  \"👩🏼‍🦯\",\n  \"👩🏼‍🦰\",\n  \"👩🏼‍🦱\",\n  \"👩🏼‍🦲\",\n  \"👩🏼‍🦳\",\n  \"👩🏼‍🦼\",\n  \"👩🏼‍🦽\",\n  \"👩🏼‍⚕️\",\n  \"👩🏼‍⚖️\",\n  \"👩🏼‍✈️\",\n  \"👩🏼\",\n  \"👩🏽‍🌾\",\n  \"👩🏽‍🍳\",\n  \"👩🏽‍🎓\",\n  \"👩🏽‍🎤\",\n  \"👩🏽‍🎨\",\n  \"👩🏽‍🏫\",\n  \"👩🏽‍🏭\",\n  \"👩🏽‍💻\",\n  \"👩🏽‍💼\",\n  \"👩🏽‍🔧\",\n  \"👩🏽‍🔬\",\n  \"👩🏽‍🚀\",\n  \"👩🏽‍🚒\",\n  \"👩🏽‍🤝‍👨🏻\",\n  \"👩🏽‍🤝‍👨🏼\",\n  \"👩🏽‍🤝‍👨🏾\",\n  \"👩🏽‍🤝‍👨🏿\",\n  \"👩🏽‍🤝‍👩🏻\",\n  \"👩🏽‍🤝‍👩🏼\",\n  \"👩🏽‍🦯\",\n  \"👩🏽‍🦰\",\n  \"👩🏽‍🦱\",\n  \"👩🏽‍🦲\",\n  \"👩🏽‍🦳\",\n  \"👩🏽‍🦼\",\n  \"👩🏽‍🦽\",\n  \"👩🏽‍⚕️\",\n  \"👩🏽‍⚖️\",\n  \"👩🏽‍✈️\",\n  \"👩🏽\",\n  \"👩🏾‍🌾\",\n  \"👩🏾‍🍳\",\n  \"👩🏾‍🎓\",\n  \"👩🏾‍🎤\",\n  \"👩🏾‍🎨\",\n  \"👩🏾‍🏫\",\n  \"👩🏾‍🏭\",\n  \"👩🏾‍💻\",\n  \"👩🏾‍💼\",\n  \"👩🏾‍🔧\",\n  \"👩🏾‍🔬\",\n  \"👩🏾‍🚀\",\n  \"👩🏾‍🚒\",\n  \"👩🏾‍🤝‍👨🏻\",\n  \"👩🏾‍🤝‍👨🏼\",\n  \"👩🏾‍🤝‍👨🏽\",\n  \"👩🏾‍🤝‍👨🏿\",\n  \"👩🏾‍🤝‍👩🏻\",\n  \"👩🏾‍🤝‍👩🏼\",\n  \"👩🏾‍🤝‍👩🏽\",\n  \"👩🏾‍🦯\",\n  \"👩🏾‍🦰\",\n  \"👩🏾‍🦱\",\n  \"👩🏾‍🦲\",\n  \"👩🏾‍🦳\",\n  \"👩🏾‍🦼\",\n  \"👩🏾‍🦽\",\n  \"👩🏾‍⚕️\",\n  \"👩🏾‍⚖️\",\n  \"👩🏾‍✈️\",\n  \"👩🏾\",\n  \"👩🏿‍🌾\",\n  \"👩🏿‍🍳\",\n  \"👩🏿‍🎓\",\n  \"👩🏿‍🎤\",\n  \"👩🏿‍🎨\",\n  \"👩🏿‍🏫\",\n  \"👩🏿‍🏭\",\n  \"👩🏿‍💻\",\n  \"👩🏿‍💼\",\n  \"👩🏿‍🔧\",\n  \"👩🏿‍🔬\",\n  \"👩🏿‍🚀\",\n  \"👩🏿‍🚒\",\n  \"👩🏿‍🤝‍👨🏻\",\n  \"👩🏿‍🤝‍👨🏼\",\n  \"👩🏿‍🤝‍👨🏽\",\n  \"👩🏿‍🤝‍👨🏾\",\n  \"👩🏿‍🤝‍👩🏻\",\n  \"👩🏿‍🤝‍👩🏼\",\n  \"👩🏿‍🤝‍👩🏽\",\n  \"👩🏿‍🤝‍👩🏾\",\n  \"👩🏿‍🦯\",\n  \"👩🏿‍🦰\",\n  \"👩🏿‍🦱\",\n  \"👩🏿‍🦲\",\n  \"👩🏿‍🦳\",\n  \"👩🏿‍🦼\",\n  \"👩🏿‍🦽\",\n  \"👩🏿‍⚕️\",\n  \"👩🏿‍⚖️\",\n  \"👩🏿‍✈️\",\n  \"👩🏿\",\n  \"👩‍🌾\",\n  \"👩‍🍳\",\n  \"👩‍🎓\",\n  \"👩‍🎤\",\n  \"👩‍🎨\",\n  \"👩‍🏫\",\n  \"👩‍🏭\",\n  \"👩‍👦‍👦\",\n  \"👩‍👦\",\n  \"👩‍👧‍👦\",\n  \"👩‍👧‍👧\",\n  \"👩‍👧\",\n  \"👩‍👩‍👦‍👦\",\n  \"👩‍👩‍👦\",\n  \"👩‍👩‍👧‍👦\",\n  \"👩‍👩‍👧‍👧\",\n  \"👩‍👩‍👧\",\n  \"👩‍💻\",\n  \"👩‍💼\",\n  \"👩‍🔧\",\n  \"👩‍🔬\",\n  \"👩‍🚀\",\n  \"👩‍🚒\",\n  \"👩‍🦯\",\n  \"👩‍🦰\",\n  \"👩‍🦱\",\n  \"👩‍🦲\",\n  \"👩‍🦳\",\n  \"👩‍🦼\",\n  \"👩‍🦽\",\n  \"👩‍⚕️\",\n  \"👩‍⚖️\",\n  \"👩‍✈️\",\n  \"👩‍❤️‍👨\",\n  \"👩‍❤️‍👩\",\n  \"👩‍❤️‍💋‍👨\",\n  \"👩‍❤️‍💋‍👩\",\n  \"👩\",\n  \"👪\",\n  \"👫🏻\",\n  \"👫🏼\",\n  \"👫🏽\",\n  \"👫🏾\",\n  \"👫🏿\",\n  \"👫\",\n  \"👬🏻\",\n  \"👬🏼\",\n  \"👬🏽\",\n  \"👬🏾\",\n  \"👬🏿\",\n  \"👬\",\n  \"👭🏻\",\n  \"👭🏼\",\n  \"👭🏽\",\n  \"👭🏾\",\n  \"👭🏿\",\n  \"👭\",\n  \"👮🏻‍♀️\",\n  \"👮🏻‍♂️\",\n  \"👮🏻\",\n  \"👮🏼‍♀️\",\n  \"👮🏼‍♂️\",\n  \"👮🏼\",\n  \"👮🏽‍♀️\",\n  \"👮🏽‍♂️\",\n  \"👮🏽\",\n  \"👮🏾‍♀️\",\n  \"👮🏾‍♂️\",\n  \"👮🏾\",\n  \"👮🏿‍♀️\",\n  \"👮🏿‍♂️\",\n  \"👮🏿\",\n  \"👮‍♀️\",\n  \"👮‍♂️\",\n  \"👮\",\n  \"👯‍♀️\",\n  \"👯‍♂️\",\n  \"👯\",\n  \"👰🏻\",\n  \"👰🏼\",\n  \"👰🏽\",\n  \"👰🏾\",\n  \"👰🏿\",\n  \"👰\",\n  \"👱🏻‍♀️\",\n  \"👱🏻‍♂️\",\n  \"👱🏻\",\n  \"👱🏼‍♀️\",\n  \"👱🏼‍♂️\",\n  \"👱🏼\",\n  \"👱🏽‍♀️\",\n  \"👱🏽‍♂️\",\n  \"👱🏽\",\n  \"👱🏾‍♀️\",\n  \"👱🏾‍♂️\",\n  \"👱🏾\",\n  \"👱🏿‍♀️\",\n  \"👱🏿‍♂️\",\n  \"👱🏿\",\n  \"👱‍♀️\",\n  \"👱‍♂️\",\n  \"👱\",\n  \"👲🏻\",\n  \"👲🏼\",\n  \"👲🏽\",\n  \"👲🏾\",\n  \"👲🏿\",\n  \"👲\",\n  \"👳🏻‍♀️\",\n  \"👳🏻‍♂️\",\n  \"👳🏻\",\n  \"👳🏼‍♀️\",\n  \"👳🏼‍♂️\",\n  \"👳🏼\",\n  \"👳🏽‍♀️\",\n  \"👳🏽‍♂️\",\n  \"👳🏽\",\n  \"👳🏾‍♀️\",\n  \"👳🏾‍♂️\",\n  \"👳🏾\",\n  \"👳🏿‍♀️\",\n  \"👳🏿‍♂️\",\n  \"👳🏿\",\n  \"👳‍♀️\",\n  \"👳‍♂️\",\n  \"👳\",\n  \"👴🏻\",\n  \"👴🏼\",\n  \"👴🏽\",\n  \"👴🏾\",\n  \"👴🏿\",\n  \"👴\",\n  \"👵🏻\",\n  \"👵🏼\",\n  \"👵🏽\",\n  \"👵🏾\",\n  \"👵🏿\",\n  \"👵\",\n  \"👶🏻\",\n  \"👶🏼\",\n  \"👶🏽\",\n  \"👶🏾\",\n  \"👶🏿\",\n  \"👶\",\n  \"👷🏻‍♀️\",\n  \"👷🏻‍♂️\",\n  \"👷🏻\",\n  \"👷🏼‍♀️\",\n  \"👷🏼‍♂️\",\n  \"👷🏼\",\n  \"👷🏽‍♀️\",\n  \"👷🏽‍♂️\",\n  \"👷🏽\",\n  \"👷🏾‍♀️\",\n  \"👷🏾‍♂️\",\n  \"👷🏾\",\n  \"👷🏿‍♀️\",\n  \"👷🏿‍♂️\",\n  \"👷🏿\",\n  \"👷‍♀️\",\n  \"👷‍♂️\",\n  \"👷\",\n  \"👸🏻\",\n  \"👸🏼\",\n  \"👸🏽\",\n  \"👸🏾\",\n  \"👸🏿\",\n  \"👸\",\n  \"👹\",\n  \"👺\",\n  \"👻\",\n  \"👼🏻\",\n  \"👼🏼\",\n  \"👼🏽\",\n  \"👼🏾\",\n  \"👼🏿\",\n  \"👼\",\n  \"👽\",\n  \"👾\",\n  \"👿\",\n  \"💀\",\n  \"💁🏻‍♀️\",\n  \"💁🏻‍♂️\",\n  \"💁🏻\",\n  \"💁🏼‍♀️\",\n  \"💁🏼‍♂️\",\n  \"💁🏼\",\n  \"💁🏽‍♀️\",\n  \"💁🏽‍♂️\",\n  \"💁🏽\",\n  \"💁🏾‍♀️\",\n  \"💁🏾‍♂️\",\n  \"💁🏾\",\n  \"💁🏿‍♀️\",\n  \"💁🏿‍♂️\",\n  \"💁🏿\",\n  \"💁‍♀️\",\n  \"💁‍♂️\",\n  \"💁\",\n  \"💂🏻‍♀️\",\n  \"💂🏻‍♂️\",\n  \"💂🏻\",\n  \"💂🏼‍♀️\",\n  \"💂🏼‍♂️\",\n  \"💂🏼\",\n  \"💂🏽‍♀️\",\n  \"💂🏽‍♂️\",\n  \"💂🏽\",\n  \"💂🏾‍♀️\",\n  \"💂🏾‍♂️\",\n  \"💂🏾\",\n  \"💂🏿‍♀️\",\n  \"💂🏿‍♂️\",\n  \"💂🏿\",\n  \"💂‍♀️\",\n  \"💂‍♂️\",\n  \"💂\",\n  \"💃🏻\",\n  \"💃🏼\",\n  \"💃🏽\",\n  \"💃🏾\",\n  \"💃🏿\",\n  \"💃\",\n  \"💄\",\n  \"💅🏻\",\n  \"💅🏼\",\n  \"💅🏽\",\n  \"💅🏾\",\n  \"💅🏿\",\n  \"💅\",\n  \"💆🏻‍♀️\",\n  \"💆🏻‍♂️\",\n  \"💆🏻\",\n  \"💆🏼‍♀️\",\n  \"💆🏼‍♂️\",\n  \"💆🏼\",\n  \"💆🏽‍♀️\",\n  \"💆🏽‍♂️\",\n  \"💆🏽\",\n  \"💆🏾‍♀️\",\n  \"💆🏾‍♂️\",\n  \"💆🏾\",\n  \"💆🏿‍♀️\",\n  \"💆🏿‍♂️\",\n  \"💆🏿\",\n  \"💆‍♀️\",\n  \"💆‍♂️\",\n  \"💆\",\n  \"💇🏻‍♀️\",\n  \"💇🏻‍♂️\",\n  \"💇🏻\",\n  \"💇🏼‍♀️\",\n  \"💇🏼‍♂️\",\n  \"💇🏼\",\n  \"💇🏽‍♀️\",\n  \"💇🏽‍♂️\",\n  \"💇🏽\",\n  \"💇🏾‍♀️\",\n  \"💇🏾‍♂️\",\n  \"💇🏾\",\n  \"💇🏿‍♀️\",\n  \"💇🏿‍♂️\",\n  \"💇🏿\",\n  \"💇‍♀️\",\n  \"💇‍♂️\",\n  \"💇\",\n  \"💈\",\n  \"💉\",\n  \"💊\",\n  \"💋\",\n  \"💌\",\n  \"💍\",\n  \"💎\",\n  \"💏\",\n  \"💐\",\n  \"💑\",\n  \"💒\",\n  \"💓\",\n  \"💔\",\n  \"💕\",\n  \"💖\",\n  \"💗\",\n  \"💘\",\n  \"💙\",\n  \"💚\",\n  \"💛\",\n  \"💜\",\n  \"💝\",\n  \"💞\",\n  \"💟\",\n  \"💠\",\n  \"💡\",\n  \"💢\",\n  \"💣\",\n  \"💤\",\n  \"💥\",\n  \"💦\",\n  \"💧\",\n  \"💨\",\n  \"💩\",\n  \"💪🏻\",\n  \"💪🏼\",\n  \"💪🏽\",\n  \"💪🏾\",\n  \"💪🏿\",\n  \"💪\",\n  \"💫\",\n  \"💬\",\n  \"💭\",\n  \"💮\",\n  \"💯\",\n  \"💰\",\n  \"💱\",\n  \"💲\",\n  \"💳\",\n  \"💴\",\n  \"💵\",\n  \"💶\",\n  \"💷\",\n  \"💸\",\n  \"💹\",\n  \"💺\",\n  \"💻\",\n  \"💼\",\n  \"💽\",\n  \"💾\",\n  \"💿\",\n  \"📀\",\n  \"📁\",\n  \"📂\",\n  \"📃\",\n  \"📄\",\n  \"📅\",\n  \"📆\",\n  \"📇\",\n  \"📈\",\n  \"📉\",\n  \"📊\",\n  \"📋\",\n  \"📌\",\n  \"📍\",\n  \"📎\",\n  \"📏\",\n  \"📐\",\n  \"📑\",\n  \"📒\",\n  \"📓\",\n  \"📔\",\n  \"📕\",\n  \"📖\",\n  \"📗\",\n  \"📘\",\n  \"📙\",\n  \"📚\",\n  \"📛\",\n  \"📜\",\n  \"📝\",\n  \"📞\",\n  \"📟\",\n  \"📠\",\n  \"📡\",\n  \"📢\",\n  \"📣\",\n  \"📤\",\n  \"📥\",\n  \"📦\",\n  \"📧\",\n  \"📨\",\n  \"📩\",\n  \"📪\",\n  \"📫\",\n  \"📬\",\n  \"📭\",\n  \"📮\",\n  \"📯\",\n  \"📰\",\n  \"📱\",\n  \"📲\",\n  \"📳\",\n  \"📴\",\n  \"📵\",\n  \"📶\",\n  \"📷\",\n  \"📸\",\n  \"📹\",\n  \"📺\",\n  \"📻\",\n  \"📼\",\n  \"📽️\",\n  \"📿\",\n  \"🔀\",\n  \"🔁\",\n  \"🔂\",\n  \"🔃\",\n  \"🔄\",\n  \"🔅\",\n  \"🔆\",\n  \"🔇\",\n  \"🔈\",\n  \"🔉\",\n  \"🔊\",\n  \"🔋\",\n  \"🔌\",\n  \"🔍\",\n  \"🔎\",\n  \"🔏\",\n  \"🔐\",\n  \"🔑\",\n  \"🔒\",\n  \"🔓\",\n  \"🔔\",\n  \"🔕\",\n  \"🔖\",\n  \"🔗\",\n  \"🔘\",\n  \"🔙\",\n  \"🔚\",\n  \"🔛\",\n  \"🔜\",\n  \"🔝\",\n  \"🔞\",\n  \"🔟\",\n  \"🔠\",\n  \"🔡\",\n  \"🔢\",\n  \"🔣\",\n  \"🔤\",\n  \"🔥\",\n  \"🔦\",\n  \"🔧\",\n  \"🔨\",\n  \"🔩\",\n  \"🔪\",\n  \"🔫\",\n  \"🔬\",\n  \"🔭\",\n  \"🔮\",\n  \"🔯\",\n  \"🔰\",\n  \"🔱\",\n  \"🔲\",\n  \"🔳\",\n  \"🔴\",\n  \"🔵\",\n  \"🔶\",\n  \"🔷\",\n  \"🔸\",\n  \"🔹\",\n  \"🔺\",\n  \"🔻\",\n  \"🔼\",\n  \"🔽\",\n  \"🕉️\",\n  \"🕊️\",\n  \"🕋\",\n  \"🕌\",\n  \"🕍\",\n  \"🕎\",\n  \"🕐\",\n  \"🕑\",\n  \"🕒\",\n  \"🕓\",\n  \"🕔\",\n  \"🕕\",\n  \"🕖\",\n  \"🕗\",\n  \"🕘\",\n  \"🕙\",\n  \"🕚\",\n  \"🕛\",\n  \"🕜\",\n  \"🕝\",\n  \"🕞\",\n  \"🕟\",\n  \"🕠\",\n  \"🕡\",\n  \"🕢\",\n  \"🕣\",\n  \"🕤\",\n  \"🕥\",\n  \"🕦\",\n  \"🕧\",\n  \"🕯️\",\n  \"🕰️\",\n  \"🕳️\",\n  \"🕴🏻‍♀️\",\n  \"🕴🏻‍♂️\",\n  \"🕴🏻\",\n  \"🕴🏼‍♀️\",\n  \"🕴🏼‍♂️\",\n  \"🕴🏼\",\n  \"🕴🏽‍♀️\",\n  \"🕴🏽‍♂️\",\n  \"🕴🏽\",\n  \"🕴🏾‍♀️\",\n  \"🕴🏾‍♂️\",\n  \"🕴🏾\",\n  \"🕴🏿‍♀️\",\n  \"🕴🏿‍♂️\",\n  \"🕴🏿\",\n  \"🕴️‍♀️\",\n  \"🕴️‍♂️\",\n  \"🕴️\",\n  \"🕵🏻‍♀️\",\n  \"🕵🏻‍♂️\",\n  \"🕵🏻\",\n  \"🕵🏼‍♀️\",\n  \"🕵🏼‍♂️\",\n  \"🕵🏼\",\n  \"🕵🏽‍♀️\",\n  \"🕵🏽‍♂️\",\n  \"🕵🏽\",\n  \"🕵🏾‍♀️\",\n  \"🕵🏾‍♂️\",\n  \"🕵🏾\",\n  \"🕵🏿‍♀️\",\n  \"🕵🏿‍♂️\",\n  \"🕵🏿\",\n  \"🕵️‍♀️\",\n  \"🕵️‍♂️\",\n  \"🕵️\",\n  \"🕶️\",\n  \"🕷️\",\n  \"🕸️\",\n  \"🕹️\",\n  \"🕺🏻\",\n  \"🕺🏼\",\n  \"🕺🏽\",\n  \"🕺🏾\",\n  \"🕺🏿\",\n  \"🕺\",\n  \"🖇️\",\n  \"🖊️\",\n  \"🖋️\",\n  \"🖌️\",\n  \"🖍️\",\n  \"🖐🏻\",\n  \"🖐🏼\",\n  \"🖐🏽\",\n  \"🖐🏾\",\n  \"🖐🏿\",\n  \"🖐️\",\n  \"🖕🏻\",\n  \"🖕🏼\",\n  \"🖕🏽\",\n  \"🖕🏾\",\n  \"🖕🏿\",\n  \"🖕\",\n  \"🖖🏻\",\n  \"🖖🏼\",\n  \"🖖🏽\",\n  \"🖖🏾\",\n  \"🖖🏿\",\n  \"🖖\",\n  \"🖤\",\n  \"🖥️\",\n  \"🖨️\",\n  \"🖱️\",\n  \"🖲️\",\n  \"🖼️\",\n  \"🗂️\",\n  \"🗃️\",\n  \"🗄️\",\n  \"🗑️\",\n  \"🗒️\",\n  \"🗓️\",\n  \"🗜️\",\n  \"🗝️\",\n  \"🗞️\",\n  \"🗡️\",\n  \"🗣️\",\n  \"🗨️\",\n  \"🗯️\",\n  \"🗳️\",\n  \"🗺️\",\n  \"🗻\",\n  \"🗼\",\n  \"🗽\",\n  \"🗾\",\n  \"🗿\",\n  \"😀\",\n  \"😁\",\n  \"😂\",\n  \"😃\",\n  \"😄\",\n  \"😅\",\n  \"😆\",\n  \"😇\",\n  \"😈\",\n  \"😉\",\n  \"😊\",\n  \"😋\",\n  \"😌\",\n  \"😍\",\n  \"😎\",\n  \"😏\",\n  \"😐\",\n  \"😑\",\n  \"😒\",\n  \"😓\",\n  \"😔\",\n  \"😕\",\n  \"😖\",\n  \"😗\",\n  \"😘\",\n  \"😙\",\n  \"😚\",\n  \"😛\",\n  \"😜\",\n  \"😝\",\n  \"😞\",\n  \"😟\",\n  \"😠\",\n  \"😡\",\n  \"😢\",\n  \"😣\",\n  \"😤\",\n  \"😥\",\n  \"😦\",\n  \"😧\",\n  \"😨\",\n  \"😩\",\n  \"😪\",\n  \"😫\",\n  \"😬\",\n  \"😭\",\n  \"😮\",\n  \"😯\",\n  \"😰\",\n  \"😱\",\n  \"😲\",\n  \"😳\",\n  \"😴\",\n  \"😵\",\n  \"😶\",\n  \"😷\",\n  \"😸\",\n  \"😹\",\n  \"😺\",\n  \"😻\",\n  \"😼\",\n  \"😽\",\n  \"😾\",\n  \"😿\",\n  \"🙀\",\n  \"🙁\",\n  \"🙂\",\n  \"🙃\",\n  \"🙄\",\n  \"🙅🏻‍♀️\",\n  \"🙅🏻‍♂️\",\n  \"🙅🏻\",\n  \"🙅🏼‍♀️\",\n  \"🙅🏼‍♂️\",\n  \"🙅🏼\",\n  \"🙅🏽‍♀️\",\n  \"🙅🏽‍♂️\",\n  \"🙅🏽\",\n  \"🙅🏾‍♀️\",\n  \"🙅🏾‍♂️\",\n  \"🙅🏾\",\n  \"🙅🏿‍♀️\",\n  \"🙅🏿‍♂️\",\n  \"🙅🏿\",\n  \"🙅‍♀️\",\n  \"🙅‍♂️\",\n  \"🙅\",\n  \"🙆🏻‍♀️\",\n  \"🙆🏻‍♂️\",\n  \"🙆🏻\",\n  \"🙆🏼‍♀️\",\n  \"🙆🏼‍♂️\",\n  \"🙆🏼\",\n  \"🙆🏽‍♀️\",\n  \"🙆🏽‍♂️\",\n  \"🙆🏽\",\n  \"🙆🏾‍♀️\",\n  \"🙆🏾‍♂️\",\n  \"🙆🏾\",\n  \"🙆🏿‍♀️\",\n  \"🙆🏿‍♂️\",\n  \"🙆🏿\",\n  \"🙆‍♀️\",\n  \"🙆‍♂️\",\n  \"🙆\",\n  \"🙇🏻‍♀️\",\n  \"🙇🏻‍♂️\",\n  \"🙇🏻\",\n  \"🙇🏼‍♀️\",\n  \"🙇🏼‍♂️\",\n  \"🙇🏼\",\n  \"🙇🏽‍♀️\",\n  \"🙇🏽‍♂️\",\n  \"🙇🏽\",\n  \"🙇🏾‍♀️\",\n  \"🙇🏾‍♂️\",\n  \"🙇🏾\",\n  \"🙇🏿‍♀️\",\n  \"🙇🏿‍♂️\",\n  \"🙇🏿\",\n  \"🙇‍♀️\",\n  \"🙇‍♂️\",\n  \"🙇\",\n  \"🙈\",\n  \"🙉\",\n  \"🙊\",\n  \"🙋🏻‍♀️\",\n  \"🙋🏻‍♂️\",\n  \"🙋🏻\",\n  \"🙋🏼‍♀️\",\n  \"🙋🏼‍♂️\",\n  \"🙋🏼\",\n  \"🙋🏽‍♀️\",\n  \"🙋🏽‍♂️\",\n  \"🙋🏽\",\n  \"🙋🏾‍♀️\",\n  \"🙋🏾‍♂️\",\n  \"🙋🏾\",\n  \"🙋🏿‍♀️\",\n  \"🙋🏿‍♂️\",\n  \"🙋🏿\",\n  \"🙋‍♀️\",\n  \"🙋‍♂️\",\n  \"🙋\",\n  \"🙌🏻\",\n  \"🙌🏼\",\n  \"🙌🏽\",\n  \"🙌🏾\",\n  \"🙌🏿\",\n  \"🙌\",\n  \"🙍🏻‍♀️\",\n  \"🙍🏻‍♂️\",\n  \"🙍🏻\",\n  \"🙍🏼‍♀️\",\n  \"🙍🏼‍♂️\",\n  \"🙍🏼\",\n  \"🙍🏽‍♀️\",\n  \"🙍🏽‍♂️\",\n  \"🙍🏽\",\n  \"🙍🏾‍♀️\",\n  \"🙍🏾‍♂️\",\n  \"🙍🏾\",\n  \"🙍🏿‍♀️\",\n  \"🙍🏿‍♂️\",\n  \"🙍🏿\",\n  \"🙍‍♀️\",\n  \"🙍‍♂️\",\n  \"🙍\",\n  \"🙎🏻‍♀️\",\n  \"🙎🏻‍♂️\",\n  \"🙎🏻\",\n  \"🙎🏼‍♀️\",\n  \"🙎🏼‍♂️\",\n  \"🙎🏼\",\n  \"🙎🏽‍♀️\",\n  \"🙎🏽‍♂️\",\n  \"🙎🏽\",\n  \"🙎🏾‍♀️\",\n  \"🙎🏾‍♂️\",\n  \"🙎🏾\",\n  \"🙎🏿‍♀️\",\n  \"🙎🏿‍♂️\",\n  \"🙎🏿\",\n  \"🙎‍♀️\",\n  \"🙎‍♂️\",\n  \"🙎\",\n  \"🙏🏻\",\n  \"🙏🏼\",\n  \"🙏🏽\",\n  \"🙏🏾\",\n  \"🙏🏿\",\n  \"🙏\",\n  \"🚀\",\n  \"🚁\",\n  \"🚂\",\n  \"🚃\",\n  \"🚄\",\n  \"🚅\",\n  \"🚆\",\n  \"🚇\",\n  \"🚈\",\n  \"🚉\",\n  \"🚊\",\n  \"🚋\",\n  \"🚌\",\n  \"🚍\",\n  \"🚎\",\n  \"🚏\",\n  \"🚐\",\n  \"🚑\",\n  \"🚒\",\n  \"🚓\",\n  \"🚔\",\n  \"🚕\",\n  \"🚖\",\n  \"🚗\",\n  \"🚘\",\n  \"🚙\",\n  \"🚚\",\n  \"🚛\",\n  \"🚜\",\n  \"🚝\",\n  \"🚞\",\n  \"🚟\",\n  \"🚠\",\n  \"🚡\",\n  \"🚢\",\n  \"🚣🏻‍♀️\",\n  \"🚣🏻‍♂️\",\n  \"🚣🏻\",\n  \"🚣🏼‍♀️\",\n  \"🚣🏼‍♂️\",\n  \"🚣🏼\",\n  \"🚣🏽‍♀️\",\n  \"🚣🏽‍♂️\",\n  \"🚣🏽\",\n  \"🚣🏾‍♀️\",\n  \"🚣🏾‍♂️\",\n  \"🚣🏾\",\n  \"🚣🏿‍♀️\",\n  \"🚣🏿‍♂️\",\n  \"🚣🏿\",\n  \"🚣‍♀️\",\n  \"🚣‍♂️\",\n  \"🚣\",\n  \"🚤\",\n  \"🚥\",\n  \"🚦\",\n  \"🚧\",\n  \"🚨\",\n  \"🚩\",\n  \"🚪\",\n  \"🚫\",\n  \"🚬\",\n  \"🚭\",\n  \"🚮\",\n  \"🚯\",\n  \"🚰\",\n  \"🚱\",\n  \"🚲\",\n  \"🚳\",\n  \"🚴🏻‍♀️\",\n  \"🚴🏻‍♂️\",\n  \"🚴🏻\",\n  \"🚴🏼‍♀️\",\n  \"🚴🏼‍♂️\",\n  \"🚴🏼\",\n  \"🚴🏽‍♀️\",\n  \"🚴🏽‍♂️\",\n  \"🚴🏽\",\n  \"🚴🏾‍♀️\",\n  \"🚴🏾‍♂️\",\n  \"🚴🏾\",\n  \"🚴🏿‍♀️\",\n  \"🚴🏿‍♂️\",\n  \"🚴🏿\",\n  \"🚴‍♀️\",\n  \"🚴‍♂️\",\n  \"🚴\",\n  \"🚵🏻‍♀️\",\n  \"🚵🏻‍♂️\",\n  \"🚵🏻\",\n  \"🚵🏼‍♀️\",\n  \"🚵🏼‍♂️\",\n  \"🚵🏼\",\n  \"🚵🏽‍♀️\",\n  \"🚵🏽‍♂️\",\n  \"🚵🏽\",\n  \"🚵🏾‍♀️\",\n  \"🚵🏾‍♂️\",\n  \"🚵🏾\",\n  \"🚵🏿‍♀️\",\n  \"🚵🏿‍♂️\",\n  \"🚵🏿\",\n  \"🚵‍♀️\",\n  \"🚵‍♂️\",\n  \"🚵\",\n  \"🚶🏻‍♀️\",\n  \"🚶🏻‍♂️\",\n  \"🚶🏻\",\n  \"🚶🏼‍♀️\",\n  \"🚶🏼‍♂️\",\n  \"🚶🏼\",\n  \"🚶🏽‍♀️\",\n  \"🚶🏽‍♂️\",\n  \"🚶🏽\",\n  \"🚶🏾‍♀️\",\n  \"🚶🏾‍♂️\",\n  \"🚶🏾\",\n  \"🚶🏿‍♀️\",\n  \"🚶🏿‍♂️\",\n  \"🚶🏿\",\n  \"🚶‍♀️\",\n  \"🚶‍♂️\",\n  \"🚶\",\n  \"🚷\",\n  \"🚸\",\n  \"🚹\",\n  \"🚺\",\n  \"🚻\",\n  \"🚼\",\n  \"🚽\",\n  \"🚾\",\n  \"🚿\",\n  \"🛀🏻\",\n  \"🛀🏼\",\n  \"🛀🏽\",\n  \"🛀🏾\",\n  \"🛀🏿\",\n  \"🛀\",\n  \"🛁\",\n  \"🛂\",\n  \"🛃\",\n  \"🛄\",\n  \"🛅\",\n  \"🛋️\",\n  \"🛌🏻\",\n  \"🛌🏼\",\n  \"🛌🏽\",\n  \"🛌🏾\",\n  \"🛌🏿\",\n  \"🛌\",\n  \"🛍️\",\n  \"🛎️\",\n  \"🛏️\",\n  \"🛐\",\n  \"🛑\",\n  \"🛒\",\n  \"🛕\",\n  \"🛠️\",\n  \"🛡️\",\n  \"🛢️\",\n  \"🛣️\",\n  \"🛤️\",\n  \"🛥️\",\n  \"🛩️\",\n  \"🛫\",\n  \"🛬\",\n  \"🛰️\",\n  \"🛳️\",\n  \"🛴\",\n  \"🛵\",\n  \"🛶\",\n  \"🛷\",\n  \"🛸\",\n  \"🛹\",\n  \"🛺\",\n  \"🟠\",\n  \"🟡\",\n  \"🟢\",\n  \"🟣\",\n  \"🟤\",\n  \"🟥\",\n  \"🟦\",\n  \"🟧\",\n  \"🟨\",\n  \"🟩\",\n  \"🟪\",\n  \"🟫\",\n  \"🤍\",\n  \"🤎\",\n  \"🤏🏻\",\n  \"🤏🏼\",\n  \"🤏🏽\",\n  \"🤏🏾\",\n  \"🤏🏿\",\n  \"🤏\",\n  \"🤐\",\n  \"🤑\",\n  \"🤒\",\n  \"🤓\",\n  \"🤔\",\n  \"🤕\",\n  \"🤖\",\n  \"🤗\",\n  \"🤘🏻\",\n  \"🤘🏼\",\n  \"🤘🏽\",\n  \"🤘🏾\",\n  \"🤘🏿\",\n  \"🤘\",\n  \"🤙🏻\",\n  \"🤙🏼\",\n  \"🤙🏽\",\n  \"🤙🏾\",\n  \"🤙🏿\",\n  \"🤙\",\n  \"🤚🏻\",\n  \"🤚🏼\",\n  \"🤚🏽\",\n  \"🤚🏾\",\n  \"🤚🏿\",\n  \"🤚\",\n  \"🤛🏻\",\n  \"🤛🏼\",\n  \"🤛🏽\",\n  \"🤛🏾\",\n  \"🤛🏿\",\n  \"🤛\",\n  \"🤜🏻\",\n  \"🤜🏼\",\n  \"🤜🏽\",\n  \"🤜🏾\",\n  \"🤜🏿\",\n  \"🤜\",\n  \"🤝\",\n  \"🤞🏻\",\n  \"🤞🏼\",\n  \"🤞🏽\",\n  \"🤞🏾\",\n  \"🤞🏿\",\n  \"🤞\",\n  \"🤟🏻\",\n  \"🤟🏼\",\n  \"🤟🏽\",\n  \"🤟🏾\",\n  \"🤟🏿\",\n  \"🤟\",\n  \"🤠\",\n  \"🤡\",\n  \"🤢\",\n  \"🤣\",\n  \"🤤\",\n  \"🤥\",\n  \"🤦🏻‍♀️\",\n  \"🤦🏻‍♂️\",\n  \"🤦🏻\",\n  \"🤦🏼‍♀️\",\n  \"🤦🏼‍♂️\",\n  \"🤦🏼\",\n  \"🤦🏽‍♀️\",\n  \"🤦🏽‍♂️\",\n  \"🤦🏽\",\n  \"🤦🏾‍♀️\",\n  \"🤦🏾‍♂️\",\n  \"🤦🏾\",\n  \"🤦🏿‍♀️\",\n  \"🤦🏿‍♂️\",\n  \"🤦🏿\",\n  \"🤦‍♀️\",\n  \"🤦‍♂️\",\n  \"🤦\",\n  \"🤧\",\n  \"🤨\",\n  \"🤩\",\n  \"🤪\",\n  \"🤫\",\n  \"🤬\",\n  \"🤭\",\n  \"🤮\",\n  \"🤯\",\n  \"🤰🏻\",\n  \"🤰🏼\",\n  \"🤰🏽\",\n  \"🤰🏾\",\n  \"🤰🏿\",\n  \"🤰\",\n  \"🤱🏻\",\n  \"🤱🏼\",\n  \"🤱🏽\",\n  \"🤱🏾\",\n  \"🤱🏿\",\n  \"🤱\",\n  \"🤲🏻\",\n  \"🤲🏼\",\n  \"🤲🏽\",\n  \"🤲🏾\",\n  \"🤲🏿\",\n  \"🤲\",\n  \"🤳🏻\",\n  \"🤳🏼\",\n  \"🤳🏽\",\n  \"🤳🏾\",\n  \"🤳🏿\",\n  \"🤳\",\n  \"🤴🏻\",\n  \"🤴🏼\",\n  \"🤴🏽\",\n  \"🤴🏾\",\n  \"🤴🏿\",\n  \"🤴\",\n  \"🤵🏻‍♀️\",\n  \"🤵🏻‍♂️\",\n  \"🤵🏻\",\n  \"🤵🏼‍♀️\",\n  \"🤵🏼‍♂️\",\n  \"🤵🏼\",\n  \"🤵🏽‍♀️\",\n  \"🤵🏽‍♂️\",\n  \"🤵🏽\",\n  \"🤵🏾‍♀️\",\n  \"🤵🏾‍♂️\",\n  \"🤵🏾\",\n  \"🤵🏿‍♀️\",\n  \"🤵🏿‍♂️\",\n  \"🤵🏿\",\n  \"🤵‍♀️\",\n  \"🤵‍♂️\",\n  \"🤵\",\n  \"🤶🏻\",\n  \"🤶🏼\",\n  \"🤶🏽\",\n  \"🤶🏾\",\n  \"🤶🏿\",\n  \"🤶\",\n  \"🤷🏻‍♀️\",\n  \"🤷🏻‍♂️\",\n  \"🤷🏻\",\n  \"🤷🏼‍♀️\",\n  \"🤷🏼‍♂️\",\n  \"🤷🏼\",\n  \"🤷🏽‍♀️\",\n  \"🤷🏽‍♂️\",\n  \"🤷🏽\",\n  \"🤷🏾‍♀️\",\n  \"🤷🏾‍♂️\",\n  \"🤷🏾\",\n  \"🤷🏿‍♀️\",\n  \"🤷🏿‍♂️\",\n  \"🤷🏿\",\n  \"🤷‍♀️\",\n  \"🤷‍♂️\",\n  \"🤷\",\n  \"🤸🏻‍♀️\",\n  \"🤸🏻‍♂️\",\n  \"🤸🏻\",\n  \"🤸🏼‍♀️\",\n  \"🤸🏼‍♂️\",\n  \"🤸🏼\",\n  \"🤸🏽‍♀️\",\n  \"🤸🏽‍♂️\",\n  \"🤸🏽\",\n  \"🤸🏾‍♀️\",\n  \"🤸🏾‍♂️\",\n  \"🤸🏾\",\n  \"🤸🏿‍♀️\",\n  \"🤸🏿‍♂️\",\n  \"🤸🏿\",\n  \"🤸‍♀️\",\n  \"🤸‍♂️\",\n  \"🤸\",\n  \"🤹🏻‍♀️\",\n  \"🤹🏻‍♂️\",\n  \"🤹🏻\",\n  \"🤹🏼‍♀️\",\n  \"🤹🏼‍♂️\",\n  \"🤹🏼\",\n  \"🤹🏽‍♀️\",\n  \"🤹🏽‍♂️\",\n  \"🤹🏽\",\n  \"🤹🏾‍♀️\",\n  \"🤹🏾‍♂️\",\n  \"🤹🏾\",\n  \"🤹🏿‍♀️\",\n  \"🤹🏿‍♂️\",\n  \"🤹🏿\",\n  \"🤹‍♀️\",\n  \"🤹‍♂️\",\n  \"🤹\",\n  \"🤺\",\n  \"🤼‍♀️\",\n  \"🤼‍♂️\",\n  \"🤼\",\n  \"🤽🏻‍♀️\",\n  \"🤽🏻‍♂️\",\n  \"🤽🏻\",\n  \"🤽🏼‍♀️\",\n  \"🤽🏼‍♂️\",\n  \"🤽🏼\",\n  \"🤽🏽‍♀️\",\n  \"🤽🏽‍♂️\",\n  \"🤽🏽\",\n  \"🤽🏾‍♀️\",\n  \"🤽🏾‍♂️\",\n  \"🤽🏾\",\n  \"🤽🏿‍♀️\",\n  \"🤽🏿‍♂️\",\n  \"🤽🏿\",\n  \"🤽‍♀️\",\n  \"🤽‍♂️\",\n  \"🤽\",\n  \"🤾🏻‍♀️\",\n  \"🤾🏻‍♂️\",\n  \"🤾🏻\",\n  \"🤾🏼‍♀️\",\n  \"🤾🏼‍♂️\",\n  \"🤾🏼\",\n  \"🤾🏽‍♀️\",\n  \"🤾🏽‍♂️\",\n  \"🤾🏽\",\n  \"🤾🏾‍♀️\",\n  \"🤾🏾‍♂️\",\n  \"🤾🏾\",\n  \"🤾🏿‍♀️\",\n  \"🤾🏿‍♂️\",\n  \"🤾🏿\",\n  \"🤾‍♀️\",\n  \"🤾‍♂️\",\n  \"🤾\",\n  \"🤿\",\n  \"🥀\",\n  \"🥁\",\n  \"🥂\",\n  \"🥃\",\n  \"🥄\",\n  \"🥅\",\n  \"🥇\",\n  \"🥈\",\n  \"🥉\",\n  \"🥊\",\n  \"🥋\",\n  \"🥌\",\n  \"🥍\",\n  \"🥎\",\n  \"🥏\",\n  \"🥐\",\n  \"🥑\",\n  \"🥒\",\n  \"🥓\",\n  \"🥔\",\n  \"🥕\",\n  \"🥖\",\n  \"🥗\",\n  \"🥘\",\n  \"🥙\",\n  \"🥚\",\n  \"🥛\",\n  \"🥜\",\n  \"🥝\",\n  \"🥞\",\n  \"🥟\",\n  \"🥠\",\n  \"🥡\",\n  \"🥢\",\n  \"🥣\",\n  \"🥤\",\n  \"🥥\",\n  \"🥦\",\n  \"🥧\",\n  \"🥨\",\n  \"🥩\",\n  \"🥪\",\n  \"🥫\",\n  \"🥬\",\n  \"🥭\",\n  \"🥮\",\n  \"🥯\",\n  \"🥰\",\n  \"🥱\",\n  \"🥳\",\n  \"🥴\",\n  \"🥵\",\n  \"🥶\",\n  \"🥺\",\n  \"🥻\",\n  \"🥼\",\n  \"🥽\",\n  \"🥾\",\n  \"🥿\",\n  \"🦀\",\n  \"🦁\",\n  \"🦂\",\n  \"🦃\",\n  \"🦄\",\n  \"🦅\",\n  \"🦆\",\n  \"🦇\",\n  \"🦈\",\n  \"🦉\",\n  \"🦊\",\n  \"🦋\",\n  \"🦌\",\n  \"🦍\",\n  \"🦎\",\n  \"🦏\",\n  \"🦐\",\n  \"🦑\",\n  \"🦒\",\n  \"🦓\",\n  \"🦔\",\n  \"🦕\",\n  \"🦖\",\n  \"🦗\",\n  \"🦘\",\n  \"🦙\",\n  \"🦚\",\n  \"🦛\",\n  \"🦜\",\n  \"🦝\",\n  \"🦞\",\n  \"🦟\",\n  \"🦠\",\n  \"🦡\",\n  \"🦢\",\n  \"🦥\",\n  \"🦦\",\n  \"🦧\",\n  \"🦨\",\n  \"🦩\",\n  \"🦪\",\n  \"🦮\",\n  \"🦯\",\n  \"🦰\",\n  \"🦱\",\n  \"🦲\",\n  \"🦳\",\n  \"🦴\",\n  \"🦵🏻\",\n  \"🦵🏼\",\n  \"🦵🏽\",\n  \"🦵🏾\",\n  \"🦵🏿\",\n  \"🦵\",\n  \"🦶🏻\",\n  \"🦶🏼\",\n  \"🦶🏽\",\n  \"🦶🏾\",\n  \"🦶🏿\",\n  \"🦶\",\n  \"🦷\",\n  \"🦸🏻‍♀️\",\n  \"🦸🏻‍♂️\",\n  \"🦸🏻\",\n  \"🦸🏼‍♀️\",\n  \"🦸🏼‍♂️\",\n  \"🦸🏼\",\n  \"🦸🏽‍♀️\",\n  \"🦸🏽‍♂️\",\n  \"🦸🏽\",\n  \"🦸🏾‍♀️\",\n  \"🦸🏾‍♂️\",\n  \"🦸🏾\",\n  \"🦸🏿‍♀️\",\n  \"🦸🏿‍♂️\",\n  \"🦸🏿\",\n  \"🦸‍♀️\",\n  \"🦸‍♂️\",\n  \"🦸\",\n  \"🦹🏻‍♀️\",\n  \"🦹🏻‍♂️\",\n  \"🦹🏻\",\n  \"🦹🏼‍♀️\",\n  \"🦹🏼‍♂️\",\n  \"🦹🏼\",\n  \"🦹🏽‍♀️\",\n  \"🦹🏽‍♂️\",\n  \"🦹🏽\",\n  \"🦹🏾‍♀️\",\n  \"🦹🏾‍♂️\",\n  \"🦹🏾\",\n  \"🦹🏿‍♀️\",\n  \"🦹🏿‍♂️\",\n  \"🦹🏿\",\n  \"🦹‍♀️\",\n  \"🦹‍♂️\",\n  \"🦹\",\n  \"🦺\",\n  \"🦻🏻\",\n  \"🦻🏼\",\n  \"🦻🏽\",\n  \"🦻🏾\",\n  \"🦻🏿\",\n  \"🦻\",\n  \"🦼\",\n  \"🦽\",\n  \"🦾\",\n  \"🦿\",\n  \"🧀\",\n  \"🧁\",\n  \"🧂\",\n  \"🧃\",\n  \"🧄\",\n  \"🧅\",\n  \"🧆\",\n  \"🧇\",\n  \"🧈\",\n  \"🧉\",\n  \"🧊\",\n  \"🧍🏻‍♀️\",\n  \"🧍🏻‍♂️\",\n  \"🧍🏻\",\n  \"🧍🏼‍♀️\",\n  \"🧍🏼‍♂️\",\n  \"🧍🏼\",\n  \"🧍🏽‍♀️\",\n  \"🧍🏽‍♂️\",\n  \"🧍🏽\",\n  \"🧍🏾‍♀️\",\n  \"🧍🏾‍♂️\",\n  \"🧍🏾\",\n  \"🧍🏿‍♀️\",\n  \"🧍🏿‍♂️\",\n  \"🧍🏿\",\n  \"🧍‍♀️\",\n  \"🧍‍♂️\",\n  \"🧍\",\n  \"🧎🏻‍♀️\",\n  \"🧎🏻‍♂️\",\n  \"🧎🏻\",\n  \"🧎🏼‍♀️\",\n  \"🧎🏼‍♂️\",\n  \"🧎🏼\",\n  \"🧎🏽‍♀️\",\n  \"🧎🏽‍♂️\",\n  \"🧎🏽\",\n  \"🧎🏾‍♀️\",\n  \"🧎🏾‍♂️\",\n  \"🧎🏾\",\n  \"🧎🏿‍♀️\",\n  \"🧎🏿‍♂️\",\n  \"🧎🏿\",\n  \"🧎‍♀️\",\n  \"🧎‍♂️\",\n  \"🧎\",\n  \"🧏🏻‍♀️\",\n  \"🧏🏻‍♂️\",\n  \"🧏🏻\",\n  \"🧏🏼‍♀️\",\n  \"🧏🏼‍♂️\",\n  \"🧏🏼\",\n  \"🧏🏽‍♀️\",\n  \"🧏🏽‍♂️\",\n  \"🧏🏽\",\n  \"🧏🏾‍♀️\",\n  \"🧏🏾‍♂️\",\n  \"🧏🏾\",\n  \"🧏🏿‍♀️\",\n  \"🧏🏿‍♂️\",\n  \"🧏🏿\",\n  \"🧏‍♀️\",\n  \"🧏‍♂️\",\n  \"🧏\",\n  \"🧐\",\n  \"🧑🏻‍🤝‍🧑🏻\",\n  \"🧑🏻\",\n  \"🧑🏼‍🤝‍🧑🏻\",\n  \"🧑🏼‍🤝‍🧑🏼\",\n  \"🧑🏼\",\n  \"🧑🏽‍🤝‍🧑🏻\",\n  \"🧑🏽‍🤝‍🧑🏼\",\n  \"🧑🏽‍🤝‍🧑🏽\",\n  \"🧑🏽\",\n  \"🧑🏾‍🤝‍🧑🏻\",\n  \"🧑🏾‍🤝‍🧑🏼\",\n  \"🧑🏾‍🤝‍🧑🏽\",\n  \"🧑🏾‍🤝‍🧑🏾\",\n  \"🧑🏾\",\n  \"🧑🏿‍🤝‍🧑🏻\",\n  \"🧑🏿‍🤝‍🧑🏼\",\n  \"🧑🏿‍🤝‍🧑🏽\",\n  \"🧑🏿‍🤝‍🧑🏾\",\n  \"🧑🏿‍🤝‍🧑🏿\",\n  \"🧑🏿\",\n  \"🧑‍🤝‍🧑\",\n  \"🧑\",\n  \"🧒🏻\",\n  \"🧒🏼\",\n  \"🧒🏽\",\n  \"🧒🏾\",\n  \"🧒🏿\",\n  \"🧒\",\n  \"🧓🏻\",\n  \"🧓🏼\",\n  \"🧓🏽\",\n  \"🧓🏾\",\n  \"🧓🏿\",\n  \"🧓\",\n  \"🧔🏻\",\n  \"🧔🏼\",\n  \"🧔🏽\",\n  \"🧔🏾\",\n  \"🧔🏿\",\n  \"🧔\",\n  \"🧕🏻\",\n  \"🧕🏼\",\n  \"🧕🏽\",\n  \"🧕🏾\",\n  \"🧕🏿\",\n  \"🧕\",\n  \"🧖🏻‍♀️\",\n  \"🧖🏻‍♂️\",\n  \"🧖🏻\",\n  \"🧖🏼‍♀️\",\n  \"🧖🏼‍♂️\",\n  \"🧖🏼\",\n  \"🧖🏽‍♀️\",\n  \"🧖🏽‍♂️\",\n  \"🧖🏽\",\n  \"🧖🏾‍♀️\",\n  \"🧖🏾‍♂️\",\n  \"🧖🏾\",\n  \"🧖🏿‍♀️\",\n  \"🧖🏿‍♂️\",\n  \"🧖🏿\",\n  \"🧖‍♀️\",\n  \"🧖‍♂️\",\n  \"🧖\",\n  \"🧗🏻‍♀️\",\n  \"🧗🏻‍♂️\",\n  \"🧗🏻\",\n  \"🧗🏼‍♀️\",\n  \"🧗🏼‍♂️\",\n  \"🧗🏼\",\n  \"🧗🏽‍♀️\",\n  \"🧗🏽‍♂️\",\n  \"🧗🏽\",\n  \"🧗🏾‍♀️\",\n  \"🧗🏾‍♂️\",\n  \"🧗🏾\",\n  \"🧗🏿‍♀️\",\n  \"🧗🏿‍♂️\",\n  \"🧗🏿\",\n  \"🧗‍♀️\",\n  \"🧗‍♂️\",\n  \"🧗\",\n  \"🧘🏻‍♀️\",\n  \"🧘🏻‍♂️\",\n  \"🧘🏻\",\n  \"🧘🏼‍♀️\",\n  \"🧘🏼‍♂️\",\n  \"🧘🏼\",\n  \"🧘🏽‍♀️\",\n  \"🧘🏽‍♂️\",\n  \"🧘🏽\",\n  \"🧘🏾‍♀️\",\n  \"🧘🏾‍♂️\",\n  \"🧘🏾\",\n  \"🧘🏿‍♀️\",\n  \"🧘🏿‍♂️\",\n  \"🧘🏿\",\n  \"🧘‍♀️\",\n  \"🧘‍♂️\",\n  \"🧘\",\n  \"🧙🏻‍♀️\",\n  \"🧙🏻‍♂️\",\n  \"🧙🏻\",\n  \"🧙🏼‍♀️\",\n  \"🧙🏼‍♂️\",\n  \"🧙🏼\",\n  \"🧙🏽‍♀️\",\n  \"🧙🏽‍♂️\",\n  \"🧙🏽\",\n  \"🧙🏾‍♀️\",\n  \"🧙🏾‍♂️\",\n  \"🧙🏾\",\n  \"🧙🏿‍♀️\",\n  \"🧙🏿‍♂️\",\n  \"🧙🏿\",\n  \"🧙‍♀️\",\n  \"🧙‍♂️\",\n  \"🧙\",\n  \"🧚🏻‍♀️\",\n  \"🧚🏻‍♂️\",\n  \"🧚🏻\",\n  \"🧚🏼‍♀️\",\n  \"🧚🏼‍♂️\",\n  \"🧚🏼\",\n  \"🧚🏽‍♀️\",\n  \"🧚🏽‍♂️\",\n  \"🧚🏽\",\n  \"🧚🏾‍♀️\",\n  \"🧚🏾‍♂️\",\n  \"🧚🏾\",\n  \"🧚🏿‍♀️\",\n  \"🧚🏿‍♂️\",\n  \"🧚🏿\",\n  \"🧚‍♀️\",\n  \"🧚‍♂️\",\n  \"🧚\",\n  \"🧛🏻‍♀️\",\n  \"🧛🏻‍♂️\",\n  \"🧛🏻\",\n  \"🧛🏼‍♀️\",\n  \"🧛🏼‍♂️\",\n  \"🧛🏼\",\n  \"🧛🏽‍♀️\",\n  \"🧛🏽‍♂️\",\n  \"🧛🏽\",\n  \"🧛🏾‍♀️\",\n  \"🧛🏾‍♂️\",\n  \"🧛🏾\",\n  \"🧛🏿‍♀️\",\n  \"🧛🏿‍♂️\",\n  \"🧛🏿\",\n  \"🧛‍♀️\",\n  \"🧛‍♂️\",\n  \"🧛\",\n  \"🧜🏻‍♀️\",\n  \"🧜🏻‍♂️\",\n  \"🧜🏻\",\n  \"🧜🏼‍♀️\",\n  \"🧜🏼‍♂️\",\n  \"🧜🏼\",\n  \"🧜🏽‍♀️\",\n  \"🧜🏽‍♂️\",\n  \"🧜🏽\",\n  \"🧜🏾‍♀️\",\n  \"🧜🏾‍♂️\",\n  \"🧜🏾\",\n  \"🧜🏿‍♀️\",\n  \"🧜🏿‍♂️\",\n  \"🧜🏿\",\n  \"🧜‍♀️\",\n  \"🧜‍♂️\",\n  \"🧜\",\n  \"🧝🏻‍♀️\",\n  \"🧝🏻‍♂️\",\n  \"🧝🏻\",\n  \"🧝🏼‍♀️\",\n  \"🧝🏼‍♂️\",\n  \"🧝🏼\",\n  \"🧝🏽‍♀️\",\n  \"🧝🏽‍♂️\",\n  \"🧝🏽\",\n  \"🧝🏾‍♀️\",\n  \"🧝🏾‍♂️\",\n  \"🧝🏾\",\n  \"🧝🏿‍♀️\",\n  \"🧝🏿‍♂️\",\n  \"🧝🏿\",\n  \"🧝‍♀️\",\n  \"🧝‍♂️\",\n  \"🧝\",\n  \"🧞‍♀️\",\n  \"🧞‍♂️\",\n  \"🧞\",\n  \"🧟‍♀️\",\n  \"🧟‍♂️\",\n  \"🧟\",\n  \"🧠\",\n  \"🧡\",\n  \"🧢\",\n  \"🧣\",\n  \"🧤\",\n  \"🧥\",\n  \"🧦\",\n  \"🧧\",\n  \"🧨\",\n  \"🧩\",\n  \"🧪\",\n  \"🧫\",\n  \"🧬\",\n  \"🧭\",\n  \"🧮\",\n  \"🧯\",\n  \"🧰\",\n  \"🧱\",\n  \"🧲\",\n  \"🧳\",\n  \"🧴\",\n  \"🧵\",\n  \"🧶\",\n  \"🧷\",\n  \"🧸\",\n  \"🧹\",\n  \"🧺\",\n  \"🧻\",\n  \"🧼\",\n  \"🧽\",\n  \"🧾\",\n  \"🧿\",\n  \"🩰\",\n  \"🩱\",\n  \"🩲\",\n  \"🩳\",\n  \"🩸\",\n  \"🩹\",\n  \"🩺\",\n  \"🪀\",\n  \"🪁\",\n  \"🪂\",\n  \"🪐\",\n  \"🪑\",\n  \"🪒\",\n  \"🪓\",\n  \"🪔\",\n  \"🪕\",\n  \"‼️\",\n  \"⁉️\",\n  \"™️\",\n  \"ℹ️\",\n  \"↔️\",\n  \"↕️\",\n  \"↖️\",\n  \"↗️\",\n  \"↘️\",\n  \"↙️\",\n  \"↩️\",\n  \"↪️\",\n  \"#⃣\",\n  \"⌚️\",\n  \"⌛️\",\n  \"⌨️\",\n  \"⏏️\",\n  \"⏩\",\n  \"⏪\",\n  \"⏫\",\n  \"⏬\",\n  \"⏭️\",\n  \"⏮️\",\n  \"⏯️\",\n  \"⏰\",\n  \"⏱️\",\n  \"⏲️\",\n  \"⏳\",\n  \"⏸️\",\n  \"⏹️\",\n  \"⏺️\",\n  \"Ⓜ️\",\n  \"▪️\",\n  \"▫️\",\n  \"▶️\",\n  \"◀️\",\n  \"◻️\",\n  \"◼️\",\n  \"◽️\",\n  \"◾️\",\n  \"☀️\",\n  \"☁️\",\n  \"☂️\",\n  \"☃️\",\n  \"☄️\",\n  \"☎️\",\n  \"☑️\",\n  \"☔️\",\n  \"☕️\",\n  \"☘️\",\n  \"☝🏻\",\n  \"☝🏼\",\n  \"☝🏽\",\n  \"☝🏾\",\n  \"☝🏿\",\n  \"☝️\",\n  \"☠️\",\n  \"☢️\",\n  \"☣️\",\n  \"☦️\",\n  \"☪️\",\n  \"☮️\",\n  \"☯️\",\n  \"☸️\",\n  \"☹️\",\n  \"☺️\",\n  \"♀️\",\n  \"♂️\",\n  \"♈️\",\n  \"♉️\",\n  \"♊️\",\n  \"♋️\",\n  \"♌️\",\n  \"♍️\",\n  \"♎️\",\n  \"♏️\",\n  \"♐️\",\n  \"♑️\",\n  \"♒️\",\n  \"♓️\",\n  \"♟️\",\n  \"♠️\",\n  \"♣️\",\n  \"♥️\",\n  \"♦️\",\n  \"♨️\",\n  \"♻️\",\n  \"♾\",\n  \"♿️\",\n  \"⚒️\",\n  \"⚓️\",\n  \"⚔️\",\n  \"⚕️\",\n  \"⚖️\",\n  \"⚗️\",\n  \"⚙️\",\n  \"⚛️\",\n  \"⚜️\",\n  \"⚠️\",\n  \"⚡️\",\n  \"⚪️\",\n  \"⚫️\",\n  \"⚰️\",\n  \"⚱️\",\n  \"⚽️\",\n  \"⚾️\",\n  \"⛄️\",\n  \"⛅️\",\n  \"⛈️\",\n  \"⛎\",\n  \"⛏️\",\n  \"⛑️\",\n  \"⛓️\",\n  \"⛔️\",\n  \"⛩️\",\n  \"⛪️\",\n  \"⛰️\",\n  \"⛱️\",\n  \"⛲️\",\n  \"⛳️\",\n  \"⛴️\",\n  \"⛵️\",\n  \"⛷🏻\",\n  \"⛷🏼\",\n  \"⛷🏽\",\n  \"⛷🏾\",\n  \"⛷🏿\",\n  \"⛷️\",\n  \"⛸️\",\n  \"⛹🏻‍♀️\",\n  \"⛹🏻‍♂️\",\n  \"⛹🏻\",\n  \"⛹🏼‍♀️\",\n  \"⛹🏼‍♂️\",\n  \"⛹🏼\",\n  \"⛹🏽‍♀️\",\n  \"⛹🏽‍♂️\",\n  \"⛹🏽\",\n  \"⛹🏾‍♀️\",\n  \"⛹🏾‍♂️\",\n  \"⛹🏾\",\n  \"⛹🏿‍♀️\",\n  \"⛹🏿‍♂️\",\n  \"⛹🏿\",\n  \"⛹️‍♀️\",\n  \"⛹️‍♂️\",\n  \"⛹️\",\n  \"⛺️\",\n  \"⛽️\",\n  \"✂️\",\n  \"✅\",\n  \"✈️\",\n  \"✉️\",\n  \"✊🏻\",\n  \"✊🏼\",\n  \"✊🏽\",\n  \"✊🏾\",\n  \"✊🏿\",\n  \"✊\",\n  \"✋🏻\",\n  \"✋🏼\",\n  \"✋🏽\",\n  \"✋🏾\",\n  \"✋🏿\",\n  \"✋\",\n  \"✌🏻\",\n  \"✌🏼\",\n  \"✌🏽\",\n  \"✌🏾\",\n  \"✌🏿\",\n  \"✌️\",\n  \"✍🏻\",\n  \"✍🏼\",\n  \"✍🏽\",\n  \"✍🏾\",\n  \"✍🏿\",\n  \"✍️\",\n  \"✏️\",\n  \"✒️\",\n  \"✔️\",\n  \"✖️\",\n  \"✝️\",\n  \"✡️\",\n  \"✨\",\n  \"✳️\",\n  \"✴️\",\n  \"❄️\",\n  \"❇️\",\n  \"❌\",\n  \"❎\",\n  \"❓\",\n  \"❔\",\n  \"❕\",\n  \"❗️\",\n  \"❣️\",\n  \"❤️\",\n  \"➕\",\n  \"➖\",\n  \"➗\",\n  \"➡️\",\n  \"➰\",\n  \"➿\",\n  \"⤴️\",\n  \"⤵️\",\n  \"*⃣\",\n  \"⬅️\",\n  \"⬆️\",\n  \"⬇️\",\n  \"⬛️\",\n  \"⬜️\",\n  \"⭐️\",\n  \"⭕️\",\n  \"0⃣\",\n  \"〰️\",\n  \"〽️\",\n  \"1⃣\",\n  \"2⃣\",\n  \"㊗️\",\n  \"㊙️\",\n  \"3⃣\",\n  \"4⃣\",\n  \"5⃣\",\n  \"6⃣\",\n  \"7⃣\",\n  \"8⃣\",\n  \"9⃣\",\n  \"©️\",\n  \"®️\",\n  \"\"\n]","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n","var Buffer = require('safe-buffer').Buffer\nvar MD5 = require('md5.js')\n\n/* eslint-disable camelcase */\nfunction EVP_BytesToKey (password, salt, keyBits, ivLen) {\n  if (!Buffer.isBuffer(password)) password = Buffer.from(password, 'binary')\n  if (salt) {\n    if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, 'binary')\n    if (salt.length !== 8) throw new RangeError('salt should be Buffer with 8 byte length')\n  }\n\n  var keyLen = keyBits / 8\n  var key = Buffer.alloc(keyLen)\n  var iv = Buffer.alloc(ivLen || 0)\n  var tmp = Buffer.alloc(0)\n\n  while (keyLen > 0 || ivLen > 0) {\n    var hash = new MD5()\n    hash.update(tmp)\n    hash.update(password)\n    if (salt) hash.update(salt)\n    tmp = hash.digest()\n\n    var used = 0\n\n    if (keyLen > 0) {\n      var keyStart = key.length - keyLen\n      used = Math.min(keyLen, tmp.length)\n      tmp.copy(key, keyStart, 0, used)\n      keyLen -= used\n    }\n\n    if (used < tmp.length && ivLen > 0) {\n      var ivStart = iv.length - ivLen\n      var length = Math.min(ivLen, tmp.length - used)\n      tmp.copy(iv, ivStart, used, used + length)\n      ivLen -= length\n    }\n  }\n\n  tmp.fill(0)\n  return { key: key, iv: iv }\n}\n\nmodule.exports = EVP_BytesToKey\n","'use strict';\n\n// do not edit .js files directly - edit src/index.jst\n\n\n\nmodule.exports = function equal(a, b) {\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    if (a.constructor !== b.constructor) return false;\n\n    var length, i, keys;\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (!equal(a[i], b[i])) return false;\n      return true;\n    }\n\n\n\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0;)\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n\n    for (i = length; i-- !== 0;) {\n      var key = keys[i];\n\n      if (!equal(a[key], b[key])) return false;\n    }\n\n    return true;\n  }\n\n  // true if both NaN, false otherwise\n  return a!==a && b!==b;\n};\n","'use strict';\n\nmodule.exports = function (data, opts) {\n    if (!opts) opts = {};\n    if (typeof opts === 'function') opts = { cmp: opts };\n    var cycles = (typeof opts.cycles === 'boolean') ? opts.cycles : false;\n\n    var cmp = opts.cmp && (function (f) {\n        return function (node) {\n            return function (a, b) {\n                var aobj = { key: a, value: node[a] };\n                var bobj = { key: b, value: node[b] };\n                return f(aobj, bobj);\n            };\n        };\n    })(opts.cmp);\n\n    var seen = [];\n    return (function stringify (node) {\n        if (node && node.toJSON && typeof node.toJSON === 'function') {\n            node = node.toJSON();\n        }\n\n        if (node === undefined) return;\n        if (typeof node == 'number') return isFinite(node) ? '' + node : 'null';\n        if (typeof node !== 'object') return JSON.stringify(node);\n\n        var i, out;\n        if (Array.isArray(node)) {\n            out = '[';\n            for (i = 0; i < node.length; i++) {\n                if (i) out += ',';\n                out += stringify(node[i]) || 'null';\n            }\n            return out + ']';\n        }\n\n        if (node === null) return 'null';\n\n        if (seen.indexOf(node) !== -1) {\n            if (cycles) return JSON.stringify('__cycle__');\n            throw new TypeError('Converting circular structure to JSON');\n        }\n\n        var seenIndex = seen.push(node) - 1;\n        var keys = Object.keys(node).sort(cmp && cmp(node));\n        out = '';\n        for (i = 0; i < keys.length; i++) {\n            var key = keys[i];\n            var value = stringify(node[key]);\n\n            if (!value) continue;\n            if (out) out += ',';\n            out += JSON.stringify(key) + ':' + value;\n        }\n        seen.splice(seenIndex, 1);\n        return '{' + out + '}';\n    })(data);\n};\n","\"use strict\";\n\nconst loader = require('./index');\n\nmodule.exports = loader.default;\nmodule.exports.raw = loader.raw;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = loader;\nexports.raw = void 0;\n\nvar _path = _interopRequireDefault(require(\"path\"));\n\nvar _loaderUtils = _interopRequireDefault(require(\"loader-utils\"));\n\nvar _schemaUtils = _interopRequireDefault(require(\"schema-utils\"));\n\nvar _options = _interopRequireDefault(require(\"./options.json\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction loader(content) {\n  const options = _loaderUtils.default.getOptions(this);\n\n  (0, _schemaUtils.default)(_options.default, options, {\n    name: 'File Loader',\n    baseDataPath: 'options'\n  });\n  const context = options.context || this.rootContext;\n\n  const url = _loaderUtils.default.interpolateName(this, options.name || '[contenthash].[ext]', {\n    context,\n    content,\n    regExp: options.regExp\n  });\n\n  let outputPath = url;\n\n  if (options.outputPath) {\n    if (typeof options.outputPath === 'function') {\n      outputPath = options.outputPath(url, this.resourcePath, context);\n    } else {\n      outputPath = _path.default.posix.join(options.outputPath, url);\n    }\n  }\n\n  let publicPath = `__webpack_public_path__ + ${JSON.stringify(outputPath)}`;\n\n  if (options.publicPath) {\n    if (typeof options.publicPath === 'function') {\n      publicPath = options.publicPath(url, this.resourcePath, context);\n    } else {\n      publicPath = `${options.publicPath.endsWith('/') ? options.publicPath : `${options.publicPath}/`}${url}`;\n    }\n\n    publicPath = JSON.stringify(publicPath);\n  }\n\n  if (options.postTransformPublicPath) {\n    publicPath = options.postTransformPublicPath(publicPath);\n  }\n\n  if (typeof options.emitFile === 'undefined' || options.emitFile) {\n    this.emitFile(outputPath, content);\n  }\n\n  const esModule = typeof options.esModule !== 'undefined' ? options.esModule : true;\n  return `${esModule ? 'export default' : 'module.exports ='} ${publicPath};`;\n}\n\nconst raw = true;\nexports.raw = raw;","(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(global.JSON5 = factory());\n}(this, (function () { 'use strict';\n\n\tfunction createCommonjsModule(fn, module) {\n\t\treturn module = { exports: {} }, fn(module, module.exports), module.exports;\n\t}\n\n\tvar _global = createCommonjsModule(function (module) {\n\t// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\n\tvar global = module.exports = typeof window != 'undefined' && window.Math == Math\n\t  ? window : typeof self != 'undefined' && self.Math == Math ? self\n\t  // eslint-disable-next-line no-new-func\n\t  : Function('return this')();\n\tif (typeof __g == 'number') { __g = global; } // eslint-disable-line no-undef\n\t});\n\n\tvar _core = createCommonjsModule(function (module) {\n\tvar core = module.exports = { version: '2.6.5' };\n\tif (typeof __e == 'number') { __e = core; } // eslint-disable-line no-undef\n\t});\n\tvar _core_1 = _core.version;\n\n\tvar _isObject = function (it) {\n\t  return typeof it === 'object' ? it !== null : typeof it === 'function';\n\t};\n\n\tvar _anObject = function (it) {\n\t  if (!_isObject(it)) { throw TypeError(it + ' is not an object!'); }\n\t  return it;\n\t};\n\n\tvar _fails = function (exec) {\n\t  try {\n\t    return !!exec();\n\t  } catch (e) {\n\t    return true;\n\t  }\n\t};\n\n\t// Thank's IE8 for his funny defineProperty\n\tvar _descriptors = !_fails(function () {\n\t  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;\n\t});\n\n\tvar document = _global.document;\n\t// typeof document.createElement is 'object' in old IE\n\tvar is = _isObject(document) && _isObject(document.createElement);\n\tvar _domCreate = function (it) {\n\t  return is ? document.createElement(it) : {};\n\t};\n\n\tvar _ie8DomDefine = !_descriptors && !_fails(function () {\n\t  return Object.defineProperty(_domCreate('div'), 'a', { get: function () { return 7; } }).a != 7;\n\t});\n\n\t// 7.1.1 ToPrimitive(input [, PreferredType])\n\n\t// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n\t// and the second argument - flag - preferred type is a string\n\tvar _toPrimitive = function (it, S) {\n\t  if (!_isObject(it)) { return it; }\n\t  var fn, val;\n\t  if (S && typeof (fn = it.toString) == 'function' && !_isObject(val = fn.call(it))) { return val; }\n\t  if (typeof (fn = it.valueOf) == 'function' && !_isObject(val = fn.call(it))) { return val; }\n\t  if (!S && typeof (fn = it.toString) == 'function' && !_isObject(val = fn.call(it))) { return val; }\n\t  throw TypeError(\"Can't convert object to primitive value\");\n\t};\n\n\tvar dP = Object.defineProperty;\n\n\tvar f = _descriptors ? Object.defineProperty : function defineProperty(O, P, Attributes) {\n\t  _anObject(O);\n\t  P = _toPrimitive(P, true);\n\t  _anObject(Attributes);\n\t  if (_ie8DomDefine) { try {\n\t    return dP(O, P, Attributes);\n\t  } catch (e) { /* empty */ } }\n\t  if ('get' in Attributes || 'set' in Attributes) { throw TypeError('Accessors not supported!'); }\n\t  if ('value' in Attributes) { O[P] = Attributes.value; }\n\t  return O;\n\t};\n\n\tvar _objectDp = {\n\t\tf: f\n\t};\n\n\tvar _propertyDesc = function (bitmap, value) {\n\t  return {\n\t    enumerable: !(bitmap & 1),\n\t    configurable: !(bitmap & 2),\n\t    writable: !(bitmap & 4),\n\t    value: value\n\t  };\n\t};\n\n\tvar _hide = _descriptors ? function (object, key, value) {\n\t  return _objectDp.f(object, key, _propertyDesc(1, value));\n\t} : function (object, key, value) {\n\t  object[key] = value;\n\t  return object;\n\t};\n\n\tvar hasOwnProperty = {}.hasOwnProperty;\n\tvar _has = function (it, key) {\n\t  return hasOwnProperty.call(it, key);\n\t};\n\n\tvar id = 0;\n\tvar px = Math.random();\n\tvar _uid = function (key) {\n\t  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));\n\t};\n\n\tvar _library = false;\n\n\tvar _shared = createCommonjsModule(function (module) {\n\tvar SHARED = '__core-js_shared__';\n\tvar store = _global[SHARED] || (_global[SHARED] = {});\n\n\t(module.exports = function (key, value) {\n\t  return store[key] || (store[key] = value !== undefined ? value : {});\n\t})('versions', []).push({\n\t  version: _core.version,\n\t  mode: _library ? 'pure' : 'global',\n\t  copyright: '© 2019 Denis Pushkarev (zloirock.ru)'\n\t});\n\t});\n\n\tvar _functionToString = _shared('native-function-to-string', Function.toString);\n\n\tvar _redefine = createCommonjsModule(function (module) {\n\tvar SRC = _uid('src');\n\n\tvar TO_STRING = 'toString';\n\tvar TPL = ('' + _functionToString).split(TO_STRING);\n\n\t_core.inspectSource = function (it) {\n\t  return _functionToString.call(it);\n\t};\n\n\t(module.exports = function (O, key, val, safe) {\n\t  var isFunction = typeof val == 'function';\n\t  if (isFunction) { _has(val, 'name') || _hide(val, 'name', key); }\n\t  if (O[key] === val) { return; }\n\t  if (isFunction) { _has(val, SRC) || _hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key))); }\n\t  if (O === _global) {\n\t    O[key] = val;\n\t  } else if (!safe) {\n\t    delete O[key];\n\t    _hide(O, key, val);\n\t  } else if (O[key]) {\n\t    O[key] = val;\n\t  } else {\n\t    _hide(O, key, val);\n\t  }\n\t// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative\n\t})(Function.prototype, TO_STRING, function toString() {\n\t  return typeof this == 'function' && this[SRC] || _functionToString.call(this);\n\t});\n\t});\n\n\tvar _aFunction = function (it) {\n\t  if (typeof it != 'function') { throw TypeError(it + ' is not a function!'); }\n\t  return it;\n\t};\n\n\t// optional / simple context binding\n\n\tvar _ctx = function (fn, that, length) {\n\t  _aFunction(fn);\n\t  if (that === undefined) { return fn; }\n\t  switch (length) {\n\t    case 1: return function (a) {\n\t      return fn.call(that, a);\n\t    };\n\t    case 2: return function (a, b) {\n\t      return fn.call(that, a, b);\n\t    };\n\t    case 3: return function (a, b, c) {\n\t      return fn.call(that, a, b, c);\n\t    };\n\t  }\n\t  return function (/* ...args */) {\n\t    return fn.apply(that, arguments);\n\t  };\n\t};\n\n\tvar PROTOTYPE = 'prototype';\n\n\tvar $export = function (type, name, source) {\n\t  var IS_FORCED = type & $export.F;\n\t  var IS_GLOBAL = type & $export.G;\n\t  var IS_STATIC = type & $export.S;\n\t  var IS_PROTO = type & $export.P;\n\t  var IS_BIND = type & $export.B;\n\t  var target = IS_GLOBAL ? _global : IS_STATIC ? _global[name] || (_global[name] = {}) : (_global[name] || {})[PROTOTYPE];\n\t  var exports = IS_GLOBAL ? _core : _core[name] || (_core[name] = {});\n\t  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});\n\t  var key, own, out, exp;\n\t  if (IS_GLOBAL) { source = name; }\n\t  for (key in source) {\n\t    // contains in native\n\t    own = !IS_FORCED && target && target[key] !== undefined;\n\t    // export native or passed\n\t    out = (own ? target : source)[key];\n\t    // bind timers to global for call from export context\n\t    exp = IS_BIND && own ? _ctx(out, _global) : IS_PROTO && typeof out == 'function' ? _ctx(Function.call, out) : out;\n\t    // extend global\n\t    if (target) { _redefine(target, key, out, type & $export.U); }\n\t    // export\n\t    if (exports[key] != out) { _hide(exports, key, exp); }\n\t    if (IS_PROTO && expProto[key] != out) { expProto[key] = out; }\n\t  }\n\t};\n\t_global.core = _core;\n\t// type bitmap\n\t$export.F = 1;   // forced\n\t$export.G = 2;   // global\n\t$export.S = 4;   // static\n\t$export.P = 8;   // proto\n\t$export.B = 16;  // bind\n\t$export.W = 32;  // wrap\n\t$export.U = 64;  // safe\n\t$export.R = 128; // real proto method for `library`\n\tvar _export = $export;\n\n\t// 7.1.4 ToInteger\n\tvar ceil = Math.ceil;\n\tvar floor = Math.floor;\n\tvar _toInteger = function (it) {\n\t  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);\n\t};\n\n\t// 7.2.1 RequireObjectCoercible(argument)\n\tvar _defined = function (it) {\n\t  if (it == undefined) { throw TypeError(\"Can't call method on  \" + it); }\n\t  return it;\n\t};\n\n\t// true  -> String#at\n\t// false -> String#codePointAt\n\tvar _stringAt = function (TO_STRING) {\n\t  return function (that, pos) {\n\t    var s = String(_defined(that));\n\t    var i = _toInteger(pos);\n\t    var l = s.length;\n\t    var a, b;\n\t    if (i < 0 || i >= l) { return TO_STRING ? '' : undefined; }\n\t    a = s.charCodeAt(i);\n\t    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff\n\t      ? TO_STRING ? s.charAt(i) : a\n\t      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;\n\t  };\n\t};\n\n\tvar $at = _stringAt(false);\n\t_export(_export.P, 'String', {\n\t  // 21.1.3.3 String.prototype.codePointAt(pos)\n\t  codePointAt: function codePointAt(pos) {\n\t    return $at(this, pos);\n\t  }\n\t});\n\n\tvar codePointAt = _core.String.codePointAt;\n\n\tvar max = Math.max;\n\tvar min = Math.min;\n\tvar _toAbsoluteIndex = function (index, length) {\n\t  index = _toInteger(index);\n\t  return index < 0 ? max(index + length, 0) : min(index, length);\n\t};\n\n\tvar fromCharCode = String.fromCharCode;\n\tvar $fromCodePoint = String.fromCodePoint;\n\n\t// length should be 1, old FF problem\n\t_export(_export.S + _export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {\n\t  // 21.1.2.2 String.fromCodePoint(...codePoints)\n\t  fromCodePoint: function fromCodePoint(x) {\n\t    var arguments$1 = arguments;\n\t // eslint-disable-line no-unused-vars\n\t    var res = [];\n\t    var aLen = arguments.length;\n\t    var i = 0;\n\t    var code;\n\t    while (aLen > i) {\n\t      code = +arguments$1[i++];\n\t      if (_toAbsoluteIndex(code, 0x10ffff) !== code) { throw RangeError(code + ' is not a valid code point'); }\n\t      res.push(code < 0x10000\n\t        ? fromCharCode(code)\n\t        : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)\n\t      );\n\t    } return res.join('');\n\t  }\n\t});\n\n\tvar fromCodePoint = _core.String.fromCodePoint;\n\n\t// This is a generated file. Do not edit.\n\tvar Space_Separator = /[\\u1680\\u2000-\\u200A\\u202F\\u205F\\u3000]/;\n\tvar ID_Start = /[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086A\\u08A0-\\u08B4\\u08B6-\\u08BD\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u09FC\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u1884\\u1887-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1C80-\\u1C88\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312E\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FEA\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AE\\uA7B0-\\uA7B7\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF2D-\\uDF4A\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC03-\\uDC37\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC00-\\uDC34\\uDC47-\\uDC4A\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA\\uDF00-\\uDF19]|\\uD806[\\uDCA0-\\uDCDF\\uDCFF\\uDE00\\uDE0B-\\uDE32\\uDE3A\\uDE50\\uDE5C-\\uDE83\\uDE86-\\uDE89\\uDEC0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC2E\\uDC40\\uDC72-\\uDC8F\\uDD00-\\uDD06\\uDD08\\uDD09\\uDD0B-\\uDD30\\uDD46]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD81C-\\uD820\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50\\uDF93-\\uDF9F\\uDFE0\\uDFE1]|\\uD821[\\uDC00-\\uDFEC]|\\uD822[\\uDC00-\\uDEF2]|\\uD82C[\\uDC00-\\uDD1E\\uDD70-\\uDEFB]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD83A[\\uDC00-\\uDCC4\\uDD00-\\uDD43]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0]|\\uD87E[\\uDC00-\\uDE1D]/;\n\tvar ID_Continue = /[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u0860-\\u086A\\u08A0-\\u08B4\\u08B6-\\u08BD\\u08D4-\\u08E1\\u08E3-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u09FC\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0AF9-\\u0AFF\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58-\\u0C5A\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C80-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D00-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D54-\\u0D57\\u0D5F-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19D9\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1C80-\\u1C88\\u1CD0-\\u1CD2\\u1CD4-\\u1CF9\\u1D00-\\u1DF9\\u1DFB-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u2E2F\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099\\u309A\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312E\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FEA\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AE\\uA7B0-\\uA7B7\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C5\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA8FD\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDDFD\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDEE0\\uDF00-\\uDF1F\\uDF2D-\\uDF4A\\uDF50-\\uDF7A\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCA0-\\uDCA9\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE38-\\uDE3A\\uDE3F\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE6\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC00-\\uDC46\\uDC66-\\uDC6F\\uDC7F-\\uDCBA\\uDCD0-\\uDCE8\\uDCF0-\\uDCF9\\uDD00-\\uDD34\\uDD36-\\uDD3F\\uDD50-\\uDD73\\uDD76\\uDD80-\\uDDC4\\uDDCA-\\uDDCC\\uDDD0-\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE37\\uDE3E\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEEA\\uDEF0-\\uDEF9\\uDF00-\\uDF03\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3C-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF50\\uDF57\\uDF5D-\\uDF63\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD805[\\uDC00-\\uDC4A\\uDC50-\\uDC59\\uDC80-\\uDCC5\\uDCC7\\uDCD0-\\uDCD9\\uDD80-\\uDDB5\\uDDB8-\\uDDC0\\uDDD8-\\uDDDD\\uDE00-\\uDE40\\uDE44\\uDE50-\\uDE59\\uDE80-\\uDEB7\\uDEC0-\\uDEC9\\uDF00-\\uDF19\\uDF1D-\\uDF2B\\uDF30-\\uDF39]|\\uD806[\\uDCA0-\\uDCE9\\uDCFF\\uDE00-\\uDE3E\\uDE47\\uDE50-\\uDE83\\uDE86-\\uDE99\\uDEC0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC36\\uDC38-\\uDC40\\uDC50-\\uDC59\\uDC72-\\uDC8F\\uDC92-\\uDCA7\\uDCA9-\\uDCB6\\uDD00-\\uDD06\\uDD08\\uDD09\\uDD0B-\\uDD36\\uDD3A\\uDD3C\\uDD3D\\uDD3F-\\uDD47\\uDD50-\\uDD59]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD81C-\\uD820\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDE60-\\uDE69\\uDED0-\\uDEED\\uDEF0-\\uDEF4\\uDF00-\\uDF36\\uDF40-\\uDF43\\uDF50-\\uDF59\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50-\\uDF7E\\uDF8F-\\uDF9F\\uDFE0\\uDFE1]|\\uD821[\\uDC00-\\uDFEC]|\\uD822[\\uDC00-\\uDEF2]|\\uD82C[\\uDC00-\\uDD1E\\uDD70-\\uDEFB]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99\\uDC9D\\uDC9E]|\\uD834[\\uDD65-\\uDD69\\uDD6D-\\uDD72\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB\\uDFCE-\\uDFFF]|\\uD836[\\uDE00-\\uDE36\\uDE3B-\\uDE6C\\uDE75\\uDE84\\uDE9B-\\uDE9F\\uDEA1-\\uDEAF]|\\uD838[\\uDC00-\\uDC06\\uDC08-\\uDC18\\uDC1B-\\uDC21\\uDC23\\uDC24\\uDC26-\\uDC2A]|\\uD83A[\\uDC00-\\uDCC4\\uDCD0-\\uDCD6\\uDD00-\\uDD4A\\uDD50-\\uDD59]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0]|\\uD87E[\\uDC00-\\uDE1D]|\\uDB40[\\uDD00-\\uDDEF]/;\n\n\tvar unicode = {\n\t\tSpace_Separator: Space_Separator,\n\t\tID_Start: ID_Start,\n\t\tID_Continue: ID_Continue\n\t};\n\n\tvar util = {\n\t    isSpaceSeparator: function isSpaceSeparator (c) {\n\t        return typeof c === 'string' && unicode.Space_Separator.test(c)\n\t    },\n\n\t    isIdStartChar: function isIdStartChar (c) {\n\t        return typeof c === 'string' && (\n\t            (c >= 'a' && c <= 'z') ||\n\t        (c >= 'A' && c <= 'Z') ||\n\t        (c === '$') || (c === '_') ||\n\t        unicode.ID_Start.test(c)\n\t        )\n\t    },\n\n\t    isIdContinueChar: function isIdContinueChar (c) {\n\t        return typeof c === 'string' && (\n\t            (c >= 'a' && c <= 'z') ||\n\t        (c >= 'A' && c <= 'Z') ||\n\t        (c >= '0' && c <= '9') ||\n\t        (c === '$') || (c === '_') ||\n\t        (c === '\\u200C') || (c === '\\u200D') ||\n\t        unicode.ID_Continue.test(c)\n\t        )\n\t    },\n\n\t    isDigit: function isDigit (c) {\n\t        return typeof c === 'string' && /[0-9]/.test(c)\n\t    },\n\n\t    isHexDigit: function isHexDigit (c) {\n\t        return typeof c === 'string' && /[0-9A-Fa-f]/.test(c)\n\t    },\n\t};\n\n\tvar source;\n\tvar parseState;\n\tvar stack;\n\tvar pos;\n\tvar line;\n\tvar column;\n\tvar token;\n\tvar key;\n\tvar root;\n\n\tvar parse = function parse (text, reviver) {\n\t    source = String(text);\n\t    parseState = 'start';\n\t    stack = [];\n\t    pos = 0;\n\t    line = 1;\n\t    column = 0;\n\t    token = undefined;\n\t    key = undefined;\n\t    root = undefined;\n\n\t    do {\n\t        token = lex();\n\n\t        // This code is unreachable.\n\t        // if (!parseStates[parseState]) {\n\t        //     throw invalidParseState()\n\t        // }\n\n\t        parseStates[parseState]();\n\t    } while (token.type !== 'eof')\n\n\t    if (typeof reviver === 'function') {\n\t        return internalize({'': root}, '', reviver)\n\t    }\n\n\t    return root\n\t};\n\n\tfunction internalize (holder, name, reviver) {\n\t    var value = holder[name];\n\t    if (value != null && typeof value === 'object') {\n\t        for (var key in value) {\n\t            var replacement = internalize(value, key, reviver);\n\t            if (replacement === undefined) {\n\t                delete value[key];\n\t            } else {\n\t                value[key] = replacement;\n\t            }\n\t        }\n\t    }\n\n\t    return reviver.call(holder, name, value)\n\t}\n\n\tvar lexState;\n\tvar buffer;\n\tvar doubleQuote;\n\tvar sign;\n\tvar c;\n\n\tfunction lex () {\n\t    lexState = 'default';\n\t    buffer = '';\n\t    doubleQuote = false;\n\t    sign = 1;\n\n\t    for (;;) {\n\t        c = peek();\n\n\t        // This code is unreachable.\n\t        // if (!lexStates[lexState]) {\n\t        //     throw invalidLexState(lexState)\n\t        // }\n\n\t        var token = lexStates[lexState]();\n\t        if (token) {\n\t            return token\n\t        }\n\t    }\n\t}\n\n\tfunction peek () {\n\t    if (source[pos]) {\n\t        return String.fromCodePoint(source.codePointAt(pos))\n\t    }\n\t}\n\n\tfunction read () {\n\t    var c = peek();\n\n\t    if (c === '\\n') {\n\t        line++;\n\t        column = 0;\n\t    } else if (c) {\n\t        column += c.length;\n\t    } else {\n\t        column++;\n\t    }\n\n\t    if (c) {\n\t        pos += c.length;\n\t    }\n\n\t    return c\n\t}\n\n\tvar lexStates = {\n\t    default: function default$1 () {\n\t        switch (c) {\n\t        case '\\t':\n\t        case '\\v':\n\t        case '\\f':\n\t        case ' ':\n\t        case '\\u00A0':\n\t        case '\\uFEFF':\n\t        case '\\n':\n\t        case '\\r':\n\t        case '\\u2028':\n\t        case '\\u2029':\n\t            read();\n\t            return\n\n\t        case '/':\n\t            read();\n\t            lexState = 'comment';\n\t            return\n\n\t        case undefined:\n\t            read();\n\t            return newToken('eof')\n\t        }\n\n\t        if (util.isSpaceSeparator(c)) {\n\t            read();\n\t            return\n\t        }\n\n\t        // This code is unreachable.\n\t        // if (!lexStates[parseState]) {\n\t        //     throw invalidLexState(parseState)\n\t        // }\n\n\t        return lexStates[parseState]()\n\t    },\n\n\t    comment: function comment () {\n\t        switch (c) {\n\t        case '*':\n\t            read();\n\t            lexState = 'multiLineComment';\n\t            return\n\n\t        case '/':\n\t            read();\n\t            lexState = 'singleLineComment';\n\t            return\n\t        }\n\n\t        throw invalidChar(read())\n\t    },\n\n\t    multiLineComment: function multiLineComment () {\n\t        switch (c) {\n\t        case '*':\n\t            read();\n\t            lexState = 'multiLineCommentAsterisk';\n\t            return\n\n\t        case undefined:\n\t            throw invalidChar(read())\n\t        }\n\n\t        read();\n\t    },\n\n\t    multiLineCommentAsterisk: function multiLineCommentAsterisk () {\n\t        switch (c) {\n\t        case '*':\n\t            read();\n\t            return\n\n\t        case '/':\n\t            read();\n\t            lexState = 'default';\n\t            return\n\n\t        case undefined:\n\t            throw invalidChar(read())\n\t        }\n\n\t        read();\n\t        lexState = 'multiLineComment';\n\t    },\n\n\t    singleLineComment: function singleLineComment () {\n\t        switch (c) {\n\t        case '\\n':\n\t        case '\\r':\n\t        case '\\u2028':\n\t        case '\\u2029':\n\t            read();\n\t            lexState = 'default';\n\t            return\n\n\t        case undefined:\n\t            read();\n\t            return newToken('eof')\n\t        }\n\n\t        read();\n\t    },\n\n\t    value: function value () {\n\t        switch (c) {\n\t        case '{':\n\t        case '[':\n\t            return newToken('punctuator', read())\n\n\t        case 'n':\n\t            read();\n\t            literal('ull');\n\t            return newToken('null', null)\n\n\t        case 't':\n\t            read();\n\t            literal('rue');\n\t            return newToken('boolean', true)\n\n\t        case 'f':\n\t            read();\n\t            literal('alse');\n\t            return newToken('boolean', false)\n\n\t        case '-':\n\t        case '+':\n\t            if (read() === '-') {\n\t                sign = -1;\n\t            }\n\n\t            lexState = 'sign';\n\t            return\n\n\t        case '.':\n\t            buffer = read();\n\t            lexState = 'decimalPointLeading';\n\t            return\n\n\t        case '0':\n\t            buffer = read();\n\t            lexState = 'zero';\n\t            return\n\n\t        case '1':\n\t        case '2':\n\t        case '3':\n\t        case '4':\n\t        case '5':\n\t        case '6':\n\t        case '7':\n\t        case '8':\n\t        case '9':\n\t            buffer = read();\n\t            lexState = 'decimalInteger';\n\t            return\n\n\t        case 'I':\n\t            read();\n\t            literal('nfinity');\n\t            return newToken('numeric', Infinity)\n\n\t        case 'N':\n\t            read();\n\t            literal('aN');\n\t            return newToken('numeric', NaN)\n\n\t        case '\"':\n\t        case \"'\":\n\t            doubleQuote = (read() === '\"');\n\t            buffer = '';\n\t            lexState = 'string';\n\t            return\n\t        }\n\n\t        throw invalidChar(read())\n\t    },\n\n\t    identifierNameStartEscape: function identifierNameStartEscape () {\n\t        if (c !== 'u') {\n\t            throw invalidChar(read())\n\t        }\n\n\t        read();\n\t        var u = unicodeEscape();\n\t        switch (u) {\n\t        case '$':\n\t        case '_':\n\t            break\n\n\t        default:\n\t            if (!util.isIdStartChar(u)) {\n\t                throw invalidIdentifier()\n\t            }\n\n\t            break\n\t        }\n\n\t        buffer += u;\n\t        lexState = 'identifierName';\n\t    },\n\n\t    identifierName: function identifierName () {\n\t        switch (c) {\n\t        case '$':\n\t        case '_':\n\t        case '\\u200C':\n\t        case '\\u200D':\n\t            buffer += read();\n\t            return\n\n\t        case '\\\\':\n\t            read();\n\t            lexState = 'identifierNameEscape';\n\t            return\n\t        }\n\n\t        if (util.isIdContinueChar(c)) {\n\t            buffer += read();\n\t            return\n\t        }\n\n\t        return newToken('identifier', buffer)\n\t    },\n\n\t    identifierNameEscape: function identifierNameEscape () {\n\t        if (c !== 'u') {\n\t            throw invalidChar(read())\n\t        }\n\n\t        read();\n\t        var u = unicodeEscape();\n\t        switch (u) {\n\t        case '$':\n\t        case '_':\n\t        case '\\u200C':\n\t        case '\\u200D':\n\t            break\n\n\t        default:\n\t            if (!util.isIdContinueChar(u)) {\n\t                throw invalidIdentifier()\n\t            }\n\n\t            break\n\t        }\n\n\t        buffer += u;\n\t        lexState = 'identifierName';\n\t    },\n\n\t    sign: function sign$1 () {\n\t        switch (c) {\n\t        case '.':\n\t            buffer = read();\n\t            lexState = 'decimalPointLeading';\n\t            return\n\n\t        case '0':\n\t            buffer = read();\n\t            lexState = 'zero';\n\t            return\n\n\t        case '1':\n\t        case '2':\n\t        case '3':\n\t        case '4':\n\t        case '5':\n\t        case '6':\n\t        case '7':\n\t        case '8':\n\t        case '9':\n\t            buffer = read();\n\t            lexState = 'decimalInteger';\n\t            return\n\n\t        case 'I':\n\t            read();\n\t            literal('nfinity');\n\t            return newToken('numeric', sign * Infinity)\n\n\t        case 'N':\n\t            read();\n\t            literal('aN');\n\t            return newToken('numeric', NaN)\n\t        }\n\n\t        throw invalidChar(read())\n\t    },\n\n\t    zero: function zero () {\n\t        switch (c) {\n\t        case '.':\n\t            buffer += read();\n\t            lexState = 'decimalPoint';\n\t            return\n\n\t        case 'e':\n\t        case 'E':\n\t            buffer += read();\n\t            lexState = 'decimalExponent';\n\t            return\n\n\t        case 'x':\n\t        case 'X':\n\t            buffer += read();\n\t            lexState = 'hexadecimal';\n\t            return\n\t        }\n\n\t        return newToken('numeric', sign * 0)\n\t    },\n\n\t    decimalInteger: function decimalInteger () {\n\t        switch (c) {\n\t        case '.':\n\t            buffer += read();\n\t            lexState = 'decimalPoint';\n\t            return\n\n\t        case 'e':\n\t        case 'E':\n\t            buffer += read();\n\t            lexState = 'decimalExponent';\n\t            return\n\t        }\n\n\t        if (util.isDigit(c)) {\n\t            buffer += read();\n\t            return\n\t        }\n\n\t        return newToken('numeric', sign * Number(buffer))\n\t    },\n\n\t    decimalPointLeading: function decimalPointLeading () {\n\t        if (util.isDigit(c)) {\n\t            buffer += read();\n\t            lexState = 'decimalFraction';\n\t            return\n\t        }\n\n\t        throw invalidChar(read())\n\t    },\n\n\t    decimalPoint: function decimalPoint () {\n\t        switch (c) {\n\t        case 'e':\n\t        case 'E':\n\t            buffer += read();\n\t            lexState = 'decimalExponent';\n\t            return\n\t        }\n\n\t        if (util.isDigit(c)) {\n\t            buffer += read();\n\t            lexState = 'decimalFraction';\n\t            return\n\t        }\n\n\t        return newToken('numeric', sign * Number(buffer))\n\t    },\n\n\t    decimalFraction: function decimalFraction () {\n\t        switch (c) {\n\t        case 'e':\n\t        case 'E':\n\t            buffer += read();\n\t            lexState = 'decimalExponent';\n\t            return\n\t        }\n\n\t        if (util.isDigit(c)) {\n\t            buffer += read();\n\t            return\n\t        }\n\n\t        return newToken('numeric', sign * Number(buffer))\n\t    },\n\n\t    decimalExponent: function decimalExponent () {\n\t        switch (c) {\n\t        case '+':\n\t        case '-':\n\t            buffer += read();\n\t            lexState = 'decimalExponentSign';\n\t            return\n\t        }\n\n\t        if (util.isDigit(c)) {\n\t            buffer += read();\n\t            lexState = 'decimalExponentInteger';\n\t            return\n\t        }\n\n\t        throw invalidChar(read())\n\t    },\n\n\t    decimalExponentSign: function decimalExponentSign () {\n\t        if (util.isDigit(c)) {\n\t            buffer += read();\n\t            lexState = 'decimalExponentInteger';\n\t            return\n\t        }\n\n\t        throw invalidChar(read())\n\t    },\n\n\t    decimalExponentInteger: function decimalExponentInteger () {\n\t        if (util.isDigit(c)) {\n\t            buffer += read();\n\t            return\n\t        }\n\n\t        return newToken('numeric', sign * Number(buffer))\n\t    },\n\n\t    hexadecimal: function hexadecimal () {\n\t        if (util.isHexDigit(c)) {\n\t            buffer += read();\n\t            lexState = 'hexadecimalInteger';\n\t            return\n\t        }\n\n\t        throw invalidChar(read())\n\t    },\n\n\t    hexadecimalInteger: function hexadecimalInteger () {\n\t        if (util.isHexDigit(c)) {\n\t            buffer += read();\n\t            return\n\t        }\n\n\t        return newToken('numeric', sign * Number(buffer))\n\t    },\n\n\t    string: function string () {\n\t        switch (c) {\n\t        case '\\\\':\n\t            read();\n\t            buffer += escape();\n\t            return\n\n\t        case '\"':\n\t            if (doubleQuote) {\n\t                read();\n\t                return newToken('string', buffer)\n\t            }\n\n\t            buffer += read();\n\t            return\n\n\t        case \"'\":\n\t            if (!doubleQuote) {\n\t                read();\n\t                return newToken('string', buffer)\n\t            }\n\n\t            buffer += read();\n\t            return\n\n\t        case '\\n':\n\t        case '\\r':\n\t            throw invalidChar(read())\n\n\t        case '\\u2028':\n\t        case '\\u2029':\n\t            separatorChar(c);\n\t            break\n\n\t        case undefined:\n\t            throw invalidChar(read())\n\t        }\n\n\t        buffer += read();\n\t    },\n\n\t    start: function start () {\n\t        switch (c) {\n\t        case '{':\n\t        case '[':\n\t            return newToken('punctuator', read())\n\n\t        // This code is unreachable since the default lexState handles eof.\n\t        // case undefined:\n\t        //     return newToken('eof')\n\t        }\n\n\t        lexState = 'value';\n\t    },\n\n\t    beforePropertyName: function beforePropertyName () {\n\t        switch (c) {\n\t        case '$':\n\t        case '_':\n\t            buffer = read();\n\t            lexState = 'identifierName';\n\t            return\n\n\t        case '\\\\':\n\t            read();\n\t            lexState = 'identifierNameStartEscape';\n\t            return\n\n\t        case '}':\n\t            return newToken('punctuator', read())\n\n\t        case '\"':\n\t        case \"'\":\n\t            doubleQuote = (read() === '\"');\n\t            lexState = 'string';\n\t            return\n\t        }\n\n\t        if (util.isIdStartChar(c)) {\n\t            buffer += read();\n\t            lexState = 'identifierName';\n\t            return\n\t        }\n\n\t        throw invalidChar(read())\n\t    },\n\n\t    afterPropertyName: function afterPropertyName () {\n\t        if (c === ':') {\n\t            return newToken('punctuator', read())\n\t        }\n\n\t        throw invalidChar(read())\n\t    },\n\n\t    beforePropertyValue: function beforePropertyValue () {\n\t        lexState = 'value';\n\t    },\n\n\t    afterPropertyValue: function afterPropertyValue () {\n\t        switch (c) {\n\t        case ',':\n\t        case '}':\n\t            return newToken('punctuator', read())\n\t        }\n\n\t        throw invalidChar(read())\n\t    },\n\n\t    beforeArrayValue: function beforeArrayValue () {\n\t        if (c === ']') {\n\t            return newToken('punctuator', read())\n\t        }\n\n\t        lexState = 'value';\n\t    },\n\n\t    afterArrayValue: function afterArrayValue () {\n\t        switch (c) {\n\t        case ',':\n\t        case ']':\n\t            return newToken('punctuator', read())\n\t        }\n\n\t        throw invalidChar(read())\n\t    },\n\n\t    end: function end () {\n\t        // This code is unreachable since it's handled by the default lexState.\n\t        // if (c === undefined) {\n\t        //     read()\n\t        //     return newToken('eof')\n\t        // }\n\n\t        throw invalidChar(read())\n\t    },\n\t};\n\n\tfunction newToken (type, value) {\n\t    return {\n\t        type: type,\n\t        value: value,\n\t        line: line,\n\t        column: column,\n\t    }\n\t}\n\n\tfunction literal (s) {\n\t    for (var i = 0, list = s; i < list.length; i += 1) {\n\t        var c = list[i];\n\n\t        var p = peek();\n\n\t        if (p !== c) {\n\t            throw invalidChar(read())\n\t        }\n\n\t        read();\n\t    }\n\t}\n\n\tfunction escape () {\n\t    var c = peek();\n\t    switch (c) {\n\t    case 'b':\n\t        read();\n\t        return '\\b'\n\n\t    case 'f':\n\t        read();\n\t        return '\\f'\n\n\t    case 'n':\n\t        read();\n\t        return '\\n'\n\n\t    case 'r':\n\t        read();\n\t        return '\\r'\n\n\t    case 't':\n\t        read();\n\t        return '\\t'\n\n\t    case 'v':\n\t        read();\n\t        return '\\v'\n\n\t    case '0':\n\t        read();\n\t        if (util.isDigit(peek())) {\n\t            throw invalidChar(read())\n\t        }\n\n\t        return '\\0'\n\n\t    case 'x':\n\t        read();\n\t        return hexEscape()\n\n\t    case 'u':\n\t        read();\n\t        return unicodeEscape()\n\n\t    case '\\n':\n\t    case '\\u2028':\n\t    case '\\u2029':\n\t        read();\n\t        return ''\n\n\t    case '\\r':\n\t        read();\n\t        if (peek() === '\\n') {\n\t            read();\n\t        }\n\n\t        return ''\n\n\t    case '1':\n\t    case '2':\n\t    case '3':\n\t    case '4':\n\t    case '5':\n\t    case '6':\n\t    case '7':\n\t    case '8':\n\t    case '9':\n\t        throw invalidChar(read())\n\n\t    case undefined:\n\t        throw invalidChar(read())\n\t    }\n\n\t    return read()\n\t}\n\n\tfunction hexEscape () {\n\t    var buffer = '';\n\t    var c = peek();\n\n\t    if (!util.isHexDigit(c)) {\n\t        throw invalidChar(read())\n\t    }\n\n\t    buffer += read();\n\n\t    c = peek();\n\t    if (!util.isHexDigit(c)) {\n\t        throw invalidChar(read())\n\t    }\n\n\t    buffer += read();\n\n\t    return String.fromCodePoint(parseInt(buffer, 16))\n\t}\n\n\tfunction unicodeEscape () {\n\t    var buffer = '';\n\t    var count = 4;\n\n\t    while (count-- > 0) {\n\t        var c = peek();\n\t        if (!util.isHexDigit(c)) {\n\t            throw invalidChar(read())\n\t        }\n\n\t        buffer += read();\n\t    }\n\n\t    return String.fromCodePoint(parseInt(buffer, 16))\n\t}\n\n\tvar parseStates = {\n\t    start: function start () {\n\t        if (token.type === 'eof') {\n\t            throw invalidEOF()\n\t        }\n\n\t        push();\n\t    },\n\n\t    beforePropertyName: function beforePropertyName () {\n\t        switch (token.type) {\n\t        case 'identifier':\n\t        case 'string':\n\t            key = token.value;\n\t            parseState = 'afterPropertyName';\n\t            return\n\n\t        case 'punctuator':\n\t            // This code is unreachable since it's handled by the lexState.\n\t            // if (token.value !== '}') {\n\t            //     throw invalidToken()\n\t            // }\n\n\t            pop();\n\t            return\n\n\t        case 'eof':\n\t            throw invalidEOF()\n\t        }\n\n\t        // This code is unreachable since it's handled by the lexState.\n\t        // throw invalidToken()\n\t    },\n\n\t    afterPropertyName: function afterPropertyName () {\n\t        // This code is unreachable since it's handled by the lexState.\n\t        // if (token.type !== 'punctuator' || token.value !== ':') {\n\t        //     throw invalidToken()\n\t        // }\n\n\t        if (token.type === 'eof') {\n\t            throw invalidEOF()\n\t        }\n\n\t        parseState = 'beforePropertyValue';\n\t    },\n\n\t    beforePropertyValue: function beforePropertyValue () {\n\t        if (token.type === 'eof') {\n\t            throw invalidEOF()\n\t        }\n\n\t        push();\n\t    },\n\n\t    beforeArrayValue: function beforeArrayValue () {\n\t        if (token.type === 'eof') {\n\t            throw invalidEOF()\n\t        }\n\n\t        if (token.type === 'punctuator' && token.value === ']') {\n\t            pop();\n\t            return\n\t        }\n\n\t        push();\n\t    },\n\n\t    afterPropertyValue: function afterPropertyValue () {\n\t        // This code is unreachable since it's handled by the lexState.\n\t        // if (token.type !== 'punctuator') {\n\t        //     throw invalidToken()\n\t        // }\n\n\t        if (token.type === 'eof') {\n\t            throw invalidEOF()\n\t        }\n\n\t        switch (token.value) {\n\t        case ',':\n\t            parseState = 'beforePropertyName';\n\t            return\n\n\t        case '}':\n\t            pop();\n\t        }\n\n\t        // This code is unreachable since it's handled by the lexState.\n\t        // throw invalidToken()\n\t    },\n\n\t    afterArrayValue: function afterArrayValue () {\n\t        // This code is unreachable since it's handled by the lexState.\n\t        // if (token.type !== 'punctuator') {\n\t        //     throw invalidToken()\n\t        // }\n\n\t        if (token.type === 'eof') {\n\t            throw invalidEOF()\n\t        }\n\n\t        switch (token.value) {\n\t        case ',':\n\t            parseState = 'beforeArrayValue';\n\t            return\n\n\t        case ']':\n\t            pop();\n\t        }\n\n\t        // This code is unreachable since it's handled by the lexState.\n\t        // throw invalidToken()\n\t    },\n\n\t    end: function end () {\n\t        // This code is unreachable since it's handled by the lexState.\n\t        // if (token.type !== 'eof') {\n\t        //     throw invalidToken()\n\t        // }\n\t    },\n\t};\n\n\tfunction push () {\n\t    var value;\n\n\t    switch (token.type) {\n\t    case 'punctuator':\n\t        switch (token.value) {\n\t        case '{':\n\t            value = {};\n\t            break\n\n\t        case '[':\n\t            value = [];\n\t            break\n\t        }\n\n\t        break\n\n\t    case 'null':\n\t    case 'boolean':\n\t    case 'numeric':\n\t    case 'string':\n\t        value = token.value;\n\t        break\n\n\t    // This code is unreachable.\n\t    // default:\n\t    //     throw invalidToken()\n\t    }\n\n\t    if (root === undefined) {\n\t        root = value;\n\t    } else {\n\t        var parent = stack[stack.length - 1];\n\t        if (Array.isArray(parent)) {\n\t            parent.push(value);\n\t        } else {\n\t            parent[key] = value;\n\t        }\n\t    }\n\n\t    if (value !== null && typeof value === 'object') {\n\t        stack.push(value);\n\n\t        if (Array.isArray(value)) {\n\t            parseState = 'beforeArrayValue';\n\t        } else {\n\t            parseState = 'beforePropertyName';\n\t        }\n\t    } else {\n\t        var current = stack[stack.length - 1];\n\t        if (current == null) {\n\t            parseState = 'end';\n\t        } else if (Array.isArray(current)) {\n\t            parseState = 'afterArrayValue';\n\t        } else {\n\t            parseState = 'afterPropertyValue';\n\t        }\n\t    }\n\t}\n\n\tfunction pop () {\n\t    stack.pop();\n\n\t    var current = stack[stack.length - 1];\n\t    if (current == null) {\n\t        parseState = 'end';\n\t    } else if (Array.isArray(current)) {\n\t        parseState = 'afterArrayValue';\n\t    } else {\n\t        parseState = 'afterPropertyValue';\n\t    }\n\t}\n\n\t// This code is unreachable.\n\t// function invalidParseState () {\n\t//     return new Error(`JSON5: invalid parse state '${parseState}'`)\n\t// }\n\n\t// This code is unreachable.\n\t// function invalidLexState (state) {\n\t//     return new Error(`JSON5: invalid lex state '${state}'`)\n\t// }\n\n\tfunction invalidChar (c) {\n\t    if (c === undefined) {\n\t        return syntaxError((\"JSON5: invalid end of input at \" + line + \":\" + column))\n\t    }\n\n\t    return syntaxError((\"JSON5: invalid character '\" + (formatChar(c)) + \"' at \" + line + \":\" + column))\n\t}\n\n\tfunction invalidEOF () {\n\t    return syntaxError((\"JSON5: invalid end of input at \" + line + \":\" + column))\n\t}\n\n\t// This code is unreachable.\n\t// function invalidToken () {\n\t//     if (token.type === 'eof') {\n\t//         return syntaxError(`JSON5: invalid end of input at ${line}:${column}`)\n\t//     }\n\n\t//     const c = String.fromCodePoint(token.value.codePointAt(0))\n\t//     return syntaxError(`JSON5: invalid character '${formatChar(c)}' at ${line}:${column}`)\n\t// }\n\n\tfunction invalidIdentifier () {\n\t    column -= 5;\n\t    return syntaxError((\"JSON5: invalid identifier character at \" + line + \":\" + column))\n\t}\n\n\tfunction separatorChar (c) {\n\t    console.warn((\"JSON5: '\" + (formatChar(c)) + \"' in strings is not valid ECMAScript; consider escaping\"));\n\t}\n\n\tfunction formatChar (c) {\n\t    var replacements = {\n\t        \"'\": \"\\\\'\",\n\t        '\"': '\\\\\"',\n\t        '\\\\': '\\\\\\\\',\n\t        '\\b': '\\\\b',\n\t        '\\f': '\\\\f',\n\t        '\\n': '\\\\n',\n\t        '\\r': '\\\\r',\n\t        '\\t': '\\\\t',\n\t        '\\v': '\\\\v',\n\t        '\\0': '\\\\0',\n\t        '\\u2028': '\\\\u2028',\n\t        '\\u2029': '\\\\u2029',\n\t    };\n\n\t    if (replacements[c]) {\n\t        return replacements[c]\n\t    }\n\n\t    if (c < ' ') {\n\t        var hexString = c.charCodeAt(0).toString(16);\n\t        return '\\\\x' + ('00' + hexString).substring(hexString.length)\n\t    }\n\n\t    return c\n\t}\n\n\tfunction syntaxError (message) {\n\t    var err = new SyntaxError(message);\n\t    err.lineNumber = line;\n\t    err.columnNumber = column;\n\t    return err\n\t}\n\n\tvar stringify = function stringify (value, replacer, space) {\n\t    var stack = [];\n\t    var indent = '';\n\t    var propertyList;\n\t    var replacerFunc;\n\t    var gap = '';\n\t    var quote;\n\n\t    if (\n\t        replacer != null &&\n\t        typeof replacer === 'object' &&\n\t        !Array.isArray(replacer)\n\t    ) {\n\t        space = replacer.space;\n\t        quote = replacer.quote;\n\t        replacer = replacer.replacer;\n\t    }\n\n\t    if (typeof replacer === 'function') {\n\t        replacerFunc = replacer;\n\t    } else if (Array.isArray(replacer)) {\n\t        propertyList = [];\n\t        for (var i = 0, list = replacer; i < list.length; i += 1) {\n\t            var v = list[i];\n\n\t            var item = (void 0);\n\n\t            if (typeof v === 'string') {\n\t                item = v;\n\t            } else if (\n\t                typeof v === 'number' ||\n\t                v instanceof String ||\n\t                v instanceof Number\n\t            ) {\n\t                item = String(v);\n\t            }\n\n\t            if (item !== undefined && propertyList.indexOf(item) < 0) {\n\t                propertyList.push(item);\n\t            }\n\t        }\n\t    }\n\n\t    if (space instanceof Number) {\n\t        space = Number(space);\n\t    } else if (space instanceof String) {\n\t        space = String(space);\n\t    }\n\n\t    if (typeof space === 'number') {\n\t        if (space > 0) {\n\t            space = Math.min(10, Math.floor(space));\n\t            gap = '          '.substr(0, space);\n\t        }\n\t    } else if (typeof space === 'string') {\n\t        gap = space.substr(0, 10);\n\t    }\n\n\t    return serializeProperty('', {'': value})\n\n\t    function serializeProperty (key, holder) {\n\t        var value = holder[key];\n\t        if (value != null) {\n\t            if (typeof value.toJSON5 === 'function') {\n\t                value = value.toJSON5(key);\n\t            } else if (typeof value.toJSON === 'function') {\n\t                value = value.toJSON(key);\n\t            }\n\t        }\n\n\t        if (replacerFunc) {\n\t            value = replacerFunc.call(holder, key, value);\n\t        }\n\n\t        if (value instanceof Number) {\n\t            value = Number(value);\n\t        } else if (value instanceof String) {\n\t            value = String(value);\n\t        } else if (value instanceof Boolean) {\n\t            value = value.valueOf();\n\t        }\n\n\t        switch (value) {\n\t        case null: return 'null'\n\t        case true: return 'true'\n\t        case false: return 'false'\n\t        }\n\n\t        if (typeof value === 'string') {\n\t            return quoteString(value, false)\n\t        }\n\n\t        if (typeof value === 'number') {\n\t            return String(value)\n\t        }\n\n\t        if (typeof value === 'object') {\n\t            return Array.isArray(value) ? serializeArray(value) : serializeObject(value)\n\t        }\n\n\t        return undefined\n\t    }\n\n\t    function quoteString (value) {\n\t        var quotes = {\n\t            \"'\": 0.1,\n\t            '\"': 0.2,\n\t        };\n\n\t        var replacements = {\n\t            \"'\": \"\\\\'\",\n\t            '\"': '\\\\\"',\n\t            '\\\\': '\\\\\\\\',\n\t            '\\b': '\\\\b',\n\t            '\\f': '\\\\f',\n\t            '\\n': '\\\\n',\n\t            '\\r': '\\\\r',\n\t            '\\t': '\\\\t',\n\t            '\\v': '\\\\v',\n\t            '\\0': '\\\\0',\n\t            '\\u2028': '\\\\u2028',\n\t            '\\u2029': '\\\\u2029',\n\t        };\n\n\t        var product = '';\n\n\t        for (var i = 0; i < value.length; i++) {\n\t            var c = value[i];\n\t            switch (c) {\n\t            case \"'\":\n\t            case '\"':\n\t                quotes[c]++;\n\t                product += c;\n\t                continue\n\n\t            case '\\0':\n\t                if (util.isDigit(value[i + 1])) {\n\t                    product += '\\\\x00';\n\t                    continue\n\t                }\n\t            }\n\n\t            if (replacements[c]) {\n\t                product += replacements[c];\n\t                continue\n\t            }\n\n\t            if (c < ' ') {\n\t                var hexString = c.charCodeAt(0).toString(16);\n\t                product += '\\\\x' + ('00' + hexString).substring(hexString.length);\n\t                continue\n\t            }\n\n\t            product += c;\n\t        }\n\n\t        var quoteChar = quote || Object.keys(quotes).reduce(function (a, b) { return (quotes[a] < quotes[b]) ? a : b; });\n\n\t        product = product.replace(new RegExp(quoteChar, 'g'), replacements[quoteChar]);\n\n\t        return quoteChar + product + quoteChar\n\t    }\n\n\t    function serializeObject (value) {\n\t        if (stack.indexOf(value) >= 0) {\n\t            throw TypeError('Converting circular structure to JSON5')\n\t        }\n\n\t        stack.push(value);\n\n\t        var stepback = indent;\n\t        indent = indent + gap;\n\n\t        var keys = propertyList || Object.keys(value);\n\t        var partial = [];\n\t        for (var i = 0, list = keys; i < list.length; i += 1) {\n\t            var key = list[i];\n\n\t            var propertyString = serializeProperty(key, value);\n\t            if (propertyString !== undefined) {\n\t                var member = serializeKey(key) + ':';\n\t                if (gap !== '') {\n\t                    member += ' ';\n\t                }\n\t                member += propertyString;\n\t                partial.push(member);\n\t            }\n\t        }\n\n\t        var final;\n\t        if (partial.length === 0) {\n\t            final = '{}';\n\t        } else {\n\t            var properties;\n\t            if (gap === '') {\n\t                properties = partial.join(',');\n\t                final = '{' + properties + '}';\n\t            } else {\n\t                var separator = ',\\n' + indent;\n\t                properties = partial.join(separator);\n\t                final = '{\\n' + indent + properties + ',\\n' + stepback + '}';\n\t            }\n\t        }\n\n\t        stack.pop();\n\t        indent = stepback;\n\t        return final\n\t    }\n\n\t    function serializeKey (key) {\n\t        if (key.length === 0) {\n\t            return quoteString(key, true)\n\t        }\n\n\t        var firstChar = String.fromCodePoint(key.codePointAt(0));\n\t        if (!util.isIdStartChar(firstChar)) {\n\t            return quoteString(key, true)\n\t        }\n\n\t        for (var i = firstChar.length; i < key.length; i++) {\n\t            if (!util.isIdContinueChar(String.fromCodePoint(key.codePointAt(i)))) {\n\t                return quoteString(key, true)\n\t            }\n\t        }\n\n\t        return key\n\t    }\n\n\t    function serializeArray (value) {\n\t        if (stack.indexOf(value) >= 0) {\n\t            throw TypeError('Converting circular structure to JSON5')\n\t        }\n\n\t        stack.push(value);\n\n\t        var stepback = indent;\n\t        indent = indent + gap;\n\n\t        var partial = [];\n\t        for (var i = 0; i < value.length; i++) {\n\t            var propertyString = serializeProperty(String(i), value);\n\t            partial.push((propertyString !== undefined) ? propertyString : 'null');\n\t        }\n\n\t        var final;\n\t        if (partial.length === 0) {\n\t            final = '[]';\n\t        } else {\n\t            if (gap === '') {\n\t                var properties = partial.join(',');\n\t                final = '[' + properties + ']';\n\t            } else {\n\t                var separator = ',\\n' + indent;\n\t                var properties$1 = partial.join(separator);\n\t                final = '[\\n' + indent + properties$1 + ',\\n' + stepback + ']';\n\t            }\n\t        }\n\n\t        stack.pop();\n\t        indent = stepback;\n\t        return final\n\t    }\n\t};\n\n\tvar JSON5 = {\n\t    parse: parse,\n\t    stringify: stringify,\n\t};\n\n\tvar lib = JSON5;\n\n\tvar es5 = lib;\n\n\treturn es5;\n\n})));\n","'use strict';\n\nfunction getCurrentRequest(loaderContext) {\n  if (loaderContext.currentRequest) {\n    return loaderContext.currentRequest;\n  }\n\n  const request = loaderContext.loaders\n    .slice(loaderContext.loaderIndex)\n    .map((obj) => obj.request)\n    .concat([loaderContext.resource]);\n\n  return request.join('!');\n}\n\nmodule.exports = getCurrentRequest;\n","'use strict';\n\nconst baseEncodeTables = {\n  26: 'abcdefghijklmnopqrstuvwxyz',\n  32: '123456789abcdefghjkmnpqrstuvwxyz', // no 0lio\n  36: '0123456789abcdefghijklmnopqrstuvwxyz',\n  49: 'abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ', // no lIO\n  52: 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ',\n  58: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ', // no 0lIO\n  62: '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ',\n  64: '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-_',\n};\n\nfunction encodeBufferToBase(buffer, base) {\n  const encodeTable = baseEncodeTables[base];\n  if (!encodeTable) {\n    throw new Error('Unknown encoding base' + base);\n  }\n\n  const readLength = buffer.length;\n  const Big = require('big.js');\n\n  Big.RM = Big.DP = 0;\n  let b = new Big(0);\n\n  for (let i = readLength - 1; i >= 0; i--) {\n    b = b.times(256).plus(buffer[i]);\n  }\n\n  let output = '';\n  while (b.gt(0)) {\n    output = encodeTable[b.mod(base)] + output;\n    b = b.div(base);\n  }\n\n  Big.DP = 20;\n  Big.RM = 1;\n\n  return output;\n}\n\nfunction getHashDigest(buffer, hashType, digestType, maxLength) {\n  hashType = hashType || 'md4';\n  maxLength = maxLength || 9999;\n\n  const hash = require('crypto').createHash(hashType);\n\n  hash.update(buffer);\n\n  if (\n    digestType === 'base26' ||\n    digestType === 'base32' ||\n    digestType === 'base36' ||\n    digestType === 'base49' ||\n    digestType === 'base52' ||\n    digestType === 'base58' ||\n    digestType === 'base62' ||\n    digestType === 'base64'\n  ) {\n    return encodeBufferToBase(hash.digest(), digestType.substr(4)).substr(\n      0,\n      maxLength\n    );\n  } else {\n    return hash.digest(digestType || 'hex').substr(0, maxLength);\n  }\n}\n\nmodule.exports = getHashDigest;\n","'use strict';\n\nconst parseQuery = require('./parseQuery');\n\nfunction getOptions(loaderContext) {\n  const query = loaderContext.query;\n\n  if (typeof query === 'string' && query !== '') {\n    return parseQuery(loaderContext.query);\n  }\n\n  if (!query || typeof query !== 'object') {\n    // Not object-like queries are not supported.\n    return {};\n  }\n\n  return query;\n}\n\nmodule.exports = getOptions;\n","'use strict';\n\nfunction getRemainingRequest(loaderContext) {\n  if (loaderContext.remainingRequest) {\n    return loaderContext.remainingRequest;\n  }\n\n  const request = loaderContext.loaders\n    .slice(loaderContext.loaderIndex + 1)\n    .map((obj) => obj.request)\n    .concat([loaderContext.resource]);\n\n  return request.join('!');\n}\n\nmodule.exports = getRemainingRequest;\n","'use strict';\n\nconst getOptions = require('./getOptions');\nconst parseQuery = require('./parseQuery');\nconst stringifyRequest = require('./stringifyRequest');\nconst getRemainingRequest = require('./getRemainingRequest');\nconst getCurrentRequest = require('./getCurrentRequest');\nconst isUrlRequest = require('./isUrlRequest');\nconst urlToRequest = require('./urlToRequest');\nconst parseString = require('./parseString');\nconst getHashDigest = require('./getHashDigest');\nconst interpolateName = require('./interpolateName');\n\nexports.getOptions = getOptions;\nexports.parseQuery = parseQuery;\nexports.stringifyRequest = stringifyRequest;\nexports.getRemainingRequest = getRemainingRequest;\nexports.getCurrentRequest = getCurrentRequest;\nexports.isUrlRequest = isUrlRequest;\nexports.urlToRequest = urlToRequest;\nexports.parseString = parseString;\nexports.getHashDigest = getHashDigest;\nexports.interpolateName = interpolateName;\n","'use strict';\n\nconst path = require('path');\nconst emojisList = require('emojis-list');\nconst getHashDigest = require('./getHashDigest');\n\nconst emojiRegex = /[\\uD800-\\uDFFF]./;\nconst emojiList = emojisList.filter((emoji) => emojiRegex.test(emoji));\nconst emojiCache = {};\n\nfunction encodeStringToEmoji(content, length) {\n  if (emojiCache[content]) {\n    return emojiCache[content];\n  }\n\n  length = length || 1;\n\n  const emojis = [];\n\n  do {\n    if (!emojiList.length) {\n      throw new Error('Ran out of emoji');\n    }\n\n    const index = Math.floor(Math.random() * emojiList.length);\n\n    emojis.push(emojiList[index]);\n    emojiList.splice(index, 1);\n  } while (--length > 0);\n\n  const emojiEncoding = emojis.join('');\n\n  emojiCache[content] = emojiEncoding;\n\n  return emojiEncoding;\n}\n\nfunction interpolateName(loaderContext, name, options) {\n  let filename;\n\n  const hasQuery =\n    loaderContext.resourceQuery && loaderContext.resourceQuery.length > 1;\n\n  if (typeof name === 'function') {\n    filename = name(\n      loaderContext.resourcePath,\n      hasQuery ? loaderContext.resourceQuery : undefined\n    );\n  } else {\n    filename = name || '[hash].[ext]';\n  }\n\n  const context = options.context;\n  const content = options.content;\n  const regExp = options.regExp;\n\n  let ext = 'bin';\n  let basename = 'file';\n  let directory = '';\n  let folder = '';\n  let query = '';\n\n  if (loaderContext.resourcePath) {\n    const parsed = path.parse(loaderContext.resourcePath);\n    let resourcePath = loaderContext.resourcePath;\n\n    if (parsed.ext) {\n      ext = parsed.ext.substr(1);\n    }\n\n    if (parsed.dir) {\n      basename = parsed.name;\n      resourcePath = parsed.dir + path.sep;\n    }\n\n    if (typeof context !== 'undefined') {\n      directory = path\n        .relative(context, resourcePath + '_')\n        .replace(/\\\\/g, '/')\n        .replace(/\\.\\.(\\/)?/g, '_$1');\n      directory = directory.substr(0, directory.length - 1);\n    } else {\n      directory = resourcePath.replace(/\\\\/g, '/').replace(/\\.\\.(\\/)?/g, '_$1');\n    }\n\n    if (directory.length === 1) {\n      directory = '';\n    } else if (directory.length > 1) {\n      folder = path.basename(directory);\n    }\n  }\n\n  if (loaderContext.resourceQuery && loaderContext.resourceQuery.length > 1) {\n    query = loaderContext.resourceQuery;\n\n    const hashIdx = query.indexOf('#');\n\n    if (hashIdx >= 0) {\n      query = query.substr(0, hashIdx);\n    }\n  }\n\n  let url = filename;\n\n  if (content) {\n    // Match hash template\n    url = url\n      // `hash` and `contenthash` are same in `loader-utils` context\n      // let's keep `hash` for backward compatibility\n      .replace(\n        /\\[(?:([^:\\]]+):)?(?:hash|contenthash)(?::([a-z]+\\d*))?(?::(\\d+))?\\]/gi,\n        (all, hashType, digestType, maxLength) =>\n          getHashDigest(content, hashType, digestType, parseInt(maxLength, 10))\n      )\n      .replace(/\\[emoji(?::(\\d+))?\\]/gi, (all, length) =>\n        encodeStringToEmoji(content, parseInt(length, 10))\n      );\n  }\n\n  url = url\n    .replace(/\\[ext\\]/gi, () => ext)\n    .replace(/\\[name\\]/gi, () => basename)\n    .replace(/\\[path\\]/gi, () => directory)\n    .replace(/\\[folder\\]/gi, () => folder)\n    .replace(/\\[query\\]/gi, () => query);\n\n  if (regExp && loaderContext.resourcePath) {\n    const match = loaderContext.resourcePath.match(new RegExp(regExp));\n\n    match &&\n      match.forEach((matched, i) => {\n        url = url.replace(new RegExp('\\\\[' + i + '\\\\]', 'ig'), matched);\n      });\n  }\n\n  if (\n    typeof loaderContext.options === 'object' &&\n    typeof loaderContext.options.customInterpolateName === 'function'\n  ) {\n    url = loaderContext.options.customInterpolateName.call(\n      loaderContext,\n      url,\n      name,\n      options\n    );\n  }\n\n  return url;\n}\n\nmodule.exports = interpolateName;\n","'use strict';\n\nconst path = require('path');\n\nfunction isUrlRequest(url, root) {\n  // An URL is not an request if\n\n  // 1. It's an absolute url and it is not `windows` path like `C:\\dir\\file`\n  if (/^[a-z][a-z0-9+.-]*:/i.test(url) && !path.win32.isAbsolute(url)) {\n    return false;\n  }\n\n  // 2. It's a protocol-relative\n  if (/^\\/\\//.test(url)) {\n    return false;\n  }\n\n  // 3. It's some kind of url for a template\n  if (/^[{}[\\]#*;,'§$%&(=?`´^°<>]/.test(url)) {\n    return false;\n  }\n\n  // 4. It's also not an request if root isn't set and it's a root-relative url\n  if ((root === undefined || root === false) && /^\\//.test(url)) {\n    return false;\n  }\n\n  return true;\n}\n\nmodule.exports = isUrlRequest;\n","'use strict';\n\nconst JSON5 = require('json5');\n\nconst specialValues = {\n  null: null,\n  true: true,\n  false: false,\n};\n\nfunction parseQuery(query) {\n  if (query.substr(0, 1) !== '?') {\n    throw new Error(\n      \"A valid query string passed to parseQuery should begin with '?'\"\n    );\n  }\n\n  query = query.substr(1);\n\n  if (!query) {\n    return {};\n  }\n\n  if (query.substr(0, 1) === '{' && query.substr(-1) === '}') {\n    return JSON5.parse(query);\n  }\n\n  const queryArgs = query.split(/[,&]/g);\n  const result = {};\n\n  queryArgs.forEach((arg) => {\n    const idx = arg.indexOf('=');\n\n    if (idx >= 0) {\n      let name = arg.substr(0, idx);\n      let value = decodeURIComponent(arg.substr(idx + 1));\n\n      // eslint-disable-next-line no-prototype-builtins\n      if (specialValues.hasOwnProperty(value)) {\n        value = specialValues[value];\n      }\n\n      if (name.substr(-2) === '[]') {\n        name = decodeURIComponent(name.substr(0, name.length - 2));\n\n        if (!Array.isArray(result[name])) {\n          result[name] = [];\n        }\n\n        result[name].push(value);\n      } else {\n        name = decodeURIComponent(name);\n        result[name] = value;\n      }\n    } else {\n      if (arg.substr(0, 1) === '-') {\n        result[decodeURIComponent(arg.substr(1))] = false;\n      } else if (arg.substr(0, 1) === '+') {\n        result[decodeURIComponent(arg.substr(1))] = true;\n      } else {\n        result[decodeURIComponent(arg)] = true;\n      }\n    }\n  });\n\n  return result;\n}\n\nmodule.exports = parseQuery;\n","'use strict';\n\nfunction parseString(str) {\n  try {\n    if (str[0] === '\"') {\n      return JSON.parse(str);\n    }\n\n    if (str[0] === \"'\" && str.substr(str.length - 1) === \"'\") {\n      return parseString(\n        str\n          .replace(/\\\\.|\"/g, (x) => (x === '\"' ? '\\\\\"' : x))\n          .replace(/^'|'$/g, '\"')\n      );\n    }\n\n    return JSON.parse('\"' + str + '\"');\n  } catch (e) {\n    return str;\n  }\n}\n\nmodule.exports = parseString;\n","'use strict';\n\nconst path = require('path');\n\nconst matchRelativePath = /^\\.\\.?[/\\\\]/;\n\nfunction isAbsolutePath(str) {\n  return path.posix.isAbsolute(str) || path.win32.isAbsolute(str);\n}\n\nfunction isRelativePath(str) {\n  return matchRelativePath.test(str);\n}\n\nfunction stringifyRequest(loaderContext, request) {\n  const splitted = request.split('!');\n  const context =\n    loaderContext.context ||\n    (loaderContext.options && loaderContext.options.context);\n\n  return JSON.stringify(\n    splitted\n      .map((part) => {\n        // First, separate singlePath from query, because the query might contain paths again\n        const splittedPart = part.match(/^(.*?)(\\?.*)/);\n        const query = splittedPart ? splittedPart[2] : '';\n        let singlePath = splittedPart ? splittedPart[1] : part;\n\n        if (isAbsolutePath(singlePath) && context) {\n          singlePath = path.relative(context, singlePath);\n\n          if (isAbsolutePath(singlePath)) {\n            // If singlePath still matches an absolute path, singlePath was on a different drive than context.\n            // In this case, we leave the path platform-specific without replacing any separators.\n            // @see https://github.com/webpack/loader-utils/pull/14\n            return singlePath + query;\n          }\n\n          if (isRelativePath(singlePath) === false) {\n            // Ensure that the relative path starts at least with ./ otherwise it would be a request into the modules directory (like node_modules).\n            singlePath = './' + singlePath;\n          }\n        }\n\n        return singlePath.replace(/\\\\/g, '/') + query;\n      })\n      .join('!')\n  );\n}\n\nmodule.exports = stringifyRequest;\n","'use strict';\n\n// we can't use path.win32.isAbsolute because it also matches paths starting with a forward slash\nconst matchNativeWin32Path = /^[A-Z]:[/\\\\]|^\\\\\\\\/i;\n\nfunction urlToRequest(url, root) {\n  // Do not rewrite an empty url\n  if (url === '') {\n    return '';\n  }\n\n  const moduleRequestRegex = /^[^?]*~/;\n  let request;\n\n  if (matchNativeWin32Path.test(url)) {\n    // absolute windows path, keep it\n    request = url;\n  } else if (root !== undefined && root !== false && /^\\//.test(url)) {\n    // if root is set and the url is root-relative\n    switch (typeof root) {\n      // 1. root is a string: root is prefixed to the url\n      case 'string':\n        // special case: `~` roots convert to module request\n        if (moduleRequestRegex.test(root)) {\n          request = root.replace(/([^~/])$/, '$1/') + url.slice(1);\n        } else {\n          request = root + url;\n        }\n        break;\n      // 2. root is `true`: absolute paths are allowed\n      //    *nix only, windows-style absolute paths are always allowed as they doesn't start with a `/`\n      case 'boolean':\n        request = url;\n        break;\n      default:\n        throw new Error(\n          \"Unexpected parameters to loader-utils 'urlToRequest': url = \" +\n            url +\n            ', root = ' +\n            root +\n            '.'\n        );\n    }\n  } else if (/^\\.\\.?\\//.test(url)) {\n    // A relative url stays\n    request = url;\n  } else {\n    // every other url is threaded like a relative url\n    request = './' + url;\n  }\n\n  // A `~` makes the url an module\n  if (moduleRequestRegex.test(request)) {\n    request = request.replace(moduleRequestRegex, '');\n  }\n\n  return request;\n}\n\nmodule.exports = urlToRequest;\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nconst Range = require('./util/Range');\n/** @typedef {import(\"json-schema\").JSONSchema6} JSONSchema6 */\n\n/** @typedef {import(\"json-schema\").JSONSchema7} JSONSchema7 */\n\n/** @typedef {import(\"./validate\").Schema} Schema */\n\n/** @typedef {import(\"./validate\").ValidationErrorConfiguration} ValidationErrorConfiguration */\n\n/** @typedef {import(\"./validate\").PostFormatter} PostFormatter */\n\n/** @typedef {import(\"./validate\").SchemaUtilErrorObject} SchemaUtilErrorObject */\n\n/** @enum {number} */\n\n\nconst SPECIFICITY = {\n  type: 1,\n  not: 1,\n  oneOf: 1,\n  anyOf: 1,\n  if: 1,\n  enum: 1,\n  const: 1,\n  instanceof: 1,\n  required: 2,\n  pattern: 2,\n  patternRequired: 2,\n  format: 2,\n  formatMinimum: 2,\n  formatMaximum: 2,\n  minimum: 2,\n  exclusiveMinimum: 2,\n  maximum: 2,\n  exclusiveMaximum: 2,\n  multipleOf: 2,\n  uniqueItems: 2,\n  contains: 2,\n  minLength: 2,\n  maxLength: 2,\n  minItems: 2,\n  maxItems: 2,\n  minProperties: 2,\n  maxProperties: 2,\n  dependencies: 2,\n  propertyNames: 2,\n  additionalItems: 2,\n  additionalProperties: 2,\n  absolutePath: 2\n};\n/**\n *\n * @param {Array<SchemaUtilErrorObject>} array\n * @param {(item: SchemaUtilErrorObject) => number} fn\n * @returns {Array<SchemaUtilErrorObject>}\n */\n\nfunction filterMax(array, fn) {\n  const evaluatedMax = array.reduce((max, item) => Math.max(max, fn(item)), 0);\n  return array.filter(item => fn(item) === evaluatedMax);\n}\n/**\n *\n * @param {Array<SchemaUtilErrorObject>} children\n * @returns {Array<SchemaUtilErrorObject>}\n */\n\n\nfunction filterChildren(children) {\n  let newChildren = children;\n  newChildren = filterMax(newChildren,\n  /**\n   *\n   * @param {SchemaUtilErrorObject} error\n   * @returns {number}\n   */\n  error => error.dataPath ? error.dataPath.length : 0);\n  newChildren = filterMax(newChildren,\n  /**\n   * @param {SchemaUtilErrorObject} error\n   * @returns {number}\n   */\n  error => SPECIFICITY[\n  /** @type {keyof typeof SPECIFICITY} */\n  error.keyword] || 2);\n  return newChildren;\n}\n/**\n * Find all children errors\n * @param {Array<SchemaUtilErrorObject>} children\n * @param {Array<string>} schemaPaths\n * @return {number} returns index of first child\n */\n\n\nfunction findAllChildren(children, schemaPaths) {\n  let i = children.length - 1;\n\n  const predicate =\n  /**\n   * @param {string} schemaPath\n   * @returns {boolean}\n   */\n  schemaPath => children[i].schemaPath.indexOf(schemaPath) !== 0;\n\n  while (i > -1 && !schemaPaths.every(predicate)) {\n    if (children[i].keyword === 'anyOf' || children[i].keyword === 'oneOf') {\n      const refs = extractRefs(children[i]);\n      const childrenStart = findAllChildren(children.slice(0, i), refs.concat(children[i].schemaPath));\n      i = childrenStart - 1;\n    } else {\n      i -= 1;\n    }\n  }\n\n  return i + 1;\n}\n/**\n * Extracts all refs from schema\n * @param {SchemaUtilErrorObject} error\n * @return {Array<string>}\n */\n\n\nfunction extractRefs(error) {\n  const {\n    schema\n  } = error;\n\n  if (!Array.isArray(schema)) {\n    return [];\n  }\n\n  return schema.map(({\n    $ref\n  }) => $ref).filter(s => s);\n}\n/**\n * Groups children by their first level parent (assuming that error is root)\n * @param {Array<SchemaUtilErrorObject>} children\n * @return {Array<SchemaUtilErrorObject>}\n */\n\n\nfunction groupChildrenByFirstChild(children) {\n  const result = [];\n  let i = children.length - 1;\n\n  while (i > 0) {\n    const child = children[i];\n\n    if (child.keyword === 'anyOf' || child.keyword === 'oneOf') {\n      const refs = extractRefs(child);\n      const childrenStart = findAllChildren(children.slice(0, i), refs.concat(child.schemaPath));\n\n      if (childrenStart !== i) {\n        result.push(Object.assign({}, child, {\n          children: children.slice(childrenStart, i)\n        }));\n        i = childrenStart;\n      } else {\n        result.push(child);\n      }\n    } else {\n      result.push(child);\n    }\n\n    i -= 1;\n  }\n\n  if (i === 0) {\n    result.push(children[i]);\n  }\n\n  return result.reverse();\n}\n/**\n * @param {string} str\n * @param {string} prefix\n * @returns {string}\n */\n\n\nfunction indent(str, prefix) {\n  return str.replace(/\\n(?!$)/g, `\\n${prefix}`);\n}\n/**\n * @param {any} maybeObj\n * @returns {boolean}\n */\n\n\nfunction isObject(maybeObj) {\n  return typeof maybeObj === 'object' && maybeObj !== null;\n}\n/**\n * @param {Schema} schema\n * @returns {boolean}\n */\n\n\nfunction likeNumber(schema) {\n  return schema.type === 'number' || typeof schema.minimum !== 'undefined' || typeof schema.exclusiveMinimum !== 'undefined' || typeof schema.maximum !== 'undefined' || typeof schema.exclusiveMaximum !== 'undefined' || typeof schema.multipleOf !== 'undefined';\n}\n/**\n * @param {Schema} schema\n * @returns {boolean}\n */\n\n\nfunction likeInteger(schema) {\n  return schema.type === 'integer' || typeof schema.minimum !== 'undefined' || typeof schema.exclusiveMinimum !== 'undefined' || typeof schema.maximum !== 'undefined' || typeof schema.exclusiveMaximum !== 'undefined' || typeof schema.multipleOf !== 'undefined';\n}\n/**\n * @param {Schema & {formatMinimum?: string; formatMaximum?: string;}} schema\n * @returns {boolean}\n */\n\n\nfunction likeString(schema) {\n  return schema.type === 'string' || typeof schema.minLength !== 'undefined' || typeof schema.maxLength !== 'undefined' || typeof schema.pattern !== 'undefined' || typeof schema.format !== 'undefined' || typeof schema.formatMinimum !== 'undefined' || typeof schema.formatMaximum !== 'undefined';\n}\n/**\n * @param {Schema} schema\n * @returns {boolean}\n */\n\n\nfunction likeBoolean(schema) {\n  return schema.type === 'boolean';\n}\n/**\n * @param {Schema} schema\n * @returns {boolean}\n */\n\n\nfunction likeArray(schema) {\n  return schema.type === 'array' || typeof schema.minItems === 'number' || typeof schema.maxItems === 'number' || typeof schema.uniqueItems !== 'undefined' || typeof schema.items !== 'undefined' || typeof schema.additionalItems !== 'undefined' || typeof schema.contains !== 'undefined';\n}\n/**\n * @param {Schema & {patternRequired?: Array<string>}} schema\n * @returns {boolean}\n */\n\n\nfunction likeObject(schema) {\n  return schema.type === 'object' || typeof schema.minProperties !== 'undefined' || typeof schema.maxProperties !== 'undefined' || typeof schema.required !== 'undefined' || typeof schema.properties !== 'undefined' || typeof schema.patternProperties !== 'undefined' || typeof schema.additionalProperties !== 'undefined' || typeof schema.dependencies !== 'undefined' || typeof schema.propertyNames !== 'undefined' || typeof schema.patternRequired !== 'undefined';\n}\n/**\n * @param {Schema} schema\n * @returns {boolean}\n */\n\n\nfunction likeNull(schema) {\n  return schema.type === 'null';\n}\n/**\n * @param {string} type\n * @returns {string}\n */\n\n\nfunction getArticle(type) {\n  if (/^[aeiou]/i.test(type)) {\n    return 'an';\n  }\n\n  return 'a';\n}\n/**\n * @param {Schema=} schema\n * @returns {string}\n */\n\n\nfunction getSchemaNonTypes(schema) {\n  if (!schema) {\n    return '';\n  }\n\n  if (!schema.type) {\n    if (likeNumber(schema) || likeInteger(schema)) {\n      return ' | should be any non-number';\n    }\n\n    if (likeString(schema)) {\n      return ' | should be any non-string';\n    }\n\n    if (likeArray(schema)) {\n      return ' | should be any non-array';\n    }\n\n    if (likeObject(schema)) {\n      return ' | should be any non-object';\n    }\n  }\n\n  return '';\n}\n/**\n * @param {Schema=} schema\n * @returns {Array<string>}\n */\n\n\nfunction numberHints(schema) {\n  if (!schema) {\n    return [];\n  }\n\n  const hints = [];\n  const range = new Range();\n\n  if (typeof schema.minimum === 'number') {\n    range.left(schema.minimum);\n  }\n\n  if (typeof schema.exclusiveMinimum === 'number') {\n    range.left(schema.exclusiveMinimum, true);\n  }\n\n  if (typeof schema.maximum === 'number') {\n    range.right(schema.maximum);\n  }\n\n  if (typeof schema.exclusiveMaximum === 'number') {\n    range.right(schema.exclusiveMaximum, true);\n  }\n\n  const rangeFormat = range.format();\n\n  if (rangeFormat) {\n    hints.push(rangeFormat);\n  }\n\n  if (typeof schema.multipleOf === 'number') {\n    hints.push(`should be multiple of ${schema.multipleOf}`);\n  }\n\n  return hints;\n}\n/**\n * @param {Array<string>} hints\n * @returns {string}\n */\n\n\nfunction formatHints(hints) {\n  return hints.length > 0 ? `(${hints.join(', ')})` : '';\n}\n/**\n * @param {Schema} schema\n * @returns {string}\n */\n\n\nfunction getHints(schema) {\n  if (likeNumber(schema) || likeInteger(schema)) {\n    return formatHints(numberHints(schema));\n  }\n\n  return '';\n}\n\nclass ValidationError extends Error {\n  /**\n   * @param {Array<SchemaUtilErrorObject>} errors\n   * @param {Schema} schema\n   * @param {ValidationErrorConfiguration} configuration\n   */\n  constructor(errors, schema, configuration = {}) {\n    super();\n    /** @type {string} */\n\n    this.name = 'ValidationError';\n    /** @type {Array<SchemaUtilErrorObject>} */\n\n    this.errors = errors;\n    /** @type {Schema} */\n\n    this.schema = schema;\n    let headerNameFromSchema;\n    let baseDataPathFromSchema;\n\n    if (schema.title && (!configuration.name || !configuration.baseDataPath)) {\n      const splittedTitleFromSchema = schema.title.match(/^(.+) (.+)$/);\n\n      if (splittedTitleFromSchema) {\n        if (!configuration.name) {\n          [, headerNameFromSchema] = splittedTitleFromSchema;\n        }\n\n        if (!configuration.baseDataPath) {\n          [,, baseDataPathFromSchema] = splittedTitleFromSchema;\n        }\n      }\n    }\n    /** @type {string} */\n\n\n    this.headerName = configuration.name || headerNameFromSchema || 'Object';\n    /** @type {string} */\n\n    this.baseDataPath = configuration.baseDataPath || baseDataPathFromSchema || 'configuration';\n    /** @type {PostFormatter | null} */\n\n    this.postFormatter = configuration.postFormatter || null;\n    const header = `Invalid ${this.baseDataPath} object. ${this.headerName} has been initialized using ${getArticle(this.baseDataPath)} ${this.baseDataPath} object that does not match the API schema.\\n`;\n    /** @type {string} */\n\n    this.message = `${header}${this.formatValidationErrors(errors)}`;\n    Error.captureStackTrace(this, this.constructor);\n  }\n  /**\n   * @param {string} path\n   * @returns {Schema}\n   */\n\n\n  getSchemaPart(path) {\n    const newPath = path.split('/');\n    let schemaPart = this.schema;\n\n    for (let i = 1; i < newPath.length; i++) {\n      const inner = schemaPart[\n      /** @type {keyof Schema} */\n      newPath[i]];\n\n      if (!inner) {\n        break;\n      }\n\n      schemaPart = inner;\n    }\n\n    return schemaPart;\n  }\n  /**\n   * @param {Schema} schema\n   * @param {Array<Object>} prevSchemas\n   * @returns {string}\n   */\n\n\n  formatSchema(schema, prevSchemas = []) {\n    const formatInnerSchema =\n    /**\n     *\n     * @param {Object} innerSchema\n     * @param {boolean=} addSelf\n     * @returns {string}\n     */\n    (innerSchema, addSelf) => {\n      if (!addSelf) {\n        return this.formatSchema(innerSchema, prevSchemas);\n      }\n\n      if (prevSchemas.includes(innerSchema)) {\n        return '(recursive)';\n      }\n\n      return this.formatSchema(innerSchema, prevSchemas.concat(schema));\n    };\n\n    if (schema.not && !likeObject(schema)) {\n      return `non ${formatInnerSchema(schema.not)}`;\n    }\n\n    if (\n    /** @type {Schema & {instanceof: string | Array<string>}} */\n    schema.instanceof) {\n      const {\n        instanceof: value\n      } =\n      /** @type {Schema & {instanceof: string | Array<string>}} */\n      schema;\n      const values = !Array.isArray(value) ? [value] : value;\n      return values.map(\n      /**\n       * @param {string} item\n       * @returns {string}\n       */\n      item => item === 'Function' ? 'function' : item).join(' | ');\n    }\n\n    if (schema.enum) {\n      return (\n        /** @type {Array<any>} */\n        schema.enum.map(item => JSON.stringify(item)).join(' | ')\n      );\n    }\n\n    if (typeof schema.const !== 'undefined') {\n      return JSON.stringify(schema.const);\n    }\n\n    if (schema.oneOf) {\n      return (\n        /** @type {Array<Schema>} */\n        schema.oneOf.map(item => formatInnerSchema(item, true)).join(' | ')\n      );\n    }\n\n    if (schema.anyOf) {\n      return (\n        /** @type {Array<Schema>} */\n        schema.anyOf.map(item => formatInnerSchema(item, true)).join(' | ')\n      );\n    }\n\n    if (schema.allOf) {\n      return (\n        /** @type {Array<Schema>} */\n        schema.allOf.map(item => formatInnerSchema(item, true)).join(' & ')\n      );\n    }\n\n    if (\n    /** @type {JSONSchema7} */\n    schema.if) {\n      const {\n        if: ifValue,\n        then: thenValue,\n        else: elseValue\n      } =\n      /** @type {JSONSchema7} */\n      schema;\n      return `${ifValue ? `if ${formatInnerSchema(ifValue)}` : ''}${thenValue ? ` then ${formatInnerSchema(thenValue)}` : ''}${elseValue ? ` else ${formatInnerSchema(elseValue)}` : ''}`;\n    }\n\n    if (schema.$ref) {\n      return formatInnerSchema(this.getSchemaPart(schema.$ref), true);\n    }\n\n    if (likeNumber(schema) || likeInteger(schema)) {\n      const type = schema.type === 'integer' ? 'integer' : 'number';\n      const hints = getHints(schema);\n      return `${type}${hints.length > 0 ? ` ${hints}` : ''}`;\n    }\n\n    if (likeString(schema)) {\n      let type = 'string';\n      const hints = [];\n\n      if (typeof schema.minLength === 'number') {\n        if (schema.minLength === 1) {\n          type = 'non-empty string';\n        } else if (schema.minLength !== 0) {\n          /* if min length === 0 it does not make hint for user */\n          const length = schema.minLength - 1;\n          hints.push(`should be longer than ${length} character${length > 1 ? 's' : ''}`);\n        }\n      }\n\n      if (typeof schema.maxLength === 'number') {\n        if (schema.maxLength === 0) {\n          type = 'empty string';\n        } else {\n          hints.push(`should be shorter than ${schema.maxLength + 1} characters`);\n        }\n      }\n\n      if (schema.pattern) {\n        hints.push(`should match pattern ${JSON.stringify(schema.pattern)}`);\n      }\n\n      if (schema.format) {\n        hints.push(`should match format ${JSON.stringify(schema.format)}`);\n      }\n\n      if (\n      /** @type {Schema & {formatMinimum?: string; formatExclusiveMinimum?: boolean;}} */\n      schema.formatMinimum) {\n        const {\n          formatExclusiveMinimum,\n          formatMinimum\n        } =\n        /** @type {Schema & {formatMinimum?: string; formatExclusiveMinimum?: boolean;}} */\n        schema;\n        hints.push(`should be ${formatExclusiveMinimum ? '>' : '>='} ${JSON.stringify(formatMinimum)}`);\n      }\n\n      if (\n      /** @type {Schema & {formatMaximum?: string; formatExclusiveMaximum?: boolean;}} */\n      schema.formatMaximum) {\n        const {\n          formatExclusiveMaximum,\n          formatMaximum\n        } =\n        /** @type {Schema & {formatMaximum?: string; formatExclusiveMaximum?: boolean;}} */\n        schema;\n        hints.push(`should be ${formatExclusiveMaximum ? '<' : '<='} ${JSON.stringify(formatMaximum)}`);\n      }\n\n      return `${type}${hints.length > 0 ? ` (${hints.join(', ')})` : ''}`;\n    }\n\n    if (likeBoolean(schema)) {\n      return 'boolean';\n    }\n\n    if (likeArray(schema)) {\n      const hints = [];\n\n      if (typeof schema.minItems === 'number') {\n        hints.push(`should not have fewer than ${schema.minItems} item${schema.minItems > 1 ? 's' : ''}`);\n      }\n\n      if (typeof schema.maxItems === 'number') {\n        hints.push(`should not have more than ${schema.maxItems} item${schema.maxItems > 1 ? 's' : ''}`);\n      }\n\n      if (schema.uniqueItems) {\n        hints.push('should not have duplicate items');\n      }\n\n      const hasAdditionalItems = typeof schema.additionalItems === 'undefined' || Boolean(schema.additionalItems);\n      let items = '';\n\n      if (schema.items) {\n        if (Array.isArray(schema.items) && schema.items.length > 0) {\n          items = `${\n          /** @type {Array<Schema>} */\n          schema.items.map(item => formatInnerSchema(item)).join(', ')}`;\n\n          if (hasAdditionalItems) {\n            if (schema.additionalItems && isObject(schema.additionalItems) && Object.keys(schema.additionalItems).length > 0) {\n              hints.push(`additional items should be ${formatInnerSchema(schema.additionalItems)}`);\n            }\n          }\n        } else if (schema.items && Object.keys(schema.items).length > 0) {\n          // \"additionalItems\" is ignored\n          items = `${formatInnerSchema(schema.items)}`;\n        } else {\n          // Fallback for empty `items` value\n          items = 'any';\n        }\n      } else {\n        // \"additionalItems\" is ignored\n        items = 'any';\n      }\n\n      if (schema.contains && Object.keys(schema.contains).length > 0) {\n        hints.push(`should contains at least one ${this.formatSchema(schema.contains)} item`);\n      }\n\n      return `[${items}${hasAdditionalItems ? ', ...' : ''}]${hints.length > 0 ? ` (${hints.join(', ')})` : ''}`;\n    }\n\n    if (likeObject(schema)) {\n      const hints = [];\n\n      if (typeof schema.minProperties === 'number') {\n        hints.push(`should not have fewer than ${schema.minProperties} ${schema.minProperties > 1 ? 'properties' : 'property'}`);\n      }\n\n      if (typeof schema.maxProperties === 'number') {\n        hints.push(`should not have more than ${schema.maxProperties} ${schema.minProperties && schema.minProperties > 1 ? 'properties' : 'property'}`);\n      }\n\n      if (schema.patternProperties && Object.keys(schema.patternProperties).length > 0) {\n        const patternProperties = Object.keys(schema.patternProperties);\n        hints.push(`additional property names should match pattern${patternProperties.length > 1 ? 's' : ''} ${patternProperties.map(pattern => JSON.stringify(pattern)).join(' | ')}`);\n      }\n\n      const properties = schema.properties ? Object.keys(schema.properties) : [];\n      const required = schema.required ? schema.required : [];\n      const allProperties = [...new Set(\n      /** @type {Array<string>} */\n      [].concat(required).concat(properties))];\n      const objectStructure = allProperties.map(property => {\n        const isRequired = required.includes(property); // Some properties need quotes, maybe we should add check\n        // Maybe we should output type of property (`foo: string`), but it is looks very unreadable\n\n        return `${property}${isRequired ? '' : '?'}`;\n      }).concat(typeof schema.additionalProperties === 'undefined' || Boolean(schema.additionalProperties) ? schema.additionalProperties && isObject(schema.additionalProperties) ? [`<key>: ${formatInnerSchema(schema.additionalProperties)}`] : ['…'] : []).join(', ');\n      const {\n        dependencies,\n        propertyNames,\n        patternRequired\n      } =\n      /** @type {Schema & {patternRequired?: Array<string>;}} */\n      schema;\n\n      if (dependencies) {\n        Object.keys(dependencies).forEach(dependencyName => {\n          const dependency = dependencies[dependencyName];\n\n          if (Array.isArray(dependency)) {\n            hints.push(`should have ${dependency.length > 1 ? 'properties' : 'property'} ${dependency.map(dep => `'${dep}'`).join(', ')} when property '${dependencyName}' is present`);\n          } else {\n            hints.push(`should be valid according to the schema ${formatInnerSchema(dependency)} when property '${dependencyName}' is present`);\n          }\n        });\n      }\n\n      if (propertyNames && Object.keys(propertyNames).length > 0) {\n        hints.push(`each property name should match format ${JSON.stringify(schema.propertyNames.format)}`);\n      }\n\n      if (patternRequired && patternRequired.length > 0) {\n        hints.push(`should have property matching pattern ${patternRequired.map(\n        /**\n         * @param {string} item\n         * @returns {string}\n         */\n        item => JSON.stringify(item))}`);\n      }\n\n      return `object {${objectStructure ? ` ${objectStructure} ` : ''}}${hints.length > 0 ? ` (${hints.join(', ')})` : ''}`;\n    }\n\n    if (likeNull(schema)) {\n      return 'null';\n    }\n\n    if (Array.isArray(schema.type)) {\n      return `${schema.type.join(' | ')}`;\n    } // Fallback for unknown keywords\n\n    /* istanbul ignore next */\n\n\n    return JSON.stringify(schema, null, 2);\n  }\n  /**\n   * @param {Schema=} schemaPart\n   * @param {(boolean | Array<string>)=} additionalPath\n   * @param {boolean=} needDot\n   * @returns {string}\n   */\n\n\n  getSchemaPartText(schemaPart, additionalPath, needDot = false) {\n    if (!schemaPart) {\n      return '';\n    }\n\n    if (Array.isArray(additionalPath)) {\n      for (let i = 0; i < additionalPath.length; i++) {\n        /** @type {Schema | undefined} */\n        const inner = schemaPart[\n        /** @type {keyof Schema} */\n        additionalPath[i]];\n\n        if (inner) {\n          // eslint-disable-next-line no-param-reassign\n          schemaPart = inner;\n        } else {\n          break;\n        }\n      }\n    }\n\n    while (schemaPart.$ref) {\n      // eslint-disable-next-line no-param-reassign\n      schemaPart = this.getSchemaPart(schemaPart.$ref);\n    }\n\n    let schemaText = `${this.formatSchema(schemaPart)}${needDot ? '.' : ''}`;\n\n    if (schemaPart.description) {\n      schemaText += `\\n-> ${schemaPart.description}`;\n    }\n\n    return schemaText;\n  }\n  /**\n   * @param {Schema=} schemaPart\n   * @returns {string}\n   */\n\n\n  getSchemaPartDescription(schemaPart) {\n    if (!schemaPart) {\n      return '';\n    }\n\n    while (schemaPart.$ref) {\n      // eslint-disable-next-line no-param-reassign\n      schemaPart = this.getSchemaPart(schemaPart.$ref);\n    }\n\n    if (schemaPart.description) {\n      return `\\n-> ${schemaPart.description}`;\n    }\n\n    return '';\n  }\n  /**\n   * @param {SchemaUtilErrorObject} error\n   * @returns {string}\n   */\n\n\n  formatValidationError(error) {\n    const {\n      keyword,\n      dataPath: errorDataPath\n    } = error;\n    const dataPath = `${this.baseDataPath}${errorDataPath}`;\n\n    switch (keyword) {\n      case 'type':\n        {\n          const {\n            parentSchema,\n            params\n          } = error; // eslint-disable-next-line default-case\n\n          switch (\n          /** @type {import(\"ajv\").TypeParams} */\n          params.type) {\n            case 'number':\n              return `${dataPath} should be a ${this.getSchemaPartText(parentSchema, false, true)}`;\n\n            case 'integer':\n              return `${dataPath} should be a ${this.getSchemaPartText(parentSchema, false, true)}`;\n\n            case 'string':\n              return `${dataPath} should be a ${this.getSchemaPartText(parentSchema, false, true)}`;\n\n            case 'boolean':\n              return `${dataPath} should be a ${this.getSchemaPartText(parentSchema, false, true)}`;\n\n            case 'array':\n              return `${dataPath} should be an array:\\n${this.getSchemaPartText(parentSchema)}`;\n\n            case 'object':\n              return `${dataPath} should be an object:\\n${this.getSchemaPartText(parentSchema)}`;\n\n            case 'null':\n              return `${dataPath} should be a ${this.getSchemaPartText(parentSchema, false, true)}`;\n\n            default:\n              return `${dataPath} should be:\\n${this.getSchemaPartText(parentSchema)}`;\n          }\n        }\n\n      case 'instanceof':\n        {\n          const {\n            parentSchema\n          } = error;\n          return `${dataPath} should be an instance of ${this.getSchemaPartText(parentSchema, false, true)}`;\n        }\n\n      case 'pattern':\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            pattern\n          } =\n          /** @type {import(\"ajv\").PatternParams} */\n          params;\n          return `${dataPath} should match pattern ${JSON.stringify(pattern)}${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case 'format':\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            format\n          } =\n          /** @type {import(\"ajv\").FormatParams} */\n          params;\n          return `${dataPath} should match format ${JSON.stringify(format)}${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case 'formatMinimum':\n      case 'formatMaximum':\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            comparison,\n            limit\n          } =\n          /** @type {import(\"ajv\").ComparisonParams} */\n          params;\n          return `${dataPath} should be ${comparison} ${JSON.stringify(limit)}${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case 'minimum':\n      case 'maximum':\n      case 'exclusiveMinimum':\n      case 'exclusiveMaximum':\n        {\n          const {\n            parentSchema,\n            params\n          } = error;\n          const {\n            comparison,\n            limit\n          } =\n          /** @type {import(\"ajv\").ComparisonParams} */\n          params;\n          const hints = numberHints(parentSchema);\n\n          if (hints.length === 0) {\n            hints.push(`should be ${comparison} ${limit}`);\n          }\n\n          return `${dataPath} ${hints.join(' ')}${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case 'multipleOf':\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            multipleOf\n          } =\n          /** @type {import(\"ajv\").MultipleOfParams} */\n          params;\n          return `${dataPath} should be multiple of ${multipleOf}${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case 'patternRequired':\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            missingPattern\n          } =\n          /** @type {import(\"ajv\").PatternRequiredParams} */\n          params;\n          return `${dataPath} should have property matching pattern ${JSON.stringify(missingPattern)}${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case 'minLength':\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            limit\n          } =\n          /** @type {import(\"ajv\").LimitParams} */\n          params;\n\n          if (limit === 1) {\n            return `${dataPath} should be an non-empty string${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n          }\n\n          const length = limit - 1;\n          return `${dataPath} should be longer than ${length} character${length > 1 ? 's' : ''}${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case 'minItems':\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            limit\n          } =\n          /** @type {import(\"ajv\").LimitParams} */\n          params;\n\n          if (limit === 1) {\n            return `${dataPath} should be an non-empty array${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n          }\n\n          return `${dataPath} should not have fewer than ${limit} items${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case 'minProperties':\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            limit\n          } =\n          /** @type {import(\"ajv\").LimitParams} */\n          params;\n\n          if (limit === 1) {\n            return `${dataPath} should be an non-empty object${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n          }\n\n          return `${dataPath} should not have fewer than ${limit} properties${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case 'maxLength':\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            limit\n          } =\n          /** @type {import(\"ajv\").LimitParams} */\n          params;\n          return `${dataPath} should be shorter than ${limit + 1} characters${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case 'maxItems':\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            limit\n          } =\n          /** @type {import(\"ajv\").LimitParams} */\n          params;\n          return `${dataPath} should not have more than ${limit} items${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case 'maxProperties':\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            limit\n          } =\n          /** @type {import(\"ajv\").LimitParams} */\n          params;\n          return `${dataPath} should not have more than ${limit} properties${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case 'uniqueItems':\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            i\n          } =\n          /** @type {import(\"ajv\").UniqueItemsParams} */\n          params;\n          return `${dataPath} should not contain the item '${error.data[i]}' twice${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case 'additionalItems':\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            limit\n          } =\n          /** @type {import(\"ajv\").LimitParams} */\n          params;\n          return `${dataPath} should not have more than ${limit} items${getSchemaNonTypes(parentSchema)}. These items are valid:\\n${this.getSchemaPartText(parentSchema)}`;\n        }\n\n      case 'contains':\n        {\n          const {\n            parentSchema\n          } = error;\n          return `${dataPath} should contains at least one ${this.getSchemaPartText(parentSchema, ['contains'])} item${getSchemaNonTypes(parentSchema)}.`;\n        }\n\n      case 'required':\n        {\n          const {\n            parentSchema,\n            params\n          } = error;\n          const missingProperty =\n          /** @type {import(\"ajv\").DependenciesParams} */\n          params.missingProperty.replace(/^\\./, '');\n          const hasProperty = parentSchema && Boolean(\n          /** @type {Schema} */\n          parentSchema.properties &&\n          /** @type {Schema} */\n          parentSchema.properties[missingProperty]);\n          return `${dataPath} misses the property '${missingProperty}'${getSchemaNonTypes(parentSchema)}.${hasProperty ? ` Should be:\\n${this.getSchemaPartText(parentSchema, ['properties', missingProperty])}` : this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case 'additionalProperties':\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            additionalProperty\n          } =\n          /** @type {import(\"ajv\").AdditionalPropertiesParams} */\n          params;\n          return `${dataPath} has an unknown property '${additionalProperty}'${getSchemaNonTypes(parentSchema)}. These properties are valid:\\n${this.getSchemaPartText(parentSchema)}`;\n        }\n\n      case 'dependencies':\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            property,\n            deps\n          } =\n          /** @type {import(\"ajv\").DependenciesParams} */\n          params;\n          const dependencies = deps.split(',').map(\n          /**\n           * @param {string} dep\n           * @returns {string}\n           */\n          dep => `'${dep.trim()}'`).join(', ');\n          return `${dataPath} should have properties ${dependencies} when property '${property}' is present${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case 'propertyNames':\n        {\n          const {\n            params,\n            parentSchema,\n            schema\n          } = error;\n          const {\n            propertyName\n          } =\n          /** @type {import(\"ajv\").PropertyNamesParams} */\n          params;\n          return `${dataPath} property name '${propertyName}' is invalid${getSchemaNonTypes(parentSchema)}. Property names should be match format ${JSON.stringify(schema.format)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case 'enum':\n        {\n          const {\n            parentSchema\n          } = error;\n\n          if (parentSchema &&\n          /** @type {Schema} */\n          parentSchema.enum &&\n          /** @type {Schema} */\n          parentSchema.enum.length === 1) {\n            return `${dataPath} should be ${this.getSchemaPartText(parentSchema, false, true)}`;\n          }\n\n          return `${dataPath} should be one of these:\\n${this.getSchemaPartText(parentSchema)}`;\n        }\n\n      case 'const':\n        {\n          const {\n            parentSchema\n          } = error;\n          return `${dataPath} should be equal to constant ${this.getSchemaPartText(parentSchema, false, true)}`;\n        }\n\n      case 'not':\n        {\n          const {\n            schema,\n            parentSchema\n          } = error;\n          return `${dataPath} should not be ${this.getSchemaPartText(schema, false, true)}${parentSchema && likeObject(parentSchema) ? `\\n${this.getSchemaPartText(parentSchema)}` : ''}`;\n        }\n\n      case 'oneOf':\n      case 'anyOf':\n        {\n          const {\n            parentSchema,\n            children\n          } = error;\n\n          if (children && children.length > 0) {\n            if (error.schema.length === 1) {\n              const lastChild = children[children.length - 1];\n              const remainingChildren = children.slice(0, children.length - 1);\n              return this.formatValidationError(Object.assign({}, lastChild, {\n                children: remainingChildren,\n                parentSchema: Object.assign({}, parentSchema, lastChild.parentSchema)\n              }));\n            }\n\n            let filteredChildren = filterChildren(children);\n\n            if (filteredChildren.length === 1) {\n              return this.formatValidationError(filteredChildren[0]);\n            }\n\n            filteredChildren = groupChildrenByFirstChild(filteredChildren);\n            return `${dataPath} should be one of these:\\n${this.getSchemaPartText(parentSchema)}\\nDetails:\\n${filteredChildren.map(\n            /**\n             * @param {SchemaUtilErrorObject} nestedError\n             * @returns {string}\n             */\n            nestedError => ` * ${indent(this.formatValidationError(nestedError), '   ')}`).join('\\n')}`;\n          }\n\n          return `${dataPath} should be one of these:\\n${this.getSchemaPartText(parentSchema)}`;\n        }\n\n      case 'if':\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            failingKeyword\n          } =\n          /** @type {import(\"ajv\").IfParams} */\n          params;\n          return `${dataPath} should match \"${failingKeyword}\" schema:\\n${this.getSchemaPartText(parentSchema, [failingKeyword])}`;\n        }\n\n      case 'absolutePath':\n        {\n          const {\n            message,\n            parentSchema\n          } = error;\n          return `${dataPath}: ${message}${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      /* istanbul ignore next */\n\n      default:\n        {\n          const {\n            message,\n            parentSchema\n          } = error;\n          const ErrorInJSON = JSON.stringify(error, null, 2); // For `custom`, `false schema`, `$ref` keywords\n          // Fallback for unknown keywords\n\n          return `${dataPath} ${message} (${ErrorInJSON}).\\n${this.getSchemaPartText(parentSchema, false)}`;\n        }\n    }\n  }\n  /**\n   * @param {Array<SchemaUtilErrorObject>} errors\n   * @returns {string}\n   */\n\n\n  formatValidationErrors(errors) {\n    return errors.map(error => {\n      let formattedError = this.formatValidationError(error);\n\n      if (this.postFormatter) {\n        formattedError = this.postFormatter(formattedError, error);\n      }\n\n      return ` - ${indent(formattedError, '   ')}`;\n    }).join('\\n');\n  }\n\n}\n\nvar _default = ValidationError;\nexports.default = _default;","\"use strict\";\n\nconst validate = require('./validate');\n\nmodule.exports = validate.default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n/** @typedef {import(\"ajv\").Ajv} Ajv */\n\n/** @typedef {import(\"ajv\").ValidateFunction} ValidateFunction */\n\n/** @typedef {import(\"../validate\").SchemaUtilErrorObject} SchemaUtilErrorObject */\n\n/**\n * @param {string} message\n * @param {object} schema\n * @param {string} data\n * @returns {SchemaUtilErrorObject}\n */\nfunction errorMessage(message, schema, data) {\n  return {\n    // @ts-ignore\n    // eslint-disable-next-line no-undefined\n    dataPath: undefined,\n    // @ts-ignore\n    // eslint-disable-next-line no-undefined\n    schemaPath: undefined,\n    keyword: 'absolutePath',\n    params: {\n      absolutePath: data\n    },\n    message,\n    parentSchema: schema\n  };\n}\n/**\n * @param {boolean} shouldBeAbsolute\n * @param {object} schema\n * @param {string} data\n * @returns {SchemaUtilErrorObject}\n */\n\n\nfunction getErrorFor(shouldBeAbsolute, schema, data) {\n  const message = shouldBeAbsolute ? `The provided value ${JSON.stringify(data)} is not an absolute path!` : `A relative path is expected. However, the provided value ${JSON.stringify(data)} is an absolute path!`;\n  return errorMessage(message, schema, data);\n}\n/**\n *\n * @param {Ajv} ajv\n * @returns {Ajv}\n */\n\n\nfunction addAbsolutePathKeyword(ajv) {\n  ajv.addKeyword('absolutePath', {\n    errors: true,\n    type: 'string',\n\n    compile(schema, parentSchema) {\n      /** @type {ValidateFunction} */\n      const callback = data => {\n        let passes = true;\n        const isExclamationMarkPresent = data.includes('!');\n\n        if (isExclamationMarkPresent) {\n          callback.errors = [errorMessage(`The provided value ${JSON.stringify(data)} contains exclamation mark (!) which is not allowed because it's reserved for loader syntax.`, parentSchema, data)];\n          passes = false;\n        } // ?:[A-Za-z]:\\\\ - Windows absolute path\n        // \\\\\\\\ - Windows network absolute path\n        // \\/ - Unix-like OS absolute path\n\n\n        const isCorrectAbsolutePath = schema === /^(?:[A-Za-z]:(\\\\|\\/)|\\\\\\\\|\\/)/.test(data);\n\n        if (!isCorrectAbsolutePath) {\n          callback.errors = [getErrorFor(schema, parentSchema, data)];\n          passes = false;\n        }\n\n        return passes;\n      };\n\n      callback.errors = [];\n      return callback;\n    }\n\n  });\n  return ajv;\n}\n\nvar _default = addAbsolutePathKeyword;\nexports.default = _default;","\"use strict\";\n\n/**\n * @typedef {[number, boolean]} RangeValue\n */\n\n/**\n * @callback RangeValueCallback\n * @param {RangeValue} rangeValue\n * @returns {boolean}\n */\nclass Range {\n  /**\n   * @param {\"left\" | \"right\"} side\n   * @param {boolean} exclusive\n   * @returns {\">\" | \">=\" | \"<\" | \"<=\"}\n   */\n  static getOperator(side, exclusive) {\n    if (side === 'left') {\n      return exclusive ? '>' : '>=';\n    }\n\n    return exclusive ? '<' : '<=';\n  }\n  /**\n   * @param {number} value\n   * @param {boolean} logic is not logic applied\n   * @param {boolean} exclusive is range exclusive\n   * @returns {string}\n   */\n\n\n  static formatRight(value, logic, exclusive) {\n    if (logic === false) {\n      return Range.formatLeft(value, !logic, !exclusive);\n    }\n\n    return `should be ${Range.getOperator('right', exclusive)} ${value}`;\n  }\n  /**\n   * @param {number} value\n   * @param {boolean} logic is not logic applied\n   * @param {boolean} exclusive is range exclusive\n   * @returns {string}\n   */\n\n\n  static formatLeft(value, logic, exclusive) {\n    if (logic === false) {\n      return Range.formatRight(value, !logic, !exclusive);\n    }\n\n    return `should be ${Range.getOperator('left', exclusive)} ${value}`;\n  }\n  /**\n   * @param {number} start left side value\n   * @param {number} end right side value\n   * @param {boolean} startExclusive is range exclusive from left side\n   * @param {boolean} endExclusive is range exclusive from right side\n   * @param {boolean} logic is not logic applied\n   * @returns {string}\n   */\n\n\n  static formatRange(start, end, startExclusive, endExclusive, logic) {\n    let result = 'should be';\n    result += ` ${Range.getOperator(logic ? 'left' : 'right', logic ? startExclusive : !startExclusive)} ${start} `;\n    result += logic ? 'and' : 'or';\n    result += ` ${Range.getOperator(logic ? 'right' : 'left', logic ? endExclusive : !endExclusive)} ${end}`;\n    return result;\n  }\n  /**\n   * @param {Array<RangeValue>} values\n   * @param {boolean} logic is not logic applied\n   * @return {RangeValue} computed value and it's exclusive flag\n   */\n\n\n  static getRangeValue(values, logic) {\n    let minMax = logic ? Infinity : -Infinity;\n    let j = -1;\n    const predicate = logic ?\n    /** @type {RangeValueCallback} */\n    ([value]) => value <= minMax :\n    /** @type {RangeValueCallback} */\n    ([value]) => value >= minMax;\n\n    for (let i = 0; i < values.length; i++) {\n      if (predicate(values[i])) {\n        [minMax] = values[i];\n        j = i;\n      }\n    }\n\n    if (j > -1) {\n      return values[j];\n    }\n\n    return [Infinity, true];\n  }\n\n  constructor() {\n    /** @type {Array<RangeValue>} */\n    this._left = [];\n    /** @type {Array<RangeValue>} */\n\n    this._right = [];\n  }\n  /**\n   * @param {number} value\n   * @param {boolean=} exclusive\n   */\n\n\n  left(value, exclusive = false) {\n    this._left.push([value, exclusive]);\n  }\n  /**\n   * @param {number} value\n   * @param {boolean=} exclusive\n   */\n\n\n  right(value, exclusive = false) {\n    this._right.push([value, exclusive]);\n  }\n  /**\n   * @param {boolean} logic is not logic applied\n   * @return {string} \"smart\" range string representation\n   */\n\n\n  format(logic = true) {\n    const [start, leftExclusive] = Range.getRangeValue(this._left, logic);\n    const [end, rightExclusive] = Range.getRangeValue(this._right, !logic);\n\n    if (!Number.isFinite(start) && !Number.isFinite(end)) {\n      return '';\n    }\n\n    const realStart = leftExclusive ? start + 1 : start;\n    const realEnd = rightExclusive ? end - 1 : end; // e.g. 5 < x < 7, 5 < x <= 6, 6 <= x <= 6\n\n    if (realStart === realEnd) {\n      return `should be ${logic ? '' : '!'}= ${realStart}`;\n    } // e.g. 4 < x < ∞\n\n\n    if (Number.isFinite(start) && !Number.isFinite(end)) {\n      return Range.formatLeft(start, logic, leftExclusive);\n    } // e.g. ∞ < x < 4\n\n\n    if (!Number.isFinite(start) && Number.isFinite(end)) {\n      return Range.formatRight(end, logic, rightExclusive);\n    }\n\n    return Range.formatRange(start, end, leftExclusive, rightExclusive, logic);\n  }\n\n}\n\nmodule.exports = Range;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _ajv = _interopRequireDefault(require(\"ajv\"));\n\nvar _ajvKeywords = _interopRequireDefault(require(\"ajv-keywords\"));\n\nvar _absolutePath = _interopRequireDefault(require(\"./keywords/absolutePath\"));\n\nvar _ValidationError = _interopRequireDefault(require(\"./ValidationError\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/** @typedef {import(\"json-schema\").JSONSchema4} JSONSchema4 */\n\n/** @typedef {import(\"json-schema\").JSONSchema6} JSONSchema6 */\n\n/** @typedef {import(\"json-schema\").JSONSchema7} JSONSchema7 */\n\n/** @typedef {import(\"ajv\").ErrorObject} ErrorObject */\n\n/** @typedef {(JSONSchema4 | JSONSchema6 | JSONSchema7)} Schema */\n\n/** @typedef {ErrorObject & { children?: Array<ErrorObject>}} SchemaUtilErrorObject */\n\n/**\n * @callback PostFormatter\n * @param {string} formattedError\n * @param {SchemaUtilErrorObject} error\n * @returns {string}\n */\n\n/**\n * @typedef {Object} ValidationErrorConfiguration\n * @property {string=} name\n * @property {string=} baseDataPath\n * @property {PostFormatter=} postFormatter\n */\nconst ajv = new _ajv.default({\n  allErrors: true,\n  verbose: true,\n  $data: true\n});\n(0, _ajvKeywords.default)(ajv, ['instanceof', 'formatMinimum', 'formatMaximum', 'patternRequired']); // Custom keywords\n\n(0, _absolutePath.default)(ajv);\n/**\n * @param {Schema} schema\n * @param {Array<object> | object} options\n * @param {ValidationErrorConfiguration=} configuration\n * @returns {void}\n */\n\nfunction validate(schema, options, configuration) {\n  let errors = [];\n\n  if (Array.isArray(options)) {\n    errors = Array.from(options, nestedOptions => validateObject(schema, nestedOptions));\n    errors.forEach((list, idx) => {\n      const applyPrefix =\n      /**\n       * @param {SchemaUtilErrorObject} error\n       */\n      error => {\n        // eslint-disable-next-line no-param-reassign\n        error.dataPath = `[${idx}]${error.dataPath}`;\n\n        if (error.children) {\n          error.children.forEach(applyPrefix);\n        }\n      };\n\n      list.forEach(applyPrefix);\n    });\n    errors = errors.reduce((arr, items) => {\n      arr.push(...items);\n      return arr;\n    }, []);\n  } else {\n    errors = validateObject(schema, options);\n  }\n\n  if (errors.length > 0) {\n    throw new _ValidationError.default(errors, schema, configuration);\n  }\n}\n/**\n * @param {Schema} schema\n * @param {Array<object> | object} options\n * @returns {Array<SchemaUtilErrorObject>}\n */\n\n\nfunction validateObject(schema, options) {\n  const compiledSchema = ajv.compile(schema);\n  const valid = compiledSchema(options);\n  if (valid) return [];\n  return compiledSchema.errors ? filterErrors(compiledSchema.errors) : [];\n}\n/**\n * @param {Array<ErrorObject>} errors\n * @returns {Array<SchemaUtilErrorObject>}\n */\n\n\nfunction filterErrors(errors) {\n  /** @type {Array<SchemaUtilErrorObject>} */\n  let newErrors = [];\n\n  for (const error of\n  /** @type {Array<SchemaUtilErrorObject>} */\n  errors) {\n    const {\n      dataPath\n    } = error;\n    /** @type {Array<SchemaUtilErrorObject>} */\n\n    let children = [];\n    newErrors = newErrors.filter(oldError => {\n      if (oldError.dataPath.includes(dataPath)) {\n        if (oldError.children) {\n          children = children.concat(oldError.children.slice(0));\n        } // eslint-disable-next-line no-undefined, no-param-reassign\n\n\n        oldError.children = undefined;\n        children.push(oldError);\n        return false;\n      }\n\n      return true;\n    });\n\n    if (children.length) {\n      error.children = children;\n    }\n\n    newErrors.push(error);\n  }\n\n  return newErrors;\n} // TODO change after resolve https://github.com/microsoft/TypeScript/issues/34994\n\n\nvalidate.ValidationError = _ValidationError.default;\nvalidate.ValidateError = _ValidationError.default;\nvar _default = validate;\nexports.default = _default;","'use strict'\nvar Buffer = require('safe-buffer').Buffer\nvar Transform = require('readable-stream').Transform\nvar inherits = require('inherits')\n\nfunction throwIfNotStringOrBuffer (val, prefix) {\n  if (!Buffer.isBuffer(val) && typeof val !== 'string') {\n    throw new TypeError(prefix + ' must be a string or a buffer')\n  }\n}\n\nfunction HashBase (blockSize) {\n  Transform.call(this)\n\n  this._block = Buffer.allocUnsafe(blockSize)\n  this._blockSize = blockSize\n  this._blockOffset = 0\n  this._length = [0, 0, 0, 0]\n\n  this._finalized = false\n}\n\ninherits(HashBase, Transform)\n\nHashBase.prototype._transform = function (chunk, encoding, callback) {\n  var error = null\n  try {\n    this.update(chunk, encoding)\n  } catch (err) {\n    error = err\n  }\n\n  callback(error)\n}\n\nHashBase.prototype._flush = function (callback) {\n  var error = null\n  try {\n    this.push(this.digest())\n  } catch (err) {\n    error = err\n  }\n\n  callback(error)\n}\n\nHashBase.prototype.update = function (data, encoding) {\n  throwIfNotStringOrBuffer(data, 'Data')\n  if (this._finalized) throw new Error('Digest already called')\n  if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding)\n\n  // consume data\n  var block = this._block\n  var offset = 0\n  while (this._blockOffset + data.length - offset >= this._blockSize) {\n    for (var i = this._blockOffset; i < this._blockSize;) block[i++] = data[offset++]\n    this._update()\n    this._blockOffset = 0\n  }\n  while (offset < data.length) block[this._blockOffset++] = data[offset++]\n\n  // update length\n  for (var j = 0, carry = data.length * 8; carry > 0; ++j) {\n    this._length[j] += carry\n    carry = (this._length[j] / 0x0100000000) | 0\n    if (carry > 0) this._length[j] -= 0x0100000000 * carry\n  }\n\n  return this\n}\n\nHashBase.prototype._update = function () {\n  throw new Error('_update is not implemented')\n}\n\nHashBase.prototype.digest = function (encoding) {\n  if (this._finalized) throw new Error('Digest already called')\n  this._finalized = true\n\n  var digest = this._digest()\n  if (encoding !== undefined) digest = digest.toString(encoding)\n\n  // reset state\n  this._block.fill(0)\n  this._blockOffset = 0\n  for (var i = 0; i < 4; ++i) this._length[i] = 0\n\n  return digest\n}\n\nHashBase.prototype._digest = function () {\n  throw new Error('_digest is not implemented')\n}\n\nmodule.exports = HashBase\n","'use strict';\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n\nvar codes = {};\n\nfunction createErrorType(code, message, Base) {\n  if (!Base) {\n    Base = Error;\n  }\n\n  function getMessage(arg1, arg2, arg3) {\n    if (typeof message === 'string') {\n      return message;\n    } else {\n      return message(arg1, arg2, arg3);\n    }\n  }\n\n  var NodeError =\n  /*#__PURE__*/\n  function (_Base) {\n    _inheritsLoose(NodeError, _Base);\n\n    function NodeError(arg1, arg2, arg3) {\n      return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;\n    }\n\n    return NodeError;\n  }(Base);\n\n  NodeError.prototype.name = Base.name;\n  NodeError.prototype.code = code;\n  codes[code] = NodeError;\n} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js\n\n\nfunction oneOf(expected, thing) {\n  if (Array.isArray(expected)) {\n    var len = expected.length;\n    expected = expected.map(function (i) {\n      return String(i);\n    });\n\n    if (len > 2) {\n      return \"one of \".concat(thing, \" \").concat(expected.slice(0, len - 1).join(', '), \", or \") + expected[len - 1];\n    } else if (len === 2) {\n      return \"one of \".concat(thing, \" \").concat(expected[0], \" or \").concat(expected[1]);\n    } else {\n      return \"of \".concat(thing, \" \").concat(expected[0]);\n    }\n  } else {\n    return \"of \".concat(thing, \" \").concat(String(expected));\n  }\n} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith\n\n\nfunction startsWith(str, search, pos) {\n  return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;\n} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith\n\n\nfunction endsWith(str, search, this_len) {\n  if (this_len === undefined || this_len > str.length) {\n    this_len = str.length;\n  }\n\n  return str.substring(this_len - search.length, this_len) === search;\n} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes\n\n\nfunction includes(str, search, start) {\n  if (typeof start !== 'number') {\n    start = 0;\n  }\n\n  if (start + search.length > str.length) {\n    return false;\n  } else {\n    return str.indexOf(search, start) !== -1;\n  }\n}\n\ncreateErrorType('ERR_INVALID_OPT_VALUE', function (name, value) {\n  return 'The value \"' + value + '\" is invalid for option \"' + name + '\"';\n}, TypeError);\ncreateErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {\n  // determiner: 'must be' or 'must not be'\n  var determiner;\n\n  if (typeof expected === 'string' && startsWith(expected, 'not ')) {\n    determiner = 'must not be';\n    expected = expected.replace(/^not /, '');\n  } else {\n    determiner = 'must be';\n  }\n\n  var msg;\n\n  if (endsWith(name, ' argument')) {\n    // For cases like 'first argument'\n    msg = \"The \".concat(name, \" \").concat(determiner, \" \").concat(oneOf(expected, 'type'));\n  } else {\n    var type = includes(name, '.') ? 'property' : 'argument';\n    msg = \"The \\\"\".concat(name, \"\\\" \").concat(type, \" \").concat(determiner, \" \").concat(oneOf(expected, 'type'));\n  }\n\n  msg += \". Received type \".concat(typeof actual);\n  return msg;\n}, TypeError);\ncreateErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');\ncreateErrorType('ERR_METHOD_NOT_IMPLEMENTED', function (name) {\n  return 'The ' + name + ' method is not implemented';\n});\ncreateErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');\ncreateErrorType('ERR_STREAM_DESTROYED', function (name) {\n  return 'Cannot call ' + name + ' after a stream was destroyed';\n});\ncreateErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');\ncreateErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');\ncreateErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');\ncreateErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);\ncreateErrorType('ERR_UNKNOWN_ENCODING', function (arg) {\n  return 'Unknown encoding: ' + arg;\n}, TypeError);\ncreateErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');\nmodule.exports.codes = codes;\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n// a duplex stream is just a stream that is both readable and writable.\n// Since JS doesn't have multiple prototypal inheritance, this class\n// prototypally inherits from Readable, and then parasitically from\n// Writable.\n'use strict';\n/*<replacement>*/\n\nvar objectKeys = Object.keys || function (obj) {\n  var keys = [];\n\n  for (var key in obj) {\n    keys.push(key);\n  }\n\n  return keys;\n};\n/*</replacement>*/\n\n\nmodule.exports = Duplex;\n\nvar Readable = require('./_stream_readable');\n\nvar Writable = require('./_stream_writable');\n\nrequire('inherits')(Duplex, Readable);\n\n{\n  // Allow the keys array to be GC'ed.\n  var keys = objectKeys(Writable.prototype);\n\n  for (var v = 0; v < keys.length; v++) {\n    var method = keys[v];\n    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];\n  }\n}\n\nfunction Duplex(options) {\n  if (!(this instanceof Duplex)) return new Duplex(options);\n  Readable.call(this, options);\n  Writable.call(this, options);\n  this.allowHalfOpen = true;\n\n  if (options) {\n    if (options.readable === false) this.readable = false;\n    if (options.writable === false) this.writable = false;\n\n    if (options.allowHalfOpen === false) {\n      this.allowHalfOpen = false;\n      this.once('end', onend);\n    }\n  }\n}\n\nObject.defineProperty(Duplex.prototype, 'writableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState.highWaterMark;\n  }\n});\nObject.defineProperty(Duplex.prototype, 'writableBuffer', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState && this._writableState.getBuffer();\n  }\n});\nObject.defineProperty(Duplex.prototype, 'writableLength', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState.length;\n  }\n}); // the no-half-open enforcer\n\nfunction onend() {\n  // If the writable side ended, then we're ok.\n  if (this._writableState.ended) return; // no more data can be written.\n  // But allow more writes to happen in this tick.\n\n  process.nextTick(onEndNT, this);\n}\n\nfunction onEndNT(self) {\n  self.end();\n}\n\nObject.defineProperty(Duplex.prototype, 'destroyed', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    if (this._readableState === undefined || this._writableState === undefined) {\n      return false;\n    }\n\n    return this._readableState.destroyed && this._writableState.destroyed;\n  },\n  set: function set(value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (this._readableState === undefined || this._writableState === undefined) {\n      return;\n    } // backward compatibility, the user is explicitly\n    // managing destroyed\n\n\n    this._readableState.destroyed = value;\n    this._writableState.destroyed = value;\n  }\n});","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n// a passthrough stream.\n// basically just the most minimal sort of Transform stream.\n// Every written chunk gets output as-is.\n'use strict';\n\nmodule.exports = PassThrough;\n\nvar Transform = require('./_stream_transform');\n\nrequire('inherits')(PassThrough, Transform);\n\nfunction PassThrough(options) {\n  if (!(this instanceof PassThrough)) return new PassThrough(options);\n  Transform.call(this, options);\n}\n\nPassThrough.prototype._transform = function (chunk, encoding, cb) {\n  cb(null, chunk);\n};","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n'use strict';\n\nmodule.exports = Readable;\n/*<replacement>*/\n\nvar Duplex;\n/*</replacement>*/\n\nReadable.ReadableState = ReadableState;\n/*<replacement>*/\n\nvar EE = require('events').EventEmitter;\n\nvar EElistenerCount = function EElistenerCount(emitter, type) {\n  return emitter.listeners(type).length;\n};\n/*</replacement>*/\n\n/*<replacement>*/\n\n\nvar Stream = require('./internal/streams/stream');\n/*</replacement>*/\n\n\nvar Buffer = require('buffer').Buffer;\n\nvar OurUint8Array = global.Uint8Array || function () {};\n\nfunction _uint8ArrayToBuffer(chunk) {\n  return Buffer.from(chunk);\n}\n\nfunction _isUint8Array(obj) {\n  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\n}\n/*<replacement>*/\n\n\nvar debugUtil = require('util');\n\nvar debug;\n\nif (debugUtil && debugUtil.debuglog) {\n  debug = debugUtil.debuglog('stream');\n} else {\n  debug = function debug() {};\n}\n/*</replacement>*/\n\n\nvar BufferList = require('./internal/streams/buffer_list');\n\nvar destroyImpl = require('./internal/streams/destroy');\n\nvar _require = require('./internal/streams/state'),\n    getHighWaterMark = _require.getHighWaterMark;\n\nvar _require$codes = require('../errors').codes,\n    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,\n    ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF,\n    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,\n    ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT; // Lazy loaded to improve the startup performance.\n\n\nvar StringDecoder;\nvar createReadableStreamAsyncIterator;\nvar from;\n\nrequire('inherits')(Readable, Stream);\n\nvar errorOrDestroy = destroyImpl.errorOrDestroy;\nvar kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];\n\nfunction prependListener(emitter, event, fn) {\n  // Sadly this is not cacheable as some libraries bundle their own\n  // event emitter implementation with them.\n  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any\n  // userland ones.  NEVER DO THIS. This is here only because this code needs\n  // to continue to work with older versions of Node.js that do not include\n  // the prependListener() method. The goal is to eventually remove this hack.\n\n  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];\n}\n\nfunction ReadableState(options, stream, isDuplex) {\n  Duplex = Duplex || require('./_stream_duplex');\n  options = options || {}; // Duplex streams are both readable and writable, but share\n  // the same options object.\n  // However, some cases require setting options to different\n  // values for the readable and the writable sides of the duplex stream.\n  // These options can be provided separately as readableXXX and writableXXX.\n\n  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag. Used to make read(n) ignore n and to\n  // make all the buffer merging and length checks go away\n\n  this.objectMode = !!options.objectMode;\n  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer\n  // Note: 0 is a valid value, means \"don't call _read preemptively ever\"\n\n  this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex); // A linked list is used to store data chunks instead of an array because the\n  // linked list can remove elements from the beginning faster than\n  // array.shift()\n\n  this.buffer = new BufferList();\n  this.length = 0;\n  this.pipes = null;\n  this.pipesCount = 0;\n  this.flowing = null;\n  this.ended = false;\n  this.endEmitted = false;\n  this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted\n  // immediately, or on a later tick.  We set this to true at first, because\n  // any actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first read call.\n\n  this.sync = true; // whenever we return null, then we set a flag to say\n  // that we're awaiting a 'readable' event emission.\n\n  this.needReadable = false;\n  this.emittedReadable = false;\n  this.readableListening = false;\n  this.resumeScheduled = false;\n  this.paused = true; // Should close be emitted on destroy. Defaults to true.\n\n  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'end' (and potentially 'finish')\n\n  this.autoDestroy = !!options.autoDestroy; // has it been destroyed\n\n  this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n\n  this.defaultEncoding = options.defaultEncoding || 'utf8'; // the number of writers that are awaiting a drain event in .pipe()s\n\n  this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled\n\n  this.readingMore = false;\n  this.decoder = null;\n  this.encoding = null;\n\n  if (options.encoding) {\n    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n    this.decoder = new StringDecoder(options.encoding);\n    this.encoding = options.encoding;\n  }\n}\n\nfunction Readable(options) {\n  Duplex = Duplex || require('./_stream_duplex');\n  if (!(this instanceof Readable)) return new Readable(options); // Checking for a Stream.Duplex instance is faster here instead of inside\n  // the ReadableState constructor, at least with V8 6.5\n\n  var isDuplex = this instanceof Duplex;\n  this._readableState = new ReadableState(options, this, isDuplex); // legacy\n\n  this.readable = true;\n\n  if (options) {\n    if (typeof options.read === 'function') this._read = options.read;\n    if (typeof options.destroy === 'function') this._destroy = options.destroy;\n  }\n\n  Stream.call(this);\n}\n\nObject.defineProperty(Readable.prototype, 'destroyed', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    if (this._readableState === undefined) {\n      return false;\n    }\n\n    return this._readableState.destroyed;\n  },\n  set: function set(value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (!this._readableState) {\n      return;\n    } // backward compatibility, the user is explicitly\n    // managing destroyed\n\n\n    this._readableState.destroyed = value;\n  }\n});\nReadable.prototype.destroy = destroyImpl.destroy;\nReadable.prototype._undestroy = destroyImpl.undestroy;\n\nReadable.prototype._destroy = function (err, cb) {\n  cb(err);\n}; // Manually shove something into the read() buffer.\n// This returns true if the highWaterMark has not been hit yet,\n// similar to how Writable.write() returns true if you should\n// write() some more.\n\n\nReadable.prototype.push = function (chunk, encoding) {\n  var state = this._readableState;\n  var skipChunkCheck;\n\n  if (!state.objectMode) {\n    if (typeof chunk === 'string') {\n      encoding = encoding || state.defaultEncoding;\n\n      if (encoding !== state.encoding) {\n        chunk = Buffer.from(chunk, encoding);\n        encoding = '';\n      }\n\n      skipChunkCheck = true;\n    }\n  } else {\n    skipChunkCheck = true;\n  }\n\n  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);\n}; // Unshift should *always* be something directly out of read()\n\n\nReadable.prototype.unshift = function (chunk) {\n  return readableAddChunk(this, chunk, null, true, false);\n};\n\nfunction readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {\n  debug('readableAddChunk', chunk);\n  var state = stream._readableState;\n\n  if (chunk === null) {\n    state.reading = false;\n    onEofChunk(stream, state);\n  } else {\n    var er;\n    if (!skipChunkCheck) er = chunkInvalid(state, chunk);\n\n    if (er) {\n      errorOrDestroy(stream, er);\n    } else if (state.objectMode || chunk && chunk.length > 0) {\n      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {\n        chunk = _uint8ArrayToBuffer(chunk);\n      }\n\n      if (addToFront) {\n        if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());else addChunk(stream, state, chunk, true);\n      } else if (state.ended) {\n        errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());\n      } else if (state.destroyed) {\n        return false;\n      } else {\n        state.reading = false;\n\n        if (state.decoder && !encoding) {\n          chunk = state.decoder.write(chunk);\n          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);\n        } else {\n          addChunk(stream, state, chunk, false);\n        }\n      }\n    } else if (!addToFront) {\n      state.reading = false;\n      maybeReadMore(stream, state);\n    }\n  } // We can push more data if we are below the highWaterMark.\n  // Also, if we have no data yet, we can stand some more bytes.\n  // This is to work around cases where hwm=0, such as the repl.\n\n\n  return !state.ended && (state.length < state.highWaterMark || state.length === 0);\n}\n\nfunction addChunk(stream, state, chunk, addToFront) {\n  if (state.flowing && state.length === 0 && !state.sync) {\n    state.awaitDrain = 0;\n    stream.emit('data', chunk);\n  } else {\n    // update the buffer info.\n    state.length += state.objectMode ? 1 : chunk.length;\n    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);\n    if (state.needReadable) emitReadable(stream);\n  }\n\n  maybeReadMore(stream, state);\n}\n\nfunction chunkInvalid(state, chunk) {\n  var er;\n\n  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {\n    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk);\n  }\n\n  return er;\n}\n\nReadable.prototype.isPaused = function () {\n  return this._readableState.flowing === false;\n}; // backwards compatibility.\n\n\nReadable.prototype.setEncoding = function (enc) {\n  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n  var decoder = new StringDecoder(enc);\n  this._readableState.decoder = decoder; // If setEncoding(null), decoder.encoding equals utf8\n\n  this._readableState.encoding = this._readableState.decoder.encoding; // Iterate over current buffer to convert already stored Buffers:\n\n  var p = this._readableState.buffer.head;\n  var content = '';\n\n  while (p !== null) {\n    content += decoder.write(p.data);\n    p = p.next;\n  }\n\n  this._readableState.buffer.clear();\n\n  if (content !== '') this._readableState.buffer.push(content);\n  this._readableState.length = content.length;\n  return this;\n}; // Don't raise the hwm > 1GB\n\n\nvar MAX_HWM = 0x40000000;\n\nfunction computeNewHighWaterMark(n) {\n  if (n >= MAX_HWM) {\n    // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.\n    n = MAX_HWM;\n  } else {\n    // Get the next highest power of 2 to prevent increasing hwm excessively in\n    // tiny amounts\n    n--;\n    n |= n >>> 1;\n    n |= n >>> 2;\n    n |= n >>> 4;\n    n |= n >>> 8;\n    n |= n >>> 16;\n    n++;\n  }\n\n  return n;\n} // This function is designed to be inlinable, so please take care when making\n// changes to the function body.\n\n\nfunction howMuchToRead(n, state) {\n  if (n <= 0 || state.length === 0 && state.ended) return 0;\n  if (state.objectMode) return 1;\n\n  if (n !== n) {\n    // Only flow one buffer at a time\n    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;\n  } // If we're asking for more than the current hwm, then raise the hwm.\n\n\n  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);\n  if (n <= state.length) return n; // Don't have enough\n\n  if (!state.ended) {\n    state.needReadable = true;\n    return 0;\n  }\n\n  return state.length;\n} // you can override either this method, or the async _read(n) below.\n\n\nReadable.prototype.read = function (n) {\n  debug('read', n);\n  n = parseInt(n, 10);\n  var state = this._readableState;\n  var nOrig = n;\n  if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we\n  // already have a bunch of data in the buffer, then just trigger\n  // the 'readable' event and move on.\n\n  if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {\n    debug('read: emitReadable', state.length, state.ended);\n    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);\n    return null;\n  }\n\n  n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.\n\n  if (n === 0 && state.ended) {\n    if (state.length === 0) endReadable(this);\n    return null;\n  } // All the actual chunk generation logic needs to be\n  // *below* the call to _read.  The reason is that in certain\n  // synthetic stream cases, such as passthrough streams, _read\n  // may be a completely synchronous operation which may change\n  // the state of the read buffer, providing enough data when\n  // before there was *not* enough.\n  //\n  // So, the steps are:\n  // 1. Figure out what the state of things will be after we do\n  // a read from the buffer.\n  //\n  // 2. If that resulting state will trigger a _read, then call _read.\n  // Note that this may be asynchronous, or synchronous.  Yes, it is\n  // deeply ugly to write APIs this way, but that still doesn't mean\n  // that the Readable class should behave improperly, as streams are\n  // designed to be sync/async agnostic.\n  // Take note if the _read call is sync or async (ie, if the read call\n  // has returned yet), so that we know whether or not it's safe to emit\n  // 'readable' etc.\n  //\n  // 3. Actually pull the requested chunks out of the buffer and return.\n  // if we need a readable event, then we need to do some reading.\n\n\n  var doRead = state.needReadable;\n  debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some\n\n  if (state.length === 0 || state.length - n < state.highWaterMark) {\n    doRead = true;\n    debug('length less than watermark', doRead);\n  } // however, if we've ended, then there's no point, and if we're already\n  // reading, then it's unnecessary.\n\n\n  if (state.ended || state.reading) {\n    doRead = false;\n    debug('reading or ended', doRead);\n  } else if (doRead) {\n    debug('do read');\n    state.reading = true;\n    state.sync = true; // if the length is currently zero, then we *need* a readable event.\n\n    if (state.length === 0) state.needReadable = true; // call internal read method\n\n    this._read(state.highWaterMark);\n\n    state.sync = false; // If _read pushed data synchronously, then `reading` will be false,\n    // and we need to re-evaluate how much data we can return to the user.\n\n    if (!state.reading) n = howMuchToRead(nOrig, state);\n  }\n\n  var ret;\n  if (n > 0) ret = fromList(n, state);else ret = null;\n\n  if (ret === null) {\n    state.needReadable = state.length <= state.highWaterMark;\n    n = 0;\n  } else {\n    state.length -= n;\n    state.awaitDrain = 0;\n  }\n\n  if (state.length === 0) {\n    // If we have nothing in the buffer, then we want to know\n    // as soon as we *do* get something into the buffer.\n    if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.\n\n    if (nOrig !== n && state.ended) endReadable(this);\n  }\n\n  if (ret !== null) this.emit('data', ret);\n  return ret;\n};\n\nfunction onEofChunk(stream, state) {\n  debug('onEofChunk');\n  if (state.ended) return;\n\n  if (state.decoder) {\n    var chunk = state.decoder.end();\n\n    if (chunk && chunk.length) {\n      state.buffer.push(chunk);\n      state.length += state.objectMode ? 1 : chunk.length;\n    }\n  }\n\n  state.ended = true;\n\n  if (state.sync) {\n    // if we are sync, wait until next tick to emit the data.\n    // Otherwise we risk emitting data in the flow()\n    // the readable code triggers during a read() call\n    emitReadable(stream);\n  } else {\n    // emit 'readable' now to make sure it gets picked up.\n    state.needReadable = false;\n\n    if (!state.emittedReadable) {\n      state.emittedReadable = true;\n      emitReadable_(stream);\n    }\n  }\n} // Don't emit readable right away in sync mode, because this can trigger\n// another read() call => stack overflow.  This way, it might trigger\n// a nextTick recursion warning, but that's not so bad.\n\n\nfunction emitReadable(stream) {\n  var state = stream._readableState;\n  debug('emitReadable', state.needReadable, state.emittedReadable);\n  state.needReadable = false;\n\n  if (!state.emittedReadable) {\n    debug('emitReadable', state.flowing);\n    state.emittedReadable = true;\n    process.nextTick(emitReadable_, stream);\n  }\n}\n\nfunction emitReadable_(stream) {\n  var state = stream._readableState;\n  debug('emitReadable_', state.destroyed, state.length, state.ended);\n\n  if (!state.destroyed && (state.length || state.ended)) {\n    stream.emit('readable');\n    state.emittedReadable = false;\n  } // The stream needs another readable event if\n  // 1. It is not flowing, as the flow mechanism will take\n  //    care of it.\n  // 2. It is not ended.\n  // 3. It is below the highWaterMark, so we can schedule\n  //    another readable later.\n\n\n  state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;\n  flow(stream);\n} // at this point, the user has presumably seen the 'readable' event,\n// and called read() to consume some data.  that may have triggered\n// in turn another _read(n) call, in which case reading = true if\n// it's in progress.\n// However, if we're not ended, or reading, and the length < hwm,\n// then go ahead and try to read some more preemptively.\n\n\nfunction maybeReadMore(stream, state) {\n  if (!state.readingMore) {\n    state.readingMore = true;\n    process.nextTick(maybeReadMore_, stream, state);\n  }\n}\n\nfunction maybeReadMore_(stream, state) {\n  // Attempt to read more data if we should.\n  //\n  // The conditions for reading more data are (one of):\n  // - Not enough data buffered (state.length < state.highWaterMark). The loop\n  //   is responsible for filling the buffer with enough data if such data\n  //   is available. If highWaterMark is 0 and we are not in the flowing mode\n  //   we should _not_ attempt to buffer any extra data. We'll get more data\n  //   when the stream consumer calls read() instead.\n  // - No data in the buffer, and the stream is in flowing mode. In this mode\n  //   the loop below is responsible for ensuring read() is called. Failing to\n  //   call read here would abort the flow and there's no other mechanism for\n  //   continuing the flow if the stream consumer has just subscribed to the\n  //   'data' event.\n  //\n  // In addition to the above conditions to keep reading data, the following\n  // conditions prevent the data from being read:\n  // - The stream has ended (state.ended).\n  // - There is already a pending 'read' operation (state.reading). This is a\n  //   case where the the stream has called the implementation defined _read()\n  //   method, but they are processing the call asynchronously and have _not_\n  //   called push() with new data. In this case we skip performing more\n  //   read()s. The execution ends in this method again after the _read() ends\n  //   up calling push() with more data.\n  while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {\n    var len = state.length;\n    debug('maybeReadMore read 0');\n    stream.read(0);\n    if (len === state.length) // didn't get any data, stop spinning.\n      break;\n  }\n\n  state.readingMore = false;\n} // abstract method.  to be overridden in specific implementation classes.\n// call cb(er, data) where data is <= n in length.\n// for virtual (non-string, non-buffer) streams, \"length\" is somewhat\n// arbitrary, and perhaps not very meaningful.\n\n\nReadable.prototype._read = function (n) {\n  errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED('_read()'));\n};\n\nReadable.prototype.pipe = function (dest, pipeOpts) {\n  var src = this;\n  var state = this._readableState;\n\n  switch (state.pipesCount) {\n    case 0:\n      state.pipes = dest;\n      break;\n\n    case 1:\n      state.pipes = [state.pipes, dest];\n      break;\n\n    default:\n      state.pipes.push(dest);\n      break;\n  }\n\n  state.pipesCount += 1;\n  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);\n  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;\n  var endFn = doEnd ? onend : unpipe;\n  if (state.endEmitted) process.nextTick(endFn);else src.once('end', endFn);\n  dest.on('unpipe', onunpipe);\n\n  function onunpipe(readable, unpipeInfo) {\n    debug('onunpipe');\n\n    if (readable === src) {\n      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {\n        unpipeInfo.hasUnpiped = true;\n        cleanup();\n      }\n    }\n  }\n\n  function onend() {\n    debug('onend');\n    dest.end();\n  } // when the dest drains, it reduces the awaitDrain counter\n  // on the source.  This would be more elegant with a .once()\n  // handler in flow(), but adding and removing repeatedly is\n  // too slow.\n\n\n  var ondrain = pipeOnDrain(src);\n  dest.on('drain', ondrain);\n  var cleanedUp = false;\n\n  function cleanup() {\n    debug('cleanup'); // cleanup event handlers once the pipe is broken\n\n    dest.removeListener('close', onclose);\n    dest.removeListener('finish', onfinish);\n    dest.removeListener('drain', ondrain);\n    dest.removeListener('error', onerror);\n    dest.removeListener('unpipe', onunpipe);\n    src.removeListener('end', onend);\n    src.removeListener('end', unpipe);\n    src.removeListener('data', ondata);\n    cleanedUp = true; // if the reader is waiting for a drain event from this\n    // specific writer, then it would cause it to never start\n    // flowing again.\n    // So, if this is awaiting a drain, then we just call it now.\n    // If we don't know, then assume that we are waiting for one.\n\n    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();\n  }\n\n  src.on('data', ondata);\n\n  function ondata(chunk) {\n    debug('ondata');\n    var ret = dest.write(chunk);\n    debug('dest.write', ret);\n\n    if (ret === false) {\n      // If the user unpiped during `dest.write()`, it is possible\n      // to get stuck in a permanently paused state if that write\n      // also returned false.\n      // => Check whether `dest` is still a piping destination.\n      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {\n        debug('false write response, pause', state.awaitDrain);\n        state.awaitDrain++;\n      }\n\n      src.pause();\n    }\n  } // if the dest has an error, then stop piping into it.\n  // however, don't suppress the throwing behavior for this.\n\n\n  function onerror(er) {\n    debug('onerror', er);\n    unpipe();\n    dest.removeListener('error', onerror);\n    if (EElistenerCount(dest, 'error') === 0) errorOrDestroy(dest, er);\n  } // Make sure our error handler is attached before userland ones.\n\n\n  prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.\n\n  function onclose() {\n    dest.removeListener('finish', onfinish);\n    unpipe();\n  }\n\n  dest.once('close', onclose);\n\n  function onfinish() {\n    debug('onfinish');\n    dest.removeListener('close', onclose);\n    unpipe();\n  }\n\n  dest.once('finish', onfinish);\n\n  function unpipe() {\n    debug('unpipe');\n    src.unpipe(dest);\n  } // tell the dest that it's being piped to\n\n\n  dest.emit('pipe', src); // start the flow if it hasn't been started already.\n\n  if (!state.flowing) {\n    debug('pipe resume');\n    src.resume();\n  }\n\n  return dest;\n};\n\nfunction pipeOnDrain(src) {\n  return function pipeOnDrainFunctionResult() {\n    var state = src._readableState;\n    debug('pipeOnDrain', state.awaitDrain);\n    if (state.awaitDrain) state.awaitDrain--;\n\n    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {\n      state.flowing = true;\n      flow(src);\n    }\n  };\n}\n\nReadable.prototype.unpipe = function (dest) {\n  var state = this._readableState;\n  var unpipeInfo = {\n    hasUnpiped: false\n  }; // if we're not piping anywhere, then do nothing.\n\n  if (state.pipesCount === 0) return this; // just one destination.  most common case.\n\n  if (state.pipesCount === 1) {\n    // passed in one, but it's not the right one.\n    if (dest && dest !== state.pipes) return this;\n    if (!dest) dest = state.pipes; // got a match.\n\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n    if (dest) dest.emit('unpipe', this, unpipeInfo);\n    return this;\n  } // slow case. multiple pipe destinations.\n\n\n  if (!dest) {\n    // remove all.\n    var dests = state.pipes;\n    var len = state.pipesCount;\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n\n    for (var i = 0; i < len; i++) {\n      dests[i].emit('unpipe', this, {\n        hasUnpiped: false\n      });\n    }\n\n    return this;\n  } // try to find the right one.\n\n\n  var index = indexOf(state.pipes, dest);\n  if (index === -1) return this;\n  state.pipes.splice(index, 1);\n  state.pipesCount -= 1;\n  if (state.pipesCount === 1) state.pipes = state.pipes[0];\n  dest.emit('unpipe', this, unpipeInfo);\n  return this;\n}; // set up data events if they are asked for\n// Ensure readable listeners eventually get something\n\n\nReadable.prototype.on = function (ev, fn) {\n  var res = Stream.prototype.on.call(this, ev, fn);\n  var state = this._readableState;\n\n  if (ev === 'data') {\n    // update readableListening so that resume() may be a no-op\n    // a few lines down. This is needed to support once('readable').\n    state.readableListening = this.listenerCount('readable') > 0; // Try start flowing on next tick if stream isn't explicitly paused\n\n    if (state.flowing !== false) this.resume();\n  } else if (ev === 'readable') {\n    if (!state.endEmitted && !state.readableListening) {\n      state.readableListening = state.needReadable = true;\n      state.flowing = false;\n      state.emittedReadable = false;\n      debug('on readable', state.length, state.reading);\n\n      if (state.length) {\n        emitReadable(this);\n      } else if (!state.reading) {\n        process.nextTick(nReadingNextTick, this);\n      }\n    }\n  }\n\n  return res;\n};\n\nReadable.prototype.addListener = Readable.prototype.on;\n\nReadable.prototype.removeListener = function (ev, fn) {\n  var res = Stream.prototype.removeListener.call(this, ev, fn);\n\n  if (ev === 'readable') {\n    // We need to check if there is someone still listening to\n    // readable and reset the state. However this needs to happen\n    // after readable has been emitted but before I/O (nextTick) to\n    // support once('readable', fn) cycles. This means that calling\n    // resume within the same tick will have no\n    // effect.\n    process.nextTick(updateReadableListening, this);\n  }\n\n  return res;\n};\n\nReadable.prototype.removeAllListeners = function (ev) {\n  var res = Stream.prototype.removeAllListeners.apply(this, arguments);\n\n  if (ev === 'readable' || ev === undefined) {\n    // We need to check if there is someone still listening to\n    // readable and reset the state. However this needs to happen\n    // after readable has been emitted but before I/O (nextTick) to\n    // support once('readable', fn) cycles. This means that calling\n    // resume within the same tick will have no\n    // effect.\n    process.nextTick(updateReadableListening, this);\n  }\n\n  return res;\n};\n\nfunction updateReadableListening(self) {\n  var state = self._readableState;\n  state.readableListening = self.listenerCount('readable') > 0;\n\n  if (state.resumeScheduled && !state.paused) {\n    // flowing needs to be set to true now, otherwise\n    // the upcoming resume will not flow.\n    state.flowing = true; // crude way to check if we should resume\n  } else if (self.listenerCount('data') > 0) {\n    self.resume();\n  }\n}\n\nfunction nReadingNextTick(self) {\n  debug('readable nexttick read 0');\n  self.read(0);\n} // pause() and resume() are remnants of the legacy readable stream API\n// If the user uses them, then switch into old mode.\n\n\nReadable.prototype.resume = function () {\n  var state = this._readableState;\n\n  if (!state.flowing) {\n    debug('resume'); // we flow only if there is no one listening\n    // for readable, but we still have to call\n    // resume()\n\n    state.flowing = !state.readableListening;\n    resume(this, state);\n  }\n\n  state.paused = false;\n  return this;\n};\n\nfunction resume(stream, state) {\n  if (!state.resumeScheduled) {\n    state.resumeScheduled = true;\n    process.nextTick(resume_, stream, state);\n  }\n}\n\nfunction resume_(stream, state) {\n  debug('resume', state.reading);\n\n  if (!state.reading) {\n    stream.read(0);\n  }\n\n  state.resumeScheduled = false;\n  stream.emit('resume');\n  flow(stream);\n  if (state.flowing && !state.reading) stream.read(0);\n}\n\nReadable.prototype.pause = function () {\n  debug('call pause flowing=%j', this._readableState.flowing);\n\n  if (this._readableState.flowing !== false) {\n    debug('pause');\n    this._readableState.flowing = false;\n    this.emit('pause');\n  }\n\n  this._readableState.paused = true;\n  return this;\n};\n\nfunction flow(stream) {\n  var state = stream._readableState;\n  debug('flow', state.flowing);\n\n  while (state.flowing && stream.read() !== null) {\n    ;\n  }\n} // wrap an old-style stream as the async data source.\n// This is *not* part of the readable stream interface.\n// It is an ugly unfortunate mess of history.\n\n\nReadable.prototype.wrap = function (stream) {\n  var _this = this;\n\n  var state = this._readableState;\n  var paused = false;\n  stream.on('end', function () {\n    debug('wrapped end');\n\n    if (state.decoder && !state.ended) {\n      var chunk = state.decoder.end();\n      if (chunk && chunk.length) _this.push(chunk);\n    }\n\n    _this.push(null);\n  });\n  stream.on('data', function (chunk) {\n    debug('wrapped data');\n    if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode\n\n    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;\n\n    var ret = _this.push(chunk);\n\n    if (!ret) {\n      paused = true;\n      stream.pause();\n    }\n  }); // proxy all the other methods.\n  // important when wrapping filters and duplexes.\n\n  for (var i in stream) {\n    if (this[i] === undefined && typeof stream[i] === 'function') {\n      this[i] = function methodWrap(method) {\n        return function methodWrapReturnFunction() {\n          return stream[method].apply(stream, arguments);\n        };\n      }(i);\n    }\n  } // proxy certain important events.\n\n\n  for (var n = 0; n < kProxyEvents.length; n++) {\n    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));\n  } // when we try to consume some more bytes, simply unpause the\n  // underlying stream.\n\n\n  this._read = function (n) {\n    debug('wrapped _read', n);\n\n    if (paused) {\n      paused = false;\n      stream.resume();\n    }\n  };\n\n  return this;\n};\n\nif (typeof Symbol === 'function') {\n  Readable.prototype[Symbol.asyncIterator] = function () {\n    if (createReadableStreamAsyncIterator === undefined) {\n      createReadableStreamAsyncIterator = require('./internal/streams/async_iterator');\n    }\n\n    return createReadableStreamAsyncIterator(this);\n  };\n}\n\nObject.defineProperty(Readable.prototype, 'readableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._readableState.highWaterMark;\n  }\n});\nObject.defineProperty(Readable.prototype, 'readableBuffer', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._readableState && this._readableState.buffer;\n  }\n});\nObject.defineProperty(Readable.prototype, 'readableFlowing', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._readableState.flowing;\n  },\n  set: function set(state) {\n    if (this._readableState) {\n      this._readableState.flowing = state;\n    }\n  }\n}); // exposed for testing purposes only.\n\nReadable._fromList = fromList;\nObject.defineProperty(Readable.prototype, 'readableLength', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._readableState.length;\n  }\n}); // Pluck off n bytes from an array of buffers.\n// Length is the combined lengths of all the buffers in the list.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\n\nfunction fromList(n, state) {\n  // nothing buffered\n  if (state.length === 0) return null;\n  var ret;\n  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {\n    // read it all, truncate the list\n    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.first();else ret = state.buffer.concat(state.length);\n    state.buffer.clear();\n  } else {\n    // read part of list\n    ret = state.buffer.consume(n, state.decoder);\n  }\n  return ret;\n}\n\nfunction endReadable(stream) {\n  var state = stream._readableState;\n  debug('endReadable', state.endEmitted);\n\n  if (!state.endEmitted) {\n    state.ended = true;\n    process.nextTick(endReadableNT, state, stream);\n  }\n}\n\nfunction endReadableNT(state, stream) {\n  debug('endReadableNT', state.endEmitted, state.length); // Check that we didn't get one last unshift.\n\n  if (!state.endEmitted && state.length === 0) {\n    state.endEmitted = true;\n    stream.readable = false;\n    stream.emit('end');\n\n    if (state.autoDestroy) {\n      // In case of duplex streams we need a way to detect\n      // if the writable side is ready for autoDestroy as well\n      var wState = stream._writableState;\n\n      if (!wState || wState.autoDestroy && wState.finished) {\n        stream.destroy();\n      }\n    }\n  }\n}\n\nif (typeof Symbol === 'function') {\n  Readable.from = function (iterable, opts) {\n    if (from === undefined) {\n      from = require('./internal/streams/from');\n    }\n\n    return from(Readable, iterable, opts);\n  };\n}\n\nfunction indexOf(xs, x) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    if (xs[i] === x) return i;\n  }\n\n  return -1;\n}","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n// a transform stream is a readable/writable stream where you do\n// something with the data.  Sometimes it's called a \"filter\",\n// but that's not a great name for it, since that implies a thing where\n// some bits pass through, and others are simply ignored.  (That would\n// be a valid example of a transform, of course.)\n//\n// While the output is causally related to the input, it's not a\n// necessarily symmetric or synchronous transformation.  For example,\n// a zlib stream might take multiple plain-text writes(), and then\n// emit a single compressed chunk some time in the future.\n//\n// Here's how this works:\n//\n// The Transform stream has all the aspects of the readable and writable\n// stream classes.  When you write(chunk), that calls _write(chunk,cb)\n// internally, and returns false if there's a lot of pending writes\n// buffered up.  When you call read(), that calls _read(n) until\n// there's enough pending readable data buffered up.\n//\n// In a transform stream, the written data is placed in a buffer.  When\n// _read(n) is called, it transforms the queued up data, calling the\n// buffered _write cb's as it consumes chunks.  If consuming a single\n// written chunk would result in multiple output chunks, then the first\n// outputted bit calls the readcb, and subsequent chunks just go into\n// the read buffer, and will cause it to emit 'readable' if necessary.\n//\n// This way, back-pressure is actually determined by the reading side,\n// since _read has to be called to start processing a new chunk.  However,\n// a pathological inflate type of transform can cause excessive buffering\n// here.  For example, imagine a stream where every byte of input is\n// interpreted as an integer from 0-255, and then results in that many\n// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in\n// 1kb of data being output.  In this case, you could write a very small\n// amount of input, and end up with a very large amount of output.  In\n// such a pathological inflating mechanism, there'd be no way to tell\n// the system to stop doing the transform.  A single 4MB write could\n// cause the system to run out of memory.\n//\n// However, even in such a pathological case, only a single written chunk\n// would be consumed, and then the rest would wait (un-transformed) until\n// the results of the previous transformed chunk were consumed.\n'use strict';\n\nmodule.exports = Transform;\n\nvar _require$codes = require('../errors').codes,\n    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,\n    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,\n    ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING,\n    ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;\n\nvar Duplex = require('./_stream_duplex');\n\nrequire('inherits')(Transform, Duplex);\n\nfunction afterTransform(er, data) {\n  var ts = this._transformState;\n  ts.transforming = false;\n  var cb = ts.writecb;\n\n  if (cb === null) {\n    return this.emit('error', new ERR_MULTIPLE_CALLBACK());\n  }\n\n  ts.writechunk = null;\n  ts.writecb = null;\n  if (data != null) // single equals check for both `null` and `undefined`\n    this.push(data);\n  cb(er);\n  var rs = this._readableState;\n  rs.reading = false;\n\n  if (rs.needReadable || rs.length < rs.highWaterMark) {\n    this._read(rs.highWaterMark);\n  }\n}\n\nfunction Transform(options) {\n  if (!(this instanceof Transform)) return new Transform(options);\n  Duplex.call(this, options);\n  this._transformState = {\n    afterTransform: afterTransform.bind(this),\n    needTransform: false,\n    transforming: false,\n    writecb: null,\n    writechunk: null,\n    writeencoding: null\n  }; // start out asking for a readable event once data is transformed.\n\n  this._readableState.needReadable = true; // we have implemented the _read method, and done the other things\n  // that Readable wants before the first _read call, so unset the\n  // sync guard flag.\n\n  this._readableState.sync = false;\n\n  if (options) {\n    if (typeof options.transform === 'function') this._transform = options.transform;\n    if (typeof options.flush === 'function') this._flush = options.flush;\n  } // When the writable side finishes, then flush out anything remaining.\n\n\n  this.on('prefinish', prefinish);\n}\n\nfunction prefinish() {\n  var _this = this;\n\n  if (typeof this._flush === 'function' && !this._readableState.destroyed) {\n    this._flush(function (er, data) {\n      done(_this, er, data);\n    });\n  } else {\n    done(this, null, null);\n  }\n}\n\nTransform.prototype.push = function (chunk, encoding) {\n  this._transformState.needTransform = false;\n  return Duplex.prototype.push.call(this, chunk, encoding);\n}; // This is the part where you do stuff!\n// override this function in implementation classes.\n// 'chunk' is an input chunk.\n//\n// Call `push(newChunk)` to pass along transformed output\n// to the readable side.  You may call 'push' zero or more times.\n//\n// Call `cb(err)` when you are done with this chunk.  If you pass\n// an error, then that'll put the hurt on the whole operation.  If you\n// never call cb(), then you'll never get another chunk.\n\n\nTransform.prototype._transform = function (chunk, encoding, cb) {\n  cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));\n};\n\nTransform.prototype._write = function (chunk, encoding, cb) {\n  var ts = this._transformState;\n  ts.writecb = cb;\n  ts.writechunk = chunk;\n  ts.writeencoding = encoding;\n\n  if (!ts.transforming) {\n    var rs = this._readableState;\n    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);\n  }\n}; // Doesn't matter what the args are here.\n// _transform does all the work.\n// That we got here means that the readable side wants more data.\n\n\nTransform.prototype._read = function (n) {\n  var ts = this._transformState;\n\n  if (ts.writechunk !== null && !ts.transforming) {\n    ts.transforming = true;\n\n    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);\n  } else {\n    // mark that we need a transform, so that any data that comes in\n    // will get processed, now that we've asked for it.\n    ts.needTransform = true;\n  }\n};\n\nTransform.prototype._destroy = function (err, cb) {\n  Duplex.prototype._destroy.call(this, err, function (err2) {\n    cb(err2);\n  });\n};\n\nfunction done(stream, er, data) {\n  if (er) return stream.emit('error', er);\n  if (data != null) // single equals check for both `null` and `undefined`\n    stream.push(data); // TODO(BridgeAR): Write a test for these two error cases\n  // if there's nothing in the write buffer, then that means\n  // that nothing more will ever be provided\n\n  if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();\n  if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();\n  return stream.push(null);\n}","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A bit simpler than readable streams.\n// Implement an async ._write(chunk, encoding, cb), and it'll handle all\n// the drain event emission and buffering.\n'use strict';\n\nmodule.exports = Writable;\n/* <replacement> */\n\nfunction WriteReq(chunk, encoding, cb) {\n  this.chunk = chunk;\n  this.encoding = encoding;\n  this.callback = cb;\n  this.next = null;\n} // It seems a linked list but it is not\n// there will be only 2 of these for each stream\n\n\nfunction CorkedRequest(state) {\n  var _this = this;\n\n  this.next = null;\n  this.entry = null;\n\n  this.finish = function () {\n    onCorkedFinish(_this, state);\n  };\n}\n/* </replacement> */\n\n/*<replacement>*/\n\n\nvar Duplex;\n/*</replacement>*/\n\nWritable.WritableState = WritableState;\n/*<replacement>*/\n\nvar internalUtil = {\n  deprecate: require('util-deprecate')\n};\n/*</replacement>*/\n\n/*<replacement>*/\n\nvar Stream = require('./internal/streams/stream');\n/*</replacement>*/\n\n\nvar Buffer = require('buffer').Buffer;\n\nvar OurUint8Array = global.Uint8Array || function () {};\n\nfunction _uint8ArrayToBuffer(chunk) {\n  return Buffer.from(chunk);\n}\n\nfunction _isUint8Array(obj) {\n  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\n}\n\nvar destroyImpl = require('./internal/streams/destroy');\n\nvar _require = require('./internal/streams/state'),\n    getHighWaterMark = _require.getHighWaterMark;\n\nvar _require$codes = require('../errors').codes,\n    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,\n    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,\n    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,\n    ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE,\n    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED,\n    ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES,\n    ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END,\n    ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;\n\nvar errorOrDestroy = destroyImpl.errorOrDestroy;\n\nrequire('inherits')(Writable, Stream);\n\nfunction nop() {}\n\nfunction WritableState(options, stream, isDuplex) {\n  Duplex = Duplex || require('./_stream_duplex');\n  options = options || {}; // Duplex streams are both readable and writable, but share\n  // the same options object.\n  // However, some cases require setting options to different\n  // values for the readable and the writable sides of the duplex stream,\n  // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.\n\n  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag to indicate whether or not this stream\n  // contains buffers or objects.\n\n  this.objectMode = !!options.objectMode;\n  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false\n  // Note: 0 is a valid value, means that we always return false if\n  // the entire buffer is not flushed immediately on write()\n\n  this.highWaterMark = getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex); // if _final has been called\n\n  this.finalCalled = false; // drain event flag.\n\n  this.needDrain = false; // at the start of calling end()\n\n  this.ending = false; // when end() has been called, and returned\n\n  this.ended = false; // when 'finish' is emitted\n\n  this.finished = false; // has it been destroyed\n\n  this.destroyed = false; // should we decode strings into buffers before passing to _write?\n  // this is here so that some node-core streams can optimize string\n  // handling at a lower level.\n\n  var noDecode = options.decodeStrings === false;\n  this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n\n  this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement\n  // of how much we're waiting to get pushed to some underlying\n  // socket or file.\n\n  this.length = 0; // a flag to see when we're in the middle of a write.\n\n  this.writing = false; // when true all writes will be buffered until .uncork() call\n\n  this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, because any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n\n  this.sync = true; // a flag to know if we're processing previously buffered items, which\n  // may call the _write() callback in the same tick, so that we don't\n  // end up in an overlapped onwrite situation.\n\n  this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)\n\n  this.onwrite = function (er) {\n    onwrite(stream, er);\n  }; // the callback that the user supplies to write(chunk,encoding,cb)\n\n\n  this.writecb = null; // the amount that is being written when _write is called.\n\n  this.writelen = 0;\n  this.bufferedRequest = null;\n  this.lastBufferedRequest = null; // number of pending user-supplied write callbacks\n  // this must be 0 before 'finish' can be emitted\n\n  this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs\n  // This is relevant for synchronous Transform streams\n\n  this.prefinished = false; // True if the error was already emitted and should not be thrown again\n\n  this.errorEmitted = false; // Should close be emitted on destroy. Defaults to true.\n\n  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'finish' (and potentially 'end')\n\n  this.autoDestroy = !!options.autoDestroy; // count buffered requests\n\n  this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always\n  // one allocated and free to use, and we maintain at most two\n\n  this.corkedRequestsFree = new CorkedRequest(this);\n}\n\nWritableState.prototype.getBuffer = function getBuffer() {\n  var current = this.bufferedRequest;\n  var out = [];\n\n  while (current) {\n    out.push(current);\n    current = current.next;\n  }\n\n  return out;\n};\n\n(function () {\n  try {\n    Object.defineProperty(WritableState.prototype, 'buffer', {\n      get: internalUtil.deprecate(function writableStateBufferGetter() {\n        return this.getBuffer();\n      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')\n    });\n  } catch (_) {}\n})(); // Test _writableState for inheritance to account for Duplex streams,\n// whose prototype chain only points to Readable.\n\n\nvar realHasInstance;\n\nif (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {\n  realHasInstance = Function.prototype[Symbol.hasInstance];\n  Object.defineProperty(Writable, Symbol.hasInstance, {\n    value: function value(object) {\n      if (realHasInstance.call(this, object)) return true;\n      if (this !== Writable) return false;\n      return object && object._writableState instanceof WritableState;\n    }\n  });\n} else {\n  realHasInstance = function realHasInstance(object) {\n    return object instanceof this;\n  };\n}\n\nfunction Writable(options) {\n  Duplex = Duplex || require('./_stream_duplex'); // Writable ctor is applied to Duplexes, too.\n  // `realHasInstance` is necessary because using plain `instanceof`\n  // would return false, as no `_writableState` property is attached.\n  // Trying to use the custom `instanceof` for Writable here will also break the\n  // Node.js LazyTransform implementation, which has a non-trivial getter for\n  // `_writableState` that would lead to infinite recursion.\n  // Checking for a Stream.Duplex instance is faster here instead of inside\n  // the WritableState constructor, at least with V8 6.5\n\n  var isDuplex = this instanceof Duplex;\n  if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);\n  this._writableState = new WritableState(options, this, isDuplex); // legacy.\n\n  this.writable = true;\n\n  if (options) {\n    if (typeof options.write === 'function') this._write = options.write;\n    if (typeof options.writev === 'function') this._writev = options.writev;\n    if (typeof options.destroy === 'function') this._destroy = options.destroy;\n    if (typeof options.final === 'function') this._final = options.final;\n  }\n\n  Stream.call(this);\n} // Otherwise people can pipe Writable streams, which is just wrong.\n\n\nWritable.prototype.pipe = function () {\n  errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());\n};\n\nfunction writeAfterEnd(stream, cb) {\n  var er = new ERR_STREAM_WRITE_AFTER_END(); // TODO: defer error events consistently everywhere, not just the cb\n\n  errorOrDestroy(stream, er);\n  process.nextTick(cb, er);\n} // Checks that a user-supplied chunk is valid, especially for the particular\n// mode the stream is in. Currently this means that `null` is never accepted\n// and undefined/non-string values are only allowed in object mode.\n\n\nfunction validChunk(stream, state, chunk, cb) {\n  var er;\n\n  if (chunk === null) {\n    er = new ERR_STREAM_NULL_VALUES();\n  } else if (typeof chunk !== 'string' && !state.objectMode) {\n    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer'], chunk);\n  }\n\n  if (er) {\n    errorOrDestroy(stream, er);\n    process.nextTick(cb, er);\n    return false;\n  }\n\n  return true;\n}\n\nWritable.prototype.write = function (chunk, encoding, cb) {\n  var state = this._writableState;\n  var ret = false;\n\n  var isBuf = !state.objectMode && _isUint8Array(chunk);\n\n  if (isBuf && !Buffer.isBuffer(chunk)) {\n    chunk = _uint8ArrayToBuffer(chunk);\n  }\n\n  if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;\n  if (typeof cb !== 'function') cb = nop;\n  if (state.ending) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {\n    state.pendingcb++;\n    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);\n  }\n  return ret;\n};\n\nWritable.prototype.cork = function () {\n  this._writableState.corked++;\n};\n\nWritable.prototype.uncork = function () {\n  var state = this._writableState;\n\n  if (state.corked) {\n    state.corked--;\n    if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);\n  }\n};\n\nWritable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {\n  // node::ParseEncoding() requires lower case.\n  if (typeof encoding === 'string') encoding = encoding.toLowerCase();\n  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);\n  this._writableState.defaultEncoding = encoding;\n  return this;\n};\n\nObject.defineProperty(Writable.prototype, 'writableBuffer', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState && this._writableState.getBuffer();\n  }\n});\n\nfunction decodeChunk(state, chunk, encoding) {\n  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {\n    chunk = Buffer.from(chunk, encoding);\n  }\n\n  return chunk;\n}\n\nObject.defineProperty(Writable.prototype, 'writableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState.highWaterMark;\n  }\n}); // if we're already writing something, then just put this\n// in the queue, and wait our turn.  Otherwise, call _write\n// If we return false, then we need a drain event, so set that flag.\n\nfunction writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {\n  if (!isBuf) {\n    var newChunk = decodeChunk(state, chunk, encoding);\n\n    if (chunk !== newChunk) {\n      isBuf = true;\n      encoding = 'buffer';\n      chunk = newChunk;\n    }\n  }\n\n  var len = state.objectMode ? 1 : chunk.length;\n  state.length += len;\n  var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.\n\n  if (!ret) state.needDrain = true;\n\n  if (state.writing || state.corked) {\n    var last = state.lastBufferedRequest;\n    state.lastBufferedRequest = {\n      chunk: chunk,\n      encoding: encoding,\n      isBuf: isBuf,\n      callback: cb,\n      next: null\n    };\n\n    if (last) {\n      last.next = state.lastBufferedRequest;\n    } else {\n      state.bufferedRequest = state.lastBufferedRequest;\n    }\n\n    state.bufferedRequestCount += 1;\n  } else {\n    doWrite(stream, state, false, len, chunk, encoding, cb);\n  }\n\n  return ret;\n}\n\nfunction doWrite(stream, state, writev, len, chunk, encoding, cb) {\n  state.writelen = len;\n  state.writecb = cb;\n  state.writing = true;\n  state.sync = true;\n  if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write'));else if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);\n  state.sync = false;\n}\n\nfunction onwriteError(stream, state, sync, er, cb) {\n  --state.pendingcb;\n\n  if (sync) {\n    // defer the callback if we are being called synchronously\n    // to avoid piling up things on the stack\n    process.nextTick(cb, er); // this can emit finish, and it will always happen\n    // after error\n\n    process.nextTick(finishMaybe, stream, state);\n    stream._writableState.errorEmitted = true;\n    errorOrDestroy(stream, er);\n  } else {\n    // the caller expect this to happen before if\n    // it is async\n    cb(er);\n    stream._writableState.errorEmitted = true;\n    errorOrDestroy(stream, er); // this can emit finish, but finish must\n    // always follow error\n\n    finishMaybe(stream, state);\n  }\n}\n\nfunction onwriteStateUpdate(state) {\n  state.writing = false;\n  state.writecb = null;\n  state.length -= state.writelen;\n  state.writelen = 0;\n}\n\nfunction onwrite(stream, er) {\n  var state = stream._writableState;\n  var sync = state.sync;\n  var cb = state.writecb;\n  if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK();\n  onwriteStateUpdate(state);\n  if (er) onwriteError(stream, state, sync, er, cb);else {\n    // Check if we're actually ready to finish, but don't emit yet\n    var finished = needFinish(state) || stream.destroyed;\n\n    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {\n      clearBuffer(stream, state);\n    }\n\n    if (sync) {\n      process.nextTick(afterWrite, stream, state, finished, cb);\n    } else {\n      afterWrite(stream, state, finished, cb);\n    }\n  }\n}\n\nfunction afterWrite(stream, state, finished, cb) {\n  if (!finished) onwriteDrain(stream, state);\n  state.pendingcb--;\n  cb();\n  finishMaybe(stream, state);\n} // Must force callback to be called on nextTick, so that we don't\n// emit 'drain' before the write() consumer gets the 'false' return\n// value, and has a chance to attach a 'drain' listener.\n\n\nfunction onwriteDrain(stream, state) {\n  if (state.length === 0 && state.needDrain) {\n    state.needDrain = false;\n    stream.emit('drain');\n  }\n} // if there's something in the buffer waiting, then process it\n\n\nfunction clearBuffer(stream, state) {\n  state.bufferProcessing = true;\n  var entry = state.bufferedRequest;\n\n  if (stream._writev && entry && entry.next) {\n    // Fast case, write everything using _writev()\n    var l = state.bufferedRequestCount;\n    var buffer = new Array(l);\n    var holder = state.corkedRequestsFree;\n    holder.entry = entry;\n    var count = 0;\n    var allBuffers = true;\n\n    while (entry) {\n      buffer[count] = entry;\n      if (!entry.isBuf) allBuffers = false;\n      entry = entry.next;\n      count += 1;\n    }\n\n    buffer.allBuffers = allBuffers;\n    doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time\n    // as the hot path ends with doWrite\n\n    state.pendingcb++;\n    state.lastBufferedRequest = null;\n\n    if (holder.next) {\n      state.corkedRequestsFree = holder.next;\n      holder.next = null;\n    } else {\n      state.corkedRequestsFree = new CorkedRequest(state);\n    }\n\n    state.bufferedRequestCount = 0;\n  } else {\n    // Slow case, write chunks one-by-one\n    while (entry) {\n      var chunk = entry.chunk;\n      var encoding = entry.encoding;\n      var cb = entry.callback;\n      var len = state.objectMode ? 1 : chunk.length;\n      doWrite(stream, state, false, len, chunk, encoding, cb);\n      entry = entry.next;\n      state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then\n      // it means that we need to wait until it does.\n      // also, that means that the chunk and cb are currently\n      // being processed, so move the buffer counter past them.\n\n      if (state.writing) {\n        break;\n      }\n    }\n\n    if (entry === null) state.lastBufferedRequest = null;\n  }\n\n  state.bufferedRequest = entry;\n  state.bufferProcessing = false;\n}\n\nWritable.prototype._write = function (chunk, encoding, cb) {\n  cb(new ERR_METHOD_NOT_IMPLEMENTED('_write()'));\n};\n\nWritable.prototype._writev = null;\n\nWritable.prototype.end = function (chunk, encoding, cb) {\n  var state = this._writableState;\n\n  if (typeof chunk === 'function') {\n    cb = chunk;\n    chunk = null;\n    encoding = null;\n  } else if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks\n\n  if (state.corked) {\n    state.corked = 1;\n    this.uncork();\n  } // ignore unnecessary end() calls.\n\n\n  if (!state.ending) endWritable(this, state, cb);\n  return this;\n};\n\nObject.defineProperty(Writable.prototype, 'writableLength', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState.length;\n  }\n});\n\nfunction needFinish(state) {\n  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;\n}\n\nfunction callFinal(stream, state) {\n  stream._final(function (err) {\n    state.pendingcb--;\n\n    if (err) {\n      errorOrDestroy(stream, err);\n    }\n\n    state.prefinished = true;\n    stream.emit('prefinish');\n    finishMaybe(stream, state);\n  });\n}\n\nfunction prefinish(stream, state) {\n  if (!state.prefinished && !state.finalCalled) {\n    if (typeof stream._final === 'function' && !state.destroyed) {\n      state.pendingcb++;\n      state.finalCalled = true;\n      process.nextTick(callFinal, stream, state);\n    } else {\n      state.prefinished = true;\n      stream.emit('prefinish');\n    }\n  }\n}\n\nfunction finishMaybe(stream, state) {\n  var need = needFinish(state);\n\n  if (need) {\n    prefinish(stream, state);\n\n    if (state.pendingcb === 0) {\n      state.finished = true;\n      stream.emit('finish');\n\n      if (state.autoDestroy) {\n        // In case of duplex streams we need a way to detect\n        // if the readable side is ready for autoDestroy as well\n        var rState = stream._readableState;\n\n        if (!rState || rState.autoDestroy && rState.endEmitted) {\n          stream.destroy();\n        }\n      }\n    }\n  }\n\n  return need;\n}\n\nfunction endWritable(stream, state, cb) {\n  state.ending = true;\n  finishMaybe(stream, state);\n\n  if (cb) {\n    if (state.finished) process.nextTick(cb);else stream.once('finish', cb);\n  }\n\n  state.ended = true;\n  stream.writable = false;\n}\n\nfunction onCorkedFinish(corkReq, state, err) {\n  var entry = corkReq.entry;\n  corkReq.entry = null;\n\n  while (entry) {\n    var cb = entry.callback;\n    state.pendingcb--;\n    cb(err);\n    entry = entry.next;\n  } // reuse the free corkReq.\n\n\n  state.corkedRequestsFree.next = corkReq;\n}\n\nObject.defineProperty(Writable.prototype, 'destroyed', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    if (this._writableState === undefined) {\n      return false;\n    }\n\n    return this._writableState.destroyed;\n  },\n  set: function set(value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (!this._writableState) {\n      return;\n    } // backward compatibility, the user is explicitly\n    // managing destroyed\n\n\n    this._writableState.destroyed = value;\n  }\n});\nWritable.prototype.destroy = destroyImpl.destroy;\nWritable.prototype._undestroy = destroyImpl.undestroy;\n\nWritable.prototype._destroy = function (err, cb) {\n  cb(err);\n};","'use strict';\n\nvar _Object$setPrototypeO;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar finished = require('./end-of-stream');\n\nvar kLastResolve = Symbol('lastResolve');\nvar kLastReject = Symbol('lastReject');\nvar kError = Symbol('error');\nvar kEnded = Symbol('ended');\nvar kLastPromise = Symbol('lastPromise');\nvar kHandlePromise = Symbol('handlePromise');\nvar kStream = Symbol('stream');\n\nfunction createIterResult(value, done) {\n  return {\n    value: value,\n    done: done\n  };\n}\n\nfunction readAndResolve(iter) {\n  var resolve = iter[kLastResolve];\n\n  if (resolve !== null) {\n    var data = iter[kStream].read(); // we defer if data is null\n    // we can be expecting either 'end' or\n    // 'error'\n\n    if (data !== null) {\n      iter[kLastPromise] = null;\n      iter[kLastResolve] = null;\n      iter[kLastReject] = null;\n      resolve(createIterResult(data, false));\n    }\n  }\n}\n\nfunction onReadable(iter) {\n  // we wait for the next tick, because it might\n  // emit an error with process.nextTick\n  process.nextTick(readAndResolve, iter);\n}\n\nfunction wrapForNext(lastPromise, iter) {\n  return function (resolve, reject) {\n    lastPromise.then(function () {\n      if (iter[kEnded]) {\n        resolve(createIterResult(undefined, true));\n        return;\n      }\n\n      iter[kHandlePromise](resolve, reject);\n    }, reject);\n  };\n}\n\nvar AsyncIteratorPrototype = Object.getPrototypeOf(function () {});\nvar ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {\n  get stream() {\n    return this[kStream];\n  },\n\n  next: function next() {\n    var _this = this;\n\n    // if we have detected an error in the meanwhile\n    // reject straight away\n    var error = this[kError];\n\n    if (error !== null) {\n      return Promise.reject(error);\n    }\n\n    if (this[kEnded]) {\n      return Promise.resolve(createIterResult(undefined, true));\n    }\n\n    if (this[kStream].destroyed) {\n      // We need to defer via nextTick because if .destroy(err) is\n      // called, the error will be emitted via nextTick, and\n      // we cannot guarantee that there is no error lingering around\n      // waiting to be emitted.\n      return new Promise(function (resolve, reject) {\n        process.nextTick(function () {\n          if (_this[kError]) {\n            reject(_this[kError]);\n          } else {\n            resolve(createIterResult(undefined, true));\n          }\n        });\n      });\n    } // if we have multiple next() calls\n    // we will wait for the previous Promise to finish\n    // this logic is optimized to support for await loops,\n    // where next() is only called once at a time\n\n\n    var lastPromise = this[kLastPromise];\n    var promise;\n\n    if (lastPromise) {\n      promise = new Promise(wrapForNext(lastPromise, this));\n    } else {\n      // fast path needed to support multiple this.push()\n      // without triggering the next() queue\n      var data = this[kStream].read();\n\n      if (data !== null) {\n        return Promise.resolve(createIterResult(data, false));\n      }\n\n      promise = new Promise(this[kHandlePromise]);\n    }\n\n    this[kLastPromise] = promise;\n    return promise;\n  }\n}, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function () {\n  return this;\n}), _defineProperty(_Object$setPrototypeO, \"return\", function _return() {\n  var _this2 = this;\n\n  // destroy(err, cb) is a private API\n  // we can guarantee we have that here, because we control the\n  // Readable class this is attached to\n  return new Promise(function (resolve, reject) {\n    _this2[kStream].destroy(null, function (err) {\n      if (err) {\n        reject(err);\n        return;\n      }\n\n      resolve(createIterResult(undefined, true));\n    });\n  });\n}), _Object$setPrototypeO), AsyncIteratorPrototype);\n\nvar createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {\n  var _Object$create;\n\n  var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {\n    value: stream,\n    writable: true\n  }), _defineProperty(_Object$create, kLastResolve, {\n    value: null,\n    writable: true\n  }), _defineProperty(_Object$create, kLastReject, {\n    value: null,\n    writable: true\n  }), _defineProperty(_Object$create, kError, {\n    value: null,\n    writable: true\n  }), _defineProperty(_Object$create, kEnded, {\n    value: stream._readableState.endEmitted,\n    writable: true\n  }), _defineProperty(_Object$create, kHandlePromise, {\n    value: function value(resolve, reject) {\n      var data = iterator[kStream].read();\n\n      if (data) {\n        iterator[kLastPromise] = null;\n        iterator[kLastResolve] = null;\n        iterator[kLastReject] = null;\n        resolve(createIterResult(data, false));\n      } else {\n        iterator[kLastResolve] = resolve;\n        iterator[kLastReject] = reject;\n      }\n    },\n    writable: true\n  }), _Object$create));\n  iterator[kLastPromise] = null;\n  finished(stream, function (err) {\n    if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {\n      var reject = iterator[kLastReject]; // reject if we are waiting for data in the Promise\n      // returned by next() and store the error\n\n      if (reject !== null) {\n        iterator[kLastPromise] = null;\n        iterator[kLastResolve] = null;\n        iterator[kLastReject] = null;\n        reject(err);\n      }\n\n      iterator[kError] = err;\n      return;\n    }\n\n    var resolve = iterator[kLastResolve];\n\n    if (resolve !== null) {\n      iterator[kLastPromise] = null;\n      iterator[kLastResolve] = null;\n      iterator[kLastReject] = null;\n      resolve(createIterResult(undefined, true));\n    }\n\n    iterator[kEnded] = true;\n  });\n  stream.on('readable', onReadable.bind(null, iterator));\n  return iterator;\n};\n\nmodule.exports = createReadableStreamAsyncIterator;","'use strict';\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar _require = require('buffer'),\n    Buffer = _require.Buffer;\n\nvar _require2 = require('util'),\n    inspect = _require2.inspect;\n\nvar custom = inspect && inspect.custom || 'inspect';\n\nfunction copyBuffer(src, target, offset) {\n  Buffer.prototype.copy.call(src, target, offset);\n}\n\nmodule.exports =\n/*#__PURE__*/\nfunction () {\n  function BufferList() {\n    _classCallCheck(this, BufferList);\n\n    this.head = null;\n    this.tail = null;\n    this.length = 0;\n  }\n\n  _createClass(BufferList, [{\n    key: \"push\",\n    value: function push(v) {\n      var entry = {\n        data: v,\n        next: null\n      };\n      if (this.length > 0) this.tail.next = entry;else this.head = entry;\n      this.tail = entry;\n      ++this.length;\n    }\n  }, {\n    key: \"unshift\",\n    value: function unshift(v) {\n      var entry = {\n        data: v,\n        next: this.head\n      };\n      if (this.length === 0) this.tail = entry;\n      this.head = entry;\n      ++this.length;\n    }\n  }, {\n    key: \"shift\",\n    value: function shift() {\n      if (this.length === 0) return;\n      var ret = this.head.data;\n      if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;\n      --this.length;\n      return ret;\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.head = this.tail = null;\n      this.length = 0;\n    }\n  }, {\n    key: \"join\",\n    value: function join(s) {\n      if (this.length === 0) return '';\n      var p = this.head;\n      var ret = '' + p.data;\n\n      while (p = p.next) {\n        ret += s + p.data;\n      }\n\n      return ret;\n    }\n  }, {\n    key: \"concat\",\n    value: function concat(n) {\n      if (this.length === 0) return Buffer.alloc(0);\n      var ret = Buffer.allocUnsafe(n >>> 0);\n      var p = this.head;\n      var i = 0;\n\n      while (p) {\n        copyBuffer(p.data, ret, i);\n        i += p.data.length;\n        p = p.next;\n      }\n\n      return ret;\n    } // Consumes a specified amount of bytes or characters from the buffered data.\n\n  }, {\n    key: \"consume\",\n    value: function consume(n, hasStrings) {\n      var ret;\n\n      if (n < this.head.data.length) {\n        // `slice` is the same for buffers and strings.\n        ret = this.head.data.slice(0, n);\n        this.head.data = this.head.data.slice(n);\n      } else if (n === this.head.data.length) {\n        // First chunk is a perfect match.\n        ret = this.shift();\n      } else {\n        // Result spans more than one buffer.\n        ret = hasStrings ? this._getString(n) : this._getBuffer(n);\n      }\n\n      return ret;\n    }\n  }, {\n    key: \"first\",\n    value: function first() {\n      return this.head.data;\n    } // Consumes a specified amount of characters from the buffered data.\n\n  }, {\n    key: \"_getString\",\n    value: function _getString(n) {\n      var p = this.head;\n      var c = 1;\n      var ret = p.data;\n      n -= ret.length;\n\n      while (p = p.next) {\n        var str = p.data;\n        var nb = n > str.length ? str.length : n;\n        if (nb === str.length) ret += str;else ret += str.slice(0, n);\n        n -= nb;\n\n        if (n === 0) {\n          if (nb === str.length) {\n            ++c;\n            if (p.next) this.head = p.next;else this.head = this.tail = null;\n          } else {\n            this.head = p;\n            p.data = str.slice(nb);\n          }\n\n          break;\n        }\n\n        ++c;\n      }\n\n      this.length -= c;\n      return ret;\n    } // Consumes a specified amount of bytes from the buffered data.\n\n  }, {\n    key: \"_getBuffer\",\n    value: function _getBuffer(n) {\n      var ret = Buffer.allocUnsafe(n);\n      var p = this.head;\n      var c = 1;\n      p.data.copy(ret);\n      n -= p.data.length;\n\n      while (p = p.next) {\n        var buf = p.data;\n        var nb = n > buf.length ? buf.length : n;\n        buf.copy(ret, ret.length - n, 0, nb);\n        n -= nb;\n\n        if (n === 0) {\n          if (nb === buf.length) {\n            ++c;\n            if (p.next) this.head = p.next;else this.head = this.tail = null;\n          } else {\n            this.head = p;\n            p.data = buf.slice(nb);\n          }\n\n          break;\n        }\n\n        ++c;\n      }\n\n      this.length -= c;\n      return ret;\n    } // Make sure the linked list only shows the minimal necessary information.\n\n  }, {\n    key: custom,\n    value: function value(_, options) {\n      return inspect(this, _objectSpread({}, options, {\n        // Only inspect one level.\n        depth: 0,\n        // It should not recurse.\n        customInspect: false\n      }));\n    }\n  }]);\n\n  return BufferList;\n}();","'use strict'; // undocumented cb() API, needed for core, not for public API\n\nfunction destroy(err, cb) {\n  var _this = this;\n\n  var readableDestroyed = this._readableState && this._readableState.destroyed;\n  var writableDestroyed = this._writableState && this._writableState.destroyed;\n\n  if (readableDestroyed || writableDestroyed) {\n    if (cb) {\n      cb(err);\n    } else if (err) {\n      if (!this._writableState) {\n        process.nextTick(emitErrorNT, this, err);\n      } else if (!this._writableState.errorEmitted) {\n        this._writableState.errorEmitted = true;\n        process.nextTick(emitErrorNT, this, err);\n      }\n    }\n\n    return this;\n  } // we set destroyed to true before firing error callbacks in order\n  // to make it re-entrance safe in case destroy() is called within callbacks\n\n\n  if (this._readableState) {\n    this._readableState.destroyed = true;\n  } // if this is a duplex stream mark the writable part as destroyed as well\n\n\n  if (this._writableState) {\n    this._writableState.destroyed = true;\n  }\n\n  this._destroy(err || null, function (err) {\n    if (!cb && err) {\n      if (!_this._writableState) {\n        process.nextTick(emitErrorAndCloseNT, _this, err);\n      } else if (!_this._writableState.errorEmitted) {\n        _this._writableState.errorEmitted = true;\n        process.nextTick(emitErrorAndCloseNT, _this, err);\n      } else {\n        process.nextTick(emitCloseNT, _this);\n      }\n    } else if (cb) {\n      process.nextTick(emitCloseNT, _this);\n      cb(err);\n    } else {\n      process.nextTick(emitCloseNT, _this);\n    }\n  });\n\n  return this;\n}\n\nfunction emitErrorAndCloseNT(self, err) {\n  emitErrorNT(self, err);\n  emitCloseNT(self);\n}\n\nfunction emitCloseNT(self) {\n  if (self._writableState && !self._writableState.emitClose) return;\n  if (self._readableState && !self._readableState.emitClose) return;\n  self.emit('close');\n}\n\nfunction undestroy() {\n  if (this._readableState) {\n    this._readableState.destroyed = false;\n    this._readableState.reading = false;\n    this._readableState.ended = false;\n    this._readableState.endEmitted = false;\n  }\n\n  if (this._writableState) {\n    this._writableState.destroyed = false;\n    this._writableState.ended = false;\n    this._writableState.ending = false;\n    this._writableState.finalCalled = false;\n    this._writableState.prefinished = false;\n    this._writableState.finished = false;\n    this._writableState.errorEmitted = false;\n  }\n}\n\nfunction emitErrorNT(self, err) {\n  self.emit('error', err);\n}\n\nfunction errorOrDestroy(stream, err) {\n  // We have tests that rely on errors being emitted\n  // in the same tick, so changing this is semver major.\n  // For now when you opt-in to autoDestroy we allow\n  // the error to be emitted nextTick. In a future\n  // semver major update we should change the default to this.\n  var rState = stream._readableState;\n  var wState = stream._writableState;\n  if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);else stream.emit('error', err);\n}\n\nmodule.exports = {\n  destroy: destroy,\n  undestroy: undestroy,\n  errorOrDestroy: errorOrDestroy\n};","// Ported from https://github.com/mafintosh/end-of-stream with\n// permission from the author, Mathias Buus (@mafintosh).\n'use strict';\n\nvar ERR_STREAM_PREMATURE_CLOSE = require('../../../errors').codes.ERR_STREAM_PREMATURE_CLOSE;\n\nfunction once(callback) {\n  var called = false;\n  return function () {\n    if (called) return;\n    called = true;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    callback.apply(this, args);\n  };\n}\n\nfunction noop() {}\n\nfunction isRequest(stream) {\n  return stream.setHeader && typeof stream.abort === 'function';\n}\n\nfunction eos(stream, opts, callback) {\n  if (typeof opts === 'function') return eos(stream, null, opts);\n  if (!opts) opts = {};\n  callback = once(callback || noop);\n  var readable = opts.readable || opts.readable !== false && stream.readable;\n  var writable = opts.writable || opts.writable !== false && stream.writable;\n\n  var onlegacyfinish = function onlegacyfinish() {\n    if (!stream.writable) onfinish();\n  };\n\n  var writableEnded = stream._writableState && stream._writableState.finished;\n\n  var onfinish = function onfinish() {\n    writable = false;\n    writableEnded = true;\n    if (!readable) callback.call(stream);\n  };\n\n  var readableEnded = stream._readableState && stream._readableState.endEmitted;\n\n  var onend = function onend() {\n    readable = false;\n    readableEnded = true;\n    if (!writable) callback.call(stream);\n  };\n\n  var onerror = function onerror(err) {\n    callback.call(stream, err);\n  };\n\n  var onclose = function onclose() {\n    var err;\n\n    if (readable && !readableEnded) {\n      if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();\n      return callback.call(stream, err);\n    }\n\n    if (writable && !writableEnded) {\n      if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();\n      return callback.call(stream, err);\n    }\n  };\n\n  var onrequest = function onrequest() {\n    stream.req.on('finish', onfinish);\n  };\n\n  if (isRequest(stream)) {\n    stream.on('complete', onfinish);\n    stream.on('abort', onclose);\n    if (stream.req) onrequest();else stream.on('request', onrequest);\n  } else if (writable && !stream._writableState) {\n    // legacy streams\n    stream.on('end', onlegacyfinish);\n    stream.on('close', onlegacyfinish);\n  }\n\n  stream.on('end', onend);\n  stream.on('finish', onfinish);\n  if (opts.error !== false) stream.on('error', onerror);\n  stream.on('close', onclose);\n  return function () {\n    stream.removeListener('complete', onfinish);\n    stream.removeListener('abort', onclose);\n    stream.removeListener('request', onrequest);\n    if (stream.req) stream.req.removeListener('finish', onfinish);\n    stream.removeListener('end', onlegacyfinish);\n    stream.removeListener('close', onlegacyfinish);\n    stream.removeListener('finish', onfinish);\n    stream.removeListener('end', onend);\n    stream.removeListener('error', onerror);\n    stream.removeListener('close', onclose);\n  };\n}\n\nmodule.exports = eos;","module.exports = function () {\n  throw new Error('Readable.from is not available in the browser')\n};\n","// Ported from https://github.com/mafintosh/pump with\n// permission from the author, Mathias Buus (@mafintosh).\n'use strict';\n\nvar eos;\n\nfunction once(callback) {\n  var called = false;\n  return function () {\n    if (called) return;\n    called = true;\n    callback.apply(void 0, arguments);\n  };\n}\n\nvar _require$codes = require('../../../errors').codes,\n    ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS,\n    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;\n\nfunction noop(err) {\n  // Rethrow the error if it exists to avoid swallowing it\n  if (err) throw err;\n}\n\nfunction isRequest(stream) {\n  return stream.setHeader && typeof stream.abort === 'function';\n}\n\nfunction destroyer(stream, reading, writing, callback) {\n  callback = once(callback);\n  var closed = false;\n  stream.on('close', function () {\n    closed = true;\n  });\n  if (eos === undefined) eos = require('./end-of-stream');\n  eos(stream, {\n    readable: reading,\n    writable: writing\n  }, function (err) {\n    if (err) return callback(err);\n    closed = true;\n    callback();\n  });\n  var destroyed = false;\n  return function (err) {\n    if (closed) return;\n    if (destroyed) return;\n    destroyed = true; // request.destroy just do .end - .abort is what we want\n\n    if (isRequest(stream)) return stream.abort();\n    if (typeof stream.destroy === 'function') return stream.destroy();\n    callback(err || new ERR_STREAM_DESTROYED('pipe'));\n  };\n}\n\nfunction call(fn) {\n  fn();\n}\n\nfunction pipe(from, to) {\n  return from.pipe(to);\n}\n\nfunction popCallback(streams) {\n  if (!streams.length) return noop;\n  if (typeof streams[streams.length - 1] !== 'function') return noop;\n  return streams.pop();\n}\n\nfunction pipeline() {\n  for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {\n    streams[_key] = arguments[_key];\n  }\n\n  var callback = popCallback(streams);\n  if (Array.isArray(streams[0])) streams = streams[0];\n\n  if (streams.length < 2) {\n    throw new ERR_MISSING_ARGS('streams');\n  }\n\n  var error;\n  var destroys = streams.map(function (stream, i) {\n    var reading = i < streams.length - 1;\n    var writing = i > 0;\n    return destroyer(stream, reading, writing, function (err) {\n      if (!error) error = err;\n      if (err) destroys.forEach(call);\n      if (reading) return;\n      destroys.forEach(call);\n      callback(error);\n    });\n  });\n  return streams.reduce(pipe);\n}\n\nmodule.exports = pipeline;","'use strict';\n\nvar ERR_INVALID_OPT_VALUE = require('../../../errors').codes.ERR_INVALID_OPT_VALUE;\n\nfunction highWaterMarkFrom(options, isDuplex, duplexKey) {\n  return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;\n}\n\nfunction getHighWaterMark(state, options, duplexKey, isDuplex) {\n  var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);\n\n  if (hwm != null) {\n    if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {\n      var name = isDuplex ? duplexKey : 'highWaterMark';\n      throw new ERR_INVALID_OPT_VALUE(name, hwm);\n    }\n\n    return Math.floor(hwm);\n  } // Default value\n\n\n  return state.objectMode ? 16 : 16 * 1024;\n}\n\nmodule.exports = {\n  getHighWaterMark: getHighWaterMark\n};","module.exports = require('events').EventEmitter;\n","exports = module.exports = require('./lib/_stream_readable.js');\nexports.Stream = exports;\nexports.Readable = exports;\nexports.Writable = require('./lib/_stream_writable.js');\nexports.Duplex = require('./lib/_stream_duplex.js');\nexports.Transform = require('./lib/_stream_transform.js');\nexports.PassThrough = require('./lib/_stream_passthrough.js');\nexports.finished = require('./lib/internal/streams/end-of-stream.js');\nexports.pipeline = require('./lib/internal/streams/pipeline.js');\n","var hash = exports;\n\nhash.utils = require('./hash/utils');\nhash.common = require('./hash/common');\nhash.sha = require('./hash/sha');\nhash.ripemd = require('./hash/ripemd');\nhash.hmac = require('./hash/hmac');\n\n// Proxy hash functions to the main object\nhash.sha1 = hash.sha.sha1;\nhash.sha256 = hash.sha.sha256;\nhash.sha224 = hash.sha.sha224;\nhash.sha384 = hash.sha.sha384;\nhash.sha512 = hash.sha.sha512;\nhash.ripemd160 = hash.ripemd.ripemd160;\n","'use strict';\n\nvar utils = require('./utils');\nvar assert = require('minimalistic-assert');\n\nfunction BlockHash() {\n  this.pending = null;\n  this.pendingTotal = 0;\n  this.blockSize = this.constructor.blockSize;\n  this.outSize = this.constructor.outSize;\n  this.hmacStrength = this.constructor.hmacStrength;\n  this.padLength = this.constructor.padLength / 8;\n  this.endian = 'big';\n\n  this._delta8 = this.blockSize / 8;\n  this._delta32 = this.blockSize / 32;\n}\nexports.BlockHash = BlockHash;\n\nBlockHash.prototype.update = function update(msg, enc) {\n  // Convert message to array, pad it, and join into 32bit blocks\n  msg = utils.toArray(msg, enc);\n  if (!this.pending)\n    this.pending = msg;\n  else\n    this.pending = this.pending.concat(msg);\n  this.pendingTotal += msg.length;\n\n  // Enough data, try updating\n  if (this.pending.length >= this._delta8) {\n    msg = this.pending;\n\n    // Process pending data in blocks\n    var r = msg.length % this._delta8;\n    this.pending = msg.slice(msg.length - r, msg.length);\n    if (this.pending.length === 0)\n      this.pending = null;\n\n    msg = utils.join32(msg, 0, msg.length - r, this.endian);\n    for (var i = 0; i < msg.length; i += this._delta32)\n      this._update(msg, i, i + this._delta32);\n  }\n\n  return this;\n};\n\nBlockHash.prototype.digest = function digest(enc) {\n  this.update(this._pad());\n  assert(this.pending === null);\n\n  return this._digest(enc);\n};\n\nBlockHash.prototype._pad = function pad() {\n  var len = this.pendingTotal;\n  var bytes = this._delta8;\n  var k = bytes - ((len + this.padLength) % bytes);\n  var res = new Array(k + this.padLength);\n  res[0] = 0x80;\n  for (var i = 1; i < k; i++)\n    res[i] = 0;\n\n  // Append length\n  len <<= 3;\n  if (this.endian === 'big') {\n    for (var t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = len & 0xff;\n  } else {\n    res[i++] = len & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n\n    for (t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n  }\n\n  return res;\n};\n","'use strict';\n\nvar utils = require('./utils');\nvar assert = require('minimalistic-assert');\n\nfunction Hmac(hash, key, enc) {\n  if (!(this instanceof Hmac))\n    return new Hmac(hash, key, enc);\n  this.Hash = hash;\n  this.blockSize = hash.blockSize / 8;\n  this.outSize = hash.outSize / 8;\n  this.inner = null;\n  this.outer = null;\n\n  this._init(utils.toArray(key, enc));\n}\nmodule.exports = Hmac;\n\nHmac.prototype._init = function init(key) {\n  // Shorten key, if needed\n  if (key.length > this.blockSize)\n    key = new this.Hash().update(key).digest();\n  assert(key.length <= this.blockSize);\n\n  // Add padding to key\n  for (var i = key.length; i < this.blockSize; i++)\n    key.push(0);\n\n  for (i = 0; i < key.length; i++)\n    key[i] ^= 0x36;\n  this.inner = new this.Hash().update(key);\n\n  // 0x36 ^ 0x5c = 0x6a\n  for (i = 0; i < key.length; i++)\n    key[i] ^= 0x6a;\n  this.outer = new this.Hash().update(key);\n};\n\nHmac.prototype.update = function update(msg, enc) {\n  this.inner.update(msg, enc);\n  return this;\n};\n\nHmac.prototype.digest = function digest(enc) {\n  this.outer.update(this.inner.digest());\n  return this.outer.digest(enc);\n};\n","'use strict';\n\nvar utils = require('./utils');\nvar common = require('./common');\n\nvar rotl32 = utils.rotl32;\nvar sum32 = utils.sum32;\nvar sum32_3 = utils.sum32_3;\nvar sum32_4 = utils.sum32_4;\nvar BlockHash = common.BlockHash;\n\nfunction RIPEMD160() {\n  if (!(this instanceof RIPEMD160))\n    return new RIPEMD160();\n\n  BlockHash.call(this);\n\n  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];\n  this.endian = 'little';\n}\nutils.inherits(RIPEMD160, BlockHash);\nexports.ripemd160 = RIPEMD160;\n\nRIPEMD160.blockSize = 512;\nRIPEMD160.outSize = 160;\nRIPEMD160.hmacStrength = 192;\nRIPEMD160.padLength = 64;\n\nRIPEMD160.prototype._update = function update(msg, start) {\n  var A = this.h[0];\n  var B = this.h[1];\n  var C = this.h[2];\n  var D = this.h[3];\n  var E = this.h[4];\n  var Ah = A;\n  var Bh = B;\n  var Ch = C;\n  var Dh = D;\n  var Eh = E;\n  for (var j = 0; j < 80; j++) {\n    var T = sum32(\n      rotl32(\n        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),\n        s[j]),\n      E);\n    A = E;\n    E = D;\n    D = rotl32(C, 10);\n    C = B;\n    B = T;\n    T = sum32(\n      rotl32(\n        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),\n        sh[j]),\n      Eh);\n    Ah = Eh;\n    Eh = Dh;\n    Dh = rotl32(Ch, 10);\n    Ch = Bh;\n    Bh = T;\n  }\n  T = sum32_3(this.h[1], C, Dh);\n  this.h[1] = sum32_3(this.h[2], D, Eh);\n  this.h[2] = sum32_3(this.h[3], E, Ah);\n  this.h[3] = sum32_3(this.h[4], A, Bh);\n  this.h[4] = sum32_3(this.h[0], B, Ch);\n  this.h[0] = T;\n};\n\nRIPEMD160.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'little');\n  else\n    return utils.split32(this.h, 'little');\n};\n\nfunction f(j, x, y, z) {\n  if (j <= 15)\n    return x ^ y ^ z;\n  else if (j <= 31)\n    return (x & y) | ((~x) & z);\n  else if (j <= 47)\n    return (x | (~y)) ^ z;\n  else if (j <= 63)\n    return (x & z) | (y & (~z));\n  else\n    return x ^ (y | (~z));\n}\n\nfunction K(j) {\n  if (j <= 15)\n    return 0x00000000;\n  else if (j <= 31)\n    return 0x5a827999;\n  else if (j <= 47)\n    return 0x6ed9eba1;\n  else if (j <= 63)\n    return 0x8f1bbcdc;\n  else\n    return 0xa953fd4e;\n}\n\nfunction Kh(j) {\n  if (j <= 15)\n    return 0x50a28be6;\n  else if (j <= 31)\n    return 0x5c4dd124;\n  else if (j <= 47)\n    return 0x6d703ef3;\n  else if (j <= 63)\n    return 0x7a6d76e9;\n  else\n    return 0x00000000;\n}\n\nvar r = [\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,\n  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,\n  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,\n  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13\n];\n\nvar rh = [\n  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,\n  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,\n  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,\n  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,\n  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11\n];\n\nvar s = [\n  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,\n  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,\n  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,\n  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,\n  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6\n];\n\nvar sh = [\n  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,\n  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,\n  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,\n  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,\n  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11\n];\n","'use strict';\n\nexports.sha1 = require('./sha/1');\nexports.sha224 = require('./sha/224');\nexports.sha256 = require('./sha/256');\nexports.sha384 = require('./sha/384');\nexports.sha512 = require('./sha/512');\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar shaCommon = require('./common');\n\nvar rotl32 = utils.rotl32;\nvar sum32 = utils.sum32;\nvar sum32_5 = utils.sum32_5;\nvar ft_1 = shaCommon.ft_1;\nvar BlockHash = common.BlockHash;\n\nvar sha1_K = [\n  0x5A827999, 0x6ED9EBA1,\n  0x8F1BBCDC, 0xCA62C1D6\n];\n\nfunction SHA1() {\n  if (!(this instanceof SHA1))\n    return new SHA1();\n\n  BlockHash.call(this);\n  this.h = [\n    0x67452301, 0xefcdab89, 0x98badcfe,\n    0x10325476, 0xc3d2e1f0 ];\n  this.W = new Array(80);\n}\n\nutils.inherits(SHA1, BlockHash);\nmodule.exports = SHA1;\n\nSHA1.blockSize = 512;\nSHA1.outSize = 160;\nSHA1.hmacStrength = 80;\nSHA1.padLength = 64;\n\nSHA1.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++)\n    W[i] = msg[start + i];\n\n  for(; i < W.length; i++)\n    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n\n  for (i = 0; i < W.length; i++) {\n    var s = ~~(i / 20);\n    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);\n    e = d;\n    d = c;\n    c = rotl32(b, 30);\n    b = a;\n    a = t;\n  }\n\n  this.h[0] = sum32(this.h[0], a);\n  this.h[1] = sum32(this.h[1], b);\n  this.h[2] = sum32(this.h[2], c);\n  this.h[3] = sum32(this.h[3], d);\n  this.h[4] = sum32(this.h[4], e);\n};\n\nSHA1.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar SHA256 = require('./256');\n\nfunction SHA224() {\n  if (!(this instanceof SHA224))\n    return new SHA224();\n\n  SHA256.call(this);\n  this.h = [\n    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,\n    0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];\n}\nutils.inherits(SHA224, SHA256);\nmodule.exports = SHA224;\n\nSHA224.blockSize = 512;\nSHA224.outSize = 224;\nSHA224.hmacStrength = 192;\nSHA224.padLength = 64;\n\nSHA224.prototype._digest = function digest(enc) {\n  // Just truncate output\n  if (enc === 'hex')\n    return utils.toHex32(this.h.slice(0, 7), 'big');\n  else\n    return utils.split32(this.h.slice(0, 7), 'big');\n};\n\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar shaCommon = require('./common');\nvar assert = require('minimalistic-assert');\n\nvar sum32 = utils.sum32;\nvar sum32_4 = utils.sum32_4;\nvar sum32_5 = utils.sum32_5;\nvar ch32 = shaCommon.ch32;\nvar maj32 = shaCommon.maj32;\nvar s0_256 = shaCommon.s0_256;\nvar s1_256 = shaCommon.s1_256;\nvar g0_256 = shaCommon.g0_256;\nvar g1_256 = shaCommon.g1_256;\n\nvar BlockHash = common.BlockHash;\n\nvar sha256_K = [\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,\n  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,\n  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,\n  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,\n  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,\n  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,\n  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,\n  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,\n  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n];\n\nfunction SHA256() {\n  if (!(this instanceof SHA256))\n    return new SHA256();\n\n  BlockHash.call(this);\n  this.h = [\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,\n    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n  ];\n  this.k = sha256_K;\n  this.W = new Array(64);\n}\nutils.inherits(SHA256, BlockHash);\nmodule.exports = SHA256;\n\nSHA256.blockSize = 512;\nSHA256.outSize = 256;\nSHA256.hmacStrength = 192;\nSHA256.padLength = 64;\n\nSHA256.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++)\n    W[i] = msg[start + i];\n  for (; i < W.length; i++)\n    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n  var f = this.h[5];\n  var g = this.h[6];\n  var h = this.h[7];\n\n  assert(this.k.length === W.length);\n  for (i = 0; i < W.length; i++) {\n    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);\n    var T2 = sum32(s0_256(a), maj32(a, b, c));\n    h = g;\n    g = f;\n    f = e;\n    e = sum32(d, T1);\n    d = c;\n    c = b;\n    b = a;\n    a = sum32(T1, T2);\n  }\n\n  this.h[0] = sum32(this.h[0], a);\n  this.h[1] = sum32(this.h[1], b);\n  this.h[2] = sum32(this.h[2], c);\n  this.h[3] = sum32(this.h[3], d);\n  this.h[4] = sum32(this.h[4], e);\n  this.h[5] = sum32(this.h[5], f);\n  this.h[6] = sum32(this.h[6], g);\n  this.h[7] = sum32(this.h[7], h);\n};\n\nSHA256.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n","'use strict';\n\nvar utils = require('../utils');\n\nvar SHA512 = require('./512');\n\nfunction SHA384() {\n  if (!(this instanceof SHA384))\n    return new SHA384();\n\n  SHA512.call(this);\n  this.h = [\n    0xcbbb9d5d, 0xc1059ed8,\n    0x629a292a, 0x367cd507,\n    0x9159015a, 0x3070dd17,\n    0x152fecd8, 0xf70e5939,\n    0x67332667, 0xffc00b31,\n    0x8eb44a87, 0x68581511,\n    0xdb0c2e0d, 0x64f98fa7,\n    0x47b5481d, 0xbefa4fa4 ];\n}\nutils.inherits(SHA384, SHA512);\nmodule.exports = SHA384;\n\nSHA384.blockSize = 1024;\nSHA384.outSize = 384;\nSHA384.hmacStrength = 192;\nSHA384.padLength = 128;\n\nSHA384.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h.slice(0, 12), 'big');\n  else\n    return utils.split32(this.h.slice(0, 12), 'big');\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar assert = require('minimalistic-assert');\n\nvar rotr64_hi = utils.rotr64_hi;\nvar rotr64_lo = utils.rotr64_lo;\nvar shr64_hi = utils.shr64_hi;\nvar shr64_lo = utils.shr64_lo;\nvar sum64 = utils.sum64;\nvar sum64_hi = utils.sum64_hi;\nvar sum64_lo = utils.sum64_lo;\nvar sum64_4_hi = utils.sum64_4_hi;\nvar sum64_4_lo = utils.sum64_4_lo;\nvar sum64_5_hi = utils.sum64_5_hi;\nvar sum64_5_lo = utils.sum64_5_lo;\n\nvar BlockHash = common.BlockHash;\n\nvar sha512_K = [\n  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,\n  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,\n  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,\n  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,\n  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,\n  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,\n  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,\n  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,\n  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,\n  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,\n  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,\n  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,\n  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,\n  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,\n  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,\n  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,\n  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,\n  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,\n  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,\n  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,\n  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,\n  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,\n  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,\n  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,\n  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,\n  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,\n  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,\n  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,\n  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,\n  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,\n  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,\n  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,\n  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,\n  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,\n  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,\n  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,\n  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,\n  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,\n  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,\n  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817\n];\n\nfunction SHA512() {\n  if (!(this instanceof SHA512))\n    return new SHA512();\n\n  BlockHash.call(this);\n  this.h = [\n    0x6a09e667, 0xf3bcc908,\n    0xbb67ae85, 0x84caa73b,\n    0x3c6ef372, 0xfe94f82b,\n    0xa54ff53a, 0x5f1d36f1,\n    0x510e527f, 0xade682d1,\n    0x9b05688c, 0x2b3e6c1f,\n    0x1f83d9ab, 0xfb41bd6b,\n    0x5be0cd19, 0x137e2179 ];\n  this.k = sha512_K;\n  this.W = new Array(160);\n}\nutils.inherits(SHA512, BlockHash);\nmodule.exports = SHA512;\n\nSHA512.blockSize = 1024;\nSHA512.outSize = 512;\nSHA512.hmacStrength = 192;\nSHA512.padLength = 128;\n\nSHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {\n  var W = this.W;\n\n  // 32 x 32bit words\n  for (var i = 0; i < 32; i++)\n    W[i] = msg[start + i];\n  for (; i < W.length; i += 2) {\n    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2\n    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);\n    var c1_hi = W[i - 14];  // i - 7\n    var c1_lo = W[i - 13];\n    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15\n    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);\n    var c3_hi = W[i - 32];  // i - 16\n    var c3_lo = W[i - 31];\n\n    W[i] = sum64_4_hi(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo);\n    W[i + 1] = sum64_4_lo(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo);\n  }\n};\n\nSHA512.prototype._update = function _update(msg, start) {\n  this._prepareBlock(msg, start);\n\n  var W = this.W;\n\n  var ah = this.h[0];\n  var al = this.h[1];\n  var bh = this.h[2];\n  var bl = this.h[3];\n  var ch = this.h[4];\n  var cl = this.h[5];\n  var dh = this.h[6];\n  var dl = this.h[7];\n  var eh = this.h[8];\n  var el = this.h[9];\n  var fh = this.h[10];\n  var fl = this.h[11];\n  var gh = this.h[12];\n  var gl = this.h[13];\n  var hh = this.h[14];\n  var hl = this.h[15];\n\n  assert(this.k.length === W.length);\n  for (var i = 0; i < W.length; i += 2) {\n    var c0_hi = hh;\n    var c0_lo = hl;\n    var c1_hi = s1_512_hi(eh, el);\n    var c1_lo = s1_512_lo(eh, el);\n    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);\n    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);\n    var c3_hi = this.k[i];\n    var c3_lo = this.k[i + 1];\n    var c4_hi = W[i];\n    var c4_lo = W[i + 1];\n\n    var T1_hi = sum64_5_hi(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo,\n      c4_hi, c4_lo);\n    var T1_lo = sum64_5_lo(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo,\n      c4_hi, c4_lo);\n\n    c0_hi = s0_512_hi(ah, al);\n    c0_lo = s0_512_lo(ah, al);\n    c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);\n    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);\n\n    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);\n    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);\n\n    hh = gh;\n    hl = gl;\n\n    gh = fh;\n    gl = fl;\n\n    fh = eh;\n    fl = el;\n\n    eh = sum64_hi(dh, dl, T1_hi, T1_lo);\n    el = sum64_lo(dl, dl, T1_hi, T1_lo);\n\n    dh = ch;\n    dl = cl;\n\n    ch = bh;\n    cl = bl;\n\n    bh = ah;\n    bl = al;\n\n    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);\n    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);\n  }\n\n  sum64(this.h, 0, ah, al);\n  sum64(this.h, 2, bh, bl);\n  sum64(this.h, 4, ch, cl);\n  sum64(this.h, 6, dh, dl);\n  sum64(this.h, 8, eh, el);\n  sum64(this.h, 10, fh, fl);\n  sum64(this.h, 12, gh, gl);\n  sum64(this.h, 14, hh, hl);\n};\n\nSHA512.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n\nfunction ch64_hi(xh, xl, yh, yl, zh) {\n  var r = (xh & yh) ^ ((~xh) & zh);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction ch64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = (xl & yl) ^ ((~xl) & zl);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction maj64_hi(xh, xl, yh, yl, zh) {\n  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction maj64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 28);\n  var c1_hi = rotr64_hi(xl, xh, 2);  // 34\n  var c2_hi = rotr64_hi(xl, xh, 7);  // 39\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 28);\n  var c1_lo = rotr64_lo(xl, xh, 2);  // 34\n  var c2_lo = rotr64_lo(xl, xh, 7);  // 39\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 14);\n  var c1_hi = rotr64_hi(xh, xl, 18);\n  var c2_hi = rotr64_hi(xl, xh, 9);  // 41\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 14);\n  var c1_lo = rotr64_lo(xh, xl, 18);\n  var c2_lo = rotr64_lo(xl, xh, 9);  // 41\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 1);\n  var c1_hi = rotr64_hi(xh, xl, 8);\n  var c2_hi = shr64_hi(xh, xl, 7);\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 1);\n  var c1_lo = rotr64_lo(xh, xl, 8);\n  var c2_lo = shr64_lo(xh, xl, 7);\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 19);\n  var c1_hi = rotr64_hi(xl, xh, 29);  // 61\n  var c2_hi = shr64_hi(xh, xl, 6);\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 19);\n  var c1_lo = rotr64_lo(xl, xh, 29);  // 61\n  var c2_lo = shr64_lo(xh, xl, 6);\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n","'use strict';\n\nvar utils = require('../utils');\nvar rotr32 = utils.rotr32;\n\nfunction ft_1(s, x, y, z) {\n  if (s === 0)\n    return ch32(x, y, z);\n  if (s === 1 || s === 3)\n    return p32(x, y, z);\n  if (s === 2)\n    return maj32(x, y, z);\n}\nexports.ft_1 = ft_1;\n\nfunction ch32(x, y, z) {\n  return (x & y) ^ ((~x) & z);\n}\nexports.ch32 = ch32;\n\nfunction maj32(x, y, z) {\n  return (x & y) ^ (x & z) ^ (y & z);\n}\nexports.maj32 = maj32;\n\nfunction p32(x, y, z) {\n  return x ^ y ^ z;\n}\nexports.p32 = p32;\n\nfunction s0_256(x) {\n  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);\n}\nexports.s0_256 = s0_256;\n\nfunction s1_256(x) {\n  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);\n}\nexports.s1_256 = s1_256;\n\nfunction g0_256(x) {\n  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);\n}\nexports.g0_256 = g0_256;\n\nfunction g1_256(x) {\n  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);\n}\nexports.g1_256 = g1_256;\n","'use strict';\n\nvar assert = require('minimalistic-assert');\nvar inherits = require('inherits');\n\nexports.inherits = inherits;\n\nfunction isSurrogatePair(msg, i) {\n  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {\n    return false;\n  }\n  if (i < 0 || i + 1 >= msg.length) {\n    return false;\n  }\n  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;\n}\n\nfunction toArray(msg, enc) {\n  if (Array.isArray(msg))\n    return msg.slice();\n  if (!msg)\n    return [];\n  var res = [];\n  if (typeof msg === 'string') {\n    if (!enc) {\n      // Inspired by stringToUtf8ByteArray() in closure-library by Google\n      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143\n      // Apache License 2.0\n      // https://github.com/google/closure-library/blob/master/LICENSE\n      var p = 0;\n      for (var i = 0; i < msg.length; i++) {\n        var c = msg.charCodeAt(i);\n        if (c < 128) {\n          res[p++] = c;\n        } else if (c < 2048) {\n          res[p++] = (c >> 6) | 192;\n          res[p++] = (c & 63) | 128;\n        } else if (isSurrogatePair(msg, i)) {\n          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);\n          res[p++] = (c >> 18) | 240;\n          res[p++] = ((c >> 12) & 63) | 128;\n          res[p++] = ((c >> 6) & 63) | 128;\n          res[p++] = (c & 63) | 128;\n        } else {\n          res[p++] = (c >> 12) | 224;\n          res[p++] = ((c >> 6) & 63) | 128;\n          res[p++] = (c & 63) | 128;\n        }\n      }\n    } else if (enc === 'hex') {\n      msg = msg.replace(/[^a-z0-9]+/ig, '');\n      if (msg.length % 2 !== 0)\n        msg = '0' + msg;\n      for (i = 0; i < msg.length; i += 2)\n        res.push(parseInt(msg[i] + msg[i + 1], 16));\n    }\n  } else {\n    for (i = 0; i < msg.length; i++)\n      res[i] = msg[i] | 0;\n  }\n  return res;\n}\nexports.toArray = toArray;\n\nfunction toHex(msg) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++)\n    res += zero2(msg[i].toString(16));\n  return res;\n}\nexports.toHex = toHex;\n\nfunction htonl(w) {\n  var res = (w >>> 24) |\n            ((w >>> 8) & 0xff00) |\n            ((w << 8) & 0xff0000) |\n            ((w & 0xff) << 24);\n  return res >>> 0;\n}\nexports.htonl = htonl;\n\nfunction toHex32(msg, endian) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++) {\n    var w = msg[i];\n    if (endian === 'little')\n      w = htonl(w);\n    res += zero8(w.toString(16));\n  }\n  return res;\n}\nexports.toHex32 = toHex32;\n\nfunction zero2(word) {\n  if (word.length === 1)\n    return '0' + word;\n  else\n    return word;\n}\nexports.zero2 = zero2;\n\nfunction zero8(word) {\n  if (word.length === 7)\n    return '0' + word;\n  else if (word.length === 6)\n    return '00' + word;\n  else if (word.length === 5)\n    return '000' + word;\n  else if (word.length === 4)\n    return '0000' + word;\n  else if (word.length === 3)\n    return '00000' + word;\n  else if (word.length === 2)\n    return '000000' + word;\n  else if (word.length === 1)\n    return '0000000' + word;\n  else\n    return word;\n}\nexports.zero8 = zero8;\n\nfunction join32(msg, start, end, endian) {\n  var len = end - start;\n  assert(len % 4 === 0);\n  var res = new Array(len / 4);\n  for (var i = 0, k = start; i < res.length; i++, k += 4) {\n    var w;\n    if (endian === 'big')\n      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];\n    else\n      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];\n    res[i] = w >>> 0;\n  }\n  return res;\n}\nexports.join32 = join32;\n\nfunction split32(msg, endian) {\n  var res = new Array(msg.length * 4);\n  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {\n    var m = msg[i];\n    if (endian === 'big') {\n      res[k] = m >>> 24;\n      res[k + 1] = (m >>> 16) & 0xff;\n      res[k + 2] = (m >>> 8) & 0xff;\n      res[k + 3] = m & 0xff;\n    } else {\n      res[k + 3] = m >>> 24;\n      res[k + 2] = (m >>> 16) & 0xff;\n      res[k + 1] = (m >>> 8) & 0xff;\n      res[k] = m & 0xff;\n    }\n  }\n  return res;\n}\nexports.split32 = split32;\n\nfunction rotr32(w, b) {\n  return (w >>> b) | (w << (32 - b));\n}\nexports.rotr32 = rotr32;\n\nfunction rotl32(w, b) {\n  return (w << b) | (w >>> (32 - b));\n}\nexports.rotl32 = rotl32;\n\nfunction sum32(a, b) {\n  return (a + b) >>> 0;\n}\nexports.sum32 = sum32;\n\nfunction sum32_3(a, b, c) {\n  return (a + b + c) >>> 0;\n}\nexports.sum32_3 = sum32_3;\n\nfunction sum32_4(a, b, c, d) {\n  return (a + b + c + d) >>> 0;\n}\nexports.sum32_4 = sum32_4;\n\nfunction sum32_5(a, b, c, d, e) {\n  return (a + b + c + d + e) >>> 0;\n}\nexports.sum32_5 = sum32_5;\n\nfunction sum64(buf, pos, ah, al) {\n  var bh = buf[pos];\n  var bl = buf[pos + 1];\n\n  var lo = (al + bl) >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  buf[pos] = hi >>> 0;\n  buf[pos + 1] = lo;\n}\nexports.sum64 = sum64;\n\nfunction sum64_hi(ah, al, bh, bl) {\n  var lo = (al + bl) >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  return hi >>> 0;\n}\nexports.sum64_hi = sum64_hi;\n\nfunction sum64_lo(ah, al, bh, bl) {\n  var lo = al + bl;\n  return lo >>> 0;\n}\nexports.sum64_lo = sum64_lo;\n\nfunction sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {\n  var carry = 0;\n  var lo = al;\n  lo = (lo + bl) >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = (lo + cl) >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = (lo + dl) >>> 0;\n  carry += lo < dl ? 1 : 0;\n\n  var hi = ah + bh + ch + dh + carry;\n  return hi >>> 0;\n}\nexports.sum64_4_hi = sum64_4_hi;\n\nfunction sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {\n  var lo = al + bl + cl + dl;\n  return lo >>> 0;\n}\nexports.sum64_4_lo = sum64_4_lo;\n\nfunction sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var carry = 0;\n  var lo = al;\n  lo = (lo + bl) >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = (lo + cl) >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = (lo + dl) >>> 0;\n  carry += lo < dl ? 1 : 0;\n  lo = (lo + el) >>> 0;\n  carry += lo < el ? 1 : 0;\n\n  var hi = ah + bh + ch + dh + eh + carry;\n  return hi >>> 0;\n}\nexports.sum64_5_hi = sum64_5_hi;\n\nfunction sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var lo = al + bl + cl + dl + el;\n\n  return lo >>> 0;\n}\nexports.sum64_5_lo = sum64_5_lo;\n\nfunction rotr64_hi(ah, al, num) {\n  var r = (al << (32 - num)) | (ah >>> num);\n  return r >>> 0;\n}\nexports.rotr64_hi = rotr64_hi;\n\nfunction rotr64_lo(ah, al, num) {\n  var r = (ah << (32 - num)) | (al >>> num);\n  return r >>> 0;\n}\nexports.rotr64_lo = rotr64_lo;\n\nfunction shr64_hi(ah, al, num) {\n  return ah >>> num;\n}\nexports.shr64_hi = shr64_hi;\n\nfunction shr64_lo(ah, al, num) {\n  var r = (ah << (32 - num)) | (al >>> num);\n  return r >>> 0;\n}\nexports.shr64_lo = shr64_lo;\n","'use strict';\n\nvar hash = require('hash.js');\nvar utils = require('minimalistic-crypto-utils');\nvar assert = require('minimalistic-assert');\n\nfunction HmacDRBG(options) {\n  if (!(this instanceof HmacDRBG))\n    return new HmacDRBG(options);\n  this.hash = options.hash;\n  this.predResist = !!options.predResist;\n\n  this.outLen = this.hash.outSize;\n  this.minEntropy = options.minEntropy || this.hash.hmacStrength;\n\n  this._reseed = null;\n  this.reseedInterval = null;\n  this.K = null;\n  this.V = null;\n\n  var entropy = utils.toArray(options.entropy, options.entropyEnc || 'hex');\n  var nonce = utils.toArray(options.nonce, options.nonceEnc || 'hex');\n  var pers = utils.toArray(options.pers, options.persEnc || 'hex');\n  assert(entropy.length >= (this.minEntropy / 8),\n         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');\n  this._init(entropy, nonce, pers);\n}\nmodule.exports = HmacDRBG;\n\nHmacDRBG.prototype._init = function init(entropy, nonce, pers) {\n  var seed = entropy.concat(nonce).concat(pers);\n\n  this.K = new Array(this.outLen / 8);\n  this.V = new Array(this.outLen / 8);\n  for (var i = 0; i < this.V.length; i++) {\n    this.K[i] = 0x00;\n    this.V[i] = 0x01;\n  }\n\n  this._update(seed);\n  this._reseed = 1;\n  this.reseedInterval = 0x1000000000000;  // 2^48\n};\n\nHmacDRBG.prototype._hmac = function hmac() {\n  return new hash.hmac(this.hash, this.K);\n};\n\nHmacDRBG.prototype._update = function update(seed) {\n  var kmac = this._hmac()\n                 .update(this.V)\n                 .update([ 0x00 ]);\n  if (seed)\n    kmac = kmac.update(seed);\n  this.K = kmac.digest();\n  this.V = this._hmac().update(this.V).digest();\n  if (!seed)\n    return;\n\n  this.K = this._hmac()\n               .update(this.V)\n               .update([ 0x01 ])\n               .update(seed)\n               .digest();\n  this.V = this._hmac().update(this.V).digest();\n};\n\nHmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {\n  // Optional entropy enc\n  if (typeof entropyEnc !== 'string') {\n    addEnc = add;\n    add = entropyEnc;\n    entropyEnc = null;\n  }\n\n  entropy = utils.toArray(entropy, entropyEnc);\n  add = utils.toArray(add, addEnc);\n\n  assert(entropy.length >= (this.minEntropy / 8),\n         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');\n\n  this._update(entropy.concat(add || []));\n  this._reseed = 1;\n};\n\nHmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {\n  if (this._reseed > this.reseedInterval)\n    throw new Error('Reseed is required');\n\n  // Optional encoding\n  if (typeof enc !== 'string') {\n    addEnc = add;\n    add = enc;\n    enc = null;\n  }\n\n  // Optional additional data\n  if (add) {\n    add = utils.toArray(add, addEnc || 'hex');\n    this._update(add);\n  }\n\n  var temp = [];\n  while (temp.length < len) {\n    this.V = this._hmac().update(this.V).digest();\n    temp = temp.concat(this.V);\n  }\n\n  var res = temp.slice(0, len);\n  this._update(add);\n  this._reseed++;\n  return utils.encode(res, enc);\n};\n","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      ctor.prototype = Object.create(superCtor.prototype, {\n        constructor: {\n          value: ctor,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      })\n    }\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      var TempCtor = function () {}\n      TempCtor.prototype = superCtor.prototype\n      ctor.prototype = new TempCtor()\n      ctor.prototype.constructor = ctor\n    }\n  }\n}\n","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n","'use strict';\n\nvar traverse = module.exports = function (schema, opts, cb) {\n  // Legacy support for v0.3.1 and earlier.\n  if (typeof opts == 'function') {\n    cb = opts;\n    opts = {};\n  }\n\n  cb = opts.cb || cb;\n  var pre = (typeof cb == 'function') ? cb : cb.pre || function() {};\n  var post = cb.post || function() {};\n\n  _traverse(opts, pre, post, schema, '', schema);\n};\n\n\ntraverse.keywords = {\n  additionalItems: true,\n  items: true,\n  contains: true,\n  additionalProperties: true,\n  propertyNames: true,\n  not: true\n};\n\ntraverse.arrayKeywords = {\n  items: true,\n  allOf: true,\n  anyOf: true,\n  oneOf: true\n};\n\ntraverse.propsKeywords = {\n  definitions: true,\n  properties: true,\n  patternProperties: true,\n  dependencies: true\n};\n\ntraverse.skipKeywords = {\n  default: true,\n  enum: true,\n  const: true,\n  required: true,\n  maximum: true,\n  minimum: true,\n  exclusiveMaximum: true,\n  exclusiveMinimum: true,\n  multipleOf: true,\n  maxLength: true,\n  minLength: true,\n  pattern: true,\n  format: true,\n  maxItems: true,\n  minItems: true,\n  uniqueItems: true,\n  maxProperties: true,\n  minProperties: true\n};\n\n\nfunction _traverse(opts, pre, post, schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex) {\n  if (schema && typeof schema == 'object' && !Array.isArray(schema)) {\n    pre(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);\n    for (var key in schema) {\n      var sch = schema[key];\n      if (Array.isArray(sch)) {\n        if (key in traverse.arrayKeywords) {\n          for (var i=0; i<sch.length; i++)\n            _traverse(opts, pre, post, sch[i], jsonPtr + '/' + key + '/' + i, rootSchema, jsonPtr, key, schema, i);\n        }\n      } else if (key in traverse.propsKeywords) {\n        if (sch && typeof sch == 'object') {\n          for (var prop in sch)\n            _traverse(opts, pre, post, sch[prop], jsonPtr + '/' + key + '/' + escapeJsonPtr(prop), rootSchema, jsonPtr, key, schema, prop);\n        }\n      } else if (key in traverse.keywords || (opts.allKeys && !(key in traverse.skipKeywords))) {\n        _traverse(opts, pre, post, sch, jsonPtr + '/' + key, rootSchema, jsonPtr, key, schema);\n      }\n    }\n    post(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);\n  }\n}\n\n\nfunction escapeJsonPtr(str) {\n  return str.replace(/~/g, '~0').replace(/\\//g, '~1');\n}\n","'use strict'\nvar inherits = require('inherits')\nvar HashBase = require('hash-base')\nvar Buffer = require('safe-buffer').Buffer\n\nvar ARRAY16 = new Array(16)\n\nfunction MD5 () {\n  HashBase.call(this, 64)\n\n  // state\n  this._a = 0x67452301\n  this._b = 0xefcdab89\n  this._c = 0x98badcfe\n  this._d = 0x10325476\n}\n\ninherits(MD5, HashBase)\n\nMD5.prototype._update = function () {\n  var M = ARRAY16\n  for (var i = 0; i < 16; ++i) M[i] = this._block.readInt32LE(i * 4)\n\n  var a = this._a\n  var b = this._b\n  var c = this._c\n  var d = this._d\n\n  a = fnF(a, b, c, d, M[0], 0xd76aa478, 7)\n  d = fnF(d, a, b, c, M[1], 0xe8c7b756, 12)\n  c = fnF(c, d, a, b, M[2], 0x242070db, 17)\n  b = fnF(b, c, d, a, M[3], 0xc1bdceee, 22)\n  a = fnF(a, b, c, d, M[4], 0xf57c0faf, 7)\n  d = fnF(d, a, b, c, M[5], 0x4787c62a, 12)\n  c = fnF(c, d, a, b, M[6], 0xa8304613, 17)\n  b = fnF(b, c, d, a, M[7], 0xfd469501, 22)\n  a = fnF(a, b, c, d, M[8], 0x698098d8, 7)\n  d = fnF(d, a, b, c, M[9], 0x8b44f7af, 12)\n  c = fnF(c, d, a, b, M[10], 0xffff5bb1, 17)\n  b = fnF(b, c, d, a, M[11], 0x895cd7be, 22)\n  a = fnF(a, b, c, d, M[12], 0x6b901122, 7)\n  d = fnF(d, a, b, c, M[13], 0xfd987193, 12)\n  c = fnF(c, d, a, b, M[14], 0xa679438e, 17)\n  b = fnF(b, c, d, a, M[15], 0x49b40821, 22)\n\n  a = fnG(a, b, c, d, M[1], 0xf61e2562, 5)\n  d = fnG(d, a, b, c, M[6], 0xc040b340, 9)\n  c = fnG(c, d, a, b, M[11], 0x265e5a51, 14)\n  b = fnG(b, c, d, a, M[0], 0xe9b6c7aa, 20)\n  a = fnG(a, b, c, d, M[5], 0xd62f105d, 5)\n  d = fnG(d, a, b, c, M[10], 0x02441453, 9)\n  c = fnG(c, d, a, b, M[15], 0xd8a1e681, 14)\n  b = fnG(b, c, d, a, M[4], 0xe7d3fbc8, 20)\n  a = fnG(a, b, c, d, M[9], 0x21e1cde6, 5)\n  d = fnG(d, a, b, c, M[14], 0xc33707d6, 9)\n  c = fnG(c, d, a, b, M[3], 0xf4d50d87, 14)\n  b = fnG(b, c, d, a, M[8], 0x455a14ed, 20)\n  a = fnG(a, b, c, d, M[13], 0xa9e3e905, 5)\n  d = fnG(d, a, b, c, M[2], 0xfcefa3f8, 9)\n  c = fnG(c, d, a, b, M[7], 0x676f02d9, 14)\n  b = fnG(b, c, d, a, M[12], 0x8d2a4c8a, 20)\n\n  a = fnH(a, b, c, d, M[5], 0xfffa3942, 4)\n  d = fnH(d, a, b, c, M[8], 0x8771f681, 11)\n  c = fnH(c, d, a, b, M[11], 0x6d9d6122, 16)\n  b = fnH(b, c, d, a, M[14], 0xfde5380c, 23)\n  a = fnH(a, b, c, d, M[1], 0xa4beea44, 4)\n  d = fnH(d, a, b, c, M[4], 0x4bdecfa9, 11)\n  c = fnH(c, d, a, b, M[7], 0xf6bb4b60, 16)\n  b = fnH(b, c, d, a, M[10], 0xbebfbc70, 23)\n  a = fnH(a, b, c, d, M[13], 0x289b7ec6, 4)\n  d = fnH(d, a, b, c, M[0], 0xeaa127fa, 11)\n  c = fnH(c, d, a, b, M[3], 0xd4ef3085, 16)\n  b = fnH(b, c, d, a, M[6], 0x04881d05, 23)\n  a = fnH(a, b, c, d, M[9], 0xd9d4d039, 4)\n  d = fnH(d, a, b, c, M[12], 0xe6db99e5, 11)\n  c = fnH(c, d, a, b, M[15], 0x1fa27cf8, 16)\n  b = fnH(b, c, d, a, M[2], 0xc4ac5665, 23)\n\n  a = fnI(a, b, c, d, M[0], 0xf4292244, 6)\n  d = fnI(d, a, b, c, M[7], 0x432aff97, 10)\n  c = fnI(c, d, a, b, M[14], 0xab9423a7, 15)\n  b = fnI(b, c, d, a, M[5], 0xfc93a039, 21)\n  a = fnI(a, b, c, d, M[12], 0x655b59c3, 6)\n  d = fnI(d, a, b, c, M[3], 0x8f0ccc92, 10)\n  c = fnI(c, d, a, b, M[10], 0xffeff47d, 15)\n  b = fnI(b, c, d, a, M[1], 0x85845dd1, 21)\n  a = fnI(a, b, c, d, M[8], 0x6fa87e4f, 6)\n  d = fnI(d, a, b, c, M[15], 0xfe2ce6e0, 10)\n  c = fnI(c, d, a, b, M[6], 0xa3014314, 15)\n  b = fnI(b, c, d, a, M[13], 0x4e0811a1, 21)\n  a = fnI(a, b, c, d, M[4], 0xf7537e82, 6)\n  d = fnI(d, a, b, c, M[11], 0xbd3af235, 10)\n  c = fnI(c, d, a, b, M[2], 0x2ad7d2bb, 15)\n  b = fnI(b, c, d, a, M[9], 0xeb86d391, 21)\n\n  this._a = (this._a + a) | 0\n  this._b = (this._b + b) | 0\n  this._c = (this._c + c) | 0\n  this._d = (this._d + d) | 0\n}\n\nMD5.prototype._digest = function () {\n  // create padding and handle blocks\n  this._block[this._blockOffset++] = 0x80\n  if (this._blockOffset > 56) {\n    this._block.fill(0, this._blockOffset, 64)\n    this._update()\n    this._blockOffset = 0\n  }\n\n  this._block.fill(0, this._blockOffset, 56)\n  this._block.writeUInt32LE(this._length[0], 56)\n  this._block.writeUInt32LE(this._length[1], 60)\n  this._update()\n\n  // produce result\n  var buffer = Buffer.allocUnsafe(16)\n  buffer.writeInt32LE(this._a, 0)\n  buffer.writeInt32LE(this._b, 4)\n  buffer.writeInt32LE(this._c, 8)\n  buffer.writeInt32LE(this._d, 12)\n  return buffer\n}\n\nfunction rotl (x, n) {\n  return (x << n) | (x >>> (32 - n))\n}\n\nfunction fnF (a, b, c, d, m, k, s) {\n  return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + b) | 0\n}\n\nfunction fnG (a, b, c, d, m, k, s) {\n  return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + b) | 0\n}\n\nfunction fnH (a, b, c, d, m, k, s) {\n  return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + b) | 0\n}\n\nfunction fnI (a, b, c, d, m, k, s) {\n  return (rotl((a + ((c ^ (b | (~d)))) + m + k) | 0, s) + b) | 0\n}\n\nmodule.exports = MD5\n","var bn = require('bn.js');\nvar brorand = require('brorand');\n\nfunction MillerRabin(rand) {\n  this.rand = rand || new brorand.Rand();\n}\nmodule.exports = MillerRabin;\n\nMillerRabin.create = function create(rand) {\n  return new MillerRabin(rand);\n};\n\nMillerRabin.prototype._randbelow = function _randbelow(n) {\n  var len = n.bitLength();\n  var min_bytes = Math.ceil(len / 8);\n\n  // Generage random bytes until a number less than n is found.\n  // This ensures that 0..n-1 have an equal probability of being selected.\n  do\n    var a = new bn(this.rand.generate(min_bytes));\n  while (a.cmp(n) >= 0);\n\n  return a;\n};\n\nMillerRabin.prototype._randrange = function _randrange(start, stop) {\n  // Generate a random number greater than or equal to start and less than stop.\n  var size = stop.sub(start);\n  return start.add(this._randbelow(size));\n};\n\nMillerRabin.prototype.test = function test(n, k, cb) {\n  var len = n.bitLength();\n  var red = bn.mont(n);\n  var rone = new bn(1).toRed(red);\n\n  if (!k)\n    k = Math.max(1, (len / 48) | 0);\n\n  // Find d and s, (n - 1) = (2 ^ s) * d;\n  var n1 = n.subn(1);\n  for (var s = 0; !n1.testn(s); s++) {}\n  var d = n.shrn(s);\n\n  var rn1 = n1.toRed(red);\n\n  var prime = true;\n  for (; k > 0; k--) {\n    var a = this._randrange(new bn(2), n1);\n    if (cb)\n      cb(a);\n\n    var x = a.toRed(red).redPow(d);\n    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)\n      continue;\n\n    for (var i = 1; i < s; i++) {\n      x = x.redSqr();\n\n      if (x.cmp(rone) === 0)\n        return false;\n      if (x.cmp(rn1) === 0)\n        break;\n    }\n\n    if (i === s)\n      return false;\n  }\n\n  return prime;\n};\n\nMillerRabin.prototype.getDivisor = function getDivisor(n, k) {\n  var len = n.bitLength();\n  var red = bn.mont(n);\n  var rone = new bn(1).toRed(red);\n\n  if (!k)\n    k = Math.max(1, (len / 48) | 0);\n\n  // Find d and s, (n - 1) = (2 ^ s) * d;\n  var n1 = n.subn(1);\n  for (var s = 0; !n1.testn(s); s++) {}\n  var d = n.shrn(s);\n\n  var rn1 = n1.toRed(red);\n\n  for (; k > 0; k--) {\n    var a = this._randrange(new bn(2), n1);\n\n    var g = n.gcd(a);\n    if (g.cmpn(1) !== 0)\n      return g;\n\n    var x = a.toRed(red).redPow(d);\n    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)\n      continue;\n\n    for (var i = 1; i < s; i++) {\n      x = x.redSqr();\n\n      if (x.cmp(rone) === 0)\n        return x.fromRed().subn(1).gcd(n);\n      if (x.cmp(rn1) === 0)\n        break;\n    }\n\n    if (i === s) {\n      x = x.redSqr();\n      return x.fromRed().subn(1).gcd(n);\n    }\n  }\n\n  return false;\n};\n","/*!\n * mime-db\n * Copyright(c) 2014 Jonathan Ong\n * MIT Licensed\n */\n\n/**\n * Module exports.\n */\n\nmodule.exports = require('./db.json')\n","/*!\n * mime-types\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar db = require('mime-db')\nvar extname = require('path').extname\n\n/**\n * Module variables.\n * @private\n */\n\nvar EXTRACT_TYPE_REGEXP = /^\\s*([^;\\s]*)(?:;|\\s|$)/\nvar TEXT_TYPE_REGEXP = /^text\\//i\n\n/**\n * Module exports.\n * @public\n */\n\nexports.charset = charset\nexports.charsets = { lookup: charset }\nexports.contentType = contentType\nexports.extension = extension\nexports.extensions = Object.create(null)\nexports.lookup = lookup\nexports.types = Object.create(null)\n\n// Populate the extensions/types maps\npopulateMaps(exports.extensions, exports.types)\n\n/**\n * Get the default charset for a MIME type.\n *\n * @param {string} type\n * @return {boolean|string}\n */\n\nfunction charset (type) {\n  if (!type || typeof type !== 'string') {\n    return false\n  }\n\n  // TODO: use media-typer\n  var match = EXTRACT_TYPE_REGEXP.exec(type)\n  var mime = match && db[match[1].toLowerCase()]\n\n  if (mime && mime.charset) {\n    return mime.charset\n  }\n\n  // default text/* to utf-8\n  if (match && TEXT_TYPE_REGEXP.test(match[1])) {\n    return 'UTF-8'\n  }\n\n  return false\n}\n\n/**\n * Create a full Content-Type header given a MIME type or extension.\n *\n * @param {string} str\n * @return {boolean|string}\n */\n\nfunction contentType (str) {\n  // TODO: should this even be in this module?\n  if (!str || typeof str !== 'string') {\n    return false\n  }\n\n  var mime = str.indexOf('/') === -1\n    ? exports.lookup(str)\n    : str\n\n  if (!mime) {\n    return false\n  }\n\n  // TODO: use content-type or other module\n  if (mime.indexOf('charset') === -1) {\n    var charset = exports.charset(mime)\n    if (charset) mime += '; charset=' + charset.toLowerCase()\n  }\n\n  return mime\n}\n\n/**\n * Get the default extension for a MIME type.\n *\n * @param {string} type\n * @return {boolean|string}\n */\n\nfunction extension (type) {\n  if (!type || typeof type !== 'string') {\n    return false\n  }\n\n  // TODO: use media-typer\n  var match = EXTRACT_TYPE_REGEXP.exec(type)\n\n  // get extensions\n  var exts = match && exports.extensions[match[1].toLowerCase()]\n\n  if (!exts || !exts.length) {\n    return false\n  }\n\n  return exts[0]\n}\n\n/**\n * Lookup the MIME type for a file path/extension.\n *\n * @param {string} path\n * @return {boolean|string}\n */\n\nfunction lookup (path) {\n  if (!path || typeof path !== 'string') {\n    return false\n  }\n\n  // get the extension (\"ext\" or \".ext\" or full path)\n  var extension = extname('x.' + path)\n    .toLowerCase()\n    .substr(1)\n\n  if (!extension) {\n    return false\n  }\n\n  return exports.types[extension] || false\n}\n\n/**\n * Populate the extensions and types maps.\n * @private\n */\n\nfunction populateMaps (extensions, types) {\n  // source preference (least -> most)\n  var preference = ['nginx', 'apache', undefined, 'iana']\n\n  Object.keys(db).forEach(function forEachMimeType (type) {\n    var mime = db[type]\n    var exts = mime.extensions\n\n    if (!exts || !exts.length) {\n      return\n    }\n\n    // mime -> extensions\n    extensions[type] = exts\n\n    // extension -> mime\n    for (var i = 0; i < exts.length; i++) {\n      var extension = exts[i]\n\n      if (types[extension]) {\n        var from = preference.indexOf(db[types[extension]].source)\n        var to = preference.indexOf(mime.source)\n\n        if (types[extension] !== 'application/octet-stream' &&\n          (from > to || (from === to && types[extension].substr(0, 12) === 'application/'))) {\n          // skip the remapping\n          continue\n        }\n      }\n\n      // set the extension -> mime\n      types[extension] = type\n    }\n  })\n}\n","module.exports = assert;\n\nfunction assert(val, msg) {\n  if (!val)\n    throw new Error(msg || 'Assertion failed');\n}\n\nassert.equal = function assertEqual(l, r, msg) {\n  if (l != r)\n    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));\n};\n","'use strict';\n\nvar utils = exports;\n\nfunction toArray(msg, enc) {\n  if (Array.isArray(msg))\n    return msg.slice();\n  if (!msg)\n    return [];\n  var res = [];\n  if (typeof msg !== 'string') {\n    for (var i = 0; i < msg.length; i++)\n      res[i] = msg[i] | 0;\n    return res;\n  }\n  if (enc === 'hex') {\n    msg = msg.replace(/[^a-z0-9]+/ig, '');\n    if (msg.length % 2 !== 0)\n      msg = '0' + msg;\n    for (var i = 0; i < msg.length; i += 2)\n      res.push(parseInt(msg[i] + msg[i + 1], 16));\n  } else {\n    for (var i = 0; i < msg.length; i++) {\n      var c = msg.charCodeAt(i);\n      var hi = c >> 8;\n      var lo = c & 0xff;\n      if (hi)\n        res.push(hi, lo);\n      else\n        res.push(lo);\n    }\n  }\n  return res;\n}\nutils.toArray = toArray;\n\nfunction zero2(word) {\n  if (word.length === 1)\n    return '0' + word;\n  else\n    return word;\n}\nutils.zero2 = zero2;\n\nfunction toHex(msg) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++)\n    res += zero2(msg[i].toString(16));\n  return res;\n}\nutils.toHex = toHex;\n\nutils.encode = function encode(arr, enc) {\n  if (enc === 'hex')\n    return toHex(arr);\n  else\n    return arr;\n};\n","module.exports = (nextConfig = {}) => {\n  return Object.assign({}, nextConfig, {\n    webpack(config, options) {\n      const { isServer } = options;\n      nextConfig = Object.assign({ inlineImageLimit: 8192, assetPrefix: \"\" }, nextConfig);\n\n      if (!options.defaultLoaders) {\n        throw new Error(\n          'This plugin is not compatible with Next.js versions below 5.0.0 https://err.sh/next-plugins/upgrade'\n        )\n      }\n\n      config.module.rules.push({\n        test: /\\.(jpe?g|png|svg|gif|ico|webp|jp2)$/,\n        issuer: {\n          // Next.js already handles url() in css/sass/scss files\n          test: /\\.\\w+(?<!(s?c|sa)ss)$/i,\n        },\n        exclude: nextConfig.exclude,\n        use: [\n          {\n            loader: require.resolve(\"url-loader\"),\n            options: {\n              limit: nextConfig.inlineImageLimit,\n              fallback: require.resolve(\"file-loader\"),\n              publicPath: `${nextConfig.assetPrefix}/_next/static/images/`,\n              outputPath: `${isServer ? \"../\" : \"\"}static/images/`,\n              name: \"[name]-[hash].[ext]\",\n              esModule: nextConfig.esModule || false\n            }\n          }\n        ]\n      });\n\n      if (typeof nextConfig.webpack === 'function') {\n        return nextConfig.webpack(config, options)\n      }\n\n      return config\n    }\n  })\n}\n","\n    (window.__NEXT_P=window.__NEXT_P||[]).push([\"/\", function() {\n      var mod = require(\"D:\\\\github\\\\nitp-web-front\\\\pages\\\\index.js\")\n      if(module.hot) {\n        module.hot.accept(\"D:\\\\github\\\\nitp-web-front\\\\pages\\\\index.js\", function() {\n          if(!next.router.components[\"/\"]) return\n          var updatedPage = require(\"D:\\\\github\\\\nitp-web-front\\\\pages\\\\index.js\")\n          next.router.update(\"/\", updatedPage)\n        })\n      }\n      return mod\n    }]);\n  ","// from https://github.com/indutny/self-signed/blob/gh-pages/lib/asn1.js\n// Fedor, you are amazing.\n'use strict'\n\nvar asn1 = require('asn1.js')\n\nexports.certificate = require('./certificate')\n\nvar RSAPrivateKey = asn1.define('RSAPrivateKey', function () {\n  this.seq().obj(\n    this.key('version').int(),\n    this.key('modulus').int(),\n    this.key('publicExponent').int(),\n    this.key('privateExponent').int(),\n    this.key('prime1').int(),\n    this.key('prime2').int(),\n    this.key('exponent1').int(),\n    this.key('exponent2').int(),\n    this.key('coefficient').int()\n  )\n})\nexports.RSAPrivateKey = RSAPrivateKey\n\nvar RSAPublicKey = asn1.define('RSAPublicKey', function () {\n  this.seq().obj(\n    this.key('modulus').int(),\n    this.key('publicExponent').int()\n  )\n})\nexports.RSAPublicKey = RSAPublicKey\n\nvar PublicKey = asn1.define('SubjectPublicKeyInfo', function () {\n  this.seq().obj(\n    this.key('algorithm').use(AlgorithmIdentifier),\n    this.key('subjectPublicKey').bitstr()\n  )\n})\nexports.PublicKey = PublicKey\n\nvar AlgorithmIdentifier = asn1.define('AlgorithmIdentifier', function () {\n  this.seq().obj(\n    this.key('algorithm').objid(),\n    this.key('none').null_().optional(),\n    this.key('curve').objid().optional(),\n    this.key('params').seq().obj(\n      this.key('p').int(),\n      this.key('q').int(),\n      this.key('g').int()\n    ).optional()\n  )\n})\n\nvar PrivateKeyInfo = asn1.define('PrivateKeyInfo', function () {\n  this.seq().obj(\n    this.key('version').int(),\n    this.key('algorithm').use(AlgorithmIdentifier),\n    this.key('subjectPrivateKey').octstr()\n  )\n})\nexports.PrivateKey = PrivateKeyInfo\nvar EncryptedPrivateKeyInfo = asn1.define('EncryptedPrivateKeyInfo', function () {\n  this.seq().obj(\n    this.key('algorithm').seq().obj(\n      this.key('id').objid(),\n      this.key('decrypt').seq().obj(\n        this.key('kde').seq().obj(\n          this.key('id').objid(),\n          this.key('kdeparams').seq().obj(\n            this.key('salt').octstr(),\n            this.key('iters').int()\n          )\n        ),\n        this.key('cipher').seq().obj(\n          this.key('algo').objid(),\n          this.key('iv').octstr()\n        )\n      )\n    ),\n    this.key('subjectPrivateKey').octstr()\n  )\n})\n\nexports.EncryptedPrivateKey = EncryptedPrivateKeyInfo\n\nvar DSAPrivateKey = asn1.define('DSAPrivateKey', function () {\n  this.seq().obj(\n    this.key('version').int(),\n    this.key('p').int(),\n    this.key('q').int(),\n    this.key('g').int(),\n    this.key('pub_key').int(),\n    this.key('priv_key').int()\n  )\n})\nexports.DSAPrivateKey = DSAPrivateKey\n\nexports.DSAparam = asn1.define('DSAparam', function () {\n  this.int()\n})\n\nvar ECPrivateKey = asn1.define('ECPrivateKey', function () {\n  this.seq().obj(\n    this.key('version').int(),\n    this.key('privateKey').octstr(),\n    this.key('parameters').optional().explicit(0).use(ECParameters),\n    this.key('publicKey').optional().explicit(1).bitstr()\n  )\n})\nexports.ECPrivateKey = ECPrivateKey\n\nvar ECParameters = asn1.define('ECParameters', function () {\n  this.choice({\n    namedCurve: this.objid()\n  })\n})\n\nexports.signature = asn1.define('signature', function () {\n  this.seq().obj(\n    this.key('r').int(),\n    this.key('s').int()\n  )\n})\n","// from https://github.com/Rantanen/node-dtls/blob/25a7dc861bda38cfeac93a723500eea4f0ac2e86/Certificate.js\n// thanks to @Rantanen\n\n'use strict'\n\nvar asn = require('asn1.js')\n\nvar Time = asn.define('Time', function () {\n  this.choice({\n    utcTime: this.utctime(),\n    generalTime: this.gentime()\n  })\n})\n\nvar AttributeTypeValue = asn.define('AttributeTypeValue', function () {\n  this.seq().obj(\n    this.key('type').objid(),\n    this.key('value').any()\n  )\n})\n\nvar AlgorithmIdentifier = asn.define('AlgorithmIdentifier', function () {\n  this.seq().obj(\n    this.key('algorithm').objid(),\n    this.key('parameters').optional(),\n    this.key('curve').objid().optional()\n  )\n})\n\nvar SubjectPublicKeyInfo = asn.define('SubjectPublicKeyInfo', function () {\n  this.seq().obj(\n    this.key('algorithm').use(AlgorithmIdentifier),\n    this.key('subjectPublicKey').bitstr()\n  )\n})\n\nvar RelativeDistinguishedName = asn.define('RelativeDistinguishedName', function () {\n  this.setof(AttributeTypeValue)\n})\n\nvar RDNSequence = asn.define('RDNSequence', function () {\n  this.seqof(RelativeDistinguishedName)\n})\n\nvar Name = asn.define('Name', function () {\n  this.choice({\n    rdnSequence: this.use(RDNSequence)\n  })\n})\n\nvar Validity = asn.define('Validity', function () {\n  this.seq().obj(\n    this.key('notBefore').use(Time),\n    this.key('notAfter').use(Time)\n  )\n})\n\nvar Extension = asn.define('Extension', function () {\n  this.seq().obj(\n    this.key('extnID').objid(),\n    this.key('critical').bool().def(false),\n    this.key('extnValue').octstr()\n  )\n})\n\nvar TBSCertificate = asn.define('TBSCertificate', function () {\n  this.seq().obj(\n    this.key('version').explicit(0).int().optional(),\n    this.key('serialNumber').int(),\n    this.key('signature').use(AlgorithmIdentifier),\n    this.key('issuer').use(Name),\n    this.key('validity').use(Validity),\n    this.key('subject').use(Name),\n    this.key('subjectPublicKeyInfo').use(SubjectPublicKeyInfo),\n    this.key('issuerUniqueID').implicit(1).bitstr().optional(),\n    this.key('subjectUniqueID').implicit(2).bitstr().optional(),\n    this.key('extensions').explicit(3).seqof(Extension).optional()\n  )\n})\n\nvar X509Certificate = asn.define('X509Certificate', function () {\n  this.seq().obj(\n    this.key('tbsCertificate').use(TBSCertificate),\n    this.key('signatureAlgorithm').use(AlgorithmIdentifier),\n    this.key('signatureValue').bitstr()\n  )\n})\n\nmodule.exports = X509Certificate\n","// adapted from https://github.com/apatil/pemstrip\nvar findProc = /Proc-Type: 4,ENCRYPTED[\\n\\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\\n\\r]+([0-9A-z\\n\\r\\+\\/\\=]+)[\\n\\r]+/m\nvar startRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----/m\nvar fullRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----([0-9A-z\\n\\r\\+\\/\\=]+)-----END \\1-----$/m\nvar evp = require('evp_bytestokey')\nvar ciphers = require('browserify-aes')\nvar Buffer = require('safe-buffer').Buffer\nmodule.exports = function (okey, password) {\n  var key = okey.toString()\n  var match = key.match(findProc)\n  var decrypted\n  if (!match) {\n    var match2 = key.match(fullRegex)\n    decrypted = new Buffer(match2[2].replace(/[\\r\\n]/g, ''), 'base64')\n  } else {\n    var suite = 'aes' + match[1]\n    var iv = Buffer.from(match[2], 'hex')\n    var cipherText = Buffer.from(match[3].replace(/[\\r\\n]/g, ''), 'base64')\n    var cipherKey = evp(password, iv.slice(0, 8), parseInt(match[1], 10)).key\n    var out = []\n    var cipher = ciphers.createDecipheriv(suite, cipherKey, iv)\n    out.push(cipher.update(cipherText))\n    out.push(cipher.final())\n    decrypted = Buffer.concat(out)\n  }\n  var tag = key.match(startRegex)[1]\n  return {\n    tag: tag,\n    data: decrypted\n  }\n}\n","var asn1 = require('./asn1')\nvar aesid = require('./aesid.json')\nvar fixProc = require('./fixProc')\nvar ciphers = require('browserify-aes')\nvar compat = require('pbkdf2')\nvar Buffer = require('safe-buffer').Buffer\nmodule.exports = parseKeys\n\nfunction parseKeys (buffer) {\n  var password\n  if (typeof buffer === 'object' && !Buffer.isBuffer(buffer)) {\n    password = buffer.passphrase\n    buffer = buffer.key\n  }\n  if (typeof buffer === 'string') {\n    buffer = Buffer.from(buffer)\n  }\n\n  var stripped = fixProc(buffer, password)\n\n  var type = stripped.tag\n  var data = stripped.data\n  var subtype, ndata\n  switch (type) {\n    case 'CERTIFICATE':\n      ndata = asn1.certificate.decode(data, 'der').tbsCertificate.subjectPublicKeyInfo\n      // falls through\n    case 'PUBLIC KEY':\n      if (!ndata) {\n        ndata = asn1.PublicKey.decode(data, 'der')\n      }\n      subtype = ndata.algorithm.algorithm.join('.')\n      switch (subtype) {\n        case '1.2.840.113549.1.1.1':\n          return asn1.RSAPublicKey.decode(ndata.subjectPublicKey.data, 'der')\n        case '1.2.840.10045.2.1':\n          ndata.subjectPrivateKey = ndata.subjectPublicKey\n          return {\n            type: 'ec',\n            data: ndata\n          }\n        case '1.2.840.10040.4.1':\n          ndata.algorithm.params.pub_key = asn1.DSAparam.decode(ndata.subjectPublicKey.data, 'der')\n          return {\n            type: 'dsa',\n            data: ndata.algorithm.params\n          }\n        default: throw new Error('unknown key id ' + subtype)\n      }\n      throw new Error('unknown key type ' + type)\n    case 'ENCRYPTED PRIVATE KEY':\n      data = asn1.EncryptedPrivateKey.decode(data, 'der')\n      data = decrypt(data, password)\n      // falls through\n    case 'PRIVATE KEY':\n      ndata = asn1.PrivateKey.decode(data, 'der')\n      subtype = ndata.algorithm.algorithm.join('.')\n      switch (subtype) {\n        case '1.2.840.113549.1.1.1':\n          return asn1.RSAPrivateKey.decode(ndata.subjectPrivateKey, 'der')\n        case '1.2.840.10045.2.1':\n          return {\n            curve: ndata.algorithm.curve,\n            privateKey: asn1.ECPrivateKey.decode(ndata.subjectPrivateKey, 'der').privateKey\n          }\n        case '1.2.840.10040.4.1':\n          ndata.algorithm.params.priv_key = asn1.DSAparam.decode(ndata.subjectPrivateKey, 'der')\n          return {\n            type: 'dsa',\n            params: ndata.algorithm.params\n          }\n        default: throw new Error('unknown key id ' + subtype)\n      }\n      throw new Error('unknown key type ' + type)\n    case 'RSA PUBLIC KEY':\n      return asn1.RSAPublicKey.decode(data, 'der')\n    case 'RSA PRIVATE KEY':\n      return asn1.RSAPrivateKey.decode(data, 'der')\n    case 'DSA PRIVATE KEY':\n      return {\n        type: 'dsa',\n        params: asn1.DSAPrivateKey.decode(data, 'der')\n      }\n    case 'EC PRIVATE KEY':\n      data = asn1.ECPrivateKey.decode(data, 'der')\n      return {\n        curve: data.parameters.value,\n        privateKey: data.privateKey\n      }\n    default: throw new Error('unknown key type ' + type)\n  }\n}\nparseKeys.signature = asn1.signature\nfunction decrypt (data, password) {\n  var salt = data.algorithm.decrypt.kde.kdeparams.salt\n  var iters = parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(), 10)\n  var algo = aesid[data.algorithm.decrypt.cipher.algo.join('.')]\n  var iv = data.algorithm.decrypt.cipher.iv\n  var cipherText = data.subjectPrivateKey\n  var keylen = parseInt(algo.split('-')[1], 10) / 8\n  var key = compat.pbkdf2Sync(password, salt, iters, keylen, 'sha1')\n  var cipher = ciphers.createDecipheriv(algo, key, iv)\n  var out = []\n  out.push(cipher.update(cipherText))\n  out.push(cipher.final())\n  return Buffer.concat(out)\n}\n","// .dirname, .basename, and .extname methods are extracted from Node.js v8.11.1,\n// backported and transplited with Babel, with backwards-compat fixes\n\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// path.resolve([from ...], to)\n// posix version\nexports.resolve = function() {\n  var resolvedPath = '',\n      resolvedAbsolute = false;\n\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = (i >= 0) ? arguments[i] : process.cwd();\n\n    // Skip empty and invalid entries\n    if (typeof path !== 'string') {\n      throw new TypeError('Arguments to path.resolve must be strings');\n    } else if (!path) {\n      continue;\n    }\n\n    resolvedPath = path + '/' + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n};\n\n// path.normalize(path)\n// posix version\nexports.normalize = function(path) {\n  var isAbsolute = exports.isAbsolute(path),\n      trailingSlash = substr(path, -1) === '/';\n\n  // Normalize the path\n  path = normalizeArray(filter(path.split('/'), function(p) {\n    return !!p;\n  }), !isAbsolute).join('/');\n\n  if (!path && !isAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n\n  return (isAbsolute ? '/' : '') + path;\n};\n\n// posix version\nexports.isAbsolute = function(path) {\n  return path.charAt(0) === '/';\n};\n\n// posix version\nexports.join = function() {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return exports.normalize(filter(paths, function(p, index) {\n    if (typeof p !== 'string') {\n      throw new TypeError('Arguments to path.join must be strings');\n    }\n    return p;\n  }).join('/'));\n};\n\n\n// path.relative(from, to)\n// posix version\nexports.relative = function(from, to) {\n  from = exports.resolve(from).substr(1);\n  to = exports.resolve(to).substr(1);\n\n  function trim(arr) {\n    var start = 0;\n    for (; start < arr.length; start++) {\n      if (arr[start] !== '') break;\n    }\n\n    var end = arr.length - 1;\n    for (; end >= 0; end--) {\n      if (arr[end] !== '') break;\n    }\n\n    if (start > end) return [];\n    return arr.slice(start, end - start + 1);\n  }\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  var outputParts = [];\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n};\n\nexports.sep = '/';\nexports.delimiter = ':';\n\nexports.dirname = function (path) {\n  if (typeof path !== 'string') path = path + '';\n  if (path.length === 0) return '.';\n  var code = path.charCodeAt(0);\n  var hasRoot = code === 47 /*/*/;\n  var end = -1;\n  var matchedSlash = true;\n  for (var i = path.length - 1; i >= 1; --i) {\n    code = path.charCodeAt(i);\n    if (code === 47 /*/*/) {\n        if (!matchedSlash) {\n          end = i;\n          break;\n        }\n      } else {\n      // We saw the first non-path separator\n      matchedSlash = false;\n    }\n  }\n\n  if (end === -1) return hasRoot ? '/' : '.';\n  if (hasRoot && end === 1) {\n    // return '//';\n    // Backwards-compat fix:\n    return '/';\n  }\n  return path.slice(0, end);\n};\n\nfunction basename(path) {\n  if (typeof path !== 'string') path = path + '';\n\n  var start = 0;\n  var end = -1;\n  var matchedSlash = true;\n  var i;\n\n  for (i = path.length - 1; i >= 0; --i) {\n    if (path.charCodeAt(i) === 47 /*/*/) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          start = i + 1;\n          break;\n        }\n      } else if (end === -1) {\n      // We saw the first non-path separator, mark this as the end of our\n      // path component\n      matchedSlash = false;\n      end = i + 1;\n    }\n  }\n\n  if (end === -1) return '';\n  return path.slice(start, end);\n}\n\n// Uses a mixed approach for backwards-compatibility, as ext behavior changed\n// in new Node.js versions, so only basename() above is backported here\nexports.basename = function (path, ext) {\n  var f = basename(path);\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n};\n\nexports.extname = function (path) {\n  if (typeof path !== 'string') path = path + '';\n  var startDot = -1;\n  var startPart = 0;\n  var end = -1;\n  var matchedSlash = true;\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find\n  var preDotState = 0;\n  for (var i = path.length - 1; i >= 0; --i) {\n    var code = path.charCodeAt(i);\n    if (code === 47 /*/*/) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          startPart = i + 1;\n          break;\n        }\n        continue;\n      }\n    if (end === -1) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension\n      matchedSlash = false;\n      end = i + 1;\n    }\n    if (code === 46 /*.*/) {\n        // If this is our first dot, mark it as the start of our extension\n        if (startDot === -1)\n          startDot = i;\n        else if (preDotState !== 1)\n          preDotState = 1;\n    } else if (startDot !== -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension\n      preDotState = -1;\n    }\n  }\n\n  if (startDot === -1 || end === -1 ||\n      // We saw a non-dot character immediately before the dot\n      preDotState === 0 ||\n      // The (right-most) trimmed path component is exactly '..'\n      preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n    return '';\n  }\n  return path.slice(startDot, end);\n};\n\nfunction filter (xs, f) {\n    if (xs.filter) return xs.filter(f);\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        if (f(xs[i], i, xs)) res.push(xs[i]);\n    }\n    return res;\n}\n\n// String.prototype.substr - negative index don't work in IE8\nvar substr = 'ab'.substr(-1) === 'b'\n    ? function (str, start, len) { return str.substr(start, len) }\n    : function (str, start, len) {\n        if (start < 0) start = str.length + start;\n        return str.substr(start, len);\n    }\n;\n","exports.pbkdf2 = require('./lib/async')\nexports.pbkdf2Sync = require('./lib/sync')\n","var checkParameters = require('./precondition')\nvar defaultEncoding = require('./default-encoding')\nvar sync = require('./sync')\nvar Buffer = require('safe-buffer').Buffer\n\nvar ZERO_BUF\nvar subtle = global.crypto && global.crypto.subtle\nvar toBrowser = {\n  'sha': 'SHA-1',\n  'sha-1': 'SHA-1',\n  'sha1': 'SHA-1',\n  'sha256': 'SHA-256',\n  'sha-256': 'SHA-256',\n  'sha384': 'SHA-384',\n  'sha-384': 'SHA-384',\n  'sha-512': 'SHA-512',\n  'sha512': 'SHA-512'\n}\nvar checks = []\nfunction checkNative (algo) {\n  if (global.process && !global.process.browser) {\n    return Promise.resolve(false)\n  }\n  if (!subtle || !subtle.importKey || !subtle.deriveBits) {\n    return Promise.resolve(false)\n  }\n  if (checks[algo] !== undefined) {\n    return checks[algo]\n  }\n  ZERO_BUF = ZERO_BUF || Buffer.alloc(8)\n  var prom = browserPbkdf2(ZERO_BUF, ZERO_BUF, 10, 128, algo)\n    .then(function () {\n      return true\n    }).catch(function () {\n      return false\n    })\n  checks[algo] = prom\n  return prom\n}\n\nfunction browserPbkdf2 (password, salt, iterations, length, algo) {\n  return subtle.importKey(\n    'raw', password, {name: 'PBKDF2'}, false, ['deriveBits']\n  ).then(function (key) {\n    return subtle.deriveBits({\n      name: 'PBKDF2',\n      salt: salt,\n      iterations: iterations,\n      hash: {\n        name: algo\n      }\n    }, key, length << 3)\n  }).then(function (res) {\n    return Buffer.from(res)\n  })\n}\n\nfunction resolvePromise (promise, callback) {\n  promise.then(function (out) {\n    process.nextTick(function () {\n      callback(null, out)\n    })\n  }, function (e) {\n    process.nextTick(function () {\n      callback(e)\n    })\n  })\n}\nmodule.exports = function (password, salt, iterations, keylen, digest, callback) {\n  if (typeof digest === 'function') {\n    callback = digest\n    digest = undefined\n  }\n\n  digest = digest || 'sha1'\n  var algo = toBrowser[digest.toLowerCase()]\n\n  if (!algo || typeof global.Promise !== 'function') {\n    return process.nextTick(function () {\n      var out\n      try {\n        out = sync(password, salt, iterations, keylen, digest)\n      } catch (e) {\n        return callback(e)\n      }\n      callback(null, out)\n    })\n  }\n\n  checkParameters(password, salt, iterations, keylen)\n  if (typeof callback !== 'function') throw new Error('No callback provided to pbkdf2')\n  if (!Buffer.isBuffer(password)) password = Buffer.from(password, defaultEncoding)\n  if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, defaultEncoding)\n\n  resolvePromise(checkNative(algo).then(function (resp) {\n    if (resp) return browserPbkdf2(password, salt, iterations, keylen, algo)\n\n    return sync(password, salt, iterations, keylen, digest)\n  }), callback)\n}\n","var defaultEncoding\n/* istanbul ignore next */\nif (process.browser) {\n  defaultEncoding = 'utf-8'\n} else {\n  var pVersionMajor = parseInt(process.version.split('.')[0].slice(1), 10)\n\n  defaultEncoding = pVersionMajor >= 6 ? 'utf-8' : 'binary'\n}\nmodule.exports = defaultEncoding\n","var MAX_ALLOC = Math.pow(2, 30) - 1 // default in iojs\n\nfunction checkBuffer (buf, name) {\n  if (typeof buf !== 'string' && !Buffer.isBuffer(buf)) {\n    throw new TypeError(name + ' must be a buffer or string')\n  }\n}\n\nmodule.exports = function (password, salt, iterations, keylen) {\n  checkBuffer(password, 'Password')\n  checkBuffer(salt, 'Salt')\n\n  if (typeof iterations !== 'number') {\n    throw new TypeError('Iterations not a number')\n  }\n\n  if (iterations < 0) {\n    throw new TypeError('Bad iterations')\n  }\n\n  if (typeof keylen !== 'number') {\n    throw new TypeError('Key length not a number')\n  }\n\n  if (keylen < 0 || keylen > MAX_ALLOC || keylen !== keylen) { /* eslint no-self-compare: 0 */\n    throw new TypeError('Bad key length')\n  }\n}\n","var md5 = require('create-hash/md5')\nvar RIPEMD160 = require('ripemd160')\nvar sha = require('sha.js')\n\nvar checkParameters = require('./precondition')\nvar defaultEncoding = require('./default-encoding')\nvar Buffer = require('safe-buffer').Buffer\nvar ZEROS = Buffer.alloc(128)\nvar sizes = {\n  md5: 16,\n  sha1: 20,\n  sha224: 28,\n  sha256: 32,\n  sha384: 48,\n  sha512: 64,\n  rmd160: 20,\n  ripemd160: 20\n}\n\nfunction Hmac (alg, key, saltLen) {\n  var hash = getDigest(alg)\n  var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64\n\n  if (key.length > blocksize) {\n    key = hash(key)\n  } else if (key.length < blocksize) {\n    key = Buffer.concat([key, ZEROS], blocksize)\n  }\n\n  var ipad = Buffer.allocUnsafe(blocksize + sizes[alg])\n  var opad = Buffer.allocUnsafe(blocksize + sizes[alg])\n  for (var i = 0; i < blocksize; i++) {\n    ipad[i] = key[i] ^ 0x36\n    opad[i] = key[i] ^ 0x5C\n  }\n\n  var ipad1 = Buffer.allocUnsafe(blocksize + saltLen + 4)\n  ipad.copy(ipad1, 0, 0, blocksize)\n  this.ipad1 = ipad1\n  this.ipad2 = ipad\n  this.opad = opad\n  this.alg = alg\n  this.blocksize = blocksize\n  this.hash = hash\n  this.size = sizes[alg]\n}\n\nHmac.prototype.run = function (data, ipad) {\n  data.copy(ipad, this.blocksize)\n  var h = this.hash(ipad)\n  h.copy(this.opad, this.blocksize)\n  return this.hash(this.opad)\n}\n\nfunction getDigest (alg) {\n  function shaFunc (data) {\n    return sha(alg).update(data).digest()\n  }\n  function rmd160Func (data) {\n    return new RIPEMD160().update(data).digest()\n  }\n\n  if (alg === 'rmd160' || alg === 'ripemd160') return rmd160Func\n  if (alg === 'md5') return md5\n  return shaFunc\n}\n\nfunction pbkdf2 (password, salt, iterations, keylen, digest) {\n  checkParameters(password, salt, iterations, keylen)\n\n  if (!Buffer.isBuffer(password)) password = Buffer.from(password, defaultEncoding)\n  if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, defaultEncoding)\n\n  digest = digest || 'sha1'\n\n  var hmac = new Hmac(digest, password, salt.length)\n\n  var DK = Buffer.allocUnsafe(keylen)\n  var block1 = Buffer.allocUnsafe(salt.length + 4)\n  salt.copy(block1, 0, 0, salt.length)\n\n  var destPos = 0\n  var hLen = sizes[digest]\n  var l = Math.ceil(keylen / hLen)\n\n  for (var i = 1; i <= l; i++) {\n    block1.writeUInt32BE(i, salt.length)\n\n    var T = hmac.run(block1, hmac.ipad1)\n    var U = T\n\n    for (var j = 1; j < iterations; j++) {\n      U = hmac.run(U, hmac.ipad2)\n      for (var k = 0; k < hLen; k++) T[k] ^= U[k]\n    }\n\n    T.copy(DK, destPos)\n    destPos += hLen\n  }\n\n  return DK\n}\n\nmodule.exports = pbkdf2\n","'use strict';\n\nif (typeof process === 'undefined' ||\n    !process.version ||\n    process.version.indexOf('v0.') === 0 ||\n    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {\n  module.exports = { nextTick: nextTick };\n} else {\n  module.exports = process\n}\n\nfunction nextTick(fn, arg1, arg2, arg3) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('\"callback\" argument must be a function');\n  }\n  var len = arguments.length;\n  var args, i;\n  switch (len) {\n  case 0:\n  case 1:\n    return process.nextTick(fn);\n  case 2:\n    return process.nextTick(function afterTickOne() {\n      fn.call(null, arg1);\n    });\n  case 3:\n    return process.nextTick(function afterTickTwo() {\n      fn.call(null, arg1, arg2);\n    });\n  case 4:\n    return process.nextTick(function afterTickThree() {\n      fn.call(null, arg1, arg2, arg3);\n    });\n  default:\n    args = new Array(len - 1);\n    i = 0;\n    while (i < args.length) {\n      args[i++] = arguments[i];\n    }\n    return process.nextTick(function afterTick() {\n      fn.apply(null, args);\n    });\n  }\n}\n\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","exports.publicEncrypt = require('./publicEncrypt')\nexports.privateDecrypt = require('./privateDecrypt')\n\nexports.privateEncrypt = function privateEncrypt (key, buf) {\n  return exports.publicEncrypt(key, buf, true)\n}\n\nexports.publicDecrypt = function publicDecrypt (key, buf) {\n  return exports.privateDecrypt(key, buf, true)\n}\n","var createHash = require('create-hash')\nvar Buffer = require('safe-buffer').Buffer\n\nmodule.exports = function (seed, len) {\n  var t = Buffer.alloc(0)\n  var i = 0\n  var c\n  while (t.length < len) {\n    c = i2ops(i++)\n    t = Buffer.concat([t, createHash('sha1').update(seed).update(c).digest()])\n  }\n  return t.slice(0, len)\n}\n\nfunction i2ops (c) {\n  var out = Buffer.allocUnsafe(4)\n  out.writeUInt32BE(c, 0)\n  return out\n}\n","var parseKeys = require('parse-asn1')\nvar mgf = require('./mgf')\nvar xor = require('./xor')\nvar BN = require('bn.js')\nvar crt = require('browserify-rsa')\nvar createHash = require('create-hash')\nvar withPublic = require('./withPublic')\nvar Buffer = require('safe-buffer').Buffer\n\nmodule.exports = function privateDecrypt (privateKey, enc, reverse) {\n  var padding\n  if (privateKey.padding) {\n    padding = privateKey.padding\n  } else if (reverse) {\n    padding = 1\n  } else {\n    padding = 4\n  }\n\n  var key = parseKeys(privateKey)\n  var k = key.modulus.byteLength()\n  if (enc.length > k || new BN(enc).cmp(key.modulus) >= 0) {\n    throw new Error('decryption error')\n  }\n  var msg\n  if (reverse) {\n    msg = withPublic(new BN(enc), key)\n  } else {\n    msg = crt(enc, key)\n  }\n  var zBuffer = Buffer.alloc(k - msg.length)\n  msg = Buffer.concat([zBuffer, msg], k)\n  if (padding === 4) {\n    return oaep(key, msg)\n  } else if (padding === 1) {\n    return pkcs1(key, msg, reverse)\n  } else if (padding === 3) {\n    return msg\n  } else {\n    throw new Error('unknown padding')\n  }\n}\n\nfunction oaep (key, msg) {\n  var k = key.modulus.byteLength()\n  var iHash = createHash('sha1').update(Buffer.alloc(0)).digest()\n  var hLen = iHash.length\n  if (msg[0] !== 0) {\n    throw new Error('decryption error')\n  }\n  var maskedSeed = msg.slice(1, hLen + 1)\n  var maskedDb = msg.slice(hLen + 1)\n  var seed = xor(maskedSeed, mgf(maskedDb, hLen))\n  var db = xor(maskedDb, mgf(seed, k - hLen - 1))\n  if (compare(iHash, db.slice(0, hLen))) {\n    throw new Error('decryption error')\n  }\n  var i = hLen\n  while (db[i] === 0) {\n    i++\n  }\n  if (db[i++] !== 1) {\n    throw new Error('decryption error')\n  }\n  return db.slice(i)\n}\n\nfunction pkcs1 (key, msg, reverse) {\n  var p1 = msg.slice(0, 2)\n  var i = 2\n  var status = 0\n  while (msg[i++] !== 0) {\n    if (i >= msg.length) {\n      status++\n      break\n    }\n  }\n  var ps = msg.slice(2, i - 1)\n\n  if ((p1.toString('hex') !== '0002' && !reverse) || (p1.toString('hex') !== '0001' && reverse)) {\n    status++\n  }\n  if (ps.length < 8) {\n    status++\n  }\n  if (status) {\n    throw new Error('decryption error')\n  }\n  return msg.slice(i)\n}\nfunction compare (a, b) {\n  a = Buffer.from(a)\n  b = Buffer.from(b)\n  var dif = 0\n  var len = a.length\n  if (a.length !== b.length) {\n    dif++\n    len = Math.min(a.length, b.length)\n  }\n  var i = -1\n  while (++i < len) {\n    dif += (a[i] ^ b[i])\n  }\n  return dif\n}\n","var parseKeys = require('parse-asn1')\nvar randomBytes = require('randombytes')\nvar createHash = require('create-hash')\nvar mgf = require('./mgf')\nvar xor = require('./xor')\nvar BN = require('bn.js')\nvar withPublic = require('./withPublic')\nvar crt = require('browserify-rsa')\nvar Buffer = require('safe-buffer').Buffer\n\nmodule.exports = function publicEncrypt (publicKey, msg, reverse) {\n  var padding\n  if (publicKey.padding) {\n    padding = publicKey.padding\n  } else if (reverse) {\n    padding = 1\n  } else {\n    padding = 4\n  }\n  var key = parseKeys(publicKey)\n  var paddedMsg\n  if (padding === 4) {\n    paddedMsg = oaep(key, msg)\n  } else if (padding === 1) {\n    paddedMsg = pkcs1(key, msg, reverse)\n  } else if (padding === 3) {\n    paddedMsg = new BN(msg)\n    if (paddedMsg.cmp(key.modulus) >= 0) {\n      throw new Error('data too long for modulus')\n    }\n  } else {\n    throw new Error('unknown padding')\n  }\n  if (reverse) {\n    return crt(paddedMsg, key)\n  } else {\n    return withPublic(paddedMsg, key)\n  }\n}\n\nfunction oaep (key, msg) {\n  var k = key.modulus.byteLength()\n  var mLen = msg.length\n  var iHash = createHash('sha1').update(Buffer.alloc(0)).digest()\n  var hLen = iHash.length\n  var hLen2 = 2 * hLen\n  if (mLen > k - hLen2 - 2) {\n    throw new Error('message too long')\n  }\n  var ps = Buffer.alloc(k - mLen - hLen2 - 2)\n  var dblen = k - hLen - 1\n  var seed = randomBytes(hLen)\n  var maskedDb = xor(Buffer.concat([iHash, ps, Buffer.alloc(1, 1), msg], dblen), mgf(seed, dblen))\n  var maskedSeed = xor(seed, mgf(maskedDb, hLen))\n  return new BN(Buffer.concat([Buffer.alloc(1), maskedSeed, maskedDb], k))\n}\nfunction pkcs1 (key, msg, reverse) {\n  var mLen = msg.length\n  var k = key.modulus.byteLength()\n  if (mLen > k - 11) {\n    throw new Error('message too long')\n  }\n  var ps\n  if (reverse) {\n    ps = Buffer.alloc(k - mLen - 3, 0xff)\n  } else {\n    ps = nonZero(k - mLen - 3)\n  }\n  return new BN(Buffer.concat([Buffer.from([0, reverse ? 1 : 2]), ps, Buffer.alloc(1), msg], k))\n}\nfunction nonZero (len) {\n  var out = Buffer.allocUnsafe(len)\n  var i = 0\n  var cache = randomBytes(len * 2)\n  var cur = 0\n  var num\n  while (i < len) {\n    if (cur === cache.length) {\n      cache = randomBytes(len * 2)\n      cur = 0\n    }\n    num = cache[cur++]\n    if (num) {\n      out[i++] = num\n    }\n  }\n  return out\n}\n","var BN = require('bn.js')\nvar Buffer = require('safe-buffer').Buffer\n\nfunction withPublic (paddedMsg, key) {\n  return Buffer.from(paddedMsg\n    .toRed(BN.mont(key.modulus))\n    .redPow(new BN(key.publicExponent))\n    .fromRed()\n    .toArray())\n}\n\nmodule.exports = withPublic\n","module.exports = function xor (a, b) {\n  var len = a.length\n  var i = -1\n  while (++i < len) {\n    a[i] ^= b[i]\n  }\n  return a\n}\n","'use strict'\n\n// limit of Crypto.getRandomValues()\n// https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues\nvar MAX_BYTES = 65536\n\n// Node supports requesting up to this number of bytes\n// https://github.com/nodejs/node/blob/master/lib/internal/crypto/random.js#L48\nvar MAX_UINT32 = 4294967295\n\nfunction oldBrowser () {\n  throw new Error('Secure random number generation is not supported by this browser.\\nUse Chrome, Firefox or Internet Explorer 11')\n}\n\nvar Buffer = require('safe-buffer').Buffer\nvar crypto = global.crypto || global.msCrypto\n\nif (crypto && crypto.getRandomValues) {\n  module.exports = randomBytes\n} else {\n  module.exports = oldBrowser\n}\n\nfunction randomBytes (size, cb) {\n  // phantomjs needs to throw\n  if (size > MAX_UINT32) throw new RangeError('requested too many random bytes')\n\n  var bytes = Buffer.allocUnsafe(size)\n\n  if (size > 0) {  // getRandomValues fails on IE if size == 0\n    if (size > MAX_BYTES) { // this is the max bytes crypto.getRandomValues\n      // can do at once see https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues\n      for (var generated = 0; generated < size; generated += MAX_BYTES) {\n        // buffer.slice automatically checks if the end is past the end of\n        // the buffer so we don't have to here\n        crypto.getRandomValues(bytes.slice(generated, generated + MAX_BYTES))\n      }\n    } else {\n      crypto.getRandomValues(bytes)\n    }\n  }\n\n  if (typeof cb === 'function') {\n    return process.nextTick(function () {\n      cb(null, bytes)\n    })\n  }\n\n  return bytes\n}\n","'use strict'\n\nfunction oldBrowser () {\n  throw new Error('secure random number generation not supported by this browser\\nuse chrome, FireFox or Internet Explorer 11')\n}\nvar safeBuffer = require('safe-buffer')\nvar randombytes = require('randombytes')\nvar Buffer = safeBuffer.Buffer\nvar kBufferMaxLength = safeBuffer.kMaxLength\nvar crypto = global.crypto || global.msCrypto\nvar kMaxUint32 = Math.pow(2, 32) - 1\nfunction assertOffset (offset, length) {\n  if (typeof offset !== 'number' || offset !== offset) { // eslint-disable-line no-self-compare\n    throw new TypeError('offset must be a number')\n  }\n\n  if (offset > kMaxUint32 || offset < 0) {\n    throw new TypeError('offset must be a uint32')\n  }\n\n  if (offset > kBufferMaxLength || offset > length) {\n    throw new RangeError('offset out of range')\n  }\n}\n\nfunction assertSize (size, offset, length) {\n  if (typeof size !== 'number' || size !== size) { // eslint-disable-line no-self-compare\n    throw new TypeError('size must be a number')\n  }\n\n  if (size > kMaxUint32 || size < 0) {\n    throw new TypeError('size must be a uint32')\n  }\n\n  if (size + offset > length || size > kBufferMaxLength) {\n    throw new RangeError('buffer too small')\n  }\n}\nif ((crypto && crypto.getRandomValues) || !process.browser) {\n  exports.randomFill = randomFill\n  exports.randomFillSync = randomFillSync\n} else {\n  exports.randomFill = oldBrowser\n  exports.randomFillSync = oldBrowser\n}\nfunction randomFill (buf, offset, size, cb) {\n  if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {\n    throw new TypeError('\"buf\" argument must be a Buffer or Uint8Array')\n  }\n\n  if (typeof offset === 'function') {\n    cb = offset\n    offset = 0\n    size = buf.length\n  } else if (typeof size === 'function') {\n    cb = size\n    size = buf.length - offset\n  } else if (typeof cb !== 'function') {\n    throw new TypeError('\"cb\" argument must be a function')\n  }\n  assertOffset(offset, buf.length)\n  assertSize(size, offset, buf.length)\n  return actualFill(buf, offset, size, cb)\n}\n\nfunction actualFill (buf, offset, size, cb) {\n  if (process.browser) {\n    var ourBuf = buf.buffer\n    var uint = new Uint8Array(ourBuf, offset, size)\n    crypto.getRandomValues(uint)\n    if (cb) {\n      process.nextTick(function () {\n        cb(null, buf)\n      })\n      return\n    }\n    return buf\n  }\n  if (cb) {\n    randombytes(size, function (err, bytes) {\n      if (err) {\n        return cb(err)\n      }\n      bytes.copy(buf, offset)\n      cb(null, buf)\n    })\n    return\n  }\n  var bytes = randombytes(size)\n  bytes.copy(buf, offset)\n  return buf\n}\nfunction randomFillSync (buf, offset, size) {\n  if (typeof offset === 'undefined') {\n    offset = 0\n  }\n  if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {\n    throw new TypeError('\"buf\" argument must be a Buffer or Uint8Array')\n  }\n\n  assertOffset(offset, buf.length)\n\n  if (size === undefined) size = buf.length - offset\n\n  assertSize(size, offset, buf.length)\n\n  return actualFill(buf, offset, size)\n}\n","module.exports = (__webpack_require__(/*! dll-reference dll_2adc2403d89adc16ead0 */ \"dll-reference dll_2adc2403d89adc16ead0\"))(\"./node_modules/react/index.js\");","module.exports = require('./lib/_stream_duplex.js');\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// a duplex stream is just a stream that is both readable and writable.\n// Since JS doesn't have multiple prototypal inheritance, this class\n// prototypally inherits from Readable, and then parasitically from\n// Writable.\n\n'use strict';\n\n/*<replacement>*/\n\nvar pna = require('process-nextick-args');\n/*</replacement>*/\n\n/*<replacement>*/\nvar objectKeys = Object.keys || function (obj) {\n  var keys = [];\n  for (var key in obj) {\n    keys.push(key);\n  }return keys;\n};\n/*</replacement>*/\n\nmodule.exports = Duplex;\n\n/*<replacement>*/\nvar util = Object.create(require('core-util-is'));\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nvar Readable = require('./_stream_readable');\nvar Writable = require('./_stream_writable');\n\nutil.inherits(Duplex, Readable);\n\n{\n  // avoid scope creep, the keys array can then be collected\n  var keys = objectKeys(Writable.prototype);\n  for (var v = 0; v < keys.length; v++) {\n    var method = keys[v];\n    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];\n  }\n}\n\nfunction Duplex(options) {\n  if (!(this instanceof Duplex)) return new Duplex(options);\n\n  Readable.call(this, options);\n  Writable.call(this, options);\n\n  if (options && options.readable === false) this.readable = false;\n\n  if (options && options.writable === false) this.writable = false;\n\n  this.allowHalfOpen = true;\n  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;\n\n  this.once('end', onend);\n}\n\nObject.defineProperty(Duplex.prototype, 'writableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function () {\n    return this._writableState.highWaterMark;\n  }\n});\n\n// the no-half-open enforcer\nfunction onend() {\n  // if we allow half-open state, or if the writable side ended,\n  // then we're ok.\n  if (this.allowHalfOpen || this._writableState.ended) return;\n\n  // no more data can be written.\n  // But allow more writes to happen in this tick.\n  pna.nextTick(onEndNT, this);\n}\n\nfunction onEndNT(self) {\n  self.end();\n}\n\nObject.defineProperty(Duplex.prototype, 'destroyed', {\n  get: function () {\n    if (this._readableState === undefined || this._writableState === undefined) {\n      return false;\n    }\n    return this._readableState.destroyed && this._writableState.destroyed;\n  },\n  set: function (value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (this._readableState === undefined || this._writableState === undefined) {\n      return;\n    }\n\n    // backward compatibility, the user is explicitly\n    // managing destroyed\n    this._readableState.destroyed = value;\n    this._writableState.destroyed = value;\n  }\n});\n\nDuplex.prototype._destroy = function (err, cb) {\n  this.push(null);\n  this.end();\n\n  pna.nextTick(cb, err);\n};","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// a passthrough stream.\n// basically just the most minimal sort of Transform stream.\n// Every written chunk gets output as-is.\n\n'use strict';\n\nmodule.exports = PassThrough;\n\nvar Transform = require('./_stream_transform');\n\n/*<replacement>*/\nvar util = Object.create(require('core-util-is'));\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nutil.inherits(PassThrough, Transform);\n\nfunction PassThrough(options) {\n  if (!(this instanceof PassThrough)) return new PassThrough(options);\n\n  Transform.call(this, options);\n}\n\nPassThrough.prototype._transform = function (chunk, encoding, cb) {\n  cb(null, chunk);\n};","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n/*<replacement>*/\n\nvar pna = require('process-nextick-args');\n/*</replacement>*/\n\nmodule.exports = Readable;\n\n/*<replacement>*/\nvar isArray = require('isarray');\n/*</replacement>*/\n\n/*<replacement>*/\nvar Duplex;\n/*</replacement>*/\n\nReadable.ReadableState = ReadableState;\n\n/*<replacement>*/\nvar EE = require('events').EventEmitter;\n\nvar EElistenerCount = function (emitter, type) {\n  return emitter.listeners(type).length;\n};\n/*</replacement>*/\n\n/*<replacement>*/\nvar Stream = require('./internal/streams/stream');\n/*</replacement>*/\n\n/*<replacement>*/\n\nvar Buffer = require('safe-buffer').Buffer;\nvar OurUint8Array = global.Uint8Array || function () {};\nfunction _uint8ArrayToBuffer(chunk) {\n  return Buffer.from(chunk);\n}\nfunction _isUint8Array(obj) {\n  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\n}\n\n/*</replacement>*/\n\n/*<replacement>*/\nvar util = Object.create(require('core-util-is'));\nutil.inherits = require('inherits');\n/*</replacement>*/\n\n/*<replacement>*/\nvar debugUtil = require('util');\nvar debug = void 0;\nif (debugUtil && debugUtil.debuglog) {\n  debug = debugUtil.debuglog('stream');\n} else {\n  debug = function () {};\n}\n/*</replacement>*/\n\nvar BufferList = require('./internal/streams/BufferList');\nvar destroyImpl = require('./internal/streams/destroy');\nvar StringDecoder;\n\nutil.inherits(Readable, Stream);\n\nvar kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];\n\nfunction prependListener(emitter, event, fn) {\n  // Sadly this is not cacheable as some libraries bundle their own\n  // event emitter implementation with them.\n  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);\n\n  // This is a hack to make sure that our error handler is attached before any\n  // userland ones.  NEVER DO THIS. This is here only because this code needs\n  // to continue to work with older versions of Node.js that do not include\n  // the prependListener() method. The goal is to eventually remove this hack.\n  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];\n}\n\nfunction ReadableState(options, stream) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  options = options || {};\n\n  // Duplex streams are both readable and writable, but share\n  // the same options object.\n  // However, some cases require setting options to different\n  // values for the readable and the writable sides of the duplex stream.\n  // These options can be provided separately as readableXXX and writableXXX.\n  var isDuplex = stream instanceof Duplex;\n\n  // object stream flag. Used to make read(n) ignore n and to\n  // make all the buffer merging and length checks go away\n  this.objectMode = !!options.objectMode;\n\n  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;\n\n  // the point at which it stops calling _read() to fill the buffer\n  // Note: 0 is a valid value, means \"don't call _read preemptively ever\"\n  var hwm = options.highWaterMark;\n  var readableHwm = options.readableHighWaterMark;\n  var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n\n  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm;else this.highWaterMark = defaultHwm;\n\n  // cast to ints.\n  this.highWaterMark = Math.floor(this.highWaterMark);\n\n  // A linked list is used to store data chunks instead of an array because the\n  // linked list can remove elements from the beginning faster than\n  // array.shift()\n  this.buffer = new BufferList();\n  this.length = 0;\n  this.pipes = null;\n  this.pipesCount = 0;\n  this.flowing = null;\n  this.ended = false;\n  this.endEmitted = false;\n  this.reading = false;\n\n  // a flag to be able to tell if the event 'readable'/'data' is emitted\n  // immediately, or on a later tick.  We set this to true at first, because\n  // any actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first read call.\n  this.sync = true;\n\n  // whenever we return null, then we set a flag to say\n  // that we're awaiting a 'readable' event emission.\n  this.needReadable = false;\n  this.emittedReadable = false;\n  this.readableListening = false;\n  this.resumeScheduled = false;\n\n  // has it been destroyed\n  this.destroyed = false;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // the number of writers that are awaiting a drain event in .pipe()s\n  this.awaitDrain = 0;\n\n  // if true, a maybeReadMore has been scheduled\n  this.readingMore = false;\n\n  this.decoder = null;\n  this.encoding = null;\n  if (options.encoding) {\n    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n    this.decoder = new StringDecoder(options.encoding);\n    this.encoding = options.encoding;\n  }\n}\n\nfunction Readable(options) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  if (!(this instanceof Readable)) return new Readable(options);\n\n  this._readableState = new ReadableState(options, this);\n\n  // legacy\n  this.readable = true;\n\n  if (options) {\n    if (typeof options.read === 'function') this._read = options.read;\n\n    if (typeof options.destroy === 'function') this._destroy = options.destroy;\n  }\n\n  Stream.call(this);\n}\n\nObject.defineProperty(Readable.prototype, 'destroyed', {\n  get: function () {\n    if (this._readableState === undefined) {\n      return false;\n    }\n    return this._readableState.destroyed;\n  },\n  set: function (value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (!this._readableState) {\n      return;\n    }\n\n    // backward compatibility, the user is explicitly\n    // managing destroyed\n    this._readableState.destroyed = value;\n  }\n});\n\nReadable.prototype.destroy = destroyImpl.destroy;\nReadable.prototype._undestroy = destroyImpl.undestroy;\nReadable.prototype._destroy = function (err, cb) {\n  this.push(null);\n  cb(err);\n};\n\n// Manually shove something into the read() buffer.\n// This returns true if the highWaterMark has not been hit yet,\n// similar to how Writable.write() returns true if you should\n// write() some more.\nReadable.prototype.push = function (chunk, encoding) {\n  var state = this._readableState;\n  var skipChunkCheck;\n\n  if (!state.objectMode) {\n    if (typeof chunk === 'string') {\n      encoding = encoding || state.defaultEncoding;\n      if (encoding !== state.encoding) {\n        chunk = Buffer.from(chunk, encoding);\n        encoding = '';\n      }\n      skipChunkCheck = true;\n    }\n  } else {\n    skipChunkCheck = true;\n  }\n\n  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);\n};\n\n// Unshift should *always* be something directly out of read()\nReadable.prototype.unshift = function (chunk) {\n  return readableAddChunk(this, chunk, null, true, false);\n};\n\nfunction readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {\n  var state = stream._readableState;\n  if (chunk === null) {\n    state.reading = false;\n    onEofChunk(stream, state);\n  } else {\n    var er;\n    if (!skipChunkCheck) er = chunkInvalid(state, chunk);\n    if (er) {\n      stream.emit('error', er);\n    } else if (state.objectMode || chunk && chunk.length > 0) {\n      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {\n        chunk = _uint8ArrayToBuffer(chunk);\n      }\n\n      if (addToFront) {\n        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);\n      } else if (state.ended) {\n        stream.emit('error', new Error('stream.push() after EOF'));\n      } else {\n        state.reading = false;\n        if (state.decoder && !encoding) {\n          chunk = state.decoder.write(chunk);\n          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);\n        } else {\n          addChunk(stream, state, chunk, false);\n        }\n      }\n    } else if (!addToFront) {\n      state.reading = false;\n    }\n  }\n\n  return needMoreData(state);\n}\n\nfunction addChunk(stream, state, chunk, addToFront) {\n  if (state.flowing && state.length === 0 && !state.sync) {\n    stream.emit('data', chunk);\n    stream.read(0);\n  } else {\n    // update the buffer info.\n    state.length += state.objectMode ? 1 : chunk.length;\n    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);\n\n    if (state.needReadable) emitReadable(stream);\n  }\n  maybeReadMore(stream, state);\n}\n\nfunction chunkInvalid(state, chunk) {\n  var er;\n  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {\n    er = new TypeError('Invalid non-string/buffer chunk');\n  }\n  return er;\n}\n\n// if it's past the high water mark, we can push in some more.\n// Also, if we have no data yet, we can stand some\n// more bytes.  This is to work around cases where hwm=0,\n// such as the repl.  Also, if the push() triggered a\n// readable event, and the user called read(largeNumber) such that\n// needReadable was set, then we ought to push more, so that another\n// 'readable' event will be triggered.\nfunction needMoreData(state) {\n  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);\n}\n\nReadable.prototype.isPaused = function () {\n  return this._readableState.flowing === false;\n};\n\n// backwards compatibility.\nReadable.prototype.setEncoding = function (enc) {\n  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n  this._readableState.decoder = new StringDecoder(enc);\n  this._readableState.encoding = enc;\n  return this;\n};\n\n// Don't raise the hwm > 8MB\nvar MAX_HWM = 0x800000;\nfunction computeNewHighWaterMark(n) {\n  if (n >= MAX_HWM) {\n    n = MAX_HWM;\n  } else {\n    // Get the next highest power of 2 to prevent increasing hwm excessively in\n    // tiny amounts\n    n--;\n    n |= n >>> 1;\n    n |= n >>> 2;\n    n |= n >>> 4;\n    n |= n >>> 8;\n    n |= n >>> 16;\n    n++;\n  }\n  return n;\n}\n\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction howMuchToRead(n, state) {\n  if (n <= 0 || state.length === 0 && state.ended) return 0;\n  if (state.objectMode) return 1;\n  if (n !== n) {\n    // Only flow one buffer at a time\n    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;\n  }\n  // If we're asking for more than the current hwm, then raise the hwm.\n  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);\n  if (n <= state.length) return n;\n  // Don't have enough\n  if (!state.ended) {\n    state.needReadable = true;\n    return 0;\n  }\n  return state.length;\n}\n\n// you can override either this method, or the async _read(n) below.\nReadable.prototype.read = function (n) {\n  debug('read', n);\n  n = parseInt(n, 10);\n  var state = this._readableState;\n  var nOrig = n;\n\n  if (n !== 0) state.emittedReadable = false;\n\n  // if we're doing read(0) to trigger a readable event, but we\n  // already have a bunch of data in the buffer, then just trigger\n  // the 'readable' event and move on.\n  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {\n    debug('read: emitReadable', state.length, state.ended);\n    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);\n    return null;\n  }\n\n  n = howMuchToRead(n, state);\n\n  // if we've ended, and we're now clear, then finish it up.\n  if (n === 0 && state.ended) {\n    if (state.length === 0) endReadable(this);\n    return null;\n  }\n\n  // All the actual chunk generation logic needs to be\n  // *below* the call to _read.  The reason is that in certain\n  // synthetic stream cases, such as passthrough streams, _read\n  // may be a completely synchronous operation which may change\n  // the state of the read buffer, providing enough data when\n  // before there was *not* enough.\n  //\n  // So, the steps are:\n  // 1. Figure out what the state of things will be after we do\n  // a read from the buffer.\n  //\n  // 2. If that resulting state will trigger a _read, then call _read.\n  // Note that this may be asynchronous, or synchronous.  Yes, it is\n  // deeply ugly to write APIs this way, but that still doesn't mean\n  // that the Readable class should behave improperly, as streams are\n  // designed to be sync/async agnostic.\n  // Take note if the _read call is sync or async (ie, if the read call\n  // has returned yet), so that we know whether or not it's safe to emit\n  // 'readable' etc.\n  //\n  // 3. Actually pull the requested chunks out of the buffer and return.\n\n  // if we need a readable event, then we need to do some reading.\n  var doRead = state.needReadable;\n  debug('need readable', doRead);\n\n  // if we currently have less than the highWaterMark, then also read some\n  if (state.length === 0 || state.length - n < state.highWaterMark) {\n    doRead = true;\n    debug('length less than watermark', doRead);\n  }\n\n  // however, if we've ended, then there's no point, and if we're already\n  // reading, then it's unnecessary.\n  if (state.ended || state.reading) {\n    doRead = false;\n    debug('reading or ended', doRead);\n  } else if (doRead) {\n    debug('do read');\n    state.reading = true;\n    state.sync = true;\n    // if the length is currently zero, then we *need* a readable event.\n    if (state.length === 0) state.needReadable = true;\n    // call internal read method\n    this._read(state.highWaterMark);\n    state.sync = false;\n    // If _read pushed data synchronously, then `reading` will be false,\n    // and we need to re-evaluate how much data we can return to the user.\n    if (!state.reading) n = howMuchToRead(nOrig, state);\n  }\n\n  var ret;\n  if (n > 0) ret = fromList(n, state);else ret = null;\n\n  if (ret === null) {\n    state.needReadable = true;\n    n = 0;\n  } else {\n    state.length -= n;\n  }\n\n  if (state.length === 0) {\n    // If we have nothing in the buffer, then we want to know\n    // as soon as we *do* get something into the buffer.\n    if (!state.ended) state.needReadable = true;\n\n    // If we tried to read() past the EOF, then emit end on the next tick.\n    if (nOrig !== n && state.ended) endReadable(this);\n  }\n\n  if (ret !== null) this.emit('data', ret);\n\n  return ret;\n};\n\nfunction onEofChunk(stream, state) {\n  if (state.ended) return;\n  if (state.decoder) {\n    var chunk = state.decoder.end();\n    if (chunk && chunk.length) {\n      state.buffer.push(chunk);\n      state.length += state.objectMode ? 1 : chunk.length;\n    }\n  }\n  state.ended = true;\n\n  // emit 'readable' now to make sure it gets picked up.\n  emitReadable(stream);\n}\n\n// Don't emit readable right away in sync mode, because this can trigger\n// another read() call => stack overflow.  This way, it might trigger\n// a nextTick recursion warning, but that's not so bad.\nfunction emitReadable(stream) {\n  var state = stream._readableState;\n  state.needReadable = false;\n  if (!state.emittedReadable) {\n    debug('emitReadable', state.flowing);\n    state.emittedReadable = true;\n    if (state.sync) pna.nextTick(emitReadable_, stream);else emitReadable_(stream);\n  }\n}\n\nfunction emitReadable_(stream) {\n  debug('emit readable');\n  stream.emit('readable');\n  flow(stream);\n}\n\n// at this point, the user has presumably seen the 'readable' event,\n// and called read() to consume some data.  that may have triggered\n// in turn another _read(n) call, in which case reading = true if\n// it's in progress.\n// However, if we're not ended, or reading, and the length < hwm,\n// then go ahead and try to read some more preemptively.\nfunction maybeReadMore(stream, state) {\n  if (!state.readingMore) {\n    state.readingMore = true;\n    pna.nextTick(maybeReadMore_, stream, state);\n  }\n}\n\nfunction maybeReadMore_(stream, state) {\n  var len = state.length;\n  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {\n    debug('maybeReadMore read 0');\n    stream.read(0);\n    if (len === state.length)\n      // didn't get any data, stop spinning.\n      break;else len = state.length;\n  }\n  state.readingMore = false;\n}\n\n// abstract method.  to be overridden in specific implementation classes.\n// call cb(er, data) where data is <= n in length.\n// for virtual (non-string, non-buffer) streams, \"length\" is somewhat\n// arbitrary, and perhaps not very meaningful.\nReadable.prototype._read = function (n) {\n  this.emit('error', new Error('_read() is not implemented'));\n};\n\nReadable.prototype.pipe = function (dest, pipeOpts) {\n  var src = this;\n  var state = this._readableState;\n\n  switch (state.pipesCount) {\n    case 0:\n      state.pipes = dest;\n      break;\n    case 1:\n      state.pipes = [state.pipes, dest];\n      break;\n    default:\n      state.pipes.push(dest);\n      break;\n  }\n  state.pipesCount += 1;\n  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);\n\n  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;\n\n  var endFn = doEnd ? onend : unpipe;\n  if (state.endEmitted) pna.nextTick(endFn);else src.once('end', endFn);\n\n  dest.on('unpipe', onunpipe);\n  function onunpipe(readable, unpipeInfo) {\n    debug('onunpipe');\n    if (readable === src) {\n      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {\n        unpipeInfo.hasUnpiped = true;\n        cleanup();\n      }\n    }\n  }\n\n  function onend() {\n    debug('onend');\n    dest.end();\n  }\n\n  // when the dest drains, it reduces the awaitDrain counter\n  // on the source.  This would be more elegant with a .once()\n  // handler in flow(), but adding and removing repeatedly is\n  // too slow.\n  var ondrain = pipeOnDrain(src);\n  dest.on('drain', ondrain);\n\n  var cleanedUp = false;\n  function cleanup() {\n    debug('cleanup');\n    // cleanup event handlers once the pipe is broken\n    dest.removeListener('close', onclose);\n    dest.removeListener('finish', onfinish);\n    dest.removeListener('drain', ondrain);\n    dest.removeListener('error', onerror);\n    dest.removeListener('unpipe', onunpipe);\n    src.removeListener('end', onend);\n    src.removeListener('end', unpipe);\n    src.removeListener('data', ondata);\n\n    cleanedUp = true;\n\n    // if the reader is waiting for a drain event from this\n    // specific writer, then it would cause it to never start\n    // flowing again.\n    // So, if this is awaiting a drain, then we just call it now.\n    // If we don't know, then assume that we are waiting for one.\n    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();\n  }\n\n  // If the user pushes more data while we're writing to dest then we'll end up\n  // in ondata again. However, we only want to increase awaitDrain once because\n  // dest will only emit one 'drain' event for the multiple writes.\n  // => Introduce a guard on increasing awaitDrain.\n  var increasedAwaitDrain = false;\n  src.on('data', ondata);\n  function ondata(chunk) {\n    debug('ondata');\n    increasedAwaitDrain = false;\n    var ret = dest.write(chunk);\n    if (false === ret && !increasedAwaitDrain) {\n      // If the user unpiped during `dest.write()`, it is possible\n      // to get stuck in a permanently paused state if that write\n      // also returned false.\n      // => Check whether `dest` is still a piping destination.\n      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {\n        debug('false write response, pause', src._readableState.awaitDrain);\n        src._readableState.awaitDrain++;\n        increasedAwaitDrain = true;\n      }\n      src.pause();\n    }\n  }\n\n  // if the dest has an error, then stop piping into it.\n  // however, don't suppress the throwing behavior for this.\n  function onerror(er) {\n    debug('onerror', er);\n    unpipe();\n    dest.removeListener('error', onerror);\n    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);\n  }\n\n  // Make sure our error handler is attached before userland ones.\n  prependListener(dest, 'error', onerror);\n\n  // Both close and finish should trigger unpipe, but only once.\n  function onclose() {\n    dest.removeListener('finish', onfinish);\n    unpipe();\n  }\n  dest.once('close', onclose);\n  function onfinish() {\n    debug('onfinish');\n    dest.removeListener('close', onclose);\n    unpipe();\n  }\n  dest.once('finish', onfinish);\n\n  function unpipe() {\n    debug('unpipe');\n    src.unpipe(dest);\n  }\n\n  // tell the dest that it's being piped to\n  dest.emit('pipe', src);\n\n  // start the flow if it hasn't been started already.\n  if (!state.flowing) {\n    debug('pipe resume');\n    src.resume();\n  }\n\n  return dest;\n};\n\nfunction pipeOnDrain(src) {\n  return function () {\n    var state = src._readableState;\n    debug('pipeOnDrain', state.awaitDrain);\n    if (state.awaitDrain) state.awaitDrain--;\n    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {\n      state.flowing = true;\n      flow(src);\n    }\n  };\n}\n\nReadable.prototype.unpipe = function (dest) {\n  var state = this._readableState;\n  var unpipeInfo = { hasUnpiped: false };\n\n  // if we're not piping anywhere, then do nothing.\n  if (state.pipesCount === 0) return this;\n\n  // just one destination.  most common case.\n  if (state.pipesCount === 1) {\n    // passed in one, but it's not the right one.\n    if (dest && dest !== state.pipes) return this;\n\n    if (!dest) dest = state.pipes;\n\n    // got a match.\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n    if (dest) dest.emit('unpipe', this, unpipeInfo);\n    return this;\n  }\n\n  // slow case. multiple pipe destinations.\n\n  if (!dest) {\n    // remove all.\n    var dests = state.pipes;\n    var len = state.pipesCount;\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n\n    for (var i = 0; i < len; i++) {\n      dests[i].emit('unpipe', this, unpipeInfo);\n    }return this;\n  }\n\n  // try to find the right one.\n  var index = indexOf(state.pipes, dest);\n  if (index === -1) return this;\n\n  state.pipes.splice(index, 1);\n  state.pipesCount -= 1;\n  if (state.pipesCount === 1) state.pipes = state.pipes[0];\n\n  dest.emit('unpipe', this, unpipeInfo);\n\n  return this;\n};\n\n// set up data events if they are asked for\n// Ensure readable listeners eventually get something\nReadable.prototype.on = function (ev, fn) {\n  var res = Stream.prototype.on.call(this, ev, fn);\n\n  if (ev === 'data') {\n    // Start flowing on next tick if stream isn't explicitly paused\n    if (this._readableState.flowing !== false) this.resume();\n  } else if (ev === 'readable') {\n    var state = this._readableState;\n    if (!state.endEmitted && !state.readableListening) {\n      state.readableListening = state.needReadable = true;\n      state.emittedReadable = false;\n      if (!state.reading) {\n        pna.nextTick(nReadingNextTick, this);\n      } else if (state.length) {\n        emitReadable(this);\n      }\n    }\n  }\n\n  return res;\n};\nReadable.prototype.addListener = Readable.prototype.on;\n\nfunction nReadingNextTick(self) {\n  debug('readable nexttick read 0');\n  self.read(0);\n}\n\n// pause() and resume() are remnants of the legacy readable stream API\n// If the user uses them, then switch into old mode.\nReadable.prototype.resume = function () {\n  var state = this._readableState;\n  if (!state.flowing) {\n    debug('resume');\n    state.flowing = true;\n    resume(this, state);\n  }\n  return this;\n};\n\nfunction resume(stream, state) {\n  if (!state.resumeScheduled) {\n    state.resumeScheduled = true;\n    pna.nextTick(resume_, stream, state);\n  }\n}\n\nfunction resume_(stream, state) {\n  if (!state.reading) {\n    debug('resume read 0');\n    stream.read(0);\n  }\n\n  state.resumeScheduled = false;\n  state.awaitDrain = 0;\n  stream.emit('resume');\n  flow(stream);\n  if (state.flowing && !state.reading) stream.read(0);\n}\n\nReadable.prototype.pause = function () {\n  debug('call pause flowing=%j', this._readableState.flowing);\n  if (false !== this._readableState.flowing) {\n    debug('pause');\n    this._readableState.flowing = false;\n    this.emit('pause');\n  }\n  return this;\n};\n\nfunction flow(stream) {\n  var state = stream._readableState;\n  debug('flow', state.flowing);\n  while (state.flowing && stream.read() !== null) {}\n}\n\n// wrap an old-style stream as the async data source.\n// This is *not* part of the readable stream interface.\n// It is an ugly unfortunate mess of history.\nReadable.prototype.wrap = function (stream) {\n  var _this = this;\n\n  var state = this._readableState;\n  var paused = false;\n\n  stream.on('end', function () {\n    debug('wrapped end');\n    if (state.decoder && !state.ended) {\n      var chunk = state.decoder.end();\n      if (chunk && chunk.length) _this.push(chunk);\n    }\n\n    _this.push(null);\n  });\n\n  stream.on('data', function (chunk) {\n    debug('wrapped data');\n    if (state.decoder) chunk = state.decoder.write(chunk);\n\n    // don't skip over falsy values in objectMode\n    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;\n\n    var ret = _this.push(chunk);\n    if (!ret) {\n      paused = true;\n      stream.pause();\n    }\n  });\n\n  // proxy all the other methods.\n  // important when wrapping filters and duplexes.\n  for (var i in stream) {\n    if (this[i] === undefined && typeof stream[i] === 'function') {\n      this[i] = function (method) {\n        return function () {\n          return stream[method].apply(stream, arguments);\n        };\n      }(i);\n    }\n  }\n\n  // proxy certain important events.\n  for (var n = 0; n < kProxyEvents.length; n++) {\n    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));\n  }\n\n  // when we try to consume some more bytes, simply unpause the\n  // underlying stream.\n  this._read = function (n) {\n    debug('wrapped _read', n);\n    if (paused) {\n      paused = false;\n      stream.resume();\n    }\n  };\n\n  return this;\n};\n\nObject.defineProperty(Readable.prototype, 'readableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function () {\n    return this._readableState.highWaterMark;\n  }\n});\n\n// exposed for testing purposes only.\nReadable._fromList = fromList;\n\n// Pluck off n bytes from an array of buffers.\n// Length is the combined lengths of all the buffers in the list.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction fromList(n, state) {\n  // nothing buffered\n  if (state.length === 0) return null;\n\n  var ret;\n  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {\n    // read it all, truncate the list\n    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);\n    state.buffer.clear();\n  } else {\n    // read part of list\n    ret = fromListPartial(n, state.buffer, state.decoder);\n  }\n\n  return ret;\n}\n\n// Extracts only enough buffered data to satisfy the amount requested.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction fromListPartial(n, list, hasStrings) {\n  var ret;\n  if (n < list.head.data.length) {\n    // slice is the same for buffers and strings\n    ret = list.head.data.slice(0, n);\n    list.head.data = list.head.data.slice(n);\n  } else if (n === list.head.data.length) {\n    // first chunk is a perfect match\n    ret = list.shift();\n  } else {\n    // result spans more than one buffer\n    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);\n  }\n  return ret;\n}\n\n// Copies a specified amount of characters from the list of buffered data\n// chunks.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction copyFromBufferString(n, list) {\n  var p = list.head;\n  var c = 1;\n  var ret = p.data;\n  n -= ret.length;\n  while (p = p.next) {\n    var str = p.data;\n    var nb = n > str.length ? str.length : n;\n    if (nb === str.length) ret += str;else ret += str.slice(0, n);\n    n -= nb;\n    if (n === 0) {\n      if (nb === str.length) {\n        ++c;\n        if (p.next) list.head = p.next;else list.head = list.tail = null;\n      } else {\n        list.head = p;\n        p.data = str.slice(nb);\n      }\n      break;\n    }\n    ++c;\n  }\n  list.length -= c;\n  return ret;\n}\n\n// Copies a specified amount of bytes from the list of buffered data chunks.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction copyFromBuffer(n, list) {\n  var ret = Buffer.allocUnsafe(n);\n  var p = list.head;\n  var c = 1;\n  p.data.copy(ret);\n  n -= p.data.length;\n  while (p = p.next) {\n    var buf = p.data;\n    var nb = n > buf.length ? buf.length : n;\n    buf.copy(ret, ret.length - n, 0, nb);\n    n -= nb;\n    if (n === 0) {\n      if (nb === buf.length) {\n        ++c;\n        if (p.next) list.head = p.next;else list.head = list.tail = null;\n      } else {\n        list.head = p;\n        p.data = buf.slice(nb);\n      }\n      break;\n    }\n    ++c;\n  }\n  list.length -= c;\n  return ret;\n}\n\nfunction endReadable(stream) {\n  var state = stream._readableState;\n\n  // If we get here before consuming all the bytes, then that is a\n  // bug in node.  Should never happen.\n  if (state.length > 0) throw new Error('\"endReadable()\" called on non-empty stream');\n\n  if (!state.endEmitted) {\n    state.ended = true;\n    pna.nextTick(endReadableNT, state, stream);\n  }\n}\n\nfunction endReadableNT(state, stream) {\n  // Check that we didn't get one last unshift.\n  if (!state.endEmitted && state.length === 0) {\n    state.endEmitted = true;\n    stream.readable = false;\n    stream.emit('end');\n  }\n}\n\nfunction indexOf(xs, x) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    if (xs[i] === x) return i;\n  }\n  return -1;\n}","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// a transform stream is a readable/writable stream where you do\n// something with the data.  Sometimes it's called a \"filter\",\n// but that's not a great name for it, since that implies a thing where\n// some bits pass through, and others are simply ignored.  (That would\n// be a valid example of a transform, of course.)\n//\n// While the output is causally related to the input, it's not a\n// necessarily symmetric or synchronous transformation.  For example,\n// a zlib stream might take multiple plain-text writes(), and then\n// emit a single compressed chunk some time in the future.\n//\n// Here's how this works:\n//\n// The Transform stream has all the aspects of the readable and writable\n// stream classes.  When you write(chunk), that calls _write(chunk,cb)\n// internally, and returns false if there's a lot of pending writes\n// buffered up.  When you call read(), that calls _read(n) until\n// there's enough pending readable data buffered up.\n//\n// In a transform stream, the written data is placed in a buffer.  When\n// _read(n) is called, it transforms the queued up data, calling the\n// buffered _write cb's as it consumes chunks.  If consuming a single\n// written chunk would result in multiple output chunks, then the first\n// outputted bit calls the readcb, and subsequent chunks just go into\n// the read buffer, and will cause it to emit 'readable' if necessary.\n//\n// This way, back-pressure is actually determined by the reading side,\n// since _read has to be called to start processing a new chunk.  However,\n// a pathological inflate type of transform can cause excessive buffering\n// here.  For example, imagine a stream where every byte of input is\n// interpreted as an integer from 0-255, and then results in that many\n// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in\n// 1kb of data being output.  In this case, you could write a very small\n// amount of input, and end up with a very large amount of output.  In\n// such a pathological inflating mechanism, there'd be no way to tell\n// the system to stop doing the transform.  A single 4MB write could\n// cause the system to run out of memory.\n//\n// However, even in such a pathological case, only a single written chunk\n// would be consumed, and then the rest would wait (un-transformed) until\n// the results of the previous transformed chunk were consumed.\n\n'use strict';\n\nmodule.exports = Transform;\n\nvar Duplex = require('./_stream_duplex');\n\n/*<replacement>*/\nvar util = Object.create(require('core-util-is'));\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nutil.inherits(Transform, Duplex);\n\nfunction afterTransform(er, data) {\n  var ts = this._transformState;\n  ts.transforming = false;\n\n  var cb = ts.writecb;\n\n  if (!cb) {\n    return this.emit('error', new Error('write callback called multiple times'));\n  }\n\n  ts.writechunk = null;\n  ts.writecb = null;\n\n  if (data != null) // single equals check for both `null` and `undefined`\n    this.push(data);\n\n  cb(er);\n\n  var rs = this._readableState;\n  rs.reading = false;\n  if (rs.needReadable || rs.length < rs.highWaterMark) {\n    this._read(rs.highWaterMark);\n  }\n}\n\nfunction Transform(options) {\n  if (!(this instanceof Transform)) return new Transform(options);\n\n  Duplex.call(this, options);\n\n  this._transformState = {\n    afterTransform: afterTransform.bind(this),\n    needTransform: false,\n    transforming: false,\n    writecb: null,\n    writechunk: null,\n    writeencoding: null\n  };\n\n  // start out asking for a readable event once data is transformed.\n  this._readableState.needReadable = true;\n\n  // we have implemented the _read method, and done the other things\n  // that Readable wants before the first _read call, so unset the\n  // sync guard flag.\n  this._readableState.sync = false;\n\n  if (options) {\n    if (typeof options.transform === 'function') this._transform = options.transform;\n\n    if (typeof options.flush === 'function') this._flush = options.flush;\n  }\n\n  // When the writable side finishes, then flush out anything remaining.\n  this.on('prefinish', prefinish);\n}\n\nfunction prefinish() {\n  var _this = this;\n\n  if (typeof this._flush === 'function') {\n    this._flush(function (er, data) {\n      done(_this, er, data);\n    });\n  } else {\n    done(this, null, null);\n  }\n}\n\nTransform.prototype.push = function (chunk, encoding) {\n  this._transformState.needTransform = false;\n  return Duplex.prototype.push.call(this, chunk, encoding);\n};\n\n// This is the part where you do stuff!\n// override this function in implementation classes.\n// 'chunk' is an input chunk.\n//\n// Call `push(newChunk)` to pass along transformed output\n// to the readable side.  You may call 'push' zero or more times.\n//\n// Call `cb(err)` when you are done with this chunk.  If you pass\n// an error, then that'll put the hurt on the whole operation.  If you\n// never call cb(), then you'll never get another chunk.\nTransform.prototype._transform = function (chunk, encoding, cb) {\n  throw new Error('_transform() is not implemented');\n};\n\nTransform.prototype._write = function (chunk, encoding, cb) {\n  var ts = this._transformState;\n  ts.writecb = cb;\n  ts.writechunk = chunk;\n  ts.writeencoding = encoding;\n  if (!ts.transforming) {\n    var rs = this._readableState;\n    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);\n  }\n};\n\n// Doesn't matter what the args are here.\n// _transform does all the work.\n// That we got here means that the readable side wants more data.\nTransform.prototype._read = function (n) {\n  var ts = this._transformState;\n\n  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {\n    ts.transforming = true;\n    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);\n  } else {\n    // mark that we need a transform, so that any data that comes in\n    // will get processed, now that we've asked for it.\n    ts.needTransform = true;\n  }\n};\n\nTransform.prototype._destroy = function (err, cb) {\n  var _this2 = this;\n\n  Duplex.prototype._destroy.call(this, err, function (err2) {\n    cb(err2);\n    _this2.emit('close');\n  });\n};\n\nfunction done(stream, er, data) {\n  if (er) return stream.emit('error', er);\n\n  if (data != null) // single equals check for both `null` and `undefined`\n    stream.push(data);\n\n  // if there's nothing in the write buffer, then that means\n  // that nothing more will ever be provided\n  if (stream._writableState.length) throw new Error('Calling transform done when ws.length != 0');\n\n  if (stream._transformState.transforming) throw new Error('Calling transform done when still transforming');\n\n  return stream.push(null);\n}","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// A bit simpler than readable streams.\n// Implement an async ._write(chunk, encoding, cb), and it'll handle all\n// the drain event emission and buffering.\n\n'use strict';\n\n/*<replacement>*/\n\nvar pna = require('process-nextick-args');\n/*</replacement>*/\n\nmodule.exports = Writable;\n\n/* <replacement> */\nfunction WriteReq(chunk, encoding, cb) {\n  this.chunk = chunk;\n  this.encoding = encoding;\n  this.callback = cb;\n  this.next = null;\n}\n\n// It seems a linked list but it is not\n// there will be only 2 of these for each stream\nfunction CorkedRequest(state) {\n  var _this = this;\n\n  this.next = null;\n  this.entry = null;\n  this.finish = function () {\n    onCorkedFinish(_this, state);\n  };\n}\n/* </replacement> */\n\n/*<replacement>*/\nvar asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;\n/*</replacement>*/\n\n/*<replacement>*/\nvar Duplex;\n/*</replacement>*/\n\nWritable.WritableState = WritableState;\n\n/*<replacement>*/\nvar util = Object.create(require('core-util-is'));\nutil.inherits = require('inherits');\n/*</replacement>*/\n\n/*<replacement>*/\nvar internalUtil = {\n  deprecate: require('util-deprecate')\n};\n/*</replacement>*/\n\n/*<replacement>*/\nvar Stream = require('./internal/streams/stream');\n/*</replacement>*/\n\n/*<replacement>*/\n\nvar Buffer = require('safe-buffer').Buffer;\nvar OurUint8Array = global.Uint8Array || function () {};\nfunction _uint8ArrayToBuffer(chunk) {\n  return Buffer.from(chunk);\n}\nfunction _isUint8Array(obj) {\n  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\n}\n\n/*</replacement>*/\n\nvar destroyImpl = require('./internal/streams/destroy');\n\nutil.inherits(Writable, Stream);\n\nfunction nop() {}\n\nfunction WritableState(options, stream) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  options = options || {};\n\n  // Duplex streams are both readable and writable, but share\n  // the same options object.\n  // However, some cases require setting options to different\n  // values for the readable and the writable sides of the duplex stream.\n  // These options can be provided separately as readableXXX and writableXXX.\n  var isDuplex = stream instanceof Duplex;\n\n  // object stream flag to indicate whether or not this stream\n  // contains buffers or objects.\n  this.objectMode = !!options.objectMode;\n\n  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;\n\n  // the point at which write() starts returning false\n  // Note: 0 is a valid value, means that we always return false if\n  // the entire buffer is not flushed immediately on write()\n  var hwm = options.highWaterMark;\n  var writableHwm = options.writableHighWaterMark;\n  var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n\n  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm;else this.highWaterMark = defaultHwm;\n\n  // cast to ints.\n  this.highWaterMark = Math.floor(this.highWaterMark);\n\n  // if _final has been called\n  this.finalCalled = false;\n\n  // drain event flag.\n  this.needDrain = false;\n  // at the start of calling end()\n  this.ending = false;\n  // when end() has been called, and returned\n  this.ended = false;\n  // when 'finish' is emitted\n  this.finished = false;\n\n  // has it been destroyed\n  this.destroyed = false;\n\n  // should we decode strings into buffers before passing to _write?\n  // this is here so that some node-core streams can optimize string\n  // handling at a lower level.\n  var noDecode = options.decodeStrings === false;\n  this.decodeStrings = !noDecode;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // not an actual buffer we keep track of, but a measurement\n  // of how much we're waiting to get pushed to some underlying\n  // socket or file.\n  this.length = 0;\n\n  // a flag to see when we're in the middle of a write.\n  this.writing = false;\n\n  // when true all writes will be buffered until .uncork() call\n  this.corked = 0;\n\n  // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, because any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n  this.sync = true;\n\n  // a flag to know if we're processing previously buffered items, which\n  // may call the _write() callback in the same tick, so that we don't\n  // end up in an overlapped onwrite situation.\n  this.bufferProcessing = false;\n\n  // the callback that's passed to _write(chunk,cb)\n  this.onwrite = function (er) {\n    onwrite(stream, er);\n  };\n\n  // the callback that the user supplies to write(chunk,encoding,cb)\n  this.writecb = null;\n\n  // the amount that is being written when _write is called.\n  this.writelen = 0;\n\n  this.bufferedRequest = null;\n  this.lastBufferedRequest = null;\n\n  // number of pending user-supplied write callbacks\n  // this must be 0 before 'finish' can be emitted\n  this.pendingcb = 0;\n\n  // emit prefinish if the only thing we're waiting for is _write cbs\n  // This is relevant for synchronous Transform streams\n  this.prefinished = false;\n\n  // True if the error was already emitted and should not be thrown again\n  this.errorEmitted = false;\n\n  // count buffered requests\n  this.bufferedRequestCount = 0;\n\n  // allocate the first CorkedRequest, there is always\n  // one allocated and free to use, and we maintain at most two\n  this.corkedRequestsFree = new CorkedRequest(this);\n}\n\nWritableState.prototype.getBuffer = function getBuffer() {\n  var current = this.bufferedRequest;\n  var out = [];\n  while (current) {\n    out.push(current);\n    current = current.next;\n  }\n  return out;\n};\n\n(function () {\n  try {\n    Object.defineProperty(WritableState.prototype, 'buffer', {\n      get: internalUtil.deprecate(function () {\n        return this.getBuffer();\n      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')\n    });\n  } catch (_) {}\n})();\n\n// Test _writableState for inheritance to account for Duplex streams,\n// whose prototype chain only points to Readable.\nvar realHasInstance;\nif (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {\n  realHasInstance = Function.prototype[Symbol.hasInstance];\n  Object.defineProperty(Writable, Symbol.hasInstance, {\n    value: function (object) {\n      if (realHasInstance.call(this, object)) return true;\n      if (this !== Writable) return false;\n\n      return object && object._writableState instanceof WritableState;\n    }\n  });\n} else {\n  realHasInstance = function (object) {\n    return object instanceof this;\n  };\n}\n\nfunction Writable(options) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  // Writable ctor is applied to Duplexes, too.\n  // `realHasInstance` is necessary because using plain `instanceof`\n  // would return false, as no `_writableState` property is attached.\n\n  // Trying to use the custom `instanceof` for Writable here will also break the\n  // Node.js LazyTransform implementation, which has a non-trivial getter for\n  // `_writableState` that would lead to infinite recursion.\n  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {\n    return new Writable(options);\n  }\n\n  this._writableState = new WritableState(options, this);\n\n  // legacy.\n  this.writable = true;\n\n  if (options) {\n    if (typeof options.write === 'function') this._write = options.write;\n\n    if (typeof options.writev === 'function') this._writev = options.writev;\n\n    if (typeof options.destroy === 'function') this._destroy = options.destroy;\n\n    if (typeof options.final === 'function') this._final = options.final;\n  }\n\n  Stream.call(this);\n}\n\n// Otherwise people can pipe Writable streams, which is just wrong.\nWritable.prototype.pipe = function () {\n  this.emit('error', new Error('Cannot pipe, not readable'));\n};\n\nfunction writeAfterEnd(stream, cb) {\n  var er = new Error('write after end');\n  // TODO: defer error events consistently everywhere, not just the cb\n  stream.emit('error', er);\n  pna.nextTick(cb, er);\n}\n\n// Checks that a user-supplied chunk is valid, especially for the particular\n// mode the stream is in. Currently this means that `null` is never accepted\n// and undefined/non-string values are only allowed in object mode.\nfunction validChunk(stream, state, chunk, cb) {\n  var valid = true;\n  var er = false;\n\n  if (chunk === null) {\n    er = new TypeError('May not write null values to stream');\n  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {\n    er = new TypeError('Invalid non-string/buffer chunk');\n  }\n  if (er) {\n    stream.emit('error', er);\n    pna.nextTick(cb, er);\n    valid = false;\n  }\n  return valid;\n}\n\nWritable.prototype.write = function (chunk, encoding, cb) {\n  var state = this._writableState;\n  var ret = false;\n  var isBuf = !state.objectMode && _isUint8Array(chunk);\n\n  if (isBuf && !Buffer.isBuffer(chunk)) {\n    chunk = _uint8ArrayToBuffer(chunk);\n  }\n\n  if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;\n\n  if (typeof cb !== 'function') cb = nop;\n\n  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {\n    state.pendingcb++;\n    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);\n  }\n\n  return ret;\n};\n\nWritable.prototype.cork = function () {\n  var state = this._writableState;\n\n  state.corked++;\n};\n\nWritable.prototype.uncork = function () {\n  var state = this._writableState;\n\n  if (state.corked) {\n    state.corked--;\n\n    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);\n  }\n};\n\nWritable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {\n  // node::ParseEncoding() requires lower case.\n  if (typeof encoding === 'string') encoding = encoding.toLowerCase();\n  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);\n  this._writableState.defaultEncoding = encoding;\n  return this;\n};\n\nfunction decodeChunk(state, chunk, encoding) {\n  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {\n    chunk = Buffer.from(chunk, encoding);\n  }\n  return chunk;\n}\n\nObject.defineProperty(Writable.prototype, 'writableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function () {\n    return this._writableState.highWaterMark;\n  }\n});\n\n// if we're already writing something, then just put this\n// in the queue, and wait our turn.  Otherwise, call _write\n// If we return false, then we need a drain event, so set that flag.\nfunction writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {\n  if (!isBuf) {\n    var newChunk = decodeChunk(state, chunk, encoding);\n    if (chunk !== newChunk) {\n      isBuf = true;\n      encoding = 'buffer';\n      chunk = newChunk;\n    }\n  }\n  var len = state.objectMode ? 1 : chunk.length;\n\n  state.length += len;\n\n  var ret = state.length < state.highWaterMark;\n  // we must ensure that previous needDrain will not be reset to false.\n  if (!ret) state.needDrain = true;\n\n  if (state.writing || state.corked) {\n    var last = state.lastBufferedRequest;\n    state.lastBufferedRequest = {\n      chunk: chunk,\n      encoding: encoding,\n      isBuf: isBuf,\n      callback: cb,\n      next: null\n    };\n    if (last) {\n      last.next = state.lastBufferedRequest;\n    } else {\n      state.bufferedRequest = state.lastBufferedRequest;\n    }\n    state.bufferedRequestCount += 1;\n  } else {\n    doWrite(stream, state, false, len, chunk, encoding, cb);\n  }\n\n  return ret;\n}\n\nfunction doWrite(stream, state, writev, len, chunk, encoding, cb) {\n  state.writelen = len;\n  state.writecb = cb;\n  state.writing = true;\n  state.sync = true;\n  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);\n  state.sync = false;\n}\n\nfunction onwriteError(stream, state, sync, er, cb) {\n  --state.pendingcb;\n\n  if (sync) {\n    // defer the callback if we are being called synchronously\n    // to avoid piling up things on the stack\n    pna.nextTick(cb, er);\n    // this can emit finish, and it will always happen\n    // after error\n    pna.nextTick(finishMaybe, stream, state);\n    stream._writableState.errorEmitted = true;\n    stream.emit('error', er);\n  } else {\n    // the caller expect this to happen before if\n    // it is async\n    cb(er);\n    stream._writableState.errorEmitted = true;\n    stream.emit('error', er);\n    // this can emit finish, but finish must\n    // always follow error\n    finishMaybe(stream, state);\n  }\n}\n\nfunction onwriteStateUpdate(state) {\n  state.writing = false;\n  state.writecb = null;\n  state.length -= state.writelen;\n  state.writelen = 0;\n}\n\nfunction onwrite(stream, er) {\n  var state = stream._writableState;\n  var sync = state.sync;\n  var cb = state.writecb;\n\n  onwriteStateUpdate(state);\n\n  if (er) onwriteError(stream, state, sync, er, cb);else {\n    // Check if we're actually ready to finish, but don't emit yet\n    var finished = needFinish(state);\n\n    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {\n      clearBuffer(stream, state);\n    }\n\n    if (sync) {\n      /*<replacement>*/\n      asyncWrite(afterWrite, stream, state, finished, cb);\n      /*</replacement>*/\n    } else {\n      afterWrite(stream, state, finished, cb);\n    }\n  }\n}\n\nfunction afterWrite(stream, state, finished, cb) {\n  if (!finished) onwriteDrain(stream, state);\n  state.pendingcb--;\n  cb();\n  finishMaybe(stream, state);\n}\n\n// Must force callback to be called on nextTick, so that we don't\n// emit 'drain' before the write() consumer gets the 'false' return\n// value, and has a chance to attach a 'drain' listener.\nfunction onwriteDrain(stream, state) {\n  if (state.length === 0 && state.needDrain) {\n    state.needDrain = false;\n    stream.emit('drain');\n  }\n}\n\n// if there's something in the buffer waiting, then process it\nfunction clearBuffer(stream, state) {\n  state.bufferProcessing = true;\n  var entry = state.bufferedRequest;\n\n  if (stream._writev && entry && entry.next) {\n    // Fast case, write everything using _writev()\n    var l = state.bufferedRequestCount;\n    var buffer = new Array(l);\n    var holder = state.corkedRequestsFree;\n    holder.entry = entry;\n\n    var count = 0;\n    var allBuffers = true;\n    while (entry) {\n      buffer[count] = entry;\n      if (!entry.isBuf) allBuffers = false;\n      entry = entry.next;\n      count += 1;\n    }\n    buffer.allBuffers = allBuffers;\n\n    doWrite(stream, state, true, state.length, buffer, '', holder.finish);\n\n    // doWrite is almost always async, defer these to save a bit of time\n    // as the hot path ends with doWrite\n    state.pendingcb++;\n    state.lastBufferedRequest = null;\n    if (holder.next) {\n      state.corkedRequestsFree = holder.next;\n      holder.next = null;\n    } else {\n      state.corkedRequestsFree = new CorkedRequest(state);\n    }\n    state.bufferedRequestCount = 0;\n  } else {\n    // Slow case, write chunks one-by-one\n    while (entry) {\n      var chunk = entry.chunk;\n      var encoding = entry.encoding;\n      var cb = entry.callback;\n      var len = state.objectMode ? 1 : chunk.length;\n\n      doWrite(stream, state, false, len, chunk, encoding, cb);\n      entry = entry.next;\n      state.bufferedRequestCount--;\n      // if we didn't call the onwrite immediately, then\n      // it means that we need to wait until it does.\n      // also, that means that the chunk and cb are currently\n      // being processed, so move the buffer counter past them.\n      if (state.writing) {\n        break;\n      }\n    }\n\n    if (entry === null) state.lastBufferedRequest = null;\n  }\n\n  state.bufferedRequest = entry;\n  state.bufferProcessing = false;\n}\n\nWritable.prototype._write = function (chunk, encoding, cb) {\n  cb(new Error('_write() is not implemented'));\n};\n\nWritable.prototype._writev = null;\n\nWritable.prototype.end = function (chunk, encoding, cb) {\n  var state = this._writableState;\n\n  if (typeof chunk === 'function') {\n    cb = chunk;\n    chunk = null;\n    encoding = null;\n  } else if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);\n\n  // .end() fully uncorks\n  if (state.corked) {\n    state.corked = 1;\n    this.uncork();\n  }\n\n  // ignore unnecessary end() calls.\n  if (!state.ending && !state.finished) endWritable(this, state, cb);\n};\n\nfunction needFinish(state) {\n  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;\n}\nfunction callFinal(stream, state) {\n  stream._final(function (err) {\n    state.pendingcb--;\n    if (err) {\n      stream.emit('error', err);\n    }\n    state.prefinished = true;\n    stream.emit('prefinish');\n    finishMaybe(stream, state);\n  });\n}\nfunction prefinish(stream, state) {\n  if (!state.prefinished && !state.finalCalled) {\n    if (typeof stream._final === 'function') {\n      state.pendingcb++;\n      state.finalCalled = true;\n      pna.nextTick(callFinal, stream, state);\n    } else {\n      state.prefinished = true;\n      stream.emit('prefinish');\n    }\n  }\n}\n\nfunction finishMaybe(stream, state) {\n  var need = needFinish(state);\n  if (need) {\n    prefinish(stream, state);\n    if (state.pendingcb === 0) {\n      state.finished = true;\n      stream.emit('finish');\n    }\n  }\n  return need;\n}\n\nfunction endWritable(stream, state, cb) {\n  state.ending = true;\n  finishMaybe(stream, state);\n  if (cb) {\n    if (state.finished) pna.nextTick(cb);else stream.once('finish', cb);\n  }\n  state.ended = true;\n  stream.writable = false;\n}\n\nfunction onCorkedFinish(corkReq, state, err) {\n  var entry = corkReq.entry;\n  corkReq.entry = null;\n  while (entry) {\n    var cb = entry.callback;\n    state.pendingcb--;\n    cb(err);\n    entry = entry.next;\n  }\n  if (state.corkedRequestsFree) {\n    state.corkedRequestsFree.next = corkReq;\n  } else {\n    state.corkedRequestsFree = corkReq;\n  }\n}\n\nObject.defineProperty(Writable.prototype, 'destroyed', {\n  get: function () {\n    if (this._writableState === undefined) {\n      return false;\n    }\n    return this._writableState.destroyed;\n  },\n  set: function (value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (!this._writableState) {\n      return;\n    }\n\n    // backward compatibility, the user is explicitly\n    // managing destroyed\n    this._writableState.destroyed = value;\n  }\n});\n\nWritable.prototype.destroy = destroyImpl.destroy;\nWritable.prototype._undestroy = destroyImpl.undestroy;\nWritable.prototype._destroy = function (err, cb) {\n  this.end();\n  cb(err);\n};","'use strict';\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Buffer = require('safe-buffer').Buffer;\nvar util = require('util');\n\nfunction copyBuffer(src, target, offset) {\n  src.copy(target, offset);\n}\n\nmodule.exports = function () {\n  function BufferList() {\n    _classCallCheck(this, BufferList);\n\n    this.head = null;\n    this.tail = null;\n    this.length = 0;\n  }\n\n  BufferList.prototype.push = function push(v) {\n    var entry = { data: v, next: null };\n    if (this.length > 0) this.tail.next = entry;else this.head = entry;\n    this.tail = entry;\n    ++this.length;\n  };\n\n  BufferList.prototype.unshift = function unshift(v) {\n    var entry = { data: v, next: this.head };\n    if (this.length === 0) this.tail = entry;\n    this.head = entry;\n    ++this.length;\n  };\n\n  BufferList.prototype.shift = function shift() {\n    if (this.length === 0) return;\n    var ret = this.head.data;\n    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;\n    --this.length;\n    return ret;\n  };\n\n  BufferList.prototype.clear = function clear() {\n    this.head = this.tail = null;\n    this.length = 0;\n  };\n\n  BufferList.prototype.join = function join(s) {\n    if (this.length === 0) return '';\n    var p = this.head;\n    var ret = '' + p.data;\n    while (p = p.next) {\n      ret += s + p.data;\n    }return ret;\n  };\n\n  BufferList.prototype.concat = function concat(n) {\n    if (this.length === 0) return Buffer.alloc(0);\n    if (this.length === 1) return this.head.data;\n    var ret = Buffer.allocUnsafe(n >>> 0);\n    var p = this.head;\n    var i = 0;\n    while (p) {\n      copyBuffer(p.data, ret, i);\n      i += p.data.length;\n      p = p.next;\n    }\n    return ret;\n  };\n\n  return BufferList;\n}();\n\nif (util && util.inspect && util.inspect.custom) {\n  module.exports.prototype[util.inspect.custom] = function () {\n    var obj = util.inspect({ length: this.length });\n    return this.constructor.name + ' ' + obj;\n  };\n}","'use strict';\n\n/*<replacement>*/\n\nvar pna = require('process-nextick-args');\n/*</replacement>*/\n\n// undocumented cb() API, needed for core, not for public API\nfunction destroy(err, cb) {\n  var _this = this;\n\n  var readableDestroyed = this._readableState && this._readableState.destroyed;\n  var writableDestroyed = this._writableState && this._writableState.destroyed;\n\n  if (readableDestroyed || writableDestroyed) {\n    if (cb) {\n      cb(err);\n    } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {\n      pna.nextTick(emitErrorNT, this, err);\n    }\n    return this;\n  }\n\n  // we set destroyed to true before firing error callbacks in order\n  // to make it re-entrance safe in case destroy() is called within callbacks\n\n  if (this._readableState) {\n    this._readableState.destroyed = true;\n  }\n\n  // if this is a duplex stream mark the writable part as destroyed as well\n  if (this._writableState) {\n    this._writableState.destroyed = true;\n  }\n\n  this._destroy(err || null, function (err) {\n    if (!cb && err) {\n      pna.nextTick(emitErrorNT, _this, err);\n      if (_this._writableState) {\n        _this._writableState.errorEmitted = true;\n      }\n    } else if (cb) {\n      cb(err);\n    }\n  });\n\n  return this;\n}\n\nfunction undestroy() {\n  if (this._readableState) {\n    this._readableState.destroyed = false;\n    this._readableState.reading = false;\n    this._readableState.ended = false;\n    this._readableState.endEmitted = false;\n  }\n\n  if (this._writableState) {\n    this._writableState.destroyed = false;\n    this._writableState.ended = false;\n    this._writableState.ending = false;\n    this._writableState.finished = false;\n    this._writableState.errorEmitted = false;\n  }\n}\n\nfunction emitErrorNT(self, err) {\n  self.emit('error', err);\n}\n\nmodule.exports = {\n  destroy: destroy,\n  undestroy: undestroy\n};","module.exports = require('events').EventEmitter;\n","/* eslint-disable node/no-deprecated-api */\nvar buffer = require('buffer')\nvar Buffer = buffer.Buffer\n\n// alternative to using Object.keys for old browsers\nfunction copyProps (src, dst) {\n  for (var key in src) {\n    dst[key] = src[key]\n  }\n}\nif (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\n  module.exports = buffer\n} else {\n  // Copy properties from require('buffer')\n  copyProps(buffer, exports)\n  exports.Buffer = SafeBuffer\n}\n\nfunction SafeBuffer (arg, encodingOrOffset, length) {\n  return Buffer(arg, encodingOrOffset, length)\n}\n\n// Copy static methods from Buffer\ncopyProps(Buffer, SafeBuffer)\n\nSafeBuffer.from = function (arg, encodingOrOffset, length) {\n  if (typeof arg === 'number') {\n    throw new TypeError('Argument must not be a number')\n  }\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.alloc = function (size, fill, encoding) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  var buf = Buffer(size)\n  if (fill !== undefined) {\n    if (typeof encoding === 'string') {\n      buf.fill(fill, encoding)\n    } else {\n      buf.fill(fill)\n    }\n  } else {\n    buf.fill(0)\n  }\n  return buf\n}\n\nSafeBuffer.allocUnsafe = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return Buffer(size)\n}\n\nSafeBuffer.allocUnsafeSlow = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return buffer.SlowBuffer(size)\n}\n","module.exports = require('./readable').PassThrough\n","exports = module.exports = require('./lib/_stream_readable.js');\nexports.Stream = exports;\nexports.Readable = exports;\nexports.Writable = require('./lib/_stream_writable.js');\nexports.Duplex = require('./lib/_stream_duplex.js');\nexports.Transform = require('./lib/_stream_transform.js');\nexports.PassThrough = require('./lib/_stream_passthrough.js');\n","module.exports = require('./readable').Transform\n","module.exports = require('./lib/_stream_writable.js');\n","'use strict'\nvar Buffer = require('buffer').Buffer\nvar inherits = require('inherits')\nvar HashBase = require('hash-base')\n\nvar ARRAY16 = new Array(16)\n\nvar zl = [\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,\n  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,\n  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,\n  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13\n]\n\nvar zr = [\n  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,\n  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,\n  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,\n  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,\n  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11\n]\n\nvar sl = [\n  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,\n  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,\n  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,\n  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,\n  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6\n]\n\nvar sr = [\n  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,\n  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,\n  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,\n  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,\n  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11\n]\n\nvar hl = [0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e]\nvar hr = [0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000]\n\nfunction RIPEMD160 () {\n  HashBase.call(this, 64)\n\n  // state\n  this._a = 0x67452301\n  this._b = 0xefcdab89\n  this._c = 0x98badcfe\n  this._d = 0x10325476\n  this._e = 0xc3d2e1f0\n}\n\ninherits(RIPEMD160, HashBase)\n\nRIPEMD160.prototype._update = function () {\n  var words = ARRAY16\n  for (var j = 0; j < 16; ++j) words[j] = this._block.readInt32LE(j * 4)\n\n  var al = this._a | 0\n  var bl = this._b | 0\n  var cl = this._c | 0\n  var dl = this._d | 0\n  var el = this._e | 0\n\n  var ar = this._a | 0\n  var br = this._b | 0\n  var cr = this._c | 0\n  var dr = this._d | 0\n  var er = this._e | 0\n\n  // computation\n  for (var i = 0; i < 80; i += 1) {\n    var tl\n    var tr\n    if (i < 16) {\n      tl = fn1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i])\n      tr = fn5(ar, br, cr, dr, er, words[zr[i]], hr[0], sr[i])\n    } else if (i < 32) {\n      tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i])\n      tr = fn4(ar, br, cr, dr, er, words[zr[i]], hr[1], sr[i])\n    } else if (i < 48) {\n      tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i])\n      tr = fn3(ar, br, cr, dr, er, words[zr[i]], hr[2], sr[i])\n    } else if (i < 64) {\n      tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i])\n      tr = fn2(ar, br, cr, dr, er, words[zr[i]], hr[3], sr[i])\n    } else { // if (i<80) {\n      tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i])\n      tr = fn1(ar, br, cr, dr, er, words[zr[i]], hr[4], sr[i])\n    }\n\n    al = el\n    el = dl\n    dl = rotl(cl, 10)\n    cl = bl\n    bl = tl\n\n    ar = er\n    er = dr\n    dr = rotl(cr, 10)\n    cr = br\n    br = tr\n  }\n\n  // update state\n  var t = (this._b + cl + dr) | 0\n  this._b = (this._c + dl + er) | 0\n  this._c = (this._d + el + ar) | 0\n  this._d = (this._e + al + br) | 0\n  this._e = (this._a + bl + cr) | 0\n  this._a = t\n}\n\nRIPEMD160.prototype._digest = function () {\n  // create padding and handle blocks\n  this._block[this._blockOffset++] = 0x80\n  if (this._blockOffset > 56) {\n    this._block.fill(0, this._blockOffset, 64)\n    this._update()\n    this._blockOffset = 0\n  }\n\n  this._block.fill(0, this._blockOffset, 56)\n  this._block.writeUInt32LE(this._length[0], 56)\n  this._block.writeUInt32LE(this._length[1], 60)\n  this._update()\n\n  // produce result\n  var buffer = Buffer.alloc ? Buffer.alloc(20) : new Buffer(20)\n  buffer.writeInt32LE(this._a, 0)\n  buffer.writeInt32LE(this._b, 4)\n  buffer.writeInt32LE(this._c, 8)\n  buffer.writeInt32LE(this._d, 12)\n  buffer.writeInt32LE(this._e, 16)\n  return buffer\n}\n\nfunction rotl (x, n) {\n  return (x << n) | (x >>> (32 - n))\n}\n\nfunction fn1 (a, b, c, d, e, m, k, s) {\n  return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + e) | 0\n}\n\nfunction fn2 (a, b, c, d, e, m, k, s) {\n  return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + e) | 0\n}\n\nfunction fn3 (a, b, c, d, e, m, k, s) {\n  return (rotl((a + ((b | (~c)) ^ d) + m + k) | 0, s) + e) | 0\n}\n\nfunction fn4 (a, b, c, d, e, m, k, s) {\n  return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + e) | 0\n}\n\nfunction fn5 (a, b, c, d, e, m, k, s) {\n  return (rotl((a + (b ^ (c | (~d))) + m + k) | 0, s) + e) | 0\n}\n\nmodule.exports = RIPEMD160\n","/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\n/* eslint-disable node/no-deprecated-api */\nvar buffer = require('buffer')\nvar Buffer = buffer.Buffer\n\n// alternative to using Object.keys for old browsers\nfunction copyProps (src, dst) {\n  for (var key in src) {\n    dst[key] = src[key]\n  }\n}\nif (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\n  module.exports = buffer\n} else {\n  // Copy properties from require('buffer')\n  copyProps(buffer, exports)\n  exports.Buffer = SafeBuffer\n}\n\nfunction SafeBuffer (arg, encodingOrOffset, length) {\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.prototype = Object.create(Buffer.prototype)\n\n// Copy static methods from Buffer\ncopyProps(Buffer, SafeBuffer)\n\nSafeBuffer.from = function (arg, encodingOrOffset, length) {\n  if (typeof arg === 'number') {\n    throw new TypeError('Argument must not be a number')\n  }\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.alloc = function (size, fill, encoding) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  var buf = Buffer(size)\n  if (fill !== undefined) {\n    if (typeof encoding === 'string') {\n      buf.fill(fill, encoding)\n    } else {\n      buf.fill(fill)\n    }\n  } else {\n    buf.fill(0)\n  }\n  return buf\n}\n\nSafeBuffer.allocUnsafe = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return Buffer(size)\n}\n\nSafeBuffer.allocUnsafeSlow = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return buffer.SlowBuffer(size)\n}\n","var Buffer = require('safe-buffer').Buffer\n\n// prototype class for hash functions\nfunction Hash (blockSize, finalSize) {\n  this._block = Buffer.alloc(blockSize)\n  this._finalSize = finalSize\n  this._blockSize = blockSize\n  this._len = 0\n}\n\nHash.prototype.update = function (data, enc) {\n  if (typeof data === 'string') {\n    enc = enc || 'utf8'\n    data = Buffer.from(data, enc)\n  }\n\n  var block = this._block\n  var blockSize = this._blockSize\n  var length = data.length\n  var accum = this._len\n\n  for (var offset = 0; offset < length;) {\n    var assigned = accum % blockSize\n    var remainder = Math.min(length - offset, blockSize - assigned)\n\n    for (var i = 0; i < remainder; i++) {\n      block[assigned + i] = data[offset + i]\n    }\n\n    accum += remainder\n    offset += remainder\n\n    if ((accum % blockSize) === 0) {\n      this._update(block)\n    }\n  }\n\n  this._len += length\n  return this\n}\n\nHash.prototype.digest = function (enc) {\n  var rem = this._len % this._blockSize\n\n  this._block[rem] = 0x80\n\n  // zero (rem + 1) trailing bits, where (rem + 1) is the smallest\n  // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize\n  this._block.fill(0, rem + 1)\n\n  if (rem >= this._finalSize) {\n    this._update(this._block)\n    this._block.fill(0)\n  }\n\n  var bits = this._len * 8\n\n  // uint32\n  if (bits <= 0xffffffff) {\n    this._block.writeUInt32BE(bits, this._blockSize - 4)\n\n  // uint64\n  } else {\n    var lowBits = (bits & 0xffffffff) >>> 0\n    var highBits = (bits - lowBits) / 0x100000000\n\n    this._block.writeUInt32BE(highBits, this._blockSize - 8)\n    this._block.writeUInt32BE(lowBits, this._blockSize - 4)\n  }\n\n  this._update(this._block)\n  var hash = this._hash()\n\n  return enc ? hash.toString(enc) : hash\n}\n\nHash.prototype._update = function () {\n  throw new Error('_update must be implemented by subclass')\n}\n\nmodule.exports = Hash\n","var exports = module.exports = function SHA (algorithm) {\n  algorithm = algorithm.toLowerCase()\n\n  var Algorithm = exports[algorithm]\n  if (!Algorithm) throw new Error(algorithm + ' is not supported (we accept pull requests)')\n\n  return new Algorithm()\n}\n\nexports.sha = require('./sha')\nexports.sha1 = require('./sha1')\nexports.sha224 = require('./sha224')\nexports.sha256 = require('./sha256')\nexports.sha384 = require('./sha384')\nexports.sha512 = require('./sha512')\n","/*\n * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined\n * in FIPS PUB 180-1\n * This source code is derived from sha1.js of the same repository.\n * The difference between SHA-0 and SHA-1 is just a bitwise rotate left\n * operation was added.\n */\n\nvar inherits = require('inherits')\nvar Hash = require('./hash')\nvar Buffer = require('safe-buffer').Buffer\n\nvar K = [\n  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0\n]\n\nvar W = new Array(80)\n\nfunction Sha () {\n  this.init()\n  this._w = W\n\n  Hash.call(this, 64, 56)\n}\n\ninherits(Sha, Hash)\n\nSha.prototype.init = function () {\n  this._a = 0x67452301\n  this._b = 0xefcdab89\n  this._c = 0x98badcfe\n  this._d = 0x10325476\n  this._e = 0xc3d2e1f0\n\n  return this\n}\n\nfunction rotl5 (num) {\n  return (num << 5) | (num >>> 27)\n}\n\nfunction rotl30 (num) {\n  return (num << 30) | (num >>> 2)\n}\n\nfunction ft (s, b, c, d) {\n  if (s === 0) return (b & c) | ((~b) & d)\n  if (s === 2) return (b & c) | (b & d) | (c & d)\n  return b ^ c ^ d\n}\n\nSha.prototype._update = function (M) {\n  var W = this._w\n\n  var a = this._a | 0\n  var b = this._b | 0\n  var c = this._c | 0\n  var d = this._d | 0\n  var e = this._e | 0\n\n  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)\n  for (; i < 80; ++i) W[i] = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]\n\n  for (var j = 0; j < 80; ++j) {\n    var s = ~~(j / 20)\n    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0\n\n    e = d\n    d = c\n    c = rotl30(b)\n    b = a\n    a = t\n  }\n\n  this._a = (a + this._a) | 0\n  this._b = (b + this._b) | 0\n  this._c = (c + this._c) | 0\n  this._d = (d + this._d) | 0\n  this._e = (e + this._e) | 0\n}\n\nSha.prototype._hash = function () {\n  var H = Buffer.allocUnsafe(20)\n\n  H.writeInt32BE(this._a | 0, 0)\n  H.writeInt32BE(this._b | 0, 4)\n  H.writeInt32BE(this._c | 0, 8)\n  H.writeInt32BE(this._d | 0, 12)\n  H.writeInt32BE(this._e | 0, 16)\n\n  return H\n}\n\nmodule.exports = Sha\n","/*\n * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined\n * in FIPS PUB 180-1\n * Version 2.1a Copyright Paul Johnston 2000 - 2002.\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for details.\n */\n\nvar inherits = require('inherits')\nvar Hash = require('./hash')\nvar Buffer = require('safe-buffer').Buffer\n\nvar K = [\n  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0\n]\n\nvar W = new Array(80)\n\nfunction Sha1 () {\n  this.init()\n  this._w = W\n\n  Hash.call(this, 64, 56)\n}\n\ninherits(Sha1, Hash)\n\nSha1.prototype.init = function () {\n  this._a = 0x67452301\n  this._b = 0xefcdab89\n  this._c = 0x98badcfe\n  this._d = 0x10325476\n  this._e = 0xc3d2e1f0\n\n  return this\n}\n\nfunction rotl1 (num) {\n  return (num << 1) | (num >>> 31)\n}\n\nfunction rotl5 (num) {\n  return (num << 5) | (num >>> 27)\n}\n\nfunction rotl30 (num) {\n  return (num << 30) | (num >>> 2)\n}\n\nfunction ft (s, b, c, d) {\n  if (s === 0) return (b & c) | ((~b) & d)\n  if (s === 2) return (b & c) | (b & d) | (c & d)\n  return b ^ c ^ d\n}\n\nSha1.prototype._update = function (M) {\n  var W = this._w\n\n  var a = this._a | 0\n  var b = this._b | 0\n  var c = this._c | 0\n  var d = this._d | 0\n  var e = this._e | 0\n\n  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)\n  for (; i < 80; ++i) W[i] = rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16])\n\n  for (var j = 0; j < 80; ++j) {\n    var s = ~~(j / 20)\n    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0\n\n    e = d\n    d = c\n    c = rotl30(b)\n    b = a\n    a = t\n  }\n\n  this._a = (a + this._a) | 0\n  this._b = (b + this._b) | 0\n  this._c = (c + this._c) | 0\n  this._d = (d + this._d) | 0\n  this._e = (e + this._e) | 0\n}\n\nSha1.prototype._hash = function () {\n  var H = Buffer.allocUnsafe(20)\n\n  H.writeInt32BE(this._a | 0, 0)\n  H.writeInt32BE(this._b | 0, 4)\n  H.writeInt32BE(this._c | 0, 8)\n  H.writeInt32BE(this._d | 0, 12)\n  H.writeInt32BE(this._e | 0, 16)\n\n  return H\n}\n\nmodule.exports = Sha1\n","/**\n * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined\n * in FIPS 180-2\n * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n *\n */\n\nvar inherits = require('inherits')\nvar Sha256 = require('./sha256')\nvar Hash = require('./hash')\nvar Buffer = require('safe-buffer').Buffer\n\nvar W = new Array(64)\n\nfunction Sha224 () {\n  this.init()\n\n  this._w = W // new Array(64)\n\n  Hash.call(this, 64, 56)\n}\n\ninherits(Sha224, Sha256)\n\nSha224.prototype.init = function () {\n  this._a = 0xc1059ed8\n  this._b = 0x367cd507\n  this._c = 0x3070dd17\n  this._d = 0xf70e5939\n  this._e = 0xffc00b31\n  this._f = 0x68581511\n  this._g = 0x64f98fa7\n  this._h = 0xbefa4fa4\n\n  return this\n}\n\nSha224.prototype._hash = function () {\n  var H = Buffer.allocUnsafe(28)\n\n  H.writeInt32BE(this._a, 0)\n  H.writeInt32BE(this._b, 4)\n  H.writeInt32BE(this._c, 8)\n  H.writeInt32BE(this._d, 12)\n  H.writeInt32BE(this._e, 16)\n  H.writeInt32BE(this._f, 20)\n  H.writeInt32BE(this._g, 24)\n\n  return H\n}\n\nmodule.exports = Sha224\n","/**\n * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined\n * in FIPS 180-2\n * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n *\n */\n\nvar inherits = require('inherits')\nvar Hash = require('./hash')\nvar Buffer = require('safe-buffer').Buffer\n\nvar K = [\n  0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,\n  0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,\n  0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,\n  0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,\n  0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,\n  0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,\n  0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,\n  0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,\n  0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,\n  0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,\n  0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,\n  0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,\n  0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,\n  0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,\n  0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,\n  0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2\n]\n\nvar W = new Array(64)\n\nfunction Sha256 () {\n  this.init()\n\n  this._w = W // new Array(64)\n\n  Hash.call(this, 64, 56)\n}\n\ninherits(Sha256, Hash)\n\nSha256.prototype.init = function () {\n  this._a = 0x6a09e667\n  this._b = 0xbb67ae85\n  this._c = 0x3c6ef372\n  this._d = 0xa54ff53a\n  this._e = 0x510e527f\n  this._f = 0x9b05688c\n  this._g = 0x1f83d9ab\n  this._h = 0x5be0cd19\n\n  return this\n}\n\nfunction ch (x, y, z) {\n  return z ^ (x & (y ^ z))\n}\n\nfunction maj (x, y, z) {\n  return (x & y) | (z & (x | y))\n}\n\nfunction sigma0 (x) {\n  return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10)\n}\n\nfunction sigma1 (x) {\n  return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7)\n}\n\nfunction gamma0 (x) {\n  return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ (x >>> 3)\n}\n\nfunction gamma1 (x) {\n  return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ (x >>> 10)\n}\n\nSha256.prototype._update = function (M) {\n  var W = this._w\n\n  var a = this._a | 0\n  var b = this._b | 0\n  var c = this._c | 0\n  var d = this._d | 0\n  var e = this._e | 0\n  var f = this._f | 0\n  var g = this._g | 0\n  var h = this._h | 0\n\n  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)\n  for (; i < 64; ++i) W[i] = (gamma1(W[i - 2]) + W[i - 7] + gamma0(W[i - 15]) + W[i - 16]) | 0\n\n  for (var j = 0; j < 64; ++j) {\n    var T1 = (h + sigma1(e) + ch(e, f, g) + K[j] + W[j]) | 0\n    var T2 = (sigma0(a) + maj(a, b, c)) | 0\n\n    h = g\n    g = f\n    f = e\n    e = (d + T1) | 0\n    d = c\n    c = b\n    b = a\n    a = (T1 + T2) | 0\n  }\n\n  this._a = (a + this._a) | 0\n  this._b = (b + this._b) | 0\n  this._c = (c + this._c) | 0\n  this._d = (d + this._d) | 0\n  this._e = (e + this._e) | 0\n  this._f = (f + this._f) | 0\n  this._g = (g + this._g) | 0\n  this._h = (h + this._h) | 0\n}\n\nSha256.prototype._hash = function () {\n  var H = Buffer.allocUnsafe(32)\n\n  H.writeInt32BE(this._a, 0)\n  H.writeInt32BE(this._b, 4)\n  H.writeInt32BE(this._c, 8)\n  H.writeInt32BE(this._d, 12)\n  H.writeInt32BE(this._e, 16)\n  H.writeInt32BE(this._f, 20)\n  H.writeInt32BE(this._g, 24)\n  H.writeInt32BE(this._h, 28)\n\n  return H\n}\n\nmodule.exports = Sha256\n","var inherits = require('inherits')\nvar SHA512 = require('./sha512')\nvar Hash = require('./hash')\nvar Buffer = require('safe-buffer').Buffer\n\nvar W = new Array(160)\n\nfunction Sha384 () {\n  this.init()\n  this._w = W\n\n  Hash.call(this, 128, 112)\n}\n\ninherits(Sha384, SHA512)\n\nSha384.prototype.init = function () {\n  this._ah = 0xcbbb9d5d\n  this._bh = 0x629a292a\n  this._ch = 0x9159015a\n  this._dh = 0x152fecd8\n  this._eh = 0x67332667\n  this._fh = 0x8eb44a87\n  this._gh = 0xdb0c2e0d\n  this._hh = 0x47b5481d\n\n  this._al = 0xc1059ed8\n  this._bl = 0x367cd507\n  this._cl = 0x3070dd17\n  this._dl = 0xf70e5939\n  this._el = 0xffc00b31\n  this._fl = 0x68581511\n  this._gl = 0x64f98fa7\n  this._hl = 0xbefa4fa4\n\n  return this\n}\n\nSha384.prototype._hash = function () {\n  var H = Buffer.allocUnsafe(48)\n\n  function writeInt64BE (h, l, offset) {\n    H.writeInt32BE(h, offset)\n    H.writeInt32BE(l, offset + 4)\n  }\n\n  writeInt64BE(this._ah, this._al, 0)\n  writeInt64BE(this._bh, this._bl, 8)\n  writeInt64BE(this._ch, this._cl, 16)\n  writeInt64BE(this._dh, this._dl, 24)\n  writeInt64BE(this._eh, this._el, 32)\n  writeInt64BE(this._fh, this._fl, 40)\n\n  return H\n}\n\nmodule.exports = Sha384\n","var inherits = require('inherits')\nvar Hash = require('./hash')\nvar Buffer = require('safe-buffer').Buffer\n\nvar K = [\n  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,\n  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,\n  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,\n  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,\n  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,\n  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,\n  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,\n  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,\n  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,\n  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,\n  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,\n  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,\n  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,\n  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,\n  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,\n  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,\n  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,\n  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,\n  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,\n  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,\n  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,\n  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,\n  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,\n  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,\n  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,\n  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,\n  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,\n  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,\n  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,\n  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,\n  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,\n  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,\n  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,\n  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,\n  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,\n  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,\n  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,\n  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,\n  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,\n  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817\n]\n\nvar W = new Array(160)\n\nfunction Sha512 () {\n  this.init()\n  this._w = W\n\n  Hash.call(this, 128, 112)\n}\n\ninherits(Sha512, Hash)\n\nSha512.prototype.init = function () {\n  this._ah = 0x6a09e667\n  this._bh = 0xbb67ae85\n  this._ch = 0x3c6ef372\n  this._dh = 0xa54ff53a\n  this._eh = 0x510e527f\n  this._fh = 0x9b05688c\n  this._gh = 0x1f83d9ab\n  this._hh = 0x5be0cd19\n\n  this._al = 0xf3bcc908\n  this._bl = 0x84caa73b\n  this._cl = 0xfe94f82b\n  this._dl = 0x5f1d36f1\n  this._el = 0xade682d1\n  this._fl = 0x2b3e6c1f\n  this._gl = 0xfb41bd6b\n  this._hl = 0x137e2179\n\n  return this\n}\n\nfunction Ch (x, y, z) {\n  return z ^ (x & (y ^ z))\n}\n\nfunction maj (x, y, z) {\n  return (x & y) | (z & (x | y))\n}\n\nfunction sigma0 (x, xl) {\n  return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25)\n}\n\nfunction sigma1 (x, xl) {\n  return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23)\n}\n\nfunction Gamma0 (x, xl) {\n  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7)\n}\n\nfunction Gamma0l (x, xl) {\n  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25)\n}\n\nfunction Gamma1 (x, xl) {\n  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6)\n}\n\nfunction Gamma1l (x, xl) {\n  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26)\n}\n\nfunction getCarry (a, b) {\n  return (a >>> 0) < (b >>> 0) ? 1 : 0\n}\n\nSha512.prototype._update = function (M) {\n  var W = this._w\n\n  var ah = this._ah | 0\n  var bh = this._bh | 0\n  var ch = this._ch | 0\n  var dh = this._dh | 0\n  var eh = this._eh | 0\n  var fh = this._fh | 0\n  var gh = this._gh | 0\n  var hh = this._hh | 0\n\n  var al = this._al | 0\n  var bl = this._bl | 0\n  var cl = this._cl | 0\n  var dl = this._dl | 0\n  var el = this._el | 0\n  var fl = this._fl | 0\n  var gl = this._gl | 0\n  var hl = this._hl | 0\n\n  for (var i = 0; i < 32; i += 2) {\n    W[i] = M.readInt32BE(i * 4)\n    W[i + 1] = M.readInt32BE(i * 4 + 4)\n  }\n  for (; i < 160; i += 2) {\n    var xh = W[i - 15 * 2]\n    var xl = W[i - 15 * 2 + 1]\n    var gamma0 = Gamma0(xh, xl)\n    var gamma0l = Gamma0l(xl, xh)\n\n    xh = W[i - 2 * 2]\n    xl = W[i - 2 * 2 + 1]\n    var gamma1 = Gamma1(xh, xl)\n    var gamma1l = Gamma1l(xl, xh)\n\n    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]\n    var Wi7h = W[i - 7 * 2]\n    var Wi7l = W[i - 7 * 2 + 1]\n\n    var Wi16h = W[i - 16 * 2]\n    var Wi16l = W[i - 16 * 2 + 1]\n\n    var Wil = (gamma0l + Wi7l) | 0\n    var Wih = (gamma0 + Wi7h + getCarry(Wil, gamma0l)) | 0\n    Wil = (Wil + gamma1l) | 0\n    Wih = (Wih + gamma1 + getCarry(Wil, gamma1l)) | 0\n    Wil = (Wil + Wi16l) | 0\n    Wih = (Wih + Wi16h + getCarry(Wil, Wi16l)) | 0\n\n    W[i] = Wih\n    W[i + 1] = Wil\n  }\n\n  for (var j = 0; j < 160; j += 2) {\n    Wih = W[j]\n    Wil = W[j + 1]\n\n    var majh = maj(ah, bh, ch)\n    var majl = maj(al, bl, cl)\n\n    var sigma0h = sigma0(ah, al)\n    var sigma0l = sigma0(al, ah)\n    var sigma1h = sigma1(eh, el)\n    var sigma1l = sigma1(el, eh)\n\n    // t1 = h + sigma1 + ch + K[j] + W[j]\n    var Kih = K[j]\n    var Kil = K[j + 1]\n\n    var chh = Ch(eh, fh, gh)\n    var chl = Ch(el, fl, gl)\n\n    var t1l = (hl + sigma1l) | 0\n    var t1h = (hh + sigma1h + getCarry(t1l, hl)) | 0\n    t1l = (t1l + chl) | 0\n    t1h = (t1h + chh + getCarry(t1l, chl)) | 0\n    t1l = (t1l + Kil) | 0\n    t1h = (t1h + Kih + getCarry(t1l, Kil)) | 0\n    t1l = (t1l + Wil) | 0\n    t1h = (t1h + Wih + getCarry(t1l, Wil)) | 0\n\n    // t2 = sigma0 + maj\n    var t2l = (sigma0l + majl) | 0\n    var t2h = (sigma0h + majh + getCarry(t2l, sigma0l)) | 0\n\n    hh = gh\n    hl = gl\n    gh = fh\n    gl = fl\n    fh = eh\n    fl = el\n    el = (dl + t1l) | 0\n    eh = (dh + t1h + getCarry(el, dl)) | 0\n    dh = ch\n    dl = cl\n    ch = bh\n    cl = bl\n    bh = ah\n    bl = al\n    al = (t1l + t2l) | 0\n    ah = (t1h + t2h + getCarry(al, t1l)) | 0\n  }\n\n  this._al = (this._al + al) | 0\n  this._bl = (this._bl + bl) | 0\n  this._cl = (this._cl + cl) | 0\n  this._dl = (this._dl + dl) | 0\n  this._el = (this._el + el) | 0\n  this._fl = (this._fl + fl) | 0\n  this._gl = (this._gl + gl) | 0\n  this._hl = (this._hl + hl) | 0\n\n  this._ah = (this._ah + ah + getCarry(this._al, al)) | 0\n  this._bh = (this._bh + bh + getCarry(this._bl, bl)) | 0\n  this._ch = (this._ch + ch + getCarry(this._cl, cl)) | 0\n  this._dh = (this._dh + dh + getCarry(this._dl, dl)) | 0\n  this._eh = (this._eh + eh + getCarry(this._el, el)) | 0\n  this._fh = (this._fh + fh + getCarry(this._fl, fl)) | 0\n  this._gh = (this._gh + gh + getCarry(this._gl, gl)) | 0\n  this._hh = (this._hh + hh + getCarry(this._hl, hl)) | 0\n}\n\nSha512.prototype._hash = function () {\n  var H = Buffer.allocUnsafe(64)\n\n  function writeInt64BE (h, l, offset) {\n    H.writeInt32BE(h, offset)\n    H.writeInt32BE(l, offset + 4)\n  }\n\n  writeInt64BE(this._ah, this._al, 0)\n  writeInt64BE(this._bh, this._bl, 8)\n  writeInt64BE(this._ch, this._cl, 16)\n  writeInt64BE(this._dh, this._dl, 24)\n  writeInt64BE(this._eh, this._el, 32)\n  writeInt64BE(this._fh, this._fl, 40)\n  writeInt64BE(this._gh, this._gl, 48)\n  writeInt64BE(this._hh, this._hl, 56)\n\n  return H\n}\n\nmodule.exports = Sha512\n","/**\n * SSR Window 2.0.0\n * Better handling for window object in SSR environment\n * https://github.com/nolimits4web/ssr-window\n *\n * Copyright 2020, Vladimir Kharlampidi\n *\n * Licensed under MIT\n *\n * Released on: May 12, 2020\n */\n/* eslint-disable no-param-reassign */\nfunction isObject(obj) {\n    return (obj !== null &&\n        typeof obj === 'object' &&\n        'constructor' in obj &&\n        obj.constructor === Object);\n}\nfunction extend(target, src) {\n    if (target === void 0) { target = {}; }\n    if (src === void 0) { src = {}; }\n    Object.keys(src).forEach(function (key) {\n        if (typeof target[key] === 'undefined')\n            target[key] = src[key];\n        else if (isObject(src[key]) &&\n            isObject(target[key]) &&\n            Object.keys(src[key]).length > 0) {\n            extend(target[key], src[key]);\n        }\n    });\n}\n\nvar doc = typeof document !== 'undefined' ? document : {};\nvar ssrDocument = {\n    body: {},\n    addEventListener: function () { },\n    removeEventListener: function () { },\n    activeElement: {\n        blur: function () { },\n        nodeName: '',\n    },\n    querySelector: function () {\n        return null;\n    },\n    querySelectorAll: function () {\n        return [];\n    },\n    getElementById: function () {\n        return null;\n    },\n    createEvent: function () {\n        return {\n            initEvent: function () { },\n        };\n    },\n    createElement: function () {\n        return {\n            children: [],\n            childNodes: [],\n            style: {},\n            setAttribute: function () { },\n            getElementsByTagName: function () {\n                return [];\n            },\n        };\n    },\n    createElementNS: function () {\n        return {};\n    },\n    importNode: function () {\n        return null;\n    },\n    location: {\n        hash: '',\n        host: '',\n        hostname: '',\n        href: '',\n        origin: '',\n        pathname: '',\n        protocol: '',\n        search: '',\n    },\n};\nextend(doc, ssrDocument);\n\nvar win = typeof window !== 'undefined' ? window : {};\nvar ssrWindow = {\n    document: ssrDocument,\n    navigator: {\n        userAgent: '',\n    },\n    location: {\n        hash: '',\n        host: '',\n        hostname: '',\n        href: '',\n        origin: '',\n        pathname: '',\n        protocol: '',\n        search: '',\n    },\n    history: {\n        replaceState: function () { },\n        pushState: function () { },\n        go: function () { },\n        back: function () { },\n    },\n    CustomEvent: function CustomEvent() {\n        return this;\n    },\n    addEventListener: function () { },\n    removeEventListener: function () { },\n    getComputedStyle: function () {\n        return {\n            getPropertyValue: function () {\n                return '';\n            },\n        };\n    },\n    Image: function () { },\n    Date: function () { },\n    screen: {},\n    setTimeout: function () { },\n    clearTimeout: function () { },\n    matchMedia: function () {\n        return {};\n    },\n};\nextend(win, ssrWindow);\n\nexport { doc as document, extend, win as window };\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nmodule.exports = Stream;\n\nvar EE = require('events').EventEmitter;\nvar inherits = require('inherits');\n\ninherits(Stream, EE);\nStream.Readable = require('readable-stream/readable.js');\nStream.Writable = require('readable-stream/writable.js');\nStream.Duplex = require('readable-stream/duplex.js');\nStream.Transform = require('readable-stream/transform.js');\nStream.PassThrough = require('readable-stream/passthrough.js');\n\n// Backwards-compat with node 0.4.x\nStream.Stream = Stream;\n\n\n\n// old-style streams.  Note that the pipe method (the only relevant\n// part of this class) is overridden in the Readable class.\n\nfunction Stream() {\n  EE.call(this);\n}\n\nStream.prototype.pipe = function(dest, options) {\n  var source = this;\n\n  function ondata(chunk) {\n    if (dest.writable) {\n      if (false === dest.write(chunk) && source.pause) {\n        source.pause();\n      }\n    }\n  }\n\n  source.on('data', ondata);\n\n  function ondrain() {\n    if (source.readable && source.resume) {\n      source.resume();\n    }\n  }\n\n  dest.on('drain', ondrain);\n\n  // If the 'end' option is not supplied, dest.end() will be called when\n  // source gets the 'end' or 'close' events.  Only dest.end() once.\n  if (!dest._isStdio && (!options || options.end !== false)) {\n    source.on('end', onend);\n    source.on('close', onclose);\n  }\n\n  var didOnEnd = false;\n  function onend() {\n    if (didOnEnd) return;\n    didOnEnd = true;\n\n    dest.end();\n  }\n\n\n  function onclose() {\n    if (didOnEnd) return;\n    didOnEnd = true;\n\n    if (typeof dest.destroy === 'function') dest.destroy();\n  }\n\n  // don't leave dangling pipes when there are errors.\n  function onerror(er) {\n    cleanup();\n    if (EE.listenerCount(this, 'error') === 0) {\n      throw er; // Unhandled stream error in pipe.\n    }\n  }\n\n  source.on('error', onerror);\n  dest.on('error', onerror);\n\n  // remove all the event listeners that were added.\n  function cleanup() {\n    source.removeListener('data', ondata);\n    dest.removeListener('drain', ondrain);\n\n    source.removeListener('end', onend);\n    source.removeListener('close', onclose);\n\n    source.removeListener('error', onerror);\n    dest.removeListener('error', onerror);\n\n    source.removeListener('end', cleanup);\n    source.removeListener('close', cleanup);\n\n    dest.removeListener('close', cleanup);\n  }\n\n  source.on('end', cleanup);\n  source.on('close', cleanup);\n\n  dest.on('close', cleanup);\n\n  dest.emit('pipe', source);\n\n  // Allow for unix-like usage: A.pipe(B).pipe(C)\n  return dest;\n};\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n/*<replacement>*/\n\nvar Buffer = require('safe-buffer').Buffer;\n/*</replacement>*/\n\nvar isEncoding = Buffer.isEncoding || function (encoding) {\n  encoding = '' + encoding;\n  switch (encoding && encoding.toLowerCase()) {\n    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':\n      return true;\n    default:\n      return false;\n  }\n};\n\nfunction _normalizeEncoding(enc) {\n  if (!enc) return 'utf8';\n  var retried;\n  while (true) {\n    switch (enc) {\n      case 'utf8':\n      case 'utf-8':\n        return 'utf8';\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return 'utf16le';\n      case 'latin1':\n      case 'binary':\n        return 'latin1';\n      case 'base64':\n      case 'ascii':\n      case 'hex':\n        return enc;\n      default:\n        if (retried) return; // undefined\n        enc = ('' + enc).toLowerCase();\n        retried = true;\n    }\n  }\n};\n\n// Do not cache `Buffer.isEncoding` when checking encoding names as some\n// modules monkey-patch it to support additional encodings\nfunction normalizeEncoding(enc) {\n  var nenc = _normalizeEncoding(enc);\n  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);\n  return nenc || enc;\n}\n\n// StringDecoder provides an interface for efficiently splitting a series of\n// buffers into a series of JS strings without breaking apart multi-byte\n// characters.\nexports.StringDecoder = StringDecoder;\nfunction StringDecoder(encoding) {\n  this.encoding = normalizeEncoding(encoding);\n  var nb;\n  switch (this.encoding) {\n    case 'utf16le':\n      this.text = utf16Text;\n      this.end = utf16End;\n      nb = 4;\n      break;\n    case 'utf8':\n      this.fillLast = utf8FillLast;\n      nb = 4;\n      break;\n    case 'base64':\n      this.text = base64Text;\n      this.end = base64End;\n      nb = 3;\n      break;\n    default:\n      this.write = simpleWrite;\n      this.end = simpleEnd;\n      return;\n  }\n  this.lastNeed = 0;\n  this.lastTotal = 0;\n  this.lastChar = Buffer.allocUnsafe(nb);\n}\n\nStringDecoder.prototype.write = function (buf) {\n  if (buf.length === 0) return '';\n  var r;\n  var i;\n  if (this.lastNeed) {\n    r = this.fillLast(buf);\n    if (r === undefined) return '';\n    i = this.lastNeed;\n    this.lastNeed = 0;\n  } else {\n    i = 0;\n  }\n  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);\n  return r || '';\n};\n\nStringDecoder.prototype.end = utf8End;\n\n// Returns only complete characters in a Buffer\nStringDecoder.prototype.text = utf8Text;\n\n// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer\nStringDecoder.prototype.fillLast = function (buf) {\n  if (this.lastNeed <= buf.length) {\n    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);\n    return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n  }\n  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);\n  this.lastNeed -= buf.length;\n};\n\n// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a\n// continuation byte. If an invalid byte is detected, -2 is returned.\nfunction utf8CheckByte(byte) {\n  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;\n  return byte >> 6 === 0x02 ? -1 : -2;\n}\n\n// Checks at most 3 bytes at the end of a Buffer in order to detect an\n// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)\n// needed to complete the UTF-8 character (if applicable) are returned.\nfunction utf8CheckIncomplete(self, buf, i) {\n  var j = buf.length - 1;\n  if (j < i) return 0;\n  var nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) self.lastNeed = nb - 1;\n    return nb;\n  }\n  if (--j < i || nb === -2) return 0;\n  nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) self.lastNeed = nb - 2;\n    return nb;\n  }\n  if (--j < i || nb === -2) return 0;\n  nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) {\n      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;\n    }\n    return nb;\n  }\n  return 0;\n}\n\n// Validates as many continuation bytes for a multi-byte UTF-8 character as\n// needed or are available. If we see a non-continuation byte where we expect\n// one, we \"replace\" the validated continuation bytes we've seen so far with\n// a single UTF-8 replacement character ('\\ufffd'), to match v8's UTF-8 decoding\n// behavior. The continuation byte check is included three times in the case\n// where all of the continuation bytes for a character exist in the same buffer.\n// It is also done this way as a slight performance increase instead of using a\n// loop.\nfunction utf8CheckExtraBytes(self, buf, p) {\n  if ((buf[0] & 0xC0) !== 0x80) {\n    self.lastNeed = 0;\n    return '\\ufffd';\n  }\n  if (self.lastNeed > 1 && buf.length > 1) {\n    if ((buf[1] & 0xC0) !== 0x80) {\n      self.lastNeed = 1;\n      return '\\ufffd';\n    }\n    if (self.lastNeed > 2 && buf.length > 2) {\n      if ((buf[2] & 0xC0) !== 0x80) {\n        self.lastNeed = 2;\n        return '\\ufffd';\n      }\n    }\n  }\n}\n\n// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.\nfunction utf8FillLast(buf) {\n  var p = this.lastTotal - this.lastNeed;\n  var r = utf8CheckExtraBytes(this, buf, p);\n  if (r !== undefined) return r;\n  if (this.lastNeed <= buf.length) {\n    buf.copy(this.lastChar, p, 0, this.lastNeed);\n    return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n  }\n  buf.copy(this.lastChar, p, 0, buf.length);\n  this.lastNeed -= buf.length;\n}\n\n// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a\n// partial character, the character's bytes are buffered until the required\n// number of bytes are available.\nfunction utf8Text(buf, i) {\n  var total = utf8CheckIncomplete(this, buf, i);\n  if (!this.lastNeed) return buf.toString('utf8', i);\n  this.lastTotal = total;\n  var end = buf.length - (total - this.lastNeed);\n  buf.copy(this.lastChar, 0, end);\n  return buf.toString('utf8', i, end);\n}\n\n// For UTF-8, a replacement character is added when ending on a partial\n// character.\nfunction utf8End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) return r + '\\ufffd';\n  return r;\n}\n\n// UTF-16LE typically needs two bytes per character, but even if we have an even\n// number of bytes available, we need to check if we end on a leading/high\n// surrogate. In that case, we need to wait for the next two bytes in order to\n// decode the last character properly.\nfunction utf16Text(buf, i) {\n  if ((buf.length - i) % 2 === 0) {\n    var r = buf.toString('utf16le', i);\n    if (r) {\n      var c = r.charCodeAt(r.length - 1);\n      if (c >= 0xD800 && c <= 0xDBFF) {\n        this.lastNeed = 2;\n        this.lastTotal = 4;\n        this.lastChar[0] = buf[buf.length - 2];\n        this.lastChar[1] = buf[buf.length - 1];\n        return r.slice(0, -1);\n      }\n    }\n    return r;\n  }\n  this.lastNeed = 1;\n  this.lastTotal = 2;\n  this.lastChar[0] = buf[buf.length - 1];\n  return buf.toString('utf16le', i, buf.length - 1);\n}\n\n// For UTF-16LE we do not explicitly append special replacement characters if we\n// end on a partial character, we simply let v8 handle that.\nfunction utf16End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) {\n    var end = this.lastTotal - this.lastNeed;\n    return r + this.lastChar.toString('utf16le', 0, end);\n  }\n  return r;\n}\n\nfunction base64Text(buf, i) {\n  var n = (buf.length - i) % 3;\n  if (n === 0) return buf.toString('base64', i);\n  this.lastNeed = 3 - n;\n  this.lastTotal = 3;\n  if (n === 1) {\n    this.lastChar[0] = buf[buf.length - 1];\n  } else {\n    this.lastChar[0] = buf[buf.length - 2];\n    this.lastChar[1] = buf[buf.length - 1];\n  }\n  return buf.toString('base64', i, buf.length - n);\n}\n\nfunction base64End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);\n  return r;\n}\n\n// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)\nfunction simpleWrite(buf) {\n  return buf.toString(this.encoding);\n}\n\nfunction simpleEnd(buf) {\n  return buf && buf.length ? this.write(buf) : '';\n}","/** @license URI.js v4.2.1 (c) 2011 Gary Court. License: http://github.com/garycourt/uri-js */\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n\ttypeof define === 'function' && define.amd ? define(['exports'], factory) :\n\t(factory((global.URI = global.URI || {})));\n}(this, (function (exports) { 'use strict';\n\nfunction merge() {\n    for (var _len = arguments.length, sets = Array(_len), _key = 0; _key < _len; _key++) {\n        sets[_key] = arguments[_key];\n    }\n\n    if (sets.length > 1) {\n        sets[0] = sets[0].slice(0, -1);\n        var xl = sets.length - 1;\n        for (var x = 1; x < xl; ++x) {\n            sets[x] = sets[x].slice(1, -1);\n        }\n        sets[xl] = sets[xl].slice(1);\n        return sets.join('');\n    } else {\n        return sets[0];\n    }\n}\nfunction subexp(str) {\n    return \"(?:\" + str + \")\";\n}\nfunction typeOf(o) {\n    return o === undefined ? \"undefined\" : o === null ? \"null\" : Object.prototype.toString.call(o).split(\" \").pop().split(\"]\").shift().toLowerCase();\n}\nfunction toUpperCase(str) {\n    return str.toUpperCase();\n}\nfunction toArray(obj) {\n    return obj !== undefined && obj !== null ? obj instanceof Array ? obj : typeof obj.length !== \"number\" || obj.split || obj.setInterval || obj.call ? [obj] : Array.prototype.slice.call(obj) : [];\n}\nfunction assign(target, source) {\n    var obj = target;\n    if (source) {\n        for (var key in source) {\n            obj[key] = source[key];\n        }\n    }\n    return obj;\n}\n\nfunction buildExps(isIRI) {\n    var ALPHA$$ = \"[A-Za-z]\",\n        CR$ = \"[\\\\x0D]\",\n        DIGIT$$ = \"[0-9]\",\n        DQUOTE$$ = \"[\\\\x22]\",\n        HEXDIG$$ = merge(DIGIT$$, \"[A-Fa-f]\"),\n        //case-insensitive\n    LF$$ = \"[\\\\x0A]\",\n        SP$$ = \"[\\\\x20]\",\n        PCT_ENCODED$ = subexp(subexp(\"%[EFef]\" + HEXDIG$$ + \"%\" + HEXDIG$$ + HEXDIG$$ + \"%\" + HEXDIG$$ + HEXDIG$$) + \"|\" + subexp(\"%[89A-Fa-f]\" + HEXDIG$$ + \"%\" + HEXDIG$$ + HEXDIG$$) + \"|\" + subexp(\"%\" + HEXDIG$$ + HEXDIG$$)),\n        //expanded\n    GEN_DELIMS$$ = \"[\\\\:\\\\/\\\\?\\\\#\\\\[\\\\]\\\\@]\",\n        SUB_DELIMS$$ = \"[\\\\!\\\\$\\\\&\\\\'\\\\(\\\\)\\\\*\\\\+\\\\,\\\\;\\\\=]\",\n        RESERVED$$ = merge(GEN_DELIMS$$, SUB_DELIMS$$),\n        UCSCHAR$$ = isIRI ? \"[\\\\xA0-\\\\u200D\\\\u2010-\\\\u2029\\\\u202F-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF]\" : \"[]\",\n        //subset, excludes bidi control characters\n    IPRIVATE$$ = isIRI ? \"[\\\\uE000-\\\\uF8FF]\" : \"[]\",\n        //subset\n    UNRESERVED$$ = merge(ALPHA$$, DIGIT$$, \"[\\\\-\\\\.\\\\_\\\\~]\", UCSCHAR$$),\n        SCHEME$ = subexp(ALPHA$$ + merge(ALPHA$$, DIGIT$$, \"[\\\\+\\\\-\\\\.]\") + \"*\"),\n        USERINFO$ = subexp(subexp(PCT_ENCODED$ + \"|\" + merge(UNRESERVED$$, SUB_DELIMS$$, \"[\\\\:]\")) + \"*\"),\n        DEC_OCTET$ = subexp(subexp(\"25[0-5]\") + \"|\" + subexp(\"2[0-4]\" + DIGIT$$) + \"|\" + subexp(\"1\" + DIGIT$$ + DIGIT$$) + \"|\" + subexp(\"[1-9]\" + DIGIT$$) + \"|\" + DIGIT$$),\n        DEC_OCTET_RELAXED$ = subexp(subexp(\"25[0-5]\") + \"|\" + subexp(\"2[0-4]\" + DIGIT$$) + \"|\" + subexp(\"1\" + DIGIT$$ + DIGIT$$) + \"|\" + subexp(\"0?[1-9]\" + DIGIT$$) + \"|0?0?\" + DIGIT$$),\n        //relaxed parsing rules\n    IPV4ADDRESS$ = subexp(DEC_OCTET_RELAXED$ + \"\\\\.\" + DEC_OCTET_RELAXED$ + \"\\\\.\" + DEC_OCTET_RELAXED$ + \"\\\\.\" + DEC_OCTET_RELAXED$),\n        H16$ = subexp(HEXDIG$$ + \"{1,4}\"),\n        LS32$ = subexp(subexp(H16$ + \"\\\\:\" + H16$) + \"|\" + IPV4ADDRESS$),\n        IPV6ADDRESS1$ = subexp(subexp(H16$ + \"\\\\:\") + \"{6}\" + LS32$),\n        //                           6( h16 \":\" ) ls32\n    IPV6ADDRESS2$ = subexp(\"\\\\:\\\\:\" + subexp(H16$ + \"\\\\:\") + \"{5}\" + LS32$),\n        //                      \"::\" 5( h16 \":\" ) ls32\n    IPV6ADDRESS3$ = subexp(subexp(H16$) + \"?\\\\:\\\\:\" + subexp(H16$ + \"\\\\:\") + \"{4}\" + LS32$),\n        //[               h16 ] \"::\" 4( h16 \":\" ) ls32\n    IPV6ADDRESS4$ = subexp(subexp(subexp(H16$ + \"\\\\:\") + \"{0,1}\" + H16$) + \"?\\\\:\\\\:\" + subexp(H16$ + \"\\\\:\") + \"{3}\" + LS32$),\n        //[ *1( h16 \":\" ) h16 ] \"::\" 3( h16 \":\" ) ls32\n    IPV6ADDRESS5$ = subexp(subexp(subexp(H16$ + \"\\\\:\") + \"{0,2}\" + H16$) + \"?\\\\:\\\\:\" + subexp(H16$ + \"\\\\:\") + \"{2}\" + LS32$),\n        //[ *2( h16 \":\" ) h16 ] \"::\" 2( h16 \":\" ) ls32\n    IPV6ADDRESS6$ = subexp(subexp(subexp(H16$ + \"\\\\:\") + \"{0,3}\" + H16$) + \"?\\\\:\\\\:\" + H16$ + \"\\\\:\" + LS32$),\n        //[ *3( h16 \":\" ) h16 ] \"::\"    h16 \":\"   ls32\n    IPV6ADDRESS7$ = subexp(subexp(subexp(H16$ + \"\\\\:\") + \"{0,4}\" + H16$) + \"?\\\\:\\\\:\" + LS32$),\n        //[ *4( h16 \":\" ) h16 ] \"::\"              ls32\n    IPV6ADDRESS8$ = subexp(subexp(subexp(H16$ + \"\\\\:\") + \"{0,5}\" + H16$) + \"?\\\\:\\\\:\" + H16$),\n        //[ *5( h16 \":\" ) h16 ] \"::\"              h16\n    IPV6ADDRESS9$ = subexp(subexp(subexp(H16$ + \"\\\\:\") + \"{0,6}\" + H16$) + \"?\\\\:\\\\:\"),\n        //[ *6( h16 \":\" ) h16 ] \"::\"\n    IPV6ADDRESS$ = subexp([IPV6ADDRESS1$, IPV6ADDRESS2$, IPV6ADDRESS3$, IPV6ADDRESS4$, IPV6ADDRESS5$, IPV6ADDRESS6$, IPV6ADDRESS7$, IPV6ADDRESS8$, IPV6ADDRESS9$].join(\"|\")),\n        ZONEID$ = subexp(subexp(UNRESERVED$$ + \"|\" + PCT_ENCODED$) + \"+\"),\n        //RFC 6874\n    IPV6ADDRZ$ = subexp(IPV6ADDRESS$ + \"\\\\%25\" + ZONEID$),\n        //RFC 6874\n    IPV6ADDRZ_RELAXED$ = subexp(IPV6ADDRESS$ + subexp(\"\\\\%25|\\\\%(?!\" + HEXDIG$$ + \"{2})\") + ZONEID$),\n        //RFC 6874, with relaxed parsing rules\n    IPVFUTURE$ = subexp(\"[vV]\" + HEXDIG$$ + \"+\\\\.\" + merge(UNRESERVED$$, SUB_DELIMS$$, \"[\\\\:]\") + \"+\"),\n        IP_LITERAL$ = subexp(\"\\\\[\" + subexp(IPV6ADDRZ_RELAXED$ + \"|\" + IPV6ADDRESS$ + \"|\" + IPVFUTURE$) + \"\\\\]\"),\n        //RFC 6874\n    REG_NAME$ = subexp(subexp(PCT_ENCODED$ + \"|\" + merge(UNRESERVED$$, SUB_DELIMS$$)) + \"*\"),\n        HOST$ = subexp(IP_LITERAL$ + \"|\" + IPV4ADDRESS$ + \"(?!\" + REG_NAME$ + \")\" + \"|\" + REG_NAME$),\n        PORT$ = subexp(DIGIT$$ + \"*\"),\n        AUTHORITY$ = subexp(subexp(USERINFO$ + \"@\") + \"?\" + HOST$ + subexp(\"\\\\:\" + PORT$) + \"?\"),\n        PCHAR$ = subexp(PCT_ENCODED$ + \"|\" + merge(UNRESERVED$$, SUB_DELIMS$$, \"[\\\\:\\\\@]\")),\n        SEGMENT$ = subexp(PCHAR$ + \"*\"),\n        SEGMENT_NZ$ = subexp(PCHAR$ + \"+\"),\n        SEGMENT_NZ_NC$ = subexp(subexp(PCT_ENCODED$ + \"|\" + merge(UNRESERVED$$, SUB_DELIMS$$, \"[\\\\@]\")) + \"+\"),\n        PATH_ABEMPTY$ = subexp(subexp(\"\\\\/\" + SEGMENT$) + \"*\"),\n        PATH_ABSOLUTE$ = subexp(\"\\\\/\" + subexp(SEGMENT_NZ$ + PATH_ABEMPTY$) + \"?\"),\n        //simplified\n    PATH_NOSCHEME$ = subexp(SEGMENT_NZ_NC$ + PATH_ABEMPTY$),\n        //simplified\n    PATH_ROOTLESS$ = subexp(SEGMENT_NZ$ + PATH_ABEMPTY$),\n        //simplified\n    PATH_EMPTY$ = \"(?!\" + PCHAR$ + \")\",\n        PATH$ = subexp(PATH_ABEMPTY$ + \"|\" + PATH_ABSOLUTE$ + \"|\" + PATH_NOSCHEME$ + \"|\" + PATH_ROOTLESS$ + \"|\" + PATH_EMPTY$),\n        QUERY$ = subexp(subexp(PCHAR$ + \"|\" + merge(\"[\\\\/\\\\?]\", IPRIVATE$$)) + \"*\"),\n        FRAGMENT$ = subexp(subexp(PCHAR$ + \"|[\\\\/\\\\?]\") + \"*\"),\n        HIER_PART$ = subexp(subexp(\"\\\\/\\\\/\" + AUTHORITY$ + PATH_ABEMPTY$) + \"|\" + PATH_ABSOLUTE$ + \"|\" + PATH_ROOTLESS$ + \"|\" + PATH_EMPTY$),\n        URI$ = subexp(SCHEME$ + \"\\\\:\" + HIER_PART$ + subexp(\"\\\\?\" + QUERY$) + \"?\" + subexp(\"\\\\#\" + FRAGMENT$) + \"?\"),\n        RELATIVE_PART$ = subexp(subexp(\"\\\\/\\\\/\" + AUTHORITY$ + PATH_ABEMPTY$) + \"|\" + PATH_ABSOLUTE$ + \"|\" + PATH_NOSCHEME$ + \"|\" + PATH_EMPTY$),\n        RELATIVE$ = subexp(RELATIVE_PART$ + subexp(\"\\\\?\" + QUERY$) + \"?\" + subexp(\"\\\\#\" + FRAGMENT$) + \"?\"),\n        URI_REFERENCE$ = subexp(URI$ + \"|\" + RELATIVE$),\n        ABSOLUTE_URI$ = subexp(SCHEME$ + \"\\\\:\" + HIER_PART$ + subexp(\"\\\\?\" + QUERY$) + \"?\"),\n        GENERIC_REF$ = \"^(\" + SCHEME$ + \")\\\\:\" + subexp(subexp(\"\\\\/\\\\/(\" + subexp(\"(\" + USERINFO$ + \")@\") + \"?(\" + HOST$ + \")\" + subexp(\"\\\\:(\" + PORT$ + \")\") + \"?)\") + \"?(\" + PATH_ABEMPTY$ + \"|\" + PATH_ABSOLUTE$ + \"|\" + PATH_ROOTLESS$ + \"|\" + PATH_EMPTY$ + \")\") + subexp(\"\\\\?(\" + QUERY$ + \")\") + \"?\" + subexp(\"\\\\#(\" + FRAGMENT$ + \")\") + \"?$\",\n        RELATIVE_REF$ = \"^(){0}\" + subexp(subexp(\"\\\\/\\\\/(\" + subexp(\"(\" + USERINFO$ + \")@\") + \"?(\" + HOST$ + \")\" + subexp(\"\\\\:(\" + PORT$ + \")\") + \"?)\") + \"?(\" + PATH_ABEMPTY$ + \"|\" + PATH_ABSOLUTE$ + \"|\" + PATH_NOSCHEME$ + \"|\" + PATH_EMPTY$ + \")\") + subexp(\"\\\\?(\" + QUERY$ + \")\") + \"?\" + subexp(\"\\\\#(\" + FRAGMENT$ + \")\") + \"?$\",\n        ABSOLUTE_REF$ = \"^(\" + SCHEME$ + \")\\\\:\" + subexp(subexp(\"\\\\/\\\\/(\" + subexp(\"(\" + USERINFO$ + \")@\") + \"?(\" + HOST$ + \")\" + subexp(\"\\\\:(\" + PORT$ + \")\") + \"?)\") + \"?(\" + PATH_ABEMPTY$ + \"|\" + PATH_ABSOLUTE$ + \"|\" + PATH_ROOTLESS$ + \"|\" + PATH_EMPTY$ + \")\") + subexp(\"\\\\?(\" + QUERY$ + \")\") + \"?$\",\n        SAMEDOC_REF$ = \"^\" + subexp(\"\\\\#(\" + FRAGMENT$ + \")\") + \"?$\",\n        AUTHORITY_REF$ = \"^\" + subexp(\"(\" + USERINFO$ + \")@\") + \"?(\" + HOST$ + \")\" + subexp(\"\\\\:(\" + PORT$ + \")\") + \"?$\";\n    return {\n        NOT_SCHEME: new RegExp(merge(\"[^]\", ALPHA$$, DIGIT$$, \"[\\\\+\\\\-\\\\.]\"), \"g\"),\n        NOT_USERINFO: new RegExp(merge(\"[^\\\\%\\\\:]\", UNRESERVED$$, SUB_DELIMS$$), \"g\"),\n        NOT_HOST: new RegExp(merge(\"[^\\\\%\\\\[\\\\]\\\\:]\", UNRESERVED$$, SUB_DELIMS$$), \"g\"),\n        NOT_PATH: new RegExp(merge(\"[^\\\\%\\\\/\\\\:\\\\@]\", UNRESERVED$$, SUB_DELIMS$$), \"g\"),\n        NOT_PATH_NOSCHEME: new RegExp(merge(\"[^\\\\%\\\\/\\\\@]\", UNRESERVED$$, SUB_DELIMS$$), \"g\"),\n        NOT_QUERY: new RegExp(merge(\"[^\\\\%]\", UNRESERVED$$, SUB_DELIMS$$, \"[\\\\:\\\\@\\\\/\\\\?]\", IPRIVATE$$), \"g\"),\n        NOT_FRAGMENT: new RegExp(merge(\"[^\\\\%]\", UNRESERVED$$, SUB_DELIMS$$, \"[\\\\:\\\\@\\\\/\\\\?]\"), \"g\"),\n        ESCAPE: new RegExp(merge(\"[^]\", UNRESERVED$$, SUB_DELIMS$$), \"g\"),\n        UNRESERVED: new RegExp(UNRESERVED$$, \"g\"),\n        OTHER_CHARS: new RegExp(merge(\"[^\\\\%]\", UNRESERVED$$, RESERVED$$), \"g\"),\n        PCT_ENCODED: new RegExp(PCT_ENCODED$, \"g\"),\n        IPV4ADDRESS: new RegExp(\"^(\" + IPV4ADDRESS$ + \")$\"),\n        IPV6ADDRESS: new RegExp(\"^\\\\[?(\" + IPV6ADDRESS$ + \")\" + subexp(subexp(\"\\\\%25|\\\\%(?!\" + HEXDIG$$ + \"{2})\") + \"(\" + ZONEID$ + \")\") + \"?\\\\]?$\") //RFC 6874, with relaxed parsing rules\n    };\n}\nvar URI_PROTOCOL = buildExps(false);\n\nvar IRI_PROTOCOL = buildExps(true);\n\nvar slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar toConsumableArray = function (arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n};\n\n/** Highest positive signed 32-bit float value */\n\nvar maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1\n\n/** Bootstring parameters */\nvar base = 36;\nvar tMin = 1;\nvar tMax = 26;\nvar skew = 38;\nvar damp = 700;\nvar initialBias = 72;\nvar initialN = 128; // 0x80\nvar delimiter = '-'; // '\\x2D'\n\n/** Regular expressions */\nvar regexPunycode = /^xn--/;\nvar regexNonASCII = /[^\\0-\\x7E]/; // non-ASCII chars\nvar regexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g; // RFC 3490 separators\n\n/** Error messages */\nvar errors = {\n\t'overflow': 'Overflow: input needs wider integers to process',\n\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n\t'invalid-input': 'Invalid input'\n};\n\n/** Convenience shortcuts */\nvar baseMinusTMin = base - tMin;\nvar floor = Math.floor;\nvar stringFromCharCode = String.fromCharCode;\n\n/*--------------------------------------------------------------------------*/\n\n/**\n * A generic error utility function.\n * @private\n * @param {String} type The error type.\n * @returns {Error} Throws a `RangeError` with the applicable error message.\n */\nfunction error$1(type) {\n\tthrow new RangeError(errors[type]);\n}\n\n/**\n * A generic `Array#map` utility function.\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} callback The function that gets called for every array\n * item.\n * @returns {Array} A new array of values returned by the callback function.\n */\nfunction map(array, fn) {\n\tvar result = [];\n\tvar length = array.length;\n\twhile (length--) {\n\t\tresult[length] = fn(array[length]);\n\t}\n\treturn result;\n}\n\n/**\n * A simple `Array#map`-like wrapper to work with domain name strings or email\n * addresses.\n * @private\n * @param {String} domain The domain name or email address.\n * @param {Function} callback The function that gets called for every\n * character.\n * @returns {Array} A new string of characters returned by the callback\n * function.\n */\nfunction mapDomain(string, fn) {\n\tvar parts = string.split('@');\n\tvar result = '';\n\tif (parts.length > 1) {\n\t\t// In email addresses, only the domain name should be punycoded. Leave\n\t\t// the local part (i.e. everything up to `@`) intact.\n\t\tresult = parts[0] + '@';\n\t\tstring = parts[1];\n\t}\n\t// Avoid `split(regex)` for IE8 compatibility. See #17.\n\tstring = string.replace(regexSeparators, '\\x2E');\n\tvar labels = string.split('.');\n\tvar encoded = map(labels, fn).join('.');\n\treturn result + encoded;\n}\n\n/**\n * Creates an array containing the numeric code points of each Unicode\n * character in the string. While JavaScript uses UCS-2 internally,\n * this function will convert a pair of surrogate halves (each of which\n * UCS-2 exposes as separate characters) into a single code point,\n * matching UTF-16.\n * @see `punycode.ucs2.encode`\n * @see <https://mathiasbynens.be/notes/javascript-encoding>\n * @memberOf punycode.ucs2\n * @name decode\n * @param {String} string The Unicode input string (UCS-2).\n * @returns {Array} The new array of code points.\n */\nfunction ucs2decode(string) {\n\tvar output = [];\n\tvar counter = 0;\n\tvar length = string.length;\n\twhile (counter < length) {\n\t\tvar value = string.charCodeAt(counter++);\n\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t// It's a high surrogate, and there is a next character.\n\t\t\tvar extra = string.charCodeAt(counter++);\n\t\t\tif ((extra & 0xFC00) == 0xDC00) {\n\t\t\t\t// Low surrogate.\n\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t} else {\n\t\t\t\t// It's an unmatched surrogate; only append this code unit, in case the\n\t\t\t\t// next code unit is the high surrogate of a surrogate pair.\n\t\t\t\toutput.push(value);\n\t\t\t\tcounter--;\n\t\t\t}\n\t\t} else {\n\t\t\toutput.push(value);\n\t\t}\n\t}\n\treturn output;\n}\n\n/**\n * Creates a string based on an array of numeric code points.\n * @see `punycode.ucs2.decode`\n * @memberOf punycode.ucs2\n * @name encode\n * @param {Array} codePoints The array of numeric code points.\n * @returns {String} The new Unicode string (UCS-2).\n */\nvar ucs2encode = function ucs2encode(array) {\n\treturn String.fromCodePoint.apply(String, toConsumableArray(array));\n};\n\n/**\n * Converts a basic code point into a digit/integer.\n * @see `digitToBasic()`\n * @private\n * @param {Number} codePoint The basic numeric code point value.\n * @returns {Number} The numeric value of a basic code point (for use in\n * representing integers) in the range `0` to `base - 1`, or `base` if\n * the code point does not represent a value.\n */\nvar basicToDigit = function basicToDigit(codePoint) {\n\tif (codePoint - 0x30 < 0x0A) {\n\t\treturn codePoint - 0x16;\n\t}\n\tif (codePoint - 0x41 < 0x1A) {\n\t\treturn codePoint - 0x41;\n\t}\n\tif (codePoint - 0x61 < 0x1A) {\n\t\treturn codePoint - 0x61;\n\t}\n\treturn base;\n};\n\n/**\n * Converts a digit/integer into a basic code point.\n * @see `basicToDigit()`\n * @private\n * @param {Number} digit The numeric value of a basic code point.\n * @returns {Number} The basic code point whose value (when used for\n * representing integers) is `digit`, which needs to be in the range\n * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n * used; else, the lowercase form is used. The behavior is undefined\n * if `flag` is non-zero and `digit` has no uppercase form.\n */\nvar digitToBasic = function digitToBasic(digit, flag) {\n\t//  0..25 map to ASCII a..z or A..Z\n\t// 26..35 map to ASCII 0..9\n\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n};\n\n/**\n * Bias adaptation function as per section 3.4 of RFC 3492.\n * https://tools.ietf.org/html/rfc3492#section-3.4\n * @private\n */\nvar adapt = function adapt(delta, numPoints, firstTime) {\n\tvar k = 0;\n\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\n\tdelta += floor(delta / numPoints);\n\tfor (; /* no initialization */delta > baseMinusTMin * tMax >> 1; k += base) {\n\t\tdelta = floor(delta / baseMinusTMin);\n\t}\n\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n};\n\n/**\n * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n * symbols.\n * @memberOf punycode\n * @param {String} input The Punycode string of ASCII-only symbols.\n * @returns {String} The resulting string of Unicode symbols.\n */\nvar decode = function decode(input) {\n\t// Don't use UCS-2.\n\tvar output = [];\n\tvar inputLength = input.length;\n\tvar i = 0;\n\tvar n = initialN;\n\tvar bias = initialBias;\n\n\t// Handle the basic code points: let `basic` be the number of input code\n\t// points before the last delimiter, or `0` if there is none, then copy\n\t// the first basic code points to the output.\n\n\tvar basic = input.lastIndexOf(delimiter);\n\tif (basic < 0) {\n\t\tbasic = 0;\n\t}\n\n\tfor (var j = 0; j < basic; ++j) {\n\t\t// if it's not a basic code point\n\t\tif (input.charCodeAt(j) >= 0x80) {\n\t\t\terror$1('not-basic');\n\t\t}\n\t\toutput.push(input.charCodeAt(j));\n\t}\n\n\t// Main decoding loop: start just after the last delimiter if any basic code\n\t// points were copied; start at the beginning otherwise.\n\n\tfor (var index = basic > 0 ? basic + 1 : 0; index < inputLength;) /* no final expression */{\n\n\t\t// `index` is the index of the next character to be consumed.\n\t\t// Decode a generalized variable-length integer into `delta`,\n\t\t// which gets added to `i`. The overflow checking is easier\n\t\t// if we increase `i` as we go, then subtract off its starting\n\t\t// value at the end to obtain `delta`.\n\t\tvar oldi = i;\n\t\tfor (var w = 1, k = base;; /* no condition */k += base) {\n\n\t\t\tif (index >= inputLength) {\n\t\t\t\terror$1('invalid-input');\n\t\t\t}\n\n\t\t\tvar digit = basicToDigit(input.charCodeAt(index++));\n\n\t\t\tif (digit >= base || digit > floor((maxInt - i) / w)) {\n\t\t\t\terror$1('overflow');\n\t\t\t}\n\n\t\t\ti += digit * w;\n\t\t\tvar t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;\n\n\t\t\tif (digit < t) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tvar baseMinusT = base - t;\n\t\t\tif (w > floor(maxInt / baseMinusT)) {\n\t\t\t\terror$1('overflow');\n\t\t\t}\n\n\t\t\tw *= baseMinusT;\n\t\t}\n\n\t\tvar out = output.length + 1;\n\t\tbias = adapt(i - oldi, out, oldi == 0);\n\n\t\t// `i` was supposed to wrap around from `out` to `0`,\n\t\t// incrementing `n` each time, so we'll fix that now:\n\t\tif (floor(i / out) > maxInt - n) {\n\t\t\terror$1('overflow');\n\t\t}\n\n\t\tn += floor(i / out);\n\t\ti %= out;\n\n\t\t// Insert `n` at position `i` of the output.\n\t\toutput.splice(i++, 0, n);\n\t}\n\n\treturn String.fromCodePoint.apply(String, output);\n};\n\n/**\n * Converts a string of Unicode symbols (e.g. a domain name label) to a\n * Punycode string of ASCII-only symbols.\n * @memberOf punycode\n * @param {String} input The string of Unicode symbols.\n * @returns {String} The resulting Punycode string of ASCII-only symbols.\n */\nvar encode = function encode(input) {\n\tvar output = [];\n\n\t// Convert the input in UCS-2 to an array of Unicode code points.\n\tinput = ucs2decode(input);\n\n\t// Cache the length.\n\tvar inputLength = input.length;\n\n\t// Initialize the state.\n\tvar n = initialN;\n\tvar delta = 0;\n\tvar bias = initialBias;\n\n\t// Handle the basic code points.\n\tvar _iteratorNormalCompletion = true;\n\tvar _didIteratorError = false;\n\tvar _iteratorError = undefined;\n\n\ttry {\n\t\tfor (var _iterator = input[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t\t\tvar _currentValue2 = _step.value;\n\n\t\t\tif (_currentValue2 < 0x80) {\n\t\t\t\toutput.push(stringFromCharCode(_currentValue2));\n\t\t\t}\n\t\t}\n\t} catch (err) {\n\t\t_didIteratorError = true;\n\t\t_iteratorError = err;\n\t} finally {\n\t\ttry {\n\t\t\tif (!_iteratorNormalCompletion && _iterator.return) {\n\t\t\t\t_iterator.return();\n\t\t\t}\n\t\t} finally {\n\t\t\tif (_didIteratorError) {\n\t\t\t\tthrow _iteratorError;\n\t\t\t}\n\t\t}\n\t}\n\n\tvar basicLength = output.length;\n\tvar handledCPCount = basicLength;\n\n\t// `handledCPCount` is the number of code points that have been handled;\n\t// `basicLength` is the number of basic code points.\n\n\t// Finish the basic string with a delimiter unless it's empty.\n\tif (basicLength) {\n\t\toutput.push(delimiter);\n\t}\n\n\t// Main encoding loop:\n\twhile (handledCPCount < inputLength) {\n\n\t\t// All non-basic code points < n have been handled already. Find the next\n\t\t// larger one:\n\t\tvar m = maxInt;\n\t\tvar _iteratorNormalCompletion2 = true;\n\t\tvar _didIteratorError2 = false;\n\t\tvar _iteratorError2 = undefined;\n\n\t\ttry {\n\t\t\tfor (var _iterator2 = input[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n\t\t\t\tvar currentValue = _step2.value;\n\n\t\t\t\tif (currentValue >= n && currentValue < m) {\n\t\t\t\t\tm = currentValue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n\t\t\t// but guard against overflow.\n\t\t} catch (err) {\n\t\t\t_didIteratorError2 = true;\n\t\t\t_iteratorError2 = err;\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tif (!_iteratorNormalCompletion2 && _iterator2.return) {\n\t\t\t\t\t_iterator2.return();\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\tif (_didIteratorError2) {\n\t\t\t\t\tthrow _iteratorError2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvar handledCPCountPlusOne = handledCPCount + 1;\n\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n\t\t\terror$1('overflow');\n\t\t}\n\n\t\tdelta += (m - n) * handledCPCountPlusOne;\n\t\tn = m;\n\n\t\tvar _iteratorNormalCompletion3 = true;\n\t\tvar _didIteratorError3 = false;\n\t\tvar _iteratorError3 = undefined;\n\n\t\ttry {\n\t\t\tfor (var _iterator3 = input[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n\t\t\t\tvar _currentValue = _step3.value;\n\n\t\t\t\tif (_currentValue < n && ++delta > maxInt) {\n\t\t\t\t\terror$1('overflow');\n\t\t\t\t}\n\t\t\t\tif (_currentValue == n) {\n\t\t\t\t\t// Represent delta as a generalized variable-length integer.\n\t\t\t\t\tvar q = delta;\n\t\t\t\t\tfor (var k = base;; /* no condition */k += base) {\n\t\t\t\t\t\tvar t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;\n\t\t\t\t\t\tif (q < t) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvar qMinusT = q - t;\n\t\t\t\t\t\tvar baseMinusT = base - t;\n\t\t\t\t\t\toutput.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));\n\t\t\t\t\t\tq = floor(qMinusT / baseMinusT);\n\t\t\t\t\t}\n\n\t\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\n\t\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n\t\t\t\t\tdelta = 0;\n\t\t\t\t\t++handledCPCount;\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (err) {\n\t\t\t_didIteratorError3 = true;\n\t\t\t_iteratorError3 = err;\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tif (!_iteratorNormalCompletion3 && _iterator3.return) {\n\t\t\t\t\t_iterator3.return();\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\tif (_didIteratorError3) {\n\t\t\t\t\tthrow _iteratorError3;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t++delta;\n\t\t++n;\n\t}\n\treturn output.join('');\n};\n\n/**\n * Converts a Punycode string representing a domain name or an email address\n * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n * it doesn't matter if you call it on a string that has already been\n * converted to Unicode.\n * @memberOf punycode\n * @param {String} input The Punycoded domain name or email address to\n * convert to Unicode.\n * @returns {String} The Unicode representation of the given Punycode\n * string.\n */\nvar toUnicode = function toUnicode(input) {\n\treturn mapDomain(input, function (string) {\n\t\treturn regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;\n\t});\n};\n\n/**\n * Converts a Unicode string representing a domain name or an email address to\n * Punycode. Only the non-ASCII parts of the domain name will be converted,\n * i.e. it doesn't matter if you call it with a domain that's already in\n * ASCII.\n * @memberOf punycode\n * @param {String} input The domain name or email address to convert, as a\n * Unicode string.\n * @returns {String} The Punycode representation of the given domain name or\n * email address.\n */\nvar toASCII = function toASCII(input) {\n\treturn mapDomain(input, function (string) {\n\t\treturn regexNonASCII.test(string) ? 'xn--' + encode(string) : string;\n\t});\n};\n\n/*--------------------------------------------------------------------------*/\n\n/** Define the public API */\nvar punycode = {\n\t/**\n  * A string representing the current Punycode.js version number.\n  * @memberOf punycode\n  * @type String\n  */\n\t'version': '2.1.0',\n\t/**\n  * An object of methods to convert from JavaScript's internal character\n  * representation (UCS-2) to Unicode code points, and back.\n  * @see <https://mathiasbynens.be/notes/javascript-encoding>\n  * @memberOf punycode\n  * @type Object\n  */\n\t'ucs2': {\n\t\t'decode': ucs2decode,\n\t\t'encode': ucs2encode\n\t},\n\t'decode': decode,\n\t'encode': encode,\n\t'toASCII': toASCII,\n\t'toUnicode': toUnicode\n};\n\n/**\n * URI.js\n *\n * @fileoverview An RFC 3986 compliant, scheme extendable URI parsing/validating/resolving library for JavaScript.\n * @author <a href=\"mailto:gary.court@gmail.com\">Gary Court</a>\n * @see http://github.com/garycourt/uri-js\n */\n/**\n * Copyright 2011 Gary Court. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification, are\n * permitted provided that the following conditions are met:\n *\n *    1. Redistributions of source code must retain the above copyright notice, this list of\n *       conditions and the following disclaimer.\n *\n *    2. Redistributions in binary form must reproduce the above copyright notice, this list\n *       of conditions and the following disclaimer in the documentation and/or other materials\n *       provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY GARY COURT ``AS IS'' AND ANY EXPRESS OR IMPLIED\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL GARY COURT OR\n * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF\n * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n * The views and conclusions contained in the software and documentation are those of the\n * authors and should not be interpreted as representing official policies, either expressed\n * or implied, of Gary Court.\n */\nvar SCHEMES = {};\nfunction pctEncChar(chr) {\n    var c = chr.charCodeAt(0);\n    var e = void 0;\n    if (c < 16) e = \"%0\" + c.toString(16).toUpperCase();else if (c < 128) e = \"%\" + c.toString(16).toUpperCase();else if (c < 2048) e = \"%\" + (c >> 6 | 192).toString(16).toUpperCase() + \"%\" + (c & 63 | 128).toString(16).toUpperCase();else e = \"%\" + (c >> 12 | 224).toString(16).toUpperCase() + \"%\" + (c >> 6 & 63 | 128).toString(16).toUpperCase() + \"%\" + (c & 63 | 128).toString(16).toUpperCase();\n    return e;\n}\nfunction pctDecChars(str) {\n    var newStr = \"\";\n    var i = 0;\n    var il = str.length;\n    while (i < il) {\n        var c = parseInt(str.substr(i + 1, 2), 16);\n        if (c < 128) {\n            newStr += String.fromCharCode(c);\n            i += 3;\n        } else if (c >= 194 && c < 224) {\n            if (il - i >= 6) {\n                var c2 = parseInt(str.substr(i + 4, 2), 16);\n                newStr += String.fromCharCode((c & 31) << 6 | c2 & 63);\n            } else {\n                newStr += str.substr(i, 6);\n            }\n            i += 6;\n        } else if (c >= 224) {\n            if (il - i >= 9) {\n                var _c = parseInt(str.substr(i + 4, 2), 16);\n                var c3 = parseInt(str.substr(i + 7, 2), 16);\n                newStr += String.fromCharCode((c & 15) << 12 | (_c & 63) << 6 | c3 & 63);\n            } else {\n                newStr += str.substr(i, 9);\n            }\n            i += 9;\n        } else {\n            newStr += str.substr(i, 3);\n            i += 3;\n        }\n    }\n    return newStr;\n}\nfunction _normalizeComponentEncoding(components, protocol) {\n    function decodeUnreserved(str) {\n        var decStr = pctDecChars(str);\n        return !decStr.match(protocol.UNRESERVED) ? str : decStr;\n    }\n    if (components.scheme) components.scheme = String(components.scheme).replace(protocol.PCT_ENCODED, decodeUnreserved).toLowerCase().replace(protocol.NOT_SCHEME, \"\");\n    if (components.userinfo !== undefined) components.userinfo = String(components.userinfo).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(protocol.NOT_USERINFO, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);\n    if (components.host !== undefined) components.host = String(components.host).replace(protocol.PCT_ENCODED, decodeUnreserved).toLowerCase().replace(protocol.NOT_HOST, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);\n    if (components.path !== undefined) components.path = String(components.path).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(components.scheme ? protocol.NOT_PATH : protocol.NOT_PATH_NOSCHEME, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);\n    if (components.query !== undefined) components.query = String(components.query).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(protocol.NOT_QUERY, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);\n    if (components.fragment !== undefined) components.fragment = String(components.fragment).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(protocol.NOT_FRAGMENT, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);\n    return components;\n}\n\nfunction _stripLeadingZeros(str) {\n    return str.replace(/^0*(.*)/, \"$1\") || \"0\";\n}\nfunction _normalizeIPv4(host, protocol) {\n    var matches = host.match(protocol.IPV4ADDRESS) || [];\n\n    var _matches = slicedToArray(matches, 2),\n        address = _matches[1];\n\n    if (address) {\n        return address.split(\".\").map(_stripLeadingZeros).join(\".\");\n    } else {\n        return host;\n    }\n}\nfunction _normalizeIPv6(host, protocol) {\n    var matches = host.match(protocol.IPV6ADDRESS) || [];\n\n    var _matches2 = slicedToArray(matches, 3),\n        address = _matches2[1],\n        zone = _matches2[2];\n\n    if (address) {\n        var _address$toLowerCase$ = address.toLowerCase().split('::').reverse(),\n            _address$toLowerCase$2 = slicedToArray(_address$toLowerCase$, 2),\n            last = _address$toLowerCase$2[0],\n            first = _address$toLowerCase$2[1];\n\n        var firstFields = first ? first.split(\":\").map(_stripLeadingZeros) : [];\n        var lastFields = last.split(\":\").map(_stripLeadingZeros);\n        var isLastFieldIPv4Address = protocol.IPV4ADDRESS.test(lastFields[lastFields.length - 1]);\n        var fieldCount = isLastFieldIPv4Address ? 7 : 8;\n        var lastFieldsStart = lastFields.length - fieldCount;\n        var fields = Array(fieldCount);\n        for (var x = 0; x < fieldCount; ++x) {\n            fields[x] = firstFields[x] || lastFields[lastFieldsStart + x] || '';\n        }\n        if (isLastFieldIPv4Address) {\n            fields[fieldCount - 1] = _normalizeIPv4(fields[fieldCount - 1], protocol);\n        }\n        var allZeroFields = fields.reduce(function (acc, field, index) {\n            if (!field || field === \"0\") {\n                var lastLongest = acc[acc.length - 1];\n                if (lastLongest && lastLongest.index + lastLongest.length === index) {\n                    lastLongest.length++;\n                } else {\n                    acc.push({ index: index, length: 1 });\n                }\n            }\n            return acc;\n        }, []);\n        var longestZeroFields = allZeroFields.sort(function (a, b) {\n            return b.length - a.length;\n        })[0];\n        var newHost = void 0;\n        if (longestZeroFields && longestZeroFields.length > 1) {\n            var newFirst = fields.slice(0, longestZeroFields.index);\n            var newLast = fields.slice(longestZeroFields.index + longestZeroFields.length);\n            newHost = newFirst.join(\":\") + \"::\" + newLast.join(\":\");\n        } else {\n            newHost = fields.join(\":\");\n        }\n        if (zone) {\n            newHost += \"%\" + zone;\n        }\n        return newHost;\n    } else {\n        return host;\n    }\n}\nvar URI_PARSE = /^(?:([^:\\/?#]+):)?(?:\\/\\/((?:([^\\/?#@]*)@)?(\\[[^\\/?#\\]]+\\]|[^\\/?#:]*)(?:\\:(\\d*))?))?([^?#]*)(?:\\?([^#]*))?(?:#((?:.|\\n|\\r)*))?/i;\nvar NO_MATCH_IS_UNDEFINED = \"\".match(/(){0}/)[1] === undefined;\nfunction parse(uriString) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    var components = {};\n    var protocol = options.iri !== false ? IRI_PROTOCOL : URI_PROTOCOL;\n    if (options.reference === \"suffix\") uriString = (options.scheme ? options.scheme + \":\" : \"\") + \"//\" + uriString;\n    var matches = uriString.match(URI_PARSE);\n    if (matches) {\n        if (NO_MATCH_IS_UNDEFINED) {\n            //store each component\n            components.scheme = matches[1];\n            components.userinfo = matches[3];\n            components.host = matches[4];\n            components.port = parseInt(matches[5], 10);\n            components.path = matches[6] || \"\";\n            components.query = matches[7];\n            components.fragment = matches[8];\n            //fix port number\n            if (isNaN(components.port)) {\n                components.port = matches[5];\n            }\n        } else {\n            //IE FIX for improper RegExp matching\n            //store each component\n            components.scheme = matches[1] || undefined;\n            components.userinfo = uriString.indexOf(\"@\") !== -1 ? matches[3] : undefined;\n            components.host = uriString.indexOf(\"//\") !== -1 ? matches[4] : undefined;\n            components.port = parseInt(matches[5], 10);\n            components.path = matches[6] || \"\";\n            components.query = uriString.indexOf(\"?\") !== -1 ? matches[7] : undefined;\n            components.fragment = uriString.indexOf(\"#\") !== -1 ? matches[8] : undefined;\n            //fix port number\n            if (isNaN(components.port)) {\n                components.port = uriString.match(/\\/\\/(?:.|\\n)*\\:(?:\\/|\\?|\\#|$)/) ? matches[4] : undefined;\n            }\n        }\n        if (components.host) {\n            //normalize IP hosts\n            components.host = _normalizeIPv6(_normalizeIPv4(components.host, protocol), protocol);\n        }\n        //determine reference type\n        if (components.scheme === undefined && components.userinfo === undefined && components.host === undefined && components.port === undefined && !components.path && components.query === undefined) {\n            components.reference = \"same-document\";\n        } else if (components.scheme === undefined) {\n            components.reference = \"relative\";\n        } else if (components.fragment === undefined) {\n            components.reference = \"absolute\";\n        } else {\n            components.reference = \"uri\";\n        }\n        //check for reference errors\n        if (options.reference && options.reference !== \"suffix\" && options.reference !== components.reference) {\n            components.error = components.error || \"URI is not a \" + options.reference + \" reference.\";\n        }\n        //find scheme handler\n        var schemeHandler = SCHEMES[(options.scheme || components.scheme || \"\").toLowerCase()];\n        //check if scheme can't handle IRIs\n        if (!options.unicodeSupport && (!schemeHandler || !schemeHandler.unicodeSupport)) {\n            //if host component is a domain name\n            if (components.host && (options.domainHost || schemeHandler && schemeHandler.domainHost)) {\n                //convert Unicode IDN -> ASCII IDN\n                try {\n                    components.host = punycode.toASCII(components.host.replace(protocol.PCT_ENCODED, pctDecChars).toLowerCase());\n                } catch (e) {\n                    components.error = components.error || \"Host's domain name can not be converted to ASCII via punycode: \" + e;\n                }\n            }\n            //convert IRI -> URI\n            _normalizeComponentEncoding(components, URI_PROTOCOL);\n        } else {\n            //normalize encodings\n            _normalizeComponentEncoding(components, protocol);\n        }\n        //perform scheme specific parsing\n        if (schemeHandler && schemeHandler.parse) {\n            schemeHandler.parse(components, options);\n        }\n    } else {\n        components.error = components.error || \"URI can not be parsed.\";\n    }\n    return components;\n}\n\nfunction _recomposeAuthority(components, options) {\n    var protocol = options.iri !== false ? IRI_PROTOCOL : URI_PROTOCOL;\n    var uriTokens = [];\n    if (components.userinfo !== undefined) {\n        uriTokens.push(components.userinfo);\n        uriTokens.push(\"@\");\n    }\n    if (components.host !== undefined) {\n        //normalize IP hosts, add brackets and escape zone separator for IPv6\n        uriTokens.push(_normalizeIPv6(_normalizeIPv4(String(components.host), protocol), protocol).replace(protocol.IPV6ADDRESS, function (_, $1, $2) {\n            return \"[\" + $1 + ($2 ? \"%25\" + $2 : \"\") + \"]\";\n        }));\n    }\n    if (typeof components.port === \"number\") {\n        uriTokens.push(\":\");\n        uriTokens.push(components.port.toString(10));\n    }\n    return uriTokens.length ? uriTokens.join(\"\") : undefined;\n}\n\nvar RDS1 = /^\\.\\.?\\//;\nvar RDS2 = /^\\/\\.(\\/|$)/;\nvar RDS3 = /^\\/\\.\\.(\\/|$)/;\nvar RDS5 = /^\\/?(?:.|\\n)*?(?=\\/|$)/;\nfunction removeDotSegments(input) {\n    var output = [];\n    while (input.length) {\n        if (input.match(RDS1)) {\n            input = input.replace(RDS1, \"\");\n        } else if (input.match(RDS2)) {\n            input = input.replace(RDS2, \"/\");\n        } else if (input.match(RDS3)) {\n            input = input.replace(RDS3, \"/\");\n            output.pop();\n        } else if (input === \".\" || input === \"..\") {\n            input = \"\";\n        } else {\n            var im = input.match(RDS5);\n            if (im) {\n                var s = im[0];\n                input = input.slice(s.length);\n                output.push(s);\n            } else {\n                throw new Error(\"Unexpected dot segment condition\");\n            }\n        }\n    }\n    return output.join(\"\");\n}\n\nfunction serialize(components) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    var protocol = options.iri ? IRI_PROTOCOL : URI_PROTOCOL;\n    var uriTokens = [];\n    //find scheme handler\n    var schemeHandler = SCHEMES[(options.scheme || components.scheme || \"\").toLowerCase()];\n    //perform scheme specific serialization\n    if (schemeHandler && schemeHandler.serialize) schemeHandler.serialize(components, options);\n    if (components.host) {\n        //if host component is an IPv6 address\n        if (protocol.IPV6ADDRESS.test(components.host)) {}\n        //TODO: normalize IPv6 address as per RFC 5952\n\n        //if host component is a domain name\n        else if (options.domainHost || schemeHandler && schemeHandler.domainHost) {\n                //convert IDN via punycode\n                try {\n                    components.host = !options.iri ? punycode.toASCII(components.host.replace(protocol.PCT_ENCODED, pctDecChars).toLowerCase()) : punycode.toUnicode(components.host);\n                } catch (e) {\n                    components.error = components.error || \"Host's domain name can not be converted to \" + (!options.iri ? \"ASCII\" : \"Unicode\") + \" via punycode: \" + e;\n                }\n            }\n    }\n    //normalize encoding\n    _normalizeComponentEncoding(components, protocol);\n    if (options.reference !== \"suffix\" && components.scheme) {\n        uriTokens.push(components.scheme);\n        uriTokens.push(\":\");\n    }\n    var authority = _recomposeAuthority(components, options);\n    if (authority !== undefined) {\n        if (options.reference !== \"suffix\") {\n            uriTokens.push(\"//\");\n        }\n        uriTokens.push(authority);\n        if (components.path && components.path.charAt(0) !== \"/\") {\n            uriTokens.push(\"/\");\n        }\n    }\n    if (components.path !== undefined) {\n        var s = components.path;\n        if (!options.absolutePath && (!schemeHandler || !schemeHandler.absolutePath)) {\n            s = removeDotSegments(s);\n        }\n        if (authority === undefined) {\n            s = s.replace(/^\\/\\//, \"/%2F\"); //don't allow the path to start with \"//\"\n        }\n        uriTokens.push(s);\n    }\n    if (components.query !== undefined) {\n        uriTokens.push(\"?\");\n        uriTokens.push(components.query);\n    }\n    if (components.fragment !== undefined) {\n        uriTokens.push(\"#\");\n        uriTokens.push(components.fragment);\n    }\n    return uriTokens.join(\"\"); //merge tokens into a string\n}\n\nfunction resolveComponents(base, relative) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var skipNormalization = arguments[3];\n\n    var target = {};\n    if (!skipNormalization) {\n        base = parse(serialize(base, options), options); //normalize base components\n        relative = parse(serialize(relative, options), options); //normalize relative components\n    }\n    options = options || {};\n    if (!options.tolerant && relative.scheme) {\n        target.scheme = relative.scheme;\n        //target.authority = relative.authority;\n        target.userinfo = relative.userinfo;\n        target.host = relative.host;\n        target.port = relative.port;\n        target.path = removeDotSegments(relative.path || \"\");\n        target.query = relative.query;\n    } else {\n        if (relative.userinfo !== undefined || relative.host !== undefined || relative.port !== undefined) {\n            //target.authority = relative.authority;\n            target.userinfo = relative.userinfo;\n            target.host = relative.host;\n            target.port = relative.port;\n            target.path = removeDotSegments(relative.path || \"\");\n            target.query = relative.query;\n        } else {\n            if (!relative.path) {\n                target.path = base.path;\n                if (relative.query !== undefined) {\n                    target.query = relative.query;\n                } else {\n                    target.query = base.query;\n                }\n            } else {\n                if (relative.path.charAt(0) === \"/\") {\n                    target.path = removeDotSegments(relative.path);\n                } else {\n                    if ((base.userinfo !== undefined || base.host !== undefined || base.port !== undefined) && !base.path) {\n                        target.path = \"/\" + relative.path;\n                    } else if (!base.path) {\n                        target.path = relative.path;\n                    } else {\n                        target.path = base.path.slice(0, base.path.lastIndexOf(\"/\") + 1) + relative.path;\n                    }\n                    target.path = removeDotSegments(target.path);\n                }\n                target.query = relative.query;\n            }\n            //target.authority = base.authority;\n            target.userinfo = base.userinfo;\n            target.host = base.host;\n            target.port = base.port;\n        }\n        target.scheme = base.scheme;\n    }\n    target.fragment = relative.fragment;\n    return target;\n}\n\nfunction resolve(baseURI, relativeURI, options) {\n    var schemelessOptions = assign({ scheme: 'null' }, options);\n    return serialize(resolveComponents(parse(baseURI, schemelessOptions), parse(relativeURI, schemelessOptions), schemelessOptions, true), schemelessOptions);\n}\n\nfunction normalize(uri, options) {\n    if (typeof uri === \"string\") {\n        uri = serialize(parse(uri, options), options);\n    } else if (typeOf(uri) === \"object\") {\n        uri = parse(serialize(uri, options), options);\n    }\n    return uri;\n}\n\nfunction equal(uriA, uriB, options) {\n    if (typeof uriA === \"string\") {\n        uriA = serialize(parse(uriA, options), options);\n    } else if (typeOf(uriA) === \"object\") {\n        uriA = serialize(uriA, options);\n    }\n    if (typeof uriB === \"string\") {\n        uriB = serialize(parse(uriB, options), options);\n    } else if (typeOf(uriB) === \"object\") {\n        uriB = serialize(uriB, options);\n    }\n    return uriA === uriB;\n}\n\nfunction escapeComponent(str, options) {\n    return str && str.toString().replace(!options || !options.iri ? URI_PROTOCOL.ESCAPE : IRI_PROTOCOL.ESCAPE, pctEncChar);\n}\n\nfunction unescapeComponent(str, options) {\n    return str && str.toString().replace(!options || !options.iri ? URI_PROTOCOL.PCT_ENCODED : IRI_PROTOCOL.PCT_ENCODED, pctDecChars);\n}\n\nvar handler = {\n    scheme: \"http\",\n    domainHost: true,\n    parse: function parse(components, options) {\n        //report missing host\n        if (!components.host) {\n            components.error = components.error || \"HTTP URIs must have a host.\";\n        }\n        return components;\n    },\n    serialize: function serialize(components, options) {\n        //normalize the default port\n        if (components.port === (String(components.scheme).toLowerCase() !== \"https\" ? 80 : 443) || components.port === \"\") {\n            components.port = undefined;\n        }\n        //normalize the empty path\n        if (!components.path) {\n            components.path = \"/\";\n        }\n        //NOTE: We do not parse query strings for HTTP URIs\n        //as WWW Form Url Encoded query strings are part of the HTML4+ spec,\n        //and not the HTTP spec.\n        return components;\n    }\n};\n\nvar handler$1 = {\n    scheme: \"https\",\n    domainHost: handler.domainHost,\n    parse: handler.parse,\n    serialize: handler.serialize\n};\n\nvar O = {};\nvar isIRI = true;\n//RFC 3986\nvar UNRESERVED$$ = \"[A-Za-z0-9\\\\-\\\\.\\\\_\\\\~\" + (isIRI ? \"\\\\xA0-\\\\u200D\\\\u2010-\\\\u2029\\\\u202F-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF\" : \"\") + \"]\";\nvar HEXDIG$$ = \"[0-9A-Fa-f]\"; //case-insensitive\nvar PCT_ENCODED$ = subexp(subexp(\"%[EFef]\" + HEXDIG$$ + \"%\" + HEXDIG$$ + HEXDIG$$ + \"%\" + HEXDIG$$ + HEXDIG$$) + \"|\" + subexp(\"%[89A-Fa-f]\" + HEXDIG$$ + \"%\" + HEXDIG$$ + HEXDIG$$) + \"|\" + subexp(\"%\" + HEXDIG$$ + HEXDIG$$)); //expanded\n//RFC 5322, except these symbols as per RFC 6068: @ : / ? # [ ] & ; =\n//const ATEXT$$ = \"[A-Za-z0-9\\\\!\\\\#\\\\$\\\\%\\\\&\\\\'\\\\*\\\\+\\\\-\\\\/\\\\=\\\\?\\\\^\\\\_\\\\`\\\\{\\\\|\\\\}\\\\~]\";\n//const WSP$$ = \"[\\\\x20\\\\x09]\";\n//const OBS_QTEXT$$ = \"[\\\\x01-\\\\x08\\\\x0B\\\\x0C\\\\x0E-\\\\x1F\\\\x7F]\";  //(%d1-8 / %d11-12 / %d14-31 / %d127)\n//const QTEXT$$ = merge(\"[\\\\x21\\\\x23-\\\\x5B\\\\x5D-\\\\x7E]\", OBS_QTEXT$$);  //%d33 / %d35-91 / %d93-126 / obs-qtext\n//const VCHAR$$ = \"[\\\\x21-\\\\x7E]\";\n//const WSP$$ = \"[\\\\x20\\\\x09]\";\n//const OBS_QP$ = subexp(\"\\\\\\\\\" + merge(\"[\\\\x00\\\\x0D\\\\x0A]\", OBS_QTEXT$$));  //%d0 / CR / LF / obs-qtext\n//const FWS$ = subexp(subexp(WSP$$ + \"*\" + \"\\\\x0D\\\\x0A\") + \"?\" + WSP$$ + \"+\");\n//const QUOTED_PAIR$ = subexp(subexp(\"\\\\\\\\\" + subexp(VCHAR$$ + \"|\" + WSP$$)) + \"|\" + OBS_QP$);\n//const QUOTED_STRING$ = subexp('\\\\\"' + subexp(FWS$ + \"?\" + QCONTENT$) + \"*\" + FWS$ + \"?\" + '\\\\\"');\nvar ATEXT$$ = \"[A-Za-z0-9\\\\!\\\\$\\\\%\\\\'\\\\*\\\\+\\\\-\\\\^\\\\_\\\\`\\\\{\\\\|\\\\}\\\\~]\";\nvar QTEXT$$ = \"[\\\\!\\\\$\\\\%\\\\'\\\\(\\\\)\\\\*\\\\+\\\\,\\\\-\\\\.0-9\\\\<\\\\>A-Z\\\\x5E-\\\\x7E]\";\nvar VCHAR$$ = merge(QTEXT$$, \"[\\\\\\\"\\\\\\\\]\");\nvar SOME_DELIMS$$ = \"[\\\\!\\\\$\\\\'\\\\(\\\\)\\\\*\\\\+\\\\,\\\\;\\\\:\\\\@]\";\nvar UNRESERVED = new RegExp(UNRESERVED$$, \"g\");\nvar PCT_ENCODED = new RegExp(PCT_ENCODED$, \"g\");\nvar NOT_LOCAL_PART = new RegExp(merge(\"[^]\", ATEXT$$, \"[\\\\.]\", '[\\\\\"]', VCHAR$$), \"g\");\nvar NOT_HFNAME = new RegExp(merge(\"[^]\", UNRESERVED$$, SOME_DELIMS$$), \"g\");\nvar NOT_HFVALUE = NOT_HFNAME;\nfunction decodeUnreserved(str) {\n    var decStr = pctDecChars(str);\n    return !decStr.match(UNRESERVED) ? str : decStr;\n}\nvar handler$2 = {\n    scheme: \"mailto\",\n    parse: function parse$$1(components, options) {\n        var mailtoComponents = components;\n        var to = mailtoComponents.to = mailtoComponents.path ? mailtoComponents.path.split(\",\") : [];\n        mailtoComponents.path = undefined;\n        if (mailtoComponents.query) {\n            var unknownHeaders = false;\n            var headers = {};\n            var hfields = mailtoComponents.query.split(\"&\");\n            for (var x = 0, xl = hfields.length; x < xl; ++x) {\n                var hfield = hfields[x].split(\"=\");\n                switch (hfield[0]) {\n                    case \"to\":\n                        var toAddrs = hfield[1].split(\",\");\n                        for (var _x = 0, _xl = toAddrs.length; _x < _xl; ++_x) {\n                            to.push(toAddrs[_x]);\n                        }\n                        break;\n                    case \"subject\":\n                        mailtoComponents.subject = unescapeComponent(hfield[1], options);\n                        break;\n                    case \"body\":\n                        mailtoComponents.body = unescapeComponent(hfield[1], options);\n                        break;\n                    default:\n                        unknownHeaders = true;\n                        headers[unescapeComponent(hfield[0], options)] = unescapeComponent(hfield[1], options);\n                        break;\n                }\n            }\n            if (unknownHeaders) mailtoComponents.headers = headers;\n        }\n        mailtoComponents.query = undefined;\n        for (var _x2 = 0, _xl2 = to.length; _x2 < _xl2; ++_x2) {\n            var addr = to[_x2].split(\"@\");\n            addr[0] = unescapeComponent(addr[0]);\n            if (!options.unicodeSupport) {\n                //convert Unicode IDN -> ASCII IDN\n                try {\n                    addr[1] = punycode.toASCII(unescapeComponent(addr[1], options).toLowerCase());\n                } catch (e) {\n                    mailtoComponents.error = mailtoComponents.error || \"Email address's domain name can not be converted to ASCII via punycode: \" + e;\n                }\n            } else {\n                addr[1] = unescapeComponent(addr[1], options).toLowerCase();\n            }\n            to[_x2] = addr.join(\"@\");\n        }\n        return mailtoComponents;\n    },\n    serialize: function serialize$$1(mailtoComponents, options) {\n        var components = mailtoComponents;\n        var to = toArray(mailtoComponents.to);\n        if (to) {\n            for (var x = 0, xl = to.length; x < xl; ++x) {\n                var toAddr = String(to[x]);\n                var atIdx = toAddr.lastIndexOf(\"@\");\n                var localPart = toAddr.slice(0, atIdx).replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_LOCAL_PART, pctEncChar);\n                var domain = toAddr.slice(atIdx + 1);\n                //convert IDN via punycode\n                try {\n                    domain = !options.iri ? punycode.toASCII(unescapeComponent(domain, options).toLowerCase()) : punycode.toUnicode(domain);\n                } catch (e) {\n                    components.error = components.error || \"Email address's domain name can not be converted to \" + (!options.iri ? \"ASCII\" : \"Unicode\") + \" via punycode: \" + e;\n                }\n                to[x] = localPart + \"@\" + domain;\n            }\n            components.path = to.join(\",\");\n        }\n        var headers = mailtoComponents.headers = mailtoComponents.headers || {};\n        if (mailtoComponents.subject) headers[\"subject\"] = mailtoComponents.subject;\n        if (mailtoComponents.body) headers[\"body\"] = mailtoComponents.body;\n        var fields = [];\n        for (var name in headers) {\n            if (headers[name] !== O[name]) {\n                fields.push(name.replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_HFNAME, pctEncChar) + \"=\" + headers[name].replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_HFVALUE, pctEncChar));\n            }\n        }\n        if (fields.length) {\n            components.query = fields.join(\"&\");\n        }\n        return components;\n    }\n};\n\nvar URN_PARSE = /^([^\\:]+)\\:(.*)/;\n//RFC 2141\nvar handler$3 = {\n    scheme: \"urn\",\n    parse: function parse$$1(components, options) {\n        var matches = components.path && components.path.match(URN_PARSE);\n        var urnComponents = components;\n        if (matches) {\n            var scheme = options.scheme || urnComponents.scheme || \"urn\";\n            var nid = matches[1].toLowerCase();\n            var nss = matches[2];\n            var urnScheme = scheme + \":\" + (options.nid || nid);\n            var schemeHandler = SCHEMES[urnScheme];\n            urnComponents.nid = nid;\n            urnComponents.nss = nss;\n            urnComponents.path = undefined;\n            if (schemeHandler) {\n                urnComponents = schemeHandler.parse(urnComponents, options);\n            }\n        } else {\n            urnComponents.error = urnComponents.error || \"URN can not be parsed.\";\n        }\n        return urnComponents;\n    },\n    serialize: function serialize$$1(urnComponents, options) {\n        var scheme = options.scheme || urnComponents.scheme || \"urn\";\n        var nid = urnComponents.nid;\n        var urnScheme = scheme + \":\" + (options.nid || nid);\n        var schemeHandler = SCHEMES[urnScheme];\n        if (schemeHandler) {\n            urnComponents = schemeHandler.serialize(urnComponents, options);\n        }\n        var uriComponents = urnComponents;\n        var nss = urnComponents.nss;\n        uriComponents.path = (nid || options.nid) + \":\" + nss;\n        return uriComponents;\n    }\n};\n\nvar UUID = /^[0-9A-Fa-f]{8}(?:\\-[0-9A-Fa-f]{4}){3}\\-[0-9A-Fa-f]{12}$/;\n//RFC 4122\nvar handler$4 = {\n    scheme: \"urn:uuid\",\n    parse: function parse(urnComponents, options) {\n        var uuidComponents = urnComponents;\n        uuidComponents.uuid = uuidComponents.nss;\n        uuidComponents.nss = undefined;\n        if (!options.tolerant && (!uuidComponents.uuid || !uuidComponents.uuid.match(UUID))) {\n            uuidComponents.error = uuidComponents.error || \"UUID is not valid.\";\n        }\n        return uuidComponents;\n    },\n    serialize: function serialize(uuidComponents, options) {\n        var urnComponents = uuidComponents;\n        //normalize UUID\n        urnComponents.nss = (uuidComponents.uuid || \"\").toLowerCase();\n        return urnComponents;\n    }\n};\n\nSCHEMES[handler.scheme] = handler;\nSCHEMES[handler$1.scheme] = handler$1;\nSCHEMES[handler$2.scheme] = handler$2;\nSCHEMES[handler$3.scheme] = handler$3;\nSCHEMES[handler$4.scheme] = handler$4;\n\nexports.SCHEMES = SCHEMES;\nexports.pctEncChar = pctEncChar;\nexports.pctDecChars = pctDecChars;\nexports.parse = parse;\nexports.removeDotSegments = removeDotSegments;\nexports.serialize = serialize;\nexports.resolveComponents = resolveComponents;\nexports.resolve = resolve;\nexports.normalize = normalize;\nexports.equal = equal;\nexports.escapeComponent = escapeComponent;\nexports.unescapeComponent = unescapeComponent;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=uri.all.js.map\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = \"./node_modules/url-loader/dist sync recursive\";","\"use strict\";\n\nconst loader = require('./index');\n\nmodule.exports = loader.default;\nmodule.exports.raw = loader.raw;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = loader;\nexports.raw = void 0;\n\nvar _path = _interopRequireDefault(require(\"path\"));\n\nvar _loaderUtils = require(\"loader-utils\");\n\nvar _schemaUtils = _interopRequireDefault(require(\"schema-utils\"));\n\nvar _mimeTypes = _interopRequireDefault(require(\"mime-types\"));\n\nvar _normalizeFallback = _interopRequireDefault(require(\"./utils/normalizeFallback\"));\n\nvar _options = _interopRequireDefault(require(\"./options.json\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction shouldTransform(limit, size) {\n  if (typeof limit === 'boolean') {\n    return limit;\n  }\n\n  if (typeof limit === 'string') {\n    return size <= parseInt(limit, 10);\n  }\n\n  if (typeof limit === 'number') {\n    return size <= limit;\n  }\n\n  return true;\n}\n\nfunction getMimetype(mimetype, resourcePath) {\n  if (typeof mimetype === 'boolean') {\n    if (mimetype) {\n      const resolvedMimeType = _mimeTypes.default.contentType(_path.default.extname(resourcePath));\n\n      if (!resolvedMimeType) {\n        return '';\n      }\n\n      return resolvedMimeType.replace(/;\\s+charset/i, ';charset');\n    }\n\n    return '';\n  }\n\n  if (typeof mimetype === 'string') {\n    return mimetype;\n  }\n\n  const resolvedMimeType = _mimeTypes.default.contentType(_path.default.extname(resourcePath));\n\n  if (!resolvedMimeType) {\n    return '';\n  }\n\n  return resolvedMimeType.replace(/;\\s+charset/i, ';charset');\n}\n\nfunction getEncoding(encoding) {\n  if (typeof encoding === 'boolean') {\n    return encoding ? 'base64' : '';\n  }\n\n  if (typeof encoding === 'string') {\n    return encoding;\n  }\n\n  return 'base64';\n}\n\nfunction getEncodedData(generator, mimetype, encoding, content, resourcePath) {\n  if (generator) {\n    return generator(content, mimetype, encoding, resourcePath);\n  }\n\n  return `data:${mimetype}${encoding ? `;${encoding}` : ''},${content.toString( // eslint-disable-next-line no-undefined\n  encoding || undefined)}`;\n}\n\nfunction loader(content) {\n  // Loader Options\n  const options = (0, _loaderUtils.getOptions)(this) || {};\n  (0, _schemaUtils.default)(_options.default, options, {\n    name: 'URL Loader',\n    baseDataPath: 'options'\n  }); // No limit or within the specified limit\n\n  if (shouldTransform(options.limit, content.length)) {\n    const {\n      resourcePath\n    } = this;\n    const mimetype = getMimetype(options.mimetype, resourcePath);\n    const encoding = getEncoding(options.encoding);\n\n    if (typeof content === 'string') {\n      // eslint-disable-next-line no-param-reassign\n      content = Buffer.from(content);\n    }\n\n    const encodedData = getEncodedData(options.generator, mimetype, encoding, content, resourcePath);\n    const esModule = typeof options.esModule !== 'undefined' ? options.esModule : true;\n    return `${esModule ? 'export default' : 'module.exports ='} ${JSON.stringify(encodedData)}`;\n  } // Normalize the fallback.\n\n\n  const {\n    loader: fallbackLoader,\n    options: fallbackOptions\n  } = (0, _normalizeFallback.default)(options.fallback, options); // Require the fallback.\n  // eslint-disable-next-line global-require, import/no-dynamic-require\n\n  const fallback = require(fallbackLoader); // Call the fallback, passing a copy of the loader context. The copy has the query replaced. This way, the fallback\n  // loader receives the query which was intended for it instead of the query which was intended for url-loader.\n\n\n  const fallbackLoaderContext = Object.assign({}, this, {\n    query: fallbackOptions\n  });\n  return fallback.call(fallbackLoaderContext, content);\n} // Loader Mode\n\n\nconst raw = true;\nexports.raw = raw;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = normalizeFallback;\n\nvar _loaderUtils = _interopRequireDefault(require(\"loader-utils\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction normalizeFallback(fallback, originalOptions) {\n  let loader = 'file-loader';\n  let options = {};\n\n  if (typeof fallback === 'string') {\n    loader = fallback;\n    const index = fallback.indexOf('?');\n\n    if (index >= 0) {\n      loader = fallback.substr(0, index);\n      options = _loaderUtils.default.parseQuery(fallback.substr(index));\n    }\n  }\n\n  if (fallback !== null && typeof fallback === 'object') {\n    ({\n      loader,\n      options\n    } = fallback);\n  }\n\n  options = Object.assign({}, originalOptions, options);\n  delete options.fallback;\n  return {\n    loader,\n    options\n  };\n}","(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(global.JSON5 = factory());\n}(this, (function () { 'use strict';\n\n\tfunction createCommonjsModule(fn, module) {\n\t\treturn module = { exports: {} }, fn(module, module.exports), module.exports;\n\t}\n\n\tvar _global = createCommonjsModule(function (module) {\n\t// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\n\tvar global = module.exports = typeof window != 'undefined' && window.Math == Math\n\t  ? window : typeof self != 'undefined' && self.Math == Math ? self\n\t  // eslint-disable-next-line no-new-func\n\t  : Function('return this')();\n\tif (typeof __g == 'number') { __g = global; } // eslint-disable-line no-undef\n\t});\n\n\tvar _core = createCommonjsModule(function (module) {\n\tvar core = module.exports = { version: '2.6.5' };\n\tif (typeof __e == 'number') { __e = core; } // eslint-disable-line no-undef\n\t});\n\tvar _core_1 = _core.version;\n\n\tvar _isObject = function (it) {\n\t  return typeof it === 'object' ? it !== null : typeof it === 'function';\n\t};\n\n\tvar _anObject = function (it) {\n\t  if (!_isObject(it)) { throw TypeError(it + ' is not an object!'); }\n\t  return it;\n\t};\n\n\tvar _fails = function (exec) {\n\t  try {\n\t    return !!exec();\n\t  } catch (e) {\n\t    return true;\n\t  }\n\t};\n\n\t// Thank's IE8 for his funny defineProperty\n\tvar _descriptors = !_fails(function () {\n\t  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;\n\t});\n\n\tvar document = _global.document;\n\t// typeof document.createElement is 'object' in old IE\n\tvar is = _isObject(document) && _isObject(document.createElement);\n\tvar _domCreate = function (it) {\n\t  return is ? document.createElement(it) : {};\n\t};\n\n\tvar _ie8DomDefine = !_descriptors && !_fails(function () {\n\t  return Object.defineProperty(_domCreate('div'), 'a', { get: function () { return 7; } }).a != 7;\n\t});\n\n\t// 7.1.1 ToPrimitive(input [, PreferredType])\n\n\t// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n\t// and the second argument - flag - preferred type is a string\n\tvar _toPrimitive = function (it, S) {\n\t  if (!_isObject(it)) { return it; }\n\t  var fn, val;\n\t  if (S && typeof (fn = it.toString) == 'function' && !_isObject(val = fn.call(it))) { return val; }\n\t  if (typeof (fn = it.valueOf) == 'function' && !_isObject(val = fn.call(it))) { return val; }\n\t  if (!S && typeof (fn = it.toString) == 'function' && !_isObject(val = fn.call(it))) { return val; }\n\t  throw TypeError(\"Can't convert object to primitive value\");\n\t};\n\n\tvar dP = Object.defineProperty;\n\n\tvar f = _descriptors ? Object.defineProperty : function defineProperty(O, P, Attributes) {\n\t  _anObject(O);\n\t  P = _toPrimitive(P, true);\n\t  _anObject(Attributes);\n\t  if (_ie8DomDefine) { try {\n\t    return dP(O, P, Attributes);\n\t  } catch (e) { /* empty */ } }\n\t  if ('get' in Attributes || 'set' in Attributes) { throw TypeError('Accessors not supported!'); }\n\t  if ('value' in Attributes) { O[P] = Attributes.value; }\n\t  return O;\n\t};\n\n\tvar _objectDp = {\n\t\tf: f\n\t};\n\n\tvar _propertyDesc = function (bitmap, value) {\n\t  return {\n\t    enumerable: !(bitmap & 1),\n\t    configurable: !(bitmap & 2),\n\t    writable: !(bitmap & 4),\n\t    value: value\n\t  };\n\t};\n\n\tvar _hide = _descriptors ? function (object, key, value) {\n\t  return _objectDp.f(object, key, _propertyDesc(1, value));\n\t} : function (object, key, value) {\n\t  object[key] = value;\n\t  return object;\n\t};\n\n\tvar hasOwnProperty = {}.hasOwnProperty;\n\tvar _has = function (it, key) {\n\t  return hasOwnProperty.call(it, key);\n\t};\n\n\tvar id = 0;\n\tvar px = Math.random();\n\tvar _uid = function (key) {\n\t  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));\n\t};\n\n\tvar _library = false;\n\n\tvar _shared = createCommonjsModule(function (module) {\n\tvar SHARED = '__core-js_shared__';\n\tvar store = _global[SHARED] || (_global[SHARED] = {});\n\n\t(module.exports = function (key, value) {\n\t  return store[key] || (store[key] = value !== undefined ? value : {});\n\t})('versions', []).push({\n\t  version: _core.version,\n\t  mode: _library ? 'pure' : 'global',\n\t  copyright: '© 2019 Denis Pushkarev (zloirock.ru)'\n\t});\n\t});\n\n\tvar _functionToString = _shared('native-function-to-string', Function.toString);\n\n\tvar _redefine = createCommonjsModule(function (module) {\n\tvar SRC = _uid('src');\n\n\tvar TO_STRING = 'toString';\n\tvar TPL = ('' + _functionToString).split(TO_STRING);\n\n\t_core.inspectSource = function (it) {\n\t  return _functionToString.call(it);\n\t};\n\n\t(module.exports = function (O, key, val, safe) {\n\t  var isFunction = typeof val == 'function';\n\t  if (isFunction) { _has(val, 'name') || _hide(val, 'name', key); }\n\t  if (O[key] === val) { return; }\n\t  if (isFunction) { _has(val, SRC) || _hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key))); }\n\t  if (O === _global) {\n\t    O[key] = val;\n\t  } else if (!safe) {\n\t    delete O[key];\n\t    _hide(O, key, val);\n\t  } else if (O[key]) {\n\t    O[key] = val;\n\t  } else {\n\t    _hide(O, key, val);\n\t  }\n\t// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative\n\t})(Function.prototype, TO_STRING, function toString() {\n\t  return typeof this == 'function' && this[SRC] || _functionToString.call(this);\n\t});\n\t});\n\n\tvar _aFunction = function (it) {\n\t  if (typeof it != 'function') { throw TypeError(it + ' is not a function!'); }\n\t  return it;\n\t};\n\n\t// optional / simple context binding\n\n\tvar _ctx = function (fn, that, length) {\n\t  _aFunction(fn);\n\t  if (that === undefined) { return fn; }\n\t  switch (length) {\n\t    case 1: return function (a) {\n\t      return fn.call(that, a);\n\t    };\n\t    case 2: return function (a, b) {\n\t      return fn.call(that, a, b);\n\t    };\n\t    case 3: return function (a, b, c) {\n\t      return fn.call(that, a, b, c);\n\t    };\n\t  }\n\t  return function (/* ...args */) {\n\t    return fn.apply(that, arguments);\n\t  };\n\t};\n\n\tvar PROTOTYPE = 'prototype';\n\n\tvar $export = function (type, name, source) {\n\t  var IS_FORCED = type & $export.F;\n\t  var IS_GLOBAL = type & $export.G;\n\t  var IS_STATIC = type & $export.S;\n\t  var IS_PROTO = type & $export.P;\n\t  var IS_BIND = type & $export.B;\n\t  var target = IS_GLOBAL ? _global : IS_STATIC ? _global[name] || (_global[name] = {}) : (_global[name] || {})[PROTOTYPE];\n\t  var exports = IS_GLOBAL ? _core : _core[name] || (_core[name] = {});\n\t  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});\n\t  var key, own, out, exp;\n\t  if (IS_GLOBAL) { source = name; }\n\t  for (key in source) {\n\t    // contains in native\n\t    own = !IS_FORCED && target && target[key] !== undefined;\n\t    // export native or passed\n\t    out = (own ? target : source)[key];\n\t    // bind timers to global for call from export context\n\t    exp = IS_BIND && own ? _ctx(out, _global) : IS_PROTO && typeof out == 'function' ? _ctx(Function.call, out) : out;\n\t    // extend global\n\t    if (target) { _redefine(target, key, out, type & $export.U); }\n\t    // export\n\t    if (exports[key] != out) { _hide(exports, key, exp); }\n\t    if (IS_PROTO && expProto[key] != out) { expProto[key] = out; }\n\t  }\n\t};\n\t_global.core = _core;\n\t// type bitmap\n\t$export.F = 1;   // forced\n\t$export.G = 2;   // global\n\t$export.S = 4;   // static\n\t$export.P = 8;   // proto\n\t$export.B = 16;  // bind\n\t$export.W = 32;  // wrap\n\t$export.U = 64;  // safe\n\t$export.R = 128; // real proto method for `library`\n\tvar _export = $export;\n\n\t// 7.1.4 ToInteger\n\tvar ceil = Math.ceil;\n\tvar floor = Math.floor;\n\tvar _toInteger = function (it) {\n\t  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);\n\t};\n\n\t// 7.2.1 RequireObjectCoercible(argument)\n\tvar _defined = function (it) {\n\t  if (it == undefined) { throw TypeError(\"Can't call method on  \" + it); }\n\t  return it;\n\t};\n\n\t// true  -> String#at\n\t// false -> String#codePointAt\n\tvar _stringAt = function (TO_STRING) {\n\t  return function (that, pos) {\n\t    var s = String(_defined(that));\n\t    var i = _toInteger(pos);\n\t    var l = s.length;\n\t    var a, b;\n\t    if (i < 0 || i >= l) { return TO_STRING ? '' : undefined; }\n\t    a = s.charCodeAt(i);\n\t    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff\n\t      ? TO_STRING ? s.charAt(i) : a\n\t      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;\n\t  };\n\t};\n\n\tvar $at = _stringAt(false);\n\t_export(_export.P, 'String', {\n\t  // 21.1.3.3 String.prototype.codePointAt(pos)\n\t  codePointAt: function codePointAt(pos) {\n\t    return $at(this, pos);\n\t  }\n\t});\n\n\tvar codePointAt = _core.String.codePointAt;\n\n\tvar max = Math.max;\n\tvar min = Math.min;\n\tvar _toAbsoluteIndex = function (index, length) {\n\t  index = _toInteger(index);\n\t  return index < 0 ? max(index + length, 0) : min(index, length);\n\t};\n\n\tvar fromCharCode = String.fromCharCode;\n\tvar $fromCodePoint = String.fromCodePoint;\n\n\t// length should be 1, old FF problem\n\t_export(_export.S + _export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {\n\t  // 21.1.2.2 String.fromCodePoint(...codePoints)\n\t  fromCodePoint: function fromCodePoint(x) {\n\t    var arguments$1 = arguments;\n\t // eslint-disable-line no-unused-vars\n\t    var res = [];\n\t    var aLen = arguments.length;\n\t    var i = 0;\n\t    var code;\n\t    while (aLen > i) {\n\t      code = +arguments$1[i++];\n\t      if (_toAbsoluteIndex(code, 0x10ffff) !== code) { throw RangeError(code + ' is not a valid code point'); }\n\t      res.push(code < 0x10000\n\t        ? fromCharCode(code)\n\t        : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)\n\t      );\n\t    } return res.join('');\n\t  }\n\t});\n\n\tvar fromCodePoint = _core.String.fromCodePoint;\n\n\t// This is a generated file. Do not edit.\n\tvar Space_Separator = /[\\u1680\\u2000-\\u200A\\u202F\\u205F\\u3000]/;\n\tvar ID_Start = /[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086A\\u08A0-\\u08B4\\u08B6-\\u08BD\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u09FC\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u1884\\u1887-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1C80-\\u1C88\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312E\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FEA\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AE\\uA7B0-\\uA7B7\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF2D-\\uDF4A\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC03-\\uDC37\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC00-\\uDC34\\uDC47-\\uDC4A\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA\\uDF00-\\uDF19]|\\uD806[\\uDCA0-\\uDCDF\\uDCFF\\uDE00\\uDE0B-\\uDE32\\uDE3A\\uDE50\\uDE5C-\\uDE83\\uDE86-\\uDE89\\uDEC0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC2E\\uDC40\\uDC72-\\uDC8F\\uDD00-\\uDD06\\uDD08\\uDD09\\uDD0B-\\uDD30\\uDD46]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD81C-\\uD820\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50\\uDF93-\\uDF9F\\uDFE0\\uDFE1]|\\uD821[\\uDC00-\\uDFEC]|\\uD822[\\uDC00-\\uDEF2]|\\uD82C[\\uDC00-\\uDD1E\\uDD70-\\uDEFB]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD83A[\\uDC00-\\uDCC4\\uDD00-\\uDD43]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0]|\\uD87E[\\uDC00-\\uDE1D]/;\n\tvar ID_Continue = /[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u0860-\\u086A\\u08A0-\\u08B4\\u08B6-\\u08BD\\u08D4-\\u08E1\\u08E3-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u09FC\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0AF9-\\u0AFF\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58-\\u0C5A\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C80-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D00-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D54-\\u0D57\\u0D5F-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19D9\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1C80-\\u1C88\\u1CD0-\\u1CD2\\u1CD4-\\u1CF9\\u1D00-\\u1DF9\\u1DFB-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u2E2F\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099\\u309A\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312E\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FEA\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AE\\uA7B0-\\uA7B7\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C5\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA8FD\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDDFD\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDEE0\\uDF00-\\uDF1F\\uDF2D-\\uDF4A\\uDF50-\\uDF7A\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCA0-\\uDCA9\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE38-\\uDE3A\\uDE3F\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE6\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC00-\\uDC46\\uDC66-\\uDC6F\\uDC7F-\\uDCBA\\uDCD0-\\uDCE8\\uDCF0-\\uDCF9\\uDD00-\\uDD34\\uDD36-\\uDD3F\\uDD50-\\uDD73\\uDD76\\uDD80-\\uDDC4\\uDDCA-\\uDDCC\\uDDD0-\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE37\\uDE3E\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEEA\\uDEF0-\\uDEF9\\uDF00-\\uDF03\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3C-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF50\\uDF57\\uDF5D-\\uDF63\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD805[\\uDC00-\\uDC4A\\uDC50-\\uDC59\\uDC80-\\uDCC5\\uDCC7\\uDCD0-\\uDCD9\\uDD80-\\uDDB5\\uDDB8-\\uDDC0\\uDDD8-\\uDDDD\\uDE00-\\uDE40\\uDE44\\uDE50-\\uDE59\\uDE80-\\uDEB7\\uDEC0-\\uDEC9\\uDF00-\\uDF19\\uDF1D-\\uDF2B\\uDF30-\\uDF39]|\\uD806[\\uDCA0-\\uDCE9\\uDCFF\\uDE00-\\uDE3E\\uDE47\\uDE50-\\uDE83\\uDE86-\\uDE99\\uDEC0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC36\\uDC38-\\uDC40\\uDC50-\\uDC59\\uDC72-\\uDC8F\\uDC92-\\uDCA7\\uDCA9-\\uDCB6\\uDD00-\\uDD06\\uDD08\\uDD09\\uDD0B-\\uDD36\\uDD3A\\uDD3C\\uDD3D\\uDD3F-\\uDD47\\uDD50-\\uDD59]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD81C-\\uD820\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDE60-\\uDE69\\uDED0-\\uDEED\\uDEF0-\\uDEF4\\uDF00-\\uDF36\\uDF40-\\uDF43\\uDF50-\\uDF59\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50-\\uDF7E\\uDF8F-\\uDF9F\\uDFE0\\uDFE1]|\\uD821[\\uDC00-\\uDFEC]|\\uD822[\\uDC00-\\uDEF2]|\\uD82C[\\uDC00-\\uDD1E\\uDD70-\\uDEFB]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99\\uDC9D\\uDC9E]|\\uD834[\\uDD65-\\uDD69\\uDD6D-\\uDD72\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB\\uDFCE-\\uDFFF]|\\uD836[\\uDE00-\\uDE36\\uDE3B-\\uDE6C\\uDE75\\uDE84\\uDE9B-\\uDE9F\\uDEA1-\\uDEAF]|\\uD838[\\uDC00-\\uDC06\\uDC08-\\uDC18\\uDC1B-\\uDC21\\uDC23\\uDC24\\uDC26-\\uDC2A]|\\uD83A[\\uDC00-\\uDCC4\\uDCD0-\\uDCD6\\uDD00-\\uDD4A\\uDD50-\\uDD59]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0]|\\uD87E[\\uDC00-\\uDE1D]|\\uDB40[\\uDD00-\\uDDEF]/;\n\n\tvar unicode = {\n\t\tSpace_Separator: Space_Separator,\n\t\tID_Start: ID_Start,\n\t\tID_Continue: ID_Continue\n\t};\n\n\tvar util = {\n\t    isSpaceSeparator: function isSpaceSeparator (c) {\n\t        return typeof c === 'string' && unicode.Space_Separator.test(c)\n\t    },\n\n\t    isIdStartChar: function isIdStartChar (c) {\n\t        return typeof c === 'string' && (\n\t            (c >= 'a' && c <= 'z') ||\n\t        (c >= 'A' && c <= 'Z') ||\n\t        (c === '$') || (c === '_') ||\n\t        unicode.ID_Start.test(c)\n\t        )\n\t    },\n\n\t    isIdContinueChar: function isIdContinueChar (c) {\n\t        return typeof c === 'string' && (\n\t            (c >= 'a' && c <= 'z') ||\n\t        (c >= 'A' && c <= 'Z') ||\n\t        (c >= '0' && c <= '9') ||\n\t        (c === '$') || (c === '_') ||\n\t        (c === '\\u200C') || (c === '\\u200D') ||\n\t        unicode.ID_Continue.test(c)\n\t        )\n\t    },\n\n\t    isDigit: function isDigit (c) {\n\t        return typeof c === 'string' && /[0-9]/.test(c)\n\t    },\n\n\t    isHexDigit: function isHexDigit (c) {\n\t        return typeof c === 'string' && /[0-9A-Fa-f]/.test(c)\n\t    },\n\t};\n\n\tvar source;\n\tvar parseState;\n\tvar stack;\n\tvar pos;\n\tvar line;\n\tvar column;\n\tvar token;\n\tvar key;\n\tvar root;\n\n\tvar parse = function parse (text, reviver) {\n\t    source = String(text);\n\t    parseState = 'start';\n\t    stack = [];\n\t    pos = 0;\n\t    line = 1;\n\t    column = 0;\n\t    token = undefined;\n\t    key = undefined;\n\t    root = undefined;\n\n\t    do {\n\t        token = lex();\n\n\t        // This code is unreachable.\n\t        // if (!parseStates[parseState]) {\n\t        //     throw invalidParseState()\n\t        // }\n\n\t        parseStates[parseState]();\n\t    } while (token.type !== 'eof')\n\n\t    if (typeof reviver === 'function') {\n\t        return internalize({'': root}, '', reviver)\n\t    }\n\n\t    return root\n\t};\n\n\tfunction internalize (holder, name, reviver) {\n\t    var value = holder[name];\n\t    if (value != null && typeof value === 'object') {\n\t        for (var key in value) {\n\t            var replacement = internalize(value, key, reviver);\n\t            if (replacement === undefined) {\n\t                delete value[key];\n\t            } else {\n\t                value[key] = replacement;\n\t            }\n\t        }\n\t    }\n\n\t    return reviver.call(holder, name, value)\n\t}\n\n\tvar lexState;\n\tvar buffer;\n\tvar doubleQuote;\n\tvar sign;\n\tvar c;\n\n\tfunction lex () {\n\t    lexState = 'default';\n\t    buffer = '';\n\t    doubleQuote = false;\n\t    sign = 1;\n\n\t    for (;;) {\n\t        c = peek();\n\n\t        // This code is unreachable.\n\t        // if (!lexStates[lexState]) {\n\t        //     throw invalidLexState(lexState)\n\t        // }\n\n\t        var token = lexStates[lexState]();\n\t        if (token) {\n\t            return token\n\t        }\n\t    }\n\t}\n\n\tfunction peek () {\n\t    if (source[pos]) {\n\t        return String.fromCodePoint(source.codePointAt(pos))\n\t    }\n\t}\n\n\tfunction read () {\n\t    var c = peek();\n\n\t    if (c === '\\n') {\n\t        line++;\n\t        column = 0;\n\t    } else if (c) {\n\t        column += c.length;\n\t    } else {\n\t        column++;\n\t    }\n\n\t    if (c) {\n\t        pos += c.length;\n\t    }\n\n\t    return c\n\t}\n\n\tvar lexStates = {\n\t    default: function default$1 () {\n\t        switch (c) {\n\t        case '\\t':\n\t        case '\\v':\n\t        case '\\f':\n\t        case ' ':\n\t        case '\\u00A0':\n\t        case '\\uFEFF':\n\t        case '\\n':\n\t        case '\\r':\n\t        case '\\u2028':\n\t        case '\\u2029':\n\t            read();\n\t            return\n\n\t        case '/':\n\t            read();\n\t            lexState = 'comment';\n\t            return\n\n\t        case undefined:\n\t            read();\n\t            return newToken('eof')\n\t        }\n\n\t        if (util.isSpaceSeparator(c)) {\n\t            read();\n\t            return\n\t        }\n\n\t        // This code is unreachable.\n\t        // if (!lexStates[parseState]) {\n\t        //     throw invalidLexState(parseState)\n\t        // }\n\n\t        return lexStates[parseState]()\n\t    },\n\n\t    comment: function comment () {\n\t        switch (c) {\n\t        case '*':\n\t            read();\n\t            lexState = 'multiLineComment';\n\t            return\n\n\t        case '/':\n\t            read();\n\t            lexState = 'singleLineComment';\n\t            return\n\t        }\n\n\t        throw invalidChar(read())\n\t    },\n\n\t    multiLineComment: function multiLineComment () {\n\t        switch (c) {\n\t        case '*':\n\t            read();\n\t            lexState = 'multiLineCommentAsterisk';\n\t            return\n\n\t        case undefined:\n\t            throw invalidChar(read())\n\t        }\n\n\t        read();\n\t    },\n\n\t    multiLineCommentAsterisk: function multiLineCommentAsterisk () {\n\t        switch (c) {\n\t        case '*':\n\t            read();\n\t            return\n\n\t        case '/':\n\t            read();\n\t            lexState = 'default';\n\t            return\n\n\t        case undefined:\n\t            throw invalidChar(read())\n\t        }\n\n\t        read();\n\t        lexState = 'multiLineComment';\n\t    },\n\n\t    singleLineComment: function singleLineComment () {\n\t        switch (c) {\n\t        case '\\n':\n\t        case '\\r':\n\t        case '\\u2028':\n\t        case '\\u2029':\n\t            read();\n\t            lexState = 'default';\n\t            return\n\n\t        case undefined:\n\t            read();\n\t            return newToken('eof')\n\t        }\n\n\t        read();\n\t    },\n\n\t    value: function value () {\n\t        switch (c) {\n\t        case '{':\n\t        case '[':\n\t            return newToken('punctuator', read())\n\n\t        case 'n':\n\t            read();\n\t            literal('ull');\n\t            return newToken('null', null)\n\n\t        case 't':\n\t            read();\n\t            literal('rue');\n\t            return newToken('boolean', true)\n\n\t        case 'f':\n\t            read();\n\t            literal('alse');\n\t            return newToken('boolean', false)\n\n\t        case '-':\n\t        case '+':\n\t            if (read() === '-') {\n\t                sign = -1;\n\t            }\n\n\t            lexState = 'sign';\n\t            return\n\n\t        case '.':\n\t            buffer = read();\n\t            lexState = 'decimalPointLeading';\n\t            return\n\n\t        case '0':\n\t            buffer = read();\n\t            lexState = 'zero';\n\t            return\n\n\t        case '1':\n\t        case '2':\n\t        case '3':\n\t        case '4':\n\t        case '5':\n\t        case '6':\n\t        case '7':\n\t        case '8':\n\t        case '9':\n\t            buffer = read();\n\t            lexState = 'decimalInteger';\n\t            return\n\n\t        case 'I':\n\t            read();\n\t            literal('nfinity');\n\t            return newToken('numeric', Infinity)\n\n\t        case 'N':\n\t            read();\n\t            literal('aN');\n\t            return newToken('numeric', NaN)\n\n\t        case '\"':\n\t        case \"'\":\n\t            doubleQuote = (read() === '\"');\n\t            buffer = '';\n\t            lexState = 'string';\n\t            return\n\t        }\n\n\t        throw invalidChar(read())\n\t    },\n\n\t    identifierNameStartEscape: function identifierNameStartEscape () {\n\t        if (c !== 'u') {\n\t            throw invalidChar(read())\n\t        }\n\n\t        read();\n\t        var u = unicodeEscape();\n\t        switch (u) {\n\t        case '$':\n\t        case '_':\n\t            break\n\n\t        default:\n\t            if (!util.isIdStartChar(u)) {\n\t                throw invalidIdentifier()\n\t            }\n\n\t            break\n\t        }\n\n\t        buffer += u;\n\t        lexState = 'identifierName';\n\t    },\n\n\t    identifierName: function identifierName () {\n\t        switch (c) {\n\t        case '$':\n\t        case '_':\n\t        case '\\u200C':\n\t        case '\\u200D':\n\t            buffer += read();\n\t            return\n\n\t        case '\\\\':\n\t            read();\n\t            lexState = 'identifierNameEscape';\n\t            return\n\t        }\n\n\t        if (util.isIdContinueChar(c)) {\n\t            buffer += read();\n\t            return\n\t        }\n\n\t        return newToken('identifier', buffer)\n\t    },\n\n\t    identifierNameEscape: function identifierNameEscape () {\n\t        if (c !== 'u') {\n\t            throw invalidChar(read())\n\t        }\n\n\t        read();\n\t        var u = unicodeEscape();\n\t        switch (u) {\n\t        case '$':\n\t        case '_':\n\t        case '\\u200C':\n\t        case '\\u200D':\n\t            break\n\n\t        default:\n\t            if (!util.isIdContinueChar(u)) {\n\t                throw invalidIdentifier()\n\t            }\n\n\t            break\n\t        }\n\n\t        buffer += u;\n\t        lexState = 'identifierName';\n\t    },\n\n\t    sign: function sign$1 () {\n\t        switch (c) {\n\t        case '.':\n\t            buffer = read();\n\t            lexState = 'decimalPointLeading';\n\t            return\n\n\t        case '0':\n\t            buffer = read();\n\t            lexState = 'zero';\n\t            return\n\n\t        case '1':\n\t        case '2':\n\t        case '3':\n\t        case '4':\n\t        case '5':\n\t        case '6':\n\t        case '7':\n\t        case '8':\n\t        case '9':\n\t            buffer = read();\n\t            lexState = 'decimalInteger';\n\t            return\n\n\t        case 'I':\n\t            read();\n\t            literal('nfinity');\n\t            return newToken('numeric', sign * Infinity)\n\n\t        case 'N':\n\t            read();\n\t            literal('aN');\n\t            return newToken('numeric', NaN)\n\t        }\n\n\t        throw invalidChar(read())\n\t    },\n\n\t    zero: function zero () {\n\t        switch (c) {\n\t        case '.':\n\t            buffer += read();\n\t            lexState = 'decimalPoint';\n\t            return\n\n\t        case 'e':\n\t        case 'E':\n\t            buffer += read();\n\t            lexState = 'decimalExponent';\n\t            return\n\n\t        case 'x':\n\t        case 'X':\n\t            buffer += read();\n\t            lexState = 'hexadecimal';\n\t            return\n\t        }\n\n\t        return newToken('numeric', sign * 0)\n\t    },\n\n\t    decimalInteger: function decimalInteger () {\n\t        switch (c) {\n\t        case '.':\n\t            buffer += read();\n\t            lexState = 'decimalPoint';\n\t            return\n\n\t        case 'e':\n\t        case 'E':\n\t            buffer += read();\n\t            lexState = 'decimalExponent';\n\t            return\n\t        }\n\n\t        if (util.isDigit(c)) {\n\t            buffer += read();\n\t            return\n\t        }\n\n\t        return newToken('numeric', sign * Number(buffer))\n\t    },\n\n\t    decimalPointLeading: function decimalPointLeading () {\n\t        if (util.isDigit(c)) {\n\t            buffer += read();\n\t            lexState = 'decimalFraction';\n\t            return\n\t        }\n\n\t        throw invalidChar(read())\n\t    },\n\n\t    decimalPoint: function decimalPoint () {\n\t        switch (c) {\n\t        case 'e':\n\t        case 'E':\n\t            buffer += read();\n\t            lexState = 'decimalExponent';\n\t            return\n\t        }\n\n\t        if (util.isDigit(c)) {\n\t            buffer += read();\n\t            lexState = 'decimalFraction';\n\t            return\n\t        }\n\n\t        return newToken('numeric', sign * Number(buffer))\n\t    },\n\n\t    decimalFraction: function decimalFraction () {\n\t        switch (c) {\n\t        case 'e':\n\t        case 'E':\n\t            buffer += read();\n\t            lexState = 'decimalExponent';\n\t            return\n\t        }\n\n\t        if (util.isDigit(c)) {\n\t            buffer += read();\n\t            return\n\t        }\n\n\t        return newToken('numeric', sign * Number(buffer))\n\t    },\n\n\t    decimalExponent: function decimalExponent () {\n\t        switch (c) {\n\t        case '+':\n\t        case '-':\n\t            buffer += read();\n\t            lexState = 'decimalExponentSign';\n\t            return\n\t        }\n\n\t        if (util.isDigit(c)) {\n\t            buffer += read();\n\t            lexState = 'decimalExponentInteger';\n\t            return\n\t        }\n\n\t        throw invalidChar(read())\n\t    },\n\n\t    decimalExponentSign: function decimalExponentSign () {\n\t        if (util.isDigit(c)) {\n\t            buffer += read();\n\t            lexState = 'decimalExponentInteger';\n\t            return\n\t        }\n\n\t        throw invalidChar(read())\n\t    },\n\n\t    decimalExponentInteger: function decimalExponentInteger () {\n\t        if (util.isDigit(c)) {\n\t            buffer += read();\n\t            return\n\t        }\n\n\t        return newToken('numeric', sign * Number(buffer))\n\t    },\n\n\t    hexadecimal: function hexadecimal () {\n\t        if (util.isHexDigit(c)) {\n\t            buffer += read();\n\t            lexState = 'hexadecimalInteger';\n\t            return\n\t        }\n\n\t        throw invalidChar(read())\n\t    },\n\n\t    hexadecimalInteger: function hexadecimalInteger () {\n\t        if (util.isHexDigit(c)) {\n\t            buffer += read();\n\t            return\n\t        }\n\n\t        return newToken('numeric', sign * Number(buffer))\n\t    },\n\n\t    string: function string () {\n\t        switch (c) {\n\t        case '\\\\':\n\t            read();\n\t            buffer += escape();\n\t            return\n\n\t        case '\"':\n\t            if (doubleQuote) {\n\t                read();\n\t                return newToken('string', buffer)\n\t            }\n\n\t            buffer += read();\n\t            return\n\n\t        case \"'\":\n\t            if (!doubleQuote) {\n\t                read();\n\t                return newToken('string', buffer)\n\t            }\n\n\t            buffer += read();\n\t            return\n\n\t        case '\\n':\n\t        case '\\r':\n\t            throw invalidChar(read())\n\n\t        case '\\u2028':\n\t        case '\\u2029':\n\t            separatorChar(c);\n\t            break\n\n\t        case undefined:\n\t            throw invalidChar(read())\n\t        }\n\n\t        buffer += read();\n\t    },\n\n\t    start: function start () {\n\t        switch (c) {\n\t        case '{':\n\t        case '[':\n\t            return newToken('punctuator', read())\n\n\t        // This code is unreachable since the default lexState handles eof.\n\t        // case undefined:\n\t        //     return newToken('eof')\n\t        }\n\n\t        lexState = 'value';\n\t    },\n\n\t    beforePropertyName: function beforePropertyName () {\n\t        switch (c) {\n\t        case '$':\n\t        case '_':\n\t            buffer = read();\n\t            lexState = 'identifierName';\n\t            return\n\n\t        case '\\\\':\n\t            read();\n\t            lexState = 'identifierNameStartEscape';\n\t            return\n\n\t        case '}':\n\t            return newToken('punctuator', read())\n\n\t        case '\"':\n\t        case \"'\":\n\t            doubleQuote = (read() === '\"');\n\t            lexState = 'string';\n\t            return\n\t        }\n\n\t        if (util.isIdStartChar(c)) {\n\t            buffer += read();\n\t            lexState = 'identifierName';\n\t            return\n\t        }\n\n\t        throw invalidChar(read())\n\t    },\n\n\t    afterPropertyName: function afterPropertyName () {\n\t        if (c === ':') {\n\t            return newToken('punctuator', read())\n\t        }\n\n\t        throw invalidChar(read())\n\t    },\n\n\t    beforePropertyValue: function beforePropertyValue () {\n\t        lexState = 'value';\n\t    },\n\n\t    afterPropertyValue: function afterPropertyValue () {\n\t        switch (c) {\n\t        case ',':\n\t        case '}':\n\t            return newToken('punctuator', read())\n\t        }\n\n\t        throw invalidChar(read())\n\t    },\n\n\t    beforeArrayValue: function beforeArrayValue () {\n\t        if (c === ']') {\n\t            return newToken('punctuator', read())\n\t        }\n\n\t        lexState = 'value';\n\t    },\n\n\t    afterArrayValue: function afterArrayValue () {\n\t        switch (c) {\n\t        case ',':\n\t        case ']':\n\t            return newToken('punctuator', read())\n\t        }\n\n\t        throw invalidChar(read())\n\t    },\n\n\t    end: function end () {\n\t        // This code is unreachable since it's handled by the default lexState.\n\t        // if (c === undefined) {\n\t        //     read()\n\t        //     return newToken('eof')\n\t        // }\n\n\t        throw invalidChar(read())\n\t    },\n\t};\n\n\tfunction newToken (type, value) {\n\t    return {\n\t        type: type,\n\t        value: value,\n\t        line: line,\n\t        column: column,\n\t    }\n\t}\n\n\tfunction literal (s) {\n\t    for (var i = 0, list = s; i < list.length; i += 1) {\n\t        var c = list[i];\n\n\t        var p = peek();\n\n\t        if (p !== c) {\n\t            throw invalidChar(read())\n\t        }\n\n\t        read();\n\t    }\n\t}\n\n\tfunction escape () {\n\t    var c = peek();\n\t    switch (c) {\n\t    case 'b':\n\t        read();\n\t        return '\\b'\n\n\t    case 'f':\n\t        read();\n\t        return '\\f'\n\n\t    case 'n':\n\t        read();\n\t        return '\\n'\n\n\t    case 'r':\n\t        read();\n\t        return '\\r'\n\n\t    case 't':\n\t        read();\n\t        return '\\t'\n\n\t    case 'v':\n\t        read();\n\t        return '\\v'\n\n\t    case '0':\n\t        read();\n\t        if (util.isDigit(peek())) {\n\t            throw invalidChar(read())\n\t        }\n\n\t        return '\\0'\n\n\t    case 'x':\n\t        read();\n\t        return hexEscape()\n\n\t    case 'u':\n\t        read();\n\t        return unicodeEscape()\n\n\t    case '\\n':\n\t    case '\\u2028':\n\t    case '\\u2029':\n\t        read();\n\t        return ''\n\n\t    case '\\r':\n\t        read();\n\t        if (peek() === '\\n') {\n\t            read();\n\t        }\n\n\t        return ''\n\n\t    case '1':\n\t    case '2':\n\t    case '3':\n\t    case '4':\n\t    case '5':\n\t    case '6':\n\t    case '7':\n\t    case '8':\n\t    case '9':\n\t        throw invalidChar(read())\n\n\t    case undefined:\n\t        throw invalidChar(read())\n\t    }\n\n\t    return read()\n\t}\n\n\tfunction hexEscape () {\n\t    var buffer = '';\n\t    var c = peek();\n\n\t    if (!util.isHexDigit(c)) {\n\t        throw invalidChar(read())\n\t    }\n\n\t    buffer += read();\n\n\t    c = peek();\n\t    if (!util.isHexDigit(c)) {\n\t        throw invalidChar(read())\n\t    }\n\n\t    buffer += read();\n\n\t    return String.fromCodePoint(parseInt(buffer, 16))\n\t}\n\n\tfunction unicodeEscape () {\n\t    var buffer = '';\n\t    var count = 4;\n\n\t    while (count-- > 0) {\n\t        var c = peek();\n\t        if (!util.isHexDigit(c)) {\n\t            throw invalidChar(read())\n\t        }\n\n\t        buffer += read();\n\t    }\n\n\t    return String.fromCodePoint(parseInt(buffer, 16))\n\t}\n\n\tvar parseStates = {\n\t    start: function start () {\n\t        if (token.type === 'eof') {\n\t            throw invalidEOF()\n\t        }\n\n\t        push();\n\t    },\n\n\t    beforePropertyName: function beforePropertyName () {\n\t        switch (token.type) {\n\t        case 'identifier':\n\t        case 'string':\n\t            key = token.value;\n\t            parseState = 'afterPropertyName';\n\t            return\n\n\t        case 'punctuator':\n\t            // This code is unreachable since it's handled by the lexState.\n\t            // if (token.value !== '}') {\n\t            //     throw invalidToken()\n\t            // }\n\n\t            pop();\n\t            return\n\n\t        case 'eof':\n\t            throw invalidEOF()\n\t        }\n\n\t        // This code is unreachable since it's handled by the lexState.\n\t        // throw invalidToken()\n\t    },\n\n\t    afterPropertyName: function afterPropertyName () {\n\t        // This code is unreachable since it's handled by the lexState.\n\t        // if (token.type !== 'punctuator' || token.value !== ':') {\n\t        //     throw invalidToken()\n\t        // }\n\n\t        if (token.type === 'eof') {\n\t            throw invalidEOF()\n\t        }\n\n\t        parseState = 'beforePropertyValue';\n\t    },\n\n\t    beforePropertyValue: function beforePropertyValue () {\n\t        if (token.type === 'eof') {\n\t            throw invalidEOF()\n\t        }\n\n\t        push();\n\t    },\n\n\t    beforeArrayValue: function beforeArrayValue () {\n\t        if (token.type === 'eof') {\n\t            throw invalidEOF()\n\t        }\n\n\t        if (token.type === 'punctuator' && token.value === ']') {\n\t            pop();\n\t            return\n\t        }\n\n\t        push();\n\t    },\n\n\t    afterPropertyValue: function afterPropertyValue () {\n\t        // This code is unreachable since it's handled by the lexState.\n\t        // if (token.type !== 'punctuator') {\n\t        //     throw invalidToken()\n\t        // }\n\n\t        if (token.type === 'eof') {\n\t            throw invalidEOF()\n\t        }\n\n\t        switch (token.value) {\n\t        case ',':\n\t            parseState = 'beforePropertyName';\n\t            return\n\n\t        case '}':\n\t            pop();\n\t        }\n\n\t        // This code is unreachable since it's handled by the lexState.\n\t        // throw invalidToken()\n\t    },\n\n\t    afterArrayValue: function afterArrayValue () {\n\t        // This code is unreachable since it's handled by the lexState.\n\t        // if (token.type !== 'punctuator') {\n\t        //     throw invalidToken()\n\t        // }\n\n\t        if (token.type === 'eof') {\n\t            throw invalidEOF()\n\t        }\n\n\t        switch (token.value) {\n\t        case ',':\n\t            parseState = 'beforeArrayValue';\n\t            return\n\n\t        case ']':\n\t            pop();\n\t        }\n\n\t        // This code is unreachable since it's handled by the lexState.\n\t        // throw invalidToken()\n\t    },\n\n\t    end: function end () {\n\t        // This code is unreachable since it's handled by the lexState.\n\t        // if (token.type !== 'eof') {\n\t        //     throw invalidToken()\n\t        // }\n\t    },\n\t};\n\n\tfunction push () {\n\t    var value;\n\n\t    switch (token.type) {\n\t    case 'punctuator':\n\t        switch (token.value) {\n\t        case '{':\n\t            value = {};\n\t            break\n\n\t        case '[':\n\t            value = [];\n\t            break\n\t        }\n\n\t        break\n\n\t    case 'null':\n\t    case 'boolean':\n\t    case 'numeric':\n\t    case 'string':\n\t        value = token.value;\n\t        break\n\n\t    // This code is unreachable.\n\t    // default:\n\t    //     throw invalidToken()\n\t    }\n\n\t    if (root === undefined) {\n\t        root = value;\n\t    } else {\n\t        var parent = stack[stack.length - 1];\n\t        if (Array.isArray(parent)) {\n\t            parent.push(value);\n\t        } else {\n\t            parent[key] = value;\n\t        }\n\t    }\n\n\t    if (value !== null && typeof value === 'object') {\n\t        stack.push(value);\n\n\t        if (Array.isArray(value)) {\n\t            parseState = 'beforeArrayValue';\n\t        } else {\n\t            parseState = 'beforePropertyName';\n\t        }\n\t    } else {\n\t        var current = stack[stack.length - 1];\n\t        if (current == null) {\n\t            parseState = 'end';\n\t        } else if (Array.isArray(current)) {\n\t            parseState = 'afterArrayValue';\n\t        } else {\n\t            parseState = 'afterPropertyValue';\n\t        }\n\t    }\n\t}\n\n\tfunction pop () {\n\t    stack.pop();\n\n\t    var current = stack[stack.length - 1];\n\t    if (current == null) {\n\t        parseState = 'end';\n\t    } else if (Array.isArray(current)) {\n\t        parseState = 'afterArrayValue';\n\t    } else {\n\t        parseState = 'afterPropertyValue';\n\t    }\n\t}\n\n\t// This code is unreachable.\n\t// function invalidParseState () {\n\t//     return new Error(`JSON5: invalid parse state '${parseState}'`)\n\t// }\n\n\t// This code is unreachable.\n\t// function invalidLexState (state) {\n\t//     return new Error(`JSON5: invalid lex state '${state}'`)\n\t// }\n\n\tfunction invalidChar (c) {\n\t    if (c === undefined) {\n\t        return syntaxError((\"JSON5: invalid end of input at \" + line + \":\" + column))\n\t    }\n\n\t    return syntaxError((\"JSON5: invalid character '\" + (formatChar(c)) + \"' at \" + line + \":\" + column))\n\t}\n\n\tfunction invalidEOF () {\n\t    return syntaxError((\"JSON5: invalid end of input at \" + line + \":\" + column))\n\t}\n\n\t// This code is unreachable.\n\t// function invalidToken () {\n\t//     if (token.type === 'eof') {\n\t//         return syntaxError(`JSON5: invalid end of input at ${line}:${column}`)\n\t//     }\n\n\t//     const c = String.fromCodePoint(token.value.codePointAt(0))\n\t//     return syntaxError(`JSON5: invalid character '${formatChar(c)}' at ${line}:${column}`)\n\t// }\n\n\tfunction invalidIdentifier () {\n\t    column -= 5;\n\t    return syntaxError((\"JSON5: invalid identifier character at \" + line + \":\" + column))\n\t}\n\n\tfunction separatorChar (c) {\n\t    console.warn((\"JSON5: '\" + (formatChar(c)) + \"' in strings is not valid ECMAScript; consider escaping\"));\n\t}\n\n\tfunction formatChar (c) {\n\t    var replacements = {\n\t        \"'\": \"\\\\'\",\n\t        '\"': '\\\\\"',\n\t        '\\\\': '\\\\\\\\',\n\t        '\\b': '\\\\b',\n\t        '\\f': '\\\\f',\n\t        '\\n': '\\\\n',\n\t        '\\r': '\\\\r',\n\t        '\\t': '\\\\t',\n\t        '\\v': '\\\\v',\n\t        '\\0': '\\\\0',\n\t        '\\u2028': '\\\\u2028',\n\t        '\\u2029': '\\\\u2029',\n\t    };\n\n\t    if (replacements[c]) {\n\t        return replacements[c]\n\t    }\n\n\t    if (c < ' ') {\n\t        var hexString = c.charCodeAt(0).toString(16);\n\t        return '\\\\x' + ('00' + hexString).substring(hexString.length)\n\t    }\n\n\t    return c\n\t}\n\n\tfunction syntaxError (message) {\n\t    var err = new SyntaxError(message);\n\t    err.lineNumber = line;\n\t    err.columnNumber = column;\n\t    return err\n\t}\n\n\tvar stringify = function stringify (value, replacer, space) {\n\t    var stack = [];\n\t    var indent = '';\n\t    var propertyList;\n\t    var replacerFunc;\n\t    var gap = '';\n\t    var quote;\n\n\t    if (\n\t        replacer != null &&\n\t        typeof replacer === 'object' &&\n\t        !Array.isArray(replacer)\n\t    ) {\n\t        space = replacer.space;\n\t        quote = replacer.quote;\n\t        replacer = replacer.replacer;\n\t    }\n\n\t    if (typeof replacer === 'function') {\n\t        replacerFunc = replacer;\n\t    } else if (Array.isArray(replacer)) {\n\t        propertyList = [];\n\t        for (var i = 0, list = replacer; i < list.length; i += 1) {\n\t            var v = list[i];\n\n\t            var item = (void 0);\n\n\t            if (typeof v === 'string') {\n\t                item = v;\n\t            } else if (\n\t                typeof v === 'number' ||\n\t                v instanceof String ||\n\t                v instanceof Number\n\t            ) {\n\t                item = String(v);\n\t            }\n\n\t            if (item !== undefined && propertyList.indexOf(item) < 0) {\n\t                propertyList.push(item);\n\t            }\n\t        }\n\t    }\n\n\t    if (space instanceof Number) {\n\t        space = Number(space);\n\t    } else if (space instanceof String) {\n\t        space = String(space);\n\t    }\n\n\t    if (typeof space === 'number') {\n\t        if (space > 0) {\n\t            space = Math.min(10, Math.floor(space));\n\t            gap = '          '.substr(0, space);\n\t        }\n\t    } else if (typeof space === 'string') {\n\t        gap = space.substr(0, 10);\n\t    }\n\n\t    return serializeProperty('', {'': value})\n\n\t    function serializeProperty (key, holder) {\n\t        var value = holder[key];\n\t        if (value != null) {\n\t            if (typeof value.toJSON5 === 'function') {\n\t                value = value.toJSON5(key);\n\t            } else if (typeof value.toJSON === 'function') {\n\t                value = value.toJSON(key);\n\t            }\n\t        }\n\n\t        if (replacerFunc) {\n\t            value = replacerFunc.call(holder, key, value);\n\t        }\n\n\t        if (value instanceof Number) {\n\t            value = Number(value);\n\t        } else if (value instanceof String) {\n\t            value = String(value);\n\t        } else if (value instanceof Boolean) {\n\t            value = value.valueOf();\n\t        }\n\n\t        switch (value) {\n\t        case null: return 'null'\n\t        case true: return 'true'\n\t        case false: return 'false'\n\t        }\n\n\t        if (typeof value === 'string') {\n\t            return quoteString(value, false)\n\t        }\n\n\t        if (typeof value === 'number') {\n\t            return String(value)\n\t        }\n\n\t        if (typeof value === 'object') {\n\t            return Array.isArray(value) ? serializeArray(value) : serializeObject(value)\n\t        }\n\n\t        return undefined\n\t    }\n\n\t    function quoteString (value) {\n\t        var quotes = {\n\t            \"'\": 0.1,\n\t            '\"': 0.2,\n\t        };\n\n\t        var replacements = {\n\t            \"'\": \"\\\\'\",\n\t            '\"': '\\\\\"',\n\t            '\\\\': '\\\\\\\\',\n\t            '\\b': '\\\\b',\n\t            '\\f': '\\\\f',\n\t            '\\n': '\\\\n',\n\t            '\\r': '\\\\r',\n\t            '\\t': '\\\\t',\n\t            '\\v': '\\\\v',\n\t            '\\0': '\\\\0',\n\t            '\\u2028': '\\\\u2028',\n\t            '\\u2029': '\\\\u2029',\n\t        };\n\n\t        var product = '';\n\n\t        for (var i = 0; i < value.length; i++) {\n\t            var c = value[i];\n\t            switch (c) {\n\t            case \"'\":\n\t            case '\"':\n\t                quotes[c]++;\n\t                product += c;\n\t                continue\n\n\t            case '\\0':\n\t                if (util.isDigit(value[i + 1])) {\n\t                    product += '\\\\x00';\n\t                    continue\n\t                }\n\t            }\n\n\t            if (replacements[c]) {\n\t                product += replacements[c];\n\t                continue\n\t            }\n\n\t            if (c < ' ') {\n\t                var hexString = c.charCodeAt(0).toString(16);\n\t                product += '\\\\x' + ('00' + hexString).substring(hexString.length);\n\t                continue\n\t            }\n\n\t            product += c;\n\t        }\n\n\t        var quoteChar = quote || Object.keys(quotes).reduce(function (a, b) { return (quotes[a] < quotes[b]) ? a : b; });\n\n\t        product = product.replace(new RegExp(quoteChar, 'g'), replacements[quoteChar]);\n\n\t        return quoteChar + product + quoteChar\n\t    }\n\n\t    function serializeObject (value) {\n\t        if (stack.indexOf(value) >= 0) {\n\t            throw TypeError('Converting circular structure to JSON5')\n\t        }\n\n\t        stack.push(value);\n\n\t        var stepback = indent;\n\t        indent = indent + gap;\n\n\t        var keys = propertyList || Object.keys(value);\n\t        var partial = [];\n\t        for (var i = 0, list = keys; i < list.length; i += 1) {\n\t            var key = list[i];\n\n\t            var propertyString = serializeProperty(key, value);\n\t            if (propertyString !== undefined) {\n\t                var member = serializeKey(key) + ':';\n\t                if (gap !== '') {\n\t                    member += ' ';\n\t                }\n\t                member += propertyString;\n\t                partial.push(member);\n\t            }\n\t        }\n\n\t        var final;\n\t        if (partial.length === 0) {\n\t            final = '{}';\n\t        } else {\n\t            var properties;\n\t            if (gap === '') {\n\t                properties = partial.join(',');\n\t                final = '{' + properties + '}';\n\t            } else {\n\t                var separator = ',\\n' + indent;\n\t                properties = partial.join(separator);\n\t                final = '{\\n' + indent + properties + ',\\n' + stepback + '}';\n\t            }\n\t        }\n\n\t        stack.pop();\n\t        indent = stepback;\n\t        return final\n\t    }\n\n\t    function serializeKey (key) {\n\t        if (key.length === 0) {\n\t            return quoteString(key, true)\n\t        }\n\n\t        var firstChar = String.fromCodePoint(key.codePointAt(0));\n\t        if (!util.isIdStartChar(firstChar)) {\n\t            return quoteString(key, true)\n\t        }\n\n\t        for (var i = firstChar.length; i < key.length; i++) {\n\t            if (!util.isIdContinueChar(String.fromCodePoint(key.codePointAt(i)))) {\n\t                return quoteString(key, true)\n\t            }\n\t        }\n\n\t        return key\n\t    }\n\n\t    function serializeArray (value) {\n\t        if (stack.indexOf(value) >= 0) {\n\t            throw TypeError('Converting circular structure to JSON5')\n\t        }\n\n\t        stack.push(value);\n\n\t        var stepback = indent;\n\t        indent = indent + gap;\n\n\t        var partial = [];\n\t        for (var i = 0; i < value.length; i++) {\n\t            var propertyString = serializeProperty(String(i), value);\n\t            partial.push((propertyString !== undefined) ? propertyString : 'null');\n\t        }\n\n\t        var final;\n\t        if (partial.length === 0) {\n\t            final = '[]';\n\t        } else {\n\t            if (gap === '') {\n\t                var properties = partial.join(',');\n\t                final = '[' + properties + ']';\n\t            } else {\n\t                var separator = ',\\n' + indent;\n\t                var properties$1 = partial.join(separator);\n\t                final = '[\\n' + indent + properties$1 + ',\\n' + stepback + ']';\n\t            }\n\t        }\n\n\t        stack.pop();\n\t        indent = stepback;\n\t        return final\n\t    }\n\t};\n\n\tvar JSON5 = {\n\t    parse: parse,\n\t    stringify: stringify,\n\t};\n\n\tvar lib = JSON5;\n\n\tvar es5 = lib;\n\n\treturn es5;\n\n})));\n","'use strict';\n\nfunction getCurrentRequest(loaderContext) {\n  if (loaderContext.currentRequest) {\n    return loaderContext.currentRequest;\n  }\n\n  const request = loaderContext.loaders\n    .slice(loaderContext.loaderIndex)\n    .map((obj) => obj.request)\n    .concat([loaderContext.resource]);\n\n  return request.join('!');\n}\n\nmodule.exports = getCurrentRequest;\n","'use strict';\n\nconst baseEncodeTables = {\n  26: 'abcdefghijklmnopqrstuvwxyz',\n  32: '123456789abcdefghjkmnpqrstuvwxyz', // no 0lio\n  36: '0123456789abcdefghijklmnopqrstuvwxyz',\n  49: 'abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ', // no lIO\n  52: 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ',\n  58: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ', // no 0lIO\n  62: '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ',\n  64: '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-_',\n};\n\nfunction encodeBufferToBase(buffer, base) {\n  const encodeTable = baseEncodeTables[base];\n  if (!encodeTable) {\n    throw new Error('Unknown encoding base' + base);\n  }\n\n  const readLength = buffer.length;\n  const Big = require('big.js');\n\n  Big.RM = Big.DP = 0;\n  let b = new Big(0);\n\n  for (let i = readLength - 1; i >= 0; i--) {\n    b = b.times(256).plus(buffer[i]);\n  }\n\n  let output = '';\n  while (b.gt(0)) {\n    output = encodeTable[b.mod(base)] + output;\n    b = b.div(base);\n  }\n\n  Big.DP = 20;\n  Big.RM = 1;\n\n  return output;\n}\n\nfunction getHashDigest(buffer, hashType, digestType, maxLength) {\n  hashType = hashType || 'md4';\n  maxLength = maxLength || 9999;\n\n  const hash = require('crypto').createHash(hashType);\n\n  hash.update(buffer);\n\n  if (\n    digestType === 'base26' ||\n    digestType === 'base32' ||\n    digestType === 'base36' ||\n    digestType === 'base49' ||\n    digestType === 'base52' ||\n    digestType === 'base58' ||\n    digestType === 'base62' ||\n    digestType === 'base64'\n  ) {\n    return encodeBufferToBase(hash.digest(), digestType.substr(4)).substr(\n      0,\n      maxLength\n    );\n  } else {\n    return hash.digest(digestType || 'hex').substr(0, maxLength);\n  }\n}\n\nmodule.exports = getHashDigest;\n","'use strict';\n\nconst parseQuery = require('./parseQuery');\n\nfunction getOptions(loaderContext) {\n  const query = loaderContext.query;\n\n  if (typeof query === 'string' && query !== '') {\n    return parseQuery(loaderContext.query);\n  }\n\n  if (!query || typeof query !== 'object') {\n    // Not object-like queries are not supported.\n    return {};\n  }\n\n  return query;\n}\n\nmodule.exports = getOptions;\n","'use strict';\n\nfunction getRemainingRequest(loaderContext) {\n  if (loaderContext.remainingRequest) {\n    return loaderContext.remainingRequest;\n  }\n\n  const request = loaderContext.loaders\n    .slice(loaderContext.loaderIndex + 1)\n    .map((obj) => obj.request)\n    .concat([loaderContext.resource]);\n\n  return request.join('!');\n}\n\nmodule.exports = getRemainingRequest;\n","'use strict';\n\nconst getOptions = require('./getOptions');\nconst parseQuery = require('./parseQuery');\nconst stringifyRequest = require('./stringifyRequest');\nconst getRemainingRequest = require('./getRemainingRequest');\nconst getCurrentRequest = require('./getCurrentRequest');\nconst isUrlRequest = require('./isUrlRequest');\nconst urlToRequest = require('./urlToRequest');\nconst parseString = require('./parseString');\nconst getHashDigest = require('./getHashDigest');\nconst interpolateName = require('./interpolateName');\n\nexports.getOptions = getOptions;\nexports.parseQuery = parseQuery;\nexports.stringifyRequest = stringifyRequest;\nexports.getRemainingRequest = getRemainingRequest;\nexports.getCurrentRequest = getCurrentRequest;\nexports.isUrlRequest = isUrlRequest;\nexports.urlToRequest = urlToRequest;\nexports.parseString = parseString;\nexports.getHashDigest = getHashDigest;\nexports.interpolateName = interpolateName;\n","'use strict';\n\nconst path = require('path');\nconst emojisList = require('emojis-list');\nconst getHashDigest = require('./getHashDigest');\n\nconst emojiRegex = /[\\uD800-\\uDFFF]./;\nconst emojiList = emojisList.filter((emoji) => emojiRegex.test(emoji));\nconst emojiCache = {};\n\nfunction encodeStringToEmoji(content, length) {\n  if (emojiCache[content]) {\n    return emojiCache[content];\n  }\n\n  length = length || 1;\n\n  const emojis = [];\n\n  do {\n    if (!emojiList.length) {\n      throw new Error('Ran out of emoji');\n    }\n\n    const index = Math.floor(Math.random() * emojiList.length);\n\n    emojis.push(emojiList[index]);\n    emojiList.splice(index, 1);\n  } while (--length > 0);\n\n  const emojiEncoding = emojis.join('');\n\n  emojiCache[content] = emojiEncoding;\n\n  return emojiEncoding;\n}\n\nfunction interpolateName(loaderContext, name, options) {\n  let filename;\n\n  const hasQuery =\n    loaderContext.resourceQuery && loaderContext.resourceQuery.length > 1;\n\n  if (typeof name === 'function') {\n    filename = name(\n      loaderContext.resourcePath,\n      hasQuery ? loaderContext.resourceQuery : undefined\n    );\n  } else {\n    filename = name || '[hash].[ext]';\n  }\n\n  const context = options.context;\n  const content = options.content;\n  const regExp = options.regExp;\n\n  let ext = 'bin';\n  let basename = 'file';\n  let directory = '';\n  let folder = '';\n  let query = '';\n\n  if (loaderContext.resourcePath) {\n    const parsed = path.parse(loaderContext.resourcePath);\n    let resourcePath = loaderContext.resourcePath;\n\n    if (parsed.ext) {\n      ext = parsed.ext.substr(1);\n    }\n\n    if (parsed.dir) {\n      basename = parsed.name;\n      resourcePath = parsed.dir + path.sep;\n    }\n\n    if (typeof context !== 'undefined') {\n      directory = path\n        .relative(context, resourcePath + '_')\n        .replace(/\\\\/g, '/')\n        .replace(/\\.\\.(\\/)?/g, '_$1');\n      directory = directory.substr(0, directory.length - 1);\n    } else {\n      directory = resourcePath.replace(/\\\\/g, '/').replace(/\\.\\.(\\/)?/g, '_$1');\n    }\n\n    if (directory.length === 1) {\n      directory = '';\n    } else if (directory.length > 1) {\n      folder = path.basename(directory);\n    }\n  }\n\n  if (loaderContext.resourceQuery && loaderContext.resourceQuery.length > 1) {\n    query = loaderContext.resourceQuery;\n\n    const hashIdx = query.indexOf('#');\n\n    if (hashIdx >= 0) {\n      query = query.substr(0, hashIdx);\n    }\n  }\n\n  let url = filename;\n\n  if (content) {\n    // Match hash template\n    url = url\n      // `hash` and `contenthash` are same in `loader-utils` context\n      // let's keep `hash` for backward compatibility\n      .replace(\n        /\\[(?:([^:\\]]+):)?(?:hash|contenthash)(?::([a-z]+\\d*))?(?::(\\d+))?\\]/gi,\n        (all, hashType, digestType, maxLength) =>\n          getHashDigest(content, hashType, digestType, parseInt(maxLength, 10))\n      )\n      .replace(/\\[emoji(?::(\\d+))?\\]/gi, (all, length) =>\n        encodeStringToEmoji(content, parseInt(length, 10))\n      );\n  }\n\n  url = url\n    .replace(/\\[ext\\]/gi, () => ext)\n    .replace(/\\[name\\]/gi, () => basename)\n    .replace(/\\[path\\]/gi, () => directory)\n    .replace(/\\[folder\\]/gi, () => folder)\n    .replace(/\\[query\\]/gi, () => query);\n\n  if (regExp && loaderContext.resourcePath) {\n    const match = loaderContext.resourcePath.match(new RegExp(regExp));\n\n    match &&\n      match.forEach((matched, i) => {\n        url = url.replace(new RegExp('\\\\[' + i + '\\\\]', 'ig'), matched);\n      });\n  }\n\n  if (\n    typeof loaderContext.options === 'object' &&\n    typeof loaderContext.options.customInterpolateName === 'function'\n  ) {\n    url = loaderContext.options.customInterpolateName.call(\n      loaderContext,\n      url,\n      name,\n      options\n    );\n  }\n\n  return url;\n}\n\nmodule.exports = interpolateName;\n","'use strict';\n\nconst path = require('path');\n\nfunction isUrlRequest(url, root) {\n  // An URL is not an request if\n\n  // 1. It's an absolute url and it is not `windows` path like `C:\\dir\\file`\n  if (/^[a-z][a-z0-9+.-]*:/i.test(url) && !path.win32.isAbsolute(url)) {\n    return false;\n  }\n\n  // 2. It's a protocol-relative\n  if (/^\\/\\//.test(url)) {\n    return false;\n  }\n\n  // 3. It's some kind of url for a template\n  if (/^[{}[\\]#*;,'§$%&(=?`´^°<>]/.test(url)) {\n    return false;\n  }\n\n  // 4. It's also not an request if root isn't set and it's a root-relative url\n  if ((root === undefined || root === false) && /^\\//.test(url)) {\n    return false;\n  }\n\n  return true;\n}\n\nmodule.exports = isUrlRequest;\n","'use strict';\n\nconst JSON5 = require('json5');\n\nconst specialValues = {\n  null: null,\n  true: true,\n  false: false,\n};\n\nfunction parseQuery(query) {\n  if (query.substr(0, 1) !== '?') {\n    throw new Error(\n      \"A valid query string passed to parseQuery should begin with '?'\"\n    );\n  }\n\n  query = query.substr(1);\n\n  if (!query) {\n    return {};\n  }\n\n  if (query.substr(0, 1) === '{' && query.substr(-1) === '}') {\n    return JSON5.parse(query);\n  }\n\n  const queryArgs = query.split(/[,&]/g);\n  const result = {};\n\n  queryArgs.forEach((arg) => {\n    const idx = arg.indexOf('=');\n\n    if (idx >= 0) {\n      let name = arg.substr(0, idx);\n      let value = decodeURIComponent(arg.substr(idx + 1));\n\n      // eslint-disable-next-line no-prototype-builtins\n      if (specialValues.hasOwnProperty(value)) {\n        value = specialValues[value];\n      }\n\n      if (name.substr(-2) === '[]') {\n        name = decodeURIComponent(name.substr(0, name.length - 2));\n\n        if (!Array.isArray(result[name])) {\n          result[name] = [];\n        }\n\n        result[name].push(value);\n      } else {\n        name = decodeURIComponent(name);\n        result[name] = value;\n      }\n    } else {\n      if (arg.substr(0, 1) === '-') {\n        result[decodeURIComponent(arg.substr(1))] = false;\n      } else if (arg.substr(0, 1) === '+') {\n        result[decodeURIComponent(arg.substr(1))] = true;\n      } else {\n        result[decodeURIComponent(arg)] = true;\n      }\n    }\n  });\n\n  return result;\n}\n\nmodule.exports = parseQuery;\n","'use strict';\n\nfunction parseString(str) {\n  try {\n    if (str[0] === '\"') {\n      return JSON.parse(str);\n    }\n\n    if (str[0] === \"'\" && str.substr(str.length - 1) === \"'\") {\n      return parseString(\n        str\n          .replace(/\\\\.|\"/g, (x) => (x === '\"' ? '\\\\\"' : x))\n          .replace(/^'|'$/g, '\"')\n      );\n    }\n\n    return JSON.parse('\"' + str + '\"');\n  } catch (e) {\n    return str;\n  }\n}\n\nmodule.exports = parseString;\n","'use strict';\n\nconst path = require('path');\n\nconst matchRelativePath = /^\\.\\.?[/\\\\]/;\n\nfunction isAbsolutePath(str) {\n  return path.posix.isAbsolute(str) || path.win32.isAbsolute(str);\n}\n\nfunction isRelativePath(str) {\n  return matchRelativePath.test(str);\n}\n\nfunction stringifyRequest(loaderContext, request) {\n  const splitted = request.split('!');\n  const context =\n    loaderContext.context ||\n    (loaderContext.options && loaderContext.options.context);\n\n  return JSON.stringify(\n    splitted\n      .map((part) => {\n        // First, separate singlePath from query, because the query might contain paths again\n        const splittedPart = part.match(/^(.*?)(\\?.*)/);\n        const query = splittedPart ? splittedPart[2] : '';\n        let singlePath = splittedPart ? splittedPart[1] : part;\n\n        if (isAbsolutePath(singlePath) && context) {\n          singlePath = path.relative(context, singlePath);\n\n          if (isAbsolutePath(singlePath)) {\n            // If singlePath still matches an absolute path, singlePath was on a different drive than context.\n            // In this case, we leave the path platform-specific without replacing any separators.\n            // @see https://github.com/webpack/loader-utils/pull/14\n            return singlePath + query;\n          }\n\n          if (isRelativePath(singlePath) === false) {\n            // Ensure that the relative path starts at least with ./ otherwise it would be a request into the modules directory (like node_modules).\n            singlePath = './' + singlePath;\n          }\n        }\n\n        return singlePath.replace(/\\\\/g, '/') + query;\n      })\n      .join('!')\n  );\n}\n\nmodule.exports = stringifyRequest;\n","'use strict';\n\n// we can't use path.win32.isAbsolute because it also matches paths starting with a forward slash\nconst matchNativeWin32Path = /^[A-Z]:[/\\\\]|^\\\\\\\\/i;\n\nfunction urlToRequest(url, root) {\n  // Do not rewrite an empty url\n  if (url === '') {\n    return '';\n  }\n\n  const moduleRequestRegex = /^[^?]*~/;\n  let request;\n\n  if (matchNativeWin32Path.test(url)) {\n    // absolute windows path, keep it\n    request = url;\n  } else if (root !== undefined && root !== false && /^\\//.test(url)) {\n    // if root is set and the url is root-relative\n    switch (typeof root) {\n      // 1. root is a string: root is prefixed to the url\n      case 'string':\n        // special case: `~` roots convert to module request\n        if (moduleRequestRegex.test(root)) {\n          request = root.replace(/([^~/])$/, '$1/') + url.slice(1);\n        } else {\n          request = root + url;\n        }\n        break;\n      // 2. root is `true`: absolute paths are allowed\n      //    *nix only, windows-style absolute paths are always allowed as they doesn't start with a `/`\n      case 'boolean':\n        request = url;\n        break;\n      default:\n        throw new Error(\n          \"Unexpected parameters to loader-utils 'urlToRequest': url = \" +\n            url +\n            ', root = ' +\n            root +\n            '.'\n        );\n    }\n  } else if (/^\\.\\.?\\//.test(url)) {\n    // A relative url stays\n    request = url;\n  } else {\n    // every other url is threaded like a relative url\n    request = './' + url;\n  }\n\n  // A `~` makes the url an module\n  if (moduleRequestRegex.test(request)) {\n    request = request.replace(moduleRequestRegex, '');\n  }\n\n  return request;\n}\n\nmodule.exports = urlToRequest;\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nconst Range = require('./util/Range');\n/** @typedef {import(\"json-schema\").JSONSchema6} JSONSchema6 */\n\n/** @typedef {import(\"json-schema\").JSONSchema7} JSONSchema7 */\n\n/** @typedef {import(\"./validate\").Schema} Schema */\n\n/** @typedef {import(\"./validate\").ValidationErrorConfiguration} ValidationErrorConfiguration */\n\n/** @typedef {import(\"./validate\").PostFormatter} PostFormatter */\n\n/** @typedef {import(\"./validate\").SchemaUtilErrorObject} SchemaUtilErrorObject */\n\n/** @enum {number} */\n\n\nconst SPECIFICITY = {\n  type: 1,\n  not: 1,\n  oneOf: 1,\n  anyOf: 1,\n  if: 1,\n  enum: 1,\n  const: 1,\n  instanceof: 1,\n  required: 2,\n  pattern: 2,\n  patternRequired: 2,\n  format: 2,\n  formatMinimum: 2,\n  formatMaximum: 2,\n  minimum: 2,\n  exclusiveMinimum: 2,\n  maximum: 2,\n  exclusiveMaximum: 2,\n  multipleOf: 2,\n  uniqueItems: 2,\n  contains: 2,\n  minLength: 2,\n  maxLength: 2,\n  minItems: 2,\n  maxItems: 2,\n  minProperties: 2,\n  maxProperties: 2,\n  dependencies: 2,\n  propertyNames: 2,\n  additionalItems: 2,\n  additionalProperties: 2,\n  absolutePath: 2\n};\n/**\n *\n * @param {Array<SchemaUtilErrorObject>} array\n * @param {(item: SchemaUtilErrorObject) => number} fn\n * @returns {Array<SchemaUtilErrorObject>}\n */\n\nfunction filterMax(array, fn) {\n  const evaluatedMax = array.reduce((max, item) => Math.max(max, fn(item)), 0);\n  return array.filter(item => fn(item) === evaluatedMax);\n}\n/**\n *\n * @param {Array<SchemaUtilErrorObject>} children\n * @returns {Array<SchemaUtilErrorObject>}\n */\n\n\nfunction filterChildren(children) {\n  let newChildren = children;\n  newChildren = filterMax(newChildren,\n  /**\n   *\n   * @param {SchemaUtilErrorObject} error\n   * @returns {number}\n   */\n  error => error.dataPath ? error.dataPath.length : 0);\n  newChildren = filterMax(newChildren,\n  /**\n   * @param {SchemaUtilErrorObject} error\n   * @returns {number}\n   */\n  error => SPECIFICITY[\n  /** @type {keyof typeof SPECIFICITY} */\n  error.keyword] || 2);\n  return newChildren;\n}\n/**\n * Find all children errors\n * @param {Array<SchemaUtilErrorObject>} children\n * @param {Array<string>} schemaPaths\n * @return {number} returns index of first child\n */\n\n\nfunction findAllChildren(children, schemaPaths) {\n  let i = children.length - 1;\n\n  const predicate =\n  /**\n   * @param {string} schemaPath\n   * @returns {boolean}\n   */\n  schemaPath => children[i].schemaPath.indexOf(schemaPath) !== 0;\n\n  while (i > -1 && !schemaPaths.every(predicate)) {\n    if (children[i].keyword === 'anyOf' || children[i].keyword === 'oneOf') {\n      const refs = extractRefs(children[i]);\n      const childrenStart = findAllChildren(children.slice(0, i), refs.concat(children[i].schemaPath));\n      i = childrenStart - 1;\n    } else {\n      i -= 1;\n    }\n  }\n\n  return i + 1;\n}\n/**\n * Extracts all refs from schema\n * @param {SchemaUtilErrorObject} error\n * @return {Array<string>}\n */\n\n\nfunction extractRefs(error) {\n  const {\n    schema\n  } = error;\n\n  if (!Array.isArray(schema)) {\n    return [];\n  }\n\n  return schema.map(({\n    $ref\n  }) => $ref).filter(s => s);\n}\n/**\n * Groups children by their first level parent (assuming that error is root)\n * @param {Array<SchemaUtilErrorObject>} children\n * @return {Array<SchemaUtilErrorObject>}\n */\n\n\nfunction groupChildrenByFirstChild(children) {\n  const result = [];\n  let i = children.length - 1;\n\n  while (i > 0) {\n    const child = children[i];\n\n    if (child.keyword === 'anyOf' || child.keyword === 'oneOf') {\n      const refs = extractRefs(child);\n      const childrenStart = findAllChildren(children.slice(0, i), refs.concat(child.schemaPath));\n\n      if (childrenStart !== i) {\n        result.push(Object.assign({}, child, {\n          children: children.slice(childrenStart, i)\n        }));\n        i = childrenStart;\n      } else {\n        result.push(child);\n      }\n    } else {\n      result.push(child);\n    }\n\n    i -= 1;\n  }\n\n  if (i === 0) {\n    result.push(children[i]);\n  }\n\n  return result.reverse();\n}\n/**\n * @param {string} str\n * @param {string} prefix\n * @returns {string}\n */\n\n\nfunction indent(str, prefix) {\n  return str.replace(/\\n(?!$)/g, `\\n${prefix}`);\n}\n/**\n * @param {any} maybeObj\n * @returns {boolean}\n */\n\n\nfunction isObject(maybeObj) {\n  return typeof maybeObj === 'object' && maybeObj !== null;\n}\n/**\n * @param {Schema} schema\n * @returns {boolean}\n */\n\n\nfunction likeNumber(schema) {\n  return schema.type === 'number' || typeof schema.minimum !== 'undefined' || typeof schema.exclusiveMinimum !== 'undefined' || typeof schema.maximum !== 'undefined' || typeof schema.exclusiveMaximum !== 'undefined' || typeof schema.multipleOf !== 'undefined';\n}\n/**\n * @param {Schema} schema\n * @returns {boolean}\n */\n\n\nfunction likeInteger(schema) {\n  return schema.type === 'integer' || typeof schema.minimum !== 'undefined' || typeof schema.exclusiveMinimum !== 'undefined' || typeof schema.maximum !== 'undefined' || typeof schema.exclusiveMaximum !== 'undefined' || typeof schema.multipleOf !== 'undefined';\n}\n/**\n * @param {Schema & {formatMinimum?: string; formatMaximum?: string;}} schema\n * @returns {boolean}\n */\n\n\nfunction likeString(schema) {\n  return schema.type === 'string' || typeof schema.minLength !== 'undefined' || typeof schema.maxLength !== 'undefined' || typeof schema.pattern !== 'undefined' || typeof schema.format !== 'undefined' || typeof schema.formatMinimum !== 'undefined' || typeof schema.formatMaximum !== 'undefined';\n}\n/**\n * @param {Schema} schema\n * @returns {boolean}\n */\n\n\nfunction likeBoolean(schema) {\n  return schema.type === 'boolean';\n}\n/**\n * @param {Schema} schema\n * @returns {boolean}\n */\n\n\nfunction likeArray(schema) {\n  return schema.type === 'array' || typeof schema.minItems === 'number' || typeof schema.maxItems === 'number' || typeof schema.uniqueItems !== 'undefined' || typeof schema.items !== 'undefined' || typeof schema.additionalItems !== 'undefined' || typeof schema.contains !== 'undefined';\n}\n/**\n * @param {Schema & {patternRequired?: Array<string>}} schema\n * @returns {boolean}\n */\n\n\nfunction likeObject(schema) {\n  return schema.type === 'object' || typeof schema.minProperties !== 'undefined' || typeof schema.maxProperties !== 'undefined' || typeof schema.required !== 'undefined' || typeof schema.properties !== 'undefined' || typeof schema.patternProperties !== 'undefined' || typeof schema.additionalProperties !== 'undefined' || typeof schema.dependencies !== 'undefined' || typeof schema.propertyNames !== 'undefined' || typeof schema.patternRequired !== 'undefined';\n}\n/**\n * @param {Schema} schema\n * @returns {boolean}\n */\n\n\nfunction likeNull(schema) {\n  return schema.type === 'null';\n}\n/**\n * @param {string} type\n * @returns {string}\n */\n\n\nfunction getArticle(type) {\n  if (/^[aeiou]/i.test(type)) {\n    return 'an';\n  }\n\n  return 'a';\n}\n/**\n * @param {Schema=} schema\n * @returns {string}\n */\n\n\nfunction getSchemaNonTypes(schema) {\n  if (!schema) {\n    return '';\n  }\n\n  if (!schema.type) {\n    if (likeNumber(schema) || likeInteger(schema)) {\n      return ' | should be any non-number';\n    }\n\n    if (likeString(schema)) {\n      return ' | should be any non-string';\n    }\n\n    if (likeArray(schema)) {\n      return ' | should be any non-array';\n    }\n\n    if (likeObject(schema)) {\n      return ' | should be any non-object';\n    }\n  }\n\n  return '';\n}\n/**\n * @param {Schema=} schema\n * @returns {Array<string>}\n */\n\n\nfunction numberHints(schema) {\n  if (!schema) {\n    return [];\n  }\n\n  const hints = [];\n  const range = new Range();\n\n  if (typeof schema.minimum === 'number') {\n    range.left(schema.minimum);\n  }\n\n  if (typeof schema.exclusiveMinimum === 'number') {\n    range.left(schema.exclusiveMinimum, true);\n  }\n\n  if (typeof schema.maximum === 'number') {\n    range.right(schema.maximum);\n  }\n\n  if (typeof schema.exclusiveMaximum === 'number') {\n    range.right(schema.exclusiveMaximum, true);\n  }\n\n  const rangeFormat = range.format();\n\n  if (rangeFormat) {\n    hints.push(rangeFormat);\n  }\n\n  if (typeof schema.multipleOf === 'number') {\n    hints.push(`should be multiple of ${schema.multipleOf}`);\n  }\n\n  return hints;\n}\n/**\n * @param {Array<string>} hints\n * @returns {string}\n */\n\n\nfunction formatHints(hints) {\n  return hints.length > 0 ? `(${hints.join(', ')})` : '';\n}\n/**\n * @param {Schema} schema\n * @returns {string}\n */\n\n\nfunction getHints(schema) {\n  if (likeNumber(schema) || likeInteger(schema)) {\n    return formatHints(numberHints(schema));\n  }\n\n  return '';\n}\n\nclass ValidationError extends Error {\n  /**\n   * @param {Array<SchemaUtilErrorObject>} errors\n   * @param {Schema} schema\n   * @param {ValidationErrorConfiguration} configuration\n   */\n  constructor(errors, schema, configuration = {}) {\n    super();\n    /** @type {string} */\n\n    this.name = 'ValidationError';\n    /** @type {Array<SchemaUtilErrorObject>} */\n\n    this.errors = errors;\n    /** @type {Schema} */\n\n    this.schema = schema;\n    let headerNameFromSchema;\n    let baseDataPathFromSchema;\n\n    if (schema.title && (!configuration.name || !configuration.baseDataPath)) {\n      const splittedTitleFromSchema = schema.title.match(/^(.+) (.+)$/);\n\n      if (splittedTitleFromSchema) {\n        if (!configuration.name) {\n          [, headerNameFromSchema] = splittedTitleFromSchema;\n        }\n\n        if (!configuration.baseDataPath) {\n          [,, baseDataPathFromSchema] = splittedTitleFromSchema;\n        }\n      }\n    }\n    /** @type {string} */\n\n\n    this.headerName = configuration.name || headerNameFromSchema || 'Object';\n    /** @type {string} */\n\n    this.baseDataPath = configuration.baseDataPath || baseDataPathFromSchema || 'configuration';\n    /** @type {PostFormatter | null} */\n\n    this.postFormatter = configuration.postFormatter || null;\n    const header = `Invalid ${this.baseDataPath} object. ${this.headerName} has been initialized using ${getArticle(this.baseDataPath)} ${this.baseDataPath} object that does not match the API schema.\\n`;\n    /** @type {string} */\n\n    this.message = `${header}${this.formatValidationErrors(errors)}`;\n    Error.captureStackTrace(this, this.constructor);\n  }\n  /**\n   * @param {string} path\n   * @returns {Schema}\n   */\n\n\n  getSchemaPart(path) {\n    const newPath = path.split('/');\n    let schemaPart = this.schema;\n\n    for (let i = 1; i < newPath.length; i++) {\n      const inner = schemaPart[\n      /** @type {keyof Schema} */\n      newPath[i]];\n\n      if (!inner) {\n        break;\n      }\n\n      schemaPart = inner;\n    }\n\n    return schemaPart;\n  }\n  /**\n   * @param {Schema} schema\n   * @param {Array<Object>} prevSchemas\n   * @returns {string}\n   */\n\n\n  formatSchema(schema, prevSchemas = []) {\n    const formatInnerSchema =\n    /**\n     *\n     * @param {Object} innerSchema\n     * @param {boolean=} addSelf\n     * @returns {string}\n     */\n    (innerSchema, addSelf) => {\n      if (!addSelf) {\n        return this.formatSchema(innerSchema, prevSchemas);\n      }\n\n      if (prevSchemas.includes(innerSchema)) {\n        return '(recursive)';\n      }\n\n      return this.formatSchema(innerSchema, prevSchemas.concat(schema));\n    };\n\n    if (schema.not && !likeObject(schema)) {\n      return `non ${formatInnerSchema(schema.not)}`;\n    }\n\n    if (\n    /** @type {Schema & {instanceof: string | Array<string>}} */\n    schema.instanceof) {\n      const {\n        instanceof: value\n      } =\n      /** @type {Schema & {instanceof: string | Array<string>}} */\n      schema;\n      const values = !Array.isArray(value) ? [value] : value;\n      return values.map(\n      /**\n       * @param {string} item\n       * @returns {string}\n       */\n      item => item === 'Function' ? 'function' : item).join(' | ');\n    }\n\n    if (schema.enum) {\n      return (\n        /** @type {Array<any>} */\n        schema.enum.map(item => JSON.stringify(item)).join(' | ')\n      );\n    }\n\n    if (typeof schema.const !== 'undefined') {\n      return JSON.stringify(schema.const);\n    }\n\n    if (schema.oneOf) {\n      return (\n        /** @type {Array<Schema>} */\n        schema.oneOf.map(item => formatInnerSchema(item, true)).join(' | ')\n      );\n    }\n\n    if (schema.anyOf) {\n      return (\n        /** @type {Array<Schema>} */\n        schema.anyOf.map(item => formatInnerSchema(item, true)).join(' | ')\n      );\n    }\n\n    if (schema.allOf) {\n      return (\n        /** @type {Array<Schema>} */\n        schema.allOf.map(item => formatInnerSchema(item, true)).join(' & ')\n      );\n    }\n\n    if (\n    /** @type {JSONSchema7} */\n    schema.if) {\n      const {\n        if: ifValue,\n        then: thenValue,\n        else: elseValue\n      } =\n      /** @type {JSONSchema7} */\n      schema;\n      return `${ifValue ? `if ${formatInnerSchema(ifValue)}` : ''}${thenValue ? ` then ${formatInnerSchema(thenValue)}` : ''}${elseValue ? ` else ${formatInnerSchema(elseValue)}` : ''}`;\n    }\n\n    if (schema.$ref) {\n      return formatInnerSchema(this.getSchemaPart(schema.$ref), true);\n    }\n\n    if (likeNumber(schema) || likeInteger(schema)) {\n      const type = schema.type === 'integer' ? 'integer' : 'number';\n      const hints = getHints(schema);\n      return `${type}${hints.length > 0 ? ` ${hints}` : ''}`;\n    }\n\n    if (likeString(schema)) {\n      let type = 'string';\n      const hints = [];\n\n      if (typeof schema.minLength === 'number') {\n        if (schema.minLength === 1) {\n          type = 'non-empty string';\n        } else if (schema.minLength !== 0) {\n          /* if min length === 0 it does not make hint for user */\n          const length = schema.minLength - 1;\n          hints.push(`should be longer than ${length} character${length > 1 ? 's' : ''}`);\n        }\n      }\n\n      if (typeof schema.maxLength === 'number') {\n        if (schema.maxLength === 0) {\n          type = 'empty string';\n        } else {\n          hints.push(`should be shorter than ${schema.maxLength + 1} characters`);\n        }\n      }\n\n      if (schema.pattern) {\n        hints.push(`should match pattern ${JSON.stringify(schema.pattern)}`);\n      }\n\n      if (schema.format) {\n        hints.push(`should match format ${JSON.stringify(schema.format)}`);\n      }\n\n      if (\n      /** @type {Schema & {formatMinimum?: string; formatExclusiveMinimum?: boolean;}} */\n      schema.formatMinimum) {\n        const {\n          formatExclusiveMinimum,\n          formatMinimum\n        } =\n        /** @type {Schema & {formatMinimum?: string; formatExclusiveMinimum?: boolean;}} */\n        schema;\n        hints.push(`should be ${formatExclusiveMinimum ? '>' : '>='} ${JSON.stringify(formatMinimum)}`);\n      }\n\n      if (\n      /** @type {Schema & {formatMaximum?: string; formatExclusiveMaximum?: boolean;}} */\n      schema.formatMaximum) {\n        const {\n          formatExclusiveMaximum,\n          formatMaximum\n        } =\n        /** @type {Schema & {formatMaximum?: string; formatExclusiveMaximum?: boolean;}} */\n        schema;\n        hints.push(`should be ${formatExclusiveMaximum ? '<' : '<='} ${JSON.stringify(formatMaximum)}`);\n      }\n\n      return `${type}${hints.length > 0 ? ` (${hints.join(', ')})` : ''}`;\n    }\n\n    if (likeBoolean(schema)) {\n      return 'boolean';\n    }\n\n    if (likeArray(schema)) {\n      const hints = [];\n\n      if (typeof schema.minItems === 'number') {\n        hints.push(`should not have fewer than ${schema.minItems} item${schema.minItems > 1 ? 's' : ''}`);\n      }\n\n      if (typeof schema.maxItems === 'number') {\n        hints.push(`should not have more than ${schema.maxItems} item${schema.maxItems > 1 ? 's' : ''}`);\n      }\n\n      if (schema.uniqueItems) {\n        hints.push('should not have duplicate items');\n      }\n\n      const hasAdditionalItems = typeof schema.additionalItems === 'undefined' || Boolean(schema.additionalItems);\n      let items = '';\n\n      if (schema.items) {\n        if (Array.isArray(schema.items) && schema.items.length > 0) {\n          items = `${\n          /** @type {Array<Schema>} */\n          schema.items.map(item => formatInnerSchema(item)).join(', ')}`;\n\n          if (hasAdditionalItems) {\n            if (schema.additionalItems && isObject(schema.additionalItems) && Object.keys(schema.additionalItems).length > 0) {\n              hints.push(`additional items should be ${formatInnerSchema(schema.additionalItems)}`);\n            }\n          }\n        } else if (schema.items && Object.keys(schema.items).length > 0) {\n          // \"additionalItems\" is ignored\n          items = `${formatInnerSchema(schema.items)}`;\n        } else {\n          // Fallback for empty `items` value\n          items = 'any';\n        }\n      } else {\n        // \"additionalItems\" is ignored\n        items = 'any';\n      }\n\n      if (schema.contains && Object.keys(schema.contains).length > 0) {\n        hints.push(`should contains at least one ${this.formatSchema(schema.contains)} item`);\n      }\n\n      return `[${items}${hasAdditionalItems ? ', ...' : ''}]${hints.length > 0 ? ` (${hints.join(', ')})` : ''}`;\n    }\n\n    if (likeObject(schema)) {\n      const hints = [];\n\n      if (typeof schema.minProperties === 'number') {\n        hints.push(`should not have fewer than ${schema.minProperties} ${schema.minProperties > 1 ? 'properties' : 'property'}`);\n      }\n\n      if (typeof schema.maxProperties === 'number') {\n        hints.push(`should not have more than ${schema.maxProperties} ${schema.minProperties && schema.minProperties > 1 ? 'properties' : 'property'}`);\n      }\n\n      if (schema.patternProperties && Object.keys(schema.patternProperties).length > 0) {\n        const patternProperties = Object.keys(schema.patternProperties);\n        hints.push(`additional property names should match pattern${patternProperties.length > 1 ? 's' : ''} ${patternProperties.map(pattern => JSON.stringify(pattern)).join(' | ')}`);\n      }\n\n      const properties = schema.properties ? Object.keys(schema.properties) : [];\n      const required = schema.required ? schema.required : [];\n      const allProperties = [...new Set(\n      /** @type {Array<string>} */\n      [].concat(required).concat(properties))];\n      const objectStructure = allProperties.map(property => {\n        const isRequired = required.includes(property); // Some properties need quotes, maybe we should add check\n        // Maybe we should output type of property (`foo: string`), but it is looks very unreadable\n\n        return `${property}${isRequired ? '' : '?'}`;\n      }).concat(typeof schema.additionalProperties === 'undefined' || Boolean(schema.additionalProperties) ? schema.additionalProperties && isObject(schema.additionalProperties) ? [`<key>: ${formatInnerSchema(schema.additionalProperties)}`] : ['…'] : []).join(', ');\n      const {\n        dependencies,\n        propertyNames,\n        patternRequired\n      } =\n      /** @type {Schema & {patternRequired?: Array<string>;}} */\n      schema;\n\n      if (dependencies) {\n        Object.keys(dependencies).forEach(dependencyName => {\n          const dependency = dependencies[dependencyName];\n\n          if (Array.isArray(dependency)) {\n            hints.push(`should have ${dependency.length > 1 ? 'properties' : 'property'} ${dependency.map(dep => `'${dep}'`).join(', ')} when property '${dependencyName}' is present`);\n          } else {\n            hints.push(`should be valid according to the schema ${formatInnerSchema(dependency)} when property '${dependencyName}' is present`);\n          }\n        });\n      }\n\n      if (propertyNames && Object.keys(propertyNames).length > 0) {\n        hints.push(`each property name should match format ${JSON.stringify(schema.propertyNames.format)}`);\n      }\n\n      if (patternRequired && patternRequired.length > 0) {\n        hints.push(`should have property matching pattern ${patternRequired.map(\n        /**\n         * @param {string} item\n         * @returns {string}\n         */\n        item => JSON.stringify(item))}`);\n      }\n\n      return `object {${objectStructure ? ` ${objectStructure} ` : ''}}${hints.length > 0 ? ` (${hints.join(', ')})` : ''}`;\n    }\n\n    if (likeNull(schema)) {\n      return 'null';\n    }\n\n    if (Array.isArray(schema.type)) {\n      return `${schema.type.join(' | ')}`;\n    } // Fallback for unknown keywords\n\n    /* istanbul ignore next */\n\n\n    return JSON.stringify(schema, null, 2);\n  }\n  /**\n   * @param {Schema=} schemaPart\n   * @param {(boolean | Array<string>)=} additionalPath\n   * @param {boolean=} needDot\n   * @returns {string}\n   */\n\n\n  getSchemaPartText(schemaPart, additionalPath, needDot = false) {\n    if (!schemaPart) {\n      return '';\n    }\n\n    if (Array.isArray(additionalPath)) {\n      for (let i = 0; i < additionalPath.length; i++) {\n        /** @type {Schema | undefined} */\n        const inner = schemaPart[\n        /** @type {keyof Schema} */\n        additionalPath[i]];\n\n        if (inner) {\n          // eslint-disable-next-line no-param-reassign\n          schemaPart = inner;\n        } else {\n          break;\n        }\n      }\n    }\n\n    while (schemaPart.$ref) {\n      // eslint-disable-next-line no-param-reassign\n      schemaPart = this.getSchemaPart(schemaPart.$ref);\n    }\n\n    let schemaText = `${this.formatSchema(schemaPart)}${needDot ? '.' : ''}`;\n\n    if (schemaPart.description) {\n      schemaText += `\\n-> ${schemaPart.description}`;\n    }\n\n    return schemaText;\n  }\n  /**\n   * @param {Schema=} schemaPart\n   * @returns {string}\n   */\n\n\n  getSchemaPartDescription(schemaPart) {\n    if (!schemaPart) {\n      return '';\n    }\n\n    while (schemaPart.$ref) {\n      // eslint-disable-next-line no-param-reassign\n      schemaPart = this.getSchemaPart(schemaPart.$ref);\n    }\n\n    if (schemaPart.description) {\n      return `\\n-> ${schemaPart.description}`;\n    }\n\n    return '';\n  }\n  /**\n   * @param {SchemaUtilErrorObject} error\n   * @returns {string}\n   */\n\n\n  formatValidationError(error) {\n    const {\n      keyword,\n      dataPath: errorDataPath\n    } = error;\n    const dataPath = `${this.baseDataPath}${errorDataPath}`;\n\n    switch (keyword) {\n      case 'type':\n        {\n          const {\n            parentSchema,\n            params\n          } = error; // eslint-disable-next-line default-case\n\n          switch (\n          /** @type {import(\"ajv\").TypeParams} */\n          params.type) {\n            case 'number':\n              return `${dataPath} should be a ${this.getSchemaPartText(parentSchema, false, true)}`;\n\n            case 'integer':\n              return `${dataPath} should be a ${this.getSchemaPartText(parentSchema, false, true)}`;\n\n            case 'string':\n              return `${dataPath} should be a ${this.getSchemaPartText(parentSchema, false, true)}`;\n\n            case 'boolean':\n              return `${dataPath} should be a ${this.getSchemaPartText(parentSchema, false, true)}`;\n\n            case 'array':\n              return `${dataPath} should be an array:\\n${this.getSchemaPartText(parentSchema)}`;\n\n            case 'object':\n              return `${dataPath} should be an object:\\n${this.getSchemaPartText(parentSchema)}`;\n\n            case 'null':\n              return `${dataPath} should be a ${this.getSchemaPartText(parentSchema, false, true)}`;\n\n            default:\n              return `${dataPath} should be:\\n${this.getSchemaPartText(parentSchema)}`;\n          }\n        }\n\n      case 'instanceof':\n        {\n          const {\n            parentSchema\n          } = error;\n          return `${dataPath} should be an instance of ${this.getSchemaPartText(parentSchema, false, true)}`;\n        }\n\n      case 'pattern':\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            pattern\n          } =\n          /** @type {import(\"ajv\").PatternParams} */\n          params;\n          return `${dataPath} should match pattern ${JSON.stringify(pattern)}${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case 'format':\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            format\n          } =\n          /** @type {import(\"ajv\").FormatParams} */\n          params;\n          return `${dataPath} should match format ${JSON.stringify(format)}${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case 'formatMinimum':\n      case 'formatMaximum':\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            comparison,\n            limit\n          } =\n          /** @type {import(\"ajv\").ComparisonParams} */\n          params;\n          return `${dataPath} should be ${comparison} ${JSON.stringify(limit)}${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case 'minimum':\n      case 'maximum':\n      case 'exclusiveMinimum':\n      case 'exclusiveMaximum':\n        {\n          const {\n            parentSchema,\n            params\n          } = error;\n          const {\n            comparison,\n            limit\n          } =\n          /** @type {import(\"ajv\").ComparisonParams} */\n          params;\n          const hints = numberHints(parentSchema);\n\n          if (hints.length === 0) {\n            hints.push(`should be ${comparison} ${limit}`);\n          }\n\n          return `${dataPath} ${hints.join(' ')}${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case 'multipleOf':\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            multipleOf\n          } =\n          /** @type {import(\"ajv\").MultipleOfParams} */\n          params;\n          return `${dataPath} should be multiple of ${multipleOf}${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case 'patternRequired':\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            missingPattern\n          } =\n          /** @type {import(\"ajv\").PatternRequiredParams} */\n          params;\n          return `${dataPath} should have property matching pattern ${JSON.stringify(missingPattern)}${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case 'minLength':\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            limit\n          } =\n          /** @type {import(\"ajv\").LimitParams} */\n          params;\n\n          if (limit === 1) {\n            return `${dataPath} should be an non-empty string${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n          }\n\n          const length = limit - 1;\n          return `${dataPath} should be longer than ${length} character${length > 1 ? 's' : ''}${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case 'minItems':\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            limit\n          } =\n          /** @type {import(\"ajv\").LimitParams} */\n          params;\n\n          if (limit === 1) {\n            return `${dataPath} should be an non-empty array${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n          }\n\n          return `${dataPath} should not have fewer than ${limit} items${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case 'minProperties':\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            limit\n          } =\n          /** @type {import(\"ajv\").LimitParams} */\n          params;\n\n          if (limit === 1) {\n            return `${dataPath} should be an non-empty object${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n          }\n\n          return `${dataPath} should not have fewer than ${limit} properties${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case 'maxLength':\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            limit\n          } =\n          /** @type {import(\"ajv\").LimitParams} */\n          params;\n          return `${dataPath} should be shorter than ${limit + 1} characters${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case 'maxItems':\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            limit\n          } =\n          /** @type {import(\"ajv\").LimitParams} */\n          params;\n          return `${dataPath} should not have more than ${limit} items${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case 'maxProperties':\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            limit\n          } =\n          /** @type {import(\"ajv\").LimitParams} */\n          params;\n          return `${dataPath} should not have more than ${limit} properties${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case 'uniqueItems':\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            i\n          } =\n          /** @type {import(\"ajv\").UniqueItemsParams} */\n          params;\n          return `${dataPath} should not contain the item '${error.data[i]}' twice${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case 'additionalItems':\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            limit\n          } =\n          /** @type {import(\"ajv\").LimitParams} */\n          params;\n          return `${dataPath} should not have more than ${limit} items${getSchemaNonTypes(parentSchema)}. These items are valid:\\n${this.getSchemaPartText(parentSchema)}`;\n        }\n\n      case 'contains':\n        {\n          const {\n            parentSchema\n          } = error;\n          return `${dataPath} should contains at least one ${this.getSchemaPartText(parentSchema, ['contains'])} item${getSchemaNonTypes(parentSchema)}.`;\n        }\n\n      case 'required':\n        {\n          const {\n            parentSchema,\n            params\n          } = error;\n          const missingProperty =\n          /** @type {import(\"ajv\").DependenciesParams} */\n          params.missingProperty.replace(/^\\./, '');\n          const hasProperty = parentSchema && Boolean(\n          /** @type {Schema} */\n          parentSchema.properties &&\n          /** @type {Schema} */\n          parentSchema.properties[missingProperty]);\n          return `${dataPath} misses the property '${missingProperty}'${getSchemaNonTypes(parentSchema)}.${hasProperty ? ` Should be:\\n${this.getSchemaPartText(parentSchema, ['properties', missingProperty])}` : this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case 'additionalProperties':\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            additionalProperty\n          } =\n          /** @type {import(\"ajv\").AdditionalPropertiesParams} */\n          params;\n          return `${dataPath} has an unknown property '${additionalProperty}'${getSchemaNonTypes(parentSchema)}. These properties are valid:\\n${this.getSchemaPartText(parentSchema)}`;\n        }\n\n      case 'dependencies':\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            property,\n            deps\n          } =\n          /** @type {import(\"ajv\").DependenciesParams} */\n          params;\n          const dependencies = deps.split(',').map(\n          /**\n           * @param {string} dep\n           * @returns {string}\n           */\n          dep => `'${dep.trim()}'`).join(', ');\n          return `${dataPath} should have properties ${dependencies} when property '${property}' is present${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case 'propertyNames':\n        {\n          const {\n            params,\n            parentSchema,\n            schema\n          } = error;\n          const {\n            propertyName\n          } =\n          /** @type {import(\"ajv\").PropertyNamesParams} */\n          params;\n          return `${dataPath} property name '${propertyName}' is invalid${getSchemaNonTypes(parentSchema)}. Property names should be match format ${JSON.stringify(schema.format)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case 'enum':\n        {\n          const {\n            parentSchema\n          } = error;\n\n          if (parentSchema &&\n          /** @type {Schema} */\n          parentSchema.enum &&\n          /** @type {Schema} */\n          parentSchema.enum.length === 1) {\n            return `${dataPath} should be ${this.getSchemaPartText(parentSchema, false, true)}`;\n          }\n\n          return `${dataPath} should be one of these:\\n${this.getSchemaPartText(parentSchema)}`;\n        }\n\n      case 'const':\n        {\n          const {\n            parentSchema\n          } = error;\n          return `${dataPath} should be equal to constant ${this.getSchemaPartText(parentSchema, false, true)}`;\n        }\n\n      case 'not':\n        {\n          const {\n            schema,\n            parentSchema\n          } = error;\n          return `${dataPath} should not be ${this.getSchemaPartText(schema, false, true)}${parentSchema && likeObject(parentSchema) ? `\\n${this.getSchemaPartText(parentSchema)}` : ''}`;\n        }\n\n      case 'oneOf':\n      case 'anyOf':\n        {\n          const {\n            parentSchema,\n            children\n          } = error;\n\n          if (children && children.length > 0) {\n            if (error.schema.length === 1) {\n              const lastChild = children[children.length - 1];\n              const remainingChildren = children.slice(0, children.length - 1);\n              return this.formatValidationError(Object.assign({}, lastChild, {\n                children: remainingChildren,\n                parentSchema: Object.assign({}, parentSchema, lastChild.parentSchema)\n              }));\n            }\n\n            let filteredChildren = filterChildren(children);\n\n            if (filteredChildren.length === 1) {\n              return this.formatValidationError(filteredChildren[0]);\n            }\n\n            filteredChildren = groupChildrenByFirstChild(filteredChildren);\n            return `${dataPath} should be one of these:\\n${this.getSchemaPartText(parentSchema)}\\nDetails:\\n${filteredChildren.map(\n            /**\n             * @param {SchemaUtilErrorObject} nestedError\n             * @returns {string}\n             */\n            nestedError => ` * ${indent(this.formatValidationError(nestedError), '   ')}`).join('\\n')}`;\n          }\n\n          return `${dataPath} should be one of these:\\n${this.getSchemaPartText(parentSchema)}`;\n        }\n\n      case 'if':\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            failingKeyword\n          } =\n          /** @type {import(\"ajv\").IfParams} */\n          params;\n          return `${dataPath} should match \"${failingKeyword}\" schema:\\n${this.getSchemaPartText(parentSchema, [failingKeyword])}`;\n        }\n\n      case 'absolutePath':\n        {\n          const {\n            message,\n            parentSchema\n          } = error;\n          return `${dataPath}: ${message}${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      /* istanbul ignore next */\n\n      default:\n        {\n          const {\n            message,\n            parentSchema\n          } = error;\n          const ErrorInJSON = JSON.stringify(error, null, 2); // For `custom`, `false schema`, `$ref` keywords\n          // Fallback for unknown keywords\n\n          return `${dataPath} ${message} (${ErrorInJSON}).\\n${this.getSchemaPartText(parentSchema, false)}`;\n        }\n    }\n  }\n  /**\n   * @param {Array<SchemaUtilErrorObject>} errors\n   * @returns {string}\n   */\n\n\n  formatValidationErrors(errors) {\n    return errors.map(error => {\n      let formattedError = this.formatValidationError(error);\n\n      if (this.postFormatter) {\n        formattedError = this.postFormatter(formattedError, error);\n      }\n\n      return ` - ${indent(formattedError, '   ')}`;\n    }).join('\\n');\n  }\n\n}\n\nvar _default = ValidationError;\nexports.default = _default;","\"use strict\";\n\nconst validate = require('./validate');\n\nmodule.exports = validate.default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n/** @typedef {import(\"ajv\").Ajv} Ajv */\n\n/** @typedef {import(\"ajv\").ValidateFunction} ValidateFunction */\n\n/** @typedef {import(\"../validate\").SchemaUtilErrorObject} SchemaUtilErrorObject */\n\n/**\n * @param {string} message\n * @param {object} schema\n * @param {string} data\n * @returns {SchemaUtilErrorObject}\n */\nfunction errorMessage(message, schema, data) {\n  return {\n    // @ts-ignore\n    // eslint-disable-next-line no-undefined\n    dataPath: undefined,\n    // @ts-ignore\n    // eslint-disable-next-line no-undefined\n    schemaPath: undefined,\n    keyword: 'absolutePath',\n    params: {\n      absolutePath: data\n    },\n    message,\n    parentSchema: schema\n  };\n}\n/**\n * @param {boolean} shouldBeAbsolute\n * @param {object} schema\n * @param {string} data\n * @returns {SchemaUtilErrorObject}\n */\n\n\nfunction getErrorFor(shouldBeAbsolute, schema, data) {\n  const message = shouldBeAbsolute ? `The provided value ${JSON.stringify(data)} is not an absolute path!` : `A relative path is expected. However, the provided value ${JSON.stringify(data)} is an absolute path!`;\n  return errorMessage(message, schema, data);\n}\n/**\n *\n * @param {Ajv} ajv\n * @returns {Ajv}\n */\n\n\nfunction addAbsolutePathKeyword(ajv) {\n  ajv.addKeyword('absolutePath', {\n    errors: true,\n    type: 'string',\n\n    compile(schema, parentSchema) {\n      /** @type {ValidateFunction} */\n      const callback = data => {\n        let passes = true;\n        const isExclamationMarkPresent = data.includes('!');\n\n        if (isExclamationMarkPresent) {\n          callback.errors = [errorMessage(`The provided value ${JSON.stringify(data)} contains exclamation mark (!) which is not allowed because it's reserved for loader syntax.`, parentSchema, data)];\n          passes = false;\n        } // ?:[A-Za-z]:\\\\ - Windows absolute path\n        // \\\\\\\\ - Windows network absolute path\n        // \\/ - Unix-like OS absolute path\n\n\n        const isCorrectAbsolutePath = schema === /^(?:[A-Za-z]:(\\\\|\\/)|\\\\\\\\|\\/)/.test(data);\n\n        if (!isCorrectAbsolutePath) {\n          callback.errors = [getErrorFor(schema, parentSchema, data)];\n          passes = false;\n        }\n\n        return passes;\n      };\n\n      callback.errors = [];\n      return callback;\n    }\n\n  });\n  return ajv;\n}\n\nvar _default = addAbsolutePathKeyword;\nexports.default = _default;","\"use strict\";\n\n/**\n * @typedef {[number, boolean]} RangeValue\n */\n\n/**\n * @callback RangeValueCallback\n * @param {RangeValue} rangeValue\n * @returns {boolean}\n */\nclass Range {\n  /**\n   * @param {\"left\" | \"right\"} side\n   * @param {boolean} exclusive\n   * @returns {\">\" | \">=\" | \"<\" | \"<=\"}\n   */\n  static getOperator(side, exclusive) {\n    if (side === 'left') {\n      return exclusive ? '>' : '>=';\n    }\n\n    return exclusive ? '<' : '<=';\n  }\n  /**\n   * @param {number} value\n   * @param {boolean} logic is not logic applied\n   * @param {boolean} exclusive is range exclusive\n   * @returns {string}\n   */\n\n\n  static formatRight(value, logic, exclusive) {\n    if (logic === false) {\n      return Range.formatLeft(value, !logic, !exclusive);\n    }\n\n    return `should be ${Range.getOperator('right', exclusive)} ${value}`;\n  }\n  /**\n   * @param {number} value\n   * @param {boolean} logic is not logic applied\n   * @param {boolean} exclusive is range exclusive\n   * @returns {string}\n   */\n\n\n  static formatLeft(value, logic, exclusive) {\n    if (logic === false) {\n      return Range.formatRight(value, !logic, !exclusive);\n    }\n\n    return `should be ${Range.getOperator('left', exclusive)} ${value}`;\n  }\n  /**\n   * @param {number} start left side value\n   * @param {number} end right side value\n   * @param {boolean} startExclusive is range exclusive from left side\n   * @param {boolean} endExclusive is range exclusive from right side\n   * @param {boolean} logic is not logic applied\n   * @returns {string}\n   */\n\n\n  static formatRange(start, end, startExclusive, endExclusive, logic) {\n    let result = 'should be';\n    result += ` ${Range.getOperator(logic ? 'left' : 'right', logic ? startExclusive : !startExclusive)} ${start} `;\n    result += logic ? 'and' : 'or';\n    result += ` ${Range.getOperator(logic ? 'right' : 'left', logic ? endExclusive : !endExclusive)} ${end}`;\n    return result;\n  }\n  /**\n   * @param {Array<RangeValue>} values\n   * @param {boolean} logic is not logic applied\n   * @return {RangeValue} computed value and it's exclusive flag\n   */\n\n\n  static getRangeValue(values, logic) {\n    let minMax = logic ? Infinity : -Infinity;\n    let j = -1;\n    const predicate = logic ?\n    /** @type {RangeValueCallback} */\n    ([value]) => value <= minMax :\n    /** @type {RangeValueCallback} */\n    ([value]) => value >= minMax;\n\n    for (let i = 0; i < values.length; i++) {\n      if (predicate(values[i])) {\n        [minMax] = values[i];\n        j = i;\n      }\n    }\n\n    if (j > -1) {\n      return values[j];\n    }\n\n    return [Infinity, true];\n  }\n\n  constructor() {\n    /** @type {Array<RangeValue>} */\n    this._left = [];\n    /** @type {Array<RangeValue>} */\n\n    this._right = [];\n  }\n  /**\n   * @param {number} value\n   * @param {boolean=} exclusive\n   */\n\n\n  left(value, exclusive = false) {\n    this._left.push([value, exclusive]);\n  }\n  /**\n   * @param {number} value\n   * @param {boolean=} exclusive\n   */\n\n\n  right(value, exclusive = false) {\n    this._right.push([value, exclusive]);\n  }\n  /**\n   * @param {boolean} logic is not logic applied\n   * @return {string} \"smart\" range string representation\n   */\n\n\n  format(logic = true) {\n    const [start, leftExclusive] = Range.getRangeValue(this._left, logic);\n    const [end, rightExclusive] = Range.getRangeValue(this._right, !logic);\n\n    if (!Number.isFinite(start) && !Number.isFinite(end)) {\n      return '';\n    }\n\n    const realStart = leftExclusive ? start + 1 : start;\n    const realEnd = rightExclusive ? end - 1 : end; // e.g. 5 < x < 7, 5 < x <= 6, 6 <= x <= 6\n\n    if (realStart === realEnd) {\n      return `should be ${logic ? '' : '!'}= ${realStart}`;\n    } // e.g. 4 < x < ∞\n\n\n    if (Number.isFinite(start) && !Number.isFinite(end)) {\n      return Range.formatLeft(start, logic, leftExclusive);\n    } // e.g. ∞ < x < 4\n\n\n    if (!Number.isFinite(start) && Number.isFinite(end)) {\n      return Range.formatRight(end, logic, rightExclusive);\n    }\n\n    return Range.formatRange(start, end, leftExclusive, rightExclusive, logic);\n  }\n\n}\n\nmodule.exports = Range;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _ajv = _interopRequireDefault(require(\"ajv\"));\n\nvar _ajvKeywords = _interopRequireDefault(require(\"ajv-keywords\"));\n\nvar _absolutePath = _interopRequireDefault(require(\"./keywords/absolutePath\"));\n\nvar _ValidationError = _interopRequireDefault(require(\"./ValidationError\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/** @typedef {import(\"json-schema\").JSONSchema4} JSONSchema4 */\n\n/** @typedef {import(\"json-schema\").JSONSchema6} JSONSchema6 */\n\n/** @typedef {import(\"json-schema\").JSONSchema7} JSONSchema7 */\n\n/** @typedef {import(\"ajv\").ErrorObject} ErrorObject */\n\n/** @typedef {(JSONSchema4 | JSONSchema6 | JSONSchema7)} Schema */\n\n/** @typedef {ErrorObject & { children?: Array<ErrorObject>}} SchemaUtilErrorObject */\n\n/**\n * @callback PostFormatter\n * @param {string} formattedError\n * @param {SchemaUtilErrorObject} error\n * @returns {string}\n */\n\n/**\n * @typedef {Object} ValidationErrorConfiguration\n * @property {string=} name\n * @property {string=} baseDataPath\n * @property {PostFormatter=} postFormatter\n */\nconst ajv = new _ajv.default({\n  allErrors: true,\n  verbose: true,\n  $data: true\n});\n(0, _ajvKeywords.default)(ajv, ['instanceof', 'formatMinimum', 'formatMaximum', 'patternRequired']); // Custom keywords\n\n(0, _absolutePath.default)(ajv);\n/**\n * @param {Schema} schema\n * @param {Array<object> | object} options\n * @param {ValidationErrorConfiguration=} configuration\n * @returns {void}\n */\n\nfunction validate(schema, options, configuration) {\n  let errors = [];\n\n  if (Array.isArray(options)) {\n    errors = Array.from(options, nestedOptions => validateObject(schema, nestedOptions));\n    errors.forEach((list, idx) => {\n      const applyPrefix =\n      /**\n       * @param {SchemaUtilErrorObject} error\n       */\n      error => {\n        // eslint-disable-next-line no-param-reassign\n        error.dataPath = `[${idx}]${error.dataPath}`;\n\n        if (error.children) {\n          error.children.forEach(applyPrefix);\n        }\n      };\n\n      list.forEach(applyPrefix);\n    });\n    errors = errors.reduce((arr, items) => {\n      arr.push(...items);\n      return arr;\n    }, []);\n  } else {\n    errors = validateObject(schema, options);\n  }\n\n  if (errors.length > 0) {\n    throw new _ValidationError.default(errors, schema, configuration);\n  }\n}\n/**\n * @param {Schema} schema\n * @param {Array<object> | object} options\n * @returns {Array<SchemaUtilErrorObject>}\n */\n\n\nfunction validateObject(schema, options) {\n  const compiledSchema = ajv.compile(schema);\n  const valid = compiledSchema(options);\n  if (valid) return [];\n  return compiledSchema.errors ? filterErrors(compiledSchema.errors) : [];\n}\n/**\n * @param {Array<ErrorObject>} errors\n * @returns {Array<SchemaUtilErrorObject>}\n */\n\n\nfunction filterErrors(errors) {\n  /** @type {Array<SchemaUtilErrorObject>} */\n  let newErrors = [];\n\n  for (const error of\n  /** @type {Array<SchemaUtilErrorObject>} */\n  errors) {\n    const {\n      dataPath\n    } = error;\n    /** @type {Array<SchemaUtilErrorObject>} */\n\n    let children = [];\n    newErrors = newErrors.filter(oldError => {\n      if (oldError.dataPath.includes(dataPath)) {\n        if (oldError.children) {\n          children = children.concat(oldError.children.slice(0));\n        } // eslint-disable-next-line no-undefined, no-param-reassign\n\n\n        oldError.children = undefined;\n        children.push(oldError);\n        return false;\n      }\n\n      return true;\n    });\n\n    if (children.length) {\n      error.children = children;\n    }\n\n    newErrors.push(error);\n  }\n\n  return newErrors;\n} // TODO change after resolve https://github.com/microsoft/TypeScript/issues/34994\n\n\nvalidate.ValidationError = _ValidationError.default;\nvalidate.ValidateError = _ValidationError.default;\nvar _default = validate;\nexports.default = _default;","\n/**\n * Module exports.\n */\n\nmodule.exports = deprecate;\n\n/**\n * Mark that a method should not be used.\n * Returns a modified function which warns once by default.\n *\n * If `localStorage.noDeprecation = true` is set, then it is a no-op.\n *\n * If `localStorage.throwDeprecation = true` is set, then deprecated functions\n * will throw an Error when invoked.\n *\n * If `localStorage.traceDeprecation = true` is set, then deprecated functions\n * will invoke `console.trace()` instead of `console.error()`.\n *\n * @param {Function} fn - the function to deprecate\n * @param {String} msg - the string to print to the console when `fn` is invoked\n * @returns {Function} a new \"deprecated\" version of `fn`\n * @api public\n */\n\nfunction deprecate (fn, msg) {\n  if (config('noDeprecation')) {\n    return fn;\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (config('throwDeprecation')) {\n        throw new Error(msg);\n      } else if (config('traceDeprecation')) {\n        console.trace(msg);\n      } else {\n        console.warn(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n}\n\n/**\n * Checks `localStorage` for boolean values for the given `name`.\n *\n * @param {String} name\n * @returns {Boolean}\n * @api private\n */\n\nfunction config (name) {\n  // accessing global.localStorage can trigger a DOMException in sandboxed iframes\n  try {\n    if (!global.localStorage) return false;\n  } catch (_) {\n    return false;\n  }\n  var val = global.localStorage[name];\n  if (null == val) return false;\n  return String(val).toLowerCase() === 'true';\n}\n","var indexOf = function (xs, item) {\n    if (xs.indexOf) return xs.indexOf(item);\n    else for (var i = 0; i < xs.length; i++) {\n        if (xs[i] === item) return i;\n    }\n    return -1;\n};\nvar Object_keys = function (obj) {\n    if (Object.keys) return Object.keys(obj)\n    else {\n        var res = [];\n        for (var key in obj) res.push(key)\n        return res;\n    }\n};\n\nvar forEach = function (xs, fn) {\n    if (xs.forEach) return xs.forEach(fn)\n    else for (var i = 0; i < xs.length; i++) {\n        fn(xs[i], i, xs);\n    }\n};\n\nvar defineProp = (function() {\n    try {\n        Object.defineProperty({}, '_', {});\n        return function(obj, name, value) {\n            Object.defineProperty(obj, name, {\n                writable: true,\n                enumerable: false,\n                configurable: true,\n                value: value\n            })\n        };\n    } catch(e) {\n        return function(obj, name, value) {\n            obj[name] = value;\n        };\n    }\n}());\n\nvar globals = ['Array', 'Boolean', 'Date', 'Error', 'EvalError', 'Function',\n'Infinity', 'JSON', 'Math', 'NaN', 'Number', 'Object', 'RangeError',\n'ReferenceError', 'RegExp', 'String', 'SyntaxError', 'TypeError', 'URIError',\n'decodeURI', 'decodeURIComponent', 'encodeURI', 'encodeURIComponent', 'escape',\n'eval', 'isFinite', 'isNaN', 'parseFloat', 'parseInt', 'undefined', 'unescape'];\n\nfunction Context() {}\nContext.prototype = {};\n\nvar Script = exports.Script = function NodeScript (code) {\n    if (!(this instanceof Script)) return new Script(code);\n    this.code = code;\n};\n\nScript.prototype.runInContext = function (context) {\n    if (!(context instanceof Context)) {\n        throw new TypeError(\"needs a 'context' argument.\");\n    }\n    \n    var iframe = document.createElement('iframe');\n    if (!iframe.style) iframe.style = {};\n    iframe.style.display = 'none';\n    \n    document.body.appendChild(iframe);\n    \n    var win = iframe.contentWindow;\n    var wEval = win.eval, wExecScript = win.execScript;\n\n    if (!wEval && wExecScript) {\n        // win.eval() magically appears when this is called in IE:\n        wExecScript.call(win, 'null');\n        wEval = win.eval;\n    }\n    \n    forEach(Object_keys(context), function (key) {\n        win[key] = context[key];\n    });\n    forEach(globals, function (key) {\n        if (context[key]) {\n            win[key] = context[key];\n        }\n    });\n    \n    var winKeys = Object_keys(win);\n\n    var res = wEval.call(win, this.code);\n    \n    forEach(Object_keys(win), function (key) {\n        // Avoid copying circular objects like `top` and `window` by only\n        // updating existing context properties or new properties in the `win`\n        // that was only introduced after the eval.\n        if (key in context || indexOf(winKeys, key) === -1) {\n            context[key] = win[key];\n        }\n    });\n\n    forEach(globals, function (key) {\n        if (!(key in context)) {\n            defineProp(context, key, win[key]);\n        }\n    });\n    \n    document.body.removeChild(iframe);\n    \n    return res;\n};\n\nScript.prototype.runInThisContext = function () {\n    return eval(this.code); // maybe...\n};\n\nScript.prototype.runInNewContext = function (context) {\n    var ctx = Script.createContext(context);\n    var res = this.runInContext(ctx);\n\n    if (context) {\n        forEach(Object_keys(ctx), function (key) {\n            context[key] = ctx[key];\n        });\n    }\n\n    return res;\n};\n\nforEach(Object_keys(Script.prototype), function (name) {\n    exports[name] = Script[name] = function (code) {\n        var s = Script(code);\n        return s[name].apply(s, [].slice.call(arguments, 1));\n    };\n});\n\nexports.isContext = function (context) {\n    return context instanceof Context;\n};\n\nexports.createScript = function (code) {\n    return exports.Script(code);\n};\n\nexports.createContext = Script.createContext = function (context) {\n    var copy = new Context();\n    if(typeof context === 'object') {\n        forEach(Object_keys(context), function (key) {\n            copy[key] = context[key];\n        });\n    }\n    return copy;\n};\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","import React from 'react';\n\nimport Navbar from '../components/navbar';\nimport Footer from '../components/footer';\nimport Home from '../components/home';\n\n\nexport const Index = () => {\n  /*\n   * Replace the elements below with your own.\n   *\n   * Note: The corresponding styles are in the ./${fileName}.${style} file.\n   */\n  return (\n    <div className=\"app\">\n      <Navbar />\n      <Home/>\n      <Footer />\n    </div>\n  )\n};\n\nexport default Index;\n","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","module.exports = dll_2adc2403d89adc16ead0;"],"mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;ACzjrDA;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;AChrDA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;AChtGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AClpGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACxjLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACzjIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACvEA;AACA;AACA;;;;;;;;;;;;;ACFA;AACA;AACA;;;;;;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACnrzfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACzFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACjljEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACnjRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACpjzEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACjnvKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACjrvGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AChnFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACxzUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACjrejJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC5DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACnznxHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AClnUA;AACA;AACA;AACA;;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AChtSA;AACA;AACA;AACA;;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACpvl2GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AChnpHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC3HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACjHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACxFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AClEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACvnztnmxxrjxvhvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AClhGA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AChrznxvajxhrrrhwtpgbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC1DA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACpqDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACttpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AClrwlvtnmxxrjxvhGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC1BA;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACdjJA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACzxGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AClzUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AChrhHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACnFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC1BA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACxjlzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACzzHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACxnGA;AACA;AACA;AACA;AACA,6BAIA;AACA;;;;;;;;;;;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACvvLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AClxGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACvFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACjlrqzEA;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC7DA;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACNA;;;;;;;;;;;;ACAA;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AClKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AChEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AChFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACdlGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACptIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACnlvnIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACtqDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACttpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AClrwCA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC5FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AClvJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AClpJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;ACrBA;AAEA;AACA;AACA;AAGA;AACA;;;;;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;;;;;;;;;;;;;;;;;;;;;;;ACtBA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;A","sourceRoot":""}